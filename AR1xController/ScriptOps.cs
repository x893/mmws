using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Drawing;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Text;
using System.Threading;
using System.Windows.Forms;
using System.Xml;
using MathWorks.MATLAB.NET.Arrays;
using MatlabPostProcGui;
using Microsoft.CSharp.RuntimeBinder;
using Newtonsoft.Json;
using WinSCP;

namespace AR1xController
{
    public class ScriptOps
    {
        public void Init_Setup()
        {
            if (GlobalRef.dobject == null)
            {
                GlobalRef.dobject = new SetupObject();
                GlobalRef.dobject.createdByVersion = "";
                GlobalRef.dobject.createdOn = DateTime.Now;
                GlobalRef.dobject.configUsed = "";
                GlobalRef.dobject.captureHardware = "";
                GlobalRef.dobject.mmWaveDevice = "";
                GlobalRef.dobject.operatingFreq = 0;
            }
            if (GlobalRef.dobject.DCA1000Config == null)
            {
                GlobalRef.dobject.DCA1000Config = new DCA1000Config();
                GlobalRef.dobject.DCA1000Config.dataLoggingMode = "";
                GlobalRef.dobject.DCA1000Config.dataTransferMode = "";
                GlobalRef.dobject.DCA1000Config.dataCaptureMode = "";
                GlobalRef.dobject.DCA1000Config.packetSequenceEnable = 0;
                GlobalRef.dobject.DCA1000Config.packetDelay_us = 0;
            }
            if (GlobalRef.dobject.mmWaveDeviceConfig == null)
            {
                GlobalRef.dobject.mmWaveDeviceConfig = new MmWaveDeviceConfig();
                GlobalRef.dobject.mmWaveDeviceConfig.p00001f = "";
                GlobalRef.dobject.mmWaveDeviceConfig.RS232BaudRate = "";
                GlobalRef.dobject.mmWaveDeviceConfig.radarSSFirmware = "";
                GlobalRef.dobject.mmWaveDeviceConfig.masterSSFirmware = "";
            }
            if (GlobalRef.dobject.capturedFiles == null)
            {
                GlobalRef.dobject.capturedFiles = new CapturedFiles();
                GlobalRef.dobject.capturedFiles.numFilesCollected = 0;
                GlobalRef.dobject.capturedFiles.fileBasePath = "";
            }
            if (GlobalRef.dobject.capturedFiles.files == null)
            {
                GlobalRef.dobject.capturedFiles.files = new List<Files>();
            }
        }

        public void Init_JSON_1()
        {
            if (GlobalRef.jobject == null)
            {
                GlobalRef.jobject = new RootObject();
            }
            if (GlobalRef.jobject.configGenerator == null)
            {
                GlobalRef.jobject.configGenerator = new ConfigGenerator();
            }
            if (GlobalRef.jobject.configGenerator.createdBy != "mmWaveSensingEstimator")
            {
                GlobalRef.jobject.configGenerator.createdBy = "mmWaveStudio";
            }
            GlobalRef.jobject.configGenerator.createdOn = DateTime.Now;
            GlobalRef.jobject.configGenerator.isConfigIntermediate = 1;
            GlobalRef.jobject.configGenerator.isConfigured = 1;
            if (GlobalRef.jobject.currentVersion == null)
            {
                GlobalRef.jobject.currentVersion = new CurrentVersion();
            }
            if (GlobalRef.jobject.currentVersion.jsonCfgVersion == null)
            {
                GlobalRef.jobject.currentVersion.jsonCfgVersion = new JsonCfgVersion();
            }
            GlobalRef.jobject.currentVersion.jsonCfgVersion.major = 0;
            GlobalRef.jobject.currentVersion.jsonCfgVersion.minor = 4;
            GlobalRef.jobject.currentVersion.jsonCfgVersion.patch = 0;
            if (GlobalRef.jobject.currentVersion.DFPVersion == null)
            {
                GlobalRef.jobject.currentVersion.DFPVersion = new DFPVersion();
            }
            GlobalRef.jobject.currentVersion.DFPVersion.major = 1;
            GlobalRef.jobject.currentVersion.DFPVersion.minor = 2;
            GlobalRef.jobject.currentVersion.DFPVersion.patch = 0;
            if (GlobalRef.jobject.currentVersion.SDKVersion == null)
            {
                GlobalRef.jobject.currentVersion.SDKVersion = new SDKVersion();
            }
            GlobalRef.jobject.currentVersion.SDKVersion.major = 3;
            GlobalRef.jobject.currentVersion.SDKVersion.minor = 0;
            GlobalRef.jobject.currentVersion.SDKVersion.patch = 0;
            if (GlobalRef.jobject.currentVersion.mmwavelinkVersion == null)
            {
                GlobalRef.jobject.currentVersion.mmwavelinkVersion = new MmwavelinkVersion();
            }
            GlobalRef.jobject.currentVersion.mmwavelinkVersion.major = 1;
            GlobalRef.jobject.currentVersion.mmwavelinkVersion.minor = 2;
            GlobalRef.jobject.currentVersion.mmwavelinkVersion.patch = 0;
            GlobalRef.jobject.currentVersion.isConfigured = 1;
            if (GlobalRef.jobject.lastBackwardCompatibleVersion == null)
            {
                GlobalRef.jobject.lastBackwardCompatibleVersion = new LastBackwardCompatibleVersion();
            }
            if (GlobalRef.jobject.lastBackwardCompatibleVersion.DFPVersion == null)
            {
                GlobalRef.jobject.lastBackwardCompatibleVersion.DFPVersion = new DFPVersion2();
            }
            GlobalRef.jobject.lastBackwardCompatibleVersion.DFPVersion.major = 1;
            GlobalRef.jobject.lastBackwardCompatibleVersion.DFPVersion.minor = 1;
            GlobalRef.jobject.lastBackwardCompatibleVersion.DFPVersion.patch = 0;
            if (GlobalRef.jobject.lastBackwardCompatibleVersion.SDKVersion == null)
            {
                GlobalRef.jobject.lastBackwardCompatibleVersion.SDKVersion = new SDKVersion2();
            }
            GlobalRef.jobject.lastBackwardCompatibleVersion.SDKVersion.major = 2;
            GlobalRef.jobject.lastBackwardCompatibleVersion.SDKVersion.minor = 0;
            GlobalRef.jobject.lastBackwardCompatibleVersion.SDKVersion.patch = 0;
            if (GlobalRef.jobject.lastBackwardCompatibleVersion.mmwavelinkVersion == null)
            {
                GlobalRef.jobject.lastBackwardCompatibleVersion.mmwavelinkVersion = new MmwavelinkVersion2();
            }
            GlobalRef.jobject.lastBackwardCompatibleVersion.mmwavelinkVersion.major = 1;
            GlobalRef.jobject.lastBackwardCompatibleVersion.mmwavelinkVersion.minor = 1;
            GlobalRef.jobject.lastBackwardCompatibleVersion.mmwavelinkVersion.patch = 0;
            GlobalRef.jobject.lastBackwardCompatibleVersion.isConfigured = 1;
            if (GlobalRef.jobject.regulatoryRestrictions == null)
            {
                GlobalRef.jobject.regulatoryRestrictions = new RegulatoryRestrictions();
            }
            GlobalRef.jobject.regulatoryRestrictions.frequencyRangeBegin_GHz = 77;
            GlobalRef.jobject.regulatoryRestrictions.frequencyRangeEnd_GHz = 81;
            GlobalRef.jobject.regulatoryRestrictions.maxBandwidthAllowed_MHz = 4000;
            GlobalRef.jobject.regulatoryRestrictions.maxTransmitPowerAllowed_dBm = 12;
            GlobalRef.jobject.regulatoryRestrictions.isConfigured = 1;
            if (GlobalRef.jobject.systemConfig == null)
            {
                GlobalRef.jobject.systemConfig = new SystemConfig();
            }
            GlobalRef.jobject.systemConfig.summary = "This is a comments field not passed to device";
            if (GlobalRef.jobject.systemConfig.sceneParameters == null)
            {
                GlobalRef.jobject.systemConfig.sceneParameters = new SceneParameters();
            }
            GlobalRef.jobject.systemConfig.sceneParameters.ambientTemperature_degC = 20;
            GlobalRef.jobject.systemConfig.sceneParameters.maxDetectableRange_m = 10;
            GlobalRef.jobject.systemConfig.sceneParameters.rangeResolution_cm = 5;
            GlobalRef.jobject.systemConfig.sceneParameters.maxVelocity_kmph = 26;
            GlobalRef.jobject.systemConfig.sceneParameters.velocityResolution_kmph = 2;
            GlobalRef.jobject.systemConfig.sceneParameters.measurementRate = 10;
            GlobalRef.jobject.systemConfig.sceneParameters.typicalDetectedObjectRCS = 1;
            GlobalRef.jobject.systemConfig.isConfigured = 1;
            if (GlobalRef.jobject.processingChainConfig == null)
            {
                GlobalRef.jobject.processingChainConfig = new ProcessingChainConfig();
            }
            if (GlobalRef.jobject.processingChainConfig.detectionChain == null)
            {
                GlobalRef.jobject.processingChainConfig.detectionChain = new DetectionChain();
            }
            GlobalRef.jobject.processingChainConfig.detectionChain.name = "TI_GenericChain";
            GlobalRef.jobject.processingChainConfig.detectionChain.detectionLoss = 1;
            GlobalRef.jobject.processingChainConfig.detectionChain.systemLoss = 1;
            GlobalRef.jobject.processingChainConfig.detectionChain.implementationMargin = 2;
            GlobalRef.jobject.processingChainConfig.detectionChain.detectionSNR = 12;
            GlobalRef.jobject.processingChainConfig.detectionChain.theoreticalRxAntennaGain = 9;
            GlobalRef.jobject.processingChainConfig.detectionChain.theoreticalTxAntennaGain = 9;
            GlobalRef.jobject.processingChainConfig.isConfigured = 1;
            if (GlobalRef.jobject.mmWaveDevices == null)
            {
                GlobalRef.jobject.mmWaveDevices = new List<MmWaveDevice>();
            }
        }

        public int getMmwaveDevIndex(int mmwDevId)
        {
            int i;
            for (i = 0; i < GlobalRef.jobject.mmWaveDevices.Count; i++)
            {
                if (GlobalRef.jobject.mmWaveDevices[i].mmWaveDeviceId == mmwDevId)
                {
                    return i;
                }
            }
            MmWaveDevice mmWaveDevice = new MmWaveDevice();
            mmWaveDevice.mmWaveDeviceId = mmwDevId;
            mmWaveDevice.rfConfig = new RfConfig();
            mmWaveDevice.rfConfig.waveformType = "legacyFrameChirp";
            mmWaveDevice.rfConfig.MIMOScheme = "TDM";
            mmWaveDevice.rfConfig.rlCalibrationDataFile = "";
            mmWaveDevice.rfConfig.rlChanCfg_t = new RlChanCfgT();
            mmWaveDevice.rfConfig.rlChanCfg_t.p000006 = "0";
            mmWaveDevice.rfConfig.rlChanCfg_t.p000007 = "0";
            mmWaveDevice.rfConfig.rlChanCfg_t.cascading = 0;
            mmWaveDevice.rfConfig.rlChanCfg_t.cascadingPinoutCfg = "0";
            mmWaveDevice.rfConfig.rlChanCfg_t.isConfigured = 0;
            mmWaveDevice.rfConfig.rlAdcOutCfg_t = new RlAdcOutCfgT();
            mmWaveDevice.rfConfig.rlAdcOutCfg_t.fmt = new Fmt();
            mmWaveDevice.rfConfig.rlAdcOutCfg_t.fmt.b2AdcBits = 0;
            mmWaveDevice.rfConfig.rlAdcOutCfg_t.fmt.b8FullScaleReducFctr = 0;
            mmWaveDevice.rfConfig.rlAdcOutCfg_t.fmt.b2AdcOutFmt = 0;
            mmWaveDevice.rfConfig.rlAdcOutCfg_t.isConfigured = 0;
            mmWaveDevice.rfConfig.rlLowPowerModeCfg_t = new RlLowPowerModeCfgT();
            mmWaveDevice.rfConfig.rlLowPowerModeCfg_t.lpAdcMode = 0;
            mmWaveDevice.rfConfig.rlLowPowerModeCfg_t.isConfigured = 0;
            mmWaveDevice.rfConfig.rlProfiles = new List<RlProfiles>();
            mmWaveDevice.rfConfig.rlChirps = new List<RlChirps>();
            mmWaveDevice.rfConfig.rlAdvChirpCfg_t = new RlAdvChirpCfgT();
            mmWaveDevice.rfConfig.rlAdvChirpCfg_t.chirpParamIdx = 0;
            mmWaveDevice.rfConfig.rlAdvChirpCfg_t.resetMode = 0;
            mmWaveDevice.rfConfig.rlAdvChirpCfg_t.patternMode = 0;
            mmWaveDevice.rfConfig.rlAdvChirpCfg_t.resetPeriod = 0;
            mmWaveDevice.rfConfig.rlAdvChirpCfg_t.fixedDeltaInc = 0.0;
            mmWaveDevice.rfConfig.rlAdvChirpCfg_t.paramUpdatePeriod = 0;
            mmWaveDevice.rfConfig.rlAdvChirpCfg_t.isConfigured = 0;
            mmWaveDevice.rfConfig.rlRfCalMonTimeUntConf_t = new RlRfCalMonTimeUntConfT();
            mmWaveDevice.rfConfig.rlRfCalMonTimeUntConf_t.calibMonTimeUnit = 1;
            mmWaveDevice.rfConfig.rlRfCalMonTimeUntConf_t.isConfigured = 0;
            mmWaveDevice.rfConfig.rlRfCalMonFreqLimitConf_t = new RlRfCalMonFreqLimitConfT();
            mmWaveDevice.rfConfig.rlRfCalMonFreqLimitConf_t.freqLimitHigh_GHz = 0.0;
            mmWaveDevice.rfConfig.rlRfCalMonFreqLimitConf_t.freqLimitLow_GHz = 0.0;
            mmWaveDevice.rfConfig.rlRfCalMonFreqLimitConf_t.isConfigured = 0;
            mmWaveDevice.rfConfig.rlRfInitCalConf_t = new RlRfInitCalConfT();
            mmWaveDevice.rfConfig.rlRfInitCalConf_t.calibEnMask = "0";
            mmWaveDevice.rfConfig.rlRfInitCalConf_t.isConfigured = 0;
            mmWaveDevice.rfConfig.rlRunTimeCalibConf_t = new RlRunTimeCalibConfT();
            mmWaveDevice.rfConfig.rlRunTimeCalibConf_t.oneTimeCalibEnMask = "0";
            mmWaveDevice.rfConfig.rlRunTimeCalibConf_t.periodicCalibEnMask = "0";
            mmWaveDevice.rfConfig.rlRunTimeCalibConf_t.calibPeriodicity = 0;
            mmWaveDevice.rfConfig.rlRunTimeCalibConf_t.reportEn = 0;
            mmWaveDevice.rfConfig.rlRunTimeCalibConf_t.txPowerCalMode = 0;
            mmWaveDevice.rfConfig.rlRunTimeCalibConf_t.isConfigured = 0;
            mmWaveDevice.rfConfig.rlFrameCfg_t = new RlFrameCfgT();
            mmWaveDevice.rfConfig.rlFrameCfg_t.chirpStartIdx = 0;
            mmWaveDevice.rfConfig.rlFrameCfg_t.chirpEndIdx = 0;
            mmWaveDevice.rfConfig.rlFrameCfg_t.numFrames = 0;
            mmWaveDevice.rfConfig.rlFrameCfg_t.numLoops = 0;
            mmWaveDevice.rfConfig.rlFrameCfg_t.framePeriodicity_msec = 0f;
            mmWaveDevice.rfConfig.rlFrameCfg_t.numDummyChirpsAtEnd = 0;
            mmWaveDevice.rfConfig.rlFrameCfg_t.frameTriggerDelay = 0f;
            mmWaveDevice.rfConfig.rlFrameCfg_t.triggerSelect = 0;
            mmWaveDevice.rfConfig.rlFrameCfg_t.isConfigured = 0;
            mmWaveDevice.rfConfig.rlAdvFrameCfg_t = new RlAdvFrameCfgT();
            mmWaveDevice.rfConfig.rlAdvFrameCfg_t.frameSeq = new FrameSeq();
            mmWaveDevice.rfConfig.rlAdvFrameCfg_t.frameSeq.numOfSubFrames = 0;
            mmWaveDevice.rfConfig.rlAdvFrameCfg_t.frameSeq.forceProfile = 0;
            mmWaveDevice.rfConfig.rlAdvFrameCfg_t.frameSeq.numFrames = 0;
            mmWaveDevice.rfConfig.rlAdvFrameCfg_t.frameSeq.triggerSelect = 0;
            mmWaveDevice.rfConfig.rlAdvFrameCfg_t.frameSeq.frameTrigDelay_usec = 0.0;
            mmWaveDevice.rfConfig.rlAdvFrameCfg_t.frameSeq.loopBackCfg = "0";
            mmWaveDevice.rfConfig.rlAdvFrameCfg_t.frameSeq.subFrameTrigger = 0;
            mmWaveDevice.rfConfig.rlAdvFrameCfg_t.frameSeq.subFrameCfg = new List<SubFrameCfg>();
            for (int j = 0; j < 4; j++)
            {
                mmWaveDevice.rfConfig.rlAdvFrameCfg_t.frameSeq.subFrameCfg.Add(new SubFrameCfg());
                mmWaveDevice.rfConfig.rlAdvFrameCfg_t.frameSeq.subFrameCfg[j].rlSubFrameCfg_t = new RlSubFrameCfgT();
            }
            mmWaveDevice.rfConfig.rlAdvFrameCfg_t.frameData = new FrameData();
            mmWaveDevice.rfConfig.rlAdvFrameCfg_t.frameData.numSubFrames = 0;
            mmWaveDevice.rfConfig.rlAdvFrameCfg_t.frameData.subframeDataCfg = new List<SubframeDataCfg>();
            for (int k = 0; k < 4; k++)
            {
                mmWaveDevice.rfConfig.rlAdvFrameCfg_t.frameData.subframeDataCfg.Add(new SubframeDataCfg());
                mmWaveDevice.rfConfig.rlAdvFrameCfg_t.frameData.subframeDataCfg[k].rlSubFrameDataCfg_t = new RlSubFrameDataCfgT();
            }
            mmWaveDevice.rfConfig.rlAdvFrameCfg_t.isConfigured = 0;
            mmWaveDevice.rfConfig.rlContModeCfg_t = new RlContModeCfgT();
            mmWaveDevice.rfConfig.rlContModeCfg_t.startFreqConst_GHz = 0.0;
            mmWaveDevice.rfConfig.rlContModeCfg_t.digOutSampleRate = 0.0;
            mmWaveDevice.rfConfig.rlContModeCfg_t.rxGain_dB = "0";
            mmWaveDevice.rfConfig.rlContModeCfg_t.hpfCornerFreq1 = 0;
            mmWaveDevice.rfConfig.rlContModeCfg_t.hpfCornerFreq2 = 0;
            mmWaveDevice.rfConfig.rlContModeCfg_t.txOutPowerBackoffCode = "0";
            mmWaveDevice.rfConfig.rlContModeCfg_t.txPhaseShifter = "0";
            mmWaveDevice.rfConfig.rlContModeCfg_t.vcoSelect = "0";
            mmWaveDevice.rfConfig.rlContModeCfg_t.isConfigured = 0;
            mmWaveDevice.rfConfig.rlContModeEn_t = new RlContModeEnT();
            mmWaveDevice.rfConfig.rlContModeEn_t.contModeEn = 0;
            mmWaveDevice.rfConfig.rlContModeCfg_t.isConfigured = 0;
            mmWaveDevice.rfConfig.p000010 = new c0001d2();
            mmWaveDevice.rfConfig.p000010.b2SrcSel = 0;
            mmWaveDevice.rfConfig.p000010.isConfigured = 0;
            mmWaveDevice.rfConfig.rlBpmKCounterSel_t = new RlBpmKCounterSelT();
            mmWaveDevice.rfConfig.rlBpmKCounterSel_t.b1BpmKEnd = 0;
            mmWaveDevice.rfConfig.rlBpmKCounterSel_t.b1BpmKStart = 0;
            mmWaveDevice.rfConfig.rlBpmKCounterSel_t.isConfigured = 0;
            mmWaveDevice.rfConfig.p000011 = new c0001d5();
            mmWaveDevice.rfConfig.p000011.mode = new Mode();
            mmWaveDevice.rfConfig.p000011.mode.b2SrcSel = 0;
            mmWaveDevice.rfConfig.p000011.isConfigured = 0;
            mmWaveDevice.rfConfig.p000012 = new List<c0001d7>();
            mmWaveDevice.rfConfig.p000013 = new c0001d8();
            mmWaveDevice.rfConfig.p000013.aeDirection = "0";
            mmWaveDevice.rfConfig.p000013.aeControl = "0";
            mmWaveDevice.rfConfig.p000013.p000009 = 0;
            mmWaveDevice.rfConfig.p000013.p00000a = 0;
            mmWaveDevice.rfConfig.p000013.isConfigured = 0;
            mmWaveDevice.rfConfig.rlRfMiscConf_t = new RlRfMiscConfT();
            mmWaveDevice.rfConfig.rlRfMiscConf_t.miscCtl = "0";
            mmWaveDevice.rfConfig.rlRfMiscConf_t.isConfigured = 0;
            mmWaveDevice.rfConfig.rlRfTxFreqPwrLimitMonConf_t = new RlRfTxFreqPwrLimitMonConfT();
            mmWaveDevice.rfConfig.rlRfTxFreqPwrLimitMonConf_t.freqLimitLowTx0 = 0.0;
            mmWaveDevice.rfConfig.rlRfTxFreqPwrLimitMonConf_t.freqLimitLowTx1 = 0.0;
            mmWaveDevice.rfConfig.rlRfTxFreqPwrLimitMonConf_t.freqLimitLowTx2 = 0.0;
            mmWaveDevice.rfConfig.rlRfTxFreqPwrLimitMonConf_t.freqLimitHighTx0 = 0.0;
            mmWaveDevice.rfConfig.rlRfTxFreqPwrLimitMonConf_t.freqLimitHighTx1 = 0.0;
            mmWaveDevice.rfConfig.rlRfTxFreqPwrLimitMonConf_t.freqLimitHighTx2 = 0.0;
            mmWaveDevice.rfConfig.rlRfTxFreqPwrLimitMonConf_t.tx0PwrBackOff = 0;
            mmWaveDevice.rfConfig.rlRfTxFreqPwrLimitMonConf_t.tx1PwrBackOff = 0;
            mmWaveDevice.rfConfig.rlRfTxFreqPwrLimitMonConf_t.tx2PwrBackOff = 0;
            mmWaveDevice.rfConfig.rlRfTxFreqPwrLimitMonConf_t.isConfigured = 0;
            mmWaveDevice.rfConfig.rlDynPwrSave_t = new RlDynPwrSaveT();
            mmWaveDevice.rfConfig.rlDynPwrSave_t.p00000b = "0";
            mmWaveDevice.rfConfig.rlDynPwrSave_t.isConfigured = 0;
            mmWaveDevice.rfConfig.p000014 = new c0001de();
            mmWaveDevice.rfConfig.p000014.enable = "0";
            mmWaveDevice.rfConfig.p000014.bufferEnable = "0";
            mmWaveDevice.rfConfig.p000014.numOfSamples = new List<RlGpAdcSamples>();
            for (int l = 0; l < 6; l++)
            {
                mmWaveDevice.rfConfig.p000014.numOfSamples.Add(new RlGpAdcSamples());
                mmWaveDevice.rfConfig.p000014.numOfSamples[l].rlGpAdcSamples_t = new RlGpAdcSamplesT();
            }
            mmWaveDevice.rfConfig.p000014.isConfigured = 0;
            mmWaveDevice.rfConfig.p000015 = new List<RlRfPhaseShiftCfgT>();
            mmWaveDevice.rfConfig.rlInterChirpBlkCtrlCfg_t = new RlInterChirpBlkCtrlCfgT();
            mmWaveDevice.rfConfig.rlInterChirpBlkCtrlCfg_t.rx02RfTurnOffTime_us = 0.0;
            mmWaveDevice.rfConfig.rlInterChirpBlkCtrlCfg_t.rx13RfTurnOffTime_us = 0.0;
            mmWaveDevice.rfConfig.rlInterChirpBlkCtrlCfg_t.rx02BbTurnOffTime_us = 0.0;
            mmWaveDevice.rfConfig.rlInterChirpBlkCtrlCfg_t.rx12BbTurnOffTime_us = 0.0;
            mmWaveDevice.rfConfig.rlInterChirpBlkCtrlCfg_t.rx02RfPreEnTime_us = 0.0;
            mmWaveDevice.rfConfig.rlInterChirpBlkCtrlCfg_t.rx13RfPreEnTime_us = 0.0;
            mmWaveDevice.rfConfig.rlInterChirpBlkCtrlCfg_t.rx02BbPreEnTime_us = 0.0;
            mmWaveDevice.rfConfig.rlInterChirpBlkCtrlCfg_t.rx13BbPreEnTime_us = 0.0;
            mmWaveDevice.rfConfig.rlInterChirpBlkCtrlCfg_t.rx02RfTurnOnTime_us = 0.0;
            mmWaveDevice.rfConfig.rlInterChirpBlkCtrlCfg_t.rx13RfTurnOnTime_us = 0.0;
            mmWaveDevice.rfConfig.rlInterChirpBlkCtrlCfg_t.rx02BbTurnOnTime_us = 0.0;
            mmWaveDevice.rfConfig.rlInterChirpBlkCtrlCfg_t.rx13BbTurnOnTime_us = 0.0;
            mmWaveDevice.rfConfig.rlInterChirpBlkCtrlCfg_t.rxLoChainTurnOffTime_us = 0.0;
            mmWaveDevice.rfConfig.rlInterChirpBlkCtrlCfg_t.txLoChainTurnOffTime_us = 0.0;
            mmWaveDevice.rfConfig.rlInterChirpBlkCtrlCfg_t.rxLoChainTurnOnTime_us = 0.0;
            mmWaveDevice.rfConfig.rlInterChirpBlkCtrlCfg_t.txLoChainTurnOnTime_us = 0.0;
            mmWaveDevice.rfConfig.rlInterChirpBlkCtrlCfg_t.isConfigured = 0;
            mmWaveDevice.rfConfig.rlRfProgFiltCoeff_t = new RlRfProgFiltCoeffT();
            mmWaveDevice.rfConfig.rlRfProgFiltCoeff_t.coeffArray = new List<int>();
            mmWaveDevice.rfConfig.rlRfProgFiltCoeff_t.isConfigured = 0;
            mmWaveDevice.rfConfig.rlRfProgFiltConfs = new List<RlRfProgFiltConfT>();
            mmWaveDevice.rfConfig.rlInterRxGainPhConf_t = new RlInterRxGainPhConf();
            mmWaveDevice.rfConfig.rlInterRxGainPhConf_t.profileIndx = 0;
            mmWaveDevice.rfConfig.rlInterRxGainPhConf_t.digRxGain = new List<double>();
            for (int m = 0; m < 4; m++)
            {
                mmWaveDevice.rfConfig.rlInterRxGainPhConf_t.digRxGain.Add(0.0);
            }
            mmWaveDevice.rfConfig.rlInterRxGainPhConf_t.digRxPhShift = new List<double>();
            for (int n = 0; n < 4; n++)
            {
                mmWaveDevice.rfConfig.rlInterRxGainPhConf_t.digRxPhShift.Add(0.0);
            }
            mmWaveDevice.rfConfig.rlInterRxGainPhConf_t.isConfigured = 0;
            mmWaveDevice.rfConfig.rlTestSource_t = new RlTestSourceT();
            mmWaveDevice.rfConfig.rlTestSource_t.rlTestSourceObjects = new List<RlTestSourceObjects>();
            for (int n = 0; n < 2; n++)
            {
                mmWaveDevice.rfConfig.rlTestSource_t.rlTestSourceObjects.Add(new RlTestSourceObjects());
                mmWaveDevice.rfConfig.rlTestSource_t.rlTestSourceObjects[n].rlTestSourceObject_t = new RlTestSourceObjectT();
            }
            mmWaveDevice.rfConfig.rlTestSource_t.rlTestSourceRxAntPos = new List<RlTestSourceRxAntPos>();
            for (int n = 0; n < 4; n++)
            {
                mmWaveDevice.rfConfig.rlTestSource_t.rlTestSourceRxAntPos.Add(new RlTestSourceRxAntPos());
                mmWaveDevice.rfConfig.rlTestSource_t.rlTestSourceRxAntPos[n].rlTestSourceAntPos_t = new RlTestSourceAntPosT();
            }
            mmWaveDevice.rfConfig.rlTestSource_t.rlTestSourceTxAntPos = new List<RlTestSourceTxAntPos>();
            for (int n = 0; n < 3; n++)
            {
                mmWaveDevice.rfConfig.rlTestSource_t.rlTestSourceTxAntPos.Add(new RlTestSourceTxAntPos());
                mmWaveDevice.rfConfig.rlTestSource_t.rlTestSourceTxAntPos[n].rlTestSourceAntPos_t = new RlTestSourceAntPosT2();
            }
            mmWaveDevice.rfConfig.rlTestSource_t.isConfigured = 0;
            mmWaveDevice.rfConfig.rlTestSourceEnable_t = new RlTestSourceEnableT();
            mmWaveDevice.rfConfig.rlTestSourceEnable_t.tsEnable = 0;
            mmWaveDevice.rfConfig.rlTestSourceEnable_t.isConfigured = 0;
            mmWaveDevice.rfConfig.rlRfLdoBypassCfg_t = new RlRfLdoBypassCfgT();
            mmWaveDevice.rfConfig.rlRfLdoBypassCfg_t.ldoBypassEnable = 0;
            mmWaveDevice.rfConfig.rlRfLdoBypassCfg_t.supplyMonIrDrop = 0;
            mmWaveDevice.rfConfig.rlRfLdoBypassCfg_t.ioSupplyIndicator = 0;
            mmWaveDevice.rfConfig.rlRfLdoBypassCfg_t.isConfigured = 0;
            mmWaveDevice.rfConfig.rlRfPALoopbackCfg_t = new RlRfPALoopbackCfgT();
            mmWaveDevice.rfConfig.rlRfPALoopbackCfg_t.paLoopbackFreq_MHz = 0;
            mmWaveDevice.rfConfig.rlRfPALoopbackCfg_t.p00000c = 0;
            mmWaveDevice.rfConfig.rlRfPALoopbackCfg_t.isConfigured = 0;
            mmWaveDevice.rfConfig.rlRfPSLoopbackCfg_t = new RlRfPSLoopbackCfgT();
            mmWaveDevice.rfConfig.rlRfPSLoopbackCfg_t.psLoopbackFreq_KHz = 0;
            mmWaveDevice.rfConfig.rlRfPSLoopbackCfg_t.p00000d = 0;
            mmWaveDevice.rfConfig.rlRfPSLoopbackCfg_t.psLoopbackTxId = "0";
            mmWaveDevice.rfConfig.rlRfPSLoopbackCfg_t.pgaGainIndex = 0;
            mmWaveDevice.rfConfig.rlRfPSLoopbackCfg_t.isConfigured = 0;
            mmWaveDevice.rfConfig.rlRfIFLoopbackCfg_t = new RlRfIFLoopbackCfgT();
            mmWaveDevice.rfConfig.rlRfIFLoopbackCfg_t.ifLoopbackFreq = 0;
            mmWaveDevice.rfConfig.rlRfIFLoopbackCfg_t.ifLoopbackEn = 0;
            mmWaveDevice.rfConfig.rlRfIFLoopbackCfg_t.isConfigured = 0;
            mmWaveDevice.rfConfig.rlLoopbackBursts = new List<RlLoopbackBursts>();
            mmWaveDevice.rfConfig.rllatentFault_t = new RllatentFaultT();
            mmWaveDevice.rfConfig.rllatentFault_t.testEn1 = "0";
            mmWaveDevice.rfConfig.rllatentFault_t.testEn2 = "0";
            mmWaveDevice.rfConfig.rllatentFault_t.repMode = 0;
            mmWaveDevice.rfConfig.rllatentFault_t.testMode = 0;
            mmWaveDevice.rfConfig.rllatentFault_t.isConfigured = 0;
            mmWaveDevice.rfConfig.rlperiodicTest_t = new RlperiodicTestT();
            mmWaveDevice.rfConfig.rlperiodicTest_t.periodicity_msec = 0;
            mmWaveDevice.rfConfig.rlperiodicTest_t.testEn = "0";
            mmWaveDevice.rfConfig.rlperiodicTest_t.repMode = 0;
            mmWaveDevice.rfConfig.rlperiodicTest_t.isConfigured = 0;
            mmWaveDevice.rfConfig.rltestPattern_t = new RltestPatternT();
            mmWaveDevice.rfConfig.rltestPattern_t.testPatGenCtrl = 0;
            mmWaveDevice.rfConfig.rltestPattern_t.testPatGenTime = 0;
            mmWaveDevice.rfConfig.rltestPattern_t.testPatrnPktSize = 0;
            mmWaveDevice.rfConfig.rltestPattern_t.numTestPtrnPkts = 0;
            mmWaveDevice.rfConfig.rltestPattern_t.testPatRx0Icfg = "0";
            mmWaveDevice.rfConfig.rltestPattern_t.testPatRx0Qcfg = "0";
            mmWaveDevice.rfConfig.rltestPattern_t.testPatRx1Icfg = "0";
            mmWaveDevice.rfConfig.rltestPattern_t.testPatRx1Qcfg = "0";
            mmWaveDevice.rfConfig.rltestPattern_t.testPatRx2Icfg = "0";
            mmWaveDevice.rfConfig.rltestPattern_t.testPatRx2Qcfg = "0";
            mmWaveDevice.rfConfig.rltestPattern_t.testPatRx3Icfg = "0";
            mmWaveDevice.rfConfig.rltestPattern_t.testPatRx3Qcfg = "0";
            mmWaveDevice.rfConfig.rltestPattern_t.isConfigured = 0;
            mmWaveDevice.rfConfig.rlDynChirpCfgs = new List<RlDynChirpCfgs>();
            mmWaveDevice.rfConfig.rlDynPerChirpPhShftCfgs = new List<RlDynPerChirpPhShftCfgs>();
            mmWaveDevice.rawDataCaptureConfig = new RawDataCaptureConfig();
            mmWaveDevice.rawDataCaptureConfig.rlDevDataFmtCfg_t = new RlDevDataFmtCfgT();
            mmWaveDevice.rawDataCaptureConfig.rlDevDataFmtCfg_t.iqSwapSel = 0;
            mmWaveDevice.rawDataCaptureConfig.rlDevDataFmtCfg_t.chInterleave = 0;
            mmWaveDevice.rawDataCaptureConfig.rlDevDataFmtCfg_t.isConfigured = 0;
            mmWaveDevice.rawDataCaptureConfig.rlDevDataPathCfg_t = new RlDevDataPathCfgT();
            mmWaveDevice.rawDataCaptureConfig.rlDevDataPathCfg_t.intfSel = 0;
            mmWaveDevice.rawDataCaptureConfig.rlDevDataPathCfg_t.p000016 = "0";
            mmWaveDevice.rawDataCaptureConfig.rlDevDataPathCfg_t.p000017 = "0";
            mmWaveDevice.rawDataCaptureConfig.rlDevDataPathCfg_t.cqConfig = 0;
            mmWaveDevice.rawDataCaptureConfig.rlDevDataPathCfg_t.cq0TransSize = 0;
            mmWaveDevice.rawDataCaptureConfig.rlDevDataPathCfg_t.cq1TransSize = 0;
            mmWaveDevice.rawDataCaptureConfig.rlDevDataPathCfg_t.cq2TransSize = 0;
            mmWaveDevice.rawDataCaptureConfig.rlDevDataPathCfg_t.isConfigured = 0;
            mmWaveDevice.rawDataCaptureConfig.rlDevLaneEnable_t = new RlDevLaneEnableT();
            mmWaveDevice.rawDataCaptureConfig.rlDevLaneEnable_t.laneEn = "0";
            mmWaveDevice.rawDataCaptureConfig.rlDevLaneEnable_t.isConfigured = 0;
            mmWaveDevice.rawDataCaptureConfig.rlDevDataPathClkCfg_t = new RlDevDataPathClkCfgT();
            mmWaveDevice.rawDataCaptureConfig.rlDevDataPathClkCfg_t.p000018 = 0;
            mmWaveDevice.rawDataCaptureConfig.rlDevDataPathClkCfg_t.dataRate_Mbps = 0;
            mmWaveDevice.rawDataCaptureConfig.rlDevDataPathClkCfg_t.isConfigured = 0;
            mmWaveDevice.rawDataCaptureConfig.rlDevLvdsLaneCfg_t = new RlDevLvdsLaneCfgT();
            mmWaveDevice.rawDataCaptureConfig.rlDevLvdsLaneCfg_t.laneFmtMap = 0;
            mmWaveDevice.rawDataCaptureConfig.rlDevLvdsLaneCfg_t.laneParamCfg = "0";
            mmWaveDevice.rawDataCaptureConfig.rlDevLvdsLaneCfg_t.isConfigured = 0;
            mmWaveDevice.rawDataCaptureConfig.rlDevCsi2Cfg_t = new RlDevCsi2CfgT();
            mmWaveDevice.rawDataCaptureConfig.rlDevCsi2Cfg_t.lanePosPolSel = "0";
            mmWaveDevice.rawDataCaptureConfig.rlDevCsi2Cfg_t.isConfigured = 0;
            mmWaveDevice.rawDataCaptureConfig.rlDevMiscCfg_t = new RlDevMiscCfgT();
            mmWaveDevice.rawDataCaptureConfig.rlDevMiscCfg_t.p00000a = "0";
            mmWaveDevice.rawDataCaptureConfig.rlDevMiscCfg_t.isConfigured = 0;
            mmWaveDevice.monitoringConfig = new MonitoringConfig1();
            mmWaveDevice.monitoringConfig.rlMonDigEnables_t = new RlMonDigEnablesT();
            mmWaveDevice.monitoringConfig.rlMonDigEnables_t.enMask = "0";
            mmWaveDevice.monitoringConfig.rlMonDigEnables_t.testMode = 0;
            mmWaveDevice.monitoringConfig.rlMonDigEnables_t.isConfigured = 0;
            mmWaveDevice.monitoringConfig.rlDigMonPeriodicConf_t = new RlDigMonPeriodicConfT();
            mmWaveDevice.monitoringConfig.rlDigMonPeriodicConf_t.reportMode = 0;
            mmWaveDevice.monitoringConfig.rlDigMonPeriodicConf_t.periodicEnableMask = "0";
            mmWaveDevice.monitoringConfig.rlDigMonPeriodicConf_t.isConfigured = 0;
            mmWaveDevice.monitoringConfig.rlMonAnaEnables_t = new RlMonAnaEnablesT();
            mmWaveDevice.monitoringConfig.rlMonAnaEnables_t.enMask = "0";
            mmWaveDevice.monitoringConfig.rlMonAnaEnables_t.isConfigured = 0;
            mmWaveDevice.monitoringConfig.rlTempMonConf_t = new RlTempMonConfT();
            mmWaveDevice.monitoringConfig.rlTempMonConf_t.reportMode = 0;
            mmWaveDevice.monitoringConfig.rlTempMonConf_t.anaTempThreshMin = 0;
            mmWaveDevice.monitoringConfig.rlTempMonConf_t.anaTempThreshMax = 0;
            mmWaveDevice.monitoringConfig.rlTempMonConf_t.digTempThreshMin = 0;
            mmWaveDevice.monitoringConfig.rlTempMonConf_t.digTempThreshMax = 0;
            mmWaveDevice.monitoringConfig.rlTempMonConf_t.tempDiffThresh = 0;
            mmWaveDevice.monitoringConfig.rlTempMonConf_t.isConfigured = 0;
            mmWaveDevice.monitoringConfig.rlRxGainPhaseMonConf_t = new RlRxGainPhaseMonConfT();
            mmWaveDevice.monitoringConfig.rlRxGainPhaseMonConf_t.profileIndx = 0;
            mmWaveDevice.monitoringConfig.rlRxGainPhaseMonConf_t.rfFreqBitMask = "0";
            mmWaveDevice.monitoringConfig.rlRxGainPhaseMonConf_t.txSel = 0;
            mmWaveDevice.monitoringConfig.rlRxGainPhaseMonConf_t.rxGainAbsThresh = 0.0;
            mmWaveDevice.monitoringConfig.rlRxGainPhaseMonConf_t.rxGainMismatchErrThresh = 0.0;
            mmWaveDevice.monitoringConfig.rlRxGainPhaseMonConf_t.rxGainFlatnessErrThresh = 0.0;
            mmWaveDevice.monitoringConfig.rlRxGainPhaseMonConf_t.rxGainPhaseMismatchErrThresh = 0.0;
            mmWaveDevice.monitoringConfig.rlRxGainPhaseMonConf_t.rxGainMismatchOffsetVal = new List<List<double>>();
            for (int num = 0; num < 3; num++)
            {
                mmWaveDevice.monitoringConfig.rlRxGainPhaseMonConf_t.rxGainMismatchOffsetVal.Add(new List<double>());
                for (int num2 = 0; num2 < 8; num2++)
                {
                    mmWaveDevice.monitoringConfig.rlRxGainPhaseMonConf_t.rxGainMismatchOffsetVal[num].Add(0.0);
                }
            }
            mmWaveDevice.monitoringConfig.rlRxGainPhaseMonConf_t.rxGainPhaseMismatchOffsetVal = new List<List<double>>();
            for (int num = 0; num < 3; num++)
            {
                mmWaveDevice.monitoringConfig.rlRxGainPhaseMonConf_t.rxGainPhaseMismatchOffsetVal.Add(new List<double>());
                for (int num3 = 0; num3 < 8; num3++)
                {
                    mmWaveDevice.monitoringConfig.rlRxGainPhaseMonConf_t.rxGainPhaseMismatchOffsetVal[num].Add(0.0);
                }
            }
            mmWaveDevice.monitoringConfig.rlRxGainPhaseMonConf_t.isConfigured = 0;
            mmWaveDevice.monitoringConfig.rlRxNoiseMonConf_t = new RlRxNoiseMonConfT();
            mmWaveDevice.monitoringConfig.rlRxNoiseMonConf_t.profileIndx = 0;
            mmWaveDevice.monitoringConfig.rlRxNoiseMonConf_t.rfFreqBitMask = "0";
            mmWaveDevice.monitoringConfig.rlRxNoiseMonConf_t.reportMode = 0;
            mmWaveDevice.monitoringConfig.rlRxNoiseMonConf_t.noiseThresh = 0.0;
            mmWaveDevice.monitoringConfig.rlRxNoiseMonConf_t.isConfigured = 0;
            mmWaveDevice.monitoringConfig.rlRxIfStageMonConf_t = new RlRxIfStageMonConfT();
            mmWaveDevice.monitoringConfig.rlRxIfStageMonConf_t.profileIndx = 0;
            mmWaveDevice.monitoringConfig.rlRxIfStageMonConf_t.reportMode = 0;
            mmWaveDevice.monitoringConfig.rlRxIfStageMonConf_t.hpfCutoffErrThresh = 0;
            mmWaveDevice.monitoringConfig.rlRxIfStageMonConf_t.lpfCutoffErrThresh = 0;
            mmWaveDevice.monitoringConfig.rlRxIfStageMonConf_t.ifaGainErrThresh = 0.0;
            mmWaveDevice.monitoringConfig.rlRxIfStageMonConf_t.isConfigured = 0;
            mmWaveDevice.monitoringConfig.rlAllTxPowMonConf_t = new RlAllTxPowMonConfT();
            mmWaveDevice.monitoringConfig.rlAllTxPowMonConf_t.tx0PowrMonCfg = new Tx0PowrMonCfg();
            mmWaveDevice.monitoringConfig.rlAllTxPowMonConf_t.tx0PowrMonCfg.profileIndx = 0;
            mmWaveDevice.monitoringConfig.rlAllTxPowMonConf_t.tx0PowrMonCfg.rfFreqBitMask = "0";
            mmWaveDevice.monitoringConfig.rlAllTxPowMonConf_t.tx0PowrMonCfg.reportMode = 0;
            mmWaveDevice.monitoringConfig.rlAllTxPowMonConf_t.tx0PowrMonCfg.txPowAbsErrThresh = 0.0;
            mmWaveDevice.monitoringConfig.rlAllTxPowMonConf_t.tx0PowrMonCfg.txPowFlatnessErrThresh = 0.0;
            mmWaveDevice.monitoringConfig.rlAllTxPowMonConf_t.tx1PowrMonCfg = new Tx1PowrMonCfg();
            mmWaveDevice.monitoringConfig.rlAllTxPowMonConf_t.tx1PowrMonCfg.profileIndx = 0;
            mmWaveDevice.monitoringConfig.rlAllTxPowMonConf_t.tx1PowrMonCfg.rfFreqBitMask = "0";
            mmWaveDevice.monitoringConfig.rlAllTxPowMonConf_t.tx1PowrMonCfg.reportMode = 0;
            mmWaveDevice.monitoringConfig.rlAllTxPowMonConf_t.tx1PowrMonCfg.txPowAbsErrThresh = 0.0;
            mmWaveDevice.monitoringConfig.rlAllTxPowMonConf_t.tx1PowrMonCfg.txPowFlatnessErrThresh = 0.0;
            mmWaveDevice.monitoringConfig.rlAllTxPowMonConf_t.tx2PowrMonCfg = new Tx2PowrMonCfg();
            mmWaveDevice.monitoringConfig.rlAllTxPowMonConf_t.tx2PowrMonCfg.profileIndx = 0;
            mmWaveDevice.monitoringConfig.rlAllTxPowMonConf_t.tx2PowrMonCfg.rfFreqBitMask = "0";
            mmWaveDevice.monitoringConfig.rlAllTxPowMonConf_t.tx2PowrMonCfg.reportMode = 0;
            mmWaveDevice.monitoringConfig.rlAllTxPowMonConf_t.tx2PowrMonCfg.txPowAbsErrThresh = 0.0;
            mmWaveDevice.monitoringConfig.rlAllTxPowMonConf_t.tx2PowrMonCfg.txPowFlatnessErrThresh = 0.0;
            mmWaveDevice.monitoringConfig.rlAllTxPowMonConf_t.isConfigured = 0;
            mmWaveDevice.monitoringConfig.rlAllTxBallBreakMonCfg_t = new RlAllTxBallBreakMonCfgT();
            mmWaveDevice.monitoringConfig.rlAllTxBallBreakMonCfg_t.p000019 = new c000213();
            mmWaveDevice.monitoringConfig.rlAllTxBallBreakMonCfg_t.p000019.reportMode = 0;
            mmWaveDevice.monitoringConfig.rlAllTxBallBreakMonCfg_t.p000019.txReflCoeffMagThresh = 0.0;
            mmWaveDevice.monitoringConfig.rlAllTxBallBreakMonCfg_t.p00001a = new c000214();
            mmWaveDevice.monitoringConfig.rlAllTxBallBreakMonCfg_t.p00001a.reportMode = 0;
            mmWaveDevice.monitoringConfig.rlAllTxBallBreakMonCfg_t.p00001a.txReflCoeffMagThresh = 0.0;
            mmWaveDevice.monitoringConfig.rlAllTxBallBreakMonCfg_t.p00001b = new c000215();
            mmWaveDevice.monitoringConfig.rlAllTxBallBreakMonCfg_t.p00001b.reportMode = 0;
            mmWaveDevice.monitoringConfig.rlAllTxBallBreakMonCfg_t.p00001b.txReflCoeffMagThresh = 0.0;
            mmWaveDevice.monitoringConfig.rlAllTxBallBreakMonCfg_t.isConfigured = 0;
            mmWaveDevice.monitoringConfig.rlTxGainPhaseMismatchMonConf_t = new RlTxGainPhaseMismatchMonConfT();
            mmWaveDevice.monitoringConfig.rlTxGainPhaseMismatchMonConf_t.profileIndx = 0;
            mmWaveDevice.monitoringConfig.rlTxGainPhaseMismatchMonConf_t.rfFreqBitMask = "0";
            mmWaveDevice.monitoringConfig.rlTxGainPhaseMismatchMonConf_t.txEn = "0";
            mmWaveDevice.monitoringConfig.rlTxGainPhaseMismatchMonConf_t.txGainMismatchThresh = 0.0;
            mmWaveDevice.monitoringConfig.rlTxGainPhaseMismatchMonConf_t.txPhaseMismatchThresh = 0.0;
            mmWaveDevice.monitoringConfig.rlTxGainPhaseMismatchMonConf_t.txGainMismatchOffsetVal = new List<List<double>>();
            for (int num = 0; num < 3; num++)
            {
                mmWaveDevice.monitoringConfig.rlTxGainPhaseMismatchMonConf_t.txGainMismatchOffsetVal.Add(new List<double>());
                for (int num4 = 0; num4 < 6; num4++)
                {
                    mmWaveDevice.monitoringConfig.rlTxGainPhaseMismatchMonConf_t.txGainMismatchOffsetVal[num].Add(0.0);
                }
            }
            mmWaveDevice.monitoringConfig.rlTxGainPhaseMismatchMonConf_t.txPhaseMismatchOffsetVal = new List<List<double>>();
            for (int num = 0; num < 3; num++)
            {
                mmWaveDevice.monitoringConfig.rlTxGainPhaseMismatchMonConf_t.txPhaseMismatchOffsetVal.Add(new List<double>());
                for (int num5 = 0; num5 < 6; num5++)
                {
                    mmWaveDevice.monitoringConfig.rlTxGainPhaseMismatchMonConf_t.txPhaseMismatchOffsetVal[num].Add(0.0);
                }
            }
            mmWaveDevice.monitoringConfig.rlTxGainPhaseMismatchMonConf_t.isConfigured = 0;
            mmWaveDevice.monitoringConfig.rlAllTxBpmMonConf_t = new RlAllTxBpmMonConfT();
            mmWaveDevice.monitoringConfig.rlAllTxBpmMonConf_t.p00001c = new c000218();
            mmWaveDevice.monitoringConfig.rlAllTxBpmMonConf_t.p00001c.profileIndx = 0;
            mmWaveDevice.monitoringConfig.rlAllTxBpmMonConf_t.p00001c.reportMode = 0;
            mmWaveDevice.monitoringConfig.rlAllTxBpmMonConf_t.p00001c.rxEn = "0";
            mmWaveDevice.monitoringConfig.rlAllTxBpmMonConf_t.p00001c.txBpmPhaseErrThresh = 0.0;
            mmWaveDevice.monitoringConfig.rlAllTxBpmMonConf_t.p00001c.txBpmAmplErrThresh = 0.0;
            mmWaveDevice.monitoringConfig.rlAllTxBpmMonConf_t.p00001d = new c000219();
            mmWaveDevice.monitoringConfig.rlAllTxBpmMonConf_t.p00001d.profileIndx = 0;
            mmWaveDevice.monitoringConfig.rlAllTxBpmMonConf_t.p00001d.reportMode = 0;
            mmWaveDevice.monitoringConfig.rlAllTxBpmMonConf_t.p00001d.rxEn = "0";
            mmWaveDevice.monitoringConfig.rlAllTxBpmMonConf_t.p00001d.txBpmPhaseErrThresh = 0.0;
            mmWaveDevice.monitoringConfig.rlAllTxBpmMonConf_t.p00001d.txBpmAmplErrThresh = 0.0;
            mmWaveDevice.monitoringConfig.rlAllTxBpmMonConf_t.p00001e = new c00021a();
            mmWaveDevice.monitoringConfig.rlAllTxBpmMonConf_t.p00001e.profileIndx = 0;
            mmWaveDevice.monitoringConfig.rlAllTxBpmMonConf_t.p00001e.reportMode = 0;
            mmWaveDevice.monitoringConfig.rlAllTxBpmMonConf_t.p00001e.rxEn = "0";
            mmWaveDevice.monitoringConfig.rlAllTxBpmMonConf_t.p00001e.txBpmPhaseErrThresh = 0.0;
            mmWaveDevice.monitoringConfig.rlAllTxBpmMonConf_t.p00001e.txBpmAmplErrThresh = 0.0;
            mmWaveDevice.monitoringConfig.rlAllTxBpmMonConf_t.isConfigured = 0;
            mmWaveDevice.monitoringConfig.rlSynthFreqMonConf_t = new RlSynthFreqMonConfT();
            mmWaveDevice.monitoringConfig.rlSynthFreqMonConf_t.profileIndx = 0;
            mmWaveDevice.monitoringConfig.rlSynthFreqMonConf_t.reportMode = 0;
            mmWaveDevice.monitoringConfig.rlSynthFreqMonConf_t.freqErrThresh = 0;
            mmWaveDevice.monitoringConfig.rlSynthFreqMonConf_t.monStartTime = 0.0;
            mmWaveDevice.monitoringConfig.rlSynthFreqMonConf_t.isConfigured = 0;
            mmWaveDevice.monitoringConfig.rlExtAnaSignalsMonConf_t = new RlExtAnaSignalsMonConfT();
            mmWaveDevice.monitoringConfig.rlExtAnaSignalsMonConf_t.reportMode = 0;
            mmWaveDevice.monitoringConfig.rlExtAnaSignalsMonConf_t.signalInpEnables = "0";
            mmWaveDevice.monitoringConfig.rlExtAnaSignalsMonConf_t.signalBuffEnables = "0";
            mmWaveDevice.monitoringConfig.rlExtAnaSignalsMonConf_t.signalSettlingTime = new List<double>();
            for (int num = 0; num < 6; num++)
            {
                mmWaveDevice.monitoringConfig.rlExtAnaSignalsMonConf_t.signalSettlingTime.Add(0.0);
            }
            mmWaveDevice.monitoringConfig.rlExtAnaSignalsMonConf_t.signalThresh = new List<double>();
            for (int num = 0; num < 12; num++)
            {
                mmWaveDevice.monitoringConfig.rlExtAnaSignalsMonConf_t.signalThresh.Add(0.0);
            }
            mmWaveDevice.monitoringConfig.rlExtAnaSignalsMonConf_t.isConfigured = 0;
            mmWaveDevice.monitoringConfig.rlAllTxIntAnaSignalsMonConf_t = new RlAllTxIntAnaSignalsMonConfT();
            mmWaveDevice.monitoringConfig.rlAllTxIntAnaSignalsMonConf_t.tx0IntAnaSgnlMonCfg = new Tx0IntAnaSgnlMonCfg();
            mmWaveDevice.monitoringConfig.rlAllTxIntAnaSignalsMonConf_t.tx0IntAnaSgnlMonCfg.profileIndx = 0;
            mmWaveDevice.monitoringConfig.rlAllTxIntAnaSignalsMonConf_t.tx0IntAnaSgnlMonCfg.reportMode = 0;
            mmWaveDevice.monitoringConfig.rlAllTxIntAnaSignalsMonConf_t.tx1IntAnaSgnlMonCfg = new Tx1IntAnaSgnlMonCfg();
            mmWaveDevice.monitoringConfig.rlAllTxIntAnaSignalsMonConf_t.tx1IntAnaSgnlMonCfg.profileIndx = 0;
            mmWaveDevice.monitoringConfig.rlAllTxIntAnaSignalsMonConf_t.tx1IntAnaSgnlMonCfg.reportMode = 0;
            mmWaveDevice.monitoringConfig.rlAllTxIntAnaSignalsMonConf_t.tx2IntAnaSgnlMonCfg = new Tx2IntAnaSgnlMonCfg();
            mmWaveDevice.monitoringConfig.rlAllTxIntAnaSignalsMonConf_t.tx2IntAnaSgnlMonCfg.profileIndx = 0;
            mmWaveDevice.monitoringConfig.rlAllTxIntAnaSignalsMonConf_t.tx2IntAnaSgnlMonCfg.reportMode = 0;
            mmWaveDevice.monitoringConfig.rlAllTxIntAnaSignalsMonConf_t.isConfigured = 0;
            mmWaveDevice.monitoringConfig.rlRxIntAnaSignalsMonConf_t = new RlRxIntAnaSignalsMonConfT();
            mmWaveDevice.monitoringConfig.rlRxIntAnaSignalsMonConf_t.profileIndx = 0;
            mmWaveDevice.monitoringConfig.rlRxIntAnaSignalsMonConf_t.reportMode = 0;
            mmWaveDevice.monitoringConfig.rlRxIntAnaSignalsMonConf_t.isConfigured = 0;
            mmWaveDevice.monitoringConfig.rlPmClkLoIntAnaSignalsMonConf_t = new RlPmClkLoIntAnaSignalsMonConfT();
            mmWaveDevice.monitoringConfig.rlPmClkLoIntAnaSignalsMonConf_t.profileIndx = 0;
            mmWaveDevice.monitoringConfig.rlPmClkLoIntAnaSignalsMonConf_t.reportMode = 0;
            mmWaveDevice.monitoringConfig.rlPmClkLoIntAnaSignalsMonConf_t.isConfigured = 0;
            mmWaveDevice.monitoringConfig.rlGpadcIntAnaSignalsMonConf_t = new RlGpadcIntAnaSignalsMonConfT();
            mmWaveDevice.monitoringConfig.rlGpadcIntAnaSignalsMonConf_t.reportMode = 0;
            mmWaveDevice.monitoringConfig.rlGpadcIntAnaSignalsMonConf_t.isConfigured = 0;
            mmWaveDevice.monitoringConfig.rlPllContrVoltMonConf_t = new RlPllContrVoltMonConfT();
            mmWaveDevice.monitoringConfig.rlPllContrVoltMonConf_t.reportMode = 0;
            mmWaveDevice.monitoringConfig.rlPllContrVoltMonConf_t.signalEnables = "0";
            mmWaveDevice.monitoringConfig.rlPllContrVoltMonConf_t.isConfigured = 0;
            mmWaveDevice.monitoringConfig.rlDualClkCompMonConf_t = new RlDualClkCompMonConfT();
            mmWaveDevice.monitoringConfig.rlDualClkCompMonConf_t.reportMode = 0;
            mmWaveDevice.monitoringConfig.rlDualClkCompMonConf_t.dccPairEnables = "0";
            mmWaveDevice.monitoringConfig.rlDualClkCompMonConf_t.isConfigured = 0;
            mmWaveDevice.monitoringConfig.rlRxSatMonConf_t = new RlRxSatMonConfT();
            mmWaveDevice.monitoringConfig.rlRxSatMonConf_t.profileIndx = 0;
            mmWaveDevice.monitoringConfig.rlRxSatMonConf_t.satMonSel = 0;
            mmWaveDevice.monitoringConfig.rlRxSatMonConf_t.primarySliceDuration = 0.0;
            mmWaveDevice.monitoringConfig.rlRxSatMonConf_t.numSlices = 0;
            mmWaveDevice.monitoringConfig.rlRxSatMonConf_t.rxChannelMask = 0;
            mmWaveDevice.monitoringConfig.rlRxSatMonConf_t.isConfigured = 0;
            mmWaveDevice.monitoringConfig.rlSigImgMonConf_t = new RlSigImgMonConfT();
            mmWaveDevice.monitoringConfig.rlSigImgMonConf_t.profileIndx = 0;
            mmWaveDevice.monitoringConfig.rlSigImgMonConf_t.numSlices = 0;
            mmWaveDevice.monitoringConfig.rlSigImgMonConf_t.timeSliceNumSamples = 0;
            mmWaveDevice.monitoringConfig.rlSigImgMonConf_t.isConfigured = 0;
            mmWaveDevice.monitoringConfig.rlRxMixInPwrMonConf_t = new RlRxMixInPwrMonConfT();
            mmWaveDevice.monitoringConfig.rlRxMixInPwrMonConf_t.profileIndx = 0;
            mmWaveDevice.monitoringConfig.rlRxMixInPwrMonConf_t.reportMode = 0;
            mmWaveDevice.monitoringConfig.rlRxMixInPwrMonConf_t.txEnable = "0";
            mmWaveDevice.monitoringConfig.rlRxMixInPwrMonConf_t.thresholds = "0";
            mmWaveDevice.monitoringConfig.rlRxMixInPwrMonConf_t.isConfigured = 0;
            mmWaveDevice.monitoringConfig.rlAnaFaultInj_t = new RlAnaFaultInjT();
            mmWaveDevice.monitoringConfig.rlAnaFaultInj_t.rxGainDrop = "0";
            mmWaveDevice.monitoringConfig.rlAnaFaultInj_t.rxPhInv = "0";
            mmWaveDevice.monitoringConfig.rlAnaFaultInj_t.rxHighNoise = "0";
            mmWaveDevice.monitoringConfig.rlAnaFaultInj_t.rxIfStagesFault = "0";
            mmWaveDevice.monitoringConfig.rlAnaFaultInj_t.rxLoAmpFault = "0";
            mmWaveDevice.monitoringConfig.rlAnaFaultInj_t.txLoAmpFault = "0";
            mmWaveDevice.monitoringConfig.rlAnaFaultInj_t.txGainDrop = "0";
            mmWaveDevice.monitoringConfig.rlAnaFaultInj_t.txPhInv = "0";
            mmWaveDevice.monitoringConfig.rlAnaFaultInj_t.synthFault = "0";
            mmWaveDevice.monitoringConfig.rlAnaFaultInj_t.supplyLdoFault = "0";
            mmWaveDevice.monitoringConfig.rlAnaFaultInj_t.miscFault = "0";
            mmWaveDevice.monitoringConfig.rlAnaFaultInj_t.miscThreshFault = "0";
            mmWaveDevice.monitoringConfig.rlAnaFaultInj_t.isConfigured = 0;
            GlobalRef.jobject.mmWaveDevices.Add(mmWaveDevice);
            return i;
        }

        public void Init(GuiManager gui_manager, AR1xxxWrapper ts_wrapper)
        {
            m_GuiManager = gui_manager;
            m_TsWrapper = ts_wrapper;
            ScriptOps.m_MainForm = gui_manager.MainTsForm;
            MatlabPostProcGuiInstance = gui_manager.MainTsForm.MatlabPostProcGUIClass;
            m_MainParams = gui_manager.TsParams.MainParams;
            m_TxParams = gui_manager.TsParams.TxParams;
            m_RxParams = gui_manager.TsParams.RxParams;
            m_ConnectParams = gui_manager.TsParams.ConnectParams;
            m_SPIConnectParams = gui_manager.TsParams.SPIConnectParams;
            m_StaticParams = gui_manager.TsParams.StaticParams;
            m_RFMiscConfigParams = gui_manager.TsParams.RFMiscConfigParams;
            m_LpModConfParams = gui_manager.TsParams.LpModConfParams;
            m_RFLDOBypassEnableAndDisableConfigParameters = gui_manager.TsParams.RFLDOBypassEnableAndDisableConfigParameters;
            m_DataConfigParams = gui_manager.TsParams.DataConfigParams;
            m_ChirpConfigParams = gui_manager.TsParams.ChirpConfigParams;
            m_AdvChirpConfigParams = gui_manager.TsParams.AdvChirpConfigParams;
            m_TestSourceParams = gui_manager.TsParams.TestSourceParams;
            m_ContStreamParams = gui_manager.TsParams.ContStreamParams;
            m_BasicConfigurationForAnalysisParams = gui_manager.TsParams.BasicConfigurationForAnalysisParams;
            m_MeasureTxPowerParams = gui_manager.TsParams.MeasureTxPowerParams;
            m_BpmChirpConfigParams = gui_manager.TsParams.BpmChirpConfigParams;
            m_AdvanceBPMPatternConfigParams = gui_manager.TsParams.AdvanceBPMPatternConfigParams;
            m_PerChirpPhaseShifterConfigParams = gui_manager.TsParams.PerChirpPhaseShifterConfigParams;
            m_RFStatusConfigParams = gui_manager.TsParams.RFStatusConfigParams;
            m_RFCharReportConfigParams = gui_manager.TsParams.RFCharReportConfigParams;
            m_RFCalibMonConfigParams = gui_manager.TsParams.RFCalibMonConfigParams;
            m_RFCalibEnaDisConfigParams = gui_manager.TsParams.RFCalibEnaDisConfigParams;
            m_TemperatrueSensorTempDataConfigParams = gui_manager.TsParams.TemperatrueSensorTempDataConfigParams;
            m_RadarDevice1DFEStaticReportDataConfigParams = gui_manager.TsParams.RadarDevice1DFEStaticReportDataConfigParams;
            m_RadarDevice2DFEStaticReportDataConfigParams = gui_manager.TsParams.RadarDevice2DFEStaticReportDataConfigParams;
            m_RadarDevice3DFEStaticReportDataConfigParams = gui_manager.TsParams.RadarDevice3DFEStaticReportDataConfigParams;
            m_RadarDevice4DFEStaticReportDataConfigParams = gui_manager.TsParams.RadarDevice4DFEStaticReportDataConfigParams;
            m_RfGPADCMeasureForExtInputConfigParams = gui_manager.TsParams.RfGPADCMeasureForExtInputConfigParams;
            m_DynamicPowerSaveConfigParams = gui_manager.TsParams.DynamicPowerSaveConfigParams;
            f0001fc = gui_manager.TsParams.PMICVoltageConfigParams;
            m_SetPMICRegConfigParams = gui_manager.TsParams.SetPMICRegConfigParams;
            m_GetPMICRegConfigParams = gui_manager.TsParams.GetPMICRegConfigParams;
            m_AdvancedFrameConfigParams = gui_manager.TsParams.AdvancedFrameConfigParams;
            m_SWSubFrameStartStopConfigParams = gui_manager.TsParams.SWSubFrameStartStopConfigParams;
            m_LoopBackBurstConfigParams = gui_manager.TsParams.LoopBackBurstConfigParams;
            m_RampTimingConfigParams = gui_manager.TsParams.RampTimingConfigParams;
            m_RadarDeviceModeConfigParams = gui_manager.TsParams.RadarDeviceModeConfigParams;
            m_ProtocolConfigParams = gui_manager.TsParams.ProtocolConfigParams;
            m_RFPALoopBackConfigParams = m_GuiManager.TsParams.RFPALoopBackConfigParams;
            m_RFPSLoopBackConfigParams = m_GuiManager.TsParams.RFPSLoopBackConfigParams;
            m_RFIFLoopBackConfigParams = m_GuiManager.TsParams.RFIFLoopBackConfigParams;
            m_ExternalFilterProgConfigParams = m_GuiManager.TsParams.ExternalFilterProgConfigParams;
            m_ExternalFilterCoeffRAMConfigParams = m_GuiManager.TsParams.ExternalFilterCoeffRAMConfigParams;
            m_RFCalibFrequencyLimitConfigParameters = m_GuiManager.TsParams.RFCalibFrequencyLimitConfigParameters;
            m_RFDeviceAEControlConfigParameters = m_GuiManager.TsParams.RFDeviceAEControlConfigParameters;
            m_TimeUnitConfigParameters = m_GuiManager.TsParams.TimeUnitConfigParameters;
            m_RFInitCalibConfigParameters = m_GuiManager.TsParams.RFInitCalibConfigParameters;
            m_RunTimeCalibConfigParameters = m_GuiManager.TsParams.RunTimeCalibConfigParameters;
            f000210 = m_GuiManager.TsParams.p000004;
            m_MeasurePDPowerConfigParams = m_GuiManager.TsParams.MeasurePDPowerConfigParams;
            m_MonitoringModeConfigParameters = m_GuiManager.TsParams.MonitoringModeConfigParameters;
            m_MonRFEnablesConfigParameters = m_GuiManager.TsParams.MonRFEnablesConfigParameters;
            m_RFDigitalSysPeriodicConfigParameters = m_GuiManager.TsParams.RFDigitalSysPeriodicConfigParameters;
            m_MonTX1PowerConfigParameters = m_GuiManager.TsParams.MonTX1PowerConfigParameters;
            m_MonTX2PowerConfigParameters = m_GuiManager.TsParams.MonTX2PowerConfigParameters;
            m_MonTX3PowerConfigParameters = m_GuiManager.TsParams.MonTX3PowerConfigParameters;
            m_MonRXNoiseFigureConfigParameters = m_GuiManager.TsParams.MonRXNoiseFigureConfigParameters;
            m_MonTx1BallBreakConfigParameters = m_GuiManager.TsParams.MonTx1BallBreakConfigParameters;
            m_MonTx2BallBreakConfigParameters = m_GuiManager.TsParams.MonTx2BallBreakConfigParameters;
            m_MonTx3BallBreakConfigParameters = m_GuiManager.TsParams.MonTx3BallBreakConfigParameters;
            m_MonRXGainPhaseConfigParameters = m_GuiManager.TsParams.MonRXGainPhaseConfigParameters;
            m_MonRXIFStageConfigParameters = m_GuiManager.TsParams.MonRXIFStageConfigParameters;
            m_MonTx1BPMPhaseConfigParameters = m_GuiManager.TsParams.MonTx1BPMPhaseConfigParameters;
            m_MonTx2BPMPhaseConfigParameters = m_GuiManager.TsParams.MonTx2BPMPhaseConfigParameters;
            m_MonTx3BPMPhaseConfigParameters = m_GuiManager.TsParams.MonTx3BPMPhaseConfigParameters;
            m_InterRxGainPhaseFreqControlConfigParameters = m_GuiManager.TsParams.InterRxGainPhaseFreqControlConfigParameters;
            m_MonTxGainPhaseMismatchConfigParameters = m_GuiManager.TsParams.MonTxGainPhaseMismatchConfigParameters;
            m_AnalogFaultInjectionConfigParameters = m_GuiManager.TsParams.AnalogFaultInjectionConfigParameters;
            m_MonRxSaturationDetectorConfigParameters = m_GuiManager.TsParams.MonRxSaturationDetectorConfigParameters;
            m_MonPLLControlVoltageConfigParameters = m_GuiManager.TsParams.MonPLLControlVoltageConfigParameters;
            m_MonDualClockCompConfigParameters = m_GuiManager.TsParams.MonDualClockCompConfigParameters;
            m_MonSignalAndImageConfigParameters = m_GuiManager.TsParams.MonSignalAndImageConfigParameters;
            m_MonSynthFrequencyConfigParameters = m_GuiManager.TsParams.MonSynthFrequencyConfigParameters;
            m_MonExternalAnalogSignalConfigParameters = m_GuiManager.TsParams.MonExternalAnalogSignalConfigParameters;
            m_MonInternalTx1AnalogSignalConfigParameters = m_GuiManager.TsParams.MonInternalTx1AnalogSignalConfigParameters;
            m_MonInternalTx2AnalogSignalConfigParameters = m_GuiManager.TsParams.MonInternalTx2AnalogSignalConfigParameters;
            m_MonInternalTx3AnalogSignalConfigParameters = m_GuiManager.TsParams.MonInternalTx3AnalogSignalConfigParameters;
            m_MonInternalRxAnalogSignalConfigParameters = m_GuiManager.TsParams.MonInternalRxAnalogSignalConfigParameters;
            m_MonInternalPMCLKLOAnalogSignalConfigParameters = m_GuiManager.TsParams.MonInternalPMCLKLOAnalogSignalConfigParameters;
            m_MonInternalGPADCAnalogSignalConfigParameters = m_GuiManager.TsParams.MonInternalGPADCAnalogSignalConfigParameters;
            m_MonTemperatureConfigParameters = m_GuiManager.TsParams.MonTemperatureConfigParameters;
            m_MonRxMixerInputPowerConfigParameters = m_GuiManager.TsParams.MonRxMixerInputPowerConfigParameters;
            m_RFDigitalSysLatentFaultConfigParameters = m_GuiManager.TsParams.RFDigitalSysLatentFaultConfigParameters;
            m_TxGainTempLUTConfigParameters = m_GuiManager.TsParams.TxGainTempLUTConfigParameters;
            m_TxGainTempLUTGetConfigParameters = m_GuiManager.TsParams.TxGainTempLUTGetConfigParameters;
            m_RxGainTempLUTConfigParameters = m_GuiManager.TsParams.RxGainTempLUTConfigParameters;
            m_RxGainTempLUTGetConfigParameters = m_GuiManager.TsParams.RxGainTempLUTGetConfigParameters;
            m_MonSynthFreqLinearityConfigParams = m_GuiManager.TsParams.MonSynthFreqLinearityConfigParams;
            m_CalMonFrequencyTxPowerLimitConfigParameters = m_GuiManager.TsParams.CalMonFrequencyTxPowerLimitConfigParameters;
            m_MSSLatentFaultTestConfigParameters = m_GuiManager.TsParams.MSSLatentFaultTestConfigParameters;
            m_MSSPeriodicTestConfigParameters = m_GuiManager.TsParams.MSSPeriodicTestConfigParameters;
            m_DynamicChirpConfigParams = m_GuiManager.TsParams.DynamicChirpConfigParams;
            m_DynamicChirpEnableConfigParams = m_GuiManager.TsParams.DynamicChirpEnableConfigParams;
            m_DynamicPerChirpPhaseShiftConfigParams = m_GuiManager.TsParams.DynamicPerChirpPhaseShiftConfigParams;
            m_TestPatternGenConfigParams = m_GuiManager.TsParams.TestPatternGenConfigParams;
            m_PMICClockOutConfigParams = m_GuiManager.TsParams.PMICClockOutConfigParams;
            m_MCUClockOutConfigParams = m_GuiManager.TsParams.MCUClockOutConfigParams;
            m_CalibDataRestoreSaveConfigParams = m_GuiManager.TsParams.CalibDataRestoreSaveConfigParams;
            m_CalibDataRestoreConfigParams = m_GuiManager.TsParams.CalibDataRestoreConfigParams;
            m_PhaseShiftAndCalibFilePathParams = m_GuiManager.TsParams.PhaseShiftAndCalibFilePathParams;
            m_InterChirpBlockControlsConfigParams = m_GuiManager.TsParams.InterChirpBlockControlsConfigParams;
            m_MSSGetDataBlockConfigParams = m_GuiManager.TsParams.MSSGetDataBlockConfigParams;
            m_TDAEthernetInitConfigParams = m_GuiManager.TsParams.TDAEthernetInitConfigParams;
            f000206 = m_GuiManager.TsParams.p000005;
            m_EthernetInitConfigParams = m_GuiManager.TsParams.EthernetInitConfigParams;
            m_EthernetModeConfigParams = m_GuiManager.TsParams.EthernetModeConfigParams;
            m_RecordDataPacketDelayConfigParams = m_GuiManager.TsParams.RecordDataPacketDelayConfigParams;
            ScriptOps.asyncEvent.asyncGpadc = 0U;
            ScriptOps.asyncEvent.asyncDynamicChar = 0U;
            IntializeTheProfileDefaultData();
            IntializeTheChirpDefaultData();
            XmlDocument xmlDocument = new XmlDocument();
            string directoryName = Path.GetDirectoryName(Application.StartupPath);
            string filename = string.Concat(new string[]
            {
                directoryName + "\\PostProc\\Monitoring_Data_Format.xml"
            });
            xmlDocument.Load(filename);
            foreach (string text in new string[]
            {
                "BSSCPUFaultStatus",
                "BSSESMFaultStatus",
                "RFInitCalibStatus",
                "RFGPADCMeasurementData",
                "RFTemperatureData",
                "RFGPADCReport",
                "MeasuredTxPower",
                "MeasuredPDPower",
                "AnalogFaultReport",
                "CalMonTimingFailReport",
                "RunTimeCalibReport",
                "DigitalLatentFaultMonitoring",
                "MonitoringReportHeader",
                "DigitalPeriodicMonitoring",
                "TemperatureMonitoring",
                "RXGainPhaseMonitoring",
                "RXNoiseFigureMonitoring",
                "RXIFStageMonitoring",
                "TX0PowerMonitoring",
                "TX1PowerMonitoring",
                "TX2PowerMonitoring",
                "TX0BallBreakMonitoring",
                "TX1BallBreakMonitoring",
                "TX2BallBreakMonitoring",
                "TXGainPhaseMismatchMonitoring",
                "Tx0BPMPhaseMonitoring",
                "Tx1BPMPhaseMonitoring",
                "Tx2BPMPhaseMonitoring",
                "SynthFrequencyMonitoring",
                "ExtAnalogSignalsMonitoring",
                "IntTX0AnalogSignalMonitoring",
                "IntTX1AnalogSignalMonitoring",
                "IntTX2AnalogSignalMonitoring",
                "IntRxAnalogSignalMonitoring",
                "IntPMCLKLOAnalogSignalMonitoring",
                "IntGPADCAnalogSignalMonitoring",
                "PLLControlVoltageSignalMonitoring",
                "DualClockComparatorMonitoring",
                "RxMixerInputPowerMonitoring",
                "MSSPowerUpDoneAsyncReport",
                "BSSRFPowerUpDoneAsyncReport",
                "MSSCPUFaultStatus",
                "MSSESMFaultStatus",
                "MSSBootErrorStatus",
                "MSSLatentFaultMonitoring",
                "MSSPeriodicTestMonitoring",
                "MSSRFErrorStatus",
                "MSSVolMonErrorStatusReport"
            })
            {
                XmlNodeList xmlNodeList;
                if (!ScriptOps.monReportXmlMap.TryGetValue(text, out xmlNodeList))
                {
                    string xpath = "./MonReportFormat/MonReport[name = '" + text + "']/field";
                    xmlNodeList = xmlDocument.SelectNodes(xpath);
                    if (xmlNodeList != null)
                    {
                        ScriptOps.monReportXmlMap.Add(text, xmlNodeList);
                    }
                }
            }
        }

        public void IntializeTheProfileDefaultData()
        {
            for (int i = 0; i < 16; i++)
            {
                ScriptOps.ProfileConfigDataParam[i].profileIntialized = 0U;
                ScriptOps.ProfileConfigDataParam[i].startFreqConst = 0U;
                ScriptOps.ProfileConfigDataParam[i].idleTimeConst = 0U;
                ScriptOps.ProfileConfigDataParam[i].adcStartTimeConst = 0U;
                ScriptOps.ProfileConfigDataParam[i].rampEndTime = 0U;
                ScriptOps.ProfileConfigDataParam[i].tx1OutPowerBackoffCode = 0U;
                ScriptOps.ProfileConfigDataParam[i].tx2OutPowerBackoffCode = 0U;
                ScriptOps.ProfileConfigDataParam[i].tx3OutPowerBackoffCode = 0U;
                ScriptOps.ProfileConfigDataParam[i].tx1PhaseShifter = 0U;
                ScriptOps.ProfileConfigDataParam[i].tx2PhaseShifter = 0U;
                ScriptOps.ProfileConfigDataParam[i].tx3PhaseShifter = 0U;
                ScriptOps.ProfileConfigDataParam[i].freqSlopeConst = 0;
                ScriptOps.ProfileConfigDataParam[i].txStartTime = 0;
                ScriptOps.ProfileConfigDataParam[i].pnumAdcSamples = 0;
                ScriptOps.ProfileConfigDataParam[i].digOutSampleRate = 0;
                ScriptOps.ProfileConfigDataParam[i].hpfCornerFreq1 = '\0';
                ScriptOps.ProfileConfigDataParam[i].hpfCornerFreq2 = '\0';
                ScriptOps.ProfileConfigDataParam[i].rxGain = '\0';
            }
        }

        public void IntializeTheProfileSpecificData(ushort pprofileId, uint startFreqConst, uint idleTimeConst, uint adcStartTimeConst, uint rampEndTime, uint tx1OutPowerBackoffCode, uint tx2OutPowerBackoffCode, uint tx3OutPowerBackoffCode, uint tx1PhaseShifter, uint tx2PhaseShifter, uint tx3PhaseShifter, ushort freqSlopeConst, short txStartTime, ushort pnumAdcSamples, ushort digOutSampleRate, char hpfCornerFreq1, char hpfCornerFreq2, char rxGain)
        {
            ScriptOps.ProfileConfigDataParam[(int)pprofileId].profileIntialized = 1U;
            ScriptOps.ProfileConfigDataParam[(int)pprofileId].startFreqConst = startFreqConst;
            ScriptOps.ProfileConfigDataParam[(int)pprofileId].idleTimeConst = idleTimeConst;
            ScriptOps.ProfileConfigDataParam[(int)pprofileId].adcStartTimeConst = adcStartTimeConst;
            ScriptOps.ProfileConfigDataParam[(int)pprofileId].rampEndTime = rampEndTime;
            ScriptOps.ProfileConfigDataParam[(int)pprofileId].tx1OutPowerBackoffCode = tx1OutPowerBackoffCode;
            ScriptOps.ProfileConfigDataParam[(int)pprofileId].tx2OutPowerBackoffCode = tx2OutPowerBackoffCode;
            ScriptOps.ProfileConfigDataParam[(int)pprofileId].tx3OutPowerBackoffCode = tx3OutPowerBackoffCode;
            ScriptOps.ProfileConfigDataParam[(int)pprofileId].tx1PhaseShifter = tx1PhaseShifter;
            ScriptOps.ProfileConfigDataParam[(int)pprofileId].tx2PhaseShifter = tx2PhaseShifter;
            ScriptOps.ProfileConfigDataParam[(int)pprofileId].tx3PhaseShifter = tx3PhaseShifter;
            ScriptOps.ProfileConfigDataParam[(int)pprofileId].freqSlopeConst = freqSlopeConst;
            ScriptOps.ProfileConfigDataParam[(int)pprofileId].txStartTime = txStartTime;
            ScriptOps.ProfileConfigDataParam[(int)pprofileId].pnumAdcSamples = pnumAdcSamples;
            ScriptOps.ProfileConfigDataParam[(int)pprofileId].digOutSampleRate = digOutSampleRate;
            ScriptOps.ProfileConfigDataParam[(int)pprofileId].hpfCornerFreq1 = hpfCornerFreq1;
            ScriptOps.ProfileConfigDataParam[(int)pprofileId].hpfCornerFreq2 = hpfCornerFreq2;
            ScriptOps.ProfileConfigDataParam[(int)pprofileId].rxGain = rxGain;
        }

        public void IntializeTheChirpDefaultData()
        {
            for (int i = 0; i < 512; i++)
            {
                ScriptOps.ChirpConfigDataParam[i].chirpIntialized = 0U;
                ScriptOps.ChirpConfigDataParam[i].profileId = 0;
                ScriptOps.ChirpConfigDataParam[i].startFreqVar = 0U;
                ScriptOps.ChirpConfigDataParam[i].freqSlopeVar = 0;
                ScriptOps.ChirpConfigDataParam[i].idleTimeVar = 0;
                ScriptOps.ChirpConfigDataParam[i].adcStartTimeVar = 0;
                ScriptOps.ChirpConfigDataParam[i].tx1Enable = 0;
                ScriptOps.ChirpConfigDataParam[i].tx2Enable = 0;
                ScriptOps.ChirpConfigDataParam[i].tx3Enable = 0;
                ScriptOps.ChirpConfigDataParam[i].f000025 = '\0';
                ScriptOps.ChirpConfigDataParam[i].f000026 = '\0';
            }
        }

        public void IntializeTheChirpSpecificData(ushort chirpStartIdx, ushort chirpEndIdx, ushort profileId, uint startFreqVar, short freqSlopeVar, ushort idleTimeVar, ushort adcStartTimeVar, ushort tx1Enable, ushort tx2Enable, ushort tx3Enable)
        {
            for (int i = (int)chirpStartIdx; i <= (int)chirpEndIdx; i++)
            {
                ScriptOps.ChirpConfigDataParam[i].chirpIntialized = 1U;
                ScriptOps.ChirpConfigDataParam[i].profileId = profileId;
                ScriptOps.ChirpConfigDataParam[i].startFreqVar = startFreqVar;
                ScriptOps.ChirpConfigDataParam[i].freqSlopeVar = freqSlopeVar;
                ScriptOps.ChirpConfigDataParam[i].idleTimeVar = idleTimeVar;
                ScriptOps.ChirpConfigDataParam[i].adcStartTimeVar = adcStartTimeVar;
                ScriptOps.ChirpConfigDataParam[i].tx1Enable = tx1Enable;
                ScriptOps.ChirpConfigDataParam[i].tx2Enable = tx2Enable;
                ScriptOps.ChirpConfigDataParam[i].tx3Enable = tx3Enable;
                ScriptOps.ChirpConfigDataParam[(int)chirpStartIdx].f000025 = '\0';
                ScriptOps.ChirpConfigDataParam[(int)chirpStartIdx].f000026 = '\0';
            }
        }

        public void DisplayTheChirpSpecificData(ushort chirpStartIdx, ushort chirpEndIdx, ushort profileId, uint startFreqVar, short freqSlopeVar, ushort idleTimeVar, ushort adcStartTimeVar, ushort tx1Enable, ushort tx2Enable, ushort tx3Enable)
        {
            for (int i = (int)chirpStartIdx; i <= (int)chirpEndIdx; i++)
            {
                ScriptOps.ChirpConfigDataParam[i].chirpIntialized = 1U;
                ScriptOps.ChirpConfigDataParam[i].profileId = profileId;
                ScriptOps.ChirpConfigDataParam[i].startFreqVar = startFreqVar;
                ScriptOps.ChirpConfigDataParam[i].freqSlopeVar = freqSlopeVar;
                ScriptOps.ChirpConfigDataParam[i].idleTimeVar = idleTimeVar;
                ScriptOps.ChirpConfigDataParam[i].adcStartTimeVar = adcStartTimeVar;
                ScriptOps.ChirpConfigDataParam[i].tx1Enable = tx1Enable;
                ScriptOps.ChirpConfigDataParam[i].tx2Enable = tx2Enable;
                ScriptOps.ChirpConfigDataParam[i].tx3Enable = tx3Enable;
                string full_command = string.Format("ChirpConfig data({0}, {1}, {2}, {3}, {4}, {5}, {6}, {7}, {8},{9})", new object[]
                {
                    i,
                    (int)ScriptOps.ChirpConfigDataParam[i].chirpIntialized,
                    (int)ScriptOps.ChirpConfigDataParam[i].profileId,
                    (int)ScriptOps.ChirpConfigDataParam[i].startFreqVar,
                    (int)ScriptOps.ChirpConfigDataParam[i].freqSlopeVar,
                    (int)ScriptOps.ChirpConfigDataParam[i].idleTimeVar,
                    (int)ScriptOps.ChirpConfigDataParam[i].adcStartTimeVar,
                    (int)ScriptOps.ChirpConfigDataParam[i].tx1Enable,
                    (int)ScriptOps.ChirpConfigDataParam[i].tx2Enable,
                    (int)ScriptOps.ChirpConfigDataParam[i].tx2Enable
                });
                m_GuiManager.RecordLog(9, full_command);
                ScriptOps.ChirpConfigDataParam[(int)chirpStartIdx].f000025 = '\0';
                ScriptOps.ChirpConfigDataParam[(int)chirpStartIdx].f000026 = '\0';
            }
        }

        public void IntializeTheBPMSpecificData(ushort chirpStartIdx, ushort chirpEndIdx, char p2, char p3)
        {
            for (int i = (int)chirpStartIdx; i <= (int)chirpEndIdx; i++)
            {
                ScriptOps.ChirpConfigDataParam[i].f000025 = p2;
                ScriptOps.ChirpConfigDataParam[i].f000026 = p3;
            }
        }

        public void DisplayTheBPMSpecificData(ushort chirpStartIdx, ushort chirpEndIdx, char p2, char p3)
        {
            for (int i = (int)chirpStartIdx; i <= (int)chirpEndIdx; i++)
            {
                ScriptOps.ChirpConfigDataParam[i].f000025 = p2;
                ScriptOps.ChirpConfigDataParam[i].f000026 = p3;
                string full_command = string.Format("BPMConfig data({0}, {1}, {2})", new object[]
                {
                    i,
                    (uint)ScriptOps.ChirpConfigDataParam[i].f000026,
                    (uint)ScriptOps.ChirpConfigDataParam[i].f000025
                });
                m_GuiManager.RecordLog(9, full_command);
            }
        }

        public float CalculateFrameOnTimeForFrame(ushort chirpStartIdx, ushort chirpEndIdx, uint NoOfLoops)
        {
            int i = (int)chirpStartIdx;
            float num = 0f;
            while (i <= (int)chirpEndIdx)
            {
                uint idleTimeConst = ScriptOps.ProfileConfigDataParam[(int)ScriptOps.ChirpConfigDataParam[i].profileId].idleTimeConst;
                uint rampEndTime = ScriptOps.ProfileConfigDataParam[(int)ScriptOps.ChirpConfigDataParam[i].profileId].rampEndTime;
                num += idleTimeConst + rampEndTime;
                i++;
            }
            return num * NoOfLoops / 100000f;
        }

        public float CalculateRampOnTimeForFrame(ushort chirpStartIdx, ushort chirpEndIdx, uint NoOfLoops)
        {
            int i = (int)chirpStartIdx;
            float num = 0f;
            while (i <= (int)chirpEndIdx)
            {
                int idleTimeConst = (int)ScriptOps.ProfileConfigDataParam[(int)ScriptOps.ChirpConfigDataParam[i].profileId].idleTimeConst;
                int rampEndTime = (int)ScriptOps.ProfileConfigDataParam[(int)ScriptOps.ChirpConfigDataParam[i].profileId].rampEndTime;
                int txStartTime = (int)ScriptOps.ProfileConfigDataParam[(int)ScriptOps.ChirpConfigDataParam[i].profileId].txStartTime;
                if (idleTimeConst + txStartTime < 1000 || idleTimeConst < 350)
                {
                    num += (float)(idleTimeConst + rampEndTime);
                }
                else
                {
                    num = num + (float)rampEndTime - (float)txStartTime;
                }
                i++;
            }
            return num * NoOfLoops / 100000f;
        }

        public int CalculateBurstPeriodicityForAdvFrame()
        {
            int result = 0;
            if (m_AdvancedFrameConfigParams.NumOfSubFrames >= 1)
            {
                ushort chirpStartIdx = m_AdvancedFrameConfigParams.ChirpStartIdx;
                ushort chirpEndIdx = (ushort)(m_AdvancedFrameConfigParams.ChirpStartIdx + m_AdvancedFrameConfigParams.NumOfChirps - 1);
                uint noOfLoops = (uint)m_AdvancedFrameConfigParams.NumOfLoops;
                float num = CalculateFrameOnTimeForFrame(chirpStartIdx, chirpEndIdx, noOfLoops);
                float num2 = CalculateRampOnTimeForFrame(chirpStartIdx, chirpEndIdx, noOfLoops);
                if (num > m_AdvancedFrameConfigParams.BurstPeriodicity)
                {
                    string str = string.Format("SubFrame1 duration needed is {0} ms\n", new object[]
                    {
                        num
                    });
                    string str2 = string.Format("SubFrame1 duration programmed is {0} ms \n", new object[]
                    {
                        m_AdvancedFrameConfigParams.BurstPeriodicity
                    });
                    string str3 = string.Format("ERROR: SubFrame1 duration programmed is less than what is actually needed!", new object[0]);
                    MessageBox.Show(str2 + str + str3);
                    return -1;
                }
                if (m_AdvancedFrameConfigParams.SubFramePeriodicity < m_AdvancedFrameConfigParams.BurstPeriodicity)
                {
                    MessageBox.Show(string.Format("ERROR! SubFrame1 period should be greater than or equal to  burst period\n", new object[0]));
                    return -1;
                }
                ScriptOps.m_MainForm.AdvanceFrameConfigTab.UpdateSubFrame1DutyCycle(Convert.ToString(Math.Round((double)(num / m_AdvancedFrameConfigParams.BurstPeriodicity * 100f), 1)));
                ScriptOps.m_MainForm.AdvanceFrameConfigTab.UpdateSubFrame1ActiveRampDutyCycle(Convert.ToString(Math.Round((double)(num2 / m_AdvancedFrameConfigParams.BurstPeriodicity * 100f), 1)));
            }
            if (m_AdvancedFrameConfigParams.NumOfSubFrames >= 2)
            {
                ushort chirpStartIdx = m_AdvancedFrameConfigParams.ChirpStartIdx2;
                ushort chirpEndIdx = (ushort)(m_AdvancedFrameConfigParams.ChirpStartIdx2 + m_AdvancedFrameConfigParams.NumOfChirps2 - 1);
                uint noOfLoops = (uint)m_AdvancedFrameConfigParams.NumOfLoops2;
                float num = CalculateFrameOnTimeForFrame(chirpStartIdx, chirpEndIdx, noOfLoops);
                float num2 = CalculateRampOnTimeForFrame(chirpStartIdx, chirpEndIdx, noOfLoops);
                if (num > m_AdvancedFrameConfigParams.BurstPeriodicity2)
                {
                    string str4 = string.Format("SubFrame2 duration needed is {0} ms\n", new object[]
                    {
                        num
                    });
                    string str5 = string.Format("SubFrame2 duration programmed is {0} ms \n", new object[]
                    {
                        m_AdvancedFrameConfigParams.BurstPeriodicity2
                    });
                    string str6 = string.Format("ERROR: SubFrame2 duration programmed is less than what is actually needed!", new object[0]);
                    MessageBox.Show(str5 + str4 + str6);
                    return -1;
                }
                if (m_AdvancedFrameConfigParams.SubFramePeriodicity2 < m_AdvancedFrameConfigParams.BurstPeriodicity2)
                {
                    MessageBox.Show(string.Format("ERROR! SubFrame2 period should be greater than or equal to  burst period\n", new object[0]));
                    return -1;
                }
                ScriptOps.m_MainForm.AdvanceFrameConfigTab.UpdateSubFrame2DutyCycle(Convert.ToString(Math.Round((double)(num / m_AdvancedFrameConfigParams.BurstPeriodicity2 * 100f), 1)));
                ScriptOps.m_MainForm.AdvanceFrameConfigTab.UpdateSubFrame2ActiveRampDutyCycle(Convert.ToString(Math.Round((double)(num2 / m_AdvancedFrameConfigParams.BurstPeriodicity2 * 100f), 1)));
            }
            if (m_AdvancedFrameConfigParams.NumOfSubFrames >= 3)
            {
                ushort chirpStartIdx = m_AdvancedFrameConfigParams.ChirpStartIdx3;
                ushort chirpEndIdx = (ushort)(m_AdvancedFrameConfigParams.ChirpStartIdx3 + m_AdvancedFrameConfigParams.NumOfChirps3 - 1);
                uint noOfLoops = (uint)m_AdvancedFrameConfigParams.NumOfLoops3;
                float num = CalculateFrameOnTimeForFrame(chirpStartIdx, chirpEndIdx, noOfLoops);
                float num2 = CalculateRampOnTimeForFrame(chirpStartIdx, chirpEndIdx, noOfLoops);
                if (num > m_AdvancedFrameConfigParams.BurstPeriodicity3)
                {
                    string str7 = string.Format("SubFrame3 duration needed is {0} ms\n", new object[]
                    {
                        num
                    });
                    string str8 = string.Format("SubFrame3 duration programmed is {0} ms \n", new object[]
                    {
                        m_AdvancedFrameConfigParams.BurstPeriodicity3
                    });
                    string str9 = string.Format("ERROR: SubFrame3 duration programmed is less than what is actually needed!", new object[0]);
                    MessageBox.Show(str8 + str7 + str9);
                    return -1;
                }
                if (m_AdvancedFrameConfigParams.SubFramePeriodicity3 < m_AdvancedFrameConfigParams.BurstPeriodicity3)
                {
                    MessageBox.Show(string.Format("ERROR! SubFrame3 period should be greater than or equal to  burst period\n", new object[0]));
                    return -1;
                }
                ScriptOps.m_MainForm.AdvanceFrameConfigTab.UpdateSubFrame3DutyCycle(Convert.ToString(Math.Round((double)(num / m_AdvancedFrameConfigParams.BurstPeriodicity3 * 100f), 1)));
                ScriptOps.m_MainForm.AdvanceFrameConfigTab.UpdateSubFrame3ActiveRampDutyCycle(Convert.ToString(Math.Round((double)(num2 / m_AdvancedFrameConfigParams.BurstPeriodicity3 * 100f), 1)));
            }
            if (m_AdvancedFrameConfigParams.NumOfSubFrames == 4)
            {
                ushort chirpStartIdx = m_AdvancedFrameConfigParams.ChirpStartIdx4;
                ushort chirpEndIdx = (ushort)(m_AdvancedFrameConfigParams.ChirpStartIdx4 + m_AdvancedFrameConfigParams.NumOfChirps4 - 1);
                uint noOfLoops = (uint)m_AdvancedFrameConfigParams.NumOfLoops4;
                float num = CalculateFrameOnTimeForFrame(chirpStartIdx, chirpEndIdx, noOfLoops);
                float num2 = CalculateRampOnTimeForFrame(chirpStartIdx, chirpEndIdx, noOfLoops);
                if (num > m_AdvancedFrameConfigParams.BurstPeriodicity4)
                {
                    string str10 = string.Format("SubFrame4 duration needed is {0} ms\n", new object[]
                    {
                        num
                    });
                    string str11 = string.Format("SubFrame4 duration programmed is {0} ms \n", new object[]
                    {
                        m_AdvancedFrameConfigParams.BurstPeriodicity4
                    });
                    string str12 = string.Format("ERROR: SubFrame4 duration programmed is less than what is actually needed!", new object[0]);
                    MessageBox.Show(str11 + str10 + str12);
                    return -1;
                }
                if (m_AdvancedFrameConfigParams.SubFramePeriodicity4 < m_AdvancedFrameConfigParams.BurstPeriodicity4)
                {
                    MessageBox.Show(string.Format("ERROR! SubFrame4 period should be greater than or equal to  burst period\n", new object[0]));
                    return -1;
                }
                ScriptOps.m_MainForm.AdvanceFrameConfigTab.UpdateSubFrame4DutyCycle(Convert.ToString(Math.Round((double)(num / m_AdvancedFrameConfigParams.BurstPeriodicity4 * 100f), 1)));
                ScriptOps.m_MainForm.AdvanceFrameConfigTab.UpdateSubFrame4ActiveRampDutyCycle(Convert.ToString(Math.Round((double)(num2 / m_AdvancedFrameConfigParams.BurstPeriodicity4 * 100f), 1)));
            }
            return result;
        }

        public uint FindADCSamplesToAdvSubFrameFromProfileData(ushort chirpStartIdx, ushort NumOfChirps)
        {
            int i = (int)chirpStartIdx;
            int num = (int)chirpStartIdx;
            uint result = 1U;
            ushort num2 = (ushort)(chirpStartIdx + NumOfChirps - 1);
            while (i <= (int)num2)
            {
                if (ScriptOps.ProfileConfigDataParam[(int)ScriptOps.ChirpConfigDataParam[i].profileId].pnumAdcSamples == ScriptOps.ProfileConfigDataParam[(int)ScriptOps.ChirpConfigDataParam[num].profileId].pnumAdcSamples)
                {
                    result = 0U;
                }
                else
                {
                    result = 1U;
                }
                num = i;
                i++;
            }
            return result;
        }

        public int FindADCSamplesForAdvancedFrameConfig()
        {
            int result = -1;
            if (m_AdvancedFrameConfigParams.NumOfSubFrames == 1)
            {
                if (FindADCSamplesToAdvSubFrameFromProfileData(m_AdvancedFrameConfigParams.ChirpStartIdx, m_AdvancedFrameConfigParams.NumOfChirps) == 1U)
                {
                    MessageBox.Show(" Mismath of ADC samples among all chiprs contruction during Subframe1 configuration !", "Error", MessageBoxButtons.OK, MessageBoxIcon.Hand);
                    return result;
                }
            }
            else if (m_AdvancedFrameConfigParams.NumOfSubFrames == 2)
            {
                if (FindADCSamplesToAdvSubFrameFromProfileData(m_AdvancedFrameConfigParams.ChirpStartIdx, m_AdvancedFrameConfigParams.NumOfChirps) == 1U)
                {
                    MessageBox.Show(" Mismath of ADC samples among all chiprs contruction during Subframe1 configuration!", "Error", MessageBoxButtons.OK, MessageBoxIcon.Hand);
                    return result;
                }
                if (FindADCSamplesToAdvSubFrameFromProfileData(m_AdvancedFrameConfigParams.ChirpStartIdx2, m_AdvancedFrameConfigParams.NumOfChirps2) == 1U)
                {
                    MessageBox.Show(" Mismath of ADC samples among all chiprs contruction during Subframe2 configuration!", "Error", MessageBoxButtons.OK, MessageBoxIcon.Hand);
                    return result;
                }
            }
            else if (m_AdvancedFrameConfigParams.NumOfSubFrames == 3)
            {
                if (FindADCSamplesToAdvSubFrameFromProfileData(m_AdvancedFrameConfigParams.ChirpStartIdx, m_AdvancedFrameConfigParams.NumOfChirps) == 1U)
                {
                    MessageBox.Show(" Mismath of ADC samples among all chiprs contruction during  Subframe1 configuration!", "Error", MessageBoxButtons.OK, MessageBoxIcon.Hand);
                    return result;
                }
                if (FindADCSamplesToAdvSubFrameFromProfileData(m_AdvancedFrameConfigParams.ChirpStartIdx2, m_AdvancedFrameConfigParams.NumOfChirps2) == 1U)
                {
                    MessageBox.Show(" Mismath of ADC samples among all chiprs contruction during Subframe2 configuration!", "Error", MessageBoxButtons.OK, MessageBoxIcon.Hand);
                    return result;
                }
                if (FindADCSamplesToAdvSubFrameFromProfileData(m_AdvancedFrameConfigParams.ChirpStartIdx3, m_AdvancedFrameConfigParams.NumOfChirps3) == 1U)
                {
                    MessageBox.Show(" Mismath of ADC samples among all chiprs contruction during Subframe3 configuration!", "Error", MessageBoxButtons.OK, MessageBoxIcon.Hand);
                    return result;
                }
            }
            else if (m_AdvancedFrameConfigParams.NumOfSubFrames == 4)
            {
                if (FindADCSamplesToAdvSubFrameFromProfileData(m_AdvancedFrameConfigParams.ChirpStartIdx, m_AdvancedFrameConfigParams.NumOfChirps) == 1U)
                {
                    MessageBox.Show(" Mismath of ADC samples among all chiprs contruction during Subframe1 configuration!", "Error", MessageBoxButtons.OK, MessageBoxIcon.Hand);
                    return result;
                }
                if (FindADCSamplesToAdvSubFrameFromProfileData(m_AdvancedFrameConfigParams.ChirpStartIdx2, m_AdvancedFrameConfigParams.NumOfChirps2) == 1U)
                {
                    MessageBox.Show(" Mismath of ADC samples among all chiprs contruction during Subframe2 configuration!", "Error", MessageBoxButtons.OK, MessageBoxIcon.Hand);
                    return result;
                }
                if (FindADCSamplesToAdvSubFrameFromProfileData(m_AdvancedFrameConfigParams.ChirpStartIdx3, m_AdvancedFrameConfigParams.NumOfChirps3) == 1U)
                {
                    MessageBox.Show(" Mismath of ADC samples among all chiprs contruction during Subframe3 configuration !", "Error", MessageBoxButtons.OK, MessageBoxIcon.Hand);
                    return result;
                }
                if (FindADCSamplesToAdvSubFrameFromProfileData(m_AdvancedFrameConfigParams.ChirpStartIdx4, m_AdvancedFrameConfigParams.NumOfChirps4) == 1U)
                {
                    MessageBox.Show(" Mismath of ADC samples among all chiprs contruction during Subframe4 configuration !", "Error", MessageBoxButtons.OK, MessageBoxIcon.Hand);
                    return result;
                }
            }
            return result;
        }

        public string FindFullandHalfRateDataFromTpipe(uint DFEModeType, uint ADCRateType, uint DFENumOptDecimStages)
        {
            string result = string.Empty;
            if (DFEModeType == 1U)
            {
                if (ADCRateType == 1U)
                {
                    uint num = 8000U;
                    double[] array = new double[]
                    {
                        0.14,
                        0.22,
                        0.34,
                        0.58,
                        1.06,
                        2.02
                    };
                    if (DFENumOptDecimStages == 0U)
                    {
                        result = num + "," + array[0];
                    }
                    else if (DFENumOptDecimStages == 1U)
                    {
                        result = num + "," + array[1];
                    }
                    else if (DFENumOptDecimStages == 2U)
                    {
                        result = num + "," + array[2];
                    }
                    else if (DFENumOptDecimStages == 3U)
                    {
                        result = num + "," + array[3];
                    }
                    else if (DFENumOptDecimStages == 4U)
                    {
                        result = num + "," + array[4];
                    }
                    else if (DFENumOptDecimStages == 5U)
                    {
                        result = num + "," + array[5];
                    }
                    else if (DFENumOptDecimStages == 0U)
                    {
                        result = num + "," + array[0];
                    }
                    return result;
                }
                if (ADCRateType == 2U)
                {
                    uint num2 = 8000U;
                    double[] array2 = new double[]
                    {
                        0.14,
                        0.23,
                        0.39,
                        0.63,
                        1.11,
                        2.07
                    };
                    if (DFENumOptDecimStages == 0U)
                    {
                        result = num2 + "," + array2[0];
                    }
                    else if (DFENumOptDecimStages == 1U)
                    {
                        result = num2 + "," + array2[1];
                    }
                    else if (DFENumOptDecimStages == 2U)
                    {
                        result = num2 + "," + array2[2];
                    }
                    else if (DFENumOptDecimStages == 3U)
                    {
                        result = num2 + "," + array2[3];
                    }
                    else if (DFENumOptDecimStages == 4U)
                    {
                        result = num2 + "," + array2[4];
                    }
                    else if (DFENumOptDecimStages == 5U)
                    {
                        result = num2 + "," + array2[5];
                    }
                    return result;
                }
            }
            else if (DFEModeType == 2U)
            {
                if (ADCRateType == 1U)
                {
                    uint num3 = 5250U;
                    double[] array3 = new double[]
                    {
                        0.14,
                        0.22,
                        0.34,
                        0.58,
                        1.06,
                        2.02
                    };
                    if (DFENumOptDecimStages == 0U)
                    {
                        result = num3 + "," + array3[0];
                    }
                    else if (DFENumOptDecimStages == 1U)
                    {
                        result = num3 + "," + array3[1];
                    }
                    else if (DFENumOptDecimStages == 2U)
                    {
                        result = num3 + "," + array3[2];
                    }
                    else if (DFENumOptDecimStages == 3U)
                    {
                        result = num3 + "," + array3[3];
                    }
                    else if (DFENumOptDecimStages == 4U)
                    {
                        result = num3 + "," + array3[4];
                    }
                    else if (DFENumOptDecimStages == 5U)
                    {
                        result = num3 + "," + array3[5];
                    }
                    return result;
                }
                if (ADCRateType == 2U)
                {
                    uint num4 = 5250U;
                    double[] array4 = new double[]
                    {
                        0.14,
                        0.23,
                        0.39,
                        0.63,
                        1.11,
                        2.07
                    };
                    if (DFENumOptDecimStages == 0U)
                    {
                        num4 = 5250U;
                        result = num4 + "," + array4[0];
                    }
                    else if (DFENumOptDecimStages == 1U)
                    {
                        result = num4 + "," + array4[1];
                    }
                    else if (DFENumOptDecimStages == 2U)
                    {
                        result = num4 + "," + array4[2];
                    }
                    else if (DFENumOptDecimStages == 3U)
                    {
                        result = num4 + "," + array4[3];
                    }
                    else if (DFENumOptDecimStages == 4U)
                    {
                        result = num4 + "," + array4[4];
                    }
                    else if (DFENumOptDecimStages == 5U)
                    {
                        result = num4 + "," + array4[5];
                    }
                    return result;
                }
            }
            else if (DFEModeType == 0U)
            {
                if (ADCRateType == 1U)
                {
                    uint num5 = 5250U;
                    double[] array5 = new double[]
                    {
                        0.14,
                        0.22,
                        0.34,
                        0.58,
                        1.06,
                        2.02
                    };
                    if (DFENumOptDecimStages == 0U)
                    {
                        result = num5 + "," + array5[0];
                    }
                    else if (DFENumOptDecimStages == 1U)
                    {
                        result = num5 + "," + array5[1];
                    }
                    else if (DFENumOptDecimStages == 2U)
                    {
                        result = num5 + "," + array5[2];
                    }
                    else if (DFENumOptDecimStages == 3U)
                    {
                        result = num5 + "," + array5[3];
                    }
                    else if (DFENumOptDecimStages == 4U)
                    {
                        result = num5 + "," + array5[4];
                    }
                    else if (DFENumOptDecimStages == 5U)
                    {
                        result = num5 + "," + array5[5];
                    }
                    return result;
                }
                if (ADCRateType == 2U)
                {
                    uint num6 = 5250U;
                    double[] array6 = new double[]
                    {
                        0.14,
                        0.23,
                        0.39,
                        0.63,
                        1.11,
                        2.07
                    };
                    if (DFENumOptDecimStages == 0U)
                    {
                        num6 = 5250U;
                        result = num6 + "," + array6[0];
                    }
                    else if (DFENumOptDecimStages == 1U)
                    {
                        result = num6 + "," + array6[1];
                    }
                    else if (DFENumOptDecimStages == 2U)
                    {
                        result = num6 + "," + array6[2];
                    }
                    else if (DFENumOptDecimStages == 3U)
                    {
                        result = num6 + "," + array6[3];
                    }
                    else if (DFENumOptDecimStages == 4U)
                    {
                        result = num6 + "," + array6[4];
                    }
                    else if (DFENumOptDecimStages == 5U)
                    {
                        result = num6 + "," + array6[5];
                    }
                    return result;
                }
            }
            return result;
        }

        public string FindFullandHalfRateDataFromDFETlag(uint DFEModeType, uint ADCRateType, uint DFENumOptDecimStages)
        {
            string result = string.Empty;
            if (DFEModeType == 1U)
            {
                if (ADCRateType == 1U)
                {
                    uint num = 12000U;
                    double[] array = new double[]
                    {
                        0.19,
                        0.34,
                        0.57,
                        1.01,
                        1.9,
                        3.68
                    };
                    if (DFENumOptDecimStages == 0U)
                    {
                        result = num + "," + array[0];
                    }
                    else if (DFENumOptDecimStages == 1U)
                    {
                        result = num + "," + array[1];
                    }
                    else if (DFENumOptDecimStages == 2U)
                    {
                        result = num + "," + array[2];
                    }
                    else if (DFENumOptDecimStages == 3U)
                    {
                        result = num + "," + array[3];
                    }
                    else if (DFENumOptDecimStages == 4U)
                    {
                        result = num + "," + array[4];
                    }
                    else if (DFENumOptDecimStages == 5U)
                    {
                        result = num + "," + array[5];
                    }
                    else if (DFENumOptDecimStages == 0U)
                    {
                        result = num + "," + array[0];
                    }
                    return result;
                }
                if (ADCRateType == 2U)
                {
                    uint num2 = 12000U;
                    double[] array2 = new double[]
                    {
                        0.19,
                        0.33,
                        0.62,
                        0.63,
                        1.08,
                        1.97,
                        3.75
                    };
                    if (DFENumOptDecimStages == 0U)
                    {
                        num2 = 12000U;
                        result = num2 + "," + array2[0];
                    }
                    else if (DFENumOptDecimStages == 1U)
                    {
                        result = num2 + "," + array2[1];
                    }
                    else if (DFENumOptDecimStages == 2U)
                    {
                        result = num2 + "," + array2[2];
                    }
                    else if (DFENumOptDecimStages == 3U)
                    {
                        result = num2 + "," + array2[3];
                    }
                    else if (DFENumOptDecimStages == 4U)
                    {
                        result = num2 + "," + array2[4];
                    }
                    else if (DFENumOptDecimStages == 5U)
                    {
                        result = num2 + "," + array2[5];
                    }
                    return result;
                }
            }
            else if (DFEModeType == 2U)
            {
                if (ADCRateType == 1U)
                {
                    uint num3 = 7000U;
                    double[] array3 = new double[]
                    {
                        0.19,
                        0.34,
                        0.57,
                        1.01,
                        1.9,
                        3.68
                    };
                    if (DFENumOptDecimStages == 0U)
                    {
                        result = num3 + "," + array3[0];
                    }
                    else if (DFENumOptDecimStages == 1U)
                    {
                        result = num3 + "," + array3[1];
                    }
                    else if (DFENumOptDecimStages == 2U)
                    {
                        result = num3 + "," + array3[2];
                    }
                    else if (DFENumOptDecimStages == 3U)
                    {
                        result = num3 + "," + array3[3];
                    }
                    else if (DFENumOptDecimStages == 4U)
                    {
                        result = num3 + "," + array3[4];
                    }
                    else if (DFENumOptDecimStages == 5U)
                    {
                        result = num3 + "," + array3[5];
                    }
                    return result;
                }
                if (ADCRateType == 2U)
                {
                    uint num4 = 7000U;
                    double[] array4 = new double[]
                    {
                        0.19,
                        0.33,
                        0.62,
                        1.08,
                        1.97,
                        3.75
                    };
                    if (DFENumOptDecimStages == 0U)
                    {
                        num4 = 7000U;
                        result = num4 + "," + array4[0];
                    }
                    else if (DFENumOptDecimStages == 1U)
                    {
                        result = num4 + "," + array4[1];
                    }
                    else if (DFENumOptDecimStages == 2U)
                    {
                        result = num4 + "," + array4[2];
                    }
                    else if (DFENumOptDecimStages == 3U)
                    {
                        result = num4 + "," + array4[3];
                    }
                    else if (DFENumOptDecimStages == 4U)
                    {
                        result = num4 + "," + array4[4];
                    }
                    else if (DFENumOptDecimStages == 5U)
                    {
                        result = num4 + "," + array4[5];
                    }
                    return result;
                }
            }
            else if (DFEModeType == 0U)
            {
                if (ADCRateType == 1U)
                {
                    uint num5 = 7000U;
                    double[] array5 = new double[]
                    {
                        0.19,
                        0.34,
                        0.57,
                        1.01,
                        1.9,
                        3.68
                    };
                    if (DFENumOptDecimStages == 0U)
                    {
                        result = num5 + "," + array5[0];
                    }
                    else if (DFENumOptDecimStages == 1U)
                    {
                        result = num5 + "," + array5[1];
                    }
                    else if (DFENumOptDecimStages == 2U)
                    {
                        result = num5 + "," + array5[2];
                    }
                    else if (DFENumOptDecimStages == 3U)
                    {
                        result = num5 + "," + array5[3];
                    }
                    else if (DFENumOptDecimStages == 4U)
                    {
                        result = num5 + "," + array5[4];
                    }
                    else if (DFENumOptDecimStages == 5U)
                    {
                        result = num5 + "," + array5[5];
                    }
                    return result;
                }
                if (ADCRateType == 2U)
                {
                    uint num6 = 7000U;
                    double[] array6 = new double[]
                    {
                        0.19,
                        0.33,
                        0.62,
                        1.08,
                        1.97,
                        3.75
                    };
                    if (DFENumOptDecimStages == 0U)
                    {
                        num6 = 7000U;
                        result = num6 + "," + array6[0];
                    }
                    else if (DFENumOptDecimStages == 1U)
                    {
                        result = num6 + "," + array6[1];
                    }
                    else if (DFENumOptDecimStages == 2U)
                    {
                        result = num6 + "," + array6[2];
                    }
                    else if (DFENumOptDecimStages == 3U)
                    {
                        result = num6 + "," + array6[3];
                    }
                    else if (DFENumOptDecimStages == 4U)
                    {
                        result = num6 + "," + array6[4];
                    }
                    else if (DFENumOptDecimStages == 5U)
                    {
                        result = num6 + "," + array6[5];
                    }
                    return result;
                }
            }
            return result;
        }

        public double m000078(uint DFEModeType, uint ADCRateType, uint DFENumOptDecimStages, uint SampleRate, uint ProgFiltEnable)
        {
            double[,] array = new double[,]
            {
                {
                    8000.0,
                    8000.0,
                    8000.0,
                    8000.0,
                    8000.0,
                    8000.0
                },
                {
                    5250.0,
                    5250.0,
                    5250.0,
                    5250.0,
                    5250.0,
                    5250.0
                }
            };
            double[,] array2 = new double[,]
            {
                {
                    8000.0,
                    8000.0,
                    8000.0,
                    8000.0,
                    8000.0,
                    8000.0
                },
                {
                    5250.0,
                    5250.0,
                    5250.0,
                    5250.0,
                    5250.0,
                    5250.0
                }
            };
            double[,] array3 = new double[,]
            {
                {
                    0.14,
                    0.22,
                    0.34,
                    0.58,
                    1.06,
                    2.02
                },
                {
                    0.14,
                    0.22,
                    0.34,
                    0.58,
                    1.06,
                    2.02
                }
            };
            double[,] array4 = new double[,]
            {
                {
                    0.14,
                    0.23,
                    0.39,
                    0.63,
                    1.11,
                    2.07
                },
                {
                    0.14,
                    0.23,
                    0.39,
                    0.63,
                    1.11,
                    2.07
                }
            };
            uint num;
            if (DFEModeType == 1U || DFEModeType == 3U)
            {
                num = 0U;
            }
            else
            {
                num = 1U;
            }
            double num2;
            double num3;
            if (ADCRateType == 1U)
            {
                num2 = array3[(int)num, (int)DFENumOptDecimStages];
                num3 = array[(int)num, (int)DFENumOptDecimStages];
            }
            else
            {
                num2 = array4[(int)num, (int)DFENumOptDecimStages];
                num3 = array2[(int)num, (int)DFENumOptDecimStages];
            }
            if (DFEModeType == 0U || DFEModeType == 2U || DFEModeType == 3U)
            {
                num3 *= 2.0;
            }
            if (num2 == 2147483647.0 || num3 == 2147483647.0)
            {
                MessageBox.Show("In all combination Settling, Full Rate C1 and C0 values are not available in C1X format !", "Error", MessageBoxButtons.OK, MessageBoxIcon.Hand);
            }
            return Math.Round(num2 + num3 / (SampleRate * Math.Pow(2.0, ProgFiltEnable)), 2);
        }

        public double m000079(uint DFEModeType, uint ADCRateType, uint DFENumOptDecimStages, uint SampleRate, uint ProgFiltEnable)
        {
            double[,] array = new double[,]
            {
                {
                    12000.0,
                    12000.0,
                    12000.0,
                    12000.0,
                    12000.0,
                    12000.0
                },
                {
                    7000.0,
                    7000.0,
                    7000.0,
                    7000.0,
                    7000.0,
                    7000.0
                }
            };
            double[,] array2 = new double[,]
            {
                {
                    12000.0,
                    12000.0,
                    12000.0,
                    12000.0,
                    12000.0,
                    12000.0
                },
                {
                    7000.0,
                    7000.0,
                    7000.0,
                    7000.0,
                    7000.0,
                    7000.0
                }
            };
            double[,] array3 = new double[,]
            {
                {
                    0.19,
                    0.34,
                    0.57,
                    1.01,
                    1.9,
                    3.68
                },
                {
                    0.19,
                    0.34,
                    0.57,
                    1.01,
                    1.9,
                    3.68
                }
            };
            double[,] array4 = new double[,]
            {
                {
                    0.19,
                    0.33,
                    0.62,
                    1.08,
                    1.97,
                    3.75
                },
                {
                    0.19,
                    0.33,
                    0.62,
                    1.08,
                    1.97,
                    3.75
                }
            };
            uint num;
            if (DFEModeType == 1U || DFEModeType == 3U)
            {
                num = 0U;
            }
            else
            {
                num = 1U;
            }
            double num2;
            double num3;
            if (ADCRateType == 1U)
            {
                num2 = array3[(int)num, (int)DFENumOptDecimStages];
                num3 = array[(int)num, (int)DFENumOptDecimStages];
            }
            else
            {
                num2 = array4[(int)num, (int)DFENumOptDecimStages];
                num3 = array2[(int)num, (int)DFENumOptDecimStages];
            }
            if (DFEModeType == 0U || DFEModeType == 2U || DFEModeType == 3U)
            {
                num3 *= 2.0;
            }
            if (num2 == 2147483647.0 || num3 == 2147483647.0)
            {
                MessageBox.Show("In all combination Settling, Full Rate C1 and C0 values are not available in C1X format !", "Error", MessageBoxButtons.OK, MessageBoxIcon.Hand);
            }
            return Math.Round(num2 + num3 / (SampleRate * Math.Pow(2.0, ProgFiltEnable)), 2);
        }

        public double m00007a(uint DFEModeType, uint ADCRateType, uint DFENumOptDecimStages, uint SampleRate, uint ProgFiltEnable)
        {
            double[,] array = new double[,]
            {
                {
                    3744.14,
                    9200.08,
                    17889.7,
                    30661.69,
                    2147483647.0,
                    2147483647.0
                },
                {
                    949.06,
                    0.0,
                    1492.75,
                    6894.16,
                    9453.74,
                    2147483647.0
                }
            };
            double[,] array2 = new double[,]
            {
                {
                    2.69,
                    2.38,
                    0.94,
                    -4.07,
                    2147483647.0,
                    2147483647.0
                },
                {
                    2.61,
                    2.8,
                    2.68,
                    1.96,
                    1.59,
                    2147483647.0
                }
            };
            double[,] array3 = new double[,]
            {
                {
                    2.69,
                    2.38,
                    0.94,
                    -4.07,
                    2147483647.0,
                    2147483647.0
                },
                {
                    2.61,
                    2.8,
                    2.68,
                    1.96,
                    1.59,
                    2147483647.0
                }
            };
            uint num;
            if (DFEModeType == 1U || DFEModeType == 3U)
            {
                num = 0U;
            }
            else
            {
                num = 1U;
            }
            double num2;
            double num3;
            if (ADCRateType == 1U)
            {
                num2 = array2[(int)num, (int)DFENumOptDecimStages];
                num3 = array[(int)num, (int)DFENumOptDecimStages];
            }
            else
            {
                num2 = array3[(int)num, (int)DFENumOptDecimStages];
                num3 = array[(int)num, (int)DFENumOptDecimStages];
            }
            if (DFEModeType == 0U || DFEModeType == 2U || DFEModeType == 3U)
            {
                num3 *= 2.0;
            }
            if (num2 == 2147483647.0 || num3 == 2147483647.0)
            {
                MessageBox.Show("In 99% Settling, Full Rate C1 and C0 values are not available in C1X format !", "Error", MessageBoxButtons.OK, MessageBoxIcon.Hand);
            }
            if (num2 == 2147483647.0 || num3 == 4294967294.0)
            {
                if (ADCRateType == 1U)
                {
                    MessageBox.Show("In 99% Settling, Full Rate C1 and C0 values are not available in C2X format and Real format !", "Error", MessageBoxButtons.OK, MessageBoxIcon.Hand);
                }
                else
                {
                    MessageBox.Show("In 99% Settling, Half Rate C1 and C0 values are not available in C2X format and Real format !", "Error", MessageBoxButtons.OK, MessageBoxIcon.Hand);
                }
            }
            return Math.Round(num2 + num3 / (SampleRate * Math.Pow(2.0, ProgFiltEnable)), 2);
        }

        public double m00007b(uint DFEModeType, uint ADCRateType, uint DFENumOptDecimStages, uint SampleRate, uint ProgFiltEnable)
        {
            double[,] array = new double[,]
            {
                {
                    2126.69,
                    7661.49,
                    9433.18,
                    15849.42,
                    2147483647.0,
                    2147483647.0
                },
                {
                    1632.0,
                    1225.25,
                    3260.6,
                    4214.85,
                    4372.09,
                    2147483647.0
                }
            };
            double[,] array2 = new double[,]
            {
                {
                    1.85,
                    1.51,
                    1.28,
                    -1.11,
                    2147483647.0,
                    2147483647.0
                },
                {
                    1.54,
                    1.59,
                    1.49,
                    1.58,
                    2.48,
                    2147483647.0
                }
            };
            double[,] array3 = new double[,]
            {
                {
                    1.85,
                    1.51,
                    1.28,
                    -1.11,
                    2147483647.0,
                    2147483647.0
                },
                {
                    1.54,
                    1.59,
                    1.49,
                    1.58,
                    2.48,
                    2147483647.0
                }
            };
            uint num;
            if (DFEModeType == 1U || DFEModeType == 3U)
            {
                num = 0U;
            }
            else
            {
                num = 1U;
            }
            double num2;
            double num3;
            if (ADCRateType == 1U)
            {
                num2 = array2[(int)num, (int)DFENumOptDecimStages];
                num3 = array[(int)num, (int)DFENumOptDecimStages];
            }
            else
            {
                num2 = array3[(int)num, (int)DFENumOptDecimStages];
                num3 = array[(int)num, (int)DFENumOptDecimStages];
            }
            if (DFEModeType == 0U || DFEModeType == 2U || DFEModeType == 3U)
            {
                num3 *= 2.0;
            }
            if (num2 == 2147483647.0 || num3 == 2147483647.0)
            {
                MessageBox.Show("In 95% Settling, Full Rate C1 and C0 values are not available in C1X format !", "Error", MessageBoxButtons.OK, MessageBoxIcon.Hand);
            }
            if (num2 == 2147483647.0 || num3 == 4294967294.0)
            {
                if (ADCRateType == 1U)
                {
                    MessageBox.Show("In 95% Settling, Full Rate C1 and C0 values are not available in C2X format and Real format !", "Error", MessageBoxButtons.OK, MessageBoxIcon.Hand);
                }
                else
                {
                    MessageBox.Show("In 95% Settling, Half Rate C1 and C0 values are not available in C2X format and Real format !", "Error", MessageBoxButtons.OK, MessageBoxIcon.Hand);
                }
            }
            return Math.Round(num2 + num3 / (SampleRate * Math.Pow(2.0, ProgFiltEnable)), 2);
        }

        public double m00007c(uint DFEModeType, uint ADCRateType, uint DFENumOptDecimStages, uint SampleRate, uint ProgFiltEnable)
        {
            double[,] array = new double[,]
            {
                {
                    1819.14,
                    6384.48,
                    3140.29,
                    4260.13,
                    2147483647.0,
                    2147483647.0
                },
                {
                    1674.04,
                    2494.95,
                    4040.95,
                    2092.27,
                    863.37,
                    2147483647.0
                }
            };
            double[,] array2 = new double[,]
            {
                {
                    1.17,
                    0.88,
                    1.51,
                    1.27,
                    2147483647.0,
                    2147483647.0
                },
                {
                    0.77,
                    0.71,
                    0.67,
                    1.25,
                    2.7,
                    2147483647.0
                }
            };
            double[,] array3 = new double[,]
            {
                {
                    1.17,
                    0.88,
                    1.51,
                    1.27,
                    2147483647.0,
                    2147483647.0
                },
                {
                    0.77,
                    0.71,
                    0.67,
                    1.25,
                    2.7,
                    2147483647.0
                }
            };
            uint num;
            if (DFEModeType == 1U || DFEModeType == 3U)
            {
                num = 0U;
            }
            else
            {
                num = 1U;
            }
            double num2;
            double num3;
            if (ADCRateType == 1U)
            {
                num2 = array2[(int)num, (int)DFENumOptDecimStages];
                num3 = array[(int)num, (int)DFENumOptDecimStages];
            }
            else
            {
                num2 = array3[(int)num, (int)DFENumOptDecimStages];
                num3 = array[(int)num, (int)DFENumOptDecimStages];
            }
            if (DFEModeType == 0U || DFEModeType == 2U || DFEModeType == 3U)
            {
                num3 *= 2.0;
            }
            if (num2 == 2147483647.0 || num3 == 2147483647.0)
            {
                MessageBox.Show("In 90% Settling, Full Rate C1 and C0 values are not available in C1X format !", "Error", MessageBoxButtons.OK, MessageBoxIcon.Hand);
            }
            if (num2 == 2147483647.0 || num3 == 4294967294.0)
            {
                if (ADCRateType == 1U)
                {
                    MessageBox.Show("In 90% Settling, Full Rate C1 and C0 values are not available in C2X format and Real format !", "Error", MessageBoxButtons.OK, MessageBoxIcon.Hand);
                }
                else
                {
                    MessageBox.Show("In 90% Settling, Half Rate C1 and C0 values are not available in C2X format and Real format !", "Error", MessageBoxButtons.OK, MessageBoxIcon.Hand);
                }
            }
            return Math.Round(num2 + num3 / (SampleRate * Math.Pow(2.0, ProgFiltEnable)), 2);
        }

        public double m00007d(uint DFEModeType, uint ADCRateType, uint DFENumOptDecimStages, uint SampleRate, uint ProgFiltEnable)
        {
            double[,] array = new double[,]
            {
                {
                    2472.85,
                    14009.57,
                    17874.41,
                    25151.27,
                    2147483647.0,
                    2147483647.0
                },
                {
                    7049.28,
                    6343.89,
                    11753.04,
                    13530.37,
                    6381.52,
                    2147483647.0
                }
            };
            double[,] array2 = new double[,]
            {
                {
                    1.89,
                    1.13,
                    0.81,
                    -1.87,
                    2147483647.0,
                    2147483647.0
                },
                {
                    0.73,
                    0.8,
                    0.03,
                    -0.87,
                    3.7,
                    2147483647.0
                }
            };
            double[,] array3 = new double[,]
            {
                {
                    1.89,
                    1.13,
                    0.81,
                    -1.87,
                    2147483647.0,
                    2147483647.0
                },
                {
                    0.73,
                    0.8,
                    0.03,
                    -0.87,
                    3.7,
                    2147483647.0
                }
            };
            uint num;
            if (DFEModeType == 1U || DFEModeType == 3U)
            {
                num = 0U;
            }
            else
            {
                num = 1U;
            }
            double num2;
            double num3;
            if (ADCRateType == 1U)
            {
                num2 = array2[(int)num, (int)DFENumOptDecimStages];
                num3 = array[(int)num, (int)DFENumOptDecimStages];
            }
            else
            {
                num2 = array3[(int)num, (int)DFENumOptDecimStages];
                num3 = array[(int)num, (int)DFENumOptDecimStages];
            }
            if (DFEModeType == 0U || DFEModeType == 2U || DFEModeType == 3U)
            {
                num3 *= 2.0;
            }
            if (num2 == 2147483647.0 || num3 == 2147483647.0)
            {
                MessageBox.Show("In 99% Settling, Full Rate C1 and C0 values are not available in C1X format !", "Error", MessageBoxButtons.OK, MessageBoxIcon.Hand);
            }
            if (num2 == 2147483647.0 || num3 == 4294967294.0)
            {
                if (ADCRateType == 1U)
                {
                    MessageBox.Show("In 99% Settling, Full Rate C1 and C0 values are not available in C2X format and Real format !", "Error", MessageBoxButtons.OK, MessageBoxIcon.Hand);
                }
                else
                {
                    MessageBox.Show("In 99% Settling, Half Rate C1 and C0 values are not available in C2X format and Real format !", "Error", MessageBoxButtons.OK, MessageBoxIcon.Hand);
                }
            }
            return Math.Round(num2 + num3 / (SampleRate * Math.Pow(2.0, ProgFiltEnable)), 2);
        }

        public double m00007e(uint DFEModeType, uint ADCRateType, uint DFENumOptDecimStages, uint SampleRate, uint ProgFiltEnable)
        {
            double[,] array = new double[,]
            {
                {
                    0.0,
                    10616.69,
                    10255.84,
                    13220.73,
                    2147483647.0,
                    2147483647.0
                },
                {
                    6931.1,
                    5673.69,
                    6528.03,
                    6978.23,
                    5622.22,
                    2147483647.0
                }
            };
            double[,] array2 = new double[,]
            {
                {
                    1.44,
                    0.72,
                    0.9,
                    -0.2,
                    2147483647.0,
                    2147483647.0
                },
                {
                    0.39,
                    0.51,
                    0.47,
                    0.36,
                    1.7,
                    2147483647.0
                }
            };
            double[,] array3 = new double[,]
            {
                {
                    1.44,
                    0.72,
                    0.9,
                    -0.2,
                    2147483647.0,
                    2147483647.0
                },
                {
                    0.39,
                    0.51,
                    0.47,
                    0.36,
                    1.7,
                    2147483647.0
                }
            };
            uint num;
            if (DFEModeType == 1U || DFEModeType == 3U)
            {
                num = 0U;
            }
            else
            {
                num = 1U;
            }
            double num2;
            double num3;
            if (ADCRateType == 1U)
            {
                num2 = array2[(int)num, (int)DFENumOptDecimStages];
                num3 = array[(int)num, (int)DFENumOptDecimStages];
            }
            else
            {
                num2 = array3[(int)num, (int)DFENumOptDecimStages];
                num3 = array[(int)num, (int)DFENumOptDecimStages];
            }
            if (DFEModeType == 0U || DFEModeType == 2U || DFEModeType == 3U)
            {
                num3 *= 2.0;
            }
            if (num2 == 2147483647.0 || num3 == 2147483647.0)
            {
                MessageBox.Show("In 95% Settling, Full Rate C1 and C0 values are not available in C1X format !", "Error", MessageBoxButtons.OK, MessageBoxIcon.Hand);
            }
            if (num2 == 2147483647.0 || num3 == 4294967294.0)
            {
                if (ADCRateType == 1U)
                {
                    MessageBox.Show("In 95% Settling, Full Rate C1 and C0 values are not available in C2X format and Real format !", "Error", MessageBoxButtons.OK, MessageBoxIcon.Hand);
                }
                else
                {
                    MessageBox.Show("In 95% Settling, Half Rate C1 and C0 values are not available in C2X format and Real format !", "Error", MessageBoxButtons.OK, MessageBoxIcon.Hand);
                }
            }
            return Math.Round(num2 + num3 / (SampleRate * Math.Pow(2.0, ProgFiltEnable)), 2);
        }

        public double m00007f(uint DFEModeType, uint ADCRateType, uint DFENumOptDecimStages, uint SampleRate, uint ProgFiltEnable)
        {
            double[,] array = new double[,]
            {
                {
                    0.0,
                    6905.13,
                    4134.75,
                    3557.46,
                    2147483647.0,
                    2147483647.0
                },
                {
                    5949.42,
                    4738.17,
                    2420.67,
                    1984.47,
                    4723.58,
                    2147483647.0
                }
            };
            double[,] array2 = new double[,]
            {
                {
                    0.95,
                    0.51,
                    0.97,
                    1.21,
                    2147483647.0,
                    2147483647.0
                },
                {
                    0.19,
                    0.31,
                    0.78,
                    1.18,
                    0.22,
                    2147483647.0
                }
            };
            double[,] array3 = new double[,]
            {
                {
                    0.95,
                    0.51,
                    0.97,
                    1.21,
                    2147483647.0,
                    2147483647.0
                },
                {
                    0.19,
                    0.31,
                    0.78,
                    1.18,
                    0.22,
                    2147483647.0
                }
            };
            uint num;
            if (DFEModeType == 1U || DFEModeType == 3U)
            {
                num = 0U;
            }
            else
            {
                num = 1U;
            }
            double num2;
            double num3;
            if (ADCRateType == 1U)
            {
                num2 = array2[(int)num, (int)DFENumOptDecimStages];
                num3 = array[(int)num, (int)DFENumOptDecimStages];
            }
            else
            {
                num2 = array3[(int)num, (int)DFENumOptDecimStages];
                num3 = array[(int)num, (int)DFENumOptDecimStages];
            }
            if (DFEModeType == 0U || DFEModeType == 2U || DFEModeType == 3U)
            {
                num3 *= 2.0;
            }
            if (num2 == 2147483647.0 || num3 == 2147483647.0)
            {
                MessageBox.Show("In 90% Settling, Full Rate C1 and C0 values are not available in C1X format !", "Error", MessageBoxButtons.OK, MessageBoxIcon.Hand);
            }
            if (num2 == 2147483647.0 || num3 == 4294967294.0)
            {
                if (ADCRateType == 1U)
                {
                    MessageBox.Show("In 90% Settling, Full Rate C1 and C0 values are not available in C2X format and Real format !", "Error", MessageBoxButtons.OK, MessageBoxIcon.Hand);
                }
                else
                {
                    MessageBox.Show("In 90% Settling, Half Rate C1 and C0 values are not available in C2X format and Real format !", "Error", MessageBoxButtons.OK, MessageBoxIcon.Hand);
                }
            }
            return Math.Round(num2 + num3 / (SampleRate * Math.Pow(2.0, ProgFiltEnable)), 2);
        }

        public double m000080(uint DFEModeType, uint ADCRateType, uint DFENumOptDecimStages, uint SampleRate, uint ProgFiltEnable)
        {
            double[,] array = new double[,]
            {
                {
                    2847.88,
                    8790.84,
                    16088.48,
                    18032.9,
                    2147483647.0,
                    2147483647.0
                },
                {
                    1494.25,
                    0.0,
                    3934.92,
                    10320.98,
                    5485.58,
                    2147483647.0
                }
            };
            double[,] array2 = new double[,]
            {
                {
                    2.55,
                    2.19,
                    1.15,
                    1.16,
                    2147483647.0,
                    2147483647.0
                },
                {
                    2.42,
                    2.62,
                    1.98,
                    0.64,
                    3.9,
                    2147483647.0
                }
            };
            double[,] array3 = new double[,]
            {
                {
                    2.55,
                    2.19,
                    1.15,
                    1.16,
                    2147483647.0,
                    2147483647.0
                },
                {
                    2.42,
                    2.62,
                    1.98,
                    0.64,
                    3.9,
                    2147483647.0
                }
            };
            uint num;
            if (DFEModeType == 1U || DFEModeType == 3U)
            {
                num = 0U;
            }
            else
            {
                num = 1U;
            }
            double num2;
            double num3;
            if (ADCRateType == 1U)
            {
                num2 = array2[(int)num, (int)DFENumOptDecimStages];
                num3 = array[(int)num, (int)DFENumOptDecimStages];
            }
            else
            {
                num2 = array3[(int)num, (int)DFENumOptDecimStages];
                num3 = array[(int)num, (int)DFENumOptDecimStages];
            }
            if (DFEModeType == 0U || DFEModeType == 2U || DFEModeType == 3U)
            {
                num3 *= 2.0;
            }
            if (num2 == 2147483647.0 || num3 == 2147483647.0)
            {
                MessageBox.Show("In 99% Settling, Full Rate C1 and C0 values are not available in C1X format !", "Error", MessageBoxButtons.OK, MessageBoxIcon.Hand);
            }
            if (num2 == 2147483647.0 || num3 == 4294967294.0)
            {
                if (ADCRateType == 1U)
                {
                    MessageBox.Show("In 99% Settling, Full Rate C1 and C0 values are not available in C2X format and Real format !", "Error", MessageBoxButtons.OK, MessageBoxIcon.Hand);
                }
                else
                {
                    MessageBox.Show("In 99% Settling, Half Rate C1 and C0 values are not available in C2X format and Real format !", "Error", MessageBoxButtons.OK, MessageBoxIcon.Hand);
                }
            }
            return Math.Round(num2 + num3 / (SampleRate * Math.Pow(2.0, ProgFiltEnable)), 2);
        }

        public double m000081(uint DFEModeType, uint ADCRateType, uint DFENumOptDecimStages, uint SampleRate, uint ProgFiltEnable)
        {
            double[,] array = new double[,]
            {
                {
                    2835.15,
                    7716.26,
                    8491.25,
                    7795.16,
                    2147483647.0,
                    2147483647.0
                },
                {
                    1323.55,
                    1943.83,
                    3424.91,
                    6010.44,
                    4517.7,
                    2147483647.0
                }
            };
            double[,] array2 = new double[,]
            {
                {
                    1.66,
                    1.37,
                    1.35,
                    2.05,
                    2147483647.0,
                    2147483647.0
                },
                {
                    1.47,
                    1.42,
                    1.39,
                    0.88,
                    2.02,
                    2147483647.0
                }
            };
            double[,] array3 = new double[,]
            {
                {
                    1.66,
                    1.37,
                    1.35,
                    2.05,
                    2147483647.0,
                    2147483647.0
                },
                {
                    1.47,
                    1.42,
                    1.39,
                    0.88,
                    2.02,
                    2147483647.0
                }
            };
            uint num;
            if (DFEModeType == 1U || DFEModeType == 3U)
            {
                num = 0U;
            }
            else
            {
                num = 1U;
            }
            double num2;
            double num3;
            if (ADCRateType == 1U)
            {
                num2 = array2[(int)num, (int)DFENumOptDecimStages];
                num3 = array[(int)num, (int)DFENumOptDecimStages];
            }
            else
            {
                num2 = array3[(int)num, (int)DFENumOptDecimStages];
                num3 = array[(int)num, (int)DFENumOptDecimStages];
            }
            if (DFEModeType == 0U || DFEModeType == 2U || DFEModeType == 3U)
            {
                num3 *= 2.0;
            }
            if (num2 == 2147483647.0 || num3 == 2147483647.0)
            {
                MessageBox.Show("In 95% Settling, Full Rate C1 and C0 values are not available in C1X format !", "Error", MessageBoxButtons.OK, MessageBoxIcon.Hand);
            }
            if (num2 == 2147483647.0 || num3 == 4294967294.0)
            {
                if (ADCRateType == 1U)
                {
                    MessageBox.Show("In 95% Settling, Full Rate C1 and C0 values are not available in C2X format and Real format !", "Error", MessageBoxButtons.OK, MessageBoxIcon.Hand);
                }
                else
                {
                    MessageBox.Show("In 95% Settling, Half Rate C1 and C0 values are not available in C2X format and Real format !", "Error", MessageBoxButtons.OK, MessageBoxIcon.Hand);
                }
            }
            return Math.Round(num2 + num3 / (SampleRate * Math.Pow(2.0, ProgFiltEnable)), 2);
        }

        public double m000082(uint DFEModeType, uint ADCRateType, uint DFENumOptDecimStages, uint SampleRate, uint ProgFiltEnable)
        {
            double[,] array = new double[,]
            {
                {
                    3360.83,
                    6678.21,
                    2879.65,
                    662.75,
                    2147483647.0,
                    2147483647.0
                },
                {
                    843.05,
                    3589.81,
                    2683.11,
                    2426.03,
                    3469.8,
                    2147483647.0
                }
            };
            double[,] array2 = new double[,]
            {
                {
                    0.98,
                    0.78,
                    1.46,
                    2.5,
                    2147483647.0,
                    2147483647.0
                },
                {
                    0.78,
                    0.56,
                    0.97,
                    1.11,
                    0.65,
                    2147483647.0
                }
            };
            double[,] array3 = new double[,]
            {
                {
                    0.98,
                    0.78,
                    1.46,
                    2.5,
                    2147483647.0,
                    2147483647.0
                },
                {
                    0.78,
                    0.56,
                    0.97,
                    1.11,
                    0.65,
                    2147483647.0
                }
            };
            uint num;
            if (DFEModeType == 1U || DFEModeType == 3U)
            {
                num = 0U;
            }
            else
            {
                num = 1U;
            }
            double num2;
            double num3;
            if (ADCRateType == 1U)
            {
                num2 = array2[(int)num, (int)DFENumOptDecimStages];
                num3 = array[(int)num, (int)DFENumOptDecimStages];
            }
            else
            {
                num2 = array3[(int)num, (int)DFENumOptDecimStages];
                num3 = array[(int)num, (int)DFENumOptDecimStages];
            }
            if (DFEModeType == 0U || DFEModeType == 2U || DFEModeType == 3U)
            {
                num3 *= 2.0;
            }
            if (num2 == 2147483647.0 || num3 == 2147483647.0)
            {
                MessageBox.Show("In 90% Settling, Full Rate C1 and C0 values are not available in C1X format !", "Error", MessageBoxButtons.OK, MessageBoxIcon.Hand);
            }
            if (num2 == 2147483647.0 || num3 == 4294967294.0)
            {
                if (ADCRateType == 1U)
                {
                    MessageBox.Show("In 90% Settling, Full Rate C1 and C0 values are not available in C2X format and Real format !", "Error", MessageBoxButtons.OK, MessageBoxIcon.Hand);
                }
                else
                {
                    MessageBox.Show("In 90% Settling, Half Rate C1 and C0 values are not available in C2X format and Real format !", "Error", MessageBoxButtons.OK, MessageBoxIcon.Hand);
                }
            }
            return Math.Round(num2 + num3 / (SampleRate * Math.Pow(2.0, ProgFiltEnable)), 2);
        }

        public double m000083(uint DFEModeType, uint ADCRateType, uint DFENumOptDecimStages, uint SampleRate, uint ProgFiltEnable)
        {
            double[,] array = new double[,]
            {
                {
                    0.0,
                    16267.15,
                    20583.38,
                    10165.18,
                    2147483647.0,
                    2147483647.0
                },
                {
                    4554.12,
                    3605.83,
                    10210.28,
                    11313.84,
                    16841.88,
                    2147483647.0
                }
            };
            double[,] array2 = new double[,]
            {
                {
                    2.04,
                    0.86,
                    0.29,
                    3.39,
                    2147483647.0,
                    2147483647.0
                },
                {
                    1.13,
                    1.16,
                    0.38,
                    1.0,
                    -4.9,
                    2147483647.0
                }
            };
            double[,] array3 = new double[,]
            {
                {
                    2.04,
                    0.86,
                    0.29,
                    3.39,
                    2147483647.0,
                    2147483647.0
                },
                {
                    1.13,
                    1.16,
                    0.38,
                    1.0,
                    -4.9,
                    2147483647.0
                }
            };
            uint num;
            if (DFEModeType == 1U || DFEModeType == 3U)
            {
                num = 0U;
            }
            else
            {
                num = 1U;
            }
            double num2;
            double num3;
            if (ADCRateType == 1U)
            {
                num2 = array2[(int)num, (int)DFENumOptDecimStages];
                num3 = array[(int)num, (int)DFENumOptDecimStages];
            }
            else
            {
                num2 = array3[(int)num, (int)DFENumOptDecimStages];
                num3 = array[(int)num, (int)DFENumOptDecimStages];
            }
            if (DFEModeType == 0U || DFEModeType == 2U || DFEModeType == 3U)
            {
                num3 *= 2.0;
            }
            if (num2 == 2147483647.0 || num3 == 2147483647.0)
            {
                MessageBox.Show("In 99% Settling, Full Rate C1 and C0 values are not available in C1X format !", "Error", MessageBoxButtons.OK, MessageBoxIcon.Hand);
            }
            if (num2 == 2147483647.0 || num3 == 4294967294.0)
            {
                if (ADCRateType == 1U)
                {
                    MessageBox.Show("In 99% Settling, Full Rate C1 and C0 values are not available in C2X format and Real format !", "Error", MessageBoxButtons.OK, MessageBoxIcon.Hand);
                }
                else
                {
                    MessageBox.Show("In 99% Settling, Half Rate C1 and C0 values are not available in C2X format and Real format !", "Error", MessageBoxButtons.OK, MessageBoxIcon.Hand);
                }
            }
            return Math.Round(num2 + num3 / (SampleRate * Math.Pow(2.0, ProgFiltEnable)), 2);
        }

        public double m000084(uint DFEModeType, uint ADCRateType, uint DFENumOptDecimStages, uint SampleRate, uint ProgFiltEnable)
        {
            double[,] array = new double[,]
            {
                {
                    2044.63,
                    11266.58,
                    11515.91,
                    3814.95,
                    2147483647.0,
                    2147483647.0
                },
                {
                    5421.33,
                    4642.63,
                    5838.99,
                    6251.38,
                    10299.96,
                    2147483647.0
                }
            };
            double[,] array2 = new double[,]
            {
                {
                    1.24,
                    0.62,
                    0.63,
                    3.15,
                    2147483647.0,
                    2147483647.0
                },
                {
                    0.57,
                    0.64,
                    0.63,
                    0.63,
                    -2.29,
                    2147483647.0
                }
            };
            double[,] array3 = new double[,]
            {
                {
                    1.24,
                    0.62,
                    0.63,
                    3.15,
                    2147483647.0,
                    2147483647.0
                },
                {
                    0.57,
                    0.64,
                    0.63,
                    0.63,
                    -2.29,
                    2147483647.0
                }
            };
            uint num;
            if (DFEModeType == 1U || DFEModeType == 3U)
            {
                num = 0U;
            }
            else
            {
                num = 1U;
            }
            double num2;
            double num3;
            if (ADCRateType == 1U)
            {
                num2 = array2[(int)num, (int)DFENumOptDecimStages];
                num3 = array[(int)num, (int)DFENumOptDecimStages];
            }
            else
            {
                num2 = array3[(int)num, (int)DFENumOptDecimStages];
                num3 = array[(int)num, (int)DFENumOptDecimStages];
            }
            if (DFEModeType == 0U || DFEModeType == 2U || DFEModeType == 3U)
            {
                num3 *= 2.0;
            }
            if (num2 == 2147483647.0 || num3 == 2147483647.0)
            {
                MessageBox.Show("In 95% Settling, Full Rate C1 and C0 values are not available in C1X format !", "Error", MessageBoxButtons.OK, MessageBoxIcon.Hand);
            }
            if (num2 == 2147483647.0 || num3 == 4294967294.0)
            {
                if (ADCRateType == 1U)
                {
                    MessageBox.Show("In 95% Settling, Full Rate C1 and C0 values are not available in C2X format and Real format !", "Error", MessageBoxButtons.OK, MessageBoxIcon.Hand);
                }
                else
                {
                    MessageBox.Show("In 95% Settling, Half Rate C1 and C0 values are not available in C2X format and Real format !", "Error", MessageBoxButtons.OK, MessageBoxIcon.Hand);
                }
            }
            return Math.Round(num2 + num3 / (SampleRate * Math.Pow(2.0, ProgFiltEnable)), 2);
        }

        public double m000085(uint DFEModeType, uint ADCRateType, uint DFENumOptDecimStages, uint SampleRate, uint ProgFiltEnable)
        {
            double[,] array = new double[,]
            {
                {
                    4370.56,
                    6499.43,
                    4282.22,
                    0.0,
                    2147483647.0,
                    2147483647.0
                },
                {
                    5387.07,
                    4890.76,
                    2395.63,
                    2269.24,
                    5423.79,
                    2147483647.0
                }
            };
            double[,] array2 = new double[,]
            {
                {
                    0.6,
                    0.52,
                    0.91,
                    2.73,
                    2147483647.0,
                    2147483647.0
                },
                {
                    0.2,
                    0.3,
                    0.79,
                    1.04,
                    -0.55,
                    2147483647.0
                }
            };
            double[,] array3 = new double[,]
            {
                {
                    0.6,
                    0.52,
                    0.91,
                    2.73,
                    2147483647.0,
                    2147483647.0
                },
                {
                    0.2,
                    0.3,
                    0.79,
                    1.04,
                    -0.55,
                    2147483647.0
                }
            };
            uint num;
            if (DFEModeType == 1U || DFEModeType == 3U)
            {
                num = 0U;
            }
            else
            {
                num = 1U;
            }
            double num2;
            double num3;
            if (ADCRateType == 1U)
            {
                num2 = array2[(int)num, (int)DFENumOptDecimStages];
                num3 = array[(int)num, (int)DFENumOptDecimStages];
            }
            else
            {
                num2 = array3[(int)num, (int)DFENumOptDecimStages];
                num3 = array[(int)num, (int)DFENumOptDecimStages];
            }
            if (DFEModeType == 0U || DFEModeType == 2U || DFEModeType == 3U)
            {
                num3 *= 2.0;
            }
            if (num2 == 2147483647.0 || num3 == 2147483647.0)
            {
                MessageBox.Show("In 90% Settling, Full Rate C1 and C0 values are not available in C1X format !", "Error", MessageBoxButtons.OK, MessageBoxIcon.Hand);
            }
            if (num2 == 2147483647.0 || num3 == 4294967294.0)
            {
                if (ADCRateType == 1U)
                {
                    MessageBox.Show("In 90% Settling, Full Rate C1 and C0 values are not available in C2X format and Real format !", "Error", MessageBoxButtons.OK, MessageBoxIcon.Hand);
                }
                else
                {
                    MessageBox.Show("In 90% Settling, Half Rate C1 and C0 values are not available in C2X format and Real format !", "Error", MessageBoxButtons.OK, MessageBoxIcon.Hand);
                }
            }
            return Math.Round(num2 + num3 / (SampleRate * Math.Pow(2.0, ProgFiltEnable)), 2);
        }

        public string GetErrorType(int val)
        {
            switch (val)
            {
                case -14:
                    return "FILE CRC MISMATCHED";
                case -13:
                    return "FILE TYPE MISMATCHED";
                case -12:
                    return "API NOT SUPPORTED";
                case -11:
                    return "INVALID STATE ERROR";
                case -10:
                    return "RADAR OSIF ERROR";
                case -9:
                    return "FATAL ERROR";
                case -8:
                    return "RESP TIMEOUT";
                case -7:
                    return "CHKSUM FAILED";
                case -6:
                    return "CRC FAILED";
                case -5:
                    return "MALLOC ERROR";
                case -4:
                    return "RADAR INTERFACE ERROR";
                case -3:
                    return "SELF ERROR";
                case -2:
                    return "INVALID INPUT";
                case -1:
                    return "PROTOCOL ERROR";
                case 0:
                    return "SUCCESS";
                case 1:
                    return "INCORRECT API MSGID";
                case 2:
                    return "SUB BLOCK NOT FOUND IN THE MSG";
                case 3:
                    return "INCORRECT SUB BLOCK ID";
                case 4:
                    return "INCORRECT SUB BLOCK LENGTH";
                case 5:
                    return "INCORRECT SUB BLOCK DATA";
                case 6:
                    return "ERROR IN PROCCESSING THE COMMAND";
                case 7:
                    return "BINARY FILE CRC MISMACTHED ERROR";
                case 8:
                    return "BINARY FILE TYPE MISMACTHED W.R.T MAGIC NUMBER";
                case 9:
                case 10:
                case 11:
                case 12:
                case 13:
                case 14:
                case 15:
                case 16:
                case 17:
                case 18:
                case 19:
                case 157:
                case 158:
                case 159:
                case 160:
                case 161:
                case 162:
                case 163:
                case 164:
                case 165:
                case 166:
                case 167:
                case 168:
                case 169:
                case 170:
                case 171:
                case 172:
                case 173:
                case 174:
                case 175:
                case 176:
                case 177:
                case 178:
                case 179:
                case 180:
                case 181:
                case 182:
                case 183:
                case 184:
                case 185:
                case 186:
                case 187:
                case 188:
                case 189:
                case 190:
                case 191:
                case 192:
                case 193:
                case 194:
                case 195:
                case 196:
                case 197:
                case 198:
                case 199:
                case 200:
                case 201:
                case 202:
                case 203:
                case 204:
                case 205:
                case 206:
                case 207:
                case 208:
                case 209:
                case 210:
                case 211:
                case 212:
                case 213:
                case 214:
                case 215:
                case 216:
                case 217:
                case 218:
                case 219:
                case 220:
                case 221:
                case 222:
                case 223:
                case 224:
                case 225:
                case 226:
                case 227:
                case 228:
                case 229:
                case 230:
                case 231:
                case 232:
                case 233:
                case 234:
                case 235:
                case 236:
                case 237:
                case 238:
                case 239:
                case 240:
                case 241:
                case 242:
                case 243:
                case 244:
                case 245:
                case 246:
                case 247:
                case 248:
                case 249:
                case 271:
                case 272:
                case 273:
                case 274:
                case 275:
                case 276:
                case 277:
                case 278:
                case 282:
                case 284:
                case 285:
                case 286:
                case 287:
                case 288:
                case 289:
                    break;
                case 20:
                    return "FRAME ARE ALREADY STARTED WHEN THE FRAME_START COMMAND WAS ISSUED";
                case 21:
                    return "FRAME ARE ALREADY STOPPED WHEN THE FRAME_STOP COMMAND WAS ISSUED";
                case 22:
                    return "NO VALID FRAME CONFIGURATION API WAS ISSUED AND FRAMES ARE STARTED";
                case 23:
                    return "START_STOP_CMD PARAMETER IS OUT OF RANGE";
                case 24:
                    return "RX_CHAN_EN PARAMETER IS OUT OF RANGE (MAX RANGE MAY VARY BASED ON DEVICE VARIANT)";
                case 25:
                    return "TX_CHAN_EN PARAMETER IS OUT OF RANGE (MAX RANGE MAY VARY BASED ON DEVICE VARIANT)";
                case 26:
                    return "CASCADING_CFG PARAMETER IS OUT OF RANGE [0, 2]";
                case 27:
                    return "NUM_ADC_BITS PARAMETER IS OUT OF RANGE [0, 2]";
                case 28:
                    return "ADC_OUT_FMT PARAMETER IS OUT OF RANGE [0, 3]";
                case 29:
                    return "LP_ADC_MODE PARAMETER IS OUT OF RANGE [0, 1]";
                case 30:
                    return "BLOCK_CFG PARAMETER IS OUT OF RANGE [0, 7]";
                case 31:
                    return "HSICLKRATECODE[1:0] IS 0";
                case 32:
                    return "RESERVED";
                case 33:
                    return "HSICLKRATECODE[3:2] IS 3 AND HSICLKRATECODE[1:0] IS 2";
                case 34:
                    return "HSICLKRATECODE[3:2] IS 3 AND HSICLKRATECODE[1:0] IS 2";
                case 35:
                    return "PROFILE INDEX IS >= 4";
                case 36:
                    return "PF_FREQ_START_CONST IS NOT WITHIN DESIRED FREQUENCY RANGE";
                case 37:
                    return "PF_IDLE_TIME_CONST > 5.24 ms";
                case 38:
                    return "MAXIMUM DFE SPILL TIME > PF_IDLE_TIME_CONST";
                case 39:
                    return "PF_ADC_START_TIME_CONST > 4095 ";
                case 40:
                    return "PF_RAMP_END_TIME > 524287";
                case 41:
                    return "PF_RAMP_END_ TIME < PF_ADC_START_TIME_CONST + ADC_SAMPLING_TIME (ADC_SAMPLING_TIME IS TIME TAKEN TO SAMPLE NUM_ADC_SAMPLES)";
                case 42:
                    return "PF_TX_OUTPUT_ POWER_BACKOFF FOR TX0 > 30";
                case 43:
                    return "PF_TX_OUTPUT_ POWER_BACKOFF FOR TX1 > 30";
                case 44:
                    return "PF_TX_OUTPUT_ POWER_BACKOFF FOR TX2 > 30";
                case 45:
                    return "RESERVED";
                case 46:
                    return "RAMP END FREQUENCY IS NOT WITHIN VCO RANGE";
                case 47:
                    return " ABSOLUTE VALUE OF TX_START_TIME IS > 38.45us";
                case 48:
                    return "NUMBER OF ADC SAMPLES IS NOT WITHIN [64, 8192]";
                case 49:
                    return "SAMPLING RATE IS NOT WITHIN [2, 37.5] Msps";
                case 50:
                    return "HPF1 CORNER FREQUENCY IS > 700 kHz";
                case 51:
                    return "HPF2 CORNER FREQUENCY IS > 2.8 MHz";
                case 52:
                    return "PF_RX_GAIN IS NOT WITHIN [24, 52] dB OR PF_RX_GAIN IS AN ODD NUMBER";
                case 53:
                    return "RESERVED";
                case 54:
                    return "RESERVED";
                case 55:
                    return "RESERVED";
                case 56:
                    return "RESERVED";
                case 57:
                    return "RESERVED";
                case 58:
                    return "RESERVED";
                case 59:
                    return "CHIRP_START_INDX >= 512";
                case 60:
                    return "CHIRP_END_INDX >= 512";
                case 61:
                    return "CHIRP_START_INDX > CHIRP_END_INDX";
                case 62:
                    return "PROFILE_INDEX >= 4 ";
                case 63:
                    return "IF THE PROFILE CORRESPONDING TO PROFILE_INDEX IS NOT DEFINED";
                case 64:
                    return "CHIRP_FREQ_START_VAR > 8388607 ";
                case 65:
                    return "CHIRP_FREQ_SLOPE_VAR > 63 ";
                case 66:
                    return "CHIRP START OR END FREQUENCY IS OUTSIDE VCO RANGE";
                case 67:
                    return "CHIRP_IDLE_TIME_VAR > 4095";
                case 68:
                    return "CHIRP_ADC_START_TIME_VAR > 4095";
                case 69:
                    return "RAMP_END_TIME <  ADC_START_TIME + ADC_SAMPLING_TIME";
                case 70:
                    return "CHIRP_TX_EN > MAXIMUM SIMULTANEOUS TX ALLOWED AS PER DEVICE DATA SHEET ";
                case 71:
                    return "CHIRP_TX_EN INDICATES TO ENABLE A TX WHICH IS NOT ENABLED IN AWR_CHAN_CONF_SET_SB";
                case 72:
                    return "CHIRP_START_INDX >= 512";
                case 73:
                    return "CHIRP_END_INDX >= 512";
                case 74:
                    return "CHIRP_START_INDX > CHIRP_END_INDX";
                case 75:
                    return "CHIRP USED IN THE FRAME IS NOT CONFIGURED BY AWR_CHIRP_CONF_SET_SB";
                case 76:
                    return "ONE OF THE PROFILE USED IN THE FRAME IS NOT CONFIGURED BY AWR_PROF_CONF_SET_SB";
                case 77:
                    return "NUM_LOOPS IS OUSIDE [1, 255] ";
                case 78:
                    return "RESERVED";
                case 79:
                    return "FRAME_PERIODICITY IS OUTSIDE [100us, 1.342s] ";
                case 80:
                    return "FRAME_ON_TIME < FRAME_PERIODICITY ";
                case 81:
                    return "TRIGGER_SELECT IS OUTSIDE [1, 2]";
                case 82:
                    return "FRAME_TRIGGER_DELAY > 100 us";
                case 83:
                    return "API IS ISSUED WHEN FRAMES ARE ONGOING";
                case 84:
                    return "NUM_SUBFRAMES IS OUTSIDE [1, 4] ";
                case 85:
                    return "FORCE_SINGLE_PROFILE IS OUTSIDE [0, 1]";
                case 86:
                    return "FORCE_SINGLE_PROFILE >= 4";
                case 87:
                    return "PROFILE DEFINED BY FORCE_SINGLE_PROFILE IS NOT DEFINED";
                case 88:
                    return "SFx_CHIRP_START_INDEX >= 512";
                case 89:
                    return "SFx_NUM_UNIQUE_CHIRPS_PER_BURST IS OUTSIDE THE RANGE [1, 512] ";
                case 90:
                    return "CHIRP USED IN THE FRAME IS NOT CONFIGURED BY AWR_CHIRP_CONF_SET_SB ";
                case 91:
                    return "ONE OF THE PROFILES USED IN THE FRAME IS NOT CONFIGURED BY AWR_PROF_CONF_SET_SB";
                case 92:
                    return "SFx_NUM_LOOPS_PER_BURST IS OUTSIDE THE RANGE [1, 255]";
                case 93:
                    return "SFx_BURST_PERIOD IS OUTSIDE THE RANGE [100us, 1.342s] ";
                case 94:
                    return "BURST ON TIME IS > BURST_PERIOD";
                case 95:
                    return "SFx_CHIRP_START_INDX_OFFSET >= 512";
                case 96:
                    return "SFx_CHIRP_START_INDX >= 512 OR SFx_CHIRP_START_INDX + SFx_NUM_UNIQUE_CHIRPS_PER_BURST – 1 IS >= 512";
                case 97:
                    return "SFx_NUM_BURSTS IS OUTSIDE THE RANGE [1, 512] ";
                case 98:
                    return "SFx_NUM_OUTER_LOOPS IS OUTSIDE THE RANGE [1, 64] ";
                case 99:
                    return "SFx_PERIOD IS OUTSIDE THE RANGE [100us, 1.342s] ";
                case 100:
                    return " SUBFRAME ON TIME > SFx_PERIOD OR WHEN TESTSOURCE IS ENABLED, SUBFRAME IDLE TIME IS < 150 us";
                case 101:
                    return "RESERVED";
                case 102:
                    return "TRIGGER_SELECT IS THE OUTSIDE [1, 2]";
                case 103:
                    return "FRAME_TRIGGER_DELAY IS > 100 us";
                case 104:
                    return "API IS ISSUED WHEN FRAMES ARE ONGOING";
                case 105:
                    return "POSITION_VECx[y] < 0";
                case 106:
                    return "RESERVED";
                case 107:
                    return "VELOCITY_VECx[x] > 5000 OR VELOCITY_VECx[y] > 5000 OR VELOCITY_VECx[z] > 5000 ";
                case 108:
                    return "SIG_LEV_VECx > 950";
                case 109:
                    return "RX_ANT_POS_XZ[Bytex] > 120";
                case 110:
                    return "RESERVED";
                case 111:
                    return "PROG_FILT_COEFF_START_INDEX IS AN ODD NUMBER";
                case 112:
                    return "PROFILE_INDX >= 4";
                case 113:
                    return "API IS ISSUED FOR A NON AWR1642 DEVICE ";
                case 114:
                    return "API IS ISSUED FOR A NON AWR1243 DEVICE";
                case 115:
                    return "CHIRP_START_INDX >= 512";
                case 116:
                    return "CHIRP_END_INDX >= 512";
                case 117:
                    return "CHIRP_START_INDX > CHIRP_END_INDX";
                case 118:
                    return "BOOT TIME CALIBRATIONS ARE NOT DONE SO CANNOT RUN RUNTIME CALIBRATIONS";
                case 119:
                    return "FREQ_LIMIT_HIGH < 76 GHz OR FREQ_LIMIT_HIGH > 81 GHz OR FREQ_LIMIT_LOW > FREQ_LIMIT_HIGH ";
                case 120:
                    return "CALIB_MON_TIME_UNIT <= 0";
                case 121:
                    return "CALIBRATION_ PERIODICITY = 0";
                case 122:
                    return "API IS ISSUED WHEN CONTINUOUS STREAMING MODE IS ON";
                case 123:
                    return "RX GAIN RUN TIME CALIBRATION WAS REQUESTED BUT BOOT TIME CALIBRATION WAS NOT PERFORMED";
                case 124:
                    return "LO DISTRIBUTION RUN TIME CALIBRATION WAS REQUESTED BUT BOOT TIME CALIBRATION WAS NOT PERFORMED";
                case 125:
                    return "TX POWER RUN TIME CALIBRATION WAS REQUESTED BUT BOOT TIME CALIBRATION WAS NOT PERFORMED";
                case 126:
                    return "DFE MODE IS PSUEDO REAL";
                case 127:
                    return "FULL SCALE REDUCTION FACTOR IS > 0 FOR 16 BIT ADC, OR > 2 FOR 14 BIT ADC MODE OR 4 FOR 12 BIT ADC MODE";
                case 128:
                    return "DURING MONITORING, INVALID RF BIT MASK";
                case 129:
                    return "DURING MONITORING, INVALID REPORT MODE";
                case 130:
                    return "DEVICE VARIANT DOES NOT ALLOW CASCADING BUT API IS ISSUED TO ENABLE CASCADING MODE";
                case 131:
                    return "DURING MONITORING, INVALID TX POWER FLATNESS THRESHOLD";
                case 132:
                    return "LOOP BACK SEL IS > 3";
                case 133:
                    return "BURST INDEX >= 16";
                case 134:
                    return "BURST IS NOT VALID BUT LOOP BACK IS ENABLED FOR THIS BURST";
                case 135:
                    return "CHIRP SEGMENT SELECT > 31";
                case 136:
                    return "CHIRP SEGMENT SELECT > 31";
                case 137:
                    return "CHUNK ID >= NUM CHUNKS";
                case 138:
                    return "CAL DATA IS INVALID";
                case 139:
                    return "RX02 RF TURN OFF TIME IS NOT WITHIN THE RANGE [-1024, 1023]";
                case 140:
                    return "RX13 RF TURN OFF TIME IS NOT WITHIN THE RANGE [-1024, 1023]";
                case 141:
                    return "RX02 BB TURN OFF TIME IS NOT WITHIN THE RANGE [-1024, 1023]";
                case 142:
                    return "RX13 BB TURN OFF TIME IS NOT WITHIN THE RANGE [-1024, 1023]";
                case 143:
                    return "RX02 RF PREENABLE TIME IS NOT WITHIN THE RANGE [-1024, 1023]";
                case 144:
                    return "RX13 RF PREENABLE TIME IS NOT WITHIN THE RANGE [-1024, 1023]";
                case 145:
                    return "RX02 BB PREENABLE TIME IS NOT WITHIN THE RANGE [-1024, 1023]";
                case 146:
                    return "RX13 BB PREENABLE TIME IS NOT WITHIN THE RANGE [-1024, 1023]";
                case 147:
                    return "RX02 RF TIME ON IS NOT WITHIN THE RANGE [-1024, 1023]";
                case 148:
                    return "RX13 RF TIME ON IS NOT WITHIN THE RANGE [-1024, 1023]";
                case 149:
                    return "RX02 BB TURN On TIME IS NOT WITHIN THE RANGE [-1024, 1023]";
                case 150:
                    return "RX13 BB TURN On TIME IS NOT WITHIN THE RANGE [-1024, 1023]";
                case 151:
                    return "RX LO TURN OFF TIME IS NOT WITHIN THE RANGE [-1024, 1023]";
                case 152:
                    return "TX LO TURN OFF TIME IS NOT WITHIN THE RANGE [-1024, 1023]";
                case 153:
                    return "RX LO TURN ON TIME IS NOT WITHIN THE RANGE [-1024, 1023]";
                case 154:
                    return "TX LO TURN ON TIME IS NOT WITHIN THE RANGE [-1024, 1023]";
                case 155:
                    return "SUB-FRAME START COMMAND IS ISSUED BUT THE FRAME IS NOT CONFIGURED FOR SUB FRAME TRIGGER MODE";
                case 156:
                    return "REGULAR ADC MODE NOT SUPPORTED IN 5 MHz PART VARIANT DEVICE";
                case 250:
                    return "DEVICE TYPE IS NOT ASILB";
                case 251:
                    return "FAULT INJECTION API OR DIGITAL LATENT FAULT API IS ISSUED WHEN FRAMES ARE ONGOING";
                case 252:
                    return "INVALID REPORT MODE";
                case 253:
                    return "CONFIGURED PROFILE ID IS NOT WITHIN RANGE [0, 3]";
                case 254:
                    return "MONITORING PROFILE ID IS NOT CONFIGURED YET ";
                case 255:
                    return "SETTLING TIME IS CONFIGURED IS MORE THAN 12us ";
                case 256:
                    return "NONE OF THE RXs ENABLED";
                case 257:
                    return "TX0 IS NOT ENABLED";
                case 258:
                    return "TX1 IS NOT ENABLED";
                case 259:
                    return "TX2 IS NOT ENABLED";
                case 260:
                    return "INVALID RF BIT MASK";
                case 261:
                    return "RESERVED ";
                case 262:
                    return "RESERVED ";
                case 263:
                    return "MONITORED TX CHANNELS ARE NOT ENABLED";
                case 264:
                    return "MONITORED RX CHANNELS ARE NOT ENABLED";
                case 265:
                    return "TX SELECTED FOR RX GAIN PHASE MONITOR IS TX2(ONLY TX0 OR TX1 IS ALLOWED)";
                case 266:
                    return "SAT MON SELECT IS NOT IN [0, 3]";
                case 267:
                    return "SAT MON PRIMARY TIME SLICE DURATION IS LESS THAN 0.6us OR GREATER THAN ADC SAMPLING TIME";
                case 268:
                    return "SAT MON NUM SLICES IS 0 OR GREATER THAN 127";
                case 269:
                    return "SIG IMG MON NUM SLICES IS 0 OR GREATER THAN 127";
                case 270:
                    return "NUM SAMPLES PER PRIMARY TIME SLICE IS ODD OR LESS THAN 4 IN COMPLEX 1X MODE OR LESS THAN 8 IN NON COMPLEX 1X MODES OR GREATER THAN NUM ADC SAMPLES";
                case 279:
                    return "LDO FAULT INJECT IS REQUESTED BUT LDOs ARE BYPASSED";
                case 280:
                    return "SIGNAL AND IMAGE BAND MONITOR IS NOT SUPPORTED";
                case 281:
                    return "ANALOG MONITORING IS NOT SUPPORTED";
                case 283:
                    return "RX SATURATION MONITOR IS NOT SUPPORTED";
                case 290:
                    return "MONITORING CHIRP ERROR";
                case 291:
                    return "PD POWER LEVEL IS LESS THAN -40 dBm (USED FOR RX GAIN MONITOR)";
                case 292:
                    return "ADC POWER LEVEL HIGHER THAN +7 dBm OR LOWER THAN -9.5 dBm";
                case 293:
                    return "HIGH RX NOISE FIGURE (NOISE FIGURE IS LESS THAN 0 dBm)";
                case 294:
                    return "PD READING INCORRECT (RF OFF READING HIGHER THAN RF ON READING)";
                case 295:
                    return "PGA GAIN IS USED FOR MONITORING IS INCORRECT";
                default:
                    switch (val)
                    {
                        case 1001:
                            return "RX_CHAN_EN > 0xF";
                        case 1002:
                            return "NUM_ADC_BITS > 2";
                        case 1003:
                            return "ADC_OUT_FMT > 1 ";
                        case 1004:
                            return "IQ_SWAP_SEL > 1";
                        case 1005:
                            return "CHAN_INTERLEAVE > 1";
                        case 1006:
                            return "DATA_INTF_SEL > 1";
                        case 1007:
                            return "DATA_TRANS_FMT_PKT0 [5:0] NOT A VALID VALUE. VALID SET {0x1, 0x6, 0x9, 0x36} ";
                        case 1008:
                            return "DATA_TRANS_FMT_PKT1 [5:0] NOT A VALID VALUE. VALID SET {0x0, 0xD, 0xB}";
                        case 1009:
                            return "LANE_EN > 0xF";
                        case 1010:
                            return "RESERVED";
                        case 1011:
                            return "LANE_CLK_CFG > 1";
                        case 1012:
                            return "LANE_CLK_CFG != 1 FOR CSI2";
                        case 1013:
                            return "DATA_RATE – INVALID COMBINATION OF DATA RATE AND DDR OR SDR OPERATION";
                        case 1014:
                            return "LANE_FMT_MAP > 1 ";
                        case 1015:
                            return "LANE_PARAM_CFG > 7 ";
                        case 1016:
                            return "CONT_STREAMING_MODE > 1 ";
                        case 1017:
                            return "CONT_STREAMING_MODE ALREADY IN REQUESTED MODE ";
                        case 1018:
                            return "LANE_POS_POL_SEL [DATA_LANE0_POS] > 5 ";
                        case 1019:
                            return "LANE_POS_POL_SEL [DATA_LANE1_POS] > 5 ";
                        case 1020:
                            return "LANE_POS_POL_SEL [DATA_LANE2_POS] > 5 ";
                        case 1021:
                            return "LANE_POS_POL_SEL [DATA_LANE3_POS] > 5";
                        case 1022:
                            return "LANE_POS_POL_SEL [CLOCK_POS] IS OUTSIDE THE RANGE [2,4] ";
                        case 1023:
                            return "HALF_WORDS_PER_ CHIRP IS OUTSIDE THE RANGE [64, 8192]";
                        case 1024:
                            return "NUM_SUBFRAMES IS OUTSIDE THE RANGE [1,4]";
                        case 1025:
                            return "SF1_TOT_NUM_ CHIRPS IS OUTSIDE THE RANGE [1, 0xFFFF] ";
                        case 1026:
                            return "SF1_NUM_ADC_ SAMPLES_PER_DATA_PKT IS OUTSIDE THE RANGE [64, 8192] ";
                        case 1027:
                            return "SF1_PROC_NUM_ CHIRPS_PER_DATA_PKT != 1 ";
                        case 1028:
                            return "SF2_TOT_NUM_ CHIRPS IS OUTSIDE THE RANGE [1, 0xFFFF], IF NUM_SUBFRAMES >= 2 ";
                        case 1029:
                            return "SF2_NUM_ADC_ SAMPLES_PER_DATA_PKT IS OUTSIDE THE RANGE [64, 8192], IF NUM_SUBFRAMES >= 2 ";
                        case 1030:
                            return "SF2_PROC_NUM_ CHIRPS_PER_DATA_PKT != 1, IF NUM_SUBFRAMES >= 2 ";
                        case 1031:
                            return "SF3_TOT_NUM_ CHIRPS IS OUTSIDE THE RANGE [1, 0xFFFF], IF NUM_SUBFRAMES >= 3 ";
                        case 1032:
                            return "SF3_NUM_ADC_ SAMPLES_PER_DATA_PKT IS OUTSIDE THE RANGE [64, 8192], IF NUM_SUBFRAMES >= 3 ";
                        case 1033:
                            return "SF3_PROC_NUM_ CHIRPS_PER_DATA_PKT != 1, IF NUM_SUBFRAMES >= 3 ";
                        case 1034:
                            return "SF4_TOT_NUM_ CHIRPS IS OUTSIDE THE RANGE [1, 0xFFFF], IF NUM_SUBFRAMES == 4 ";
                        case 1035:
                            return "SF4_NUM_ADC_ SAMPLES_PER_DATA_PKT IS OUTSIDE THE RANGE [64, 8192], IF NUM_SUBFRAMES == 4 ";
                        case 1036:
                            return "SF4_PROC_NUM_CHIRPS_PER_DATA_PKT != 1, IF NUM_SUBFRAMES == 4 ";
                    }
                    break;
            }
            return "UNKNOWN ERROR";
        }

        public string GetRFCaptureCardViaEthernetErrorType(int val)
        {
            string result;
            switch (val)
            {
                case -4:
                    result = "RFDCCARD_SOCKET_ERR";
                    break;
                case -3:
                    result = "RFDCCARD_UDP_WRITE_ERR";
                    break;
                case -2:
                    result = "RFDCCARD_OS_ERR";
                    break;
                case -1:
                    result = "RFDCCARD_INVALID_INPUT_PARAMS";
                    break;
                case 0:
                    result = "RRFDCCARD_SUCCESS";
                    break;
                default:
                    result = "UNKNOWN ERROR";
                    break;
            }
            return result;
        }

        private void iPreStartTx(bool is_starting_op, bool is_ending_op)
        {
            m_GuiManager.p000002.Execute(GuiOp.PreStartTx, null, false, is_starting_op, is_ending_op);
        }

        private void iPostStartTx(bool is_starting_op, bool is_ending_op)
        {
        }

        private int iStartTxPacket(bool is_starting_op, bool is_ending_op)
        {
            int result;
            try
            {
                int num = -1;
                int num2;
                if (m_TxParams.Mode == TxMode.Packet_Single)
                {
                    num2 = 0;
                }
                else if (m_TxParams.Mode == TxMode.Packet_Series)
                {
                    num2 = 1;
                }
                else if (m_TxParams.Mode == TxMode.Packet_Infinite)
                {
                    num2 = 2;
                }
                else
                {
                    num2 = 3;
                }
                int sgi = m_TxParams.SGI;
                int preamble = (int)m_TxParams.Preamble;
                double num3 = (double)m_TxParams.Delay;
                int amount = m_TxParams.Amount;
                int size = m_TxParams.Size;
                int value = m_TxParams.Rate.Value;
                int constData = m_TxParams.ConstData;
                int num4 = 0;
                int stbc = m_TxParams.Stbc;
                int scramble = m_TxParams.Scramble;
                int increment = m_TxParams.Increment;
                int seed = m_TxParams.Seed;
                object[] res_arr = m_GuiManager.p000002.Execute(GuiOp.StartTx, new object[]
                {
                    num2,
                    sgi,
                    preamble,
                    num3,
                    amount,
                    size,
                    value,
                    constData,
                    num4,
                    stbc,
                    scramble,
                    increment,
                    seed
                }, false, is_starting_op, is_ending_op);
                if (!m_GuiManager.p000002.GetSingleIntRes(GuiOp.StartTx, res_arr, out num))
                {
                    result = -1;
                }
                else if (num != 0)
                {
                    m_GuiManager.Error(string.Format("{0} failed with error code: {1}", m_GuiManager.p000002.LuaFormatDict[GuiOp.StartTx].Name, num));
                    result = -1;
                }
                else
                {
                    result = num;
                }
            }
            catch (Exception ex)
            {
                m_GuiManager.Error(ex.Message, ex.StackTrace);
                result = -1;
            }
            return result;
        }

        private int iStartTxTone()
        {
            int result;
            try
            {
                int num = -1;
                object[] res_arr;
                GuiOp guiOp;
                if (m_TxParams.Mode == TxMode.Tone_Carrier)
                {
                    res_arr = m_GuiManager.p000002.Execute(GuiOp.TransmitCarrier, null, false);
                    guiOp = GuiOp.TransmitCarrier;
                }
                else if (m_TxParams.Mode == TxMode.Tone_Silence)
                {
                    res_arr = m_GuiManager.p000002.Execute(GuiOp.TransmitSilence, null, false);
                    guiOp = GuiOp.TransmitSilence;
                }
                else if (m_TxParams.Mode == TxMode.Tone_Single)
                {
                    res_arr = m_GuiManager.p000002.Execute(GuiOp.TransmitSingleTone, new object[]
                    {
                        0,
                        m_TxParams.FCarrier
                    }, false);
                    guiOp = GuiOp.TransmitSingleTone;
                }
                else
                {
                    if (m_TxParams.Mode != TxMode.Tone_Two)
                    {
                        return -1;
                    }
                    res_arr = m_GuiManager.p000002.Execute(GuiOp.TransmitTwoTone, new object[]
                    {
                        m_TxParams.FCarrier,
                        m_TxParams.SCarrier
                    }, false);
                    guiOp = GuiOp.TransmitTwoTone;
                }
                if (!m_GuiManager.p000002.GetSingleIntRes(guiOp, res_arr, out num))
                {
                    result = -1;
                }
                else if (num != 0)
                {
                    m_GuiManager.Error(string.Format("{0} failed with error code: {1}", m_GuiManager.p000002.LuaFormatDict[guiOp].Name, num));
                    result = -1;
                }
                else
                {
                    result = num;
                }
            }
            catch (Exception ex)
            {
                m_GuiManager.Error(ex.Message, ex.StackTrace);
                result = -1;
            }
            return result;
        }

        public int iStopTxCW(bool is_starting_op, bool is_ending_op)
        {
            int result;
            try
            {
                int num = -1;
                object[] res_arr = m_GuiManager.p000002.Execute(GuiOp.StopTxCW, null, false, true, true);
                if (!m_GuiManager.p000002.GetSingleIntRes(GuiOp.StopTxCW, res_arr, out num))
                {
                    result = -1;
                }
                else if (num != 0)
                {
                    m_GuiManager.Error(string.Format("{0} failed with error code: {1}", m_GuiManager.p000002.LuaFormatDict[GuiOp.StopTxCW].Name, num));
                    result = -1;
                }
                else
                {
                    result = num;
                }
            }
            catch (Exception ex)
            {
                m_GuiManager.Error(ex.Message, ex.StackTrace);
                result = -1;
            }
            return result;
        }

        public int iStopTx(bool is_starting_op, bool is_ending_op)
        {
            int result;
            try
            {
                int num = -1;
                int num2;
                if (m_TxParams.Mode == TxMode.Packet_Single)
                {
                    num2 = 0;
                }
                else if (m_TxParams.Mode == TxMode.Packet_Series)
                {
                    num2 = 1;
                }
                else if (m_TxParams.Mode == TxMode.Packet_Infinite)
                {
                    num2 = 2;
                }
                else
                {
                    num2 = 3;
                }
                int sgi = m_TxParams.SGI;
                int preamble = (int)m_TxParams.Preamble;
                double num3 = (double)m_TxParams.Delay;
                int amount = m_TxParams.Amount;
                int size = m_TxParams.Size;
                int value = m_TxParams.Rate.Value;
                object[] res_arr = m_GuiManager.p000002.Execute(GuiOp.TxStop, new object[]
                {
                    num2,
                    sgi,
                    preamble,
                    num3,
                    amount,
                    size,
                    value
                }, false, is_starting_op, is_ending_op);
                if (!m_GuiManager.p000002.GetSingleIntRes(GuiOp.TxStop, res_arr, out num))
                {
                    result = -1;
                }
                else if (num != 0)
                {
                    m_GuiManager.Error(string.Format("{0} failed with error code: {1}", m_GuiManager.p000002.LuaFormatDict[GuiOp.TxStop].Name, num));
                    result = -1;
                }
                else
                {
                    result = num;
                }
            }
            catch (Exception ex)
            {
                m_GuiManager.Error(ex.Message, ex.StackTrace);
                result = -1;
            }
            return result;
        }

        public void MatlabLogForCascade(string parameter, int numSpaces, int value)
        {
            int num = 0;
            uint g_RadarDeviceId = GlobalRef.g_RadarDeviceId;
            do
            {
                if (((ulong)g_RadarDeviceId & (ulong)(1L << (num & 31))) != 0UL)
                {
                    WriteIntoCascadeLogFile(num, parameter, numSpaces, value);
                }
                num++;
            }
            while (g_RadarDeviceId != 0U);
        }

        public void WriteIntoCascadeLogFile(int deviceId, string parameter, int numSpaces, int value)
        {
            string path = string.Empty;
            string directoryName = Path.GetDirectoryName(Application.StartupPath);
            switch (deviceId)
            {
                case 0:
                    path = string.Concat(new string[]
                    {
                    directoryName + "\\PostProc\\b0000_cfg_00.txt"
                    });
                    break;
                case 1:
                    path = string.Concat(new string[]
                    {
                    directoryName + "\\PostProc\\b0000_cfg_01.txt"
                    });
                    break;
                case 2:
                    path = string.Concat(new string[]
                    {
                    directoryName + "\\PostProc\\b0000_cfg_02.txt"
                    });
                    break;
                case 3:
                    path = string.Concat(new string[]
                    {
                    directoryName + "\\PostProc\\b0000_cfg_03.txt"
                    });
                    break;
            }
            StreamWriter streamWriter = new StreamWriter(path, true);
            string value2 = parameter.PadRight(numSpaces + parameter.Length) + value.ToString();
            streamWriter.WriteLine(value2);
            streamWriter.Close();
            streamWriter.Dispose();
        }

        private int iSetBasicConfig_Impl(bool is_starting_op, bool is_ending_op)
        {
            int result;
            try
            {
                m_ContStreamParams.DataFormat = m_StaticParams.FmtVal;
                m_ChirpConfigParams.DataFormat = m_StaticParams.FmtVal;
                m_ChirpConfigParams.TX1Channel = m_StaticParams.EnableTx1;
                m_ChirpConfigParams.TX2Channel = m_StaticParams.EnableTx2;
                m_ChirpConfigParams.TX3Channel = m_StaticParams.EnableTx3;
                if (m_StaticParams.EnableRx1 == 1)
                {
                    ScriptOps.m_MainForm.DataConfigTab.enableLVDSLane1();
                    ScriptOps.m_MainForm.AnalogMonConfig.enableTx0BPMRx0Channel();
                    ScriptOps.m_MainForm.AnalogMonConfig.enableTx1BPMRx0Channel();
                    ScriptOps.m_MainForm.AnalogMonConfig.enableTx2BPMRx0Channel();
                    ScriptOps.m_MainForm.AnalogMonConfig.enableTxGainPhaseRx0Channel();
                }
                else
                {
                    ScriptOps.m_MainForm.DataConfigTab.disableLVDSLane1();
                    ScriptOps.m_MainForm.AnalogMonConfig.disableTx0BPMRx0Channel();
                    ScriptOps.m_MainForm.AnalogMonConfig.disableTx1BPMRx0Channel();
                    ScriptOps.m_MainForm.AnalogMonConfig.disableTx2BPMRx0Channel();
                    ScriptOps.m_MainForm.AnalogMonConfig.disableTxGainPhaseRx0Channel();
                }
                if (m_StaticParams.EnableRx2 == 1)
                {
                    ScriptOps.m_MainForm.DataConfigTab.enableLVDSLane2();
                    ScriptOps.m_MainForm.AnalogMonConfig.enableTx0BPMRx1Channel();
                    ScriptOps.m_MainForm.AnalogMonConfig.enableTx1BPMRx1Channel();
                    ScriptOps.m_MainForm.AnalogMonConfig.enableTx2BPMRx1Channel();
                    ScriptOps.m_MainForm.AnalogMonConfig.enableTxGainPhaseRx1Channel();
                }
                else
                {
                    ScriptOps.m_MainForm.DataConfigTab.disableLVDSLane2();
                    ScriptOps.m_MainForm.AnalogMonConfig.disableTx0BPMRx1Channel();
                    ScriptOps.m_MainForm.AnalogMonConfig.disableTx1BPMRx1Channel();
                    ScriptOps.m_MainForm.AnalogMonConfig.disableTx2BPMRx1Channel();
                    ScriptOps.m_MainForm.AnalogMonConfig.disableTxGainPhaseRx1Channel();
                }
                if (m_StaticParams.EnableRx3 == 1)
                {
                    ScriptOps.m_MainForm.DataConfigTab.enableLVDSLane2();
                    ScriptOps.m_MainForm.AnalogMonConfig.enableTx0BPMRx2Channel();
                    ScriptOps.m_MainForm.AnalogMonConfig.enableTx1BPMRx2Channel();
                    ScriptOps.m_MainForm.AnalogMonConfig.enableTx2BPMRx2Channel();
                    ScriptOps.m_MainForm.AnalogMonConfig.enableTxGainPhaseRx2Channel();
                }
                else
                {
                    ScriptOps.m_MainForm.DataConfigTab.disableLVDSLane2();
                    ScriptOps.m_MainForm.AnalogMonConfig.disableTx0BPMRx2Channel();
                    ScriptOps.m_MainForm.AnalogMonConfig.disableTx1BPMRx2Channel();
                    ScriptOps.m_MainForm.AnalogMonConfig.disableTx2BPMRx2Channel();
                    ScriptOps.m_MainForm.AnalogMonConfig.disableTxGainPhaseRx2Channel();
                }
                if (m_StaticParams.EnableRx4 == 1)
                {
                    ScriptOps.m_MainForm.DataConfigTab.enableLVDSLane2();
                    ScriptOps.m_MainForm.AnalogMonConfig.enableTx0BPMRx3Channel();
                    ScriptOps.m_MainForm.AnalogMonConfig.enableTx1BPMRx3Channel();
                    ScriptOps.m_MainForm.AnalogMonConfig.enableTx2BPMRx3Channel();
                    ScriptOps.m_MainForm.AnalogMonConfig.enableTxGainPhaseRx3Channel();
                }
                else
                {
                    ScriptOps.m_MainForm.DataConfigTab.disableLVDSLane2();
                    ScriptOps.m_MainForm.AnalogMonConfig.disableTx0BPMRx3Channel();
                    ScriptOps.m_MainForm.AnalogMonConfig.disableTx1BPMRx3Channel();
                    ScriptOps.m_MainForm.AnalogMonConfig.disableTx2BPMRx3Channel();
                    ScriptOps.m_MainForm.AnalogMonConfig.disableTxGainPhaseRx3Channel();
                }
                if (!GlobalRef.g_AR16xxDevice)
                {
                    if (m_StaticParams.EnableRx3 == 1)
                    {
                        ScriptOps.m_MainForm.DataConfigTab.enableLVDSLane3();
                    }
                    else
                    {
                        ScriptOps.m_MainForm.DataConfigTab.disableLVDSLane3();
                    }
                }
                if (!GlobalRef.g_AR16xxDevice)
                {
                    if (m_StaticParams.EnableRx4 == 1)
                    {
                        ScriptOps.m_MainForm.DataConfigTab.enableLVDSLane4();
                    }
                    else
                    {
                        ScriptOps.m_MainForm.DataConfigTab.disableLVDSLane4();
                    }
                }
                SetResetSensorAndBPMTxChannels();
                int num = m_StaticParams.EnableTx1 | m_StaticParams.EnableTx2 << 1 | m_StaticParams.EnableTx3 << 2;
                int num2 = m_StaticParams.EnableRx1 | m_StaticParams.EnableRx2 << 1 | m_StaticParams.EnableRx3 << 2 | m_StaticParams.EnableRx4 << 3;
                int num3;
                if (m_StaticParams.FmtVal == 0 || m_StaticParams.FmtVal == 3)
                {
                    num3 = 0;
                }
                else
                {
                    num3 = 1;
                }
                int num4;
                if (GlobalRef.g_NtvRS232Connect[(int)GlobalRef.g_RadarDeviceIndex] && GlobalRef.g_CasCadeDeviceSpiConnect == 0U)
                {
                    num4 = m_TsWrapper.Calling_WriteAddr_Single(4294959848U, 1U);
                    if (m_GuiManager.DllOps.itempDisconnect(false) == 0)
                    {
                        string full_command = string.Format("Debug Port Disconnected!", new object[0]);
                        m_GuiManager.RecordLog(0, full_command);
                        if (!GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
                        {
                            iRs232ConnectDisconnect_impl();
                        }
                    }
                }
                ushort num5 = (ushort)((int)m_StaticParams.ClkOutMasterDis | (int)m_StaticParams.SynOutMasterDis << 1 | (int)m_StaticParams.ClkOutSlaveEna << 2 | (int)m_StaticParams.SynOutSlaveEna << 3 | (int)m_StaticParams.IntLOMasterEna << 4 | (int)m_StaticParams.OSCClkOutMasterDis << 5);
                if (m_RadarDeviceModeConfigParams.NumberOfRadarDevicesDetected <= 1)
                {
                    string full_command2 = string.Format("ar1.ChanNAdcConfig({0}, {1}, {2}, {3}, {4}, {5}, {6}, {7}, {8}, {9})", new object[]
                    {
                        m_StaticParams.EnableTx1,
                        m_StaticParams.EnableTx2,
                        m_StaticParams.EnableTx3,
                        m_StaticParams.EnableRx1,
                        m_StaticParams.EnableRx2,
                        m_StaticParams.EnableRx3,
                        (uint)(m_StaticParams.EnableRx4 | (int)num5 << 16),
                        (ushort)m_StaticParams.BitsVal,
                        (uint)(m_StaticParams.FmtVal | (int)m_StaticParams.FullScaleReductionFactor << 16),
                        (uint)((int)m_StaticParams.IQSwap | (int)m_StaticParams.CascadeMode << 16)
                    });
                    m_GuiManager.RecordLog(2, full_command2);
                }
                else
                {
                    string full_command3 = string.Format("ar1.ChanNAdcConfig_mult({0}, {1}, {2}, {3}, {4}, {5}, {6}, {7}, {8}, {9}, {10}, {11})", new object[]
                    {
                        GlobalRef.g_RadarDeviceId,
                        m_StaticParams.EnableTx1,
                        m_StaticParams.EnableTx2,
                        m_StaticParams.EnableTx3,
                        m_StaticParams.EnableRx1,
                        m_StaticParams.EnableRx2,
                        m_StaticParams.EnableRx3,
                        (uint)(m_StaticParams.EnableRx4 | (int)num5 << 16),
                        (ushort)m_StaticParams.BitsVal,
                        (uint)(m_StaticParams.FmtVal | (int)m_StaticParams.FullScaleReductionFactor << 16),
                        (ushort)m_StaticParams.IQSwap,
                        m_StaticParams.CascadeMode
                    });
                    m_GuiManager.RecordLog(2, full_command3);
                }
                TxRxChannelConfigParam.RxChannelEna = (ushort)num2;
                TxRxChannelConfigParam.TxChannelEna = (ushort)num;
                TxRxChannelConfigParam.CasCadeCfg = m_StaticParams.CascadeMode;
                TxRxChannelConfigParam.CascadePinOutCfg = (ushort)((int)m_StaticParams.ClkOutMasterDis | (int)m_StaticParams.SynOutMasterDis << 1 | (int)m_StaticParams.ClkOutSlaveEna << 2 | (int)m_StaticParams.SynOutSlaveEna << 3 | (int)m_StaticParams.IntLOMasterEna << 4 | (int)m_StaticParams.OSCClkOutMasterDis << 5);
                IntPtr data = GCHandle.Alloc(TxRxChannelConfigParam, GCHandleType.Pinned).AddrOfPinnedObject();
                uint g_RadarDeviceId = GlobalRef.g_RadarDeviceId;
                num4 = Imports.RadarLinkImpl_ChannelConfig((byte)GlobalRef.g_RadarDeviceId, data);
                if ((num4 == 0 && ((GlobalRef.g_CasCadeDeviceSpiConnect & 1U) == 1U || (GlobalRef.g_CasCadeDeviceSpiConnect & 2U) == 2U || (GlobalRef.g_CasCadeDeviceSpiConnect & 4U) == 4U || (GlobalRef.g_CasCadeDeviceSpiConnect & 8U) == 8U)) || GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
                {
                    int num6 = 0;
                    while (num6 < 4 && !jsonConfigInProgress)
                    {
                        if (((ulong)g_RadarDeviceId & (ulong)(1L << (num6 & 31))) != 0UL)
                        {
                            int mmwaveDevIndex = getMmwaveDevIndex(num6);
                            GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlChanCfg_t.p000007 = "0x" + num.ToString("X");
                            GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlChanCfg_t.p000006 = "0x" + num2.ToString("X");
                            GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlChanCfg_t.cascading = (int)m_StaticParams.CascadeMode;
                            GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlChanCfg_t.cascadingPinoutCfg = "0x" + TxRxChannelConfigParam.CascadePinOutCfg.ToString("X");
                            GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlChanCfg_t.isConfigured = 1;
                            GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlAdcOutCfg_t.isConfigured = 1;
                            GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlAdcOutCfg_t.fmt.b2AdcBits = m_StaticParams.BitsVal;
                            GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlAdcOutCfg_t.fmt.b8FullScaleReducFctr = (int)m_StaticParams.FullScaleReductionFactor;
                            GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlAdcOutCfg_t.fmt.b2AdcOutFmt = m_StaticParams.FmtVal;
                            GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rawDataCaptureConfig.rlDevDataFmtCfg_t.iqSwapSel = (int)m_StaticParams.IQSwap;
                            GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rawDataCaptureConfig.rlDevDataFmtCfg_t.chInterleave = (int)m_StaticParams.ChanIntrlev;
                            GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rawDataCaptureConfig.rlDevDataFmtCfg_t.isConfigured = 1;
                        }
                        num6++;
                    }
                    MatlabPostProcGuiInstance.MatlabPostProcImpl_ChannelConfig((double)num, (double)num2);
                    ADCOutConfigParam.NumADCBits = (byte)m_StaticParams.BitsVal;
                    ADCOutConfigParam.FullScaleReductionFactor = m_StaticParams.FullScaleReductionFactor;
                    ADCOutConfigParam.ADCOutFmt = (ushort)m_StaticParams.FmtVal;
                    ADCOutConfigParam.Reserved = 0;
                    ADCOutConfigParam.Reserved2 = 0;
                    IntPtr data2 = GCHandle.Alloc(ADCOutConfigParam, GCHandleType.Pinned).AddrOfPinnedObject();
                    int num7 = Imports.RadarLinkImpl_AdcOutConfig((byte)GlobalRef.g_RadarDeviceId, data2);
                    if ((num7 == 0 && ((GlobalRef.g_CasCadeDeviceSpiConnect & 1U) == 1U || (GlobalRef.g_CasCadeDeviceSpiConnect & 2U) == 2U || (GlobalRef.g_CasCadeDeviceSpiConnect & 4U) == 4U || (GlobalRef.g_CasCadeDeviceSpiConnect & 8U) == 8U)) || GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
                    {
                        MatlabPostProcGuiInstance.MatlabPostProcImpl_AdcOutConfig((double)m_StaticParams.BitsVal, (double)m_StaticParams.FmtVal);
                        int num8 = Imports.RadarLinkImpl_DataFmtConfig(GlobalRef.g_RadarDeviceId, (ushort)num2, (ushort)m_StaticParams.BitsVal, (ushort)num3, m_StaticParams.IQSwap, m_StaticParams.ChanIntrlev);
                        if ((num8 == 0 && ((GlobalRef.g_CasCadeDeviceSpiConnect & 1U) == 1U || (GlobalRef.g_CasCadeDeviceSpiConnect & 2U) == 2U || (GlobalRef.g_CasCadeDeviceSpiConnect & 4U) == 4U || (GlobalRef.g_CasCadeDeviceSpiConnect & 8U) == 8U)) || GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
                        {
                            string full_command4 = string.Format("Status: Passed", new object[0]);
                            m_GuiManager.RecordLog(2, full_command4);
                            MatlabPostProcGuiInstance.MatlabPostProcImpl_DataFmtConfig((double)num2, (double)m_StaticParams.BitsVal, (double)num3, (double)m_StaticParams.IQSwap, (double)m_StaticParams.ChanIntrlev);
                            if (GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex] && iRs232ConnectDisconnect_impl() == 0 && !GlobalRef.g_NtvRS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
                            {
                                m_GuiManager.DllOps.iConnect(1U, 0U);
                                string full_command5 = string.Format("Debug Port Reconnected!", new object[0]);
                                m_GuiManager.RecordLog(9, full_command5);
                                ScriptOps.KeepTrying(2000, new Func<bool>(spare_read));
                            }
                            result = num4 + num7 + num8;
                        }
                        else
                        {
                            string full_command6 = string.Format("Status: Failed, Error Type: {0}", new object[]
                            {
                                GetErrorType(num8)
                            });
                            m_GuiManager.RecordLog(2, full_command6);
                            result = num8;
                        }
                    }
                    else
                    {
                        string full_command7 = string.Format("Status: Failed, Error Type: {0}", new object[]
                        {
                            GetErrorType(num7)
                        });
                        m_GuiManager.RecordLog(2, full_command7);
                        result = num7;
                    }
                }
                else
                {
                    string msg = string.Format("Status: Failed, Error Type: {0}", new object[]
                    {
                        GetErrorType(num4)
                    });
                    GlobalRef.LuaWrapper.PrintError(msg);
                    result = num4;
                }
            }
            catch (Exception ex)
            {
                m_GuiManager.Error(ex.Message, ex.StackTrace);
                result = -1;
            }
            return result;
        }

        public int SetResetSensorAndBPMTxChannels()
        {
            int result = 0;
            if (m_StaticParams.EnableTx1 == 1)
            {
                ScriptOps.m_MainForm.ChirpConfigTab.enableChirpTxChannel1();
                ScriptOps.m_MainForm.BpmConfigTab.enableBPMTx1Off();
                ScriptOps.m_MainForm.BpmConfigTab.enableBPMTx1On();
                ScriptOps.m_MainForm.AnalogMonConfig.enableTx0GainPhaseChannel();
            }
            else
            {
                ScriptOps.m_MainForm.ChirpConfigTab.disableChirpTxChannel1();
                ScriptOps.m_MainForm.BpmConfigTab.disableBPMTx1Off();
                ScriptOps.m_MainForm.BpmConfigTab.disableBPMTx1On();
                ScriptOps.m_MainForm.AnalogMonConfig.disableTx0GainPhaseChannel();
            }
            if (m_StaticParams.EnableTx2 == 1)
            {
                ScriptOps.m_MainForm.ChirpConfigTab.enableChirpTxChannel2();
                ScriptOps.m_MainForm.BpmConfigTab.enableBPMTx2Off();
                ScriptOps.m_MainForm.BpmConfigTab.enableBPMTx2On();
                ScriptOps.m_MainForm.AnalogMonConfig.enableTx1GainPhaseChannel();
            }
            else
            {
                ScriptOps.m_MainForm.ChirpConfigTab.disableChirpTxChannel2();
                ScriptOps.m_MainForm.BpmConfigTab.disableBPMTx2Off();
                ScriptOps.m_MainForm.BpmConfigTab.disableBPMTx2On();
                ScriptOps.m_MainForm.AnalogMonConfig.disableTx1GainPhaseChannel();
            }
            if (m_StaticParams.EnableTx3 == 1)
            {
                ScriptOps.m_MainForm.ChirpConfigTab.enableChirpTxChannel3();
                ScriptOps.m_MainForm.BpmConfigTab.enableBPMTx3Off();
                ScriptOps.m_MainForm.BpmConfigTab.enableBPMTx3On();
                ScriptOps.m_MainForm.AnalogMonConfig.enableTx2GainPhaseChannel();
                return result;
            }
            ScriptOps.m_MainForm.ChirpConfigTab.disableChirpTxChannel3();
            ScriptOps.m_MainForm.BpmConfigTab.disableBPMTx3Off();
            ScriptOps.m_MainForm.BpmConfigTab.disableBPMTx3On();
            ScriptOps.m_MainForm.AnalogMonConfig.disableTx2GainPhaseChannel();
            return result;
        }

        private int iSetLpModConfig_Impl(bool is_starting_op, bool is_ending_op)
        {
            m_LpModConfParams.AnaChan = 0;
            LowPowerModeConfigurationParam.Reserved = 0;
            LowPowerModeConfigurationParam.LowPowerMode = (ushort)m_LpModConfParams.LpAdcMod;
            GCHandle.Alloc(LowPowerModeConfigurationParam, GCHandleType.Pinned).AddrOfPinnedObject();
            int result;
            try
            {
                if (GlobalRef.g_NtvRS232Connect[(int)GlobalRef.g_RadarDeviceIndex] && GlobalRef.g_CasCadeDeviceSpiConnect == 0U)
                {
                    m_TsWrapper.Calling_WriteAddr_Single(4294959848U, 1U);
                    if (m_GuiManager.DllOps.itempDisconnect(false) == 0)
                    {
                        string full_command = string.Format("Debug Port Disconnected", new object[0]);
                        m_GuiManager.RecordLog(0, full_command);
                        if (!GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
                        {
                            iRs232ConnectDisconnect_impl();
                        }
                    }
                }
                if (m_RadarDeviceModeConfigParams.NumberOfRadarDevicesDetected <= 1)
                {
                    string full_command2 = string.Format("ar1.LPModConfig({0}, {1})", new object[]
                    {
                        (ushort)m_LpModConfParams.AnaChan,
                        (ushort)m_LpModConfParams.LpAdcMod
                    });
                    m_GuiManager.RecordLog(11, full_command2);
                }
                else
                {
                    string full_command3 = string.Format("ar1.LPModConfig_mult({0}, {1},{2})", new object[]
                    {
                        GlobalRef.g_RadarDeviceId,
                        (ushort)m_LpModConfParams.AnaChan,
                        (ushort)m_LpModConfParams.LpAdcMod
                    });
                    m_GuiManager.RecordLog(11, full_command3);
                }
                uint g_RadarDeviceId = GlobalRef.g_RadarDeviceId;
                int num = Imports.RadarLinkImpl_LowPowerConfig(GlobalRef.g_RadarDeviceId, LowPowerModeConfigurationParam.LowPowerMode);
                if (num == 0 && ((GlobalRef.g_CasCadeDeviceSpiConnect & 1U) == 1U || (GlobalRef.g_CasCadeDeviceSpiConnect & 2U) == 2U || (GlobalRef.g_CasCadeDeviceSpiConnect & 4U) == 4U || (GlobalRef.g_CasCadeDeviceSpiConnect & 8U) == 8U))
                {
                    string full_command4 = string.Format("Status: Passed", new object[0]);
                    m_GuiManager.RecordLog(11, full_command4);
                    int num2 = 0;
                    while (num2 < 4 && !jsonConfigInProgress)
                    {
                        if (((ulong)g_RadarDeviceId & (ulong)(1L << (num2 & 31))) != 0UL)
                        {
                            int mmwaveDevIndex = getMmwaveDevIndex(num2);
                            GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlLowPowerModeCfg_t.lpAdcMode = m_LpModConfParams.LpAdcMod;
                            GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlLowPowerModeCfg_t.isConfigured = 1;
                        }
                        num2++;
                    }
                    MatlabPostProcGuiInstance.MatlabPostProcImpl_LowPowerConfig((double)m_LpModConfParams.AnaChan, (double)m_LpModConfParams.LpAdcMod);
                }
                else
                {
                    string full_command5 = string.Format("Status: Failed, Error Type: {0}", new object[]
                    {
                        GetErrorType(num)
                    });
                    m_GuiManager.RecordLog(11, full_command5);
                }
                if (GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
                {
                    if (iRs232ConnectDisconnect_impl() == 0 && !GlobalRef.g_NtvRS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
                    {
                        m_GuiManager.DllOps.iConnect(1U, 0U);
                        string full_command6 = string.Format("Debug Port Reconnected!", new object[0]);
                        m_GuiManager.RecordLog(9, full_command6);
                        ScriptOps.KeepTrying(2000, new Func<bool>(spare_read));
                    }
                }
                else if (GlobalRef.g_CasCadeDeviceSpiConnect == 0U)
                {
                    string full_command7 = string.Format("Error Occurred in Port open close", new object[0]);
                    m_GuiManager.RecordLog(9, full_command7);
                }
                result = num;
            }
            catch (Exception ex)
            {
                m_GuiManager.Error(ex.Message, ex.StackTrace);
                result = -1;
            }
            return result;
        }

        private int iSetRFLDOBypassEnableDisableConfig_Impl(bool is_starting_op, bool is_ending_op)
        {
            f0002d8.LDOBypass = (ushort)((int)m_RFLDOBypassEnableAndDisableConfigParameters.LDOBypassEnable | (int)m_RFLDOBypassEnableAndDisableConfigParameters.f0002fc << 1);
            f0002d8.SupplyMonIRDrop = m_RFLDOBypassEnableAndDisableConfigParameters.SupplyMonIRDrop;
            f0002d8.SupplyMonIRDrop = (ushort)((int)f0002d8.SupplyMonIRDrop | (int)m_RFLDOBypassEnableAndDisableConfigParameters.IOSupply << 8);
            IntPtr data = GCHandle.Alloc(f0002d8, GCHandleType.Pinned).AddrOfPinnedObject();
            int result;
            try
            {
                if (GlobalRef.g_NtvRS232Connect[(int)GlobalRef.g_RadarDeviceIndex] && GlobalRef.g_CasCadeDeviceSpiConnect == 0U)
                {
                    m_TsWrapper.Calling_WriteAddr_Single(4294959848U, 1U);
                    if (m_GuiManager.DllOps.itempDisconnect(false) == 0)
                    {
                        string full_command = string.Format("Debug Port Disconnected", new object[0]);
                        m_GuiManager.RecordLog(0, full_command);
                        if (!GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
                        {
                            iRs232ConnectDisconnect_impl();
                        }
                    }
                }
                if (m_RadarDeviceModeConfigParams.NumberOfRadarDevicesDetected <= 1)
                {
                    string full_command2 = string.Format("ar1.RfLdoBypassConfig(0x{0:X})", new object[]
                    {
                        (uint)((int)m_RFLDOBypassEnableAndDisableConfigParameters.LDOBypassEnable | (int)m_RFLDOBypassEnableAndDisableConfigParameters.f0002fc << 1 | (int)m_RFLDOBypassEnableAndDisableConfigParameters.SupplyMonIRDrop << 16 | (int)m_RFLDOBypassEnableAndDisableConfigParameters.IOSupply << 24)
                    });
                    m_GuiManager.RecordLog(11, full_command2);
                }
                else
                {
                    string full_command3 = string.Format("ar1.RfLdoBypassConfig_mult({0}, 0x{0:X})", new object[]
                    {
                        GlobalRef.g_RadarDeviceId,
                        (uint)((int)m_RFLDOBypassEnableAndDisableConfigParameters.LDOBypassEnable | (int)m_RFLDOBypassEnableAndDisableConfigParameters.f0002fc << 1 | (int)m_RFLDOBypassEnableAndDisableConfigParameters.SupplyMonIRDrop << 16 | (int)m_RFLDOBypassEnableAndDisableConfigParameters.IOSupply << 24)
                    });
                    m_GuiManager.RecordLog(11, full_command3);
                }
                uint g_RadarDeviceId = GlobalRef.g_RadarDeviceId;
                int num = Imports.RadarLinkImpl_EnableRfLdoBypass(GlobalRef.g_RadarDeviceId, data);
                if ((num == 0 && ((GlobalRef.g_CasCadeDeviceSpiConnect & 1U) == 1U || (GlobalRef.g_CasCadeDeviceSpiConnect & 2U) == 2U || (GlobalRef.g_CasCadeDeviceSpiConnect & 4U) == 4U || (GlobalRef.g_CasCadeDeviceSpiConnect & 8U) == 8U)) || GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
                {
                    string full_command4 = string.Format("Status: Passed", new object[0]);
                    m_GuiManager.RecordLog(11, full_command4);
                    for (int i = 0; i < 4; i++)
                    {
                        if (jsonConfigInProgress)
                        {
                            break;
                        }
                        if (((ulong)g_RadarDeviceId & (ulong)(1L << (i & 31))) != 0UL)
                        {
                            int mmwaveDevIndex = getMmwaveDevIndex(i);
                            GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlRfLdoBypassCfg_t.ldoBypassEnable = (int)f0002d8.LDOBypass;
                            GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlRfLdoBypassCfg_t.supplyMonIrDrop = (int)m_RFLDOBypassEnableAndDisableConfigParameters.SupplyMonIRDrop;
                            GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlRfLdoBypassCfg_t.ioSupplyIndicator = (int)m_RFLDOBypassEnableAndDisableConfigParameters.IOSupply;
                            GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlRfLdoBypassCfg_t.isConfigured = 1;
                        }
                    }
                }
                else
                {
                    string msg = string.Format("Status: Failed, Error Type: {0}", new object[]
                    {
                        GetErrorType(num)
                    });
                    GlobalRef.LuaWrapper.PrintError(msg);
                }
                if (GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
                {
                    if (iRs232ConnectDisconnect_impl() == 0 && !GlobalRef.g_NtvRS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
                    {
                        m_GuiManager.DllOps.iConnect(1U, 0U);
                        string full_command5 = string.Format("Debug Port Reconnected!", new object[0]);
                        m_GuiManager.RecordLog(9, full_command5);
                        ScriptOps.KeepTrying(2000, new Func<bool>(spare_read));
                    }
                }
                else if (GlobalRef.g_CasCadeDeviceSpiConnect == 0U)
                {
                    string full_command6 = string.Format("Error Occurred in Port open close", new object[0]);
                    m_GuiManager.RecordLog(9, full_command6);
                }
                result = num;
            }
            catch (Exception ex)
            {
                m_GuiManager.Error(ex.Message, ex.StackTrace);
                result = -1;
            }
            return result;
        }

        private int iSetDataPathConfig_Impl(bool is_starting_op, bool is_ending_op)
        {
            int result;
            try
            {
                ushort[] array = new ushort[4];
                ushort[] array2 = new ushort[3];
                array[0] = 1;
                array[1] = 6;
                array[2] = 9;
                array[3] = 54;
                array2[0] = 0;
                array2[1] = 14;
                array2[2] = 11;
                int num;
                if (GlobalRef.g_NtvRS232Connect[(int)GlobalRef.g_RadarDeviceIndex] && GlobalRef.g_CasCadeDeviceSpiConnect == 0U)
                {
                    num = m_TsWrapper.Calling_WriteAddr_Single(4294959848U, 1U);
                    if (m_GuiManager.DllOps.itempDisconnect(false) == 0)
                    {
                        string full_command = string.Format("Debug Port Disconnected", new object[0]);
                        m_GuiManager.RecordLog(0, full_command);
                        if (!GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
                        {
                            iRs232ConnectDisconnect_impl();
                        }
                    }
                }
                if (m_DataConfigParams.DataPath == '\0')
                {
                    m_DataConfigParams.DataFmt0 = (char)(m_DataConfigParams.DataFmt0 | m_DataConfigParams.CS2Pkt0VirtualChannelNo << 6);
                    m_DataConfigParams.DataFmt1 = (char)(m_DataConfigParams.DataFmt1 | m_DataConfigParams.CS2Pkt1VirtualChannelNo << 6);
                    if (m_RadarDeviceModeConfigParams.NumberOfRadarDevicesDetected <= 1)
                    {
                        string full_command2 = string.Format("ar1.DataPathConfig({0}, {1}, {2})", new object[]
                        {
                            (uint)(m_DataConfigParams.DataPath | (uint)m_DataConfigParams.CQConfig << 8),
                            (uint)(m_DataConfigParams.DataFmt0 | (uint)m_DataConfigParams.CQ0TransSize << 8 | (uint)m_DataConfigParams.CQ1TransSize << 16 | (uint)m_DataConfigParams.CQ2TransSize << 24),
                            (uint)(m_DataConfigParams.DataFmt1 | (uint)m_DataConfigParams.reserved << 8)
                        });
                        m_GuiManager.RecordLog(3, full_command2);
                    }
                    else
                    {
                        string full_command3 = string.Format("ar1.DataPathConfig_mult({0}, {1}, {2}, {3})", new object[]
                        {
                            GlobalRef.g_RadarDeviceId,
                            (uint)(m_DataConfigParams.DataPath | (uint)m_DataConfigParams.CQConfig << 8),
                            (uint)(m_DataConfigParams.DataFmt0 | (uint)m_DataConfigParams.CQ0TransSize << 8 | (uint)m_DataConfigParams.CQ1TransSize << 16 | (uint)m_DataConfigParams.CQ2TransSize << 24),
                            (uint)(m_DataConfigParams.DataFmt1 | (uint)m_DataConfigParams.reserved << 8)
                        });
                        m_GuiManager.RecordLog(3, full_command3);
                    }
                    uint g_RadarDeviceId = GlobalRef.g_RadarDeviceId;
                    num = Imports.RadarLinkImpl_DataPathConfig(GlobalRef.g_RadarDeviceId, (byte)m_DataConfigParams.DataPath, (byte)m_DataConfigParams.DataFmt0, (byte)m_DataConfigParams.DataFmt1, (byte)m_DataConfigParams.CQConfig, (byte)m_DataConfigParams.CQ0TransSize, (byte)m_DataConfigParams.CQ1TransSize, (byte)m_DataConfigParams.CQ2TransSize, (byte)m_DataConfigParams.reserved);
                    if ((num == 0 && ((GlobalRef.g_CasCadeDeviceSpiConnect & 1U) == 1U || (GlobalRef.g_CasCadeDeviceSpiConnect & 2U) == 2U || (GlobalRef.g_CasCadeDeviceSpiConnect & 4U) == 4U || (GlobalRef.g_CasCadeDeviceSpiConnect & 8U) == 8U)) || GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
                    {
                        string full_command4 = string.Format("Status: Passed", new object[0]);
                        m_GuiManager.RecordLog(3, full_command4);
                        int num2 = 0;
                        while (num2 < 4 && !jsonConfigInProgress)
                        {
                            if (((ulong)g_RadarDeviceId & (ulong)(1L << (num2 & 31))) != 0UL)
                            {
                                int mmwaveDevIndex = getMmwaveDevIndex(num2);
                                GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rawDataCaptureConfig.rlDevDataPathCfg_t.intfSel = (int)m_DataConfigParams.DataPath;
                                RlDevDataPathCfgT rlDevDataPathCfg_t = GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rawDataCaptureConfig.rlDevDataPathCfg_t;
                                string str = "0x";
                                result = (int)m_DataConfigParams.DataFmt0;
                                rlDevDataPathCfg_t.p000016 = str + result.ToString("X");
                                RlDevDataPathCfgT rlDevDataPathCfg_t2 = GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rawDataCaptureConfig.rlDevDataPathCfg_t;
                                string str2 = "0x";
                                result = (int)m_DataConfigParams.DataFmt1;
                                rlDevDataPathCfg_t2.p000017 = str2 + result.ToString("X");
                                GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rawDataCaptureConfig.rlDevDataPathCfg_t.cqConfig = (int)m_DataConfigParams.CQConfig;
                                GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rawDataCaptureConfig.rlDevDataPathCfg_t.cq0TransSize = (int)m_DataConfigParams.CQ0TransSize;
                                GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rawDataCaptureConfig.rlDevDataPathCfg_t.cq1TransSize = (int)m_DataConfigParams.CQ1TransSize;
                                GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rawDataCaptureConfig.rlDevDataPathCfg_t.cq2TransSize = (int)m_DataConfigParams.CQ2TransSize;
                                GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rawDataCaptureConfig.rlDevDataPathCfg_t.isConfigured = 1;
                            }
                            num2++;
                        }
                        MatlabPostProcGuiInstance.MatlabPostProcImpl_DataPathConfig((double)m_DataConfigParams.DataPath, (double)m_DataConfigParams.DataFmt0, (double)m_DataConfigParams.DataFmt1, 2.0);
                    }
                    else
                    {
                        string msg = string.Format("Status: Failed, Error Type: {0}", new object[]
                        {
                            GetErrorType(num)
                        });
                        GlobalRef.LuaWrapper.PrintError(msg);
                    }
                }
                else if (m_DataConfigParams.DataPath == '\u0002')
                {
                    if (m_RadarDeviceModeConfigParams.NumberOfRadarDevicesDetected <= 1)
                    {
                        string full_command5 = string.Format("ar1.DataPathConfig({0}, {1}, {2})", new object[]
                        {
                            (uint)(m_DataConfigParams.DataPath | (uint)m_DataConfigParams.CQConfig << 8),
                            (uint)(m_DataConfigParams.DataFmt0 | (uint)m_DataConfigParams.CQ0TransSize << 8 | (uint)m_DataConfigParams.CQ1TransSize << 16 | (uint)m_DataConfigParams.CQ2TransSize << 24),
                            (uint)m_DataConfigParams.DataFmt1
                        });
                        m_GuiManager.RecordLog(3, full_command5);
                    }
                    else
                    {
                        string full_command6 = string.Format("ar1.DataPathConfig_mult({0}, {1}, {2},{3})", new object[]
                        {
                            GlobalRef.g_RadarDeviceId,
                            (uint)(m_DataConfigParams.DataPath | (uint)m_DataConfigParams.CQConfig << 8),
                            (uint)(m_DataConfigParams.DataFmt0 | (uint)m_DataConfigParams.CQ0TransSize << 8 | (uint)m_DataConfigParams.CQ1TransSize << 16 | (uint)m_DataConfigParams.CQ2TransSize << 24),
                            (uint)m_DataConfigParams.DataFmt1
                        });
                        m_GuiManager.RecordLog(3, full_command6);
                    }
                    num = Imports.RadarLinkImpl_DataPathConfig(GlobalRef.g_RadarDeviceId, (byte)m_DataConfigParams.DataPath, (byte)m_DataConfigParams.DataFmt0, (byte)m_DataConfigParams.DataFmt1, (byte)m_DataConfigParams.CQConfig, (byte)m_DataConfigParams.CQ0TransSize, (byte)m_DataConfigParams.CQ1TransSize, (byte)m_DataConfigParams.CQ2TransSize, (byte)m_DataConfigParams.reserved);
                    uint g_RadarDeviceId2 = GlobalRef.g_RadarDeviceId;
                    if ((num == 0 && ((GlobalRef.g_CasCadeDeviceSpiConnect & 1U) == 1U || (GlobalRef.g_CasCadeDeviceSpiConnect & 2U) == 2U || (GlobalRef.g_CasCadeDeviceSpiConnect & 4U) == 4U || (GlobalRef.g_CasCadeDeviceSpiConnect & 8U) == 8U)) || GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
                    {
                        string full_command7 = string.Format("Status: Passed", new object[0]);
                        m_GuiManager.RecordLog(3, full_command7);
                        int num3 = 0;
                        while (num3 < 4 && !jsonConfigInProgress)
                        {
                            if (((ulong)g_RadarDeviceId2 & (ulong)(1L << (num3 & 31))) != 0UL)
                            {
                                int mmwaveDevIndex2 = getMmwaveDevIndex(num3);
                                GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex2].rawDataCaptureConfig.rlDevDataPathCfg_t.intfSel = (int)m_DataConfigParams.DataPath;
                                RlDevDataPathCfgT rlDevDataPathCfg_t3 = GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex2].rawDataCaptureConfig.rlDevDataPathCfg_t;
                                string str3 = "0x";
                                result = (int)m_DataConfigParams.DataFmt0;
                                rlDevDataPathCfg_t3.p000016 = str3 + result.ToString("X");
                                RlDevDataPathCfgT rlDevDataPathCfg_t4 = GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex2].rawDataCaptureConfig.rlDevDataPathCfg_t;
                                string str4 = "0x";
                                result = (int)m_DataConfigParams.DataFmt1;
                                rlDevDataPathCfg_t4.p000017 = str4 + result.ToString("X");
                                GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex2].rawDataCaptureConfig.rlDevDataPathCfg_t.cqConfig = (int)m_DataConfigParams.CQConfig;
                                GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex2].rawDataCaptureConfig.rlDevDataPathCfg_t.cq0TransSize = (int)m_DataConfigParams.CQ0TransSize;
                                GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex2].rawDataCaptureConfig.rlDevDataPathCfg_t.cq1TransSize = (int)m_DataConfigParams.CQ1TransSize;
                                GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex2].rawDataCaptureConfig.rlDevDataPathCfg_t.cq2TransSize = (int)m_DataConfigParams.CQ2TransSize;
                                GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex2].rawDataCaptureConfig.rlDevDataPathCfg_t.isConfigured = 1;
                            }
                            num3++;
                        }
                        MatlabPostProcGuiInstance.MatlabPostProcImpl_DataPathConfig((double)m_DataConfigParams.DataPath, (double)m_DataConfigParams.DataFmt0, (double)m_DataConfigParams.DataFmt1, 2.0);
                    }
                    else
                    {
                        string msg2 = string.Format("Status: Failed, Error Type: {0}", new object[]
                        {
                            GetErrorType(num)
                        });
                        GlobalRef.LuaWrapper.PrintError(msg2);
                    }
                }
                else
                {
                    if (m_RadarDeviceModeConfigParams.NumberOfRadarDevicesDetected <= 1)
                    {
                        string full_command8 = string.Format("ar1.DataPathConfig({0}, {1}, {2})", new object[]
                        {
                            (uint)(m_DataConfigParams.DataPath | (uint)m_DataConfigParams.CQConfig << 8),
                            (uint)(m_DataConfigParams.DataFmt0 | (uint)m_DataConfigParams.CQ0TransSize << 8 | (uint)m_DataConfigParams.CQ1TransSize << 16 | (uint)m_DataConfigParams.CQ2TransSize << 24),
                            (uint)m_DataConfigParams.DataFmt1
                        });
                        m_GuiManager.RecordLog(3, full_command8);
                    }
                    else
                    {
                        string full_command9 = string.Format("ar1.DataPathConfig_mult({0}, {1}, {2},{3})", new object[]
                        {
                            GlobalRef.g_RadarDeviceId,
                            (uint)(m_DataConfigParams.DataPath | (uint)m_DataConfigParams.CQConfig << 8),
                            (uint)(m_DataConfigParams.DataFmt0 | (uint)m_DataConfigParams.CQ0TransSize << 8 | (uint)m_DataConfigParams.CQ1TransSize << 16 | (uint)m_DataConfigParams.CQ2TransSize << 24),
                            (uint)m_DataConfigParams.DataFmt1
                        });
                        m_GuiManager.RecordLog(3, full_command9);
                    }
                    uint g_RadarDeviceId3 = GlobalRef.g_RadarDeviceId;
                    num = Imports.RadarLinkImpl_DataPathConfig(GlobalRef.g_RadarDeviceId, (byte)m_DataConfigParams.DataPath, (byte)m_DataConfigParams.DataFmt0, (byte)m_DataConfigParams.DataFmt1, (byte)m_DataConfigParams.CQConfig, (byte)m_DataConfigParams.CQ0TransSize, (byte)m_DataConfigParams.CQ1TransSize, (byte)m_DataConfigParams.CQ2TransSize, (byte)m_DataConfigParams.reserved);
                    if ((num == 0 && ((GlobalRef.g_CasCadeDeviceSpiConnect & 1U) == 1U || (GlobalRef.g_CasCadeDeviceSpiConnect & 2U) == 2U || (GlobalRef.g_CasCadeDeviceSpiConnect & 4U) == 4U || (GlobalRef.g_CasCadeDeviceSpiConnect & 8U) == 8U)) || GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
                    {
                        string full_command10 = string.Format("Status: Passed", new object[0]);
                        m_GuiManager.RecordLog(3, full_command10);
                        int num4 = 0;
                        while (num4 < 4 && !jsonConfigInProgress)
                        {
                            if (((ulong)g_RadarDeviceId3 & (ulong)(1L << (num4 & 31))) != 0UL)
                            {
                                int mmwaveDevIndex3 = getMmwaveDevIndex(num4);
                                GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex3].rawDataCaptureConfig.rlDevDataPathCfg_t.intfSel = (int)m_DataConfigParams.DataPath;
                                RlDevDataPathCfgT rlDevDataPathCfg_t5 = GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex3].rawDataCaptureConfig.rlDevDataPathCfg_t;
                                string str5 = "0x";
                                result = (int)m_DataConfigParams.DataFmt0;
                                rlDevDataPathCfg_t5.p000016 = str5 + result.ToString("X");
                                RlDevDataPathCfgT rlDevDataPathCfg_t6 = GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex3].rawDataCaptureConfig.rlDevDataPathCfg_t;
                                string str6 = "0x";
                                result = (int)m_DataConfigParams.DataFmt1;
                                rlDevDataPathCfg_t6.p000017 = str6 + result.ToString("X");
                                GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex3].rawDataCaptureConfig.rlDevDataPathCfg_t.cqConfig = (int)m_DataConfigParams.CQConfig;
                                GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex3].rawDataCaptureConfig.rlDevDataPathCfg_t.cq0TransSize = (int)m_DataConfigParams.CQ0TransSize;
                                GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex3].rawDataCaptureConfig.rlDevDataPathCfg_t.cq1TransSize = (int)m_DataConfigParams.CQ1TransSize;
                                GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex3].rawDataCaptureConfig.rlDevDataPathCfg_t.cq2TransSize = (int)m_DataConfigParams.CQ2TransSize;
                                GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex3].rawDataCaptureConfig.rlDevDataPathCfg_t.isConfigured = 1;
                            }
                            num4++;
                        }
                        MatlabPostProcGuiInstance.MatlabPostProcImpl_DataPathConfig((double)m_DataConfigParams.DataPath, (double)m_DataConfigParams.DataFmt0, (double)m_DataConfigParams.DataFmt1, 2.0);
                    }
                    else
                    {
                        string msg3 = string.Format("Status: Failed, Error Type: {0}", new object[]
                        {
                            GetErrorType(num)
                        });
                        GlobalRef.LuaWrapper.PrintError(msg3);
                    }
                }
                if (GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex] && iRs232ConnectDisconnect_impl() == 0 && !GlobalRef.g_NtvRS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
                {
                    m_GuiManager.DllOps.iConnect(1U, 0U);
                    string full_command11 = string.Format("Debug Port Reconnected!", new object[0]);
                    m_GuiManager.RecordLog(9, full_command11);
                    ScriptOps.KeepTrying(2000, new Func<bool>(spare_read));
                }
                result = num;
            }
            catch (Exception ex)
            {
                m_GuiManager.Error(ex.Message, ex.StackTrace);
                result = -1;
            }
            return result;
        }

        private int iSetLvdsClkConfig_Impl(bool is_starting_op, bool is_ending_op)
        {
            int result;
            try
            {
                ushort[][] array = new ushort[][]
                {
                    new ushort[]
                    {
                        5,
                        10,
                        6,
                        2,
                        11,
                        7,
                        0,
                        0
                    },
                    new ushort[]
                    {
                        13,
                        9,
                        5,
                        1,
                        10,
                        6,
                        11,
                        0
                    }
                };
                if (m_DataConfigParams.laneClk == '\0')
                {
                    if (m_DataConfigParams.DataRate == '\0')
                    {
                        m_DataConfigParams.DataRate = '\u0002';
                    }
                    else if (m_DataConfigParams.DataRate == '\u0001')
                    {
                        m_DataConfigParams.DataRate = '\u0004';
                    }
                    else if (m_DataConfigParams.DataRate == '\u0002')
                    {
                        m_DataConfigParams.DataRate = '\u0006';
                    }
                }
                char laneClk = m_DataConfigParams.laneClk;
                char dataRate = m_DataConfigParams.DataRate;
                int laneClk2 = (int)m_DataConfigParams.laneClk;
                result = (int)m_DataConfigParams.DataRate;
                string a = result.ToString();
                int dataRate_Mbps = 0;
                if (laneClk2 == 1)
                {
                    if (a == "0")
                    {
                        dataRate_Mbps = 900;
                    }
                    else if (a == "1")
                    {
                        dataRate_Mbps = 600;
                    }
                    else if (a == "2")
                    {
                        dataRate_Mbps = 450;
                    }
                    else if (a == "3")
                    {
                        dataRate_Mbps = 400;
                    }
                    else if (a == "4")
                    {
                        dataRate_Mbps = 300;
                    }
                    else if (a == "5")
                    {
                        dataRate_Mbps = 225;
                    }
                    else if (a == "6")
                    {
                        dataRate_Mbps = 150;
                    }
                }
                else if (laneClk2 == 0)
                {
                    if (a == "0")
                    {
                        dataRate_Mbps = 450;
                    }
                    else if (a == "1")
                    {
                        dataRate_Mbps = 300;
                    }
                    else if (a == "2")
                    {
                        dataRate_Mbps = 150;
                    }
                }
                int num;
                if (GlobalRef.g_NtvRS232Connect[(int)GlobalRef.g_RadarDeviceIndex] && GlobalRef.g_CasCadeDeviceSpiConnect == 0U)
                {
                    num = m_TsWrapper.Calling_WriteAddr_Single(4294959848U, 1U);
                    if (m_GuiManager.DllOps.itempDisconnect(false) == 0)
                    {
                        string full_command = string.Format("Debug Port Disconnected", new object[0]);
                        m_GuiManager.RecordLog(0, full_command);
                        if (!GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
                        {
                            iRs232ConnectDisconnect_impl();
                        }
                    }
                }
                if (m_RadarDeviceModeConfigParams.NumberOfRadarDevicesDetected <= 1)
                {
                    string full_command2 = string.Format("ar1.LvdsClkConfig({0}, {1})", new object[]
                    {
                        (int)laneClk,
                        (int)dataRate
                    });
                    m_GuiManager.RecordLog(5, full_command2);
                }
                else
                {
                    string full_command3 = string.Format("ar1.LvdsClkConfig_mult({0}, {1},{2})", new object[]
                    {
                        GlobalRef.g_RadarDeviceId,
                        (int)laneClk,
                        (int)dataRate
                    });
                    m_GuiManager.RecordLog(5, full_command3);
                }
                uint g_RadarDeviceId = GlobalRef.g_RadarDeviceId;
                num = Imports.RadarLinkImpl_LvdsClkConfig(GlobalRef.g_RadarDeviceId, laneClk, dataRate);
                if ((num == 0 && ((GlobalRef.g_CasCadeDeviceSpiConnect & 1U) == 1U || (GlobalRef.g_CasCadeDeviceSpiConnect & 2U) == 2U || (GlobalRef.g_CasCadeDeviceSpiConnect & 4U) == 4U || (GlobalRef.g_CasCadeDeviceSpiConnect & 8U) == 8U)) || GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
                {
                    MatlabPostProcGuiInstance.MatlabPostProcImpl_LvdsClkConfig((double)laneClk, (double)dataRate);
                    int num2 = Imports.RadarLinkImpl_SetHsiClock(GlobalRef.g_RadarDeviceId, array[(int)laneClk][(int)dataRate]);
                    if ((num2 == 0 && ((GlobalRef.g_CasCadeDeviceSpiConnect & 1U) == 1U || (GlobalRef.g_CasCadeDeviceSpiConnect & 2U) == 2U || (GlobalRef.g_CasCadeDeviceSpiConnect & 4U) == 4U || (GlobalRef.g_CasCadeDeviceSpiConnect & 8U) == 8U)) || GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
                    {
                        string full_command4 = string.Format("Status: Passed", new object[0]);
                        m_GuiManager.RecordLog(5, full_command4);
                        int num3 = 0;
                        while (num3 < 4 && !jsonConfigInProgress)
                        {
                            if (((ulong)g_RadarDeviceId & (ulong)(1L << (num3 & 31))) != 0UL)
                            {
                                int mmwaveDevIndex = getMmwaveDevIndex(num3);
                                GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rawDataCaptureConfig.rlDevDataPathClkCfg_t.p000018 = laneClk2;
                                GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rawDataCaptureConfig.rlDevDataPathClkCfg_t.dataRate_Mbps = dataRate_Mbps;
                                GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rawDataCaptureConfig.rlDevDataPathClkCfg_t.isConfigured = 1;
                            }
                            num3++;
                        }
                        MatlabPostProcGuiInstance.MatlabPostProcImpl_SetHsiClock((double)array[(int)laneClk][(int)dataRate]);
                    }
                    else
                    {
                        string full_command5 = string.Format("Status: Failed, Error Type: {0}", new object[]
                        {
                            GetErrorType(num2)
                        });
                        m_GuiManager.RecordLog(5, full_command5);
                    }
                    if (GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex] && iRs232ConnectDisconnect_impl() == 0 && !GlobalRef.g_NtvRS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
                    {
                        m_GuiManager.DllOps.iConnect(1U, 0U);
                        string full_command6 = string.Format("Debug Port Reconnected!", new object[0]);
                        m_GuiManager.RecordLog(9, full_command6);
                        ScriptOps.KeepTrying(2000, new Func<bool>(spare_read));
                    }
                    result = num + num2;
                }
                else
                {
                    string msg = string.Format("Status: Failed, Error Type: {0}", new object[]
                    {
                        GetErrorType(num)
                    });
                    GlobalRef.LuaWrapper.PrintError(msg);
                    result = num;
                }
            }
            catch (Exception ex)
            {
                m_GuiManager.Error(ex.Message, ex.StackTrace);
                result = -1;
            }
            return result;
        }

        private int iSetTestPatternGeneratingConfig_Impl(bool is_starting_op, bool is_ending_op)
        {
            TestPatternGenConfigurationParam.TestPatternGenCtl = m_TestPatternGenConfigParams.TestPatternGenCtl;
            TestPatternGenConfigurationParam.TestPatternGenTiming = m_TestPatternGenConfigParams.TestPatternGenTiming;
            TestPatternGenConfigurationParam.TestPatternPktSize = m_TestPatternGenConfigParams.TestPatternPktSize;
            TestPatternGenConfigurationParam.NumTestPatternPkts = m_TestPatternGenConfigParams.NumTestPatternPkts;
            TestPatternGenConfigurationParam.TestPatternRx0ICfg = (uint)((int)m_TestPatternGenConfigParams.TestPatternRx0ICfg1 | (int)m_TestPatternGenConfigParams.TestPatternRx0ICfg2 << 16);
            TestPatternGenConfigurationParam.TestPatternRx0QCfg = (uint)((int)m_TestPatternGenConfigParams.TestPatternRx0QCfg1 | (int)m_TestPatternGenConfigParams.TestPatternRx0QCfg2 << 16);
            TestPatternGenConfigurationParam.TestPatternRx1ICfg = (uint)((int)m_TestPatternGenConfigParams.TestPatternRx1ICfg1 | (int)m_TestPatternGenConfigParams.TestPatternRx1ICfg2 << 16);
            TestPatternGenConfigurationParam.TestPatternRx1QCfg = (uint)((int)m_TestPatternGenConfigParams.TestPatternRx1QCfg1 | (int)m_TestPatternGenConfigParams.TestPatternRx1QCfg2 << 16);
            TestPatternGenConfigurationParam.TestPatternRx2ICfg = (uint)((int)m_TestPatternGenConfigParams.TestPatternRx2ICfg1 | (int)m_TestPatternGenConfigParams.TestPatternRx2ICfg2 << 16);
            TestPatternGenConfigurationParam.TestPatternRx2QCfg = (uint)((int)m_TestPatternGenConfigParams.TestPatternRx2QCfg1 | (int)m_TestPatternGenConfigParams.TestPatternRx2QCfg2 << 16);
            TestPatternGenConfigurationParam.TestPatternRx3ICfg = (uint)((int)m_TestPatternGenConfigParams.TestPatternRx3ICfg1 | (int)m_TestPatternGenConfigParams.TestPatternRx3ICfg2 << 16);
            TestPatternGenConfigurationParam.TestPatternRx3QCfg = (uint)((int)m_TestPatternGenConfigParams.TestPatternRx3QCfg1 | (int)m_TestPatternGenConfigParams.TestPatternRx3QCfg2 << 16);
            TestPatternGenConfigurationParam.Reserved = m_TestPatternGenConfigParams.Reserved;
            IntPtr inData = GCHandle.Alloc(TestPatternGenConfigurationParam, GCHandleType.Pinned).AddrOfPinnedObject();
            int num;
            if (GlobalRef.g_NtvRS232Connect[(int)GlobalRef.g_RadarDeviceIndex] && GlobalRef.g_CasCadeDeviceSpiConnect == 0U)
            {
                num = m_TsWrapper.Calling_WriteAddr_Single(4294959848U, 1U);
                if (m_GuiManager.DllOps.itempDisconnect(false) == 0)
                {
                    string full_command = string.Format("Debug Port Disconnected", new object[0]);
                    m_GuiManager.RecordLog(0, full_command);
                    if (!GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
                    {
                        iRs232ConnectDisconnect_impl();
                    }
                }
            }
            if (m_RadarDeviceModeConfigParams.NumberOfRadarDevicesDetected <= 1)
            {
                string full_command2 = string.Format("ar1.SetTestPatternConfig({0}, {1}, {2}, {3}, {4}, {5}, {6}, {7}, {8}, {9}, {10}, {11}, {12}, {13}, {14}, {15}, {16}, {17}, {18}, {19}, {20})", new object[]
                {
                    m_TestPatternGenConfigParams.TestPatternGenCtl,
                    m_TestPatternGenConfigParams.TestPatternGenTiming,
                    m_TestPatternGenConfigParams.TestPatternPktSize,
                    m_TestPatternGenConfigParams.NumTestPatternPkts,
                    m_TestPatternGenConfigParams.TestPatternRx0ICfg1,
                    m_TestPatternGenConfigParams.TestPatternRx0ICfg2,
                    m_TestPatternGenConfigParams.TestPatternRx0QCfg1,
                    m_TestPatternGenConfigParams.TestPatternRx0QCfg2,
                    m_TestPatternGenConfigParams.TestPatternRx1ICfg1,
                    m_TestPatternGenConfigParams.TestPatternRx1ICfg2,
                    m_TestPatternGenConfigParams.TestPatternRx1QCfg1,
                    m_TestPatternGenConfigParams.TestPatternRx1QCfg2,
                    m_TestPatternGenConfigParams.TestPatternRx2ICfg1,
                    m_TestPatternGenConfigParams.TestPatternRx2ICfg2,
                    m_TestPatternGenConfigParams.TestPatternRx2QCfg1,
                    m_TestPatternGenConfigParams.TestPatternRx2QCfg2,
                    m_TestPatternGenConfigParams.TestPatternRx3ICfg1,
                    m_TestPatternGenConfigParams.TestPatternRx3ICfg2,
                    m_TestPatternGenConfigParams.TestPatternRx3QCfg1,
                    m_TestPatternGenConfigParams.TestPatternRx3QCfg2,
                    m_TestPatternGenConfigParams.Reserved
                });
                m_GuiManager.RecordLog(6, full_command2);
            }
            else
            {
                string full_command3 = string.Format("ar1.SetTestPatternConfig_mult({0}, {1}, {2}, {3}, {4}, {5}, {6}, {7}, {8}, {9}, {10}, {11}, {12}, {13}, {14}, {15}, {16}, {17}, {18}, {19}, {20}, {21})", new object[]
                {
                    GlobalRef.g_RadarDeviceId,
                    m_TestPatternGenConfigParams.TestPatternGenCtl,
                    m_TestPatternGenConfigParams.TestPatternGenTiming,
                    m_TestPatternGenConfigParams.TestPatternPktSize,
                    m_TestPatternGenConfigParams.NumTestPatternPkts,
                    m_TestPatternGenConfigParams.TestPatternRx0ICfg1,
                    m_TestPatternGenConfigParams.TestPatternRx0ICfg2,
                    m_TestPatternGenConfigParams.TestPatternRx0QCfg1,
                    m_TestPatternGenConfigParams.TestPatternRx0QCfg2,
                    m_TestPatternGenConfigParams.TestPatternRx1ICfg1,
                    m_TestPatternGenConfigParams.TestPatternRx1ICfg2,
                    m_TestPatternGenConfigParams.TestPatternRx1QCfg1,
                    m_TestPatternGenConfigParams.TestPatternRx1QCfg2,
                    m_TestPatternGenConfigParams.TestPatternRx2ICfg1,
                    m_TestPatternGenConfigParams.TestPatternRx2ICfg2,
                    m_TestPatternGenConfigParams.TestPatternRx2QCfg1,
                    m_TestPatternGenConfigParams.TestPatternRx2QCfg2,
                    m_TestPatternGenConfigParams.TestPatternRx3ICfg1,
                    m_TestPatternGenConfigParams.TestPatternRx3ICfg2,
                    m_TestPatternGenConfigParams.TestPatternRx3QCfg1,
                    m_TestPatternGenConfigParams.TestPatternRx3QCfg2,
                    m_TestPatternGenConfigParams.Reserved
                });
                m_GuiManager.RecordLog(6, full_command3);
            }
            uint g_RadarDeviceId = GlobalRef.g_RadarDeviceId;
            num = Imports.RadarLinkImpl_DeviceSetTestPatternConfig((byte)GlobalRef.g_RadarDeviceId, inData);
            if ((num == 0 && ((GlobalRef.g_CasCadeDeviceSpiConnect & 1U) == 1U || (GlobalRef.g_CasCadeDeviceSpiConnect & 2U) == 2U || (GlobalRef.g_CasCadeDeviceSpiConnect & 4U) == 4U || (GlobalRef.g_CasCadeDeviceSpiConnect & 8U) == 8U)) || GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
            {
                string full_command4 = string.Format("Status: Passed", new object[0]);
                m_GuiManager.RecordLog(6, full_command4);
                for (int i = 0; i < 4; i++)
                {
                    if (jsonConfigInProgress)
                    {
                        break;
                    }
                    if (((ulong)g_RadarDeviceId & (ulong)(1L << (i & 31))) != 0UL)
                    {
                        int mmwaveDevIndex = getMmwaveDevIndex(i);
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rltestPattern_t.testPatGenCtrl = (int)m_TestPatternGenConfigParams.TestPatternGenCtl;
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rltestPattern_t.testPatGenTime = (int)m_TestPatternGenConfigParams.TestPatternGenTiming;
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rltestPattern_t.testPatrnPktSize = (int)m_TestPatternGenConfigParams.TestPatternPktSize;
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rltestPattern_t.numTestPtrnPkts = (int)m_TestPatternGenConfigParams.NumTestPatternPkts;
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rltestPattern_t.testPatRx0Icfg = "0x" + m_TestPatternGenConfigParams.TestPatternRx0ICfg1.ToString("X");
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rltestPattern_t.testPatRx0Qcfg = "0x" + m_TestPatternGenConfigParams.TestPatternRx0QCfg1.ToString("X");
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rltestPattern_t.testPatRx1Icfg = "0x" + m_TestPatternGenConfigParams.TestPatternRx1ICfg1.ToString("X");
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rltestPattern_t.testPatRx1Qcfg = "0x" + m_TestPatternGenConfigParams.TestPatternRx1QCfg1.ToString("X");
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rltestPattern_t.testPatRx2Icfg = "0x" + m_TestPatternGenConfigParams.TestPatternRx2ICfg1.ToString("X");
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rltestPattern_t.testPatRx2Qcfg = "0x" + m_TestPatternGenConfigParams.TestPatternRx2QCfg1.ToString("X");
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rltestPattern_t.testPatRx3Icfg = "0x" + m_TestPatternGenConfigParams.TestPatternRx3ICfg1.ToString("X");
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rltestPattern_t.testPatRx3Qcfg = "0x" + m_TestPatternGenConfigParams.TestPatternRx3QCfg1.ToString("X");
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rltestPattern_t.isConfigured = 1;
                    }
                }
            }
            else
            {
                string msg = string.Format("Status: Failed, Error Type: {0}", new object[]
                {
                    GetErrorType(num)
                });
                GlobalRef.LuaWrapper.PrintError(msg);
            }
            if (GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
            {
                if (iRs232ConnectDisconnect_impl() == 0 && !GlobalRef.g_NtvRS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
                {
                    m_GuiManager.DllOps.iConnect(1U, 0U);
                    string full_command5 = string.Format("Debug Port Reconnected!", new object[0]);
                    m_GuiManager.RecordLog(9, full_command5);
                    ScriptOps.KeepTrying(2000, new Func<bool>(spare_read));
                }
            }
            else if (GlobalRef.g_CasCadeDeviceSpiConnect == 0U)
            {
                string full_command6 = string.Format("Error Occurred in Port open close", new object[0]);
                m_GuiManager.RecordLog(9, full_command6);
            }
            return num;
        }

        private int iSetLvdsLaneConfig_Impl(bool is_starting_op, bool is_ending_op)
        {
            int num = 0;
            int result;
            try
            {
                ushort num2 = 0;
                ushort lane1En = m_DataConfigParams.lane1En;
                ushort lane2En = m_DataConfigParams.lane2En;
                ushort lane3En = m_DataConfigParams.lane3En;
                ushort lane4En = m_DataConfigParams.lane4En;
                ushort msbFirst = m_DataConfigParams.msbFirst;
                ushort endPulse = m_DataConfigParams.endPulse;
                ushort crc = m_DataConfigParams.crc;
                int f = (int)m_DataConfigParams.f000327;
                string str = "0x";
                result = ((int)msbFirst | (int)endPulse << 1 | (int)crc << 2);
                string laneParamCfg = str + result.ToString("X");
                string str2 = "0x";
                result = ((int)lane1En | (int)lane2En << 1 | (int)lane3En << 2 | (int)lane4En << 3);
                string laneEn = str2 + result.ToString("X");
                string str3 = "0x";
                result = ((int)m_DataConfigParams.CSI2DataLane0Pos | (int)m_DataConfigParams.CSI2DataLane0Pol << 3 | (int)m_DataConfigParams.CSI2DataLane1Pos << 4 | (int)m_DataConfigParams.CSI2DataLane1Pol << 7 | (int)m_DataConfigParams.CSI2DataLane2Pos << 8 | (int)m_DataConfigParams.CSI2DataLane2Pol << 11 | (int)m_DataConfigParams.CSI2DataLane3Pos << 12 | (int)m_DataConfigParams.CSI2DataLane3Pol << 15 | (int)m_DataConfigParams.CSI2ClockPos << 16 | (int)m_DataConfigParams.CSI2ClockPol << 19);
                string lanePosPolSel = str3 + result.ToString("X");
                ushort num3 = (ushort)((int)lane1En | (int)lane2En << 1 | (int)lane3En << 2 | (int)lane4En << 3);
                int num4;
                if (GlobalRef.g_NtvRS232Connect[(int)GlobalRef.g_RadarDeviceIndex] && GlobalRef.g_CasCadeDeviceSpiConnect == 0U)
                {
                    num4 = m_TsWrapper.Calling_WriteAddr_Single(4294959848U, 1U);
                    if (m_GuiManager.DllOps.itempDisconnect(false) == 0)
                    {
                        string full_command = string.Format("Debug Port Disconnected", new object[0]);
                        m_GuiManager.RecordLog(0, full_command);
                        if (!GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
                        {
                            iRs232ConnectDisconnect_impl();
                        }
                    }
                }
                if (m_DataConfigParams.DataPath == '\0')
                {
                    uint lanePosPolSel2 = (uint)((int)m_DataConfigParams.CSI2DataLane0Pos | (int)m_DataConfigParams.CSI2DataLane0Pol << 3 | (int)m_DataConfigParams.CSI2DataLane1Pos << 4 | (int)m_DataConfigParams.CSI2DataLane1Pol << 7 | (int)m_DataConfigParams.CSI2DataLane2Pos << 8 | (int)m_DataConfigParams.CSI2DataLane2Pol << 11 | (int)m_DataConfigParams.CSI2DataLane3Pos << 12 | (int)m_DataConfigParams.CSI2DataLane3Pol << 15 | (int)m_DataConfigParams.CSI2ClockPos << 16 | (int)m_DataConfigParams.CSI2ClockPol << 19);
                    if (m_RadarDeviceModeConfigParams.NumberOfRadarDevicesDetected <= 1)
                    {
                        string full_command2 = string.Format("ar1.CSI2LaneConfig({0}, {1}, {2}, {3}, {4}, {5}, {6}, {7},{8},{9})", new object[]
                        {
                            m_DataConfigParams.CSI2DataLane0Pos,
                            (int)m_DataConfigParams.CSI2DataLane0Pol,
                            m_DataConfigParams.CSI2DataLane1Pos,
                            (int)m_DataConfigParams.CSI2DataLane1Pol,
                            m_DataConfigParams.CSI2DataLane2Pos,
                            m_DataConfigParams.CSI2DataLane2Pol,
                            m_DataConfigParams.CSI2DataLane3Pos,
                            m_DataConfigParams.CSI2DataLane3Pol,
                            m_DataConfigParams.CSI2ClockPos,
                            m_DataConfigParams.CSI2ClockPol
                        });
                        m_GuiManager.RecordLog(6, full_command2);
                    }
                    else
                    {
                        string full_command3 = string.Format("ar1.CSI2LaneConfig_mult({0}, {1}, {2}, {3}, {4}, {5}, {6}, {7},{8},{9},{10})", new object[]
                        {
                            GlobalRef.g_RadarDeviceId,
                            m_DataConfigParams.CSI2DataLane0Pos,
                            (int)m_DataConfigParams.CSI2DataLane0Pol,
                            m_DataConfigParams.CSI2DataLane1Pos,
                            (int)m_DataConfigParams.CSI2DataLane1Pol,
                            m_DataConfigParams.CSI2DataLane2Pos,
                            m_DataConfigParams.CSI2DataLane2Pol,
                            m_DataConfigParams.CSI2DataLane3Pos,
                            m_DataConfigParams.CSI2DataLane3Pol,
                            m_DataConfigParams.CSI2ClockPos,
                            m_DataConfigParams.CSI2ClockPol
                        });
                        m_GuiManager.RecordLog(6, full_command3);
                    }
                    uint g_RadarDeviceId = GlobalRef.g_RadarDeviceId;
                    num4 = Imports.RadarLinkImpl_Csi2Config(GlobalRef.g_RadarDeviceId, lanePosPolSel2);
                    if ((num4 != 0 || ((GlobalRef.g_CasCadeDeviceSpiConnect & 1U) != 1U && (GlobalRef.g_CasCadeDeviceSpiConnect & 2U) != 2U && (GlobalRef.g_CasCadeDeviceSpiConnect & 4U) != 4U && (GlobalRef.g_CasCadeDeviceSpiConnect & 8U) != 8U)) && !GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
                    {
                        string full_command4 = string.Format("Status: Failed, Error Type: {0}", new object[]
                        {
                            GetErrorType(num)
                        });
                        m_GuiManager.RecordLog(6, full_command4);
                        return num4;
                    }
                    string full_command5 = string.Format("Status: Passed", new object[0]);
                    m_GuiManager.RecordLog(6, full_command5);
                    int num5 = 0;
                    while (num5 < 4 && !jsonConfigInProgress)
                    {
                        if (((ulong)g_RadarDeviceId & (ulong)(1L << (num5 & 31))) != 0UL)
                        {
                            int mmwaveDevIndex = getMmwaveDevIndex(num5);
                            GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rawDataCaptureConfig.rlDevCsi2Cfg_t.lanePosPolSel = lanePosPolSel;
                            GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rawDataCaptureConfig.rlDevCsi2Cfg_t.isConfigured = 1;
                        }
                        num5++;
                    }
                    MatlabPostProcGuiInstance.MatlabPostProcImpl_LaneConfig(15.0);
                    MatlabPostProcGuiInstance.MatlabPostProcImpl_LvdsLaneConfig(0.0, 1.0);
                }
                else
                {
                    if (m_DataConfigParams.f000327 == 0)
                    {
                        num2 = 0;
                    }
                    else if (m_DataConfigParams.f000327 == 1)
                    {
                        num2 = 1;
                    }
                    if (m_RadarDeviceModeConfigParams.NumberOfRadarDevicesDetected <= 1)
                    {
                        string full_command6 = string.Format("ar1.LVDSLaneConfig({0}, {1}, {2}, {3}, {4}, {5}, {6}, {7})", new object[]
                        {
                            m_DataConfigParams.f000327,
                            (int)lane1En,
                            (int)lane2En,
                            (int)lane3En,
                            (int)lane4En,
                            msbFirst,
                            endPulse,
                            crc
                        });
                        m_GuiManager.RecordLog(6, full_command6);
                    }
                    else
                    {
                        string full_command7 = string.Format("ar1.LVDSLaneConfig_mult({0}, {1}, {2}, {3}, {4}, {5}, {6}, {7},{8})", new object[]
                        {
                            GlobalRef.g_RadarDeviceId,
                            m_DataConfigParams.f000327,
                            (int)lane1En,
                            (int)lane2En,
                            (int)lane3En,
                            (int)lane4En,
                            msbFirst,
                            endPulse,
                            crc
                        });
                        m_GuiManager.RecordLog(6, full_command7);
                    }
                    num4 = Imports.RadarLinkImpl_LaneConfig(GlobalRef.g_RadarDeviceId, num3);
                    if ((num4 != 0 || ((GlobalRef.g_CasCadeDeviceSpiConnect & 1U) != 1U && (GlobalRef.g_CasCadeDeviceSpiConnect & 2U) != 2U && (GlobalRef.g_CasCadeDeviceSpiConnect & 4U) != 4U && (GlobalRef.g_CasCadeDeviceSpiConnect & 8U) != 8U)) && !GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
                    {
                        string msg = string.Format("Status: Failed, Error Type: {0}", new object[]
                        {
                            GetErrorType(num4)
                        });
                        GlobalRef.LuaWrapper.PrintError(msg);
                        return num4;
                    }
                    MatlabPostProcGuiInstance.MatlabPostProcImpl_LaneConfig((double)num3);
                    ushort num6 = (ushort)((int)msbFirst | (int)endPulse << 1 | (int)crc << 2);
                    uint g_RadarDeviceId2 = GlobalRef.g_RadarDeviceId;
                    num = Imports.RadarLinkImpl_LvdsLaneConfig(GlobalRef.g_RadarDeviceId, num2, num6);
                    if ((num == 0 && ((GlobalRef.g_CasCadeDeviceSpiConnect & 1U) == 1U || (GlobalRef.g_CasCadeDeviceSpiConnect & 2U) == 2U || (GlobalRef.g_CasCadeDeviceSpiConnect & 4U) == 4U || (GlobalRef.g_CasCadeDeviceSpiConnect & 8U) == 8U)) || GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
                    {
                        string full_command8 = string.Format("Status: Passed", new object[0]);
                        m_GuiManager.RecordLog(6, full_command8);
                        int num7 = 0;
                        while (num7 < 4 && !jsonConfigInProgress)
                        {
                            if (((ulong)g_RadarDeviceId2 & (ulong)(1L << (num7 & 31))) != 0UL)
                            {
                                int mmwaveDevIndex2 = getMmwaveDevIndex(num7);
                                GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex2].rawDataCaptureConfig.rlDevLvdsLaneCfg_t.laneFmtMap = f;
                                GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex2].rawDataCaptureConfig.rlDevLvdsLaneCfg_t.laneParamCfg = laneParamCfg;
                                GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex2].rawDataCaptureConfig.rlDevLaneEnable_t.laneEn = laneEn;
                                GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex2].rawDataCaptureConfig.rlDevLvdsLaneCfg_t.isConfigured = 1;
                                GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex2].rawDataCaptureConfig.rlDevLaneEnable_t.isConfigured = 1;
                            }
                            num7++;
                        }
                        MatlabPostProcGuiInstance.MatlabPostProcImpl_LvdsLaneConfig((double)(num2 & num3), (double)num6);
                    }
                    else
                    {
                        string full_command9 = string.Format("Status: Failed, Error Type: {0}", new object[]
                        {
                            GetErrorType(num)
                        });
                        m_GuiManager.RecordLog(6, full_command9);
                    }
                }
                if (GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex] && iRs232ConnectDisconnect_impl() == 0 && !GlobalRef.g_NtvRS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
                {
                    m_GuiManager.DllOps.iConnect(1U, 0U);
                    string full_command10 = string.Format("Debug Port Reconnected!", new object[0]);
                    m_GuiManager.RecordLog(9, full_command10);
                    ScriptOps.KeepTrying(2000, new Func<bool>(spare_read));
                }
                result = num4 + num;
            }
            catch (Exception ex)
            {
                m_GuiManager.Error(ex.Message, ex.StackTrace);
                result = -1;
            }
            return result;
        }

        private int iSetMSSGetDataBlockConfig_Impl(bool is_starting_op, bool is_ending_op)
        {
            MSSDataBlockConfigParam.BlockStartAddress = m_MSSGetDataBlockConfigParams.BlockStartAddress;
            MSSDataBlockConfigParam.DataLength = m_MSSGetDataBlockConfigParams.DataLength;
            MSSDataBlockConfigParam.Reserved = (m_MSSGetDataBlockConfigParams.Reserved = 0U);
            IntPtr data = GCHandle.Alloc(MSSDataBlockConfigParam, GCHandleType.Pinned).AddrOfPinnedObject();
            int num;
            if (GlobalRef.g_NtvRS232Connect[(int)GlobalRef.g_RadarDeviceIndex] && GlobalRef.g_CasCadeDeviceSpiConnect == 0U)
            {
                num = m_TsWrapper.Calling_WriteAddr_Single(4294959848U, 1U);
                if (m_GuiManager.DllOps.itempDisconnect(false) == 0)
                {
                    string full_command = string.Format("Debug Port Disconnected", new object[0]);
                    m_GuiManager.RecordLog(0, full_command);
                    if (!GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
                    {
                        iRs232ConnectDisconnect_impl();
                    }
                }
            }
            if (m_RadarDeviceModeConfigParams.NumberOfRadarDevicesDetected <= 1)
            {
                string full_command2 = string.Format("ar1.DeviceReadMemBlockConfig({0}, {1}, {2})", new object[]
                {
                    "0x" + MSSDataBlockConfigParam.BlockStartAddress.ToString("x"),
                    MSSDataBlockConfigParam.DataLength,
                    MSSDataBlockConfigParam.Reserved
                });
                m_GuiManager.RecordLog(5, full_command2);
            }
            else
            {
                string full_command3 = string.Format("ar1.DeviceReadMemBlockConfig_mult({0}, {1}, {2}, {3})", new object[]
                {
                    GlobalRef.g_RadarDeviceId,
                    "0x" + MSSDataBlockConfigParam.BlockStartAddress.ToString("x"),
                    MSSDataBlockConfigParam.DataLength,
                    MSSDataBlockConfigParam.Reserved
                });
                m_GuiManager.RecordLog(5, full_command3);
            }
            num = Imports.RadarLinkImpl_DeviceReadMemBlock((byte)GlobalRef.g_RadarDeviceId, data);
            if ((num == 0 && ((GlobalRef.g_CasCadeDeviceSpiConnect & 1U) == 1U || (GlobalRef.g_CasCadeDeviceSpiConnect & 2U) == 2U || (GlobalRef.g_CasCadeDeviceSpiConnect & 4U) == 4U || (GlobalRef.g_CasCadeDeviceSpiConnect & 8U) == 8U)) || GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
            {
                string full_command4 = string.Format("Status: Passed", new object[0]);
                m_GuiManager.RecordLog(6, full_command4);
                if (GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
                {
                    if (iRs232ConnectDisconnect_impl() == 0 && !GlobalRef.g_NtvRS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
                    {
                        m_GuiManager.DllOps.iConnect(1U, 0U);
                        string full_command5 = string.Format("Debug Port Reconnected!", new object[0]);
                        m_GuiManager.RecordLog(9, full_command5);
                        ScriptOps.KeepTrying(2000, new Func<bool>(spare_read));
                    }
                }
                else if (GlobalRef.g_CasCadeDeviceSpiConnect == 0U)
                {
                    string full_command6 = string.Format("Error Occurred in Port open close", new object[0]);
                    m_GuiManager.RecordLog(9, full_command6);
                }
                return num;
            }
            string msg = string.Format("Status: Failed, Error Type: {0}", new object[]
            {
                GetErrorType(num)
            });
            GlobalRef.LuaWrapper.PrintError(msg);
            return num;
        }

        private int iSetPerChirpPhaseShifterEnbaleConfig_Impl(bool is_starting_op, bool is_ending_op)
        {
            PerChirpPhaseShifterEnableParam.PhaseShifterEnable = m_RFMiscConfigParams.PerChirpPhaseShifterEnable;
            PerChirpPhaseShifterEnableParam.Reserved = 0U;
            IntPtr data = GCHandle.Alloc(PerChirpPhaseShifterEnableParam, GCHandleType.Pinned).AddrOfPinnedObject();
            int num;
            if (GlobalRef.g_NtvRS232Connect[(int)GlobalRef.g_RadarDeviceIndex] && GlobalRef.g_CasCadeDeviceSpiConnect == 0U)
            {
                num = m_TsWrapper.Calling_WriteAddr_Single(4294959848U, 1U);
                if (m_GuiManager.DllOps.itempDisconnect(false) == 0)
                {
                    string full_command = string.Format("Debug Port Disconnected", new object[0]);
                    m_GuiManager.RecordLog(0, full_command);
                    if (!GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
                    {
                        iRs232ConnectDisconnect_impl();
                    }
                }
            }
            if (m_RadarDeviceModeConfigParams.NumberOfRadarDevicesDetected <= 1)
            {
                string full_command2 = string.Format("ar1.SetMiscConfig({0})", new object[]
                {
                    m_RFMiscConfigParams.PerChirpPhaseShifterEnable
                });
                m_GuiManager.RecordLog(6, full_command2);
            }
            else
            {
                string full_command3 = string.Format("ar1.SetMiscConfig_mult({0},{1})", new object[]
                {
                    GlobalRef.g_RadarDeviceId,
                    m_RFMiscConfigParams.PerChirpPhaseShifterEnable
                });
                m_GuiManager.RecordLog(6, full_command3);
            }
            uint g_RadarDeviceId = GlobalRef.g_RadarDeviceId;
            num = Imports.RadarLinkImpl_SetMiscConfig(GlobalRef.g_RadarDeviceId, data);
            if ((num == 0 && ((GlobalRef.g_CasCadeDeviceSpiConnect & 1U) == 1U || (GlobalRef.g_CasCadeDeviceSpiConnect & 2U) == 2U || (GlobalRef.g_CasCadeDeviceSpiConnect & 4U) == 4U || (GlobalRef.g_CasCadeDeviceSpiConnect & 8U) == 8U)) || GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
            {
                string full_command4 = string.Format("Status: Passed", new object[0]);
                m_GuiManager.RecordLog(6, full_command4);
                for (int i = 0; i < 4; i++)
                {
                    if (jsonConfigInProgress)
                    {
                        break;
                    }
                    if (((ulong)g_RadarDeviceId & (ulong)(1L << (i & 31))) != 0UL)
                    {
                        int mmwaveDevIndex = getMmwaveDevIndex(i);
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlRfMiscConf_t.miscCtl = PerChirpPhaseShifterEnableParam.PhaseShifterEnable.ToString();
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlRfMiscConf_t.isConfigured = 1;
                    }
                }
            }
            else
            {
                string msg = string.Format("Status: Failed, Error Type: {0}", new object[]
                {
                    GetErrorType(num)
                });
                GlobalRef.LuaWrapper.PrintError(msg);
            }
            if (GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
            {
                if (iRs232ConnectDisconnect_impl() == 0 && !GlobalRef.g_NtvRS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
                {
                    m_GuiManager.DllOps.iConnect(1U, 0U);
                    string full_command5 = string.Format("Debug Port Reconnected!", new object[0]);
                    m_GuiManager.RecordLog(9, full_command5);
                    ScriptOps.KeepTrying(2000, new Func<bool>(spare_read));
                }
            }
            else if (GlobalRef.g_CasCadeDeviceSpiConnect == 0U)
            {
                string full_command6 = string.Format("Error Occurred in Port open close", new object[0]);
                m_GuiManager.RecordLog(9, full_command6);
            }
            return num;
        }

        private int iSetFrequencyLimitConfig_Impl(bool is_starting_op, bool is_ending_op)
        {
            FreqLimitConfigurationParam.FreqLimitHigh = (ushort)(m_RFCalibFrequencyLimitConfigParameters.FreqLimitHigh * 10.0);
            FreqLimitConfigurationParam.FreqLimitLow = (ushort)(m_RFCalibFrequencyLimitConfigParameters.FreqLimitLow * 10.0);
            FreqLimitConfigurationParam.Reserved0 = 0U;
            FreqLimitConfigurationParam.Reserved1 = 0U;
            IntPtr data = GCHandle.Alloc(FreqLimitConfigurationParam, GCHandleType.Pinned).AddrOfPinnedObject();
            int num;
            if (GlobalRef.g_NtvRS232Connect[(int)GlobalRef.g_RadarDeviceIndex] && GlobalRef.g_CasCadeDeviceSpiConnect == 0U)
            {
                num = m_TsWrapper.Calling_WriteAddr_Single(4294959848U, 1U);
                if (m_GuiManager.DllOps.itempDisconnect(false) == 0)
                {
                    string full_command = string.Format("Debug Port Disconnected", new object[0]);
                    m_GuiManager.RecordLog(0, full_command);
                    if (!GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
                    {
                        iRs232ConnectDisconnect_impl();
                    }
                }
            }
            if (m_RadarDeviceModeConfigParams.NumberOfRadarDevicesDetected <= 1)
            {
                string full_command2 = string.Format("ar1.SetCalMonFreqLimitConfig({0},{1})", new object[]
                {
                    m_RFCalibFrequencyLimitConfigParameters.FreqLimitLow,
                    m_RFCalibFrequencyLimitConfigParameters.FreqLimitHigh
                });
                m_GuiManager.RecordLog(6, full_command2);
            }
            else
            {
                string full_command3 = string.Format("ar1.SetCalMonFreqLimitConfig_mult({0},{1},{2})", new object[]
                {
                    GlobalRef.g_RadarDeviceId,
                    m_RFCalibFrequencyLimitConfigParameters.FreqLimitLow,
                    m_RFCalibFrequencyLimitConfigParameters.FreqLimitHigh
                });
                m_GuiManager.RecordLog(6, full_command3);
            }
            uint g_RadarDeviceId = GlobalRef.g_RadarDeviceId;
            num = Imports.RadarLinkImpl_SetCalMonFreqLimitConfig(GlobalRef.g_RadarDeviceId, data);
            if ((num == 0 && ((GlobalRef.g_CasCadeDeviceSpiConnect & 1U) == 1U || (GlobalRef.g_CasCadeDeviceSpiConnect & 2U) == 2U || (GlobalRef.g_CasCadeDeviceSpiConnect & 4U) == 4U || (GlobalRef.g_CasCadeDeviceSpiConnect & 8U) == 8U)) || GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
            {
                string full_command4 = string.Format("Status: Passed", new object[0]);
                m_GuiManager.RecordLog(6, full_command4);
                for (int i = 0; i < 4; i++)
                {
                    if (jsonConfigInProgress)
                    {
                        break;
                    }
                    if (((ulong)g_RadarDeviceId & (ulong)(1L << (i & 31))) != 0UL)
                    {
                        int mmwaveDevIndex = getMmwaveDevIndex(i);
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlRfCalMonFreqLimitConf_t.freqLimitLow_GHz = m_RFCalibFrequencyLimitConfigParameters.FreqLimitLow;
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlRfCalMonFreqLimitConf_t.freqLimitHigh_GHz = m_RFCalibFrequencyLimitConfigParameters.FreqLimitHigh;
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlRfCalMonFreqLimitConf_t.isConfigured = 1;
                    }
                }
            }
            else
            {
                string msg = string.Format("Status: Failed, Error Type: {0}", new object[]
                {
                    GetErrorType(num)
                });
                GlobalRef.LuaWrapper.PrintError(msg);
            }
            if (GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
            {
                if (iRs232ConnectDisconnect_impl() == 0 && !GlobalRef.g_NtvRS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
                {
                    m_GuiManager.DllOps.iConnect(1U, 0U);
                    string full_command5 = string.Format("Debug Port Reconnected!", new object[0]);
                    m_GuiManager.RecordLog(9, full_command5);
                    ScriptOps.KeepTrying(2000, new Func<bool>(spare_read));
                }
            }
            else if (GlobalRef.g_CasCadeDeviceSpiConnect == 0U)
            {
                string full_command6 = string.Format("Error Occurred in Port open close", new object[0]);
                m_GuiManager.RecordLog(9, full_command6);
            }
            return num;
        }

        private int iSetRFDeviceAEDirectionControlConfig_Impl(bool is_starting_op, bool is_ending_op)
        {
            RFDeviceAEDirectionControlParam.RFAEDirection = (uint)((ushort)(m_RFDeviceAEControlConfigParameters.f0002fd | m_RFDeviceAEControlConfigParameters.RFMonAEDirection << 2));
            RFDeviceAEDirectionControlParam.AEControl = (byte)((int)m_RFDeviceAEControlConfigParameters.AEFrameStartControl | (int)m_RFDeviceAEControlConfigParameters.AEFrameStopControl << 1);
            RFDeviceAEDirectionControlParam.Reserved = 0;
            RFDeviceAEDirectionControlParam.Reserved2 = 0;
            RFDeviceAEDirectionControlParam.BSSDigitalControl = m_RFDeviceAEControlConfigParameters.BSSDigitalControl;
            RFDeviceAEDirectionControlParam.AsyncEventCRCConfig = m_RFDeviceAEControlConfigParameters.AsyncEventCRCConfig;
            RFDeviceAEDirectionControlParam.Reserved3 = 0;
            RFDeviceAEDirectionControlParam.Reserved4 = 0;
            IntPtr data = GCHandle.Alloc(RFDeviceAEDirectionControlParam, GCHandleType.Pinned).AddrOfPinnedObject();
            int num;
            if (GlobalRef.g_NtvRS232Connect[(int)GlobalRef.g_RadarDeviceIndex] && GlobalRef.g_CasCadeDeviceSpiConnect == 0U)
            {
                num = m_TsWrapper.Calling_WriteAddr_Single(4294959848U, 1U);
                if (m_GuiManager.DllOps.itempDisconnect(false) == 0)
                {
                    string full_command = string.Format("Debug Port Disconnected", new object[0]);
                    m_GuiManager.RecordLog(0, full_command);
                    if (!GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
                    {
                        iRs232ConnectDisconnect_impl();
                    }
                }
            }
            if (m_RadarDeviceModeConfigParams.NumberOfRadarDevicesDetected <= 1)
            {
                string full_command2 = string.Format("ar1.SetRFDeviceConfig({0}, {1}, {2}, {3}, {4}, {5}, {6})", new object[]
                {
                    RFDeviceAEDirectionControlParam.RFAEDirection,
                    RFDeviceAEDirectionControlParam.AEControl,
                    RFDeviceAEDirectionControlParam.Reserved,
                    RFDeviceAEDirectionControlParam.BSSDigitalControl,
                    RFDeviceAEDirectionControlParam.AsyncEventCRCConfig,
                    RFDeviceAEDirectionControlParam.Reserved3,
                    RFDeviceAEDirectionControlParam.Reserved4
                });
                m_GuiManager.RecordLog(6, full_command2);
            }
            else
            {
                string full_command3 = string.Format("ar1.SetRFDeviceConfig_mult({0}, {1}, {2}, {3}, {4}, {5}, {6}, {7})", new object[]
                {
                    GlobalRef.g_RadarDeviceId,
                    RFDeviceAEDirectionControlParam.RFAEDirection,
                    RFDeviceAEDirectionControlParam.AEControl,
                    RFDeviceAEDirectionControlParam.Reserved,
                    RFDeviceAEDirectionControlParam.BSSDigitalControl,
                    RFDeviceAEDirectionControlParam.AsyncEventCRCConfig,
                    RFDeviceAEDirectionControlParam.Reserved3,
                    RFDeviceAEDirectionControlParam.Reserved4
                });
                m_GuiManager.RecordLog(6, full_command3);
            }
            uint g_RadarDeviceId = GlobalRef.g_RadarDeviceId;
            num = Imports.RadarLinkImpl_SetRfDevConfig(GlobalRef.g_RadarDeviceId, data);
            if ((num == 0 && ((GlobalRef.g_CasCadeDeviceSpiConnect & 1U) == 1U || (GlobalRef.g_CasCadeDeviceSpiConnect & 2U) == 2U || (GlobalRef.g_CasCadeDeviceSpiConnect & 4U) == 4U || (GlobalRef.g_CasCadeDeviceSpiConnect & 8U) == 8U)) || GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
            {
                string full_command4 = string.Format("Status: Passed", new object[0]);
                m_GuiManager.RecordLog(6, full_command4);
                for (int i = 0; i < 4; i++)
                {
                    if (jsonConfigInProgress)
                    {
                        break;
                    }
                    if (((ulong)g_RadarDeviceId & (ulong)(1L << (i & 31))) != 0UL)
                    {
                        int mmwaveDevIndex = getMmwaveDevIndex(i);
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.p000013.aeDirection = "0x" + RFDeviceAEDirectionControlParam.RFAEDirection.ToString("X");
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.p000013.aeControl = "0x" + RFDeviceAEDirectionControlParam.AEControl.ToString("X");
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.p000013.p000009 = (int)RFDeviceAEDirectionControlParam.BSSDigitalControl;
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.p000013.p00000a = (int)RFDeviceAEDirectionControlParam.AsyncEventCRCConfig;
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.p000013.isConfigured = 1;
                    }
                }
            }
            else
            {
                string msg = string.Format("Status: Failed, Error Type: {0}", new object[]
                {
                    GetErrorType(num)
                });
                GlobalRef.LuaWrapper.PrintError(msg);
            }
            if (GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
            {
                if (iRs232ConnectDisconnect_impl() == 0 && !GlobalRef.g_NtvRS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
                {
                    m_GuiManager.DllOps.iConnect(1U, 0U);
                    string full_command5 = string.Format("Debug Port Reconnected!", new object[0]);
                    m_GuiManager.RecordLog(9, full_command5);
                    ScriptOps.KeepTrying(2000, new Func<bool>(spare_read));
                }
            }
            else if (GlobalRef.g_CasCadeDeviceSpiConnect == 0U)
            {
                string full_command6 = string.Format("Error Occurred in Port open close", new object[0]);
                m_GuiManager.RecordLog(9, full_command6);
            }
            return num;
        }

        private int iSetCalMonFreqTxPowerLimitConfig_Impl(bool is_starting_op, bool is_ending_op)
        {
            CalMonFreqTxPowerLimitConfigurationParam.FreqLimitLowTx1 = (ushort)(m_CalMonFrequencyTxPowerLimitConfigParameters.FreqLimitLowTx1 * 100.0);
            CalMonFreqTxPowerLimitConfigurationParam.FreqLimitLowTx2 = (ushort)(m_CalMonFrequencyTxPowerLimitConfigParameters.FreqLimitLowTx2 * 100.0);
            CalMonFreqTxPowerLimitConfigurationParam.FreqLimitLowTx3 = (ushort)(m_CalMonFrequencyTxPowerLimitConfigParameters.FreqLimitLowTx3 * 100.0);
            CalMonFreqTxPowerLimitConfigurationParam.FreqLimitHighTx1 = (ushort)(m_CalMonFrequencyTxPowerLimitConfigParameters.FreqLimitHighTx1 * 100.0);
            CalMonFreqTxPowerLimitConfigurationParam.FreqLimitHighTx2 = (ushort)(m_CalMonFrequencyTxPowerLimitConfigParameters.FreqLimitHighTx2 * 100.0);
            CalMonFreqTxPowerLimitConfigurationParam.FreqLimitHighTx3 = (ushort)(m_CalMonFrequencyTxPowerLimitConfigParameters.FreqLimitHighTx3 * 100.0);
            CalMonFreqTxPowerLimitConfigurationParam.Tx1PowerBackoff = (byte)m_CalMonFrequencyTxPowerLimitConfigParameters.Tx1PowerBackoff;
            CalMonFreqTxPowerLimitConfigurationParam.Tx2PowerBackoff = (byte)m_CalMonFrequencyTxPowerLimitConfigParameters.Tx2PowerBackoff;
            CalMonFreqTxPowerLimitConfigurationParam.Tx3PowerBackoff = (byte)m_CalMonFrequencyTxPowerLimitConfigParameters.Tx3PowerBackoff;
            CalMonFreqTxPowerLimitConfigurationParam.Reserved = 0;
            CalMonFreqTxPowerLimitConfigurationParam.Reserved2 = 0;
            CalMonFreqTxPowerLimitConfigurationParam.Reserved3 = 0;
            CalMonFreqTxPowerLimitConfigurationParam.Reserved4 = 0;
            CalMonFreqTxPowerLimitConfigurationParam.Reserved5 = 0;
            IntPtr data = GCHandle.Alloc(CalMonFreqTxPowerLimitConfigurationParam, GCHandleType.Pinned).AddrOfPinnedObject();
            int num;
            if (GlobalRef.g_NtvRS232Connect[(int)GlobalRef.g_RadarDeviceIndex] && GlobalRef.g_CasCadeDeviceSpiConnect == 0U)
            {
                num = m_TsWrapper.Calling_WriteAddr_Single(4294959848U, 1U);
                if (m_GuiManager.DllOps.itempDisconnect(false) == 0)
                {
                    string full_command = string.Format("Debug Port Disconnected", new object[0]);
                    m_GuiManager.RecordLog(0, full_command);
                    if (!GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
                    {
                        iRs232ConnectDisconnect_impl();
                    }
                }
            }
            if (m_RadarDeviceModeConfigParams.NumberOfRadarDevicesDetected <= 1)
            {
                string full_command2 = string.Format("ar1.RfSetCalMonFreqTxPowLimitConfig({0}, {1}, {2}, {3}, {4}, {5}, {6}, {7}, {8})", new object[]
                {
                    m_CalMonFrequencyTxPowerLimitConfigParameters.FreqLimitLowTx1,
                    m_CalMonFrequencyTxPowerLimitConfigParameters.FreqLimitLowTx2,
                    m_CalMonFrequencyTxPowerLimitConfigParameters.FreqLimitLowTx3,
                    m_CalMonFrequencyTxPowerLimitConfigParameters.FreqLimitHighTx1,
                    m_CalMonFrequencyTxPowerLimitConfigParameters.FreqLimitHighTx2,
                    m_CalMonFrequencyTxPowerLimitConfigParameters.FreqLimitHighTx3,
                    m_CalMonFrequencyTxPowerLimitConfigParameters.Tx1PowerBackoff,
                    m_CalMonFrequencyTxPowerLimitConfigParameters.Tx2PowerBackoff,
                    m_CalMonFrequencyTxPowerLimitConfigParameters.Tx3PowerBackoff
                });
                m_GuiManager.RecordLog(6, full_command2);
            }
            else
            {
                string full_command3 = string.Format("ar1.RfSetCalMonFreqTxPowLimitConfig_mult({0}, {1}, {2}, {3}, {4}, {5}, {6}, {7}, {8}, {9})", new object[]
                {
                    GlobalRef.g_RadarDeviceId,
                    m_CalMonFrequencyTxPowerLimitConfigParameters.FreqLimitLowTx1,
                    m_CalMonFrequencyTxPowerLimitConfigParameters.FreqLimitLowTx2,
                    m_CalMonFrequencyTxPowerLimitConfigParameters.FreqLimitLowTx3,
                    m_CalMonFrequencyTxPowerLimitConfigParameters.FreqLimitHighTx1,
                    m_CalMonFrequencyTxPowerLimitConfigParameters.FreqLimitHighTx2,
                    m_CalMonFrequencyTxPowerLimitConfigParameters.FreqLimitHighTx3,
                    m_CalMonFrequencyTxPowerLimitConfigParameters.Tx1PowerBackoff,
                    m_CalMonFrequencyTxPowerLimitConfigParameters.Tx2PowerBackoff,
                    m_CalMonFrequencyTxPowerLimitConfigParameters.Tx3PowerBackoff
                });
                m_GuiManager.RecordLog(6, full_command3);
            }
            uint g_RadarDeviceId = GlobalRef.g_RadarDeviceId;
            num = Imports.RadarLinkImpl_RfTxFreqPwrLimitConfig(GlobalRef.g_RadarDeviceId, data);
            if ((num == 0 && ((GlobalRef.g_CasCadeDeviceSpiConnect & 1U) == 1U || (GlobalRef.g_CasCadeDeviceSpiConnect & 2U) == 2U || (GlobalRef.g_CasCadeDeviceSpiConnect & 4U) == 4U || (GlobalRef.g_CasCadeDeviceSpiConnect & 8U) == 8U)) || GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
            {
                string full_command4 = string.Format("Status: Passed", new object[0]);
                m_GuiManager.RecordLog(6, full_command4);
                for (int i = 0; i < 4; i++)
                {
                    if (jsonConfigInProgress)
                    {
                        break;
                    }
                    if (((ulong)g_RadarDeviceId & (ulong)(1L << (i & 31))) != 0UL)
                    {
                        int mmwaveDevIndex = getMmwaveDevIndex(i);
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlRfTxFreqPwrLimitMonConf_t.freqLimitLowTx0 = m_CalMonFrequencyTxPowerLimitConfigParameters.FreqLimitLowTx1;
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlRfTxFreqPwrLimitMonConf_t.freqLimitLowTx1 = m_CalMonFrequencyTxPowerLimitConfigParameters.FreqLimitLowTx2;
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlRfTxFreqPwrLimitMonConf_t.freqLimitLowTx2 = m_CalMonFrequencyTxPowerLimitConfigParameters.FreqLimitLowTx3;
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlRfTxFreqPwrLimitMonConf_t.freqLimitHighTx0 = m_CalMonFrequencyTxPowerLimitConfigParameters.FreqLimitHighTx1;
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlRfTxFreqPwrLimitMonConf_t.freqLimitHighTx1 = m_CalMonFrequencyTxPowerLimitConfigParameters.FreqLimitHighTx2;
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlRfTxFreqPwrLimitMonConf_t.freqLimitHighTx2 = m_CalMonFrequencyTxPowerLimitConfigParameters.FreqLimitHighTx3;
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlRfTxFreqPwrLimitMonConf_t.tx0PwrBackOff = (int)CalMonFreqTxPowerLimitConfigurationParam.Tx1PowerBackoff;
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlRfTxFreqPwrLimitMonConf_t.tx1PwrBackOff = (int)CalMonFreqTxPowerLimitConfigurationParam.Tx2PowerBackoff;
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlRfTxFreqPwrLimitMonConf_t.tx2PwrBackOff = (int)CalMonFreqTxPowerLimitConfigurationParam.Tx3PowerBackoff;
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlRfTxFreqPwrLimitMonConf_t.isConfigured = 1;
                    }
                }
            }
            else
            {
                string msg = string.Format("Status: Failed, Error Type: {0}", new object[]
                {
                    GetErrorType(num)
                });
                GlobalRef.LuaWrapper.PrintError(msg);
            }
            if (GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
            {
                if (iRs232ConnectDisconnect_impl() == 0 && !GlobalRef.g_NtvRS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
                {
                    m_GuiManager.DllOps.iConnect(1U, 0U);
                    string full_command5 = string.Format("Debug Port Reconnected!", new object[0]);
                    m_GuiManager.RecordLog(9, full_command5);
                    ScriptOps.KeepTrying(2000, new Func<bool>(spare_read));
                }
            }
            else if (GlobalRef.g_CasCadeDeviceSpiConnect == 0U)
            {
                string full_command6 = string.Format("Error Occurred in Port open close", new object[0]);
                m_GuiManager.RecordLog(9, full_command6);
            }
            return num;
        }

        private int iSetTimeUnitConfig_Impl(bool is_starting_op, bool is_ending_op)
        {
            int num = NumberDevices();
            TimeUnitConfigurationParam.CalinMonTimeUnit = m_TimeUnitConfigParameters.CalinMonTimeUnit;
            TimeUnitConfigurationParam.NumOfCascadeDevices = (byte)m_TimeUnitConfigParameters.NumOfCascadeDevices;
            TimeUnitConfigurationParam.DevId = (byte)m_TimeUnitConfigParameters.DevId;
            TimeUnitConfigurationParam.Reserved = 0U;
            if (num == 1 && TimeUnitConfigurationParam.NumOfCascadeDevices != 1)
            {
                MessageBox.Show("Error : The number of devices connected is " + num.ToString() + ". Please check the configuration provided!");
                return -1;
            }
            IntPtr data = GCHandle.Alloc(TimeUnitConfigurationParam, GCHandleType.Pinned).AddrOfPinnedObject();
            int num2;
            if (GlobalRef.g_NtvRS232Connect[(int)GlobalRef.g_RadarDeviceIndex] && GlobalRef.g_CasCadeDeviceSpiConnect == 0U)
            {
                num2 = m_TsWrapper.Calling_WriteAddr_Single(4294959848U, 1U);
                if (m_GuiManager.DllOps.itempDisconnect(false) == 0)
                {
                    string full_command = string.Format("Debug Port Disconnected", new object[0]);
                    m_GuiManager.RecordLog(0, full_command);
                    if (!GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
                    {
                        iRs232ConnectDisconnect_impl();
                    }
                }
            }
            if (m_RadarDeviceModeConfigParams.NumberOfRadarDevicesDetected <= 1)
            {
                string full_command2 = string.Format("ar1.SetCalMonTimeUnitConfig({0}, {1}, {2})", new object[]
                {
                    m_TimeUnitConfigParameters.CalinMonTimeUnit,
                    m_TimeUnitConfigParameters.NumOfCascadeDevices,
                    m_TimeUnitConfigParameters.DevId
                });
                m_GuiManager.RecordLog(6, full_command2);
            }
            else
            {
                string full_command3 = string.Format("ar1.SetCalMonTimeUnitConfig_mult({0}, {1}, {2}, {3})", new object[]
                {
                    GlobalRef.g_RadarDeviceId,
                    m_TimeUnitConfigParameters.CalinMonTimeUnit,
                    m_TimeUnitConfigParameters.NumOfCascadeDevices,
                    m_TimeUnitConfigParameters.DevId
                });
                m_GuiManager.RecordLog(6, full_command3);
            }
            uint g_RadarDeviceId = GlobalRef.g_RadarDeviceId;
            num2 = Imports.RadarLinkImpl_SetCalMonTimeUnitConfig(GlobalRef.g_RadarDeviceId, data);
            if ((num2 == 0 && ((GlobalRef.g_CasCadeDeviceSpiConnect & 1U) == 1U || (GlobalRef.g_CasCadeDeviceSpiConnect & 2U) == 2U || (GlobalRef.g_CasCadeDeviceSpiConnect & 4U) == 4U || (GlobalRef.g_CasCadeDeviceSpiConnect & 8U) == 8U)) || GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
            {
                string full_command4 = string.Format("Status: Passed", new object[0]);
                m_GuiManager.RecordLog(6, full_command4);
                for (int i = 0; i < 4; i++)
                {
                    if (jsonConfigInProgress)
                    {
                        break;
                    }
                    if (((ulong)g_RadarDeviceId & (ulong)(1L << (i & 31))) != 0UL)
                    {
                        int mmwaveDevIndex = getMmwaveDevIndex(i);
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlRfCalMonTimeUntConf_t.calibMonTimeUnit = (int)TimeUnitConfigurationParam.CalinMonTimeUnit;
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlRfCalMonTimeUntConf_t.isConfigured = 1;
                    }
                }
            }
            else
            {
                string msg = string.Format("Status: Failed, Error Type: {0}", new object[]
                {
                    GetErrorType(num2)
                });
                GlobalRef.LuaWrapper.PrintError(msg);
            }
            if (GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
            {
                if (iRs232ConnectDisconnect_impl() == 0 && !GlobalRef.g_NtvRS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
                {
                    m_GuiManager.DllOps.iConnect(1U, 0U);
                    string full_command5 = string.Format("Debug Port Reconnected!", new object[0]);
                    m_GuiManager.RecordLog(9, full_command5);
                    ScriptOps.KeepTrying(2000, new Func<bool>(spare_read));
                }
            }
            else if (GlobalRef.g_CasCadeDeviceSpiConnect == 0U)
            {
                string full_command6 = string.Format("Error Occurred in Port open close", new object[0]);
                m_GuiManager.RecordLog(9, full_command6);
            }
            return num2;
        }

        private int iSetMonitoringModeConfig_Impl(bool is_starting_op, bool is_ending_op)
        {
            int num = -1;
            MonitoringModeConfigurationParam.ReportingMode = (byte)m_MonitoringModeConfigParameters.ReportingMode;
            MonitoringModeConfigurationParam.Reserved = 0;
            MonitoringModeConfigurationParam.Reserved2 = 0;
            GCHandle.Alloc(MonitoringModeConfigurationParam, GCHandleType.Pinned).AddrOfPinnedObject();
            if (GlobalRef.g_NtvRS232Connect[(int)GlobalRef.g_RadarDeviceIndex] && !GlobalRef.g_SpiConnect[(int)GlobalRef.g_RadarDeviceIndex])
            {
                num = m_TsWrapper.Calling_WriteAddr_Single(4294959848U, 1U);
                if (m_GuiManager.DllOps.itempDisconnect(false) == 0)
                {
                    string full_command = string.Format("Debug Port Disconnected", new object[0]);
                    m_GuiManager.RecordLog(0, full_command);
                    if (!GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
                    {
                        iRs232ConnectDisconnect_impl();
                    }
                }
            }
            if (m_RadarDeviceModeConfigParams.NumberOfRadarDevicesDetected <= 1)
            {
                string full_command2 = string.Format("ar1.SetCalMonTimeUnitConfig({0}, {1}, {2})", new object[]
                {
                    m_TimeUnitConfigParameters.CalinMonTimeUnit,
                    m_TimeUnitConfigParameters.NumOfCascadeDevices,
                    m_TimeUnitConfigParameters.DevId
                });
                m_GuiManager.RecordLog(6, full_command2);
            }
            else
            {
                string full_command3 = string.Format("ar1.SetCalMonTimeUnitConfig_mult({0}, {1}, {2}, {3})", new object[]
                {
                    GlobalRef.g_RadarDeviceId,
                    m_TimeUnitConfigParameters.CalinMonTimeUnit,
                    m_TimeUnitConfigParameters.NumOfCascadeDevices,
                    m_TimeUnitConfigParameters.DevId
                });
                m_GuiManager.RecordLog(6, full_command3);
            }
            if ((num == 0 && GlobalRef.g_SpiConnect[(int)GlobalRef.g_RadarDeviceIndex]) || GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
            {
                string full_command4 = string.Format("Status: Passed", new object[0]);
                m_GuiManager.RecordLog(6, full_command4);
            }
            else
            {
                string msg = string.Format("Status: Failed, Error Type: {0}", new object[]
                {
                    GetErrorType(num)
                });
                GlobalRef.LuaWrapper.PrintError(msg);
            }
            if (GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
            {
                if (iRs232ConnectDisconnect_impl() == 0 && !GlobalRef.g_NtvRS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
                {
                    m_GuiManager.DllOps.iConnect(1U, 0U);
                    string full_command5 = string.Format("Debug Port Reconnected!", new object[0]);
                    m_GuiManager.RecordLog(9, full_command5);
                    ScriptOps.KeepTrying(2000, new Func<bool>(spare_read));
                }
            }
            else if (!GlobalRef.g_SpiConnect[(int)GlobalRef.g_RadarDeviceIndex])
            {
                string full_command6 = string.Format("Error Occurred in Port open close", new object[0]);
                m_GuiManager.RecordLog(9, full_command6);
            }
            return num;
        }

        private int iSetTX1PowerMonConfig_Impl(bool is_starting_op, bool is_ending_op)
        {
            ScriptOps.Tx1Tx2Tx3PowerMonitoringConfiguration1Param.ProfileIndex = 0;
            ScriptOps.Tx1Tx2Tx3PowerMonitoringConfiguration1Param.RFFreqBitMask = 0;
            ScriptOps.Tx1Tx2Tx3PowerMonitoringConfiguration1Param.Reserved = 0;
            ScriptOps.Tx1Tx2Tx3PowerMonitoringConfiguration1Param.ReportingMode = 0;
            ScriptOps.Tx1Tx2Tx3PowerMonitoringConfiguration1Param.TxPowerAbsoluteErrorThreshold = 0;
            ScriptOps.Tx1Tx2Tx3PowerMonitoringConfiguration1Param.TxPowerFlatnessErrorThreshold = 0;
            ScriptOps.Tx1Tx2Tx3PowerMonitoringConfiguration1Param.Reserved2 = 0;
            ScriptOps.Tx1Tx2Tx3PowerMonitoringConfiguration1Param.Reserved3 = 0U;
            ScriptOps.Tx1Tx2Tx3PowerMonitoringConfiguration2Param.ProfileIndex = 0;
            ScriptOps.Tx1Tx2Tx3PowerMonitoringConfiguration2Param.RFFreqBitMask = 0;
            ScriptOps.Tx1Tx2Tx3PowerMonitoringConfiguration2Param.Reserved = 0;
            ScriptOps.Tx1Tx2Tx3PowerMonitoringConfiguration2Param.ReportingMode = 0;
            ScriptOps.Tx1Tx2Tx3PowerMonitoringConfiguration2Param.TxPowerAbsoluteErrorThreshold = 0;
            ScriptOps.Tx1Tx2Tx3PowerMonitoringConfiguration2Param.TxPowerFlatnessErrorThreshold = 0;
            ScriptOps.Tx1Tx2Tx3PowerMonitoringConfiguration2Param.Reserved2 = 0;
            ScriptOps.Tx1Tx2Tx3PowerMonitoringConfiguration2Param.Reserved3 = 0U;
            ScriptOps.Tx1Tx2Tx3PowerMonitoringConfiguration3Param.ProfileIndex = 0;
            ScriptOps.Tx1Tx2Tx3PowerMonitoringConfiguration3Param.RFFreqBitMask = 0;
            ScriptOps.Tx1Tx2Tx3PowerMonitoringConfiguration3Param.Reserved = 0;
            ScriptOps.Tx1Tx2Tx3PowerMonitoringConfiguration3Param.ReportingMode = 0;
            ScriptOps.Tx1Tx2Tx3PowerMonitoringConfiguration3Param.TxPowerAbsoluteErrorThreshold = 0;
            ScriptOps.Tx1Tx2Tx3PowerMonitoringConfiguration3Param.TxPowerFlatnessErrorThreshold = 0;
            ScriptOps.Tx1Tx2Tx3PowerMonitoringConfiguration3Param.Reserved2 = 0;
            ScriptOps.Tx1Tx2Tx3PowerMonitoringConfiguration3Param.Reserved3 = 0U;
            ScriptOps.Tx1Tx2Tx3PowerMonitoringConfiguration1Param.ProfileIndex = (byte)m_MonTX1PowerConfigParameters.ProfileIndex;
            ScriptOps.Tx1Tx2Tx3PowerMonitoringConfiguration1Param.RFFreqBitMask = (byte)(m_MonTX1PowerConfigParameters.RF1FreqBitMask | m_MonTX1PowerConfigParameters.RF2FreqBitMask << 1 | m_MonTX1PowerConfigParameters.RF3FreqBitMask << 2);
            ScriptOps.Tx1Tx2Tx3PowerMonitoringConfiguration1Param.Reserved = 0;
            ScriptOps.Tx1Tx2Tx3PowerMonitoringConfiguration1Param.ReportingMode = (byte)m_MonTX1PowerConfigParameters.ReportingMode;
            ScriptOps.Tx1Tx2Tx3PowerMonitoringConfiguration1Param.TxPowerAbsoluteErrorThreshold = (ushort)(m_MonTX1PowerConfigParameters.TxPowerAbsoluteErrorThreshold * 10.0);
            ScriptOps.Tx1Tx2Tx3PowerMonitoringConfiguration1Param.TxPowerFlatnessErrorThreshold = (ushort)(m_MonTX1PowerConfigParameters.TxPowerFlatnessErrorThreshold * 10.0);
            ScriptOps.Tx1Tx2Tx3PowerMonitoringConfiguration1Param.Reserved2 = 0;
            ScriptOps.Tx1Tx2Tx3PowerMonitoringConfiguration1Param.Reserved3 = 0U;
            IntPtr pTX1PowerMonitoringConfigurationData = GCHandle.Alloc(ScriptOps.Tx1Tx2Tx3PowerMonitoringConfiguration1Param, GCHandleType.Pinned).AddrOfPinnedObject();
            GCHandle.Alloc(ScriptOps.Tx1Tx2Tx3PowerMonitoringConfiguration2Param, GCHandleType.Pinned).AddrOfPinnedObject();
            GCHandle.Alloc(ScriptOps.Tx1Tx2Tx3PowerMonitoringConfiguration3Param, GCHandleType.Pinned).AddrOfPinnedObject();
            ScriptOps.Tx1Tx2Tx3PowerMonitoringConfiguration2NewParam.pTX1PowerMonitoringConfigurationData = pTX1PowerMonitoringConfigurationData;
            ScriptOps.Tx1Tx2Tx3PowerMonitoringConfiguration2NewParam.pTX2PowerMonitoringConfigurationData = IntPtr.Zero;
            ScriptOps.Tx1Tx2Tx3PowerMonitoringConfiguration2NewParam.pTX3PowerMonitoringConfigurationData = IntPtr.Zero;
            IntPtr data = GCHandle.Alloc(ScriptOps.Tx1Tx2Tx3PowerMonitoringConfiguration2NewParam, GCHandleType.Pinned).AddrOfPinnedObject();
            int num;
            if (GlobalRef.g_NtvRS232Connect[(int)GlobalRef.g_RadarDeviceIndex] && GlobalRef.g_CasCadeDeviceSpiConnect == 0U)
            {
                num = m_TsWrapper.Calling_WriteAddr_Single(4294959848U, 1U);
                if (m_GuiManager.DllOps.itempDisconnect(false) == 0)
                {
                    string full_command = string.Format("Debug Port Disconnected", new object[0]);
                    m_GuiManager.RecordLog(0, full_command);
                    if (!GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
                    {
                        iRs232ConnectDisconnect_impl();
                    }
                }
            }
            if (m_RadarDeviceModeConfigParams.NumberOfRadarDevicesDetected <= 1)
            {
                string full_command2 = string.Format("ar1.SetRfTx0PowMonConfig({0}, {1}, {2}, {3}, {4}, {5}, {6})", new object[]
                {
                    m_MonTX1PowerConfigParameters.ProfileIndex,
                    m_MonTX1PowerConfigParameters.RF1FreqBitMask,
                    m_MonTX1PowerConfigParameters.RF2FreqBitMask,
                    m_MonTX1PowerConfigParameters.RF3FreqBitMask,
                    m_MonTX1PowerConfigParameters.ReportingMode,
                    (decimal)Math.Round(m_MonTX1PowerConfigParameters.TxPowerAbsoluteErrorThreshold, 1),
                    (decimal)Math.Round(m_MonTX1PowerConfigParameters.TxPowerFlatnessErrorThreshold, 1)
                });
                m_GuiManager.RecordLog(6, full_command2);
            }
            else
            {
                string full_command3 = string.Format("ar1.SetRfTx0PowMonConfig_mult({0}, {1}, {2}, {3}, {4}, {5}, {6}, {7})", new object[]
                {
                    GlobalRef.g_RadarDeviceId,
                    m_MonTX1PowerConfigParameters.ProfileIndex,
                    m_MonTX1PowerConfigParameters.RF1FreqBitMask,
                    m_MonTX1PowerConfigParameters.RF2FreqBitMask,
                    m_MonTX1PowerConfigParameters.RF3FreqBitMask,
                    m_MonTX1PowerConfigParameters.ReportingMode,
                    (decimal)Math.Round(m_MonTX1PowerConfigParameters.TxPowerAbsoluteErrorThreshold, 1),
                    (decimal)Math.Round(m_MonTX1PowerConfigParameters.TxPowerFlatnessErrorThreshold, 1)
                });
                m_GuiManager.RecordLog(6, full_command3);
            }
            uint g_RadarDeviceId = GlobalRef.g_RadarDeviceId;
            num = Imports.RadarLinkImpl_RfTxPowrMonConfig((byte)GlobalRef.g_RadarDeviceId, data);
            if ((num == 0 && ((GlobalRef.g_CasCadeDeviceSpiConnect & 1U) == 1U || (GlobalRef.g_CasCadeDeviceSpiConnect & 2U) == 2U || (GlobalRef.g_CasCadeDeviceSpiConnect & 4U) == 4U || (GlobalRef.g_CasCadeDeviceSpiConnect & 8U) == 8U)) || GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
            {
                string full_command4 = string.Format("Status: Passed", new object[0]);
                m_GuiManager.RecordLog(6, full_command4);
                for (int i = 0; i < 4; i++)
                {
                    if (jsonConfigInProgress)
                    {
                        break;
                    }
                    if (((ulong)g_RadarDeviceId & (ulong)(1L << (i & 31))) != 0UL)
                    {
                        int mmwaveDevIndex = getMmwaveDevIndex(i);
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].monitoringConfig.rlAllTxPowMonConf_t.tx0PowrMonCfg.profileIndx = (int)ScriptOps.Tx1Tx2Tx3PowerMonitoringConfiguration1Param.ProfileIndex;
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].monitoringConfig.rlAllTxPowMonConf_t.tx0PowrMonCfg.rfFreqBitMask = "0x" + ScriptOps.Tx1Tx2Tx3PowerMonitoringConfiguration1Param.RFFreqBitMask.ToString("X");
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].monitoringConfig.rlAllTxPowMonConf_t.tx0PowrMonCfg.reportMode = (int)ScriptOps.Tx1Tx2Tx3PowerMonitoringConfiguration1Param.ReportingMode;
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].monitoringConfig.rlAllTxPowMonConf_t.tx0PowrMonCfg.txPowAbsErrThresh = m_MonTX1PowerConfigParameters.TxPowerAbsoluteErrorThreshold;
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].monitoringConfig.rlAllTxPowMonConf_t.tx0PowrMonCfg.txPowFlatnessErrThresh = m_MonTX1PowerConfigParameters.TxPowerFlatnessErrorThreshold;
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].monitoringConfig.rlAllTxPowMonConf_t.isConfigured = 1;
                    }
                }
            }
            else
            {
                string msg = string.Format("Status: Failed, Error Type: {0}", new object[]
                {
                    GetErrorType(num)
                });
                GlobalRef.LuaWrapper.PrintError(msg);
            }
            if (GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
            {
                if (iRs232ConnectDisconnect_impl() == 0 && !GlobalRef.g_NtvRS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
                {
                    m_GuiManager.DllOps.iConnect(1U, 0U);
                    string full_command5 = string.Format("Debug Port Reconnected!", new object[0]);
                    m_GuiManager.RecordLog(9, full_command5);
                    ScriptOps.KeepTrying(2000, new Func<bool>(spare_read));
                }
            }
            else if (GlobalRef.g_CasCadeDeviceSpiConnect == 0U)
            {
                string full_command6 = string.Format("Error Occurred in Port open close", new object[0]);
                m_GuiManager.RecordLog(9, full_command6);
            }
            return num;
        }

        private int iSetTX2PowerMonConfig_Impl(bool is_starting_op, bool is_ending_op)
        {
            ScriptOps.Tx1Tx2Tx3PowerMonitoringConfiguration1Param.ProfileIndex = 0;
            ScriptOps.Tx1Tx2Tx3PowerMonitoringConfiguration1Param.RFFreqBitMask = 0;
            ScriptOps.Tx1Tx2Tx3PowerMonitoringConfiguration1Param.Reserved = 0;
            ScriptOps.Tx1Tx2Tx3PowerMonitoringConfiguration1Param.ReportingMode = 0;
            ScriptOps.Tx1Tx2Tx3PowerMonitoringConfiguration1Param.TxPowerAbsoluteErrorThreshold = 0;
            ScriptOps.Tx1Tx2Tx3PowerMonitoringConfiguration1Param.TxPowerFlatnessErrorThreshold = 0;
            ScriptOps.Tx1Tx2Tx3PowerMonitoringConfiguration1Param.Reserved2 = 0;
            ScriptOps.Tx1Tx2Tx3PowerMonitoringConfiguration1Param.Reserved3 = 0U;
            ScriptOps.Tx1Tx2Tx3PowerMonitoringConfiguration2Param.ProfileIndex = 0;
            ScriptOps.Tx1Tx2Tx3PowerMonitoringConfiguration2Param.RFFreqBitMask = 0;
            ScriptOps.Tx1Tx2Tx3PowerMonitoringConfiguration2Param.Reserved = 0;
            ScriptOps.Tx1Tx2Tx3PowerMonitoringConfiguration2Param.ReportingMode = 0;
            ScriptOps.Tx1Tx2Tx3PowerMonitoringConfiguration2Param.TxPowerAbsoluteErrorThreshold = 0;
            ScriptOps.Tx1Tx2Tx3PowerMonitoringConfiguration2Param.TxPowerFlatnessErrorThreshold = 0;
            ScriptOps.Tx1Tx2Tx3PowerMonitoringConfiguration2Param.Reserved2 = 0;
            ScriptOps.Tx1Tx2Tx3PowerMonitoringConfiguration2Param.Reserved3 = 0U;
            ScriptOps.Tx1Tx2Tx3PowerMonitoringConfiguration3Param.ProfileIndex = 0;
            ScriptOps.Tx1Tx2Tx3PowerMonitoringConfiguration3Param.RFFreqBitMask = 0;
            ScriptOps.Tx1Tx2Tx3PowerMonitoringConfiguration3Param.Reserved = 0;
            ScriptOps.Tx1Tx2Tx3PowerMonitoringConfiguration3Param.ReportingMode = 0;
            ScriptOps.Tx1Tx2Tx3PowerMonitoringConfiguration3Param.TxPowerAbsoluteErrorThreshold = 0;
            ScriptOps.Tx1Tx2Tx3PowerMonitoringConfiguration3Param.TxPowerFlatnessErrorThreshold = 0;
            ScriptOps.Tx1Tx2Tx3PowerMonitoringConfiguration3Param.Reserved2 = 0;
            ScriptOps.Tx1Tx2Tx3PowerMonitoringConfiguration3Param.Reserved3 = 0U;
            ScriptOps.Tx1Tx2Tx3PowerMonitoringConfiguration2Param.ProfileIndex = (byte)m_MonTX2PowerConfigParameters.ProfileIndex;
            ScriptOps.Tx1Tx2Tx3PowerMonitoringConfiguration2Param.RFFreqBitMask = (byte)(m_MonTX2PowerConfigParameters.RF1FreqBitMask | m_MonTX2PowerConfigParameters.RF2FreqBitMask << 1 | m_MonTX2PowerConfigParameters.RF3FreqBitMask << 2);
            ScriptOps.Tx1Tx2Tx3PowerMonitoringConfiguration2Param.Reserved = 0;
            ScriptOps.Tx1Tx2Tx3PowerMonitoringConfiguration2Param.ReportingMode = (byte)m_MonTX2PowerConfigParameters.ReportingMode;
            ScriptOps.Tx1Tx2Tx3PowerMonitoringConfiguration2Param.TxPowerAbsoluteErrorThreshold = (ushort)(m_MonTX2PowerConfigParameters.TxPowerAbsoluteErrorThreshold * 10.0);
            ScriptOps.Tx1Tx2Tx3PowerMonitoringConfiguration2Param.TxPowerFlatnessErrorThreshold = (ushort)(m_MonTX2PowerConfigParameters.TxPowerFlatnessErrorThreshold * 10.0);
            ScriptOps.Tx1Tx2Tx3PowerMonitoringConfiguration2Param.Reserved2 = 0;
            ScriptOps.Tx1Tx2Tx3PowerMonitoringConfiguration2Param.Reserved3 = 0U;
            GCHandle.Alloc(ScriptOps.Tx1Tx2Tx3PowerMonitoringConfiguration1Param, GCHandleType.Pinned).AddrOfPinnedObject();
            IntPtr pTX2PowerMonitoringConfigurationData = GCHandle.Alloc(ScriptOps.Tx1Tx2Tx3PowerMonitoringConfiguration2Param, GCHandleType.Pinned).AddrOfPinnedObject();
            GCHandle.Alloc(ScriptOps.Tx1Tx2Tx3PowerMonitoringConfiguration3Param, GCHandleType.Pinned).AddrOfPinnedObject();
            ScriptOps.Tx1Tx2Tx3PowerMonitoringConfiguration2NewParam.pTX1PowerMonitoringConfigurationData = IntPtr.Zero;
            ScriptOps.Tx1Tx2Tx3PowerMonitoringConfiguration2NewParam.pTX2PowerMonitoringConfigurationData = pTX2PowerMonitoringConfigurationData;
            ScriptOps.Tx1Tx2Tx3PowerMonitoringConfiguration2NewParam.pTX3PowerMonitoringConfigurationData = IntPtr.Zero;
            IntPtr data = GCHandle.Alloc(ScriptOps.Tx1Tx2Tx3PowerMonitoringConfiguration2NewParam, GCHandleType.Pinned).AddrOfPinnedObject();
            int num;
            if (GlobalRef.g_NtvRS232Connect[(int)GlobalRef.g_RadarDeviceIndex] && GlobalRef.g_CasCadeDeviceSpiConnect == 0U)
            {
                num = m_TsWrapper.Calling_WriteAddr_Single(4294959848U, 1U);
                if (m_GuiManager.DllOps.itempDisconnect(false) == 0)
                {
                    string full_command = string.Format("Debug Port Disconnected", new object[0]);
                    m_GuiManager.RecordLog(0, full_command);
                    if (!GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
                    {
                        iRs232ConnectDisconnect_impl();
                    }
                }
            }
            if (m_RadarDeviceModeConfigParams.NumberOfRadarDevicesDetected <= 1)
            {
                string full_command2 = string.Format("ar1.SetRfTx1PowMonConfig({0}, {1}, {2}, {3}, {4}, {5}, {6})", new object[]
                {
                    m_MonTX2PowerConfigParameters.ProfileIndex,
                    m_MonTX2PowerConfigParameters.RF1FreqBitMask,
                    m_MonTX2PowerConfigParameters.RF2FreqBitMask,
                    m_MonTX2PowerConfigParameters.RF3FreqBitMask,
                    m_MonTX2PowerConfigParameters.ReportingMode,
                    (decimal)Math.Round(m_MonTX2PowerConfigParameters.TxPowerAbsoluteErrorThreshold, 1),
                    (decimal)Math.Round(m_MonTX2PowerConfigParameters.TxPowerFlatnessErrorThreshold, 1)
                });
                m_GuiManager.RecordLog(6, full_command2);
            }
            else
            {
                string full_command3 = string.Format("ar1.SetRfTx1PowMonConfig_mult({0}, {1}, {2}, {3}, {4}, {5}, {6}, {7})", new object[]
                {
                    GlobalRef.g_RadarDeviceId,
                    m_MonTX2PowerConfigParameters.ProfileIndex,
                    m_MonTX2PowerConfigParameters.RF1FreqBitMask,
                    m_MonTX2PowerConfigParameters.RF2FreqBitMask,
                    m_MonTX2PowerConfigParameters.RF3FreqBitMask,
                    m_MonTX2PowerConfigParameters.ReportingMode,
                    (decimal)Math.Round(m_MonTX2PowerConfigParameters.TxPowerAbsoluteErrorThreshold, 1),
                    (decimal)Math.Round(m_MonTX2PowerConfigParameters.TxPowerFlatnessErrorThreshold, 1)
                });
                m_GuiManager.RecordLog(6, full_command3);
            }
            uint g_RadarDeviceId = GlobalRef.g_RadarDeviceId;
            num = Imports.RadarLinkImpl_RfTxPowrMonConfig((byte)GlobalRef.g_RadarDeviceId, data);
            if ((num == 0 && ((GlobalRef.g_CasCadeDeviceSpiConnect & 1U) == 1U || (GlobalRef.g_CasCadeDeviceSpiConnect & 2U) == 2U || (GlobalRef.g_CasCadeDeviceSpiConnect & 4U) == 4U || (GlobalRef.g_CasCadeDeviceSpiConnect & 8U) == 8U)) || GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
            {
                string full_command4 = string.Format("Status: Passed", new object[0]);
                m_GuiManager.RecordLog(6, full_command4);
                for (int i = 0; i < 4; i++)
                {
                    if (jsonConfigInProgress)
                    {
                        break;
                    }
                    if (((ulong)g_RadarDeviceId & (ulong)(1L << (i & 31))) != 0UL)
                    {
                        int mmwaveDevIndex = getMmwaveDevIndex(i);
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].monitoringConfig.rlAllTxPowMonConf_t.tx1PowrMonCfg.profileIndx = (int)ScriptOps.Tx1Tx2Tx3PowerMonitoringConfiguration2Param.ProfileIndex;
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].monitoringConfig.rlAllTxPowMonConf_t.tx1PowrMonCfg.rfFreqBitMask = "0x" + ScriptOps.Tx1Tx2Tx3PowerMonitoringConfiguration2Param.RFFreqBitMask.ToString("X");
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].monitoringConfig.rlAllTxPowMonConf_t.tx1PowrMonCfg.reportMode = (int)ScriptOps.Tx1Tx2Tx3PowerMonitoringConfiguration2Param.ReportingMode;
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].monitoringConfig.rlAllTxPowMonConf_t.tx1PowrMonCfg.txPowAbsErrThresh = m_MonTX2PowerConfigParameters.TxPowerAbsoluteErrorThreshold;
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].monitoringConfig.rlAllTxPowMonConf_t.tx1PowrMonCfg.txPowFlatnessErrThresh = m_MonTX2PowerConfigParameters.TxPowerFlatnessErrorThreshold;
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].monitoringConfig.rlAllTxPowMonConf_t.isConfigured = 1;
                    }
                }
            }
            else
            {
                string msg = string.Format("Status: Failed, Error Type: {0}", new object[]
                {
                    GetErrorType(num)
                });
                GlobalRef.LuaWrapper.PrintError(msg);
            }
            if (GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
            {
                if (iRs232ConnectDisconnect_impl() == 0 && !GlobalRef.g_NtvRS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
                {
                    m_GuiManager.DllOps.iConnect(1U, 0U);
                    string full_command5 = string.Format("Debug Port Reconnected!", new object[0]);
                    m_GuiManager.RecordLog(9, full_command5);
                    ScriptOps.KeepTrying(2000, new Func<bool>(spare_read));
                }
            }
            else if (GlobalRef.g_CasCadeDeviceSpiConnect == 0U)
            {
                string full_command6 = string.Format("Error Occurred in Port open close", new object[0]);
                m_GuiManager.RecordLog(9, full_command6);
            }
            return num;
        }

        private int iSetTX3PowerMonConfig_Impl(bool is_starting_op, bool is_ending_op)
        {
            ScriptOps.Tx1Tx2Tx3PowerMonitoringConfiguration1Param.ProfileIndex = 0;
            ScriptOps.Tx1Tx2Tx3PowerMonitoringConfiguration1Param.RFFreqBitMask = 0;
            ScriptOps.Tx1Tx2Tx3PowerMonitoringConfiguration1Param.Reserved = 0;
            ScriptOps.Tx1Tx2Tx3PowerMonitoringConfiguration1Param.ReportingMode = 0;
            ScriptOps.Tx1Tx2Tx3PowerMonitoringConfiguration1Param.TxPowerAbsoluteErrorThreshold = 0;
            ScriptOps.Tx1Tx2Tx3PowerMonitoringConfiguration1Param.TxPowerFlatnessErrorThreshold = 0;
            ScriptOps.Tx1Tx2Tx3PowerMonitoringConfiguration1Param.Reserved2 = 0;
            ScriptOps.Tx1Tx2Tx3PowerMonitoringConfiguration1Param.Reserved3 = 0U;
            ScriptOps.Tx1Tx2Tx3PowerMonitoringConfiguration2Param.ProfileIndex = 0;
            ScriptOps.Tx1Tx2Tx3PowerMonitoringConfiguration2Param.RFFreqBitMask = 0;
            ScriptOps.Tx1Tx2Tx3PowerMonitoringConfiguration2Param.Reserved = 0;
            ScriptOps.Tx1Tx2Tx3PowerMonitoringConfiguration2Param.ReportingMode = 0;
            ScriptOps.Tx1Tx2Tx3PowerMonitoringConfiguration2Param.TxPowerAbsoluteErrorThreshold = 0;
            ScriptOps.Tx1Tx2Tx3PowerMonitoringConfiguration2Param.TxPowerFlatnessErrorThreshold = 0;
            ScriptOps.Tx1Tx2Tx3PowerMonitoringConfiguration2Param.Reserved2 = 0;
            ScriptOps.Tx1Tx2Tx3PowerMonitoringConfiguration2Param.Reserved3 = 0U;
            ScriptOps.Tx1Tx2Tx3PowerMonitoringConfiguration3Param.ProfileIndex = 0;
            ScriptOps.Tx1Tx2Tx3PowerMonitoringConfiguration3Param.RFFreqBitMask = 0;
            ScriptOps.Tx1Tx2Tx3PowerMonitoringConfiguration3Param.Reserved = 0;
            ScriptOps.Tx1Tx2Tx3PowerMonitoringConfiguration3Param.ReportingMode = 0;
            ScriptOps.Tx1Tx2Tx3PowerMonitoringConfiguration3Param.TxPowerAbsoluteErrorThreshold = 0;
            ScriptOps.Tx1Tx2Tx3PowerMonitoringConfiguration3Param.TxPowerFlatnessErrorThreshold = 0;
            ScriptOps.Tx1Tx2Tx3PowerMonitoringConfiguration3Param.Reserved2 = 0;
            ScriptOps.Tx1Tx2Tx3PowerMonitoringConfiguration3Param.Reserved3 = 0U;
            ScriptOps.Tx1Tx2Tx3PowerMonitoringConfiguration3Param.ProfileIndex = (byte)m_MonTX3PowerConfigParameters.ProfileIndex;
            ScriptOps.Tx1Tx2Tx3PowerMonitoringConfiguration3Param.RFFreqBitMask = (byte)(m_MonTX3PowerConfigParameters.RF1FreqBitMask | m_MonTX3PowerConfigParameters.RF2FreqBitMask << 1 | m_MonTX3PowerConfigParameters.RF3FreqBitMask << 2);
            ScriptOps.Tx1Tx2Tx3PowerMonitoringConfiguration3Param.Reserved = 0;
            ScriptOps.Tx1Tx2Tx3PowerMonitoringConfiguration3Param.ReportingMode = (byte)m_MonTX3PowerConfigParameters.ReportingMode;
            ScriptOps.Tx1Tx2Tx3PowerMonitoringConfiguration3Param.TxPowerAbsoluteErrorThreshold = (ushort)(m_MonTX3PowerConfigParameters.TxPowerAbsoluteErrorThreshold * 10.0);
            ScriptOps.Tx1Tx2Tx3PowerMonitoringConfiguration3Param.TxPowerFlatnessErrorThreshold = (ushort)(m_MonTX3PowerConfigParameters.TxPowerFlatnessErrorThreshold * 10.0);
            ScriptOps.Tx1Tx2Tx3PowerMonitoringConfiguration3Param.Reserved2 = 0;
            ScriptOps.Tx1Tx2Tx3PowerMonitoringConfiguration3Param.Reserved3 = 0U;
            GCHandle.Alloc(ScriptOps.Tx1Tx2Tx3PowerMonitoringConfiguration1Param, GCHandleType.Pinned).AddrOfPinnedObject();
            GCHandle.Alloc(ScriptOps.Tx1Tx2Tx3PowerMonitoringConfiguration2Param, GCHandleType.Pinned).AddrOfPinnedObject();
            IntPtr pTX3PowerMonitoringConfigurationData = GCHandle.Alloc(ScriptOps.Tx1Tx2Tx3PowerMonitoringConfiguration3Param, GCHandleType.Pinned).AddrOfPinnedObject();
            ScriptOps.Tx1Tx2Tx3PowerMonitoringConfiguration2NewParam.pTX1PowerMonitoringConfigurationData = IntPtr.Zero;
            ScriptOps.Tx1Tx2Tx3PowerMonitoringConfiguration2NewParam.pTX2PowerMonitoringConfigurationData = IntPtr.Zero;
            ScriptOps.Tx1Tx2Tx3PowerMonitoringConfiguration2NewParam.pTX3PowerMonitoringConfigurationData = pTX3PowerMonitoringConfigurationData;
            IntPtr data = GCHandle.Alloc(ScriptOps.Tx1Tx2Tx3PowerMonitoringConfiguration2NewParam, GCHandleType.Pinned).AddrOfPinnedObject();
            int num;
            if (GlobalRef.g_NtvRS232Connect[(int)GlobalRef.g_RadarDeviceIndex] && GlobalRef.g_CasCadeDeviceSpiConnect == 0U)
            {
                num = m_TsWrapper.Calling_WriteAddr_Single(4294959848U, 1U);
                if (m_GuiManager.DllOps.itempDisconnect(false) == 0)
                {
                    string full_command = string.Format("Debug Port Disconnected", new object[0]);
                    m_GuiManager.RecordLog(0, full_command);
                    if (!GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
                    {
                        iRs232ConnectDisconnect_impl();
                    }
                }
            }
            if (m_RadarDeviceModeConfigParams.NumberOfRadarDevicesDetected <= 1)
            {
                string full_command2 = string.Format("ar1.SetRfTx2PowMonConfig({0}, {1}, {2}, {3}, {4}, {5}, {6})", new object[]
                {
                    m_MonTX3PowerConfigParameters.ProfileIndex,
                    m_MonTX3PowerConfigParameters.RF1FreqBitMask,
                    m_MonTX3PowerConfigParameters.RF2FreqBitMask,
                    m_MonTX3PowerConfigParameters.RF3FreqBitMask,
                    m_MonTX3PowerConfigParameters.ReportingMode,
                    (decimal)Math.Round(m_MonTX3PowerConfigParameters.TxPowerAbsoluteErrorThreshold, 1),
                    (decimal)Math.Round(m_MonTX3PowerConfigParameters.TxPowerFlatnessErrorThreshold, 1)
                });
                m_GuiManager.RecordLog(6, full_command2);
            }
            else
            {
                string full_command3 = string.Format("ar1.SetRfTx2PowMonConfig_mult({0}, {1}, {2}, {3}, {4}, {5}, {6}, {7})", new object[]
                {
                    GlobalRef.g_RadarDeviceId,
                    m_MonTX3PowerConfigParameters.ProfileIndex,
                    m_MonTX3PowerConfigParameters.RF1FreqBitMask,
                    m_MonTX3PowerConfigParameters.RF2FreqBitMask,
                    m_MonTX3PowerConfigParameters.RF3FreqBitMask,
                    m_MonTX3PowerConfigParameters.ReportingMode,
                    (decimal)Math.Round(m_MonTX3PowerConfigParameters.TxPowerAbsoluteErrorThreshold, 1),
                    (decimal)Math.Round(m_MonTX3PowerConfigParameters.TxPowerFlatnessErrorThreshold, 1)
                });
                m_GuiManager.RecordLog(6, full_command3);
            }
            uint g_RadarDeviceId = GlobalRef.g_RadarDeviceId;
            num = Imports.RadarLinkImpl_RfTxPowrMonConfig((byte)GlobalRef.g_RadarDeviceId, data);
            if ((num == 0 && ((GlobalRef.g_CasCadeDeviceSpiConnect & 1U) == 1U || (GlobalRef.g_CasCadeDeviceSpiConnect & 2U) == 2U || (GlobalRef.g_CasCadeDeviceSpiConnect & 4U) == 4U || (GlobalRef.g_CasCadeDeviceSpiConnect & 8U) == 8U)) || GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
            {
                string full_command4 = string.Format("Status: Passed", new object[0]);
                m_GuiManager.RecordLog(6, full_command4);
                for (int i = 0; i < 4; i++)
                {
                    if (jsonConfigInProgress)
                    {
                        break;
                    }
                    if (((ulong)g_RadarDeviceId & (ulong)(1L << (i & 31))) != 0UL)
                    {
                        int mmwaveDevIndex = getMmwaveDevIndex(i);
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].monitoringConfig.rlAllTxPowMonConf_t.tx2PowrMonCfg.profileIndx = (int)ScriptOps.Tx1Tx2Tx3PowerMonitoringConfiguration3Param.ProfileIndex;
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].monitoringConfig.rlAllTxPowMonConf_t.tx2PowrMonCfg.rfFreqBitMask = "0x" + ScriptOps.Tx1Tx2Tx3PowerMonitoringConfiguration3Param.RFFreqBitMask.ToString("X");
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].monitoringConfig.rlAllTxPowMonConf_t.tx2PowrMonCfg.reportMode = (int)ScriptOps.Tx1Tx2Tx3PowerMonitoringConfiguration3Param.ReportingMode;
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].monitoringConfig.rlAllTxPowMonConf_t.tx2PowrMonCfg.txPowAbsErrThresh = m_MonTX1PowerConfigParameters.TxPowerAbsoluteErrorThreshold;
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].monitoringConfig.rlAllTxPowMonConf_t.tx2PowrMonCfg.txPowFlatnessErrThresh = m_MonTX1PowerConfigParameters.TxPowerFlatnessErrorThreshold;
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].monitoringConfig.rlAllTxPowMonConf_t.isConfigured = 1;
                    }
                }
            }
            else
            {
                string msg = string.Format("Status: Failed, Error Type: {0}", new object[]
                {
                    GetErrorType(num)
                });
                GlobalRef.LuaWrapper.PrintError(msg);
            }
            if (GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
            {
                if (iRs232ConnectDisconnect_impl() == 0 && !GlobalRef.g_NtvRS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
                {
                    m_GuiManager.DllOps.iConnect(1U, 0U);
                    string full_command5 = string.Format("Debug Port Reconnected!", new object[0]);
                    m_GuiManager.RecordLog(9, full_command5);
                    ScriptOps.KeepTrying(2000, new Func<bool>(spare_read));
                }
            }
            else if (GlobalRef.g_CasCadeDeviceSpiConnect == 0U)
            {
                string full_command6 = string.Format("Error Occurred in Port open close", new object[0]);
                m_GuiManager.RecordLog(9, full_command6);
            }
            return num;
        }

        private int iSetRXNoiseFigureMonConfig_Impl(bool is_starting_op, bool is_ending_op)
        {
            RXNoiserMonitoringConfigurationParam.ProfileIndex = (byte)m_MonRXNoiseFigureConfigParameters.ProfileIndex;
            RXNoiserMonitoringConfigurationParam.RFFreqBitMask = (byte)(m_MonRXNoiseFigureConfigParameters.RF1FreqBitMask | m_MonRXNoiseFigureConfigParameters.RF2FreqBitMask << 1 | m_MonRXNoiseFigureConfigParameters.RF3FreqBitMask << 2);
            RXNoiserMonitoringConfigurationParam.Reserved = 0;
            RXNoiserMonitoringConfigurationParam.ReportingMode = (byte)m_MonRXNoiseFigureConfigParameters.ReportingMode;
            RXNoiserMonitoringConfigurationParam.Reserved2 = 0;
            RXNoiserMonitoringConfigurationParam.RXNoiseFigureThreshold = (ushort)(m_MonRXNoiseFigureConfigParameters.RXNoiseFigureThreshold * 10.0);
            RXNoiserMonitoringConfigurationParam.Reserved3 = 0U;
            IntPtr data = GCHandle.Alloc(RXNoiserMonitoringConfigurationParam, GCHandleType.Pinned).AddrOfPinnedObject();
            int num;
            if (GlobalRef.g_NtvRS232Connect[(int)GlobalRef.g_RadarDeviceIndex] && GlobalRef.g_CasCadeDeviceSpiConnect == 0U)
            {
                num = m_TsWrapper.Calling_WriteAddr_Single(4294959848U, 1U);
                if (m_GuiManager.DllOps.itempDisconnect(false) == 0)
                {
                    string full_command = string.Format("Debug Port Disconnected", new object[0]);
                    m_GuiManager.RecordLog(0, full_command);
                    if (!GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
                    {
                        iRs232ConnectDisconnect_impl();
                    }
                }
            }
            if (m_RadarDeviceModeConfigParams.NumberOfRadarDevicesDetected <= 1)
            {
                string full_command2 = string.Format("ar1.SetRfRxNoiseMonConfig({0}, {1}, {2}, {3}, {4}, {5})", new object[]
                {
                    m_MonRXNoiseFigureConfigParameters.ProfileIndex,
                    m_MonRXNoiseFigureConfigParameters.RF1FreqBitMask,
                    m_MonRXNoiseFigureConfigParameters.RF2FreqBitMask,
                    m_MonRXNoiseFigureConfigParameters.RF3FreqBitMask,
                    m_MonRXNoiseFigureConfigParameters.ReportingMode,
                    (decimal)Math.Round(m_MonRXNoiseFigureConfigParameters.RXNoiseFigureThreshold, 1)
                });
                m_GuiManager.RecordLog(6, full_command2);
            }
            else
            {
                string full_command3 = string.Format("ar1.SetRfRxNoiseMonConfig_mult({0}, {1}, {2}, {3}, {4}, {5}, {6})", new object[]
                {
                    GlobalRef.g_RadarDeviceId,
                    m_MonRXNoiseFigureConfigParameters.ProfileIndex,
                    m_MonRXNoiseFigureConfigParameters.RF1FreqBitMask,
                    m_MonRXNoiseFigureConfigParameters.RF2FreqBitMask,
                    m_MonRXNoiseFigureConfigParameters.RF3FreqBitMask,
                    m_MonRXNoiseFigureConfigParameters.ReportingMode,
                    (decimal)Math.Round(m_MonRXNoiseFigureConfigParameters.RXNoiseFigureThreshold, 1)
                });
                m_GuiManager.RecordLog(6, full_command3);
            }
            uint g_RadarDeviceId = GlobalRef.g_RadarDeviceId;
            num = Imports.RadarLinkImpl_RfRxNoiseMonConfig(GlobalRef.g_RadarDeviceId, data);
            if ((num == 0 && ((GlobalRef.g_CasCadeDeviceSpiConnect & 1U) == 1U || (GlobalRef.g_CasCadeDeviceSpiConnect & 2U) == 2U || (GlobalRef.g_CasCadeDeviceSpiConnect & 4U) == 4U || (GlobalRef.g_CasCadeDeviceSpiConnect & 8U) == 8U)) || GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
            {
                string full_command4 = string.Format("Status: Passed", new object[0]);
                m_GuiManager.RecordLog(6, full_command4);
                for (int i = 0; i < 4; i++)
                {
                    if (jsonConfigInProgress)
                    {
                        break;
                    }
                    if (((ulong)g_RadarDeviceId & (ulong)(1L << (i & 31))) != 0UL)
                    {
                        int mmwaveDevIndex = getMmwaveDevIndex(i);
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].monitoringConfig.rlRxNoiseMonConf_t.profileIndx = (int)RXNoiserMonitoringConfigurationParam.ProfileIndex;
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].monitoringConfig.rlRxNoiseMonConf_t.rfFreqBitMask = "0x" + RXNoiserMonitoringConfigurationParam.RFFreqBitMask.ToString("X");
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].monitoringConfig.rlRxNoiseMonConf_t.reportMode = (int)RXNoiserMonitoringConfigurationParam.ReportingMode;
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].monitoringConfig.rlRxNoiseMonConf_t.noiseThresh = m_MonRXNoiseFigureConfigParameters.RXNoiseFigureThreshold;
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].monitoringConfig.rlRxNoiseMonConf_t.isConfigured = 1;
                    }
                }
            }
            else
            {
                string msg = string.Format("Status: Failed, Error Type: {0}", new object[]
                {
                    GetErrorType(num)
                });
                GlobalRef.LuaWrapper.PrintError(msg);
            }
            if (GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
            {
                if (iRs232ConnectDisconnect_impl() == 0 && !GlobalRef.g_NtvRS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
                {
                    m_GuiManager.DllOps.iConnect(1U, 0U);
                    string full_command5 = string.Format("Debug Port Reconnected!", new object[0]);
                    m_GuiManager.RecordLog(9, full_command5);
                    ScriptOps.KeepTrying(2000, new Func<bool>(spare_read));
                }
            }
            else if (GlobalRef.g_CasCadeDeviceSpiConnect == 0U)
            {
                string full_command6 = string.Format("Error Occurred in Port open close", new object[0]);
                m_GuiManager.RecordLog(9, full_command6);
            }
            return num;
        }

        private int iSetTX1BallBreakMonConfig_Impl(bool is_starting_op, bool is_ending_op)
        {
            ScriptOps.TX1BallBreakMonitoringConfigurationParam.ReportingMode = 0;
            ScriptOps.TX1BallBreakMonitoringConfigurationParam.TxReflCeoffMagThreshold = 0;
            ScriptOps.TX1BallBreakMonitoringConfigurationParam.Reserved = 0;
            ScriptOps.TX1BallBreakMonitoringConfigurationParam.Reserved2 = 0U;
            ScriptOps.TX1BallBreakMonitoringConfigurationParam.Reserved3 = 0U;
            ScriptOps.TX2BallBreakMonitoringConfigurationParam.ReportingMode = 0;
            ScriptOps.TX2BallBreakMonitoringConfigurationParam.TxReflCeoffMagThreshold = 0;
            ScriptOps.TX2BallBreakMonitoringConfigurationParam.Reserved = 0;
            ScriptOps.TX2BallBreakMonitoringConfigurationParam.Reserved2 = 0U;
            ScriptOps.TX2BallBreakMonitoringConfigurationParam.Reserved3 = 0U;
            ScriptOps.TX3BallBreakMonitoringConfigurationParam.ReportingMode = 0;
            ScriptOps.TX3BallBreakMonitoringConfigurationParam.TxReflCeoffMagThreshold = 0;
            ScriptOps.TX3BallBreakMonitoringConfigurationParam.Reserved = 0;
            ScriptOps.TX3BallBreakMonitoringConfigurationParam.Reserved2 = 0U;
            ScriptOps.TX3BallBreakMonitoringConfigurationParam.Reserved3 = 0U;
            ScriptOps.TX1BallBreakMonitoringConfigurationParam.ReportingMode = (byte)m_MonTx1BallBreakConfigParameters.ReportingMode;
            ScriptOps.TX1BallBreakMonitoringConfigurationParam.TxReflCeoffMagThreshold = (short)(m_MonTx1BallBreakConfigParameters.TXReflectionCoeffMagnitudeThreshold * 10.0);
            ScriptOps.TX1BallBreakMonitoringConfigurationParam.Reserved = 0;
            ScriptOps.TX1BallBreakMonitoringConfigurationParam.Reserved2 = 0U;
            ScriptOps.TX1BallBreakMonitoringConfigurationParam.Reserved3 = 0U;
            IntPtr pTX1BallBreakMonitoringConfigurationData = GCHandle.Alloc(ScriptOps.TX1BallBreakMonitoringConfigurationParam, GCHandleType.Pinned).AddrOfPinnedObject();
            GCHandle.Alloc(ScriptOps.TX2BallBreakMonitoringConfigurationParam, GCHandleType.Pinned).AddrOfPinnedObject();
            GCHandle.Alloc(ScriptOps.TX3BallBreakMonitoringConfigurationParam, GCHandleType.Pinned).AddrOfPinnedObject();
            ScriptOps.Tx1Tx2Tx3BallBreakMonitoringConfigurationParam.pTX1BallBreakMonitoringConfigurationData = pTX1BallBreakMonitoringConfigurationData;
            ScriptOps.Tx1Tx2Tx3BallBreakMonitoringConfigurationParam.pTX2BallBreakMonitoringConfigurationData = IntPtr.Zero;
            ScriptOps.Tx1Tx2Tx3BallBreakMonitoringConfigurationParam.pTX3BallBreakMonitoringConfigurationData = IntPtr.Zero;
            IntPtr data = GCHandle.Alloc(ScriptOps.Tx1Tx2Tx3BallBreakMonitoringConfigurationParam, GCHandleType.Pinned).AddrOfPinnedObject();
            int num;
            if (GlobalRef.g_NtvRS232Connect[(int)GlobalRef.g_RadarDeviceIndex] && GlobalRef.g_CasCadeDeviceSpiConnect == 0U)
            {
                num = m_TsWrapper.Calling_WriteAddr_Single(4294959848U, 1U);
                if (m_GuiManager.DllOps.itempDisconnect(false) == 0)
                {
                    string full_command = string.Format("Debug Port Disconnected", new object[0]);
                    m_GuiManager.RecordLog(0, full_command);
                    if (!GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
                    {
                        iRs232ConnectDisconnect_impl();
                    }
                }
            }
            if (m_RadarDeviceModeConfigParams.NumberOfRadarDevicesDetected <= 1)
            {
                string full_command2 = string.Format("ar1.SetRfTx0BallbreakMonConfig({0}, {1})", new object[]
                {
                    m_MonTx1BallBreakConfigParameters.ReportingMode,
                    (decimal)Math.Round(m_MonTx1BallBreakConfigParameters.TXReflectionCoeffMagnitudeThreshold, 1)
                });
                m_GuiManager.RecordLog(6, full_command2);
            }
            else
            {
                string full_command3 = string.Format("ar1.SetRfTx0BallbreakMonConfig_mult({0}, {1}, {2})", new object[]
                {
                    GlobalRef.g_RadarDeviceId,
                    m_MonTx1BallBreakConfigParameters.ReportingMode,
                    (decimal)Math.Round(m_MonTx1BallBreakConfigParameters.TXReflectionCoeffMagnitudeThreshold, 1)
                });
                m_GuiManager.RecordLog(6, full_command3);
            }
            uint g_RadarDeviceId = GlobalRef.g_RadarDeviceId;
            num = Imports.RadarLinkImpl_RfTxBallbreakMonConfig((byte)GlobalRef.g_RadarDeviceId, data);
            if ((num == 0 && ((GlobalRef.g_CasCadeDeviceSpiConnect & 1U) == 1U || (GlobalRef.g_CasCadeDeviceSpiConnect & 2U) == 2U || (GlobalRef.g_CasCadeDeviceSpiConnect & 4U) == 4U || (GlobalRef.g_CasCadeDeviceSpiConnect & 8U) == 8U)) || GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
            {
                string full_command4 = string.Format("Status: Passed", new object[0]);
                m_GuiManager.RecordLog(6, full_command4);
                for (int i = 0; i < 4; i++)
                {
                    if (jsonConfigInProgress)
                    {
                        break;
                    }
                    if (((ulong)g_RadarDeviceId & (ulong)(1L << (i & 31))) != 0UL)
                    {
                        int mmwaveDevIndex = getMmwaveDevIndex(i);
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].monitoringConfig.rlAllTxBallBreakMonCfg_t.p000019.reportMode = (int)ScriptOps.TX1BallBreakMonitoringConfigurationParam.ReportingMode;
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].monitoringConfig.rlAllTxBallBreakMonCfg_t.p000019.txReflCoeffMagThresh = m_MonTx1BallBreakConfigParameters.TXReflectionCoeffMagnitudeThreshold;
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].monitoringConfig.rlAllTxBallBreakMonCfg_t.isConfigured = 1;
                    }
                }
            }
            else
            {
                string msg = string.Format("Status: Failed, Error Type: {0}", new object[]
                {
                    GetErrorType(num)
                });
                GlobalRef.LuaWrapper.PrintError(msg);
            }
            if (GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
            {
                if (iRs232ConnectDisconnect_impl() == 0 && !GlobalRef.g_NtvRS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
                {
                    m_GuiManager.DllOps.iConnect(1U, 0U);
                    string full_command5 = string.Format("Debug Port Reconnected!", new object[0]);
                    m_GuiManager.RecordLog(9, full_command5);
                    ScriptOps.KeepTrying(2000, new Func<bool>(spare_read));
                }
            }
            else if (GlobalRef.g_CasCadeDeviceSpiConnect == 0U)
            {
                string full_command6 = string.Format("Error Occurred in Port open close", new object[0]);
                m_GuiManager.RecordLog(9, full_command6);
            }
            return num;
        }

        private int iSetTX2BallBreakMonConfig_Impl(bool is_starting_op, bool is_ending_op)
        {
            ScriptOps.TX1BallBreakMonitoringConfigurationParam.ReportingMode = 0;
            ScriptOps.TX1BallBreakMonitoringConfigurationParam.TxReflCeoffMagThreshold = 0;
            ScriptOps.TX1BallBreakMonitoringConfigurationParam.Reserved = 0;
            ScriptOps.TX1BallBreakMonitoringConfigurationParam.Reserved2 = 0U;
            ScriptOps.TX1BallBreakMonitoringConfigurationParam.Reserved3 = 0U;
            ScriptOps.TX2BallBreakMonitoringConfigurationParam.ReportingMode = 0;
            ScriptOps.TX2BallBreakMonitoringConfigurationParam.TxReflCeoffMagThreshold = 0;
            ScriptOps.TX2BallBreakMonitoringConfigurationParam.Reserved = 0;
            ScriptOps.TX2BallBreakMonitoringConfigurationParam.Reserved2 = 0U;
            ScriptOps.TX2BallBreakMonitoringConfigurationParam.Reserved3 = 0U;
            ScriptOps.TX3BallBreakMonitoringConfigurationParam.ReportingMode = 0;
            ScriptOps.TX3BallBreakMonitoringConfigurationParam.TxReflCeoffMagThreshold = 0;
            ScriptOps.TX3BallBreakMonitoringConfigurationParam.Reserved = 0;
            ScriptOps.TX3BallBreakMonitoringConfigurationParam.Reserved2 = 0U;
            ScriptOps.TX3BallBreakMonitoringConfigurationParam.Reserved3 = 0U;
            ScriptOps.TX2BallBreakMonitoringConfigurationParam.ReportingMode = (byte)m_MonTx2BallBreakConfigParameters.ReportingMode;
            ScriptOps.TX2BallBreakMonitoringConfigurationParam.TxReflCeoffMagThreshold = (short)(m_MonTx2BallBreakConfigParameters.TXReflectionCoeffMagnitudeThreshold * 10.0);
            ScriptOps.TX2BallBreakMonitoringConfigurationParam.Reserved = 0;
            ScriptOps.TX2BallBreakMonitoringConfigurationParam.Reserved2 = 0U;
            ScriptOps.TX2BallBreakMonitoringConfigurationParam.Reserved3 = 0U;
            GCHandle.Alloc(ScriptOps.TX1BallBreakMonitoringConfigurationParam, GCHandleType.Pinned).AddrOfPinnedObject();
            IntPtr pTX2BallBreakMonitoringConfigurationData = GCHandle.Alloc(ScriptOps.TX2BallBreakMonitoringConfigurationParam, GCHandleType.Pinned).AddrOfPinnedObject();
            GCHandle.Alloc(ScriptOps.TX3BallBreakMonitoringConfigurationParam, GCHandleType.Pinned).AddrOfPinnedObject();
            ScriptOps.Tx1Tx2Tx3BallBreakMonitoringConfigurationParam.pTX1BallBreakMonitoringConfigurationData = IntPtr.Zero;
            ScriptOps.Tx1Tx2Tx3BallBreakMonitoringConfigurationParam.pTX2BallBreakMonitoringConfigurationData = pTX2BallBreakMonitoringConfigurationData;
            ScriptOps.Tx1Tx2Tx3BallBreakMonitoringConfigurationParam.pTX3BallBreakMonitoringConfigurationData = IntPtr.Zero;
            IntPtr data = GCHandle.Alloc(ScriptOps.Tx1Tx2Tx3BallBreakMonitoringConfigurationParam, GCHandleType.Pinned).AddrOfPinnedObject();
            int num;
            if (GlobalRef.g_NtvRS232Connect[(int)GlobalRef.g_RadarDeviceIndex] && GlobalRef.g_CasCadeDeviceSpiConnect == 0U)
            {
                num = m_TsWrapper.Calling_WriteAddr_Single(4294959848U, 1U);
                if (m_GuiManager.DllOps.itempDisconnect(false) == 0)
                {
                    string full_command = string.Format("Debug Port Disconnected", new object[0]);
                    m_GuiManager.RecordLog(0, full_command);
                    if (!GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
                    {
                        iRs232ConnectDisconnect_impl();
                    }
                }
            }
            if (m_RadarDeviceModeConfigParams.NumberOfRadarDevicesDetected <= 1)
            {
                string full_command2 = string.Format("ar1.SetRfTx1BallbreakMonConfig({0}, {1})", new object[]
                {
                    m_MonTx2BallBreakConfigParameters.ReportingMode,
                    (decimal)Math.Round(m_MonTx2BallBreakConfigParameters.TXReflectionCoeffMagnitudeThreshold, 1)
                });
                m_GuiManager.RecordLog(6, full_command2);
            }
            else
            {
                string full_command3 = string.Format("ar1.SetRfTx1BallbreakMonConfig_mult({0}, {1}, {2})", new object[]
                {
                    GlobalRef.g_RadarDeviceId,
                    m_MonTx2BallBreakConfigParameters.ReportingMode,
                    (decimal)Math.Round(m_MonTx2BallBreakConfigParameters.TXReflectionCoeffMagnitudeThreshold, 1)
                });
                m_GuiManager.RecordLog(6, full_command3);
            }
            uint g_RadarDeviceId = GlobalRef.g_RadarDeviceId;
            num = Imports.RadarLinkImpl_RfTxBallbreakMonConfig((byte)GlobalRef.g_RadarDeviceId, data);
            if ((num == 0 && ((GlobalRef.g_CasCadeDeviceSpiConnect & 1U) == 1U || (GlobalRef.g_CasCadeDeviceSpiConnect & 2U) == 2U || (GlobalRef.g_CasCadeDeviceSpiConnect & 4U) == 4U || (GlobalRef.g_CasCadeDeviceSpiConnect & 8U) == 8U)) || GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
            {
                string full_command4 = string.Format("Status: Passed", new object[0]);
                m_GuiManager.RecordLog(6, full_command4);
                for (int i = 0; i < 4; i++)
                {
                    if (jsonConfigInProgress)
                    {
                        break;
                    }
                    if (((ulong)g_RadarDeviceId & (ulong)(1L << (i & 31))) != 0UL)
                    {
                        int mmwaveDevIndex = getMmwaveDevIndex(i);
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].monitoringConfig.rlAllTxBallBreakMonCfg_t.p00001a.reportMode = (int)ScriptOps.TX2BallBreakMonitoringConfigurationParam.ReportingMode;
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].monitoringConfig.rlAllTxBallBreakMonCfg_t.p00001a.txReflCoeffMagThresh = m_MonTx2BallBreakConfigParameters.TXReflectionCoeffMagnitudeThreshold;
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].monitoringConfig.rlAllTxBallBreakMonCfg_t.isConfigured = 1;
                    }
                }
            }
            else
            {
                string msg = string.Format("Status: Failed, Error Type: {0}", new object[]
                {
                    GetErrorType(num)
                });
                GlobalRef.LuaWrapper.PrintError(msg);
            }
            if (GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
            {
                if (iRs232ConnectDisconnect_impl() == 0 && !GlobalRef.g_NtvRS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
                {
                    m_GuiManager.DllOps.iConnect(1U, 0U);
                    string full_command5 = string.Format("Debug Port Reconnected!", new object[0]);
                    m_GuiManager.RecordLog(9, full_command5);
                    ScriptOps.KeepTrying(2000, new Func<bool>(spare_read));
                }
            }
            else if (GlobalRef.g_CasCadeDeviceSpiConnect == 0U)
            {
                string full_command6 = string.Format("Error Occurred in Port open close", new object[0]);
                m_GuiManager.RecordLog(9, full_command6);
            }
            return num;
        }

        private int iSetTX3BallBreakMonConfig_Impl(bool is_starting_op, bool is_ending_op)
        {
            ScriptOps.TX1BallBreakMonitoringConfigurationParam.ReportingMode = 0;
            ScriptOps.TX1BallBreakMonitoringConfigurationParam.TxReflCeoffMagThreshold = 0;
            ScriptOps.TX1BallBreakMonitoringConfigurationParam.Reserved = 0;
            ScriptOps.TX1BallBreakMonitoringConfigurationParam.Reserved2 = 0U;
            ScriptOps.TX1BallBreakMonitoringConfigurationParam.Reserved3 = 0U;
            ScriptOps.TX2BallBreakMonitoringConfigurationParam.ReportingMode = 0;
            ScriptOps.TX2BallBreakMonitoringConfigurationParam.TxReflCeoffMagThreshold = 0;
            ScriptOps.TX2BallBreakMonitoringConfigurationParam.Reserved = 0;
            ScriptOps.TX2BallBreakMonitoringConfigurationParam.Reserved2 = 0U;
            ScriptOps.TX2BallBreakMonitoringConfigurationParam.Reserved3 = 0U;
            ScriptOps.TX3BallBreakMonitoringConfigurationParam.ReportingMode = 0;
            ScriptOps.TX3BallBreakMonitoringConfigurationParam.TxReflCeoffMagThreshold = 0;
            ScriptOps.TX3BallBreakMonitoringConfigurationParam.Reserved = 0;
            ScriptOps.TX3BallBreakMonitoringConfigurationParam.Reserved2 = 0U;
            ScriptOps.TX3BallBreakMonitoringConfigurationParam.Reserved3 = 0U;
            ScriptOps.TX3BallBreakMonitoringConfigurationParam.ReportingMode = (byte)m_MonTx3BallBreakConfigParameters.ReportingMode;
            ScriptOps.TX3BallBreakMonitoringConfigurationParam.TxReflCeoffMagThreshold = (short)(m_MonTx3BallBreakConfigParameters.TXReflectionCoeffMagnitudeThreshold * 10.0);
            ScriptOps.TX3BallBreakMonitoringConfigurationParam.Reserved = 0;
            ScriptOps.TX3BallBreakMonitoringConfigurationParam.Reserved2 = 0U;
            ScriptOps.TX3BallBreakMonitoringConfigurationParam.Reserved3 = 0U;
            GCHandle.Alloc(ScriptOps.TX1BallBreakMonitoringConfigurationParam, GCHandleType.Pinned).AddrOfPinnedObject();
            GCHandle.Alloc(ScriptOps.TX2BallBreakMonitoringConfigurationParam, GCHandleType.Pinned).AddrOfPinnedObject();
            IntPtr pTX3BallBreakMonitoringConfigurationData = GCHandle.Alloc(ScriptOps.TX3BallBreakMonitoringConfigurationParam, GCHandleType.Pinned).AddrOfPinnedObject();
            ScriptOps.Tx1Tx2Tx3BallBreakMonitoringConfigurationParam.pTX1BallBreakMonitoringConfigurationData = IntPtr.Zero;
            ScriptOps.Tx1Tx2Tx3BallBreakMonitoringConfigurationParam.pTX2BallBreakMonitoringConfigurationData = IntPtr.Zero;
            ScriptOps.Tx1Tx2Tx3BallBreakMonitoringConfigurationParam.pTX3BallBreakMonitoringConfigurationData = pTX3BallBreakMonitoringConfigurationData;
            IntPtr data = GCHandle.Alloc(ScriptOps.Tx1Tx2Tx3BallBreakMonitoringConfigurationParam, GCHandleType.Pinned).AddrOfPinnedObject();
            int num;
            if (GlobalRef.g_NtvRS232Connect[(int)GlobalRef.g_RadarDeviceIndex] && GlobalRef.g_CasCadeDeviceSpiConnect == 0U)
            {
                num = m_TsWrapper.Calling_WriteAddr_Single(4294959848U, 1U);
                if (m_GuiManager.DllOps.itempDisconnect(false) == 0)
                {
                    string full_command = string.Format("Debug Port Disconnected", new object[0]);
                    m_GuiManager.RecordLog(0, full_command);
                    if (!GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
                    {
                        iRs232ConnectDisconnect_impl();
                    }
                }
            }
            if (m_RadarDeviceModeConfigParams.NumberOfRadarDevicesDetected <= 1)
            {
                string full_command2 = string.Format("ar1.SetRfTx2BallbreakMonConfig({0}, {1})", new object[]
                {
                    m_MonTx3BallBreakConfigParameters.ReportingMode,
                    (decimal)Math.Round(m_MonTx3BallBreakConfigParameters.TXReflectionCoeffMagnitudeThreshold, 1)
                });
                m_GuiManager.RecordLog(6, full_command2);
            }
            else
            {
                string full_command3 = string.Format("ar1.SetRfTx2BallbreakMonConfig_mult({0}, {1}, {2})", new object[]
                {
                    GlobalRef.g_RadarDeviceId,
                    m_MonTx3BallBreakConfigParameters.ReportingMode,
                    (decimal)Math.Round(m_MonTx3BallBreakConfigParameters.TXReflectionCoeffMagnitudeThreshold, 1)
                });
                m_GuiManager.RecordLog(6, full_command3);
            }
            uint g_RadarDeviceId = GlobalRef.g_RadarDeviceId;
            num = Imports.RadarLinkImpl_RfTxBallbreakMonConfig((byte)GlobalRef.g_RadarDeviceId, data);
            if ((num == 0 && ((GlobalRef.g_CasCadeDeviceSpiConnect & 1U) == 1U || (GlobalRef.g_CasCadeDeviceSpiConnect & 2U) == 2U || (GlobalRef.g_CasCadeDeviceSpiConnect & 4U) == 4U || (GlobalRef.g_CasCadeDeviceSpiConnect & 8U) == 8U)) || GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
            {
                string full_command4 = string.Format("Status: Passed", new object[0]);
                m_GuiManager.RecordLog(6, full_command4);
                for (int i = 0; i < 4; i++)
                {
                    if (jsonConfigInProgress)
                    {
                        break;
                    }
                    if (((ulong)g_RadarDeviceId & (ulong)(1L << (i & 31))) != 0UL)
                    {
                        int mmwaveDevIndex = getMmwaveDevIndex(i);
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].monitoringConfig.rlAllTxBallBreakMonCfg_t.p00001b.reportMode = (int)ScriptOps.TX3BallBreakMonitoringConfigurationParam.ReportingMode;
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].monitoringConfig.rlAllTxBallBreakMonCfg_t.p00001b.txReflCoeffMagThresh = m_MonTx3BallBreakConfigParameters.TXReflectionCoeffMagnitudeThreshold;
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].monitoringConfig.rlAllTxBallBreakMonCfg_t.isConfigured = 1;
                    }
                }
            }
            else
            {
                string msg = string.Format("Status: Failed, Error Type: {0}", new object[]
                {
                    GetErrorType(num)
                });
                GlobalRef.LuaWrapper.PrintError(msg);
            }
            if (GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
            {
                if (iRs232ConnectDisconnect_impl() == 0 && !GlobalRef.g_NtvRS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
                {
                    m_GuiManager.DllOps.iConnect(1U, 0U);
                    string full_command5 = string.Format("Debug Port Reconnected!", new object[0]);
                    m_GuiManager.RecordLog(9, full_command5);
                    ScriptOps.KeepTrying(2000, new Func<bool>(spare_read));
                }
            }
            else if (GlobalRef.g_CasCadeDeviceSpiConnect == 0U)
            {
                string full_command6 = string.Format("Error Occurred in Port open close", new object[0]);
                m_GuiManager.RecordLog(9, full_command6);
            }
            return num;
        }

        private int iSetRXGainPhaseMonConfig_Impl(bool is_starting_op, bool is_ending_op)
        {
            RxGainPhaseMonitoringConfigurationParam.ProfileIndex = (byte)m_MonRXGainPhaseConfigParameters.ProfileIndex;
            RxGainPhaseMonitoringConfigurationParam.RFFreqBitMask = (byte)(m_MonRXGainPhaseConfigParameters.RF1FreqBitMask | m_MonRXGainPhaseConfigParameters.RF2FreqBitMask << 1 | m_MonRXGainPhaseConfigParameters.RF3FreqBitMask << 2);
            RxGainPhaseMonitoringConfigurationParam.ReportingMode = (byte)m_MonRXGainPhaseConfigParameters.ReportingMode;
            RxGainPhaseMonitoringConfigurationParam.TxSelect = (byte)m_MonRXGainPhaseConfigParameters.TxSelect;
            RxGainPhaseMonitoringConfigurationParam.RxGainAbsoluteErrorThreshold = (ushort)(m_MonRXGainPhaseConfigParameters.RxGainAbsoluteErrorThreshold * 10.0);
            RxGainPhaseMonitoringConfigurationParam.RxGainMismatchThreshold = (ushort)(m_MonRXGainPhaseConfigParameters.RxGainMismatchThreshold * 10.0);
            RxGainPhaseMonitoringConfigurationParam.RxGainFlatnessErrorThreshold = (ushort)(m_MonRXGainPhaseConfigParameters.RxGainFlatnessErrorThreshold * 10.0);
            RxGainPhaseMonitoringConfigurationParam.RxPhaseMismatchThreshold = (ushort)((double)((int)m_MonRXGainPhaseConfigParameters.RxPhaseMismatchThreshold * 65536) / 360.0);
            RxGainPhaseMonitoringConfigurationParam.f000010 = (((int)((short)(m_MonRXGainPhaseConfigParameters.f000301 * 10.0)) & 65535) | (int)(m_MonRXGainPhaseConfigParameters.f000302 * 10.0) << 16);
            RxGainPhaseMonitoringConfigurationParam.f000011 = (((int)((short)(m_MonRXGainPhaseConfigParameters.f000303 * 10.0)) & 65535) | (int)(m_MonRXGainPhaseConfigParameters.f000304 * 10.0) << 16);
            RxGainPhaseMonitoringConfigurationParam.f000012 = (((int)((short)(m_MonRXGainPhaseConfigParameters.f000305 * 10.0)) & 65535) | (int)(m_MonRXGainPhaseConfigParameters.f000306 * 10.0) << 16);
            RxGainPhaseMonitoringConfigurationParam.f000013 = (((int)((short)(m_MonRXGainPhaseConfigParameters.f000307 * 10.0)) & 65535) | (int)(m_MonRXGainPhaseConfigParameters.f000308 * 10.0) << 16);
            RxGainPhaseMonitoringConfigurationParam.f000014 = (((int)((short)(m_MonRXGainPhaseConfigParameters.f000309 * 10.0)) & 65535) | (int)(m_MonRXGainPhaseConfigParameters.f00030a * 10.0) << 16);
            RxGainPhaseMonitoringConfigurationParam.f000015 = (((int)((short)(m_MonRXGainPhaseConfigParameters.f00030b * 10.0)) & 65535) | (int)(m_MonRXGainPhaseConfigParameters.f00030c * 10.0) << 16);
            RxGainPhaseMonitoringConfigurationParam.f000016 = (uint)((int)((ushort)(m_MonRXGainPhaseConfigParameters.f00030d * 65536.0 / 360.0)) | (int)((ushort)(m_MonRXGainPhaseConfigParameters.f00030e * 65536.0 / 360.0)) << 16);
            RxGainPhaseMonitoringConfigurationParam.f000017 = (uint)((int)((ushort)(m_MonRXGainPhaseConfigParameters.f00030f * 65536.0 / 360.0)) | (int)((ushort)(m_MonRXGainPhaseConfigParameters.f000310 * 65536.0 / 360.0)) << 16);
            RxGainPhaseMonitoringConfigurationParam.f000018 = (uint)((int)((ushort)(m_MonRXGainPhaseConfigParameters.f000311 * 65536.0 / 360.0)) | (int)((ushort)(m_MonRXGainPhaseConfigParameters.f000312 * 65536.0 / 360.0)) << 16);
            RxGainPhaseMonitoringConfigurationParam.f000019 = (uint)((int)((ushort)(m_MonRXGainPhaseConfigParameters.f000313 * 65536.0 / 360.0)) | (int)((ushort)(m_MonRXGainPhaseConfigParameters.f000314 * 65536.0 / 360.0)) << 16);
            RxGainPhaseMonitoringConfigurationParam.f00001a = (uint)((int)((ushort)(m_MonRXGainPhaseConfigParameters.f000315 * 65536.0 / 360.0)) | (int)((ushort)(m_MonRXGainPhaseConfigParameters.f000316 * 65536.0 / 360.0)) << 16);
            RxGainPhaseMonitoringConfigurationParam.f00001b = (uint)((int)((ushort)(m_MonRXGainPhaseConfigParameters.f000317 * 65536.0 / 360.0)) | (int)((ushort)(m_MonRXGainPhaseConfigParameters.f000318 * 65536.0 / 360.0)) << 16);
            RxGainPhaseMonitoringConfigurationParam.Reserved = 0U;
            RxGainPhaseMonitoringConfigurationParam.Reserved2 = 0U;
            IntPtr data = GCHandle.Alloc(RxGainPhaseMonitoringConfigurationParam, GCHandleType.Pinned).AddrOfPinnedObject();
            int num;
            if (GlobalRef.g_NtvRS232Connect[(int)GlobalRef.g_RadarDeviceIndex] && GlobalRef.g_CasCadeDeviceSpiConnect == 0U)
            {
                num = m_TsWrapper.Calling_WriteAddr_Single(4294959848U, 1U);
                if (m_GuiManager.DllOps.itempDisconnect(false) == 0)
                {
                    string full_command = string.Format("Debug Port Disconnected", new object[0]);
                    m_GuiManager.RecordLog(0, full_command);
                    if (!GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
                    {
                        iRs232ConnectDisconnect_impl();
                    }
                }
            }
            if (m_RadarDeviceModeConfigParams.NumberOfRadarDevicesDetected <= 1)
            {
                string full_command2 = string.Format("ar1.SetRfRxGainPhMonConfig({0}, {1}, {2}, {3}, {4} , {5}, {6}, {7}, {8}, {9}, {10}, {11}, {12}, {13}, {14}, {15}, {16}, {17}, {18}, {19}, {20}, {21}, {22}, {23}, {24}, {25}, {26}, {27}, {28}, {29}, {30}, {31}, {32}, {33})", new object[]
                {
                    m_MonRXGainPhaseConfigParameters.ProfileIndex,
                    m_MonRXGainPhaseConfigParameters.RF1FreqBitMask,
                    m_MonRXGainPhaseConfigParameters.RF2FreqBitMask,
                    m_MonRXGainPhaseConfigParameters.RF3FreqBitMask,
                    m_MonRXGainPhaseConfigParameters.ReportingMode,
                    m_MonRXGainPhaseConfigParameters.TxSelect,
                    (decimal)Math.Round(m_MonRXGainPhaseConfigParameters.RxGainAbsoluteErrorThreshold, 1),
                    (decimal)Math.Round(m_MonRXGainPhaseConfigParameters.RxGainMismatchThreshold, 1),
                    (decimal)Math.Round(m_MonRXGainPhaseConfigParameters.RxGainFlatnessErrorThreshold, 1),
                    m_MonRXGainPhaseConfigParameters.RxPhaseMismatchThreshold,
                    (decimal)Math.Round(m_MonRXGainPhaseConfigParameters.f000301, 1),
                    (decimal)Math.Round(m_MonRXGainPhaseConfigParameters.f000302, 1),
                    (decimal)Math.Round(m_MonRXGainPhaseConfigParameters.f000303, 1),
                    (decimal)Math.Round(m_MonRXGainPhaseConfigParameters.f000304, 1),
                    (decimal)Math.Round(m_MonRXGainPhaseConfigParameters.f000305, 1),
                    (decimal)Math.Round(m_MonRXGainPhaseConfigParameters.f000306, 1),
                    (decimal)Math.Round(m_MonRXGainPhaseConfigParameters.f000307, 1),
                    (decimal)Math.Round(m_MonRXGainPhaseConfigParameters.f000308, 1),
                    (decimal)Math.Round(m_MonRXGainPhaseConfigParameters.f000309, 1),
                    (decimal)Math.Round(m_MonRXGainPhaseConfigParameters.f00030a, 1),
                    (decimal)Math.Round(m_MonRXGainPhaseConfigParameters.f00030b, 1),
                    (decimal)Math.Round(m_MonRXGainPhaseConfigParameters.f00030c, 1),
                    (decimal)Math.Round(m_MonRXGainPhaseConfigParameters.f00030d, 2),
                    (decimal)Math.Round(m_MonRXGainPhaseConfigParameters.f00030e, 2),
                    (decimal)Math.Round(m_MonRXGainPhaseConfigParameters.f00030f, 2),
                    (decimal)Math.Round(m_MonRXGainPhaseConfigParameters.f000310, 2),
                    (decimal)Math.Round(m_MonRXGainPhaseConfigParameters.f000311, 2),
                    (decimal)Math.Round(m_MonRXGainPhaseConfigParameters.f000312, 2),
                    (decimal)Math.Round(m_MonRXGainPhaseConfigParameters.f000313, 2),
                    (decimal)Math.Round(m_MonRXGainPhaseConfigParameters.f000314, 2),
                    (decimal)Math.Round(m_MonRXGainPhaseConfigParameters.f000315, 2),
                    (decimal)Math.Round(m_MonRXGainPhaseConfigParameters.f000317, 2),
                    (decimal)Math.Round(m_MonRXGainPhaseConfigParameters.f000317, 2),
                    (decimal)Math.Round(m_MonRXGainPhaseConfigParameters.f000318, 2)
                });
                m_GuiManager.RecordLog(6, full_command2);
            }
            else
            {
                string full_command3 = string.Format("ar1.SetRfRxGainPhMonConfig_mult({0}, {1}, {2}, {3}, {4} , {5}, {6}, {7}, {8}, {9}, {10}, {11}, {12}, {13}, {14}, {15}, {16}, {17}, {18}, {19}, {20}, {21}, {22}, {23}, {24}, {25}, {26}, {27}, {28}, {29}, {30}, {31}, {32}, {33}, {34})", new object[]
                {
                    GlobalRef.g_RadarDeviceId,
                    m_MonRXGainPhaseConfigParameters.ProfileIndex,
                    m_MonRXGainPhaseConfigParameters.RF1FreqBitMask,
                    m_MonRXGainPhaseConfigParameters.RF2FreqBitMask,
                    m_MonRXGainPhaseConfigParameters.RF3FreqBitMask,
                    m_MonRXGainPhaseConfigParameters.ReportingMode,
                    m_MonRXGainPhaseConfigParameters.TxSelect,
                    (decimal)Math.Round(m_MonRXGainPhaseConfigParameters.RxGainAbsoluteErrorThreshold, 1),
                    (decimal)Math.Round(m_MonRXGainPhaseConfigParameters.RxGainMismatchThreshold, 1),
                    (decimal)Math.Round(m_MonRXGainPhaseConfigParameters.RxGainFlatnessErrorThreshold, 1),
                    m_MonRXGainPhaseConfigParameters.RxPhaseMismatchThreshold,
                    (decimal)Math.Round(m_MonRXGainPhaseConfigParameters.f000301, 1),
                    (decimal)Math.Round(m_MonRXGainPhaseConfigParameters.f000302, 1),
                    (decimal)Math.Round(m_MonRXGainPhaseConfigParameters.f000303, 1),
                    (decimal)Math.Round(m_MonRXGainPhaseConfigParameters.f000304, 1),
                    (decimal)Math.Round(m_MonRXGainPhaseConfigParameters.f000305, 1),
                    (decimal)Math.Round(m_MonRXGainPhaseConfigParameters.f000306, 1),
                    (decimal)Math.Round(m_MonRXGainPhaseConfigParameters.f000307, 1),
                    (decimal)Math.Round(m_MonRXGainPhaseConfigParameters.f000308, 1),
                    (decimal)Math.Round(m_MonRXGainPhaseConfigParameters.f000309, 1),
                    (decimal)Math.Round(m_MonRXGainPhaseConfigParameters.f00030a, 1),
                    (decimal)Math.Round(m_MonRXGainPhaseConfigParameters.f00030b, 1),
                    (decimal)Math.Round(m_MonRXGainPhaseConfigParameters.f00030c, 1),
                    (decimal)Math.Round(m_MonRXGainPhaseConfigParameters.f00030d, 2),
                    (decimal)Math.Round(m_MonRXGainPhaseConfigParameters.f00030e, 2),
                    (decimal)Math.Round(m_MonRXGainPhaseConfigParameters.f00030f, 2),
                    (decimal)Math.Round(m_MonRXGainPhaseConfigParameters.f000310, 2),
                    (decimal)Math.Round(m_MonRXGainPhaseConfigParameters.f000311, 2),
                    (decimal)Math.Round(m_MonRXGainPhaseConfigParameters.f000312, 2),
                    (decimal)Math.Round(m_MonRXGainPhaseConfigParameters.f000313, 2),
                    (decimal)Math.Round(m_MonRXGainPhaseConfigParameters.f000314, 2),
                    (decimal)Math.Round(m_MonRXGainPhaseConfigParameters.f000315, 2),
                    (decimal)Math.Round(m_MonRXGainPhaseConfigParameters.f000317, 2),
                    (decimal)Math.Round(m_MonRXGainPhaseConfigParameters.f000317, 2),
                    (decimal)Math.Round(m_MonRXGainPhaseConfigParameters.f000318, 2)
                });
                m_GuiManager.RecordLog(6, full_command3);
            }
            uint g_RadarDeviceId = GlobalRef.g_RadarDeviceId;
            num = Imports.RadarLinkImpl_RfRxGainPhMonConfig(GlobalRef.g_RadarDeviceId, data);
            if ((num == 0 && ((GlobalRef.g_CasCadeDeviceSpiConnect & 1U) == 1U || (GlobalRef.g_CasCadeDeviceSpiConnect & 2U) == 2U || (GlobalRef.g_CasCadeDeviceSpiConnect & 4U) == 4U || (GlobalRef.g_CasCadeDeviceSpiConnect & 8U) == 8U)) || GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
            {
                string full_command4 = string.Format("Status: Passed", new object[0]);
                m_GuiManager.RecordLog(6, full_command4);
                for (int i = 0; i < 4; i++)
                {
                    if (jsonConfigInProgress)
                    {
                        break;
                    }
                    if (((ulong)g_RadarDeviceId & (ulong)(1L << (i & 31))) != 0UL)
                    {
                        int mmwaveDevIndex = getMmwaveDevIndex(i);
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].monitoringConfig.rlRxGainPhaseMonConf_t.profileIndx = (int)RxGainPhaseMonitoringConfigurationParam.ProfileIndex;
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].monitoringConfig.rlRxGainPhaseMonConf_t.rfFreqBitMask = "0x" + RxGainPhaseMonitoringConfigurationParam.RFFreqBitMask.ToString("X");
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].monitoringConfig.rlRxGainPhaseMonConf_t.txSel = (int)RxGainPhaseMonitoringConfigurationParam.TxSelect;
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].monitoringConfig.rlRxGainPhaseMonConf_t.rxGainAbsThresh = m_MonRXGainPhaseConfigParameters.RxGainAbsoluteErrorThreshold;
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].monitoringConfig.rlRxGainPhaseMonConf_t.rxGainMismatchErrThresh = m_MonRXGainPhaseConfigParameters.RxGainMismatchThreshold;
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].monitoringConfig.rlRxGainPhaseMonConf_t.rxGainFlatnessErrThresh = m_MonRXGainPhaseConfigParameters.RxGainFlatnessErrorThreshold;
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].monitoringConfig.rlRxGainPhaseMonConf_t.rxGainPhaseMismatchErrThresh = (double)m_MonRXGainPhaseConfigParameters.RxPhaseMismatchThreshold;
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].monitoringConfig.rlRxGainPhaseMonConf_t.rxGainMismatchOffsetVal[0][1] = (double)((int)m_MonRXGainPhaseConfigParameters.f000301);
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].monitoringConfig.rlRxGainPhaseMonConf_t.rxGainMismatchOffsetVal[0][0] = m_MonRXGainPhaseConfigParameters.f000301 * 10.0 - GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].monitoringConfig.rlRxGainPhaseMonConf_t.rxGainMismatchOffsetVal[0][1] * 10.0;
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].monitoringConfig.rlRxGainPhaseMonConf_t.rxGainMismatchOffsetVal[0][3] = (double)((int)m_MonRXGainPhaseConfigParameters.f000302);
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].monitoringConfig.rlRxGainPhaseMonConf_t.rxGainMismatchOffsetVal[0][2] = m_MonRXGainPhaseConfigParameters.f000302 * 10.0 - GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].monitoringConfig.rlRxGainPhaseMonConf_t.rxGainMismatchOffsetVal[0][3] * 10.0;
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].monitoringConfig.rlRxGainPhaseMonConf_t.rxGainMismatchOffsetVal[0][5] = (double)((int)m_MonRXGainPhaseConfigParameters.f000303);
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].monitoringConfig.rlRxGainPhaseMonConf_t.rxGainMismatchOffsetVal[0][4] = m_MonRXGainPhaseConfigParameters.f000303 * 10.0 - GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].monitoringConfig.rlRxGainPhaseMonConf_t.rxGainMismatchOffsetVal[0][5] * 10.0;
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].monitoringConfig.rlRxGainPhaseMonConf_t.rxGainMismatchOffsetVal[0][7] = (double)((int)m_MonRXGainPhaseConfigParameters.f000304);
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].monitoringConfig.rlRxGainPhaseMonConf_t.rxGainMismatchOffsetVal[0][6] = m_MonRXGainPhaseConfigParameters.f000304 * 10.0 - GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].monitoringConfig.rlRxGainPhaseMonConf_t.rxGainMismatchOffsetVal[0][7] * 10.0;
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].monitoringConfig.rlRxGainPhaseMonConf_t.rxGainMismatchOffsetVal[1][1] = (double)((int)m_MonRXGainPhaseConfigParameters.f000305);
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].monitoringConfig.rlRxGainPhaseMonConf_t.rxGainMismatchOffsetVal[1][0] = m_MonRXGainPhaseConfigParameters.f000305 * 10.0 - GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].monitoringConfig.rlRxGainPhaseMonConf_t.rxGainMismatchOffsetVal[1][1] * 10.0;
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].monitoringConfig.rlRxGainPhaseMonConf_t.rxGainMismatchOffsetVal[1][3] = (double)((int)m_MonRXGainPhaseConfigParameters.f000306);
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].monitoringConfig.rlRxGainPhaseMonConf_t.rxGainMismatchOffsetVal[1][2] = m_MonRXGainPhaseConfigParameters.f000306 * 10.0 - GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].monitoringConfig.rlRxGainPhaseMonConf_t.rxGainMismatchOffsetVal[1][3] * 10.0;
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].monitoringConfig.rlRxGainPhaseMonConf_t.rxGainMismatchOffsetVal[1][5] = (double)((int)m_MonRXGainPhaseConfigParameters.f000307);
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].monitoringConfig.rlRxGainPhaseMonConf_t.rxGainMismatchOffsetVal[1][4] = m_MonRXGainPhaseConfigParameters.f000307 * 10.0 - GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].monitoringConfig.rlRxGainPhaseMonConf_t.rxGainMismatchOffsetVal[1][5] * 10.0;
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].monitoringConfig.rlRxGainPhaseMonConf_t.rxGainMismatchOffsetVal[1][7] = (double)((int)m_MonRXGainPhaseConfigParameters.f000308);
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].monitoringConfig.rlRxGainPhaseMonConf_t.rxGainMismatchOffsetVal[1][6] = m_MonRXGainPhaseConfigParameters.f000308 * 10.0 - GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].monitoringConfig.rlRxGainPhaseMonConf_t.rxGainMismatchOffsetVal[1][7] * 10.0;
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].monitoringConfig.rlRxGainPhaseMonConf_t.rxGainMismatchOffsetVal[2][1] = (double)((int)m_MonRXGainPhaseConfigParameters.f000309);
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].monitoringConfig.rlRxGainPhaseMonConf_t.rxGainMismatchOffsetVal[2][0] = m_MonRXGainPhaseConfigParameters.f000309 * 10.0 - GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].monitoringConfig.rlRxGainPhaseMonConf_t.rxGainMismatchOffsetVal[2][1] * 10.0;
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].monitoringConfig.rlRxGainPhaseMonConf_t.rxGainMismatchOffsetVal[2][3] = (double)((int)m_MonRXGainPhaseConfigParameters.f00030a);
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].monitoringConfig.rlRxGainPhaseMonConf_t.rxGainMismatchOffsetVal[2][2] = m_MonRXGainPhaseConfigParameters.f00030a * 10.0 - GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].monitoringConfig.rlRxGainPhaseMonConf_t.rxGainMismatchOffsetVal[2][3] * 10.0;
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].monitoringConfig.rlRxGainPhaseMonConf_t.rxGainMismatchOffsetVal[2][5] = (double)((int)m_MonRXGainPhaseConfigParameters.f00030b);
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].monitoringConfig.rlRxGainPhaseMonConf_t.rxGainMismatchOffsetVal[2][4] = m_MonRXGainPhaseConfigParameters.f00030b * 10.0 - GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].monitoringConfig.rlRxGainPhaseMonConf_t.rxGainMismatchOffsetVal[2][5] * 10.0;
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].monitoringConfig.rlRxGainPhaseMonConf_t.rxGainMismatchOffsetVal[2][7] = (double)((int)m_MonRXGainPhaseConfigParameters.f00030c);
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].monitoringConfig.rlRxGainPhaseMonConf_t.rxGainMismatchOffsetVal[2][6] = m_MonRXGainPhaseConfigParameters.f00030c * 10.0 - GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].monitoringConfig.rlRxGainPhaseMonConf_t.rxGainMismatchOffsetVal[2][7] * 10.0;
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].monitoringConfig.rlRxGainPhaseMonConf_t.rxGainPhaseMismatchOffsetVal[0][1] = (double)((int)m_MonRXGainPhaseConfigParameters.f00030d);
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].monitoringConfig.rlRxGainPhaseMonConf_t.rxGainPhaseMismatchOffsetVal[0][0] = m_MonRXGainPhaseConfigParameters.f00030d * 100.0 - GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].monitoringConfig.rlRxGainPhaseMonConf_t.rxGainPhaseMismatchOffsetVal[0][1] * 100.0;
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].monitoringConfig.rlRxGainPhaseMonConf_t.rxGainPhaseMismatchOffsetVal[0][3] = (double)((int)m_MonRXGainPhaseConfigParameters.f00030e);
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].monitoringConfig.rlRxGainPhaseMonConf_t.rxGainPhaseMismatchOffsetVal[0][2] = m_MonRXGainPhaseConfigParameters.f00030e * 100.0 - GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].monitoringConfig.rlRxGainPhaseMonConf_t.rxGainPhaseMismatchOffsetVal[0][3] * 100.0;
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].monitoringConfig.rlRxGainPhaseMonConf_t.rxGainPhaseMismatchOffsetVal[0][5] = (double)((int)m_MonRXGainPhaseConfigParameters.f00030f);
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].monitoringConfig.rlRxGainPhaseMonConf_t.rxGainPhaseMismatchOffsetVal[0][4] = m_MonRXGainPhaseConfigParameters.f00030f * 100.0 - GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].monitoringConfig.rlRxGainPhaseMonConf_t.rxGainPhaseMismatchOffsetVal[0][5] * 100.0;
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].monitoringConfig.rlRxGainPhaseMonConf_t.rxGainPhaseMismatchOffsetVal[0][7] = (double)((int)m_MonRXGainPhaseConfigParameters.f000310);
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].monitoringConfig.rlRxGainPhaseMonConf_t.rxGainPhaseMismatchOffsetVal[0][6] = m_MonRXGainPhaseConfigParameters.f000310 * 100.0 - GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].monitoringConfig.rlRxGainPhaseMonConf_t.rxGainPhaseMismatchOffsetVal[0][7] * 100.0;
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].monitoringConfig.rlRxGainPhaseMonConf_t.rxGainPhaseMismatchOffsetVal[1][1] = (double)((int)m_MonRXGainPhaseConfigParameters.f000311);
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].monitoringConfig.rlRxGainPhaseMonConf_t.rxGainPhaseMismatchOffsetVal[1][0] = m_MonRXGainPhaseConfigParameters.f000311 * 100.0 - GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].monitoringConfig.rlRxGainPhaseMonConf_t.rxGainPhaseMismatchOffsetVal[1][1] * 100.0;
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].monitoringConfig.rlRxGainPhaseMonConf_t.rxGainPhaseMismatchOffsetVal[1][3] = (double)((int)m_MonRXGainPhaseConfigParameters.f000312);
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].monitoringConfig.rlRxGainPhaseMonConf_t.rxGainPhaseMismatchOffsetVal[1][2] = m_MonRXGainPhaseConfigParameters.f000312 * 100.0 - GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].monitoringConfig.rlRxGainPhaseMonConf_t.rxGainPhaseMismatchOffsetVal[1][3] * 100.0;
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].monitoringConfig.rlRxGainPhaseMonConf_t.rxGainPhaseMismatchOffsetVal[1][5] = (double)((int)m_MonRXGainPhaseConfigParameters.f000313);
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].monitoringConfig.rlRxGainPhaseMonConf_t.rxGainPhaseMismatchOffsetVal[1][4] = m_MonRXGainPhaseConfigParameters.f000313 * 100.0 - GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].monitoringConfig.rlRxGainPhaseMonConf_t.rxGainPhaseMismatchOffsetVal[1][5] * 100.0;
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].monitoringConfig.rlRxGainPhaseMonConf_t.rxGainPhaseMismatchOffsetVal[1][7] = (double)((int)m_MonRXGainPhaseConfigParameters.f000314);
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].monitoringConfig.rlRxGainPhaseMonConf_t.rxGainPhaseMismatchOffsetVal[1][6] = m_MonRXGainPhaseConfigParameters.f000314 * 100.0 - GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].monitoringConfig.rlRxGainPhaseMonConf_t.rxGainPhaseMismatchOffsetVal[1][7] * 100.0;
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].monitoringConfig.rlRxGainPhaseMonConf_t.rxGainPhaseMismatchOffsetVal[2][1] = (double)((int)m_MonRXGainPhaseConfigParameters.f000315);
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].monitoringConfig.rlRxGainPhaseMonConf_t.rxGainPhaseMismatchOffsetVal[2][0] = m_MonRXGainPhaseConfigParameters.f000315 * 100.0 - GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].monitoringConfig.rlRxGainPhaseMonConf_t.rxGainPhaseMismatchOffsetVal[2][1] * 100.0;
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].monitoringConfig.rlRxGainPhaseMonConf_t.rxGainPhaseMismatchOffsetVal[2][3] = (double)((int)m_MonRXGainPhaseConfigParameters.f000316);
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].monitoringConfig.rlRxGainPhaseMonConf_t.rxGainPhaseMismatchOffsetVal[2][2] = m_MonRXGainPhaseConfigParameters.f000316 * 100.0 - GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].monitoringConfig.rlRxGainPhaseMonConf_t.rxGainPhaseMismatchOffsetVal[2][3] * 100.0;
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].monitoringConfig.rlRxGainPhaseMonConf_t.rxGainPhaseMismatchOffsetVal[2][5] = (double)((int)m_MonRXGainPhaseConfigParameters.f000317);
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].monitoringConfig.rlRxGainPhaseMonConf_t.rxGainPhaseMismatchOffsetVal[2][4] = m_MonRXGainPhaseConfigParameters.f000317 * 100.0 - GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].monitoringConfig.rlRxGainPhaseMonConf_t.rxGainPhaseMismatchOffsetVal[2][5] * 100.0;
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].monitoringConfig.rlRxGainPhaseMonConf_t.rxGainPhaseMismatchOffsetVal[2][7] = (double)((int)m_MonRXGainPhaseConfigParameters.f000318);
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].monitoringConfig.rlRxGainPhaseMonConf_t.rxGainPhaseMismatchOffsetVal[2][6] = m_MonRXGainPhaseConfigParameters.f000318 * 100.0 - GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].monitoringConfig.rlRxGainPhaseMonConf_t.rxGainPhaseMismatchOffsetVal[2][7] * 100.0;
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].monitoringConfig.rlRxGainPhaseMonConf_t.isConfigured = 1;
                    }
                }
            }
            else
            {
                string msg = string.Format("Status: Failed, Error Type: {0}", new object[]
                {
                    GetErrorType(num)
                });
                GlobalRef.LuaWrapper.PrintError(msg);
            }
            if (GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
            {
                if (iRs232ConnectDisconnect_impl() == 0 && !GlobalRef.g_NtvRS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
                {
                    m_GuiManager.DllOps.iConnect(1U, 0U);
                    string full_command5 = string.Format("Debug Port Reconnected!", new object[0]);
                    m_GuiManager.RecordLog(9, full_command5);
                    ScriptOps.KeepTrying(2000, new Func<bool>(spare_read));
                }
            }
            else if (GlobalRef.g_CasCadeDeviceSpiConnect == 0U)
            {
                string full_command6 = string.Format("Error Occurred in Port open close", new object[0]);
                m_GuiManager.RecordLog(9, full_command6);
            }
            return num;
        }

        private int iSetInterRxGainPhaseFreqControlConfig_Impl(bool is_starting_op, bool is_ending_op)
        {
            InterRxCGainPhaseFreqControlonfigurationParam.ProfileIndex = (byte)m_InterRxGainPhaseFreqControlConfigParameters.ProfileIndex;
            InterRxCGainPhaseFreqControlonfigurationParam.Reserved = 0;
            InterRxCGainPhaseFreqControlonfigurationParam.Reserved2 = 0;
            InterRxCGainPhaseFreqControlonfigurationParam.DigitalGain = (uint)((int)((byte)(m_InterRxGainPhaseFreqControlConfigParameters.Rx1DigitalGain * 10.0)) | (int)((byte)(m_InterRxGainPhaseFreqControlConfigParameters.Rx2DigitalGain * 10.0)) << 8 | (int)((byte)(m_InterRxGainPhaseFreqControlConfigParameters.Rx3DigitalGain * 10.0)) << 16 | (int)((byte)(m_InterRxGainPhaseFreqControlConfigParameters.Rx4DigitalGain * 10.0)) << 24);
            InterRxCGainPhaseFreqControlonfigurationParam.Rx1Rx2DigitalPhaseShift = (uint)((int)((ushort)(m_InterRxGainPhaseFreqControlConfigParameters.Rx1DigitalPhaseShift * 65535.0 / 360.0)) | (int)((ushort)(m_InterRxGainPhaseFreqControlConfigParameters.Rx2DigitalPhaseShift * 65535.0 / 360.0)) << 16);
            InterRxCGainPhaseFreqControlonfigurationParam.Rx3Rx4DigitalPhaseShift = (uint)((int)((ushort)(m_InterRxGainPhaseFreqControlConfigParameters.Rx3DigitalPhaseShift * 65535.0 / 360.0)) | (int)((ushort)(m_InterRxGainPhaseFreqControlConfigParameters.Rx4DigitalPhaseShift * 65535.0 / 360.0)) << 16);
            InterRxCGainPhaseFreqControlonfigurationParam.Rx1Rx2DigitalFreqShift = (uint)((int)((ushort)(m_InterRxGainPhaseFreqControlConfigParameters.Rx1DigitalFreqShift / 4.0)) | (int)((ushort)(m_InterRxGainPhaseFreqControlConfigParameters.Rx2DigitalFreqShift / 4.0)) << 16);
            InterRxCGainPhaseFreqControlonfigurationParam.Rx3Rx4DigitalFreqShift = (uint)((int)((ushort)(m_InterRxGainPhaseFreqControlConfigParameters.Rx3DigitalFreqShift / 4.0)) | (int)((ushort)(m_InterRxGainPhaseFreqControlConfigParameters.Rx4DigitalFreqShift / 4.0)) << 16);
            IntPtr data = GCHandle.Alloc(InterRxCGainPhaseFreqControlonfigurationParam, GCHandleType.Pinned).AddrOfPinnedObject();
            int num;
            if (GlobalRef.g_NtvRS232Connect[(int)GlobalRef.g_RadarDeviceIndex] && GlobalRef.g_CasCadeDeviceSpiConnect == 0U)
            {
                num = m_TsWrapper.Calling_WriteAddr_Single(4294959848U, 1U);
                if (m_GuiManager.DllOps.itempDisconnect(false) == 0)
                {
                    string full_command = string.Format("Debug Port Disconnected", new object[0]);
                    m_GuiManager.RecordLog(0, full_command);
                    if (!GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
                    {
                        iRs232ConnectDisconnect_impl();
                    }
                }
            }
            if (m_RadarDeviceModeConfigParams.NumberOfRadarDevicesDetected <= 1)
            {
                string full_command2 = string.Format("ar1.SetRfInterRxGainPhFreqConfig({0}, {1}, {2}, {3}, {4}, {5}, {6}, {7}, {8}, {9}, {10}, {11}, {12})", new object[]
                {
                    m_InterRxGainPhaseFreqControlConfigParameters.ProfileIndex,
                    (decimal)Math.Round(m_InterRxGainPhaseFreqControlConfigParameters.Rx1DigitalGain, 1),
                    (decimal)Math.Round(m_InterRxGainPhaseFreqControlConfigParameters.Rx2DigitalGain, 1),
                    (decimal)Math.Round(m_InterRxGainPhaseFreqControlConfigParameters.Rx3DigitalGain, 1),
                    (decimal)Math.Round(m_InterRxGainPhaseFreqControlConfigParameters.Rx4DigitalGain, 1),
                    (decimal)Math.Round(m_InterRxGainPhaseFreqControlConfigParameters.Rx1DigitalPhaseShift, 2),
                    (decimal)Math.Round(m_InterRxGainPhaseFreqControlConfigParameters.Rx2DigitalPhaseShift, 2),
                    (decimal)Math.Round(m_InterRxGainPhaseFreqControlConfigParameters.Rx3DigitalPhaseShift, 2),
                    (decimal)Math.Round(m_InterRxGainPhaseFreqControlConfigParameters.Rx4DigitalPhaseShift, 2),
                    (decimal)m_InterRxGainPhaseFreqControlConfigParameters.Rx1DigitalFreqShift,
                    (decimal)m_InterRxGainPhaseFreqControlConfigParameters.Rx2DigitalFreqShift,
                    (decimal)m_InterRxGainPhaseFreqControlConfigParameters.Rx3DigitalFreqShift,
                    (decimal)m_InterRxGainPhaseFreqControlConfigParameters.Rx4DigitalFreqShift
                });
                m_GuiManager.RecordLog(6, full_command2);
            }
            else
            {
                string full_command3 = string.Format("ar1.SetRfInterRxGainPhFreqConfig_mult({0}, {1}, {2}, {3}, {4}, {5}, {6}, {7}, {8}, {9}, {10}, {11}, {12}, {13}})", new object[]
                {
                    GlobalRef.g_RadarDeviceId,
                    m_MonRXIFStageConfigParameters.ProfileIndex,
                    (decimal)Math.Round(m_InterRxGainPhaseFreqControlConfigParameters.Rx1DigitalGain, 1),
                    (decimal)Math.Round(m_InterRxGainPhaseFreqControlConfigParameters.Rx2DigitalGain, 1),
                    (decimal)Math.Round(m_InterRxGainPhaseFreqControlConfigParameters.Rx3DigitalGain, 1),
                    (decimal)Math.Round(m_InterRxGainPhaseFreqControlConfigParameters.Rx4DigitalGain, 1),
                    (decimal)Math.Round(m_InterRxGainPhaseFreqControlConfigParameters.Rx1DigitalPhaseShift, 2),
                    (decimal)Math.Round(m_InterRxGainPhaseFreqControlConfigParameters.Rx2DigitalPhaseShift, 2),
                    (decimal)Math.Round(m_InterRxGainPhaseFreqControlConfigParameters.Rx3DigitalPhaseShift, 2),
                    (decimal)Math.Round(m_InterRxGainPhaseFreqControlConfigParameters.Rx4DigitalPhaseShift, 2),
                    (decimal)m_InterRxGainPhaseFreqControlConfigParameters.Rx1DigitalFreqShift,
                    (decimal)m_InterRxGainPhaseFreqControlConfigParameters.Rx2DigitalFreqShift,
                    (decimal)m_InterRxGainPhaseFreqControlConfigParameters.Rx3DigitalFreqShift,
                    (decimal)m_InterRxGainPhaseFreqControlConfigParameters.Rx4DigitalFreqShift
                });
                m_GuiManager.RecordLog(6, full_command3);
            }
            uint g_RadarDeviceId = GlobalRef.g_RadarDeviceId;
            num = Imports.RadarLinkImpl_RfInterRxGainPhaseConfig(GlobalRef.g_RadarDeviceId, data);
            if ((num == 0 && ((GlobalRef.g_CasCadeDeviceSpiConnect & 1U) == 1U || (GlobalRef.g_CasCadeDeviceSpiConnect & 2U) == 2U || (GlobalRef.g_CasCadeDeviceSpiConnect & 4U) == 4U || (GlobalRef.g_CasCadeDeviceSpiConnect & 8U) == 8U)) || GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
            {
                string full_command4 = string.Format("Status: Passed", new object[0]);
                m_GuiManager.RecordLog(6, full_command4);
                for (int i = 0; i < 4; i++)
                {
                    if (jsonConfigInProgress)
                    {
                        break;
                    }
                    if (((ulong)g_RadarDeviceId & (ulong)(1L << (i & 31))) != 0UL)
                    {
                        int mmwaveDevIndex = getMmwaveDevIndex(i);
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlInterRxGainPhConf_t.profileIndx = (int)InterRxCGainPhaseFreqControlonfigurationParam.ProfileIndex;
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlInterRxGainPhConf_t.digRxGain[0] = m_InterRxGainPhaseFreqControlConfigParameters.Rx1DigitalGain;
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlInterRxGainPhConf_t.digRxGain[1] = m_InterRxGainPhaseFreqControlConfigParameters.Rx2DigitalGain;
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlInterRxGainPhConf_t.digRxGain[2] = m_InterRxGainPhaseFreqControlConfigParameters.Rx3DigitalGain;
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlInterRxGainPhConf_t.digRxGain[3] = m_InterRxGainPhaseFreqControlConfigParameters.Rx4DigitalGain;
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlInterRxGainPhConf_t.digRxPhShift[0] = m_InterRxGainPhaseFreqControlConfigParameters.Rx1DigitalPhaseShift;
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlInterRxGainPhConf_t.digRxPhShift[1] = m_InterRxGainPhaseFreqControlConfigParameters.Rx2DigitalPhaseShift;
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlInterRxGainPhConf_t.digRxPhShift[2] = m_InterRxGainPhaseFreqControlConfigParameters.Rx3DigitalPhaseShift;
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlInterRxGainPhConf_t.digRxPhShift[3] = m_InterRxGainPhaseFreqControlConfigParameters.Rx4DigitalPhaseShift;
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlInterRxGainPhConf_t.isConfigured = 1;
                    }
                }
            }
            else
            {
                string msg = string.Format("Status: Failed, Error Type: {0}", new object[]
                {
                    GetErrorType(num)
                });
                GlobalRef.LuaWrapper.PrintError(msg);
            }
            if (GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
            {
                if (iRs232ConnectDisconnect_impl() == 0 && !GlobalRef.g_NtvRS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
                {
                    m_GuiManager.DllOps.iConnect(1U, 0U);
                    string full_command5 = string.Format("Debug Port Reconnected!", new object[0]);
                    m_GuiManager.RecordLog(9, full_command5);
                    ScriptOps.KeepTrying(2000, new Func<bool>(spare_read));
                }
            }
            else if (GlobalRef.g_CasCadeDeviceSpiConnect == 0U)
            {
                string full_command6 = string.Format("Error Occurred in Port open close", new object[0]);
                m_GuiManager.RecordLog(9, full_command6);
            }
            return num;
        }

        public int iSetTDACaptureConnectConfig_Impl(bool is_starting_op, bool is_ending_op)
        {
            int num = -1;
            ushort num2 = 0;
            if (!GlobalRef.g_TDACaptureCardConnectStatus)
            {
                TDAethernetInitConfigurationParam.au8DestiIpAddr0 = m_TDAEthernetInitConfigParams.au8DestiIpAddr0;
                TDAethernetInitConfigurationParam.au8DestiIpAddr1 = m_TDAEthernetInitConfigParams.au8DestiIpAddr1;
                TDAethernetInitConfigurationParam.au8DestiIpAddr2 = m_TDAEthernetInitConfigParams.au8DestiIpAddr2;
                TDAethernetInitConfigurationParam.au8DestiIpAddr3 = m_TDAEthernetInitConfigParams.au8DestiIpAddr3;
                TDAethernetInitConfigurationParam.u32ConfigPortNo = (int)m_TDAEthernetInitConfigParams.u32ConfigPortNo;
                TDAethernetInitConfigurationParam.deviceMap = m_TDAEthernetInitConfigParams.deviceMap;
                GlobalRef.g_TDADeviceMap = TDAethernetInitConfigurationParam.deviceMap;
                try
                {
                    num = Imports.registerTDAStatusCallback(TDAEthernetEventHandlercallback);
                }
                catch (Exception ex)
                {
                    string.Format("Not able to connect with the TDA board. Please check whether the Capture Card is connected to the network!", new object[0]);
                    m_GuiManager.Error(ex.Message, ex.StackTrace);
                    return num;
                }
                string full_command = string.Format("TDAStatusCallback Event Registered", new object[0]);
                m_GuiManager.RecordLog(2, full_command);
                if (num == 0)
                {
                    string full_command2 = string.Format("registerTDAStatusCallback Status: Passed", new object[0]);
                    m_GuiManager.RecordLog(6, full_command2);
                }
                else
                {
                    string full_command3 = string.Format("registerTDAStatusCallback Status: Failed", new object[0]);
                    m_GuiManager.RecordLog(6, full_command3);
                }
                string full_command4 = string.Format("ar1.ConnectTDA(\"{0}\", {1}, {2})", new object[]
                {
                    string.Concat(new string[]
                    {
                        Convert.ToString(TDAethernetInitConfigurationParam.au8DestiIpAddr0),
                        ".",
                        Convert.ToString(TDAethernetInitConfigurationParam.au8DestiIpAddr1),
                        ".",
                        Convert.ToString(TDAethernetInitConfigurationParam.au8DestiIpAddr2),
                        ".",
                        Convert.ToString(TDAethernetInitConfigurationParam.au8DestiIpAddr3)
                    }),
                    TDAethernetInitConfigurationParam.u32ConfigPortNo,
                    TDAethernetInitConfigurationParam.deviceMap
                });
                m_GuiManager.RecordLog(6, full_command4);
                ushort[] array = new ushort[]
                {
                    (ushort)TDAethernetInitConfigurationParam.au8DestiIpAddr0,
                    (ushort)TDAethernetInitConfigurationParam.au8DestiIpAddr1,
                    (ushort)TDAethernetInitConfigurationParam.au8DestiIpAddr2,
                    (ushort)TDAethernetInitConfigurationParam.au8DestiIpAddr3
                };
                string text = string.Concat(new string[]
                {
                    array[0].ToString(),
                    ".",
                    array[1].ToString(),
                    ".",
                    array[2].ToString(),
                    ".",
                    array[3].ToString()
                });
                GlobalRef.f0002cf = text;
                try
                {
                    num = Imports.ethernetConnect(text, (uint)TDAethernetInitConfigurationParam.u32ConfigPortNo, TDAethernetInitConfigurationParam.deviceMap);
                    if (num != 0)
                    {
                        string msg = string.Format("Not able to connect with the TDA board. Please check whether the Capture Card is connected to the network!", new object[0]);
                        GlobalRef.LuaWrapper.PrintError(msg);
                        return num;
                    }
                }
                catch (Exception ex2)
                {
                    string msg2 = string.Format("Exception occured while connecting to the capture card!", new object[0]);
                    GlobalRef.LuaWrapper.PrintError(msg2);
                    m_GuiManager.Error(ex2.Message, ex2.StackTrace);
                    return num;
                }
                byte b = (byte)num;
                ScriptOps.asyncEvent.TDACaptureCardConnect = 0U;
                while (ScriptOps.asyncEvent.TDACaptureCardConnect == 0U)
                {
                    Thread.Sleep(100);
                    num2 += 1;
                    if (num2 > 20)
                    {
                        string msg3 = string.Format("No Acknowledgment received from the Capture Card!", new object[0]);
                        GlobalRef.LuaWrapper.PrintError(msg3);
                        return -1;
                    }
                }
                if (b == 0)
                {
                    string full_command5 = string.Format("ConnectTDACaptureCard Status: Passed", new object[0]);
                    m_GuiManager.RecordLog(6, full_command5);
                    GlobalRef.LuaWrapper.PrintLuaWarning("TDA Capture Card Status : CONNECTED!");
                    GlobalRef.g_TDACaptureCardConnectStatus = true;
                    ScriptOps.m_MainForm.TDAxxCaptureCard.UpdateTDACaptureCardDeviceConnectionConfigDataToGUI(true);
                    ScriptOps.m_MainForm.iSetDevice1Checked();
                }
                else
                {
                    GlobalRef.g_TDACaptureCardConnectStatus = false;
                    ScriptOps.m_MainForm.TDAxxCaptureCard.UpdateTDACaptureCardDeviceConnectionConfigDataToGUI(false);
                }
            }
            else if (GlobalRef.g_TDACaptureCardConnectStatus)
            {
                SetSopCmd(1, 4);
                string full_command6 = string.Format("ar1.DisconnectTDA()", new object[0]);
                m_GuiManager.RecordLog(6, full_command6);
                try
                {
                    num = Imports.ethernetDisconnect();
                    if (num != 0)
                    {
                        string msg4 = string.Format("Closing the socket failed!", new object[0]);
                        GlobalRef.LuaWrapper.PrintError(msg4);
                    }
                }
                catch (Exception ex3)
                {
                    string msg5 = string.Format("Exception occured while disconnecting from the capture card!", new object[0]);
                    GlobalRef.LuaWrapper.PrintError(msg5);
                    m_GuiManager.Error(ex3.Message, ex3.StackTrace);
                    return num;
                }
                if (num == 0)
                {
                    GlobalRef.g_TDACaptureCardConnectStatus = false;
                    ScriptOps.m_MainForm.TDAxxCaptureCard.UpdateTDACaptureCardDeviceConnectionConfigDataToGUI(false);
                    string full_command7 = string.Format("Status: Passed", new object[0]);
                    m_GuiManager.RecordLog(2, full_command7);
                    GlobalRef.LuaWrapper.PrintLuaWarning("TDA Capture Card Status : DISCONNECTED!");
                    ScriptOps.m_MainForm.TDAxxCaptureCard.SetTDAVersion("-");
                    for (int i = 0; i < 4; i++)
                    {
                        GlobalRef.g_TDAsetWidthHeightDone[i] = false;
                    }
                    ScriptOps.m_MainForm.ChirpConfigTab.SetWidthAndHeight(0U, 0U);
                    ScriptOps.m_MainForm.ChirpConfigTab.UpdateDeviceFramingStatus(1U, 0U);
                }
                else
                {
                    GlobalRef.g_TDACaptureCardConnectStatus = true;
                    ScriptOps.m_MainForm.TDAxxCaptureCard.UpdateTDACaptureCardDeviceConnectionConfigDataToGUI(true);
                    string full_command8 = string.Format("Status: Failed", new object[0]);
                    m_GuiManager.RecordLog(6, full_command8);
                }
            }
            return num;
        }

        public int DisconnectTDA()
        {
            int num = -1;
            if (GlobalRef.g_TDACaptureCardConnectStatus)
            {
                SetSopCmd(1, 4);
                string full_command = string.Format("ar1.DisconnectTDA()", new object[0]);
                m_GuiManager.RecordLog(6, full_command);
                try
                {
                    num = Imports.ethernetDisconnect();
                    if (num != 0)
                    {
                        string msg = string.Format("Closing the socket failed!", new object[0]);
                        GlobalRef.LuaWrapper.PrintError(msg);
                    }
                }
                catch (Exception ex)
                {
                    string msg2 = string.Format("Exception occured while disconnecting from the capture card!", new object[0]);
                    GlobalRef.LuaWrapper.PrintError(msg2);
                    m_GuiManager.Error(ex.Message, ex.StackTrace);
                    return num;
                }
                if (num == 0)
                {
                    GlobalRef.g_TDACaptureCardConnectStatus = false;
                    ScriptOps.m_MainForm.TDAxxCaptureCard.UpdateTDACaptureCardDeviceConnectionConfigDataToGUI(false);
                    string full_command2 = string.Format("Status: Passed", new object[0]);
                    m_GuiManager.RecordLog(2, full_command2);
                    GlobalRef.LuaWrapper.PrintLuaWarning("TDA Capture Card Status : DISCONNECTED!");
                    ScriptOps.m_MainForm.TDAxxCaptureCard.SetTDAVersion("-");
                    for (int i = 0; i < 4; i++)
                    {
                        GlobalRef.g_TDAsetWidthHeightDone[i] = false;
                    }
                    ScriptOps.m_MainForm.ChirpConfigTab.SetWidthAndHeight(0U, 0U);
                    ScriptOps.m_MainForm.ChirpConfigTab.UpdateDeviceFramingStatus(1U, 0U);
                    return num;
                }
                GlobalRef.g_TDACaptureCardConnectStatus = true;
                ScriptOps.m_MainForm.TDAxxCaptureCard.UpdateTDACaptureCardDeviceConnectionConfigDataToGUI(true);
                string full_command3 = string.Format("Status: Failed", new object[0]);
                m_GuiManager.RecordLog(6, full_command3);
                return num;
            }
            return num;
        }

        public int iSetDataCaptureConnectConfig_Impl(bool is_starting_op, bool is_ending_op)
        {
            int num = -1;
            if (!GlobalRef.g_CaptureCardConnectStatue)
            {
                ethernetInitConfigurationParam.f00001c = m_EthernetInitConfigParams.f00001c;
                ethernetInitConfigurationParam.f00001d = m_EthernetInitConfigParams.f00001d;
                ethernetInitConfigurationParam.f00001e = m_EthernetInitConfigParams.f00001e;
                ethernetInitConfigurationParam.f00001f = m_EthernetInitConfigParams.f00001f;
                ethernetInitConfigurationParam.f000020 = m_EthernetInitConfigParams.f000020;
                ethernetInitConfigurationParam.f000021 = m_EthernetInitConfigParams.f000021;
                ethernetInitConfigurationParam.au8SourceIpAddr0 = m_EthernetInitConfigParams.au8SourceIpAddr0;
                ethernetInitConfigurationParam.au8SourceIpAddr1 = m_EthernetInitConfigParams.au8SourceIpAddr1;
                ethernetInitConfigurationParam.au8SourceIpAddr2 = m_EthernetInitConfigParams.au8SourceIpAddr2;
                ethernetInitConfigurationParam.au8SourceIpAddr3 = m_EthernetInitConfigParams.au8SourceIpAddr3;
                ethernetInitConfigurationParam.au8DestiIpAddr0 = m_EthernetInitConfigParams.au8DestiIpAddr0;
                ethernetInitConfigurationParam.au8DestiIpAddr1 = m_EthernetInitConfigParams.au8DestiIpAddr1;
                ethernetInitConfigurationParam.au8DestiIpAddr2 = m_EthernetInitConfigParams.au8DestiIpAddr2;
                ethernetInitConfigurationParam.au8DestiIpAddr3 = m_EthernetInitConfigParams.au8DestiIpAddr3;
                ethernetInitConfigurationParam.u32ConfigPortNo = (int)m_EthernetInitConfigParams.u32ConfigPortNo;
                ethernetInitConfigurationParam.u32RecordPortNo = (int)m_EthernetInitConfigParams.u32RecordPortNo;
                string arg = string.Concat(new string[]
                {
                    Convert.ToString(ethernetInitConfigurationParam.au8DestiIpAddr0),
                    ".",
                    Convert.ToString(ethernetInitConfigurationParam.au8DestiIpAddr1),
                    ".",
                    Convert.ToString(ethernetInitConfigurationParam.au8DestiIpAddr2),
                    ".",
                    Convert.ToString(ethernetInitConfigurationParam.au8DestiIpAddr3)
                });
                if (m_RadarDeviceModeConfigParams.NumberOfRadarDevicesDetected <= 1)
                {
                    string full_command = string.Format("ar1.CaptureCardConfig_EthInit(\"{0}\", \"{1}\", \"{2}\", {3}, {4})", new object[]
                    {
                        string.Concat(new string[]
                        {
                            Convert.ToString(ethernetInitConfigurationParam.au8SourceIpAddr0),
                            ".",
                            Convert.ToString(ethernetInitConfigurationParam.au8SourceIpAddr1),
                            ".",
                            Convert.ToString(ethernetInitConfigurationParam.au8SourceIpAddr2),
                            ".",
                            Convert.ToString(ethernetInitConfigurationParam.au8SourceIpAddr3)
                        }),
                        string.Concat(new string[]
                        {
                            Convert.ToString(ethernetInitConfigurationParam.au8DestiIpAddr0),
                            ".",
                            Convert.ToString(ethernetInitConfigurationParam.au8DestiIpAddr1),
                            ".",
                            Convert.ToString(ethernetInitConfigurationParam.au8DestiIpAddr2),
                            ".",
                            Convert.ToString(ethernetInitConfigurationParam.au8DestiIpAddr3)
                        }),
                        string.Concat(new string[]
                        {
                            ethernetInitConfigurationParam.f00001c.ToString("x"),
                            ":",
                            ethernetInitConfigurationParam.f00001d.ToString("x"),
                            ":",
                            ethernetInitConfigurationParam.f00001e.ToString("x"),
                            ":",
                            ethernetInitConfigurationParam.f00001f.ToString("x"),
                            ":",
                            ethernetInitConfigurationParam.f000020.ToString("x"),
                            ":",
                            ethernetInitConfigurationParam.f000021.ToString("x")
                        }),
                        ethernetInitConfigurationParam.u32ConfigPortNo,
                        ethernetInitConfigurationParam.u32RecordPortNo
                    });
                    m_GuiManager.RecordLog(6, full_command);
                }
                if (GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex] && iRs232ConnectDisconnect_impl() == 0 && !GlobalRef.g_NtvRS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
                {
                    m_GuiManager.DllOps.iConnect(1U, 0U);
                    string full_command2 = string.Format("Debug Port Reconnected!", new object[0]);
                    m_GuiManager.RecordLog(9, full_command2);
                    ScriptOps.KeepTrying(2000, new Func<bool>(spare_read));
                }
                RFDCCardModeConfigurationParam.eLogMode = m_EthernetModeConfigParams.eLogMode;
                string arg2 = string.Empty;
                if (RFDCCardModeConfigurationParam.eLogMode == 1U)
                {
                    arg2 = "raw";
                }
                else if (RFDCCardModeConfigurationParam.eLogMode == 2U)
                {
                    arg2 = "multi";
                }
                RFDCCardModeConfigurationParam.eDataXferMode = m_EthernetModeConfigParams.eDataXferMode;
                string arg3 = string.Empty;
                if (RFDCCardModeConfigurationParam.eDataXferMode == 1U)
                {
                    arg3 = "LVDSCapture";
                }
                else if (RFDCCardModeConfigurationParam.eDataXferMode == 2U)
                {
                    arg3 = "LVDSPlayback";
                }
                RFDCCardModeConfigurationParam.eDataCaptureMode = m_EthernetModeConfigParams.eDataCaptureMode;
                string arg4 = string.Empty;
                if (RFDCCardModeConfigurationParam.eDataCaptureMode == 2U)
                {
                    arg4 = "ethernetStream";
                }
                else if (RFDCCardModeConfigurationParam.eDataCaptureMode == 1U)
                {
                    arg4 = "SDCardStorage";
                }
                RFDCCardModeConfigurationParam.u8Timer = m_EthernetModeConfigParams.u8Timer;
                if (GlobalRef.g_AR12xxDevice || GlobalRef.g_AR14xxDevice || GlobalRef.g_AR2243Device)
                {
                    RFDCCardModeConfigurationParam.eLvdsMode = 1U;
                }
                else if (GlobalRef.g_AR16xxDevice || GlobalRef.g_AR1843Device || GlobalRef.g_AR6843Device)
                {
                    RFDCCardModeConfigurationParam.eLvdsMode = 2U;
                }
                if (m_StaticParams.BitsVal == 0)
                {
                    RFDCCardModeConfigurationParam.eDataFormatMode = 1U;
                }
                else if (m_StaticParams.BitsVal == 1)
                {
                    RFDCCardModeConfigurationParam.eDataFormatMode = 2U;
                }
                else if (m_StaticParams.BitsVal == 2)
                {
                    RFDCCardModeConfigurationParam.eDataFormatMode = 3U;
                }
                if (m_RadarDeviceModeConfigParams.NumberOfRadarDevicesDetected <= 1)
                {
                    string full_command3 = string.Format("ar1.CaptureCardConfig_Mode({0}, {1}, {2}, {3}, {4}, {5})", new object[]
                    {
                        RFDCCardModeConfigurationParam.eLogMode,
                        RFDCCardModeConfigurationParam.eLvdsMode,
                        RFDCCardModeConfigurationParam.eDataXferMode,
                        RFDCCardModeConfigurationParam.eDataCaptureMode,
                        RFDCCardModeConfigurationParam.eDataFormatMode,
                        RFDCCardModeConfigurationParam.u8Timer
                    });
                    m_GuiManager.RecordLog(6, full_command3);
                }
                ushort packetDelay = m_RecordDataPacketDelayConfigParams.packetDelay;
                if (m_RadarDeviceModeConfigParams.NumberOfRadarDevicesDetected <= 1)
                {
                    string full_command4 = string.Format("ar1.CaptureCardConfig_PacketDelay({0})", new object[]
                    {
                        m_RecordDataPacketDelayConfigParams.packetDelay
                    });
                    m_GuiManager.RecordLog(6, full_command4);
                }
                string text = Path.GetDirectoryName(Application.StartupPath) + "\\PostProc";
                string text2 = "cf.json";
                string path = text + "\\cf.json";
                string text3 = "DCA1000EVM_CLI_Control.exe";
                object obj = JsonConvert.DeserializeObject(File.ReadAllText(path));
                if (ScriptOps.c0002a5.f0001ae == null)
                {
                    ScriptOps.c0002a5.f0001ae = CallSite<Func<CallSite, object, string, string, object>>.Create(Binder.SetIndex(CSharpBinderFlags.None, typeof(ScriptOps), new CSharpArgumentInfo[]
                    {
                        CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.None, null),
                        CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.UseCompileTimeType | CSharpArgumentInfoFlags.Constant, null),
                        CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.UseCompileTimeType, null)
                    }));
                }
                Func<CallSite, object, string, string, object> target = ScriptOps.c0002a5.f0001ae.Target;
                CallSite f0001ae = ScriptOps.c0002a5.f0001ae;
                if (ScriptOps.c0002a5.f0001ad == null)
                {
                    ScriptOps.c0002a5.f0001ad = CallSite<Func<CallSite, object, string, object>>.Create(Binder.GetIndex(CSharpBinderFlags.None, typeof(ScriptOps), new CSharpArgumentInfo[]
                    {
                        CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.None, null),
                        CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.UseCompileTimeType | CSharpArgumentInfoFlags.Constant, null)
                    }));
                }
                Func<CallSite, object, string, object> target2 = ScriptOps.c0002a5.f0001ad.Target;
                CallSite f0001ad = ScriptOps.c0002a5.f0001ad;
                if (ScriptOps.c0002a5.f0001ac == null)
                {
                    ScriptOps.c0002a5.f0001ac = CallSite<Func<CallSite, object, string, object>>.Create(Binder.GetIndex(CSharpBinderFlags.None, typeof(ScriptOps), new CSharpArgumentInfo[]
                    {
                        CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.None, null),
                        CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.UseCompileTimeType | CSharpArgumentInfoFlags.Constant, null)
                    }));
                }
                target(f0001ae, target2(f0001ad, ScriptOps.c0002a5.f0001ac.Target(ScriptOps.c0002a5.f0001ac, obj, "DCA1000Config"), "ethernetConfig"), "DCA1000IPAddress", arg);
                if (ScriptOps.c0002a5.f0001b1 == null)
                {
                    ScriptOps.c0002a5.f0001b1 = CallSite<Func<CallSite, object, string, int, object>>.Create(Binder.SetIndex(CSharpBinderFlags.None, typeof(ScriptOps), new CSharpArgumentInfo[]
                    {
                        CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.None, null),
                        CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.UseCompileTimeType | CSharpArgumentInfoFlags.Constant, null),
                        CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.UseCompileTimeType, null)
                    }));
                }
                Func<CallSite, object, string, int, object> target3 = ScriptOps.c0002a5.f0001b1.Target;
                CallSite f0001b = ScriptOps.c0002a5.f0001b1;
                if (ScriptOps.c0002a5.f0001b0 == null)
                {
                    ScriptOps.c0002a5.f0001b0 = CallSite<Func<CallSite, object, string, object>>.Create(Binder.GetIndex(CSharpBinderFlags.None, typeof(ScriptOps), new CSharpArgumentInfo[]
                    {
                        CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.None, null),
                        CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.UseCompileTimeType | CSharpArgumentInfoFlags.Constant, null)
                    }));
                }
                Func<CallSite, object, string, object> target4 = ScriptOps.c0002a5.f0001b0.Target;
                CallSite f0001b2 = ScriptOps.c0002a5.f0001b0;
                if (ScriptOps.c0002a5.f0001af == null)
                {
                    ScriptOps.c0002a5.f0001af = CallSite<Func<CallSite, object, string, object>>.Create(Binder.GetIndex(CSharpBinderFlags.None, typeof(ScriptOps), new CSharpArgumentInfo[]
                    {
                        CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.None, null),
                        CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.UseCompileTimeType | CSharpArgumentInfoFlags.Constant, null)
                    }));
                }
                target3(f0001b, target4(f0001b2, ScriptOps.c0002a5.f0001af.Target(ScriptOps.c0002a5.f0001af, obj, "DCA1000Config"), "ethernetConfig"), "DCA1000ConfigPort", ethernetInitConfigurationParam.u32ConfigPortNo);
                if (ScriptOps.c0002a5.f0001b4 == null)
                {
                    ScriptOps.c0002a5.f0001b4 = CallSite<Func<CallSite, object, string, int, object>>.Create(Binder.SetIndex(CSharpBinderFlags.None, typeof(ScriptOps), new CSharpArgumentInfo[]
                    {
                        CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.None, null),
                        CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.UseCompileTimeType | CSharpArgumentInfoFlags.Constant, null),
                        CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.UseCompileTimeType, null)
                    }));
                }
                Func<CallSite, object, string, int, object> target5 = ScriptOps.c0002a5.f0001b4.Target;
                CallSite f0001b3 = ScriptOps.c0002a5.f0001b4;
                if (ScriptOps.c0002a5.f0001b3 == null)
                {
                    ScriptOps.c0002a5.f0001b3 = CallSite<Func<CallSite, object, string, object>>.Create(Binder.GetIndex(CSharpBinderFlags.None, typeof(ScriptOps), new CSharpArgumentInfo[]
                    {
                        CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.None, null),
                        CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.UseCompileTimeType | CSharpArgumentInfoFlags.Constant, null)
                    }));
                }
                Func<CallSite, object, string, object> target6 = ScriptOps.c0002a5.f0001b3.Target;
                CallSite f0001b4 = ScriptOps.c0002a5.f0001b3;
                if (ScriptOps.c0002a5.f0001b2 == null)
                {
                    ScriptOps.c0002a5.f0001b2 = CallSite<Func<CallSite, object, string, object>>.Create(Binder.GetIndex(CSharpBinderFlags.None, typeof(ScriptOps), new CSharpArgumentInfo[]
                    {
                        CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.None, null),
                        CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.UseCompileTimeType | CSharpArgumentInfoFlags.Constant, null)
                    }));
                }
                target5(f0001b3, target6(f0001b4, ScriptOps.c0002a5.f0001b2.Target(ScriptOps.c0002a5.f0001b2, obj, "DCA1000Config"), "ethernetConfig"), "DCA1000DataPort", ethernetInitConfigurationParam.u32RecordPortNo);
                if (ScriptOps.c0002a5.f0001b6 == null)
                {
                    ScriptOps.c0002a5.f0001b6 = CallSite<Func<CallSite, object, string, ushort, object>>.Create(Binder.SetIndex(CSharpBinderFlags.None, typeof(ScriptOps), new CSharpArgumentInfo[]
                    {
                        CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.None, null),
                        CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.UseCompileTimeType | CSharpArgumentInfoFlags.Constant, null),
                        CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.UseCompileTimeType, null)
                    }));
                }
                Func<CallSite, object, string, ushort, object> target7 = ScriptOps.c0002a5.f0001b6.Target;
                CallSite f0001b5 = ScriptOps.c0002a5.f0001b6;
                if (ScriptOps.c0002a5.f0001b5 == null)
                {
                    ScriptOps.c0002a5.f0001b5 = CallSite<Func<CallSite, object, string, object>>.Create(Binder.GetIndex(CSharpBinderFlags.None, typeof(ScriptOps), new CSharpArgumentInfo[]
                    {
                        CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.None, null),
                        CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.UseCompileTimeType | CSharpArgumentInfoFlags.Constant, null)
                    }));
                }
                target7(f0001b5, ScriptOps.c0002a5.f0001b5.Target(ScriptOps.c0002a5.f0001b5, obj, "DCA1000Config"), "packetDelay_us", packetDelay);
                if (ScriptOps.c0002a5.f0002e1 == null)
                {
                    ScriptOps.c0002a5.f0002e1 = CallSite<Func<CallSite, object, string, string, object>>.Create(Binder.SetIndex(CSharpBinderFlags.None, typeof(ScriptOps), new CSharpArgumentInfo[]
                    {
                        CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.None, null),
                        CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.UseCompileTimeType | CSharpArgumentInfoFlags.Constant, null),
                        CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.UseCompileTimeType, null)
                    }));
                }
                Func<CallSite, object, string, string, object> target8 = ScriptOps.c0002a5.f0002e1.Target;
                CallSite f0002e = ScriptOps.c0002a5.f0002e1;
                if (ScriptOps.c0002a5.f0002e0 == null)
                {
                    ScriptOps.c0002a5.f0002e0 = CallSite<Func<CallSite, object, string, object>>.Create(Binder.GetIndex(CSharpBinderFlags.None, typeof(ScriptOps), new CSharpArgumentInfo[]
                    {
                        CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.None, null),
                        CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.UseCompileTimeType | CSharpArgumentInfoFlags.Constant, null)
                    }));
                }
                target8(f0002e, ScriptOps.c0002a5.f0002e0.Target(ScriptOps.c0002a5.f0002e0, obj, "DCA1000Config"), "dataLoggingMode", arg2);
                if (ScriptOps.c0002a5.f0002e3 == null)
                {
                    ScriptOps.c0002a5.f0002e3 = CallSite<Func<CallSite, object, string, string, object>>.Create(Binder.SetIndex(CSharpBinderFlags.None, typeof(ScriptOps), new CSharpArgumentInfo[]
                    {
                        CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.None, null),
                        CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.UseCompileTimeType | CSharpArgumentInfoFlags.Constant, null),
                        CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.UseCompileTimeType, null)
                    }));
                }
                Func<CallSite, object, string, string, object> target9 = ScriptOps.c0002a5.f0002e3.Target;
                CallSite f0002e2 = ScriptOps.c0002a5.f0002e3;
                if (ScriptOps.c0002a5.f0002e2 == null)
                {
                    ScriptOps.c0002a5.f0002e2 = CallSite<Func<CallSite, object, string, object>>.Create(Binder.GetIndex(CSharpBinderFlags.None, typeof(ScriptOps), new CSharpArgumentInfo[]
                    {
                        CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.None, null),
                        CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.UseCompileTimeType | CSharpArgumentInfoFlags.Constant, null)
                    }));
                }
                target9(f0002e2, ScriptOps.c0002a5.f0002e2.Target(ScriptOps.c0002a5.f0002e2, obj, "DCA1000Config"), "dataTransferMode", arg3);
                if (ScriptOps.c0002a5.f0002e5 == null)
                {
                    ScriptOps.c0002a5.f0002e5 = CallSite<Func<CallSite, object, string, string, object>>.Create(Binder.SetIndex(CSharpBinderFlags.None, typeof(ScriptOps), new CSharpArgumentInfo[]
                    {
                        CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.None, null),
                        CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.UseCompileTimeType | CSharpArgumentInfoFlags.Constant, null),
                        CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.UseCompileTimeType, null)
                    }));
                }
                Func<CallSite, object, string, string, object> target10 = ScriptOps.c0002a5.f0002e5.Target;
                CallSite f0002e3 = ScriptOps.c0002a5.f0002e5;
                if (ScriptOps.c0002a5.f0002e4 == null)
                {
                    ScriptOps.c0002a5.f0002e4 = CallSite<Func<CallSite, object, string, object>>.Create(Binder.GetIndex(CSharpBinderFlags.None, typeof(ScriptOps), new CSharpArgumentInfo[]
                    {
                        CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.None, null),
                        CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.UseCompileTimeType | CSharpArgumentInfoFlags.Constant, null)
                    }));
                }
                target10(f0002e3, ScriptOps.c0002a5.f0002e4.Target(ScriptOps.c0002a5.f0002e4, obj, "DCA1000Config"), "dataCaptureMode", arg4);
                if (ScriptOps.c0002a5.f0002e7 == null)
                {
                    ScriptOps.c0002a5.f0002e7 = CallSite<Func<CallSite, object, string, uint, object>>.Create(Binder.SetIndex(CSharpBinderFlags.None, typeof(ScriptOps), new CSharpArgumentInfo[]
                    {
                        CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.None, null),
                        CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.UseCompileTimeType | CSharpArgumentInfoFlags.Constant, null),
                        CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.UseCompileTimeType, null)
                    }));
                }
                Func<CallSite, object, string, uint, object> target11 = ScriptOps.c0002a5.f0002e7.Target;
                CallSite f0002e4 = ScriptOps.c0002a5.f0002e7;
                if (ScriptOps.c0002a5.f0002e6 == null)
                {
                    ScriptOps.c0002a5.f0002e6 = CallSite<Func<CallSite, object, string, object>>.Create(Binder.GetIndex(CSharpBinderFlags.None, typeof(ScriptOps), new CSharpArgumentInfo[]
                    {
                        CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.None, null),
                        CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.UseCompileTimeType | CSharpArgumentInfoFlags.Constant, null)
                    }));
                }
                target11(f0002e4, ScriptOps.c0002a5.f0002e6.Target(ScriptOps.c0002a5.f0002e6, obj, "DCA1000Config"), "lvdsMode", RFDCCardModeConfigurationParam.eLvdsMode);
                if (ScriptOps.c0002a5.f0002e9 == null)
                {
                    ScriptOps.c0002a5.f0002e9 = CallSite<Func<CallSite, object, string, uint, object>>.Create(Binder.SetIndex(CSharpBinderFlags.None, typeof(ScriptOps), new CSharpArgumentInfo[]
                    {
                        CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.None, null),
                        CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.UseCompileTimeType | CSharpArgumentInfoFlags.Constant, null),
                        CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.UseCompileTimeType, null)
                    }));
                }
                Func<CallSite, object, string, uint, object> target12 = ScriptOps.c0002a5.f0002e9.Target;
                CallSite f0002e5 = ScriptOps.c0002a5.f0002e9;
                if (ScriptOps.c0002a5.f0002e8 == null)
                {
                    ScriptOps.c0002a5.f0002e8 = CallSite<Func<CallSite, object, string, object>>.Create(Binder.GetIndex(CSharpBinderFlags.None, typeof(ScriptOps), new CSharpArgumentInfo[]
                    {
                        CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.None, null),
                        CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.UseCompileTimeType | CSharpArgumentInfoFlags.Constant, null)
                    }));
                }
                target12(f0002e5, ScriptOps.c0002a5.f0002e8.Target(ScriptOps.c0002a5.f0002e8, obj, "DCA1000Config"), "dataFormatMode", RFDCCardModeConfigurationParam.eDataFormatMode);
                if (ScriptOps.c0002a5.f0002eb == null)
                {
                    ScriptOps.c0002a5.f0002eb = CallSite<Func<CallSite, object, string>>.Create(Binder.Convert(CSharpBinderFlags.None, typeof(string), typeof(ScriptOps)));
                }
                Func<CallSite, object, string> target13 = ScriptOps.c0002a5.f0002eb.Target;
                CallSite f0002eb = ScriptOps.c0002a5.f0002eb;
                if (ScriptOps.c0002a5.f0002ea == null)
                {
                    ScriptOps.c0002a5.f0002ea = CallSite<Func<CallSite, Type, object, Newtonsoft.Json.Formatting, object>>.Create(Binder.InvokeMember(CSharpBinderFlags.None, "SerializeObject", null, typeof(ScriptOps), new CSharpArgumentInfo[]
                    {
                        CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.UseCompileTimeType | CSharpArgumentInfoFlags.IsStaticType, null),
                        CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.None, null),
                        CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.UseCompileTimeType | CSharpArgumentInfoFlags.Constant, null)
                    }));
                }
                string contents = target13(f0002eb, ScriptOps.c0002a5.f0002ea.Target(ScriptOps.c0002a5.f0002ea, typeof(JsonConvert), obj, Newtonsoft.Json.Formatting.Indented));
                File.WriteAllText(path, contents);
                string text4 = "fpga";
                string arguments = string.Concat(new string[]
                {
                    "/C ",
                    text3,
                    " ",
                    text4,
                    " ",
                    text2
                });
                ProcessStartInfo processStartInfo = new ProcessStartInfo();
                processStartInfo.FileName = "CMD.EXE";
                processStartInfo.WorkingDirectory = text;
                processStartInfo.Arguments = arguments;
                processStartInfo.UseShellExecute = false;
                processStartInfo.RedirectStandardOutput = true;
                processStartInfo.RedirectStandardError = true;
                processStartInfo.RedirectStandardInput = true;
                processStartInfo.CreateNoWindow = true;
                Process process = Process.Start(processStartInfo);
                string full_command5 = string.Format("Sending {0} command to DCA1000", text4);
                m_GuiManager.RecordLog(0, full_command5);
                if (process != null && !process.HasExited)
                {
                    process.WaitForExit();
                }
                string text5 = process.StandardOutput.ReadToEnd();
                m_GuiManager.RecordLog(0, text5);
                text4 = "record";
                arguments = string.Concat(new string[]
                {
                    "/C ",
                    text3,
                    " ",
                    text4,
                    " ",
                    text2
                });
                processStartInfo.Arguments = arguments;
                process = Process.Start(processStartInfo);
                full_command5 = string.Format("Sending {0} command to DCA1000", text4);
                m_GuiManager.RecordLog(0, full_command5);
                if (process != null && !process.HasExited)
                {
                    process.WaitForExit();
                }
                string full_command6 = process.StandardOutput.ReadToEnd();
                m_GuiManager.RecordLog(0, full_command6);
                if (m_RadarDeviceModeConfigParams.NumberOfRadarDevicesDetected <= 1)
                {
                    string full_command7 = string.Format("ar1.GetCaptureCardFPGAVersion()", new object[0]);
                    m_GuiManager.RecordLog(6, full_command7);
                }
                text4 = "fpga_version";
                arguments = string.Concat(new string[]
                {
                    "/C ",
                    text3,
                    " ",
                    text4,
                    " ",
                    text2
                });
                processStartInfo.Arguments = arguments;
                process = Process.Start(processStartInfo);
                full_command5 = string.Format("Sending {0} command to DCA1000", text4);
                m_GuiManager.RecordLog(0, full_command5);
                if (process != null && !process.HasExited)
                {
                    process.WaitForExit();
                }
                string text6 = process.StandardOutput.ReadToEnd();
                m_GuiManager.RecordLog(0, text6);
                GlobalRef.f0002d3 = text6.Substring(19, 12);
                ScriptOps.m_MainForm.m_RFDataCaptureCard.m00006e(GlobalRef.f0002d3);
                if (text5 == "\r\nFPGA Configuration command : Success\r\n")
                {
                    GlobalRef.g_CaptureCardConnectStatue = true;
                    ScriptOps.m_MainForm.RFDataCaptureCard.UpdateCaptureCardDeviceConnectionConfigDataToGUI(true);
                }
            }
            else if (GlobalRef.g_CaptureCardConnectStatue)
            {
                if (m_RadarDeviceModeConfigParams.NumberOfRadarDevicesDetected <= 1)
                {
                    string full_command8 = string.Format("ar1.CaptureCard_DisConnect()", new object[0]);
                    m_GuiManager.RecordLog(6, full_command8);
                }
                else
                {
                    string full_command9 = string.Format("ar1.CaptureCard_DisConnect_mult({0})", new object[]
                    {
                        GlobalRef.g_RadarDeviceId
                    });
                    m_GuiManager.RecordLog(6, full_command9);
                }
                num = Imports.DisconnectRFDCCard();
                GlobalRef.f0002d3 = "";
                if (num == 0)
                {
                    GlobalRef.g_CaptureCardConnectStatue = false;
                    ScriptOps.m_MainForm.RFDataCaptureCard.UpdateCaptureCardDeviceConnectionConfigToGUI(true);
                    string full_command10 = string.Format("Status:Passed", new object[0]);
                    m_GuiManager.RecordLog(2, full_command10);
                    ScriptOps.m_MainForm.RFDataCaptureCard.UpdatAndResetFPGAVersionInGUI(true);
                }
                else
                {
                    string full_command11 = string.Format("Status: Failed, Error Type: {0}", new object[]
                    {
                        GetRFCaptureCardViaEthernetErrorType(num)
                    });
                    m_GuiManager.RecordLog(6, full_command11);
                }
            }
            return num;
        }

        private int iSetRecordDataPacketDelayConfig_Impl(bool is_starting_op, bool is_ending_op)
        {
            int result = -1;
            ushort packetDelay = m_RecordDataPacketDelayConfigParams.packetDelay;
            if (m_RadarDeviceModeConfigParams.NumberOfRadarDevicesDetected <= 1)
            {
                string full_command = string.Format("ar1.CaptureCardConfig_PacketDelay({0})", new object[]
                {
                    m_RecordDataPacketDelayConfigParams.packetDelay
                });
                m_GuiManager.RecordLog(6, full_command);
            }
            string text = Path.GetDirectoryName(Application.StartupPath) + "\\PostProc";
            string text2 = "cf.json";
            string path = text + "\\cf.json";
            string text3 = "DCA1000EVM_CLI_Control.exe";
            object obj = JsonConvert.DeserializeObject(File.ReadAllText(path));
            if (ScriptOps.c0002a6.f0001ad == null)
            {
                ScriptOps.c0002a6.f0001ad = CallSite<Func<CallSite, object, string, ushort, object>>.Create(Binder.SetIndex(CSharpBinderFlags.None, typeof(ScriptOps), new CSharpArgumentInfo[]
                {
                    CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.None, null),
                    CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.UseCompileTimeType | CSharpArgumentInfoFlags.Constant, null),
                    CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.UseCompileTimeType, null)
                }));
            }
            Func<CallSite, object, string, ushort, object> target = ScriptOps.c0002a6.f0001ad.Target;
            CallSite f0001ad = ScriptOps.c0002a6.f0001ad;
            if (ScriptOps.c0002a6.f0001ac == null)
            {
                ScriptOps.c0002a6.f0001ac = CallSite<Func<CallSite, object, string, object>>.Create(Binder.GetIndex(CSharpBinderFlags.None, typeof(ScriptOps), new CSharpArgumentInfo[]
                {
                    CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.None, null),
                    CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.UseCompileTimeType | CSharpArgumentInfoFlags.Constant, null)
                }));
            }
            target(f0001ad, ScriptOps.c0002a6.f0001ac.Target(ScriptOps.c0002a6.f0001ac, obj, "DCA1000Config"), "packetDelay_us", packetDelay);
            if (ScriptOps.c0002a6.f0001af == null)
            {
                ScriptOps.c0002a6.f0001af = CallSite<Func<CallSite, object, string>>.Create(Binder.Convert(CSharpBinderFlags.None, typeof(string), typeof(ScriptOps)));
            }
            Func<CallSite, object, string> target2 = ScriptOps.c0002a6.f0001af.Target;
            CallSite f0001af = ScriptOps.c0002a6.f0001af;
            if (ScriptOps.c0002a6.f0001ae == null)
            {
                ScriptOps.c0002a6.f0001ae = CallSite<Func<CallSite, Type, object, Newtonsoft.Json.Formatting, object>>.Create(Binder.InvokeMember(CSharpBinderFlags.None, "SerializeObject", null, typeof(ScriptOps), new CSharpArgumentInfo[]
                {
                    CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.UseCompileTimeType | CSharpArgumentInfoFlags.IsStaticType, null),
                    CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.None, null),
                    CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.UseCompileTimeType | CSharpArgumentInfoFlags.Constant, null)
                }));
            }
            string contents = target2(f0001af, ScriptOps.c0002a6.f0001ae.Target(ScriptOps.c0002a6.f0001ae, typeof(JsonConvert), obj, Newtonsoft.Json.Formatting.Indented));
            File.WriteAllText(path, contents);
            string text4 = "fpga";
            string arguments = string.Concat(new string[]
            {
                "/C ",
                text3,
                " ",
                text4,
                " ",
                text2
            });
            ProcessStartInfo processStartInfo = new ProcessStartInfo();
            processStartInfo.FileName = "CMD.EXE";
            processStartInfo.WorkingDirectory = text;
            processStartInfo.Arguments = arguments;
            processStartInfo.UseShellExecute = false;
            processStartInfo.RedirectStandardOutput = true;
            processStartInfo.RedirectStandardError = true;
            processStartInfo.RedirectStandardInput = true;
            processStartInfo.CreateNoWindow = true;
            Process process = Process.Start(processStartInfo);
            string full_command2 = string.Format("Sending {0} command to DCA1000", text4);
            m_GuiManager.RecordLog(0, full_command2);
            if (process != null && !process.HasExited)
            {
                process.WaitForExit();
            }
            string text5 = process.StandardOutput.ReadToEnd();
            m_GuiManager.RecordLog(0, text5);
            text4 = "record";
            arguments = string.Concat(new string[]
            {
                "/C ",
                text3,
                " ",
                text4,
                " ",
                text2
            });
            processStartInfo.Arguments = arguments;
            process = Process.Start(processStartInfo);
            full_command2 = string.Format("Sending {0} command to DCA1000", text4);
            m_GuiManager.RecordLog(0, full_command2);
            if (process != null && !process.HasExited)
            {
                process.WaitForExit();
            }
            string full_command3 = process.StandardOutput.ReadToEnd();
            m_GuiManager.RecordLog(0, full_command3);
            if (text5 == "\r\nFPGA Configuration command : Success\r\n")
            {
                GlobalRef.g_CaptureCardConnectStatue = true;
                ScriptOps.m_MainForm.RFDataCaptureCard.UpdateCaptureCardDeviceConnectionConfigDataToGUI(true);
                result = 0;
            }
            return result;
        }

        private int iSetRecordDataPacketDelayConfig_Impl_WithoutSPI(bool is_starting_op, bool is_ending_op)
        {
            int result = -1;
            ushort packetDelay = m_RecordDataPacketDelayConfigParams.packetDelay;
            if (m_RadarDeviceModeConfigParams.NumberOfRadarDevicesDetected <= 1)
            {
                string full_command = string.Format("ar1.CaptureCardConfig_PacketDelay_WithoutSPI({0})", new object[]
                {
                    m_RecordDataPacketDelayConfigParams.packetDelay
                });
                m_GuiManager.RecordLog(6, full_command);
            }
            string text = Path.GetDirectoryName(Application.StartupPath) + "\\PostProc";
            string text2 = "cf.json";
            string path = text + "\\cf.json";
            string text3 = "DCA1000EVM_CLI_Control.exe";
            object obj = JsonConvert.DeserializeObject(File.ReadAllText(path));
            if (ScriptOps.c0002a7.f0001ad == null)
            {
                ScriptOps.c0002a7.f0001ad = CallSite<Func<CallSite, object, string, ushort, object>>.Create(Binder.SetIndex(CSharpBinderFlags.None, typeof(ScriptOps), new CSharpArgumentInfo[]
                {
                    CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.None, null),
                    CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.UseCompileTimeType | CSharpArgumentInfoFlags.Constant, null),
                    CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.UseCompileTimeType, null)
                }));
            }
            Func<CallSite, object, string, ushort, object> target = ScriptOps.c0002a7.f0001ad.Target;
            CallSite f0001ad = ScriptOps.c0002a7.f0001ad;
            if (ScriptOps.c0002a7.f0001ac == null)
            {
                ScriptOps.c0002a7.f0001ac = CallSite<Func<CallSite, object, string, object>>.Create(Binder.GetIndex(CSharpBinderFlags.None, typeof(ScriptOps), new CSharpArgumentInfo[]
                {
                    CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.None, null),
                    CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.UseCompileTimeType | CSharpArgumentInfoFlags.Constant, null)
                }));
            }
            target(f0001ad, ScriptOps.c0002a7.f0001ac.Target(ScriptOps.c0002a7.f0001ac, obj, "DCA1000Config"), "packetDelay_us", packetDelay);
            if (ScriptOps.c0002a7.f0001af == null)
            {
                ScriptOps.c0002a7.f0001af = CallSite<Func<CallSite, object, string>>.Create(Binder.Convert(CSharpBinderFlags.None, typeof(string), typeof(ScriptOps)));
            }
            Func<CallSite, object, string> target2 = ScriptOps.c0002a7.f0001af.Target;
            CallSite f0001af = ScriptOps.c0002a7.f0001af;
            if (ScriptOps.c0002a7.f0001ae == null)
            {
                ScriptOps.c0002a7.f0001ae = CallSite<Func<CallSite, Type, object, Newtonsoft.Json.Formatting, object>>.Create(Binder.InvokeMember(CSharpBinderFlags.None, "SerializeObject", null, typeof(ScriptOps), new CSharpArgumentInfo[]
                {
                    CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.UseCompileTimeType | CSharpArgumentInfoFlags.IsStaticType, null),
                    CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.None, null),
                    CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.UseCompileTimeType | CSharpArgumentInfoFlags.Constant, null)
                }));
            }
            string contents = target2(f0001af, ScriptOps.c0002a7.f0001ae.Target(ScriptOps.c0002a7.f0001ae, typeof(JsonConvert), obj, Newtonsoft.Json.Formatting.Indented));
            File.WriteAllText(path, contents);
            string text4 = "fpga";
            string arguments = string.Concat(new string[]
            {
                "/C ",
                text3,
                " ",
                text4,
                " ",
                text2
            });
            ProcessStartInfo processStartInfo = new ProcessStartInfo();
            processStartInfo.FileName = "CMD.EXE";
            processStartInfo.WorkingDirectory = text;
            processStartInfo.Arguments = arguments;
            processStartInfo.UseShellExecute = false;
            processStartInfo.RedirectStandardOutput = true;
            processStartInfo.RedirectStandardError = true;
            processStartInfo.RedirectStandardInput = true;
            processStartInfo.CreateNoWindow = true;
            Process process = Process.Start(processStartInfo);
            string full_command2 = string.Format("Sending {0} command to DCA1000", text4);
            m_GuiManager.RecordLog(0, full_command2);
            if (process != null && !process.HasExited)
            {
                process.WaitForExit();
            }
            string text5 = process.StandardOutput.ReadToEnd();
            m_GuiManager.RecordLog(0, text5);
            text4 = "record";
            arguments = string.Concat(new string[]
            {
                "/C ",
                text3,
                " ",
                text4,
                " ",
                text2
            });
            processStartInfo.Arguments = arguments;
            process = Process.Start(processStartInfo);
            full_command2 = string.Format("Sending {0} command to DCA1000", text4);
            m_GuiManager.RecordLog(0, full_command2);
            if (process != null && !process.HasExited)
            {
                process.WaitForExit();
            }
            string full_command3 = process.StandardOutput.ReadToEnd();
            m_GuiManager.RecordLog(0, full_command3);
            if (text5 == "\r\nFPGA Configuration command : Success\r\n")
            {
                GlobalRef.g_CaptureCardConnectStatue = true;
                ScriptOps.m_MainForm.RFDataCaptureCard.UpdateCaptureCardDeviceConnectionConfigDataToGUI(true);
                result = 0;
            }
            return result;
        }

        private int iSetResetDCCardFPGAViaEthernetChannelConfig_Impl(bool is_starting_op, bool is_ending_op)
        {
            int result = -1;
            if (GlobalRef.g_NtvRS232Connect[(int)GlobalRef.g_RadarDeviceIndex] && GlobalRef.g_CasCadeDeviceSpiConnect == 0U)
            {
                result = m_TsWrapper.Calling_WriteAddr_Single(4294959848U, 1U);
                if (m_GuiManager.DllOps.itempDisconnect(false) == 0)
                {
                    string full_command = string.Format("Debug Port Disconnected", new object[0]);
                    m_GuiManager.RecordLog(0, full_command);
                    if (!GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
                    {
                        iRs232ConnectDisconnect_impl();
                    }
                }
            }
            if (m_RadarDeviceModeConfigParams.NumberOfRadarDevicesDetected <= 1)
            {
                string full_command2 = string.Format("ar1.CaptureCardConfig_ResetFPGA()", new object[0]);
                m_GuiManager.RecordLog(6, full_command2);
            }
            RFDCCardModeConfigurationParam.eLogMode = m_EthernetModeConfigParams.eLogMode;
            string arg = string.Empty;
            if (RFDCCardModeConfigurationParam.eLogMode == 1U)
            {
                arg = "raw";
            }
            else if (RFDCCardModeConfigurationParam.eLogMode == 2U)
            {
                arg = "multi";
            }
            RFDCCardModeConfigurationParam.eDataXferMode = m_EthernetModeConfigParams.eDataXferMode;
            string arg2 = string.Empty;
            if (RFDCCardModeConfigurationParam.eDataXferMode == 1U)
            {
                arg2 = "LVDSCapture";
            }
            else if (RFDCCardModeConfigurationParam.eDataXferMode == 2U)
            {
                arg2 = "LVDSPlayback";
            }
            RFDCCardModeConfigurationParam.eDataCaptureMode = m_EthernetModeConfigParams.eDataCaptureMode;
            string arg3 = string.Empty;
            if (RFDCCardModeConfigurationParam.eDataCaptureMode == 2U)
            {
                arg3 = "ethernetStream";
            }
            else if (RFDCCardModeConfigurationParam.eDataCaptureMode == 1U)
            {
                arg3 = "SDCardStorage";
            }
            RFDCCardModeConfigurationParam.u8Timer = m_EthernetModeConfigParams.u8Timer;
            if (GlobalRef.g_AR12xxDevice || GlobalRef.g_AR14xxDevice || GlobalRef.g_AR2243Device)
            {
                RFDCCardModeConfigurationParam.eLvdsMode = 1U;
            }
            else if (GlobalRef.g_AR16xxDevice || GlobalRef.g_AR1843Device || GlobalRef.g_AR6843Device)
            {
                RFDCCardModeConfigurationParam.eLvdsMode = 2U;
            }
            if (m_StaticParams.BitsVal == 0)
            {
                RFDCCardModeConfigurationParam.eDataFormatMode = 1U;
            }
            else if (m_StaticParams.BitsVal == 1)
            {
                RFDCCardModeConfigurationParam.eDataFormatMode = 2U;
            }
            else if (m_StaticParams.BitsVal == 2)
            {
                RFDCCardModeConfigurationParam.eDataFormatMode = 3U;
            }
            if (m_RadarDeviceModeConfigParams.NumberOfRadarDevicesDetected <= 1)
            {
                string full_command3 = string.Format("ar1.CaptureCardConfig_Mode({0}, {1}, {2}, {3}, {4}, {5})", new object[]
                {
                    RFDCCardModeConfigurationParam.eLogMode,
                    RFDCCardModeConfigurationParam.eLvdsMode,
                    RFDCCardModeConfigurationParam.eDataXferMode,
                    RFDCCardModeConfigurationParam.eDataCaptureMode,
                    RFDCCardModeConfigurationParam.eDataFormatMode,
                    RFDCCardModeConfigurationParam.u8Timer
                });
                m_GuiManager.RecordLog(6, full_command3);
            }
            ushort packetDelay = m_RecordDataPacketDelayConfigParams.packetDelay;
            if (m_RadarDeviceModeConfigParams.NumberOfRadarDevicesDetected <= 1)
            {
                string full_command4 = string.Format("ar1.CaptureCardConfig_PacketDelay({0})", new object[]
                {
                    m_RecordDataPacketDelayConfigParams.packetDelay
                });
                m_GuiManager.RecordLog(6, full_command4);
            }
            string text = Path.GetDirectoryName(Application.StartupPath) + "\\PostProc";
            string text2 = "cf.json";
            string path = text + "\\cf.json";
            string text3 = "DCA1000EVM_CLI_Control.exe";
            object obj = JsonConvert.DeserializeObject(File.ReadAllText(path));
            if (ScriptOps.c0002a8.f0001ad == null)
            {
                ScriptOps.c0002a8.f0001ad = CallSite<Func<CallSite, object, string, ushort, object>>.Create(Binder.SetIndex(CSharpBinderFlags.None, typeof(ScriptOps), new CSharpArgumentInfo[]
                {
                    CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.None, null),
                    CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.UseCompileTimeType | CSharpArgumentInfoFlags.Constant, null),
                    CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.UseCompileTimeType, null)
                }));
            }
            Func<CallSite, object, string, ushort, object> target = ScriptOps.c0002a8.f0001ad.Target;
            CallSite f0001ad = ScriptOps.c0002a8.f0001ad;
            if (ScriptOps.c0002a8.f0001ac == null)
            {
                ScriptOps.c0002a8.f0001ac = CallSite<Func<CallSite, object, string, object>>.Create(Binder.GetIndex(CSharpBinderFlags.None, typeof(ScriptOps), new CSharpArgumentInfo[]
                {
                    CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.None, null),
                    CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.UseCompileTimeType | CSharpArgumentInfoFlags.Constant, null)
                }));
            }
            target(f0001ad, ScriptOps.c0002a8.f0001ac.Target(ScriptOps.c0002a8.f0001ac, obj, "DCA1000Config"), "packetDelay_us", packetDelay);
            if (ScriptOps.c0002a8.f0001af == null)
            {
                ScriptOps.c0002a8.f0001af = CallSite<Func<CallSite, object, string, string, object>>.Create(Binder.SetIndex(CSharpBinderFlags.None, typeof(ScriptOps), new CSharpArgumentInfo[]
                {
                    CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.None, null),
                    CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.UseCompileTimeType | CSharpArgumentInfoFlags.Constant, null),
                    CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.UseCompileTimeType, null)
                }));
            }
            Func<CallSite, object, string, string, object> target2 = ScriptOps.c0002a8.f0001af.Target;
            CallSite f0001af = ScriptOps.c0002a8.f0001af;
            if (ScriptOps.c0002a8.f0001ae == null)
            {
                ScriptOps.c0002a8.f0001ae = CallSite<Func<CallSite, object, string, object>>.Create(Binder.GetIndex(CSharpBinderFlags.None, typeof(ScriptOps), new CSharpArgumentInfo[]
                {
                    CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.None, null),
                    CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.UseCompileTimeType | CSharpArgumentInfoFlags.Constant, null)
                }));
            }
            target2(f0001af, ScriptOps.c0002a8.f0001ae.Target(ScriptOps.c0002a8.f0001ae, obj, "DCA1000Config"), "dataLoggingMode", arg);
            if (ScriptOps.c0002a8.f0001b1 == null)
            {
                ScriptOps.c0002a8.f0001b1 = CallSite<Func<CallSite, object, string, string, object>>.Create(Binder.SetIndex(CSharpBinderFlags.None, typeof(ScriptOps), new CSharpArgumentInfo[]
                {
                    CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.None, null),
                    CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.UseCompileTimeType | CSharpArgumentInfoFlags.Constant, null),
                    CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.UseCompileTimeType, null)
                }));
            }
            Func<CallSite, object, string, string, object> target3 = ScriptOps.c0002a8.f0001b1.Target;
            CallSite f0001b = ScriptOps.c0002a8.f0001b1;
            if (ScriptOps.c0002a8.f0001b0 == null)
            {
                ScriptOps.c0002a8.f0001b0 = CallSite<Func<CallSite, object, string, object>>.Create(Binder.GetIndex(CSharpBinderFlags.None, typeof(ScriptOps), new CSharpArgumentInfo[]
                {
                    CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.None, null),
                    CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.UseCompileTimeType | CSharpArgumentInfoFlags.Constant, null)
                }));
            }
            target3(f0001b, ScriptOps.c0002a8.f0001b0.Target(ScriptOps.c0002a8.f0001b0, obj, "DCA1000Config"), "dataTransferMode", arg2);
            if (ScriptOps.c0002a8.f0001b3 == null)
            {
                ScriptOps.c0002a8.f0001b3 = CallSite<Func<CallSite, object, string, string, object>>.Create(Binder.SetIndex(CSharpBinderFlags.None, typeof(ScriptOps), new CSharpArgumentInfo[]
                {
                    CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.None, null),
                    CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.UseCompileTimeType | CSharpArgumentInfoFlags.Constant, null),
                    CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.UseCompileTimeType, null)
                }));
            }
            Func<CallSite, object, string, string, object> target4 = ScriptOps.c0002a8.f0001b3.Target;
            CallSite f0001b2 = ScriptOps.c0002a8.f0001b3;
            if (ScriptOps.c0002a8.f0001b2 == null)
            {
                ScriptOps.c0002a8.f0001b2 = CallSite<Func<CallSite, object, string, object>>.Create(Binder.GetIndex(CSharpBinderFlags.None, typeof(ScriptOps), new CSharpArgumentInfo[]
                {
                    CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.None, null),
                    CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.UseCompileTimeType | CSharpArgumentInfoFlags.Constant, null)
                }));
            }
            target4(f0001b2, ScriptOps.c0002a8.f0001b2.Target(ScriptOps.c0002a8.f0001b2, obj, "DCA1000Config"), "dataCaptureMode", arg3);
            if (ScriptOps.c0002a8.f0001b5 == null)
            {
                ScriptOps.c0002a8.f0001b5 = CallSite<Func<CallSite, object, string, uint, object>>.Create(Binder.SetIndex(CSharpBinderFlags.None, typeof(ScriptOps), new CSharpArgumentInfo[]
                {
                    CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.None, null),
                    CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.UseCompileTimeType | CSharpArgumentInfoFlags.Constant, null),
                    CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.UseCompileTimeType, null)
                }));
            }
            Func<CallSite, object, string, uint, object> target5 = ScriptOps.c0002a8.f0001b5.Target;
            CallSite f0001b3 = ScriptOps.c0002a8.f0001b5;
            if (ScriptOps.c0002a8.f0001b4 == null)
            {
                ScriptOps.c0002a8.f0001b4 = CallSite<Func<CallSite, object, string, object>>.Create(Binder.GetIndex(CSharpBinderFlags.None, typeof(ScriptOps), new CSharpArgumentInfo[]
                {
                    CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.None, null),
                    CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.UseCompileTimeType | CSharpArgumentInfoFlags.Constant, null)
                }));
            }
            target5(f0001b3, ScriptOps.c0002a8.f0001b4.Target(ScriptOps.c0002a8.f0001b4, obj, "DCA1000Config"), "lvdsMode", RFDCCardModeConfigurationParam.eLvdsMode);
            if (ScriptOps.c0002a8.f0002e0 == null)
            {
                ScriptOps.c0002a8.f0002e0 = CallSite<Func<CallSite, object, string, uint, object>>.Create(Binder.SetIndex(CSharpBinderFlags.None, typeof(ScriptOps), new CSharpArgumentInfo[]
                {
                    CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.None, null),
                    CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.UseCompileTimeType | CSharpArgumentInfoFlags.Constant, null),
                    CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.UseCompileTimeType, null)
                }));
            }
            Func<CallSite, object, string, uint, object> target6 = ScriptOps.c0002a8.f0002e0.Target;
            CallSite f0002e = ScriptOps.c0002a8.f0002e0;
            if (ScriptOps.c0002a8.f0001b6 == null)
            {
                ScriptOps.c0002a8.f0001b6 = CallSite<Func<CallSite, object, string, object>>.Create(Binder.GetIndex(CSharpBinderFlags.None, typeof(ScriptOps), new CSharpArgumentInfo[]
                {
                    CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.None, null),
                    CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.UseCompileTimeType | CSharpArgumentInfoFlags.Constant, null)
                }));
            }
            target6(f0002e, ScriptOps.c0002a8.f0001b6.Target(ScriptOps.c0002a8.f0001b6, obj, "DCA1000Config"), "dataFormatMode", RFDCCardModeConfigurationParam.eDataFormatMode);
            if (ScriptOps.c0002a8.f0002e2 == null)
            {
                ScriptOps.c0002a8.f0002e2 = CallSite<Func<CallSite, object, string>>.Create(Binder.Convert(CSharpBinderFlags.None, typeof(string), typeof(ScriptOps)));
            }
            Func<CallSite, object, string> target7 = ScriptOps.c0002a8.f0002e2.Target;
            CallSite f0002e2 = ScriptOps.c0002a8.f0002e2;
            if (ScriptOps.c0002a8.f0002e1 == null)
            {
                ScriptOps.c0002a8.f0002e1 = CallSite<Func<CallSite, Type, object, Newtonsoft.Json.Formatting, object>>.Create(Binder.InvokeMember(CSharpBinderFlags.None, "SerializeObject", null, typeof(ScriptOps), new CSharpArgumentInfo[]
                {
                    CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.UseCompileTimeType | CSharpArgumentInfoFlags.IsStaticType, null),
                    CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.None, null),
                    CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.UseCompileTimeType | CSharpArgumentInfoFlags.Constant, null)
                }));
            }
            string contents = target7(f0002e2, ScriptOps.c0002a8.f0002e1.Target(ScriptOps.c0002a8.f0002e1, typeof(JsonConvert), obj, Newtonsoft.Json.Formatting.Indented));
            File.WriteAllText(path, contents);
            string text4 = "reset_fpga";
            string arguments = string.Concat(new string[]
            {
                "/C ",
                text3,
                " ",
                text4,
                " ",
                text2
            });
            ProcessStartInfo processStartInfo = new ProcessStartInfo();
            processStartInfo.FileName = "CMD.EXE";
            processStartInfo.WorkingDirectory = text;
            processStartInfo.Arguments = arguments;
            processStartInfo.UseShellExecute = false;
            processStartInfo.RedirectStandardOutput = true;
            processStartInfo.RedirectStandardError = true;
            processStartInfo.RedirectStandardInput = true;
            processStartInfo.CreateNoWindow = true;
            Process process = Process.Start(processStartInfo);
            string full_command5 = string.Format("Sending {0} command to DCA1000", text4);
            m_GuiManager.RecordLog(0, full_command5);
            if (process != null && !process.HasExited)
            {
                process.WaitForExit();
            }
            string full_command6 = process.StandardOutput.ReadToEnd();
            m_GuiManager.RecordLog(0, full_command6);
            text4 = "fpga";
            arguments = string.Concat(new string[]
            {
                "/C ",
                text3,
                " ",
                text4,
                " ",
                text2
            });
            processStartInfo.Arguments = arguments;
            process = Process.Start(processStartInfo);
            string full_command7 = string.Format("Sending {0} command to DCA1000", text4);
            m_GuiManager.RecordLog(0, full_command7);
            if (process != null && !process.HasExited)
            {
                process.WaitForExit();
            }
            string text5 = process.StandardOutput.ReadToEnd();
            m_GuiManager.RecordLog(0, text5);
            text4 = "record";
            arguments = string.Concat(new string[]
            {
                "/C ",
                text3,
                " ",
                text4,
                " ",
                text2
            });
            processStartInfo.Arguments = arguments;
            process = Process.Start(processStartInfo);
            full_command5 = string.Format("Sending {0} command to DCA1000", text4);
            m_GuiManager.RecordLog(0, full_command5);
            if (process != null && !process.HasExited)
            {
                process.WaitForExit();
            }
            string full_command8 = process.StandardOutput.ReadToEnd();
            m_GuiManager.RecordLog(0, full_command8);
            text4 = "fpga_version";
            arguments = string.Concat(new string[]
            {
                "/C ",
                text3,
                " ",
                text4,
                " ",
                text2
            });
            processStartInfo.Arguments = arguments;
            process = Process.Start(processStartInfo);
            full_command5 = string.Format("Sending {0} command to DCA1000", text4);
            m_GuiManager.RecordLog(0, full_command5);
            if (process != null && !process.HasExited)
            {
                process.WaitForExit();
            }
            string text6 = process.StandardOutput.ReadToEnd();
            m_GuiManager.RecordLog(0, text6);
            GlobalRef.f0002d3 = text6.Substring(19, 12);
            ScriptOps.m_MainForm.m_RFDataCaptureCard.m00006e(GlobalRef.f0002d3);
            if (text5 == "\r\nFPGA Configuration command : Success\r\n")
            {
                GlobalRef.g_CaptureCardConnectStatue = true;
                ScriptOps.m_MainForm.RFDataCaptureCard.UpdateCaptureCardDeviceConnectionConfigDataToGUI(true);
                result = 0;
            }
            return result;
        }

        private int iSetResetDCCardFPGAViaEthernetChannelConfig_Impl_WithoutSPI(bool is_starting_op, bool is_ending_op)
        {
            int result = -1;
            if (m_RadarDeviceModeConfigParams.NumberOfRadarDevicesDetected <= 1)
            {
                string full_command = string.Format("ar1.CaptureCardConfig_ResetFPGA_WithoutSPI()", new object[0]);
                m_GuiManager.RecordLog(6, full_command);
            }
            RFDCCardModeConfigurationParam.eLogMode = m_EthernetModeConfigParams.eLogMode;
            string arg = string.Empty;
            if (RFDCCardModeConfigurationParam.eLogMode == 1U)
            {
                arg = "raw";
            }
            else if (RFDCCardModeConfigurationParam.eLogMode == 2U)
            {
                arg = "multi";
            }
            RFDCCardModeConfigurationParam.eDataXferMode = m_EthernetModeConfigParams.eDataXferMode;
            string arg2 = string.Empty;
            if (RFDCCardModeConfigurationParam.eDataXferMode == 1U)
            {
                arg2 = "LVDSCapture";
            }
            else if (RFDCCardModeConfigurationParam.eDataXferMode == 2U)
            {
                arg2 = "LVDSPlayback";
            }
            RFDCCardModeConfigurationParam.eDataCaptureMode = m_EthernetModeConfigParams.eDataCaptureMode;
            string arg3 = string.Empty;
            if (RFDCCardModeConfigurationParam.eDataCaptureMode == 2U)
            {
                arg3 = "ethernetStream";
            }
            else if (RFDCCardModeConfigurationParam.eDataCaptureMode == 1U)
            {
                arg3 = "SDCardStorage";
            }
            RFDCCardModeConfigurationParam.u8Timer = m_EthernetModeConfigParams.u8Timer;
            if (GlobalRef.g_AR12xxDevice || GlobalRef.g_AR14xxDevice || GlobalRef.g_AR2243Device)
            {
                RFDCCardModeConfigurationParam.eLvdsMode = 1U;
            }
            else if (GlobalRef.g_AR16xxDevice || GlobalRef.g_AR1843Device || GlobalRef.g_AR6843Device)
            {
                RFDCCardModeConfigurationParam.eLvdsMode = 2U;
            }
            if (m_StaticParams.BitsVal == 0)
            {
                RFDCCardModeConfigurationParam.eDataFormatMode = 1U;
            }
            else if (m_StaticParams.BitsVal == 1)
            {
                RFDCCardModeConfigurationParam.eDataFormatMode = 2U;
            }
            else if (m_StaticParams.BitsVal == 2)
            {
                RFDCCardModeConfigurationParam.eDataFormatMode = 3U;
            }
            if (m_RadarDeviceModeConfigParams.NumberOfRadarDevicesDetected <= 1)
            {
                string full_command2 = string.Format("ar1.CaptureCardConfig_Mode_WithoutSPI_mult({0}, {1}, {2}, {3}, {4}, {5}, {6})", new object[]
                {
                    GlobalRef.g_RadarDeviceId,
                    RFDCCardModeConfigurationParam.eLogMode,
                    RFDCCardModeConfigurationParam.eLvdsMode,
                    RFDCCardModeConfigurationParam.eDataXferMode,
                    RFDCCardModeConfigurationParam.eDataCaptureMode,
                    RFDCCardModeConfigurationParam.eDataFormatMode,
                    RFDCCardModeConfigurationParam.u8Timer
                });
                m_GuiManager.RecordLog(6, full_command2);
            }
            ushort packetDelay = m_RecordDataPacketDelayConfigParams.packetDelay;
            if (m_RadarDeviceModeConfigParams.NumberOfRadarDevicesDetected <= 1)
            {
                string full_command3 = string.Format("ar1.CaptureCardConfig_PacketDelay({0})", new object[]
                {
                    m_RecordDataPacketDelayConfigParams.packetDelay
                });
                m_GuiManager.RecordLog(6, full_command3);
            }
            string text = Path.GetDirectoryName(Application.StartupPath) + "\\PostProc";
            string text2 = "cf.json";
            string path = text + "\\cf.json";
            string text3 = "DCA1000EVM_CLI_Control.exe";
            object obj = JsonConvert.DeserializeObject(File.ReadAllText(path));
            if (ScriptOps.c0002a9.f0001ad == null)
            {
                ScriptOps.c0002a9.f0001ad = CallSite<Func<CallSite, object, string, ushort, object>>.Create(Binder.SetIndex(CSharpBinderFlags.None, typeof(ScriptOps), new CSharpArgumentInfo[]
                {
                    CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.None, null),
                    CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.UseCompileTimeType | CSharpArgumentInfoFlags.Constant, null),
                    CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.UseCompileTimeType, null)
                }));
            }
            Func<CallSite, object, string, ushort, object> target = ScriptOps.c0002a9.f0001ad.Target;
            CallSite f0001ad = ScriptOps.c0002a9.f0001ad;
            if (ScriptOps.c0002a9.f0001ac == null)
            {
                ScriptOps.c0002a9.f0001ac = CallSite<Func<CallSite, object, string, object>>.Create(Binder.GetIndex(CSharpBinderFlags.None, typeof(ScriptOps), new CSharpArgumentInfo[]
                {
                    CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.None, null),
                    CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.UseCompileTimeType | CSharpArgumentInfoFlags.Constant, null)
                }));
            }
            target(f0001ad, ScriptOps.c0002a9.f0001ac.Target(ScriptOps.c0002a9.f0001ac, obj, "DCA1000Config"), "packetDelay_us", packetDelay);
            if (ScriptOps.c0002a9.f0001af == null)
            {
                ScriptOps.c0002a9.f0001af = CallSite<Func<CallSite, object, string, string, object>>.Create(Binder.SetIndex(CSharpBinderFlags.None, typeof(ScriptOps), new CSharpArgumentInfo[]
                {
                    CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.None, null),
                    CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.UseCompileTimeType | CSharpArgumentInfoFlags.Constant, null),
                    CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.UseCompileTimeType, null)
                }));
            }
            Func<CallSite, object, string, string, object> target2 = ScriptOps.c0002a9.f0001af.Target;
            CallSite f0001af = ScriptOps.c0002a9.f0001af;
            if (ScriptOps.c0002a9.f0001ae == null)
            {
                ScriptOps.c0002a9.f0001ae = CallSite<Func<CallSite, object, string, object>>.Create(Binder.GetIndex(CSharpBinderFlags.None, typeof(ScriptOps), new CSharpArgumentInfo[]
                {
                    CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.None, null),
                    CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.UseCompileTimeType | CSharpArgumentInfoFlags.Constant, null)
                }));
            }
            target2(f0001af, ScriptOps.c0002a9.f0001ae.Target(ScriptOps.c0002a9.f0001ae, obj, "DCA1000Config"), "dataLoggingMode", arg);
            if (ScriptOps.c0002a9.f0001b1 == null)
            {
                ScriptOps.c0002a9.f0001b1 = CallSite<Func<CallSite, object, string, string, object>>.Create(Binder.SetIndex(CSharpBinderFlags.None, typeof(ScriptOps), new CSharpArgumentInfo[]
                {
                    CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.None, null),
                    CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.UseCompileTimeType | CSharpArgumentInfoFlags.Constant, null),
                    CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.UseCompileTimeType, null)
                }));
            }
            Func<CallSite, object, string, string, object> target3 = ScriptOps.c0002a9.f0001b1.Target;
            CallSite f0001b = ScriptOps.c0002a9.f0001b1;
            if (ScriptOps.c0002a9.f0001b0 == null)
            {
                ScriptOps.c0002a9.f0001b0 = CallSite<Func<CallSite, object, string, object>>.Create(Binder.GetIndex(CSharpBinderFlags.None, typeof(ScriptOps), new CSharpArgumentInfo[]
                {
                    CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.None, null),
                    CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.UseCompileTimeType | CSharpArgumentInfoFlags.Constant, null)
                }));
            }
            target3(f0001b, ScriptOps.c0002a9.f0001b0.Target(ScriptOps.c0002a9.f0001b0, obj, "DCA1000Config"), "dataTransferMode", arg2);
            if (ScriptOps.c0002a9.f0001b3 == null)
            {
                ScriptOps.c0002a9.f0001b3 = CallSite<Func<CallSite, object, string, string, object>>.Create(Binder.SetIndex(CSharpBinderFlags.None, typeof(ScriptOps), new CSharpArgumentInfo[]
                {
                    CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.None, null),
                    CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.UseCompileTimeType | CSharpArgumentInfoFlags.Constant, null),
                    CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.UseCompileTimeType, null)
                }));
            }
            Func<CallSite, object, string, string, object> target4 = ScriptOps.c0002a9.f0001b3.Target;
            CallSite f0001b2 = ScriptOps.c0002a9.f0001b3;
            if (ScriptOps.c0002a9.f0001b2 == null)
            {
                ScriptOps.c0002a9.f0001b2 = CallSite<Func<CallSite, object, string, object>>.Create(Binder.GetIndex(CSharpBinderFlags.None, typeof(ScriptOps), new CSharpArgumentInfo[]
                {
                    CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.None, null),
                    CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.UseCompileTimeType | CSharpArgumentInfoFlags.Constant, null)
                }));
            }
            target4(f0001b2, ScriptOps.c0002a9.f0001b2.Target(ScriptOps.c0002a9.f0001b2, obj, "DCA1000Config"), "dataCaptureMode", arg3);
            if (ScriptOps.c0002a9.f0001b5 == null)
            {
                ScriptOps.c0002a9.f0001b5 = CallSite<Func<CallSite, object, string, uint, object>>.Create(Binder.SetIndex(CSharpBinderFlags.None, typeof(ScriptOps), new CSharpArgumentInfo[]
                {
                    CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.None, null),
                    CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.UseCompileTimeType | CSharpArgumentInfoFlags.Constant, null),
                    CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.UseCompileTimeType, null)
                }));
            }
            Func<CallSite, object, string, uint, object> target5 = ScriptOps.c0002a9.f0001b5.Target;
            CallSite f0001b3 = ScriptOps.c0002a9.f0001b5;
            if (ScriptOps.c0002a9.f0001b4 == null)
            {
                ScriptOps.c0002a9.f0001b4 = CallSite<Func<CallSite, object, string, object>>.Create(Binder.GetIndex(CSharpBinderFlags.None, typeof(ScriptOps), new CSharpArgumentInfo[]
                {
                    CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.None, null),
                    CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.UseCompileTimeType | CSharpArgumentInfoFlags.Constant, null)
                }));
            }
            target5(f0001b3, ScriptOps.c0002a9.f0001b4.Target(ScriptOps.c0002a9.f0001b4, obj, "DCA1000Config"), "lvdsMode", RFDCCardModeConfigurationParam.eLvdsMode);
            if (ScriptOps.c0002a9.f0002e0 == null)
            {
                ScriptOps.c0002a9.f0002e0 = CallSite<Func<CallSite, object, string, uint, object>>.Create(Binder.SetIndex(CSharpBinderFlags.None, typeof(ScriptOps), new CSharpArgumentInfo[]
                {
                    CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.None, null),
                    CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.UseCompileTimeType | CSharpArgumentInfoFlags.Constant, null),
                    CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.UseCompileTimeType, null)
                }));
            }
            Func<CallSite, object, string, uint, object> target6 = ScriptOps.c0002a9.f0002e0.Target;
            CallSite f0002e = ScriptOps.c0002a9.f0002e0;
            if (ScriptOps.c0002a9.f0001b6 == null)
            {
                ScriptOps.c0002a9.f0001b6 = CallSite<Func<CallSite, object, string, object>>.Create(Binder.GetIndex(CSharpBinderFlags.None, typeof(ScriptOps), new CSharpArgumentInfo[]
                {
                    CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.None, null),
                    CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.UseCompileTimeType | CSharpArgumentInfoFlags.Constant, null)
                }));
            }
            target6(f0002e, ScriptOps.c0002a9.f0001b6.Target(ScriptOps.c0002a9.f0001b6, obj, "DCA1000Config"), "dataFormatMode", RFDCCardModeConfigurationParam.eDataFormatMode);
            if (ScriptOps.c0002a9.f0002e2 == null)
            {
                ScriptOps.c0002a9.f0002e2 = CallSite<Func<CallSite, object, string>>.Create(Binder.Convert(CSharpBinderFlags.None, typeof(string), typeof(ScriptOps)));
            }
            Func<CallSite, object, string> target7 = ScriptOps.c0002a9.f0002e2.Target;
            CallSite f0002e2 = ScriptOps.c0002a9.f0002e2;
            if (ScriptOps.c0002a9.f0002e1 == null)
            {
                ScriptOps.c0002a9.f0002e1 = CallSite<Func<CallSite, Type, object, Newtonsoft.Json.Formatting, object>>.Create(Binder.InvokeMember(CSharpBinderFlags.None, "SerializeObject", null, typeof(ScriptOps), new CSharpArgumentInfo[]
                {
                    CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.UseCompileTimeType | CSharpArgumentInfoFlags.IsStaticType, null),
                    CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.None, null),
                    CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.UseCompileTimeType | CSharpArgumentInfoFlags.Constant, null)
                }));
            }
            string contents = target7(f0002e2, ScriptOps.c0002a9.f0002e1.Target(ScriptOps.c0002a9.f0002e1, typeof(JsonConvert), obj, Newtonsoft.Json.Formatting.Indented));
            File.WriteAllText(path, contents);
            string text4 = "reset_fpga";
            string arguments = string.Concat(new string[]
            {
                "/C ",
                text3,
                " ",
                text4,
                " ",
                text2
            });
            ProcessStartInfo processStartInfo = new ProcessStartInfo();
            processStartInfo.FileName = "CMD.EXE";
            processStartInfo.WorkingDirectory = text;
            processStartInfo.Arguments = arguments;
            processStartInfo.UseShellExecute = false;
            processStartInfo.RedirectStandardOutput = true;
            processStartInfo.RedirectStandardError = true;
            processStartInfo.RedirectStandardInput = true;
            processStartInfo.CreateNoWindow = true;
            Process process = Process.Start(processStartInfo);
            string full_command4 = string.Format("Sending {0} command to DCA1000", text4);
            m_GuiManager.RecordLog(0, full_command4);
            if (process != null && !process.HasExited)
            {
                process.WaitForExit();
            }
            string full_command5 = process.StandardOutput.ReadToEnd();
            m_GuiManager.RecordLog(0, full_command5);
            text4 = "fpga";
            arguments = string.Concat(new string[]
            {
                "/C ",
                text3,
                " ",
                text4,
                " ",
                text2
            });
            processStartInfo.Arguments = arguments;
            process = Process.Start(processStartInfo);
            string full_command6 = string.Format("Sending {0} command to DCA1000", text4);
            m_GuiManager.RecordLog(0, full_command6);
            if (process != null && !process.HasExited)
            {
                process.WaitForExit();
            }
            string text5 = process.StandardOutput.ReadToEnd();
            m_GuiManager.RecordLog(0, text5);
            text4 = "record";
            arguments = string.Concat(new string[]
            {
                "/C ",
                text3,
                " ",
                text4,
                " ",
                text2
            });
            processStartInfo.Arguments = arguments;
            process = Process.Start(processStartInfo);
            full_command4 = string.Format("Sending {0} command to DCA1000", text4);
            m_GuiManager.RecordLog(0, full_command4);
            if (process != null && !process.HasExited)
            {
                process.WaitForExit();
            }
            string full_command7 = process.StandardOutput.ReadToEnd();
            m_GuiManager.RecordLog(0, full_command7);
            text4 = "fpga_version";
            arguments = string.Concat(new string[]
            {
                "/C ",
                text3,
                " ",
                text4,
                " ",
                text2
            });
            processStartInfo.Arguments = arguments;
            process = Process.Start(processStartInfo);
            full_command4 = string.Format("Sending {0} command to DCA1000", text4);
            m_GuiManager.RecordLog(0, full_command4);
            if (process != null && !process.HasExited)
            {
                process.WaitForExit();
            }
            string text6 = process.StandardOutput.ReadToEnd();
            m_GuiManager.RecordLog(0, text6);
            GlobalRef.f0002d3 = text6.Substring(19, 12);
            ScriptOps.m_MainForm.m_RFDataCaptureCard.m00006e(GlobalRef.f0002d3);
            if (text5 == "\r\nFPGA Configuration command : Success\r\n")
            {
                GlobalRef.g_CaptureCardConnectStatue = true;
                ScriptOps.m_MainForm.RFDataCaptureCard.UpdateCaptureCardDeviceConnectionConfigDataToGUI(true);
                result = 0;
            }
            return result;
        }

        private int iSetDisconnectViaEthernetChannelConfig_Impl(bool is_starting_op, bool is_ending_op)
        {
            return Imports.DisconnectRFDCCard();
        }

        private int iSetRXIFStageMonConfig_Impl(bool is_starting_op, bool is_ending_op)
        {
            RxIFStageMonitoringConfigurationParam.ProfileIndex = (byte)m_MonRXIFStageConfigParameters.ProfileIndex;
            RxIFStageMonitoringConfigurationParam.Reserved = 0;
            RxIFStageMonitoringConfigurationParam.Reserved2 = 0;
            RxIFStageMonitoringConfigurationParam.ReportingMode = (byte)m_MonRXIFStageConfigParameters.ReportingMode;
            RxIFStageMonitoringConfigurationParam.HPFCuttoffFreqErrorThreshold = m_MonRXIFStageConfigParameters.HPFCutofFreqErrorThreshold;
            RxIFStageMonitoringConfigurationParam.LPFCuttoffFreqErrorThreshold = m_MonRXIFStageConfigParameters.LPFCutofFreqErrorThreshold;
            RxIFStageMonitoringConfigurationParam.IFAGainErrorThreshold = (ushort)(m_MonRXIFStageConfigParameters.IFAGainErrorThreshold * 10.0);
            RxIFStageMonitoringConfigurationParam.Reserved3 = 0U;
            IntPtr data = GCHandle.Alloc(RxIFStageMonitoringConfigurationParam, GCHandleType.Pinned).AddrOfPinnedObject();
            int num;
            if (GlobalRef.g_NtvRS232Connect[(int)GlobalRef.g_RadarDeviceIndex] && GlobalRef.g_CasCadeDeviceSpiConnect == 0U)
            {
                num = m_TsWrapper.Calling_WriteAddr_Single(4294959848U, 1U);
                if (m_GuiManager.DllOps.itempDisconnect(false) == 0)
                {
                    string full_command = string.Format("Debug Port Disconnected", new object[0]);
                    m_GuiManager.RecordLog(0, full_command);
                    if (!GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
                    {
                        iRs232ConnectDisconnect_impl();
                    }
                }
            }
            if (m_RadarDeviceModeConfigParams.NumberOfRadarDevicesDetected <= 1)
            {
                string full_command2 = string.Format("ar1.SetRfRxIfStageMonConfig({0}, {1}, {2}, {3}, {4} )", new object[]
                {
                    m_MonRXIFStageConfigParameters.ProfileIndex,
                    m_MonRXIFStageConfigParameters.ReportingMode,
                    m_MonRXIFStageConfigParameters.HPFCutofFreqErrorThreshold,
                    m_MonRXIFStageConfigParameters.LPFCutofFreqErrorThreshold,
                    (decimal)Math.Round(m_MonRXIFStageConfigParameters.IFAGainErrorThreshold, 1)
                });
                m_GuiManager.RecordLog(6, full_command2);
            }
            else
            {
                string full_command3 = string.Format("ar1.SetRfRxIfStageMonConfig_mult({0}, {1}, {2}, {3}, {4}, {5})", new object[]
                {
                    GlobalRef.g_RadarDeviceId,
                    m_MonRXIFStageConfigParameters.ProfileIndex,
                    m_MonRXIFStageConfigParameters.ReportingMode,
                    m_MonRXIFStageConfigParameters.HPFCutofFreqErrorThreshold,
                    m_MonRXIFStageConfigParameters.LPFCutofFreqErrorThreshold,
                    (decimal)Math.Round(m_MonRXIFStageConfigParameters.IFAGainErrorThreshold, 1)
                });
                m_GuiManager.RecordLog(6, full_command3);
            }
            uint g_RadarDeviceId = GlobalRef.g_RadarDeviceId;
            num = Imports.RadarLinkImpl_RfRxIfStageMonConfig(GlobalRef.g_RadarDeviceId, data);
            if ((num == 0 && ((GlobalRef.g_CasCadeDeviceSpiConnect & 1U) == 1U || (GlobalRef.g_CasCadeDeviceSpiConnect & 2U) == 2U || (GlobalRef.g_CasCadeDeviceSpiConnect & 4U) == 4U || (GlobalRef.g_CasCadeDeviceSpiConnect & 8U) == 8U)) || GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
            {
                string full_command4 = string.Format("Status: Passed", new object[0]);
                m_GuiManager.RecordLog(6, full_command4);
                for (int i = 0; i < 4; i++)
                {
                    if (jsonConfigInProgress)
                    {
                        break;
                    }
                    if (((ulong)g_RadarDeviceId & (ulong)(1L << (i & 31))) != 0UL)
                    {
                        int mmwaveDevIndex = getMmwaveDevIndex(i);
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].monitoringConfig.rlRxIfStageMonConf_t.profileIndx = (int)RxIFStageMonitoringConfigurationParam.ProfileIndex;
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].monitoringConfig.rlRxIfStageMonConf_t.reportMode = (int)RxIFStageMonitoringConfigurationParam.ReportingMode;
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].monitoringConfig.rlRxIfStageMonConf_t.hpfCutoffErrThresh = (int)RxIFStageMonitoringConfigurationParam.HPFCuttoffFreqErrorThreshold;
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].monitoringConfig.rlRxIfStageMonConf_t.lpfCutoffErrThresh = (int)RxIFStageMonitoringConfigurationParam.LPFCuttoffFreqErrorThreshold;
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].monitoringConfig.rlRxIfStageMonConf_t.ifaGainErrThresh = m_MonRXIFStageConfigParameters.IFAGainErrorThreshold;
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].monitoringConfig.rlRxIfStageMonConf_t.isConfigured = 1;
                    }
                }
            }
            else
            {
                string msg = string.Format("Status: Failed, Error Type: {0}", new object[]
                {
                    GetErrorType(num)
                });
                GlobalRef.LuaWrapper.PrintError(msg);
            }
            if (GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
            {
                if (iRs232ConnectDisconnect_impl() == 0 && !GlobalRef.g_NtvRS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
                {
                    m_GuiManager.DllOps.iConnect(1U, 0U);
                    string full_command5 = string.Format("Debug Port Reconnected!", new object[0]);
                    m_GuiManager.RecordLog(9, full_command5);
                    ScriptOps.KeepTrying(2000, new Func<bool>(spare_read));
                }
            }
            else if (GlobalRef.g_CasCadeDeviceSpiConnect == 0U)
            {
                string full_command6 = string.Format("Error Occurred in Port open close", new object[0]);
                m_GuiManager.RecordLog(9, full_command6);
            }
            return num;
        }

        public int SpiSetBSSPatchVersionOverSPI(out string ROMVersion, out string PatchVersion)
        {
            ROMVersion = string.Empty;
            PatchVersion = string.Empty;
            int num = Imports.RadarLinkImpl_DeviceGetRfVersion(GlobalRef.g_RadarDeviceId, out f0002d9);
            Thread.Sleep(200);
            if (num == 0)
            {
                ROMVersion = string.Concat(new string[]
                {
                    Convert.ToString(f0002d9.BSSFwVersionMajor),
                    ".",
                    Convert.ToString(f0002d9.BSSFwVersionMinor),
                    ".",
                    Convert.ToString(f0002d9.BSSFwVersioBuild),
                    ".",
                    Convert.ToString(f0002d9.BSSFwVersionDebug),
                    "(",
                    Convert.ToString(f0002d9.BSSFwVersionDay),
                    "/",
                    Convert.ToString(f0002d9.BSSFwVersionMonth),
                    "/",
                    Convert.ToString(f0002d9.BSSFwVersionYear),
                    ")"
                });
                if (f0002d9.BSSFwVersionPatchMajor == 0 && f0002d9.BSSFwVersionPatchMinor == 0 && (f0002d9.BSSFwPatchBuildDebugVersion & 240) == 0 && (f0002d9.BSSFwPatchBuildDebugVersion & 15) == 0 && f0002d9.BSSFwVersionPatchDay == 0 && f0002d9.BSSFwVersionPatchMonth == 0 && f0002d9.BSSFwVersionPatchYear == 0)
                {
                    PatchVersion = "NA";
                }
                else
                {
                    PatchVersion = string.Concat(new string[]
                    {
                        Convert.ToString(f0002d9.BSSFwVersionPatchMajor),
                        ".",
                        Convert.ToString(f0002d9.BSSFwVersionPatchMinor),
                        ".",
                        Convert.ToString((f0002d9.BSSFwPatchBuildDebugVersion & 240) >> 4),
                        ".",
                        Convert.ToString((int)(f0002d9.BSSFwPatchBuildDebugVersion & 15)),
                        "(",
                        Convert.ToString(f0002d9.BSSFwVersionPatchDay),
                        "/",
                        Convert.ToString(f0002d9.BSSFwVersionPatchMonth),
                        "/",
                        Convert.ToString(f0002d9.BSSFwVersionPatchYear),
                        ")"
                    });
                }
                return 0;
            }
            string msg = string.Format("Status: Failed, Error Type: {0}", new object[]
            {
                GetErrorType(num)
            });
            GlobalRef.LuaWrapper.PrintError(msg);
            return -1;
        }

        public int SpiSetMSSPatchVersionOverSPI(out string ROMVersion, out string PatchVersion)
        {
            ROMVersion = string.Empty;
            PatchVersion = string.Empty;
            int num = Imports.RadarLinkImpl_DeviceGetMssVersion(GlobalRef.g_RadarDeviceId, out MSSFwVersionParam);
            Thread.Sleep(200);
            if (num == 0)
            {
                ROMVersion = string.Concat(new string[]
                {
                    Convert.ToString(MSSFwVersionParam.MSSFwVersionMajor),
                    ".",
                    Convert.ToString(MSSFwVersionParam.MSSFwVersionMinor),
                    ".",
                    Convert.ToString(MSSFwVersionParam.MSSFwVersioBuild),
                    ".",
                    Convert.ToString(MSSFwVersionParam.MSSFwVersionDebug),
                    "(",
                    Convert.ToString(MSSFwVersionParam.MSSFwVersionDay),
                    "/",
                    Convert.ToString(MSSFwVersionParam.MSSFwVersionMonth),
                    "/",
                    Convert.ToString(MSSFwVersionParam.MSSFwVersionYear),
                    ")"
                });
                if (MSSFwVersionParam.MSSFwVersionPatchMajor == 0 && MSSFwVersionParam.MSSFwVersionPatchMinor == 0 && (MSSFwVersionParam.MSSFwPatchBuildDebugVersion & 240) == 0 && (MSSFwVersionParam.MSSFwPatchBuildDebugVersion & 15) == 0 && MSSFwVersionParam.MSSFwVersionPatchDay == 0 && MSSFwVersionParam.MSSFwVersionPatchMonth == 0 && MSSFwVersionParam.MSSFwVersionPatchYear == 0)
                {
                    PatchVersion = string.Concat(new string[]
                    {
                        Convert.ToString(MSSFwVersionParam.MSSFwVersionPatchMajor),
                        ".",
                        Convert.ToString(MSSFwVersionParam.MSSFwVersionPatchMinor),
                        ".",
                        Convert.ToString((int)(MSSFwVersionParam.MSSFwPatchBuildDebugVersion & 240)),
                        ".",
                        Convert.ToString((int)(MSSFwVersionParam.MSSFwPatchBuildDebugVersion & 15)),
                        "(",
                        Convert.ToString(MSSFwVersionParam.MSSFwVersionPatchDay),
                        "/",
                        Convert.ToString(MSSFwVersionParam.MSSFwVersionPatchMonth),
                        "/",
                        Convert.ToString(MSSFwVersionParam.MSSFwVersionPatchYear),
                        ")"
                    });
                    PatchVersion = "NA";
                }
                else
                {
                    PatchVersion = string.Concat(new string[]
                    {
                        Convert.ToString(MSSFwVersionParam.MSSFwVersionPatchMajor),
                        ".",
                        Convert.ToString(MSSFwVersionParam.MSSFwVersionPatchMinor),
                        ".",
                        Convert.ToString((MSSFwVersionParam.MSSFwPatchBuildDebugVersion & 240) >> 4),
                        ".",
                        Convert.ToString((int)(MSSFwVersionParam.MSSFwPatchBuildDebugVersion & 15)),
                        "(",
                        Convert.ToString(MSSFwVersionParam.MSSFwVersionPatchDay),
                        "/",
                        Convert.ToString(MSSFwVersionParam.MSSFwVersionPatchMonth),
                        "/",
                        Convert.ToString(MSSFwVersionParam.MSSFwVersionPatchYear),
                        ")"
                    });
                }
                return 0;
            }
            string msg = string.Format("Status: Failed, Error Type: {0}", new object[]
            {
                GetErrorType(num)
            });
            GlobalRef.LuaWrapper.PrintError(msg);
            return -1;
        }

        private int iSetTX1BPMPhaseMonConfig_Impl(bool is_starting_op, bool is_ending_op)
        {
            ScriptOps.Tx1BPMPhaseMonitoringConfigurationParam.ProfileIndex = 0;
            ScriptOps.Tx1BPMPhaseMonitoringConfigurationParam.phaseShifterCfg = 0;
            ScriptOps.Tx1BPMPhaseMonitoringConfigurationParam.phaseShifterVal1 = 0;
            ScriptOps.Tx1BPMPhaseMonitoringConfigurationParam.phaseShifterVal2 = 0;
            ScriptOps.Tx1BPMPhaseMonitoringConfigurationParam.ReportingMode = 0;
            ScriptOps.Tx1BPMPhaseMonitoringConfigurationParam.RxChannel = 0;
            ScriptOps.Tx1BPMPhaseMonitoringConfigurationParam.TxBPMPhaseErrorThreshold = 0;
            ScriptOps.Tx1BPMPhaseMonitoringConfigurationParam.TxBPMAmplitudeErrorThreshold = 0;
            ScriptOps.Tx1BPMPhaseMonitoringConfigurationParam.TxPhaseShifter1Threshold = 0;
            ScriptOps.Tx1BPMPhaseMonitoringConfigurationParam.TxPhaseShifter2Threshold = 0;
            ScriptOps.Tx1BPMPhaseMonitoringConfigurationParam.Reserved = 0;
            ScriptOps.Tx2BPMPhaseMonitoringConfigurationParam.ProfileIndex = 0;
            ScriptOps.Tx2BPMPhaseMonitoringConfigurationParam.phaseShifterCfg = 0;
            ScriptOps.Tx2BPMPhaseMonitoringConfigurationParam.phaseShifterVal1 = 0;
            ScriptOps.Tx2BPMPhaseMonitoringConfigurationParam.phaseShifterVal2 = 0;
            ScriptOps.Tx2BPMPhaseMonitoringConfigurationParam.ReportingMode = 0;
            ScriptOps.Tx2BPMPhaseMonitoringConfigurationParam.RxChannel = 0;
            ScriptOps.Tx2BPMPhaseMonitoringConfigurationParam.TxBPMPhaseErrorThreshold = 0;
            ScriptOps.Tx2BPMPhaseMonitoringConfigurationParam.TxBPMAmplitudeErrorThreshold = 0;
            ScriptOps.Tx2BPMPhaseMonitoringConfigurationParam.TxPhaseShifter1Threshold = 0;
            ScriptOps.Tx2BPMPhaseMonitoringConfigurationParam.TxPhaseShifter2Threshold = 0;
            ScriptOps.Tx2BPMPhaseMonitoringConfigurationParam.Reserved = 0;
            ScriptOps.Tx3BPMPhaseMonitoringConfigurationParam.ProfileIndex = 0;
            ScriptOps.Tx3BPMPhaseMonitoringConfigurationParam.phaseShifterCfg = 0;
            ScriptOps.Tx3BPMPhaseMonitoringConfigurationParam.phaseShifterVal1 = 0;
            ScriptOps.Tx3BPMPhaseMonitoringConfigurationParam.phaseShifterVal2 = 0;
            ScriptOps.Tx3BPMPhaseMonitoringConfigurationParam.ReportingMode = 0;
            ScriptOps.Tx3BPMPhaseMonitoringConfigurationParam.RxChannel = 0;
            ScriptOps.Tx3BPMPhaseMonitoringConfigurationParam.TxBPMPhaseErrorThreshold = 0;
            ScriptOps.Tx3BPMPhaseMonitoringConfigurationParam.TxBPMAmplitudeErrorThreshold = 0;
            ScriptOps.Tx3BPMPhaseMonitoringConfigurationParam.TxPhaseShifter1Threshold = 0;
            ScriptOps.Tx3BPMPhaseMonitoringConfigurationParam.TxPhaseShifter2Threshold = 0;
            ScriptOps.Tx3BPMPhaseMonitoringConfigurationParam.Reserved = 0;
            ScriptOps.Tx1BPMPhaseMonitoringConfigurationParam.ProfileIndex = m_MonTx1BPMPhaseConfigParameters.ProfileIndex;
            ScriptOps.Tx1BPMPhaseMonitoringConfigurationParam.phaseShifterCfg = (byte)((int)((byte)(Math.Round((double)(m_MonTx1BPMPhaseConfigParameters.phaseShifterCfgIncVal * 64f)) / 360.0) & 63) | (int)m_MonTx1BPMPhaseConfigParameters.phaseShifterCfgIncValEna << 6 | (int)m_MonTx1BPMPhaseConfigParameters.phaseShifterMonEna << 7);
            ScriptOps.Tx1BPMPhaseMonitoringConfigurationParam.phaseShifterVal1 = (byte)(Math.Round((double)(m_MonTx1BPMPhaseConfigParameters.phaseShifter1 * 64f)) / 360.0);
            ScriptOps.Tx1BPMPhaseMonitoringConfigurationParam.phaseShifterVal2 = (byte)(Math.Round((double)(m_MonTx1BPMPhaseConfigParameters.phaseShifter2 * 64f)) / 360.0);
            ScriptOps.Tx1BPMPhaseMonitoringConfigurationParam.ReportingMode = m_MonTx1BPMPhaseConfigParameters.ReportingMode;
            ScriptOps.Tx1BPMPhaseMonitoringConfigurationParam.RxChannel = (byte)((int)m_MonTx1BPMPhaseConfigParameters.Rx0Channel | (int)m_MonTx1BPMPhaseConfigParameters.Rx1Channel << 1 | (int)m_MonTx1BPMPhaseConfigParameters.Rx2Channel << 2 | (int)m_MonTx1BPMPhaseConfigParameters.Rx3Channel << 3);
            ScriptOps.Tx1BPMPhaseMonitoringConfigurationParam.TxBPMPhaseErrorThreshold = (ushort)(m_MonTx1BPMPhaseConfigParameters.TxBPMPhaseErrorThreshold * 65536.0 / 360.0);
            ScriptOps.Tx1BPMPhaseMonitoringConfigurationParam.TxBPMAmplitudeErrorThreshold = (ushort)(m_MonTx1BPMPhaseConfigParameters.TxBPMAmplitudeErrorThreshold * 10.0);
            ScriptOps.Tx1BPMPhaseMonitoringConfigurationParam.TxPhaseShifter1Threshold = (ushort)(m_MonTx1BPMPhaseConfigParameters.TxPhaseShifter1Threshold * 65536.0 / 360.0);
            ScriptOps.Tx1BPMPhaseMonitoringConfigurationParam.TxPhaseShifter2Threshold = (ushort)(m_MonTx1BPMPhaseConfigParameters.TxPhaseShifter2Threshold * 65536.0 / 360.0);
            ScriptOps.Tx1BPMPhaseMonitoringConfigurationParam.Reserved = 0;
            IntPtr f = GCHandle.Alloc(ScriptOps.Tx1BPMPhaseMonitoringConfigurationParam, GCHandleType.Pinned).AddrOfPinnedObject();
            GCHandle.Alloc(ScriptOps.Tx2BPMPhaseMonitoringConfigurationParam, GCHandleType.Pinned).AddrOfPinnedObject();
            GCHandle.Alloc(ScriptOps.Tx3BPMPhaseMonitoringConfigurationParam, GCHandleType.Pinned).AddrOfPinnedObject();
            ScriptOps.Tx1Tx2Tx3BPMPhaseMonitoringConfigurationParam.f000022 = f;
            ScriptOps.Tx1Tx2Tx3BPMPhaseMonitoringConfigurationParam.f000023 = IntPtr.Zero;
            ScriptOps.Tx1Tx2Tx3BPMPhaseMonitoringConfigurationParam.f000024 = IntPtr.Zero;
            IntPtr data = GCHandle.Alloc(ScriptOps.Tx1Tx2Tx3BPMPhaseMonitoringConfigurationParam, GCHandleType.Pinned).AddrOfPinnedObject();
            int num;
            if (GlobalRef.g_NtvRS232Connect[(int)GlobalRef.g_RadarDeviceIndex] && GlobalRef.g_CasCadeDeviceSpiConnect == 0U)
            {
                num = m_TsWrapper.Calling_WriteAddr_Single(4294959848U, 1U);
                if (m_GuiManager.DllOps.itempDisconnect(false) == 0)
                {
                    string full_command = string.Format("Debug Port Disconnected", new object[0]);
                    m_GuiManager.RecordLog(0, full_command);
                    if (!GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
                    {
                        iRs232ConnectDisconnect_impl();
                    }
                }
            }
            if (m_RadarDeviceModeConfigParams.NumberOfRadarDevicesDetected <= 1)
            {
                string full_command2 = string.Format("ar1.SetRfTx0BpmMonConfig({0}, {1}, {2}, {3}, {4}, {5}, {6}, {7}, {8}, {9}, {10}, {11})", new object[]
                {
                    ScriptOps.Tx1BPMPhaseMonitoringConfigurationParam.ProfileIndex,
                    (int)m_MonTx1BPMPhaseConfigParameters.phaseShifterCfgIncValEna | (int)m_MonTx1BPMPhaseConfigParameters.phaseShifterMonEna << 1,
                    (decimal)Math.Round((double)m_MonTx1BPMPhaseConfigParameters.phaseShifterCfgIncVal, 3),
                    (decimal)Math.Round((double)m_MonTx1BPMPhaseConfigParameters.phaseShifter1, 3),
                    (decimal)Math.Round((double)m_MonTx1BPMPhaseConfigParameters.phaseShifter2, 3),
                    ScriptOps.Tx1BPMPhaseMonitoringConfigurationParam.ReportingMode,
                    ScriptOps.Tx1BPMPhaseMonitoringConfigurationParam.RxChannel,
                    (decimal)Math.Round(m_MonTx1BPMPhaseConfigParameters.TxBPMPhaseErrorThreshold, 2),
                    (decimal)Math.Round(m_MonTx1BPMPhaseConfigParameters.TxBPMAmplitudeErrorThreshold, 2),
                    (decimal)Math.Round(m_MonTx1BPMPhaseConfigParameters.TxPhaseShifter1Threshold, 2),
                    (decimal)Math.Round(m_MonTx1BPMPhaseConfigParameters.TxPhaseShifter2Threshold, 2),
                    m_MonTx1BPMPhaseConfigParameters.Reserved
                });
                m_GuiManager.RecordLog(6, full_command2);
            }
            else
            {
                string full_command3 = string.Format("ar1.SetRfTx0BpmMonConfig_mult({0}, {1}, {2}, {3}, {4}, {5}, {6}, {7}, {8}, {9}, {10}, {11}, {12})", new object[]
                {
                    GlobalRef.g_RadarDeviceId,
                    ScriptOps.Tx1BPMPhaseMonitoringConfigurationParam.ProfileIndex,
                    (int)m_MonTx1BPMPhaseConfigParameters.phaseShifterCfgIncValEna | (int)m_MonTx1BPMPhaseConfigParameters.phaseShifterMonEna << 1,
                    (decimal)Math.Round((double)m_MonTx1BPMPhaseConfigParameters.phaseShifterCfgIncVal, 3),
                    (decimal)Math.Round((double)m_MonTx1BPMPhaseConfigParameters.phaseShifter1, 3),
                    (decimal)Math.Round((double)m_MonTx1BPMPhaseConfigParameters.phaseShifter2, 3),
                    ScriptOps.Tx1BPMPhaseMonitoringConfigurationParam.ReportingMode,
                    ScriptOps.Tx1BPMPhaseMonitoringConfigurationParam.RxChannel,
                    (decimal)Math.Round(m_MonTx1BPMPhaseConfigParameters.TxBPMPhaseErrorThreshold, 2),
                    (decimal)Math.Round(m_MonTx1BPMPhaseConfigParameters.TxBPMAmplitudeErrorThreshold, 2),
                    (decimal)Math.Round(m_MonTx1BPMPhaseConfigParameters.TxPhaseShifter1Threshold, 2),
                    (decimal)Math.Round(m_MonTx1BPMPhaseConfigParameters.TxPhaseShifter2Threshold, 2),
                    m_MonTx1BPMPhaseConfigParameters.Reserved
                });
                m_GuiManager.RecordLog(6, full_command3);
            }
            uint g_RadarDeviceId = GlobalRef.g_RadarDeviceId;
            num = Imports.RadarLinkImpl_RfTxBpmMonConfig((byte)GlobalRef.g_RadarDeviceId, data);
            if ((num == 0 && ((GlobalRef.g_CasCadeDeviceSpiConnect & 1U) == 1U || (GlobalRef.g_CasCadeDeviceSpiConnect & 2U) == 2U || (GlobalRef.g_CasCadeDeviceSpiConnect & 4U) == 4U || (GlobalRef.g_CasCadeDeviceSpiConnect & 8U) == 8U)) || GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
            {
                string full_command4 = string.Format("Status: Passed", new object[0]);
                m_GuiManager.RecordLog(6, full_command4);
                for (int i = 0; i < 4; i++)
                {
                    if (jsonConfigInProgress)
                    {
                        break;
                    }
                    if (((ulong)g_RadarDeviceId & (ulong)(1L << (i & 31))) != 0UL)
                    {
                        int mmwaveDevIndex = getMmwaveDevIndex(i);
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].monitoringConfig.rlAllTxBpmMonConf_t.p00001c.profileIndx = (int)ScriptOps.Tx1BPMPhaseMonitoringConfigurationParam.ProfileIndex;
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].monitoringConfig.rlAllTxBpmMonConf_t.p00001c.reportMode = (int)ScriptOps.Tx1BPMPhaseMonitoringConfigurationParam.ReportingMode;
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].monitoringConfig.rlAllTxBpmMonConf_t.p00001c.rxEn = "0x" + ScriptOps.Tx1BPMPhaseMonitoringConfigurationParam.RxChannel.ToString("X");
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].monitoringConfig.rlAllTxBpmMonConf_t.p00001c.txBpmPhaseErrThresh = m_MonTx1BPMPhaseConfigParameters.TxBPMPhaseErrorThreshold;
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].monitoringConfig.rlAllTxBpmMonConf_t.p00001c.txBpmAmplErrThresh = m_MonTx1BPMPhaseConfigParameters.TxBPMAmplitudeErrorThreshold;
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].monitoringConfig.rlAllTxBpmMonConf_t.isConfigured = 1;
                    }
                }
            }
            else
            {
                string msg = string.Format("Status: Failed, Error Type: {0}", new object[]
                {
                    GetErrorType(num)
                });
                GlobalRef.LuaWrapper.PrintError(msg);
            }
            if (GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex] && iRs232ConnectDisconnect_impl() == 0 && !GlobalRef.g_NtvRS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
            {
                m_GuiManager.DllOps.iConnect(1U, 0U);
                string full_command5 = string.Format("Debug Port Reconnected!", new object[0]);
                m_GuiManager.RecordLog(9, full_command5);
                ScriptOps.KeepTrying(2000, new Func<bool>(spare_read));
            }
            return num;
        }

        private int iSetTX2BPMPhaseMonConfig_Impl(bool is_starting_op, bool is_ending_op)
        {
            ScriptOps.Tx1BPMPhaseMonitoringConfigurationParam.ProfileIndex = 0;
            ScriptOps.Tx1BPMPhaseMonitoringConfigurationParam.phaseShifterCfg = 0;
            ScriptOps.Tx1BPMPhaseMonitoringConfigurationParam.phaseShifterVal1 = 0;
            ScriptOps.Tx1BPMPhaseMonitoringConfigurationParam.phaseShifterVal2 = 0;
            ScriptOps.Tx1BPMPhaseMonitoringConfigurationParam.ReportingMode = 0;
            ScriptOps.Tx1BPMPhaseMonitoringConfigurationParam.RxChannel = 0;
            ScriptOps.Tx1BPMPhaseMonitoringConfigurationParam.TxBPMPhaseErrorThreshold = 0;
            ScriptOps.Tx1BPMPhaseMonitoringConfigurationParam.TxBPMAmplitudeErrorThreshold = 0;
            ScriptOps.Tx1BPMPhaseMonitoringConfigurationParam.TxPhaseShifter1Threshold = 0;
            ScriptOps.Tx1BPMPhaseMonitoringConfigurationParam.TxPhaseShifter2Threshold = 0;
            ScriptOps.Tx1BPMPhaseMonitoringConfigurationParam.Reserved = 0;
            ScriptOps.Tx2BPMPhaseMonitoringConfigurationParam.ProfileIndex = 0;
            ScriptOps.Tx2BPMPhaseMonitoringConfigurationParam.phaseShifterCfg = 0;
            ScriptOps.Tx2BPMPhaseMonitoringConfigurationParam.phaseShifterVal1 = 0;
            ScriptOps.Tx2BPMPhaseMonitoringConfigurationParam.phaseShifterVal2 = 0;
            ScriptOps.Tx2BPMPhaseMonitoringConfigurationParam.ReportingMode = 0;
            ScriptOps.Tx2BPMPhaseMonitoringConfigurationParam.RxChannel = 0;
            ScriptOps.Tx2BPMPhaseMonitoringConfigurationParam.TxBPMPhaseErrorThreshold = 0;
            ScriptOps.Tx2BPMPhaseMonitoringConfigurationParam.TxBPMAmplitudeErrorThreshold = 0;
            ScriptOps.Tx2BPMPhaseMonitoringConfigurationParam.TxPhaseShifter1Threshold = 0;
            ScriptOps.Tx2BPMPhaseMonitoringConfigurationParam.TxPhaseShifter2Threshold = 0;
            ScriptOps.Tx2BPMPhaseMonitoringConfigurationParam.Reserved = 0;
            ScriptOps.Tx3BPMPhaseMonitoringConfigurationParam.ProfileIndex = 0;
            ScriptOps.Tx3BPMPhaseMonitoringConfigurationParam.phaseShifterCfg = 0;
            ScriptOps.Tx3BPMPhaseMonitoringConfigurationParam.phaseShifterVal1 = 0;
            ScriptOps.Tx3BPMPhaseMonitoringConfigurationParam.phaseShifterVal2 = 0;
            ScriptOps.Tx3BPMPhaseMonitoringConfigurationParam.ReportingMode = 0;
            ScriptOps.Tx3BPMPhaseMonitoringConfigurationParam.RxChannel = 0;
            ScriptOps.Tx3BPMPhaseMonitoringConfigurationParam.TxBPMPhaseErrorThreshold = 0;
            ScriptOps.Tx3BPMPhaseMonitoringConfigurationParam.TxBPMAmplitudeErrorThreshold = 0;
            ScriptOps.Tx3BPMPhaseMonitoringConfigurationParam.TxPhaseShifter1Threshold = 0;
            ScriptOps.Tx3BPMPhaseMonitoringConfigurationParam.TxPhaseShifter2Threshold = 0;
            ScriptOps.Tx3BPMPhaseMonitoringConfigurationParam.Reserved = 0;
            ScriptOps.Tx2BPMPhaseMonitoringConfigurationParam.ProfileIndex = m_MonTx2BPMPhaseConfigParameters.ProfileIndex;
            ScriptOps.Tx2BPMPhaseMonitoringConfigurationParam.phaseShifterCfg = (byte)((int)((byte)(Math.Round((double)(m_MonTx2BPMPhaseConfigParameters.phaseShifterCfgIncVal * 64f)) / 360.0) & 63) | (int)m_MonTx2BPMPhaseConfigParameters.phaseShifterCfgIncValEna << 6 | (int)m_MonTx2BPMPhaseConfigParameters.phaseShifterMonEna << 7);
            ScriptOps.Tx2BPMPhaseMonitoringConfigurationParam.phaseShifterVal1 = (byte)(Math.Round((double)(m_MonTx2BPMPhaseConfigParameters.phaseShifter1 * 64f)) / 360.0);
            ScriptOps.Tx2BPMPhaseMonitoringConfigurationParam.phaseShifterVal2 = (byte)(Math.Round((double)(m_MonTx2BPMPhaseConfigParameters.phaseShifter2 * 64f)) / 360.0);
            ScriptOps.Tx2BPMPhaseMonitoringConfigurationParam.ReportingMode = m_MonTx2BPMPhaseConfigParameters.ReportingMode;
            ScriptOps.Tx2BPMPhaseMonitoringConfigurationParam.RxChannel = (byte)((int)m_MonTx2BPMPhaseConfigParameters.Rx0Channel | (int)m_MonTx2BPMPhaseConfigParameters.Rx1Channel << 1 | (int)m_MonTx2BPMPhaseConfigParameters.Rx2Channel << 2 | (int)m_MonTx2BPMPhaseConfigParameters.Rx3Channel << 3);
            ScriptOps.Tx2BPMPhaseMonitoringConfigurationParam.TxBPMPhaseErrorThreshold = (ushort)(m_MonTx2BPMPhaseConfigParameters.TxBPMPhaseErrorThreshold * 65536.0 / 360.0);
            ScriptOps.Tx2BPMPhaseMonitoringConfigurationParam.TxBPMAmplitudeErrorThreshold = (ushort)(m_MonTx2BPMPhaseConfigParameters.TxBPMAmplitudeErrorThreshold * 10.0);
            ScriptOps.Tx2BPMPhaseMonitoringConfigurationParam.TxPhaseShifter1Threshold = (ushort)(m_MonTx2BPMPhaseConfigParameters.TxPhaseShifter1Threshold * 65536.0 / 360.0);
            ScriptOps.Tx2BPMPhaseMonitoringConfigurationParam.TxPhaseShifter2Threshold = (ushort)(m_MonTx2BPMPhaseConfigParameters.TxPhaseShifter2Threshold * 65536.0 / 360.0);
            ScriptOps.Tx2BPMPhaseMonitoringConfigurationParam.Reserved = 0;
            GCHandle.Alloc(ScriptOps.Tx1BPMPhaseMonitoringConfigurationParam, GCHandleType.Pinned).AddrOfPinnedObject();
            IntPtr f = GCHandle.Alloc(ScriptOps.Tx2BPMPhaseMonitoringConfigurationParam, GCHandleType.Pinned).AddrOfPinnedObject();
            GCHandle.Alloc(ScriptOps.Tx3BPMPhaseMonitoringConfigurationParam, GCHandleType.Pinned).AddrOfPinnedObject();
            ScriptOps.Tx1Tx2Tx3BPMPhaseMonitoringConfigurationParam.f000022 = IntPtr.Zero;
            ScriptOps.Tx1Tx2Tx3BPMPhaseMonitoringConfigurationParam.f000023 = f;
            ScriptOps.Tx1Tx2Tx3BPMPhaseMonitoringConfigurationParam.f000024 = IntPtr.Zero;
            IntPtr data = GCHandle.Alloc(ScriptOps.Tx1Tx2Tx3BPMPhaseMonitoringConfigurationParam, GCHandleType.Pinned).AddrOfPinnedObject();
            int num;
            if (GlobalRef.g_NtvRS232Connect[(int)GlobalRef.g_RadarDeviceIndex] && GlobalRef.g_CasCadeDeviceSpiConnect == 0U)
            {
                num = m_TsWrapper.Calling_WriteAddr_Single(4294959848U, 1U);
                if (m_GuiManager.DllOps.itempDisconnect(false) == 0)
                {
                    string full_command = string.Format("Debug Port Disconnected", new object[0]);
                    m_GuiManager.RecordLog(0, full_command);
                    if (!GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
                    {
                        iRs232ConnectDisconnect_impl();
                    }
                }
            }
            if (m_RadarDeviceModeConfigParams.NumberOfRadarDevicesDetected <= 1)
            {
                string full_command2 = string.Format("ar1.SetRfTx1BpmMonConfig({0}, {1}, {2}, {3}, {4}, {5}, {6}, {7}, {8}, {9}, {10}, {11})", new object[]
                {
                    ScriptOps.Tx2BPMPhaseMonitoringConfigurationParam.ProfileIndex,
                    (int)m_MonTx2BPMPhaseConfigParameters.phaseShifterCfgIncValEna | (int)m_MonTx2BPMPhaseConfigParameters.phaseShifterMonEna << 1,
                    (decimal)Math.Round((double)m_MonTx2BPMPhaseConfigParameters.phaseShifterCfgIncVal, 3),
                    (decimal)Math.Round((double)m_MonTx2BPMPhaseConfigParameters.phaseShifter1, 3),
                    (decimal)Math.Round((double)m_MonTx2BPMPhaseConfigParameters.phaseShifter2, 3),
                    ScriptOps.Tx2BPMPhaseMonitoringConfigurationParam.ReportingMode,
                    ScriptOps.Tx2BPMPhaseMonitoringConfigurationParam.RxChannel,
                    (decimal)Math.Round(m_MonTx2BPMPhaseConfigParameters.TxBPMPhaseErrorThreshold, 2),
                    (decimal)Math.Round(m_MonTx2BPMPhaseConfigParameters.TxBPMAmplitudeErrorThreshold, 2),
                    (decimal)Math.Round(m_MonTx2BPMPhaseConfigParameters.TxPhaseShifter1Threshold, 2),
                    (decimal)Math.Round(m_MonTx2BPMPhaseConfigParameters.TxPhaseShifter2Threshold, 2),
                    m_MonTx2BPMPhaseConfigParameters.Reserved
                });
                m_GuiManager.RecordLog(6, full_command2);
            }
            else
            {
                string full_command3 = string.Format("ar1.SetRfTx1BpmMonConfig_mult({0}, {1}, {2}, {3}, {4}, {5}, {6}, {7}, {8}, {9}, {10}, {11}, {12})", new object[]
                {
                    GlobalRef.g_RadarDeviceId,
                    ScriptOps.Tx2BPMPhaseMonitoringConfigurationParam.ProfileIndex,
                    (int)m_MonTx2BPMPhaseConfigParameters.phaseShifterCfgIncValEna | (int)m_MonTx2BPMPhaseConfigParameters.phaseShifterMonEna << 1,
                    (decimal)Math.Round((double)m_MonTx2BPMPhaseConfigParameters.phaseShifterCfgIncVal, 3),
                    (decimal)Math.Round((double)m_MonTx2BPMPhaseConfigParameters.phaseShifter1, 3),
                    (decimal)Math.Round((double)m_MonTx2BPMPhaseConfigParameters.phaseShifter2, 3),
                    ScriptOps.Tx2BPMPhaseMonitoringConfigurationParam.ReportingMode,
                    ScriptOps.Tx2BPMPhaseMonitoringConfigurationParam.RxChannel,
                    (decimal)Math.Round(m_MonTx2BPMPhaseConfigParameters.TxBPMPhaseErrorThreshold, 2),
                    (decimal)Math.Round(m_MonTx2BPMPhaseConfigParameters.TxBPMAmplitudeErrorThreshold, 2),
                    (decimal)Math.Round(m_MonTx2BPMPhaseConfigParameters.TxPhaseShifter1Threshold, 2),
                    (decimal)Math.Round(m_MonTx2BPMPhaseConfigParameters.TxPhaseShifter2Threshold, 2),
                    m_MonTx2BPMPhaseConfigParameters.Reserved
                });
                m_GuiManager.RecordLog(6, full_command3);
            }
            uint g_RadarDeviceId = GlobalRef.g_RadarDeviceId;
            num = Imports.RadarLinkImpl_RfTxBpmMonConfig((byte)GlobalRef.g_RadarDeviceId, data);
            if ((num == 0 && ((GlobalRef.g_CasCadeDeviceSpiConnect & 1U) == 1U || (GlobalRef.g_CasCadeDeviceSpiConnect & 2U) == 2U || (GlobalRef.g_CasCadeDeviceSpiConnect & 4U) == 4U || (GlobalRef.g_CasCadeDeviceSpiConnect & 8U) == 8U)) || GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
            {
                string full_command4 = string.Format("Status: Passed", new object[0]);
                m_GuiManager.RecordLog(6, full_command4);
                for (int i = 0; i < 4; i++)
                {
                    if (jsonConfigInProgress)
                    {
                        break;
                    }
                    if (((ulong)g_RadarDeviceId & (ulong)(1L << (i & 31))) != 0UL)
                    {
                        int mmwaveDevIndex = getMmwaveDevIndex(i);
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].monitoringConfig.rlAllTxBpmMonConf_t.p00001d.profileIndx = (int)ScriptOps.Tx2BPMPhaseMonitoringConfigurationParam.ProfileIndex;
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].monitoringConfig.rlAllTxBpmMonConf_t.p00001d.reportMode = (int)ScriptOps.Tx2BPMPhaseMonitoringConfigurationParam.ReportingMode;
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].monitoringConfig.rlAllTxBpmMonConf_t.p00001d.rxEn = "0x" + ScriptOps.Tx2BPMPhaseMonitoringConfigurationParam.RxChannel.ToString("X");
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].monitoringConfig.rlAllTxBpmMonConf_t.p00001d.txBpmPhaseErrThresh = m_MonTx2BPMPhaseConfigParameters.TxBPMPhaseErrorThreshold;
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].monitoringConfig.rlAllTxBpmMonConf_t.p00001d.txBpmAmplErrThresh = m_MonTx2BPMPhaseConfigParameters.TxBPMAmplitudeErrorThreshold;
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].monitoringConfig.rlAllTxBpmMonConf_t.isConfigured = 1;
                    }
                }
            }
            else
            {
                string msg = string.Format("Status: Failed, Error Type: {0}", new object[]
                {
                    GetErrorType(num)
                });
                GlobalRef.LuaWrapper.PrintError(msg);
            }
            if (GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex] && iRs232ConnectDisconnect_impl() == 0 && !GlobalRef.g_NtvRS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
            {
                m_GuiManager.DllOps.iConnect(1U, 0U);
                string full_command5 = string.Format("Debug Port Reconnected!", new object[0]);
                m_GuiManager.RecordLog(9, full_command5);
                ScriptOps.KeepTrying(2000, new Func<bool>(spare_read));
            }
            return num;
        }

        private int iSetTX3BPMPhaseMonConfig_Impl(bool is_starting_op, bool is_ending_op)
        {
            ScriptOps.Tx1BPMPhaseMonitoringConfigurationParam.ProfileIndex = 0;
            ScriptOps.Tx1BPMPhaseMonitoringConfigurationParam.phaseShifterCfg = 0;
            ScriptOps.Tx1BPMPhaseMonitoringConfigurationParam.phaseShifterVal1 = 0;
            ScriptOps.Tx1BPMPhaseMonitoringConfigurationParam.phaseShifterVal2 = 0;
            ScriptOps.Tx1BPMPhaseMonitoringConfigurationParam.ReportingMode = 0;
            ScriptOps.Tx1BPMPhaseMonitoringConfigurationParam.RxChannel = 0;
            ScriptOps.Tx1BPMPhaseMonitoringConfigurationParam.TxBPMPhaseErrorThreshold = 0;
            ScriptOps.Tx1BPMPhaseMonitoringConfigurationParam.TxBPMAmplitudeErrorThreshold = 0;
            ScriptOps.Tx1BPMPhaseMonitoringConfigurationParam.TxPhaseShifter1Threshold = 0;
            ScriptOps.Tx1BPMPhaseMonitoringConfigurationParam.TxPhaseShifter2Threshold = 0;
            ScriptOps.Tx1BPMPhaseMonitoringConfigurationParam.Reserved = 0;
            ScriptOps.Tx2BPMPhaseMonitoringConfigurationParam.ProfileIndex = 0;
            ScriptOps.Tx2BPMPhaseMonitoringConfigurationParam.phaseShifterCfg = 0;
            ScriptOps.Tx2BPMPhaseMonitoringConfigurationParam.phaseShifterVal1 = 0;
            ScriptOps.Tx2BPMPhaseMonitoringConfigurationParam.phaseShifterVal2 = 0;
            ScriptOps.Tx2BPMPhaseMonitoringConfigurationParam.ReportingMode = 0;
            ScriptOps.Tx2BPMPhaseMonitoringConfigurationParam.RxChannel = 0;
            ScriptOps.Tx2BPMPhaseMonitoringConfigurationParam.TxBPMPhaseErrorThreshold = 0;
            ScriptOps.Tx2BPMPhaseMonitoringConfigurationParam.TxBPMAmplitudeErrorThreshold = 0;
            ScriptOps.Tx2BPMPhaseMonitoringConfigurationParam.TxPhaseShifter1Threshold = 0;
            ScriptOps.Tx2BPMPhaseMonitoringConfigurationParam.TxPhaseShifter2Threshold = 0;
            ScriptOps.Tx2BPMPhaseMonitoringConfigurationParam.Reserved = 0;
            ScriptOps.Tx3BPMPhaseMonitoringConfigurationParam.ProfileIndex = 0;
            ScriptOps.Tx3BPMPhaseMonitoringConfigurationParam.phaseShifterCfg = 0;
            ScriptOps.Tx3BPMPhaseMonitoringConfigurationParam.phaseShifterVal1 = 0;
            ScriptOps.Tx3BPMPhaseMonitoringConfigurationParam.phaseShifterVal2 = 0;
            ScriptOps.Tx3BPMPhaseMonitoringConfigurationParam.ReportingMode = 0;
            ScriptOps.Tx3BPMPhaseMonitoringConfigurationParam.RxChannel = 0;
            ScriptOps.Tx3BPMPhaseMonitoringConfigurationParam.TxBPMPhaseErrorThreshold = 0;
            ScriptOps.Tx3BPMPhaseMonitoringConfigurationParam.TxBPMAmplitudeErrorThreshold = 0;
            ScriptOps.Tx3BPMPhaseMonitoringConfigurationParam.TxPhaseShifter1Threshold = 0;
            ScriptOps.Tx3BPMPhaseMonitoringConfigurationParam.TxPhaseShifter2Threshold = 0;
            ScriptOps.Tx3BPMPhaseMonitoringConfigurationParam.Reserved = 0;
            ScriptOps.Tx3BPMPhaseMonitoringConfigurationParam.ProfileIndex = m_MonTx3BPMPhaseConfigParameters.ProfileIndex;
            ScriptOps.Tx3BPMPhaseMonitoringConfigurationParam.phaseShifterCfg = (byte)((int)((byte)(Math.Round((double)(m_MonTx3BPMPhaseConfigParameters.phaseShifterCfgIncVal * 64f)) / 360.0) & 63) | (int)m_MonTx3BPMPhaseConfigParameters.phaseShifterCfgIncValEna << 6 | (int)m_MonTx3BPMPhaseConfigParameters.phaseShifterMonEna << 7);
            ScriptOps.Tx3BPMPhaseMonitoringConfigurationParam.phaseShifterVal1 = (byte)(Math.Round((double)(m_MonTx3BPMPhaseConfigParameters.phaseShifter1 * 64f)) / 360.0);
            ScriptOps.Tx3BPMPhaseMonitoringConfigurationParam.phaseShifterVal2 = (byte)(Math.Round((double)(m_MonTx3BPMPhaseConfigParameters.phaseShifter2 * 64f)) / 360.0);
            ScriptOps.Tx3BPMPhaseMonitoringConfigurationParam.ReportingMode = m_MonTx3BPMPhaseConfigParameters.ReportingMode;
            ScriptOps.Tx3BPMPhaseMonitoringConfigurationParam.RxChannel = (byte)((int)m_MonTx3BPMPhaseConfigParameters.Rx0Channel | (int)m_MonTx3BPMPhaseConfigParameters.Rx1Channel << 1 | (int)m_MonTx3BPMPhaseConfigParameters.Rx2Channel << 2 | (int)m_MonTx3BPMPhaseConfigParameters.Rx3Channel << 3);
            ScriptOps.Tx3BPMPhaseMonitoringConfigurationParam.TxBPMPhaseErrorThreshold = (ushort)(m_MonTx3BPMPhaseConfigParameters.TxBPMPhaseErrorThreshold * 65536.0 / 360.0);
            ScriptOps.Tx3BPMPhaseMonitoringConfigurationParam.TxBPMAmplitudeErrorThreshold = (ushort)(m_MonTx3BPMPhaseConfigParameters.TxBPMAmplitudeErrorThreshold * 10.0);
            ScriptOps.Tx3BPMPhaseMonitoringConfigurationParam.TxPhaseShifter1Threshold = (ushort)(m_MonTx3BPMPhaseConfigParameters.TxPhaseShifter1Threshold * 65536.0 / 360.0);
            ScriptOps.Tx3BPMPhaseMonitoringConfigurationParam.TxPhaseShifter2Threshold = (ushort)(m_MonTx3BPMPhaseConfigParameters.TxPhaseShifter2Threshold * 65536.0 / 360.0);
            ScriptOps.Tx3BPMPhaseMonitoringConfigurationParam.Reserved = 0;
            GCHandle.Alloc(ScriptOps.Tx1BPMPhaseMonitoringConfigurationParam, GCHandleType.Pinned).AddrOfPinnedObject();
            GCHandle.Alloc(ScriptOps.Tx2BPMPhaseMonitoringConfigurationParam, GCHandleType.Pinned).AddrOfPinnedObject();
            IntPtr f = GCHandle.Alloc(ScriptOps.Tx3BPMPhaseMonitoringConfigurationParam, GCHandleType.Pinned).AddrOfPinnedObject();
            ScriptOps.Tx1Tx2Tx3BPMPhaseMonitoringConfigurationParam.f000022 = IntPtr.Zero;
            ScriptOps.Tx1Tx2Tx3BPMPhaseMonitoringConfigurationParam.f000023 = IntPtr.Zero;
            ScriptOps.Tx1Tx2Tx3BPMPhaseMonitoringConfigurationParam.f000024 = f;
            IntPtr data = GCHandle.Alloc(ScriptOps.Tx1Tx2Tx3BPMPhaseMonitoringConfigurationParam, GCHandleType.Pinned).AddrOfPinnedObject();
            int num;
            if (GlobalRef.g_NtvRS232Connect[(int)GlobalRef.g_RadarDeviceIndex] && GlobalRef.g_CasCadeDeviceSpiConnect == 0U)
            {
                num = m_TsWrapper.Calling_WriteAddr_Single(4294959848U, 1U);
                if (m_GuiManager.DllOps.itempDisconnect(false) == 0)
                {
                    string full_command = string.Format("Debug Port Disconnected", new object[0]);
                    m_GuiManager.RecordLog(0, full_command);
                    if (!GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
                    {
                        iRs232ConnectDisconnect_impl();
                    }
                }
            }
            if (m_RadarDeviceModeConfigParams.NumberOfRadarDevicesDetected <= 1)
            {
                string full_command2 = string.Format("ar1.SetRfTx2BpmMonConfig({0}, {1}, {2}, {3}, {4}, {5}, {6}, {7}, {8}, {9}, {10}, {11})", new object[]
                {
                    ScriptOps.Tx3BPMPhaseMonitoringConfigurationParam.ProfileIndex,
                    (int)m_MonTx3BPMPhaseConfigParameters.phaseShifterCfgIncValEna | (int)m_MonTx3BPMPhaseConfigParameters.phaseShifterMonEna << 1,
                    (decimal)Math.Round((double)m_MonTx3BPMPhaseConfigParameters.phaseShifterCfgIncVal, 3),
                    (decimal)Math.Round((double)m_MonTx3BPMPhaseConfigParameters.phaseShifter1, 3),
                    (decimal)Math.Round((double)m_MonTx3BPMPhaseConfigParameters.phaseShifter2, 3),
                    ScriptOps.Tx3BPMPhaseMonitoringConfigurationParam.ReportingMode,
                    ScriptOps.Tx3BPMPhaseMonitoringConfigurationParam.RxChannel,
                    (decimal)Math.Round(m_MonTx3BPMPhaseConfigParameters.TxBPMPhaseErrorThreshold, 2),
                    (decimal)Math.Round(m_MonTx3BPMPhaseConfigParameters.TxBPMAmplitudeErrorThreshold, 2),
                    (decimal)Math.Round(m_MonTx3BPMPhaseConfigParameters.TxPhaseShifter1Threshold, 2),
                    (decimal)Math.Round(m_MonTx3BPMPhaseConfigParameters.TxPhaseShifter2Threshold, 2),
                    m_MonTx3BPMPhaseConfigParameters.Reserved
                });
                m_GuiManager.RecordLog(6, full_command2);
            }
            else
            {
                string full_command3 = string.Format("ar1.SetRfTx2BpmMonConfig_mult({0}, {1}, {2}, {3}, {4}, {5}, {6}, {7}, {8}, {9}, {10}, {11}, {12})", new object[]
                {
                    GlobalRef.g_RadarDeviceId,
                    ScriptOps.Tx3BPMPhaseMonitoringConfigurationParam.ProfileIndex,
                    (int)m_MonTx3BPMPhaseConfigParameters.phaseShifterCfgIncValEna | (int)m_MonTx3BPMPhaseConfigParameters.phaseShifterMonEna << 1,
                    (decimal)Math.Round((double)m_MonTx3BPMPhaseConfigParameters.phaseShifterCfgIncVal, 3),
                    (decimal)Math.Round((double)m_MonTx3BPMPhaseConfigParameters.phaseShifter1, 3),
                    (decimal)Math.Round((double)m_MonTx3BPMPhaseConfigParameters.phaseShifter2, 3),
                    ScriptOps.Tx3BPMPhaseMonitoringConfigurationParam.ReportingMode,
                    ScriptOps.Tx3BPMPhaseMonitoringConfigurationParam.RxChannel,
                    (decimal)Math.Round(m_MonTx3BPMPhaseConfigParameters.TxBPMPhaseErrorThreshold, 2),
                    (decimal)Math.Round(m_MonTx3BPMPhaseConfigParameters.TxBPMAmplitudeErrorThreshold, 2),
                    (decimal)Math.Round(m_MonTx3BPMPhaseConfigParameters.TxPhaseShifter1Threshold, 2),
                    (decimal)Math.Round(m_MonTx3BPMPhaseConfigParameters.TxPhaseShifter2Threshold, 2),
                    m_MonTx3BPMPhaseConfigParameters.Reserved
                });
                m_GuiManager.RecordLog(6, full_command3);
            }
            uint g_RadarDeviceId = GlobalRef.g_RadarDeviceId;
            num = Imports.RadarLinkImpl_RfTxBpmMonConfig((byte)GlobalRef.g_RadarDeviceId, data);
            if ((num == 0 && ((GlobalRef.g_CasCadeDeviceSpiConnect & 1U) == 1U || (GlobalRef.g_CasCadeDeviceSpiConnect & 2U) == 2U || (GlobalRef.g_CasCadeDeviceSpiConnect & 4U) == 4U || (GlobalRef.g_CasCadeDeviceSpiConnect & 8U) == 8U)) || GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
            {
                string full_command4 = string.Format("Status: Passed", new object[0]);
                m_GuiManager.RecordLog(6, full_command4);
                for (int i = 0; i < 4; i++)
                {
                    if (jsonConfigInProgress)
                    {
                        break;
                    }
                    if (((ulong)g_RadarDeviceId & (ulong)(1L << (i & 31))) != 0UL)
                    {
                        int mmwaveDevIndex = getMmwaveDevIndex(i);
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].monitoringConfig.rlAllTxBpmMonConf_t.p00001e.profileIndx = (int)ScriptOps.Tx3BPMPhaseMonitoringConfigurationParam.ProfileIndex;
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].monitoringConfig.rlAllTxBpmMonConf_t.p00001e.reportMode = (int)ScriptOps.Tx3BPMPhaseMonitoringConfigurationParam.ReportingMode;
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].monitoringConfig.rlAllTxBpmMonConf_t.p00001e.rxEn = "0x" + ScriptOps.Tx3BPMPhaseMonitoringConfigurationParam.RxChannel.ToString("X");
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].monitoringConfig.rlAllTxBpmMonConf_t.p00001e.txBpmPhaseErrThresh = m_MonTx3BPMPhaseConfigParameters.TxBPMPhaseErrorThreshold;
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].monitoringConfig.rlAllTxBpmMonConf_t.p00001e.txBpmAmplErrThresh = m_MonTx3BPMPhaseConfigParameters.TxBPMAmplitudeErrorThreshold;
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].monitoringConfig.rlAllTxBpmMonConf_t.isConfigured = 1;
                    }
                }
            }
            else
            {
                string msg = string.Format("Status: Failed, Error Type: {0}", new object[]
                {
                    GetErrorType(num)
                });
                GlobalRef.LuaWrapper.PrintError(msg);
            }
            if (GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex] && iRs232ConnectDisconnect_impl() == 0 && !GlobalRef.g_NtvRS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
            {
                m_GuiManager.DllOps.iConnect(1U, 0U);
                string full_command5 = string.Format("Debug Port Reconnected!", new object[0]);
                m_GuiManager.RecordLog(9, full_command5);
                ScriptOps.KeepTrying(2000, new Func<bool>(spare_read));
            }
            return num;
        }

        private int iSetTXGainPhaseMismatchMonConfig_Impl(bool is_starting_op, bool is_ending_op)
        {
            TxGainPhaseMismatchMonitoringConfigurationParam.ProfileIndex = (byte)m_MonTxGainPhaseMismatchConfigParameters.ProfileIndex;
            TxGainPhaseMismatchMonitoringConfigurationParam.RFFreqBitMask = (byte)(m_MonTxGainPhaseMismatchConfigParameters.RF1FreqBitMask | m_MonTxGainPhaseMismatchConfigParameters.RF2FreqBitMask << 1 | m_MonTxGainPhaseMismatchConfigParameters.RF3FreqBitMask << 2);
            TxGainPhaseMismatchMonitoringConfigurationParam.TxChannel = (byte)(m_MonTxGainPhaseMismatchConfigParameters.Tx1Channel | m_MonTxGainPhaseMismatchConfigParameters.Tx2Channel << 1 | m_MonTxGainPhaseMismatchConfigParameters.Tx3Channel << 2);
            TxGainPhaseMismatchMonitoringConfigurationParam.RxChannel = (byte)(m_MonTxGainPhaseMismatchConfigParameters.Rx0Channel | m_MonTxGainPhaseMismatchConfigParameters.Rx1Channel << 1 | m_MonTxGainPhaseMismatchConfigParameters.Rx2Channel << 2 | m_MonTxGainPhaseMismatchConfigParameters.Rx3Channel << 3);
            TxGainPhaseMismatchMonitoringConfigurationParam.ReportingMode = (byte)m_MonTxGainPhaseMismatchConfigParameters.ReportingMode;
            TxGainPhaseMismatchMonitoringConfigurationParam.Reserved2 = 0;
            TxGainPhaseMismatchMonitoringConfigurationParam.TxGainMismatchThreshold = (short)(m_MonTxGainPhaseMismatchConfigParameters.TxGainMismatchThreshold * 10.0);
            TxGainPhaseMismatchMonitoringConfigurationParam.TxPhaseMismatchThreshold = (short)(m_MonTxGainPhaseMismatchConfigParameters.TxPhaseMismatchThreshold * 65536.0 / 360.0);
            TxGainPhaseMismatchMonitoringConfigurationParam.RF1TX1GainMismatchOffsetVal = (short)(m_MonTxGainPhaseMismatchConfigParameters.RF1Tx1GainMismatchOffsetVal * 10.0);
            TxGainPhaseMismatchMonitoringConfigurationParam.RF1TX2GainMismatchOffsetVal = (short)(m_MonTxGainPhaseMismatchConfigParameters.RF1Tx2GainMismatchOffsetVal * 10.0);
            TxGainPhaseMismatchMonitoringConfigurationParam.RF1TX3GainMismatchOffsetVal = (short)(m_MonTxGainPhaseMismatchConfigParameters.RF1Tx3GainMismatchOffsetVal * 10.0);
            TxGainPhaseMismatchMonitoringConfigurationParam.RF2TX1GainMismatchOffsetVal = (short)(m_MonTxGainPhaseMismatchConfigParameters.RF2Tx1GainMismatchOffsetVal * 10.0);
            TxGainPhaseMismatchMonitoringConfigurationParam.RF2TX2GainMismatchOffsetVal = (short)(m_MonTxGainPhaseMismatchConfigParameters.RF2Tx2GainMismatchOffsetVal * 10.0);
            TxGainPhaseMismatchMonitoringConfigurationParam.RF2TX3GainMismatchOffsetVal = (short)(m_MonTxGainPhaseMismatchConfigParameters.RF2Tx3GainMismatchOffsetVal * 10.0);
            TxGainPhaseMismatchMonitoringConfigurationParam.RF3TX1GainMismatchOffsetVal = (short)(m_MonTxGainPhaseMismatchConfigParameters.RF3Tx1GainMismatchOffsetVal * 10.0);
            TxGainPhaseMismatchMonitoringConfigurationParam.RF3TX2GainMismatchOffsetVal = (short)(m_MonTxGainPhaseMismatchConfigParameters.RF3Tx2GainMismatchOffsetVal * 10.0);
            TxGainPhaseMismatchMonitoringConfigurationParam.RF3TX3GainMismatchOffsetVal = (short)(m_MonTxGainPhaseMismatchConfigParameters.RF3Tx3GainMismatchOffsetVal * 10.0);
            TxGainPhaseMismatchMonitoringConfigurationParam.RF1TX1PhaseMismatchOffsetVal = (ushort)(m_MonTxGainPhaseMismatchConfigParameters.RF1Tx1PhaseMismatchOffsetVal * 65535.0 / 360.0);
            TxGainPhaseMismatchMonitoringConfigurationParam.RF1TX2PhaseMismatchOffsetVal = (ushort)(m_MonTxGainPhaseMismatchConfigParameters.RF1Tx2PhaseMismatchOffsetVal * 65535.0 / 360.0);
            TxGainPhaseMismatchMonitoringConfigurationParam.RF1TX3PhaseMismatchOffsetVal = (ushort)(m_MonTxGainPhaseMismatchConfigParameters.RF1Tx3PhaseMismatchOffsetVal * 65535.0 / 360.0);
            TxGainPhaseMismatchMonitoringConfigurationParam.RF2TX1PhaseMismatchOffsetVal = (ushort)(m_MonTxGainPhaseMismatchConfigParameters.RF2Tx1PhaseMismatchOffsetVal * 65535.0 / 360.0);
            TxGainPhaseMismatchMonitoringConfigurationParam.RF2TX2PhaseMismatchOffsetVal = (ushort)(m_MonTxGainPhaseMismatchConfigParameters.RF2Tx2PhaseMismatchOffsetVal * 65535.0 / 360.0);
            TxGainPhaseMismatchMonitoringConfigurationParam.RF2TX3PhaseMismatchOffsetVal = (ushort)(m_MonTxGainPhaseMismatchConfigParameters.RF2Tx3PhaseMismatchOffsetVal * 65535.0 / 360.0);
            TxGainPhaseMismatchMonitoringConfigurationParam.RF3TX1PhaseMismatchOffsetVal = (ushort)(m_MonTxGainPhaseMismatchConfigParameters.RF3Tx1PhaseMismatchOffsetVal * 65535.0 / 360.0);
            TxGainPhaseMismatchMonitoringConfigurationParam.RF3TX2PhaseMismatchOffsetVal = (ushort)(m_MonTxGainPhaseMismatchConfigParameters.RF3Tx2PhaseMismatchOffsetVal * 65535.0 / 360.0);
            TxGainPhaseMismatchMonitoringConfigurationParam.RF3TX3PhaseMismatchOffsetVal = (ushort)(m_MonTxGainPhaseMismatchConfigParameters.RF3Tx3PhaseMismatchOffsetVal * 65535.0 / 360.0);
            TxGainPhaseMismatchMonitoringConfigurationParam.Reserved3 = 0;
            TxGainPhaseMismatchMonitoringConfigurationParam.Reserved4 = 0U;
            IntPtr data = GCHandle.Alloc(TxGainPhaseMismatchMonitoringConfigurationParam, GCHandleType.Pinned).AddrOfPinnedObject();
            int num;
            if (GlobalRef.g_NtvRS232Connect[(int)GlobalRef.g_RadarDeviceIndex] && GlobalRef.g_CasCadeDeviceSpiConnect == 0U)
            {
                num = m_TsWrapper.Calling_WriteAddr_Single(4294959848U, 1U);
                if (m_GuiManager.DllOps.itempDisconnect(false) == 0)
                {
                    string full_command = string.Format("Debug Port Disconnected", new object[0]);
                    m_GuiManager.RecordLog(0, full_command);
                    if (!GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
                    {
                        iRs232ConnectDisconnect_impl();
                    }
                }
            }
            if (m_RadarDeviceModeConfigParams.NumberOfRadarDevicesDetected <= 1)
            {
                string full_command2 = string.Format("ar1.SetRfTxGainPhaseMismatchMonConfig({0}, {1}, {2}, {3}, {4}, {5}, {6}, {7}, {8}, {9}, {10}, {11}, {12}, {13}, {14}, {15}, {16}, {17}, {18}, {19}, {20}, {21}, {22}, {23}, {24}, {25}, {26}, {27}, {28}, {29}, {30}, {31}, {32}, {33}, {34})", new object[]
                {
                    m_MonTxGainPhaseMismatchConfigParameters.ProfileIndex,
                    m_MonTxGainPhaseMismatchConfigParameters.RF1FreqBitMask,
                    m_MonTxGainPhaseMismatchConfigParameters.RF2FreqBitMask,
                    m_MonTxGainPhaseMismatchConfigParameters.RF3FreqBitMask,
                    m_MonTxGainPhaseMismatchConfigParameters.Tx1Channel,
                    m_MonTxGainPhaseMismatchConfigParameters.Tx2Channel,
                    m_MonTxGainPhaseMismatchConfigParameters.Tx3Channel,
                    m_MonTxGainPhaseMismatchConfigParameters.Rx0Channel,
                    m_MonTxGainPhaseMismatchConfigParameters.Rx1Channel,
                    m_MonTxGainPhaseMismatchConfigParameters.Rx2Channel,
                    m_MonTxGainPhaseMismatchConfigParameters.Rx3Channel,
                    m_MonTxGainPhaseMismatchConfigParameters.ReportingMode,
                    m_MonTxGainPhaseMismatchConfigParameters.Reserved2,
                    (decimal)Math.Round(m_MonTxGainPhaseMismatchConfigParameters.TxGainMismatchThreshold, 1),
                    (decimal)Math.Round(m_MonTxGainPhaseMismatchConfigParameters.TxPhaseMismatchThreshold, 2),
                    (decimal)Math.Round(m_MonTxGainPhaseMismatchConfigParameters.RF1Tx1GainMismatchOffsetVal, 1),
                    (decimal)Math.Round(m_MonTxGainPhaseMismatchConfigParameters.RF1Tx2GainMismatchOffsetVal, 1),
                    (decimal)Math.Round(m_MonTxGainPhaseMismatchConfigParameters.RF1Tx3GainMismatchOffsetVal, 1),
                    (decimal)Math.Round(m_MonTxGainPhaseMismatchConfigParameters.RF2Tx1GainMismatchOffsetVal, 1),
                    (decimal)Math.Round(m_MonTxGainPhaseMismatchConfigParameters.RF2Tx2GainMismatchOffsetVal, 1),
                    (decimal)Math.Round(m_MonTxGainPhaseMismatchConfigParameters.RF2Tx3GainMismatchOffsetVal, 1),
                    (decimal)Math.Round(m_MonTxGainPhaseMismatchConfigParameters.RF3Tx1GainMismatchOffsetVal, 1),
                    (decimal)Math.Round(m_MonTxGainPhaseMismatchConfigParameters.RF3Tx2GainMismatchOffsetVal, 1),
                    (decimal)Math.Round(m_MonTxGainPhaseMismatchConfigParameters.RF3Tx3GainMismatchOffsetVal, 1),
                    (decimal)Math.Round(m_MonTxGainPhaseMismatchConfigParameters.RF1Tx1PhaseMismatchOffsetVal, 2),
                    (decimal)Math.Round(m_MonTxGainPhaseMismatchConfigParameters.RF1Tx2PhaseMismatchOffsetVal, 2),
                    (decimal)Math.Round(m_MonTxGainPhaseMismatchConfigParameters.RF1Tx3PhaseMismatchOffsetVal, 2),
                    (decimal)Math.Round(m_MonTxGainPhaseMismatchConfigParameters.RF2Tx1PhaseMismatchOffsetVal, 2),
                    (decimal)Math.Round(m_MonTxGainPhaseMismatchConfigParameters.RF2Tx2PhaseMismatchOffsetVal, 2),
                    (decimal)Math.Round(m_MonTxGainPhaseMismatchConfigParameters.RF2Tx3PhaseMismatchOffsetVal, 2),
                    (decimal)Math.Round(m_MonTxGainPhaseMismatchConfigParameters.RF3Tx1PhaseMismatchOffsetVal, 2),
                    (decimal)Math.Round(m_MonTxGainPhaseMismatchConfigParameters.RF3Tx2PhaseMismatchOffsetVal, 2),
                    (decimal)Math.Round(m_MonTxGainPhaseMismatchConfigParameters.RF3Tx3PhaseMismatchOffsetVal, 2),
                    m_MonTxGainPhaseMismatchConfigParameters.Reserved3,
                    m_MonTxGainPhaseMismatchConfigParameters.Reserved4
                });
                m_GuiManager.RecordLog(6, full_command2);
            }
            else
            {
                string full_command3 = string.Format("ar1.SetRfTxGainPhaseMismatchMonConfig_mult({0}, {1}, {2}, {3}, {4}, {5}, {6}, {7}, {8}, {9}, {10}, {11}, {12}, {13}, {14}, {15}, {16}, {17}, {18}, {19}, {20}, {21}, {22}, {23}, {24}, {25}, {26}, {27}, {28},{29}, {30}, {31}, {32}, {33}, {34},{35})", new object[]
                {
                    GlobalRef.g_RadarDeviceId,
                    m_MonTxGainPhaseMismatchConfigParameters.ProfileIndex,
                    m_MonTxGainPhaseMismatchConfigParameters.RF1FreqBitMask,
                    m_MonTxGainPhaseMismatchConfigParameters.RF2FreqBitMask,
                    m_MonTxGainPhaseMismatchConfigParameters.RF3FreqBitMask,
                    m_MonTxGainPhaseMismatchConfigParameters.Tx1Channel,
                    m_MonTxGainPhaseMismatchConfigParameters.Tx2Channel,
                    m_MonTxGainPhaseMismatchConfigParameters.Tx3Channel,
                    m_MonTxGainPhaseMismatchConfigParameters.Rx0Channel,
                    m_MonTxGainPhaseMismatchConfigParameters.Rx1Channel,
                    m_MonTxGainPhaseMismatchConfigParameters.Rx2Channel,
                    m_MonTxGainPhaseMismatchConfigParameters.Rx3Channel,
                    m_MonTxGainPhaseMismatchConfigParameters.ReportingMode,
                    m_MonTxGainPhaseMismatchConfigParameters.Reserved2,
                    (decimal)Math.Round(m_MonTxGainPhaseMismatchConfigParameters.TxGainMismatchThreshold, 1),
                    (decimal)Math.Round(m_MonTxGainPhaseMismatchConfigParameters.TxPhaseMismatchThreshold, 2),
                    (decimal)Math.Round(m_MonTxGainPhaseMismatchConfigParameters.RF1Tx1GainMismatchOffsetVal, 1),
                    (decimal)Math.Round(m_MonTxGainPhaseMismatchConfigParameters.RF1Tx2GainMismatchOffsetVal, 1),
                    (decimal)Math.Round(m_MonTxGainPhaseMismatchConfigParameters.RF1Tx3GainMismatchOffsetVal, 1),
                    (decimal)Math.Round(m_MonTxGainPhaseMismatchConfigParameters.RF2Tx1GainMismatchOffsetVal, 1),
                    (decimal)Math.Round(m_MonTxGainPhaseMismatchConfigParameters.RF2Tx2GainMismatchOffsetVal, 1),
                    (decimal)Math.Round(m_MonTxGainPhaseMismatchConfigParameters.RF2Tx3GainMismatchOffsetVal, 1),
                    (decimal)Math.Round(m_MonTxGainPhaseMismatchConfigParameters.RF3Tx1GainMismatchOffsetVal, 1),
                    (decimal)Math.Round(m_MonTxGainPhaseMismatchConfigParameters.RF3Tx2GainMismatchOffsetVal, 1),
                    (decimal)Math.Round(m_MonTxGainPhaseMismatchConfigParameters.RF3Tx3GainMismatchOffsetVal, 1),
                    (decimal)Math.Round(m_MonTxGainPhaseMismatchConfigParameters.RF1Tx1PhaseMismatchOffsetVal, 2),
                    (decimal)Math.Round(m_MonTxGainPhaseMismatchConfigParameters.RF1Tx2PhaseMismatchOffsetVal, 2),
                    (decimal)Math.Round(m_MonTxGainPhaseMismatchConfigParameters.RF1Tx3PhaseMismatchOffsetVal, 2),
                    (decimal)Math.Round(m_MonTxGainPhaseMismatchConfigParameters.RF2Tx1PhaseMismatchOffsetVal, 2),
                    (decimal)Math.Round(m_MonTxGainPhaseMismatchConfigParameters.RF2Tx2PhaseMismatchOffsetVal, 2),
                    (decimal)Math.Round(m_MonTxGainPhaseMismatchConfigParameters.RF2Tx3PhaseMismatchOffsetVal, 2),
                    (decimal)Math.Round(m_MonTxGainPhaseMismatchConfigParameters.RF3Tx1PhaseMismatchOffsetVal, 2),
                    (decimal)Math.Round(m_MonTxGainPhaseMismatchConfigParameters.RF3Tx2PhaseMismatchOffsetVal, 2),
                    (decimal)Math.Round(m_MonTxGainPhaseMismatchConfigParameters.RF3Tx3PhaseMismatchOffsetVal, 2),
                    m_MonTxGainPhaseMismatchConfigParameters.Reserved3,
                    m_MonTxGainPhaseMismatchConfigParameters.Reserved4
                });
                m_GuiManager.RecordLog(6, full_command3);
            }
            uint g_RadarDeviceId = GlobalRef.g_RadarDeviceId;
            num = Imports.RadarLinkImpl_RfTxGainPhaseMismatchMonConfig(GlobalRef.g_RadarDeviceId, data);
            if ((num == 0 && ((GlobalRef.g_CasCadeDeviceSpiConnect & 1U) == 1U || (GlobalRef.g_CasCadeDeviceSpiConnect & 2U) == 2U || (GlobalRef.g_CasCadeDeviceSpiConnect & 4U) == 4U || (GlobalRef.g_CasCadeDeviceSpiConnect & 8U) == 8U)) || GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
            {
                string full_command4 = string.Format("Status: Passed", new object[0]);
                m_GuiManager.RecordLog(6, full_command4);
                for (int i = 0; i < 4; i++)
                {
                    if (jsonConfigInProgress)
                    {
                        break;
                    }
                    if (((ulong)g_RadarDeviceId & (ulong)(1L << (i & 31))) != 0UL)
                    {
                        int mmwaveDevIndex = getMmwaveDevIndex(i);
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].monitoringConfig.rlTxGainPhaseMismatchMonConf_t.profileIndx = (int)TxGainPhaseMismatchMonitoringConfigurationParam.ProfileIndex;
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].monitoringConfig.rlTxGainPhaseMismatchMonConf_t.rfFreqBitMask = "0x" + TxGainPhaseMismatchMonitoringConfigurationParam.RFFreqBitMask.ToString("X");
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].monitoringConfig.rlTxGainPhaseMismatchMonConf_t.txEn = "0x" + TxGainPhaseMismatchMonitoringConfigurationParam.TxChannel.ToString("X");
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].monitoringConfig.rlTxGainPhaseMismatchMonConf_t.rxEn = "0x" + TxGainPhaseMismatchMonitoringConfigurationParam.RxChannel.ToString("X");
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].monitoringConfig.rlTxGainPhaseMismatchMonConf_t.txGainMismatchThresh = m_MonTxGainPhaseMismatchConfigParameters.TxGainMismatchThreshold;
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].monitoringConfig.rlTxGainPhaseMismatchMonConf_t.txPhaseMismatchThresh = m_MonTxGainPhaseMismatchConfigParameters.TxPhaseMismatchThreshold;
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].monitoringConfig.rlTxGainPhaseMismatchMonConf_t.txGainMismatchOffsetVal[0][1] = (double)((int)m_MonTxGainPhaseMismatchConfigParameters.RF1Tx1GainMismatchOffsetVal);
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].monitoringConfig.rlTxGainPhaseMismatchMonConf_t.txGainMismatchOffsetVal[0][0] = m_MonTxGainPhaseMismatchConfigParameters.RF1Tx1GainMismatchOffsetVal * 10.0 - GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].monitoringConfig.rlTxGainPhaseMismatchMonConf_t.txGainMismatchOffsetVal[0][1] * 10.0;
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].monitoringConfig.rlTxGainPhaseMismatchMonConf_t.txGainMismatchOffsetVal[0][3] = (double)((int)m_MonTxGainPhaseMismatchConfigParameters.RF1Tx2GainMismatchOffsetVal);
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].monitoringConfig.rlTxGainPhaseMismatchMonConf_t.txGainMismatchOffsetVal[0][2] = m_MonTxGainPhaseMismatchConfigParameters.RF1Tx2GainMismatchOffsetVal * 10.0 - GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].monitoringConfig.rlTxGainPhaseMismatchMonConf_t.txGainMismatchOffsetVal[0][3] * 10.0;
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].monitoringConfig.rlTxGainPhaseMismatchMonConf_t.txGainMismatchOffsetVal[0][5] = (double)((int)m_MonTxGainPhaseMismatchConfigParameters.RF1Tx3GainMismatchOffsetVal);
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].monitoringConfig.rlTxGainPhaseMismatchMonConf_t.txGainMismatchOffsetVal[0][4] = m_MonTxGainPhaseMismatchConfigParameters.RF1Tx3GainMismatchOffsetVal * 10.0 - GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].monitoringConfig.rlTxGainPhaseMismatchMonConf_t.txGainMismatchOffsetVal[0][5] * 10.0;
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].monitoringConfig.rlTxGainPhaseMismatchMonConf_t.txGainMismatchOffsetVal[1][1] = (double)((int)m_MonTxGainPhaseMismatchConfigParameters.RF2Tx1GainMismatchOffsetVal);
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].monitoringConfig.rlTxGainPhaseMismatchMonConf_t.txGainMismatchOffsetVal[1][0] = m_MonTxGainPhaseMismatchConfigParameters.RF2Tx1GainMismatchOffsetVal * 10.0 - GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].monitoringConfig.rlTxGainPhaseMismatchMonConf_t.txGainMismatchOffsetVal[1][1] * 10.0;
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].monitoringConfig.rlTxGainPhaseMismatchMonConf_t.txGainMismatchOffsetVal[1][3] = (double)((int)m_MonTxGainPhaseMismatchConfigParameters.RF2Tx2GainMismatchOffsetVal);
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].monitoringConfig.rlTxGainPhaseMismatchMonConf_t.txGainMismatchOffsetVal[1][2] = m_MonTxGainPhaseMismatchConfigParameters.RF2Tx2GainMismatchOffsetVal * 10.0 - GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].monitoringConfig.rlTxGainPhaseMismatchMonConf_t.txGainMismatchOffsetVal[1][3] * 10.0;
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].monitoringConfig.rlTxGainPhaseMismatchMonConf_t.txGainMismatchOffsetVal[1][5] = (double)((int)m_MonTxGainPhaseMismatchConfigParameters.RF2Tx3GainMismatchOffsetVal);
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].monitoringConfig.rlTxGainPhaseMismatchMonConf_t.txGainMismatchOffsetVal[1][4] = m_MonTxGainPhaseMismatchConfigParameters.RF2Tx3GainMismatchOffsetVal * 10.0 - GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].monitoringConfig.rlTxGainPhaseMismatchMonConf_t.txGainMismatchOffsetVal[1][5] * 10.0;
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].monitoringConfig.rlTxGainPhaseMismatchMonConf_t.txGainMismatchOffsetVal[2][1] = (double)((int)m_MonTxGainPhaseMismatchConfigParameters.RF3Tx1GainMismatchOffsetVal);
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].monitoringConfig.rlTxGainPhaseMismatchMonConf_t.txGainMismatchOffsetVal[2][0] = m_MonTxGainPhaseMismatchConfigParameters.RF3Tx1GainMismatchOffsetVal * 10.0 - GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].monitoringConfig.rlTxGainPhaseMismatchMonConf_t.txGainMismatchOffsetVal[2][1] * 10.0;
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].monitoringConfig.rlTxGainPhaseMismatchMonConf_t.txGainMismatchOffsetVal[2][3] = (double)((int)m_MonTxGainPhaseMismatchConfigParameters.RF3Tx2GainMismatchOffsetVal);
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].monitoringConfig.rlTxGainPhaseMismatchMonConf_t.txGainMismatchOffsetVal[2][2] = m_MonTxGainPhaseMismatchConfigParameters.RF3Tx2GainMismatchOffsetVal * 10.0 - GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].monitoringConfig.rlTxGainPhaseMismatchMonConf_t.txGainMismatchOffsetVal[2][3] * 10.0;
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].monitoringConfig.rlTxGainPhaseMismatchMonConf_t.txGainMismatchOffsetVal[2][5] = (double)((int)m_MonTxGainPhaseMismatchConfigParameters.RF3Tx3GainMismatchOffsetVal);
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].monitoringConfig.rlTxGainPhaseMismatchMonConf_t.txGainMismatchOffsetVal[2][4] = m_MonTxGainPhaseMismatchConfigParameters.RF3Tx3GainMismatchOffsetVal * 10.0 - GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].monitoringConfig.rlTxGainPhaseMismatchMonConf_t.txGainMismatchOffsetVal[2][5] * 10.0;
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].monitoringConfig.rlTxGainPhaseMismatchMonConf_t.txPhaseMismatchOffsetVal[0][1] = (double)((int)m_MonTxGainPhaseMismatchConfigParameters.RF1Tx1PhaseMismatchOffsetVal);
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].monitoringConfig.rlTxGainPhaseMismatchMonConf_t.txPhaseMismatchOffsetVal[0][0] = m_MonTxGainPhaseMismatchConfigParameters.RF1Tx1PhaseMismatchOffsetVal * 100.0 - GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].monitoringConfig.rlTxGainPhaseMismatchMonConf_t.txPhaseMismatchOffsetVal[0][1] * 100.0;
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].monitoringConfig.rlTxGainPhaseMismatchMonConf_t.txPhaseMismatchOffsetVal[0][3] = (double)((int)m_MonTxGainPhaseMismatchConfigParameters.RF1Tx2PhaseMismatchOffsetVal);
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].monitoringConfig.rlTxGainPhaseMismatchMonConf_t.txPhaseMismatchOffsetVal[0][2] = m_MonTxGainPhaseMismatchConfigParameters.RF1Tx2PhaseMismatchOffsetVal * 100.0 - GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].monitoringConfig.rlTxGainPhaseMismatchMonConf_t.txPhaseMismatchOffsetVal[0][3] * 100.0;
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].monitoringConfig.rlTxGainPhaseMismatchMonConf_t.txPhaseMismatchOffsetVal[0][5] = (double)((int)m_MonTxGainPhaseMismatchConfigParameters.RF1Tx3PhaseMismatchOffsetVal);
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].monitoringConfig.rlTxGainPhaseMismatchMonConf_t.txPhaseMismatchOffsetVal[0][4] = m_MonTxGainPhaseMismatchConfigParameters.RF1Tx3PhaseMismatchOffsetVal * 100.0 - GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].monitoringConfig.rlTxGainPhaseMismatchMonConf_t.txPhaseMismatchOffsetVal[0][5] * 100.0;
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].monitoringConfig.rlTxGainPhaseMismatchMonConf_t.txPhaseMismatchOffsetVal[1][1] = (double)((int)m_MonTxGainPhaseMismatchConfigParameters.RF2Tx1PhaseMismatchOffsetVal);
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].monitoringConfig.rlTxGainPhaseMismatchMonConf_t.txPhaseMismatchOffsetVal[1][0] = m_MonTxGainPhaseMismatchConfigParameters.RF2Tx1PhaseMismatchOffsetVal * 100.0 - GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].monitoringConfig.rlTxGainPhaseMismatchMonConf_t.txPhaseMismatchOffsetVal[1][1] * 100.0;
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].monitoringConfig.rlTxGainPhaseMismatchMonConf_t.txPhaseMismatchOffsetVal[1][3] = (double)((int)m_MonTxGainPhaseMismatchConfigParameters.RF2Tx2PhaseMismatchOffsetVal);
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].monitoringConfig.rlTxGainPhaseMismatchMonConf_t.txPhaseMismatchOffsetVal[1][2] = m_MonTxGainPhaseMismatchConfigParameters.RF2Tx2PhaseMismatchOffsetVal * 100.0 - GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].monitoringConfig.rlTxGainPhaseMismatchMonConf_t.txPhaseMismatchOffsetVal[1][3] * 100.0;
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].monitoringConfig.rlTxGainPhaseMismatchMonConf_t.txPhaseMismatchOffsetVal[1][5] = (double)((int)m_MonTxGainPhaseMismatchConfigParameters.RF2Tx3PhaseMismatchOffsetVal);
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].monitoringConfig.rlTxGainPhaseMismatchMonConf_t.txPhaseMismatchOffsetVal[1][4] = m_MonTxGainPhaseMismatchConfigParameters.RF2Tx3PhaseMismatchOffsetVal * 100.0 - GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].monitoringConfig.rlTxGainPhaseMismatchMonConf_t.txPhaseMismatchOffsetVal[1][5] * 100.0;
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].monitoringConfig.rlTxGainPhaseMismatchMonConf_t.txPhaseMismatchOffsetVal[2][1] = (double)((int)m_MonTxGainPhaseMismatchConfigParameters.RF3Tx1PhaseMismatchOffsetVal);
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].monitoringConfig.rlTxGainPhaseMismatchMonConf_t.txPhaseMismatchOffsetVal[2][0] = m_MonTxGainPhaseMismatchConfigParameters.RF3Tx1PhaseMismatchOffsetVal * 100.0 - GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].monitoringConfig.rlTxGainPhaseMismatchMonConf_t.txPhaseMismatchOffsetVal[2][1] * 100.0;
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].monitoringConfig.rlTxGainPhaseMismatchMonConf_t.txPhaseMismatchOffsetVal[2][3] = (double)((int)m_MonTxGainPhaseMismatchConfigParameters.RF3Tx2PhaseMismatchOffsetVal);
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].monitoringConfig.rlTxGainPhaseMismatchMonConf_t.txPhaseMismatchOffsetVal[2][2] = m_MonTxGainPhaseMismatchConfigParameters.RF3Tx2PhaseMismatchOffsetVal * 100.0 - GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].monitoringConfig.rlTxGainPhaseMismatchMonConf_t.txPhaseMismatchOffsetVal[2][3] * 100.0;
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].monitoringConfig.rlTxGainPhaseMismatchMonConf_t.txPhaseMismatchOffsetVal[2][5] = (double)((int)m_MonTxGainPhaseMismatchConfigParameters.RF3Tx3PhaseMismatchOffsetVal);
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].monitoringConfig.rlTxGainPhaseMismatchMonConf_t.txPhaseMismatchOffsetVal[2][4] = m_MonTxGainPhaseMismatchConfigParameters.RF3Tx3PhaseMismatchOffsetVal * 100.0 - GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].monitoringConfig.rlTxGainPhaseMismatchMonConf_t.txPhaseMismatchOffsetVal[2][5] * 100.0;
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].monitoringConfig.rlTxGainPhaseMismatchMonConf_t.isConfigured = 1;
                    }
                }
            }
            else
            {
                string msg = string.Format("Status: Failed, Error Type: {0}", new object[]
                {
                    GetErrorType(num)
                });
                GlobalRef.LuaWrapper.PrintError(msg);
            }
            if (GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
            {
                if (iRs232ConnectDisconnect_impl() == 0 && !GlobalRef.g_NtvRS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
                {
                    m_GuiManager.DllOps.iConnect(1U, 0U);
                    string full_command5 = string.Format("Debug Port Reconnected!", new object[0]);
                    m_GuiManager.RecordLog(9, full_command5);
                    ScriptOps.KeepTrying(2000, new Func<bool>(spare_read));
                }
            }
            else if (GlobalRef.g_CasCadeDeviceSpiConnect == 0U)
            {
                string full_command6 = string.Format("Error Occurred in Port open close", new object[0]);
                m_GuiManager.RecordLog(9, full_command6);
            }
            return num;
        }

        private int iSetAnalogFaultInjectionConfig_Impl(bool is_starting_op, bool is_ending_op)
        {
            AnalogFaultInjectionConfigurationParam.Reserved = m_AnalogFaultInjectionConfigParameters.Reserved;
            AnalogFaultInjectionConfigurationParam.RxGainDrop = (byte)((int)m_AnalogFaultInjectionConfigParameters.RxGainDropRx1 | (int)m_AnalogFaultInjectionConfigParameters.RxGainDropRx2 << 1 | (int)m_AnalogFaultInjectionConfigParameters.RxGainDropRx3 << 2 | (int)m_AnalogFaultInjectionConfigParameters.RxGainDropRx4 << 3);
            AnalogFaultInjectionConfigurationParam.RxPhaseInv = (byte)((int)m_AnalogFaultInjectionConfigParameters.RxPhaseInvRx1 | (int)m_AnalogFaultInjectionConfigParameters.RxPhaseInvRx2 << 1 | (int)m_AnalogFaultInjectionConfigParameters.RxPhaseInvRx3 << 2 | (int)m_AnalogFaultInjectionConfigParameters.RxPhaseInvRx4 << 3);
            AnalogFaultInjectionConfigurationParam.RxHighNoise = (byte)((int)m_AnalogFaultInjectionConfigParameters.RxHighNoiseRx1 | (int)m_AnalogFaultInjectionConfigParameters.RxHighNoiseRx2 << 1 | (int)m_AnalogFaultInjectionConfigParameters.RxHighNoiseRx3 << 2 | (int)m_AnalogFaultInjectionConfigParameters.RxHighNoiseRx4 << 3);
            AnalogFaultInjectionConfigurationParam.RxIFStageFault = (byte)((int)m_AnalogFaultInjectionConfigParameters.RxIFStageRx1 | (int)m_AnalogFaultInjectionConfigParameters.RxIFStageRx2 << 1 | (int)m_AnalogFaultInjectionConfigParameters.RxIFStageRx3 << 2 | (int)m_AnalogFaultInjectionConfigParameters.RxIFStageRx4 << 3);
            AnalogFaultInjectionConfigurationParam.RxLOAmpFault = (byte)((int)m_AnalogFaultInjectionConfigParameters.RxLOAmpRx1Rx2 | (int)m_AnalogFaultInjectionConfigParameters.RxLOAmpRx3Rx4 << 1);
            AnalogFaultInjectionConfigurationParam.TxLOAmpFault = (byte)((int)m_AnalogFaultInjectionConfigParameters.TxLOAmpTx1Tx2 | (int)m_AnalogFaultInjectionConfigParameters.TxLOAmpTx3 << 1);
            AnalogFaultInjectionConfigurationParam.TxGainDrop = (byte)((int)m_AnalogFaultInjectionConfigParameters.TxGainDropTx1 | (int)m_AnalogFaultInjectionConfigParameters.TxGainDropTx2 << 1 | (int)m_AnalogFaultInjectionConfigParameters.TxGainDropTx3 << 2);
            AnalogFaultInjectionConfigurationParam.TxPhaseInv = (byte)((int)m_AnalogFaultInjectionConfigParameters.TxPhaseInvTxFault | (int)m_AnalogFaultInjectionConfigParameters.TxPhaseInvBPMTx1Fault << 3 | (int)m_AnalogFaultInjectionConfigParameters.TxPhaseInvBPMTx2Fault << 4 | (int)m_AnalogFaultInjectionConfigParameters.TxPhaseInvBPMTx3Fault << 5);
            AnalogFaultInjectionConfigurationParam.SynthFault = (byte)((int)m_AnalogFaultInjectionConfigParameters.SynthVCOOpenFault | (int)m_AnalogFaultInjectionConfigParameters.SynthFreqMonOffset << 1);
            AnalogFaultInjectionConfigurationParam.SupplyLDOFault = m_AnalogFaultInjectionConfigParameters.f000319;
            AnalogFaultInjectionConfigurationParam.MiscFault = m_AnalogFaultInjectionConfigParameters.f00031a;
            AnalogFaultInjectionConfigurationParam.MiscThresholdFault = m_AnalogFaultInjectionConfigParameters.f00031b;
            AnalogFaultInjectionConfigurationParam.Reserved2 = m_AnalogFaultInjectionConfigParameters.Reserved2;
            AnalogFaultInjectionConfigurationParam.Reserved3 = (ushort)((byte)m_AnalogFaultInjectionConfigParameters.Reserved3);
            AnalogFaultInjectionConfigurationParam.Reserved4 = (uint)((byte)m_AnalogFaultInjectionConfigParameters.Reserved4);
            IntPtr data = GCHandle.Alloc(AnalogFaultInjectionConfigurationParam, GCHandleType.Pinned).AddrOfPinnedObject();
            int num;
            if (GlobalRef.g_NtvRS232Connect[(int)GlobalRef.g_RadarDeviceIndex] && GlobalRef.g_CasCadeDeviceSpiConnect == 0U)
            {
                num = m_TsWrapper.Calling_WriteAddr_Single(4294959848U, 1U);
                if (m_GuiManager.DllOps.itempDisconnect(false) == 0)
                {
                    string full_command = string.Format("Debug Port Disconnected", new object[0]);
                    m_GuiManager.RecordLog(0, full_command);
                    if (!GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
                    {
                        iRs232ConnectDisconnect_impl();
                    }
                }
            }
            if (m_RadarDeviceModeConfigParams.NumberOfRadarDevicesDetected <= 1)
            {
                string full_command2 = string.Format("ar1.SetAnalogFaultInjectionConfig({0}, {1}, {2}, {3}, {4}, {5}, {6}, {7}, {8}, {9}, {10}, {11}, {12}, {13}, {14}, {15})", new object[]
                {
                    AnalogFaultInjectionConfigurationParam.Reserved,
                    AnalogFaultInjectionConfigurationParam.RxGainDrop,
                    AnalogFaultInjectionConfigurationParam.RxPhaseInv,
                    AnalogFaultInjectionConfigurationParam.RxHighNoise,
                    AnalogFaultInjectionConfigurationParam.RxIFStageFault,
                    AnalogFaultInjectionConfigurationParam.RxLOAmpFault,
                    AnalogFaultInjectionConfigurationParam.TxLOAmpFault,
                    AnalogFaultInjectionConfigurationParam.TxGainDrop,
                    AnalogFaultInjectionConfigurationParam.TxPhaseInv,
                    AnalogFaultInjectionConfigurationParam.SynthFault,
                    AnalogFaultInjectionConfigurationParam.SupplyLDOFault,
                    AnalogFaultInjectionConfigurationParam.MiscFault,
                    AnalogFaultInjectionConfigurationParam.MiscThresholdFault,
                    AnalogFaultInjectionConfigurationParam.Reserved2,
                    AnalogFaultInjectionConfigurationParam.Reserved3,
                    AnalogFaultInjectionConfigurationParam.Reserved4
                });
                m_GuiManager.RecordLog(6, full_command2);
            }
            else
            {
                string full_command3 = string.Format("ar1.SetAnalogFaultInjectionConfig_mult({0}, {1}, {2}, {3}, {4}, {5}, {6}, {7}, {8}, {9}, {10}, {11}, {12}, {13}, {14}, {15}, {16})", new object[]
                {
                    GlobalRef.g_RadarDeviceId,
                    AnalogFaultInjectionConfigurationParam.Reserved,
                    AnalogFaultInjectionConfigurationParam.RxGainDrop,
                    AnalogFaultInjectionConfigurationParam.RxPhaseInv,
                    AnalogFaultInjectionConfigurationParam.RxHighNoise,
                    AnalogFaultInjectionConfigurationParam.RxIFStageFault,
                    AnalogFaultInjectionConfigurationParam.RxLOAmpFault,
                    AnalogFaultInjectionConfigurationParam.TxLOAmpFault,
                    AnalogFaultInjectionConfigurationParam.TxGainDrop,
                    AnalogFaultInjectionConfigurationParam.TxPhaseInv,
                    AnalogFaultInjectionConfigurationParam.SynthFault,
                    AnalogFaultInjectionConfigurationParam.SupplyLDOFault,
                    AnalogFaultInjectionConfigurationParam.MiscFault,
                    AnalogFaultInjectionConfigurationParam.MiscThresholdFault,
                    AnalogFaultInjectionConfigurationParam.Reserved2,
                    AnalogFaultInjectionConfigurationParam.Reserved3,
                    AnalogFaultInjectionConfigurationParam.Reserved4
                });
                m_GuiManager.RecordLog(6, full_command3);
            }
            uint g_RadarDeviceId = GlobalRef.g_RadarDeviceId;
            num = Imports.RadarLinkImpl_RfAnaFaultInjConfig(GlobalRef.g_RadarDeviceId, data);
            if ((num == 0 && ((GlobalRef.g_CasCadeDeviceSpiConnect & 1U) == 1U || (GlobalRef.g_CasCadeDeviceSpiConnect & 2U) == 2U || (GlobalRef.g_CasCadeDeviceSpiConnect & 4U) == 4U || (GlobalRef.g_CasCadeDeviceSpiConnect & 8U) == 8U)) || GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
            {
                string full_command4 = string.Format("Status: Passed", new object[0]);
                m_GuiManager.RecordLog(6, full_command4);
                for (int i = 0; i < 4; i++)
                {
                    if (jsonConfigInProgress)
                    {
                        break;
                    }
                    if (((ulong)g_RadarDeviceId & (ulong)(1L << (i & 31))) != 0UL)
                    {
                        int mmwaveDevIndex = getMmwaveDevIndex(i);
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].monitoringConfig.rlAnaFaultInj_t.rxGainDrop = "0x" + AnalogFaultInjectionConfigurationParam.RxGainDrop.ToString("X");
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].monitoringConfig.rlAnaFaultInj_t.rxPhInv = "0x" + AnalogFaultInjectionConfigurationParam.RxPhaseInv.ToString("X");
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].monitoringConfig.rlAnaFaultInj_t.rxHighNoise = "0x" + AnalogFaultInjectionConfigurationParam.RxHighNoise.ToString("X");
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].monitoringConfig.rlAnaFaultInj_t.rxIfStagesFault = "0x" + AnalogFaultInjectionConfigurationParam.RxIFStageFault.ToString("X");
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].monitoringConfig.rlAnaFaultInj_t.rxLoAmpFault = "0x" + AnalogFaultInjectionConfigurationParam.RxLOAmpFault.ToString("X");
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].monitoringConfig.rlAnaFaultInj_t.txLoAmpFault = "0x" + AnalogFaultInjectionConfigurationParam.TxLOAmpFault.ToString("X");
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].monitoringConfig.rlAnaFaultInj_t.txGainDrop = "0x" + AnalogFaultInjectionConfigurationParam.TxGainDrop.ToString("X");
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].monitoringConfig.rlAnaFaultInj_t.txPhInv = "0x" + AnalogFaultInjectionConfigurationParam.TxPhaseInv.ToString("X");
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].monitoringConfig.rlAnaFaultInj_t.synthFault = "0x" + AnalogFaultInjectionConfigurationParam.SynthFault.ToString("X");
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].monitoringConfig.rlAnaFaultInj_t.supplyLdoFault = "0x" + AnalogFaultInjectionConfigurationParam.SupplyLDOFault.ToString("X");
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].monitoringConfig.rlAnaFaultInj_t.miscFault = "0x" + AnalogFaultInjectionConfigurationParam.MiscFault.ToString("X");
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].monitoringConfig.rlAnaFaultInj_t.miscThreshFault = "0x" + AnalogFaultInjectionConfigurationParam.MiscThresholdFault.ToString("X");
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].monitoringConfig.rlAnaFaultInj_t.isConfigured = 1;
                    }
                }
            }
            else
            {
                string msg = string.Format("Status: Failed, Error Type: {0}", new object[]
                {
                    GetErrorType(num)
                });
                GlobalRef.LuaWrapper.PrintError(msg);
            }
            if (GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
            {
                if (iRs232ConnectDisconnect_impl() == 0 && !GlobalRef.g_NtvRS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
                {
                    m_GuiManager.DllOps.iConnect(1U, 0U);
                    string full_command5 = string.Format("Debug Port Reconnected!", new object[0]);
                    m_GuiManager.RecordLog(9, full_command5);
                    ScriptOps.KeepTrying(2000, new Func<bool>(spare_read));
                }
            }
            else if (GlobalRef.g_CasCadeDeviceSpiConnect == 0U)
            {
                string full_command6 = string.Format("Error Occurred in Port open close", new object[0]);
                m_GuiManager.RecordLog(9, full_command6);
            }
            return num;
        }

        private int iSetRXSaturationDetectorMonConfig_Impl(bool is_starting_op, bool is_ending_op)
        {
            RxSaturationDetectorMonitoringConfigurationParam.ProfileIndex = m_MonRxSaturationDetectorConfigParameters.ProfileIndex;
            RxSaturationDetectorMonitoringConfigurationParam.SatMonSelect = m_MonRxSaturationDetectorConfigParameters.SatMonSelect;
            RxSaturationDetectorMonitoringConfigurationParam.SatMonMode = m_MonRxSaturationDetectorConfigParameters.Reserved1;
            RxSaturationDetectorMonitoringConfigurationParam.SatMonMode2 = 0;
            RxSaturationDetectorMonitoringConfigurationParam.SatMonPrimaryTimeSliceDuration = (short)(m_MonRxSaturationDetectorConfigParameters.SatMonPrimaryTimeSliceDuration / 0.16);
            RxSaturationDetectorMonitoringConfigurationParam.SatMonNumSlices = m_MonRxSaturationDetectorConfigParameters.SatMonNumSlices;
            RxSaturationDetectorMonitoringConfigurationParam.SatMonRxChannelMask = m_MonRxSaturationDetectorConfigParameters.SatMonRxChannelMask;
            RxSaturationDetectorMonitoringConfigurationParam.Reserved = 0;
            RxSaturationDetectorMonitoringConfigurationParam.Reserved2 = 0;
            RxSaturationDetectorMonitoringConfigurationParam.Reserved3 = 0;
            RxSaturationDetectorMonitoringConfigurationParam.Reserved4 = 0;
            RxSaturationDetectorMonitoringConfigurationParam.Reserved5 = 0;
            IntPtr data = GCHandle.Alloc(RxSaturationDetectorMonitoringConfigurationParam, GCHandleType.Pinned).AddrOfPinnedObject();
            int num;
            if (GlobalRef.g_NtvRS232Connect[(int)GlobalRef.g_RadarDeviceIndex] && GlobalRef.g_CasCadeDeviceSpiConnect == 0U)
            {
                num = m_TsWrapper.Calling_WriteAddr_Single(4294959848U, 1U);
                if (m_GuiManager.DllOps.itempDisconnect(false) == 0)
                {
                    string full_command = string.Format("Debug Port Disconnected", new object[0]);
                    m_GuiManager.RecordLog(0, full_command);
                    if (!GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
                    {
                        iRs232ConnectDisconnect_impl();
                    }
                }
            }
            if (m_RadarDeviceModeConfigParams.NumberOfRadarDevicesDetected <= 1)
            {
                string full_command2 = string.Format("ar1.SetRfRxIfSatMonConfig({0}, {1}, {2}, {3}, {4}, {5}, {6}, {7}, {8}, {9}, {10}, {11})", new object[]
                {
                    m_MonRxSaturationDetectorConfigParameters.ProfileIndex,
                    m_MonRxSaturationDetectorConfigParameters.SatMonSelect,
                    m_MonRxSaturationDetectorConfigParameters.Reserved1,
                    m_MonRxSaturationDetectorConfigParameters.Reserved2,
                    (decimal)Math.Round(m_MonRxSaturationDetectorConfigParameters.SatMonPrimaryTimeSliceDuration, 2),
                    m_MonRxSaturationDetectorConfigParameters.SatMonNumSlices,
                    m_MonRxSaturationDetectorConfigParameters.SatMonRxChannelMask,
                    m_MonRxSaturationDetectorConfigParameters.Reserved3,
                    m_MonRxSaturationDetectorConfigParameters.Reserved4,
                    m_MonRxSaturationDetectorConfigParameters.Reserved5,
                    m_MonRxSaturationDetectorConfigParameters.Reserved6,
                    m_MonRxSaturationDetectorConfigParameters.Reserved7
                });
                m_GuiManager.RecordLog(6, full_command2);
            }
            else
            {
                string full_command3 = string.Format("ar1.SetRfRxIfSatMonConfig_mult({0}, {1}, {2}, {3}, {4}, {5}, {6}, {7}, {8}, {9}, {10}, {11}, {12})", new object[]
                {
                    GlobalRef.g_RadarDeviceId,
                    m_MonRxSaturationDetectorConfigParameters.ProfileIndex,
                    m_MonRxSaturationDetectorConfigParameters.SatMonSelect,
                    m_MonRxSaturationDetectorConfigParameters.Reserved1,
                    m_MonRxSaturationDetectorConfigParameters.Reserved2,
                    (decimal)Math.Round(m_MonRxSaturationDetectorConfigParameters.SatMonPrimaryTimeSliceDuration, 2),
                    m_MonRxSaturationDetectorConfigParameters.SatMonNumSlices,
                    m_MonRxSaturationDetectorConfigParameters.SatMonRxChannelMask,
                    m_MonRxSaturationDetectorConfigParameters.Reserved3,
                    m_MonRxSaturationDetectorConfigParameters.Reserved4,
                    m_MonRxSaturationDetectorConfigParameters.Reserved5,
                    m_MonRxSaturationDetectorConfigParameters.Reserved6,
                    m_MonRxSaturationDetectorConfigParameters.Reserved7
                });
                m_GuiManager.RecordLog(6, full_command3);
            }
            uint g_RadarDeviceId = GlobalRef.g_RadarDeviceId;
            num = Imports.RadarLinkImpl_RfRxIfSatMonConfig(GlobalRef.g_RadarDeviceId, data);
            if ((num == 0 && ((GlobalRef.g_CasCadeDeviceSpiConnect & 1U) == 1U || (GlobalRef.g_CasCadeDeviceSpiConnect & 2U) == 2U || (GlobalRef.g_CasCadeDeviceSpiConnect & 4U) == 4U || (GlobalRef.g_CasCadeDeviceSpiConnect & 8U) == 8U)) || GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
            {
                string full_command4 = string.Format("Status: Passed", new object[0]);
                m_GuiManager.RecordLog(6, full_command4);
                for (int i = 0; i < 4; i++)
                {
                    if (jsonConfigInProgress)
                    {
                        break;
                    }
                    if (((ulong)g_RadarDeviceId & (ulong)(1L << (i & 31))) != 0UL)
                    {
                        int mmwaveDevIndex = getMmwaveDevIndex(i);
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].monitoringConfig.rlRxSatMonConf_t.profileIndx = (int)RxSaturationDetectorMonitoringConfigurationParam.ProfileIndex;
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].monitoringConfig.rlRxSatMonConf_t.satMonSel = (int)RxSaturationDetectorMonitoringConfigurationParam.SatMonSelect;
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].monitoringConfig.rlRxSatMonConf_t.primarySliceDuration = m_MonRxSaturationDetectorConfigParameters.SatMonPrimaryTimeSliceDuration;
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].monitoringConfig.rlRxSatMonConf_t.numSlices = (int)RxSaturationDetectorMonitoringConfigurationParam.SatMonNumSlices;
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].monitoringConfig.rlRxSatMonConf_t.rxChannelMask = (int)RxSaturationDetectorMonitoringConfigurationParam.SatMonRxChannelMask;
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].monitoringConfig.rlRxSatMonConf_t.isConfigured = 1;
                    }
                }
            }
            else
            {
                string msg = string.Format("Status: Failed, Error Type: {0}", new object[]
                {
                    GetErrorType(num)
                });
                GlobalRef.LuaWrapper.PrintError(msg);
            }
            if (GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
            {
                if (iRs232ConnectDisconnect_impl() == 0 && !GlobalRef.g_NtvRS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
                {
                    m_GuiManager.DllOps.iConnect(1U, 0U);
                    string full_command5 = string.Format("Debug Port Reconnected!", new object[0]);
                    m_GuiManager.RecordLog(9, full_command5);
                    ScriptOps.KeepTrying(2000, new Func<bool>(spare_read));
                }
            }
            else if (GlobalRef.g_CasCadeDeviceSpiConnect == 0U)
            {
                string full_command6 = string.Format("Error Occurred in Port open close", new object[0]);
                m_GuiManager.RecordLog(9, full_command6);
            }
            return num;
        }

        private int iSetPLLControlVoltageMonConfig_Impl(bool is_starting_op, bool is_ending_op)
        {
            PLLControlVolMonitoringConfigurationParam.ReportingMode = (byte)m_MonPLLControlVoltageConfigParameters.ReportingMode;
            PLLControlVolMonitoringConfigurationParam.Reserved = 0;
            PLLControlVolMonitoringConfigurationParam.SignalEnables = (ushort)(m_MonPLLControlVoltageConfigParameters.APLLVctl | m_MonPLLControlVoltageConfigParameters.SynthVCO1VoltageControl << 1 | m_MonPLLControlVoltageConfigParameters.SynthVCO2VoltageControl << 2);
            PLLControlVolMonitoringConfigurationParam.Reserved2 = 0;
            IntPtr data = GCHandle.Alloc(PLLControlVolMonitoringConfigurationParam, GCHandleType.Pinned).AddrOfPinnedObject();
            int num;
            if (GlobalRef.g_NtvRS232Connect[(int)GlobalRef.g_RadarDeviceIndex] && GlobalRef.g_CasCadeDeviceSpiConnect == 0U)
            {
                num = m_TsWrapper.Calling_WriteAddr_Single(4294959848U, 1U);
                if (m_GuiManager.DllOps.itempDisconnect(false) == 0)
                {
                    string full_command = string.Format("Debug Port Disconnected", new object[0]);
                    m_GuiManager.RecordLog(0, full_command);
                    if (!GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
                    {
                        iRs232ConnectDisconnect_impl();
                    }
                }
            }
            if (m_RadarDeviceModeConfigParams.NumberOfRadarDevicesDetected <= 1)
            {
                string full_command2 = string.Format("ar1.SetRfPllContrlVoltMonConfig({0}, {1}, {2}, {3})", new object[]
                {
                    m_MonPLLControlVoltageConfigParameters.ReportingMode,
                    m_MonPLLControlVoltageConfigParameters.APLLVctl,
                    m_MonPLLControlVoltageConfigParameters.SynthVCO1VoltageControl,
                    m_MonPLLControlVoltageConfigParameters.SynthVCO2VoltageControl
                });
                m_GuiManager.RecordLog(6, full_command2);
            }
            else
            {
                string full_command3 = string.Format("ar1.SetRfPllContrlVoltMonConfig_mult({0}, {1}, {2}, {3}, {4})", new object[]
                {
                    GlobalRef.g_RadarDeviceId,
                    m_MonPLLControlVoltageConfigParameters.ReportingMode,
                    m_MonPLLControlVoltageConfigParameters.APLLVctl,
                    m_MonPLLControlVoltageConfigParameters.SynthVCO1VoltageControl,
                    m_MonPLLControlVoltageConfigParameters.SynthVCO2VoltageControl
                });
                m_GuiManager.RecordLog(6, full_command3);
            }
            uint g_RadarDeviceId = GlobalRef.g_RadarDeviceId;
            num = Imports.RadarLinkImpl_RfPllContrlVoltMonConfig(GlobalRef.g_RadarDeviceId, data);
            if ((num == 0 && ((GlobalRef.g_CasCadeDeviceSpiConnect & 1U) == 1U || (GlobalRef.g_CasCadeDeviceSpiConnect & 2U) == 2U || (GlobalRef.g_CasCadeDeviceSpiConnect & 4U) == 4U || (GlobalRef.g_CasCadeDeviceSpiConnect & 8U) == 8U)) || GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
            {
                string full_command4 = string.Format("Status: Passed", new object[0]);
                m_GuiManager.RecordLog(6, full_command4);
                for (int i = 0; i < 4; i++)
                {
                    if (jsonConfigInProgress)
                    {
                        break;
                    }
                    if (((ulong)g_RadarDeviceId & (ulong)(1L << (i & 31))) != 0UL)
                    {
                        int mmwaveDevIndex = getMmwaveDevIndex(i);
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].monitoringConfig.rlPllContrVoltMonConf_t.reportMode = (int)PLLControlVolMonitoringConfigurationParam.ReportingMode;
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].monitoringConfig.rlPllContrVoltMonConf_t.signalEnables = "0x" + PLLControlVolMonitoringConfigurationParam.SignalEnables.ToString("X");
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].monitoringConfig.rlPllContrVoltMonConf_t.isConfigured = 1;
                    }
                }
            }
            else
            {
                string msg = string.Format("Status: Failed, Error Type: {0}", new object[]
                {
                    GetErrorType(num)
                });
                GlobalRef.LuaWrapper.PrintError(msg);
            }
            if (GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
            {
                if (iRs232ConnectDisconnect_impl() == 0 && !GlobalRef.g_NtvRS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
                {
                    m_GuiManager.DllOps.iConnect(1U, 0U);
                    string full_command5 = string.Format("Debug Port Reconnected!", new object[0]);
                    m_GuiManager.RecordLog(9, full_command5);
                    ScriptOps.KeepTrying(2000, new Func<bool>(spare_read));
                }
            }
            else if (GlobalRef.g_CasCadeDeviceSpiConnect == 0U)
            {
                string full_command6 = string.Format("Error Occurred in Port open close", new object[0]);
                m_GuiManager.RecordLog(9, full_command6);
            }
            return num;
        }

        private int iSetDualClockComparatorMonConfig_Impl(bool is_starting_op, bool is_ending_op)
        {
            DualClockCompMonitoringConfigurationParam.ReportingMode = (byte)m_MonDualClockCompConfigParameters.ReportingMode;
            DualClockCompMonitoringConfigurationParam.Reserved = 0;
            DualClockCompMonitoringConfigurationParam.DCCPairEnables = (ushort)(m_MonDualClockCompConfigParameters.ClockPair0 | m_MonDualClockCompConfigParameters.ClockPair1 << 1 | m_MonDualClockCompConfigParameters.ClockPair2 << 2 | m_MonDualClockCompConfigParameters.ClockPair3 << 3 | m_MonDualClockCompConfigParameters.ClockPair4 << 4 | m_MonDualClockCompConfigParameters.ClockPair5 << 5);
            DualClockCompMonitoringConfigurationParam.Reserved2 = 0U;
            IntPtr data = GCHandle.Alloc(DualClockCompMonitoringConfigurationParam, GCHandleType.Pinned).AddrOfPinnedObject();
            int num;
            if (GlobalRef.g_NtvRS232Connect[(int)GlobalRef.g_RadarDeviceIndex] && GlobalRef.g_CasCadeDeviceSpiConnect == 0U)
            {
                num = m_TsWrapper.Calling_WriteAddr_Single(4294959848U, 1U);
                if (m_GuiManager.DllOps.itempDisconnect(false) == 0)
                {
                    string full_command = string.Format("Debug Port Disconnected", new object[0]);
                    m_GuiManager.RecordLog(0, full_command);
                    if (!GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
                    {
                        iRs232ConnectDisconnect_impl();
                    }
                }
            }
            if (m_RadarDeviceModeConfigParams.NumberOfRadarDevicesDetected <= 1)
            {
                string full_command2 = string.Format("ar1.SetRfDualClkCompMonConfig({0}, {1}, {2}, {3}, {4}, {5}, {6})", new object[]
                {
                    m_MonDualClockCompConfigParameters.ReportingMode,
                    m_MonDualClockCompConfigParameters.ClockPair0,
                    m_MonDualClockCompConfigParameters.ClockPair1,
                    m_MonDualClockCompConfigParameters.ClockPair2,
                    m_MonDualClockCompConfigParameters.ClockPair3,
                    m_MonDualClockCompConfigParameters.ClockPair4,
                    m_MonDualClockCompConfigParameters.ClockPair5
                });
                m_GuiManager.RecordLog(6, full_command2);
            }
            else
            {
                string full_command3 = string.Format("ar1.SetRfDualClkCompMonConfig_mult({0}, {1}, {2}, {3}, {4}, {5}, {6}, {7})", new object[]
                {
                    GlobalRef.g_RadarDeviceId,
                    m_MonDualClockCompConfigParameters.ReportingMode,
                    m_MonDualClockCompConfigParameters.ClockPair0,
                    m_MonDualClockCompConfigParameters.ClockPair1,
                    m_MonDualClockCompConfigParameters.ClockPair2,
                    m_MonDualClockCompConfigParameters.ClockPair3,
                    m_MonDualClockCompConfigParameters.ClockPair4,
                    m_MonDualClockCompConfigParameters.ClockPair5
                });
                m_GuiManager.RecordLog(6, full_command3);
            }
            uint g_RadarDeviceId = GlobalRef.g_RadarDeviceId;
            num = Imports.RadarLinkImpl_RfDualClkCompMonConfig(GlobalRef.g_RadarDeviceId, data);
            if ((num == 0 && ((GlobalRef.g_CasCadeDeviceSpiConnect & 1U) == 1U || (GlobalRef.g_CasCadeDeviceSpiConnect & 2U) == 2U || (GlobalRef.g_CasCadeDeviceSpiConnect & 4U) == 4U || (GlobalRef.g_CasCadeDeviceSpiConnect & 8U) == 8U)) || GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
            {
                string full_command4 = string.Format("Status: Passed", new object[0]);
                m_GuiManager.RecordLog(6, full_command4);
                for (int i = 0; i < 4; i++)
                {
                    if (jsonConfigInProgress)
                    {
                        break;
                    }
                    if (((ulong)g_RadarDeviceId & (ulong)(1L << (i & 31))) != 0UL)
                    {
                        int mmwaveDevIndex = getMmwaveDevIndex(i);
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].monitoringConfig.rlDualClkCompMonConf_t.reportMode = (int)DualClockCompMonitoringConfigurationParam.ReportingMode;
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].monitoringConfig.rlDualClkCompMonConf_t.dccPairEnables = "0x" + DualClockCompMonitoringConfigurationParam.DCCPairEnables.ToString("X");
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].monitoringConfig.rlDualClkCompMonConf_t.isConfigured = 1;
                    }
                }
            }
            else
            {
                string msg = string.Format("Status: Failed, Error Type: {0}", new object[]
                {
                    GetErrorType(num)
                });
                GlobalRef.LuaWrapper.PrintError(msg);
            }
            if (GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
            {
                if (iRs232ConnectDisconnect_impl() == 0 && !GlobalRef.g_NtvRS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
                {
                    m_GuiManager.DllOps.iConnect(1U, 0U);
                    string full_command5 = string.Format("Debug Port Reconnected!", new object[0]);
                    m_GuiManager.RecordLog(9, full_command5);
                    ScriptOps.KeepTrying(2000, new Func<bool>(spare_read));
                }
            }
            else if (GlobalRef.g_CasCadeDeviceSpiConnect == 0U)
            {
                string full_command6 = string.Format("Error Occurred in Port open close", new object[0]);
                m_GuiManager.RecordLog(9, full_command6);
            }
            return num;
        }

        private int iSetSignalandImageMonConfig_Impl(bool is_starting_op, bool is_ending_op)
        {
            SiganlAnImageMonitoringConfigurationParam.ProfileIndex = (byte)m_MonSignalAndImageConfigParameters.ProfileIndex;
            SiganlAnImageMonitoringConfigurationParam.SigImGMonPriTimeSliceNumSamples = (ushort)m_MonSignalAndImageConfigParameters.SigImGMonPriTimeSliceNumSamples;
            SiganlAnImageMonitoringConfigurationParam.SigImGMonNumSlices = (byte)m_MonSignalAndImageConfigParameters.SigImGMonNumSlices;
            SiganlAnImageMonitoringConfigurationParam.Reserved = 0U;
            SiganlAnImageMonitoringConfigurationParam.Reserved2 = 0U;
            IntPtr data = GCHandle.Alloc(SiganlAnImageMonitoringConfigurationParam, GCHandleType.Pinned).AddrOfPinnedObject();
            int num;
            if (GlobalRef.g_NtvRS232Connect[(int)GlobalRef.g_RadarDeviceIndex] && GlobalRef.g_CasCadeDeviceSpiConnect == 0U)
            {
                num = m_TsWrapper.Calling_WriteAddr_Single(4294959848U, 1U);
                if (m_GuiManager.DllOps.itempDisconnect(false) == 0)
                {
                    string full_command = string.Format("Debug Port Disconnected", new object[0]);
                    m_GuiManager.RecordLog(0, full_command);
                    if (!GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
                    {
                        iRs232ConnectDisconnect_impl();
                    }
                }
            }
            if (m_RadarDeviceModeConfigParams.NumberOfRadarDevicesDetected <= 1)
            {
                string full_command2 = string.Format("ar1.SetRfRxSigImgMonConfig({0}, {1}, {2})", new object[]
                {
                    m_MonSignalAndImageConfigParameters.ProfileIndex,
                    m_MonSignalAndImageConfigParameters.SigImGMonPriTimeSliceNumSamples,
                    m_MonSignalAndImageConfigParameters.SigImGMonNumSlices
                });
                m_GuiManager.RecordLog(6, full_command2);
            }
            else
            {
                string full_command3 = string.Format("ar1.SetRfRxSigImgMonConfig_mult({0}, {1}, {2}, {3})", new object[]
                {
                    GlobalRef.g_RadarDeviceId,
                    m_MonSignalAndImageConfigParameters.ProfileIndex,
                    m_MonSignalAndImageConfigParameters.SigImGMonPriTimeSliceNumSamples,
                    m_MonSignalAndImageConfigParameters.SigImGMonNumSlices
                });
                m_GuiManager.RecordLog(6, full_command3);
            }
            uint g_RadarDeviceId = GlobalRef.g_RadarDeviceId;
            num = Imports.RadarLinkImpl_RfRxSigImgMonConfig(GlobalRef.g_RadarDeviceId, data);
            if ((num == 0 && ((GlobalRef.g_CasCadeDeviceSpiConnect & 1U) == 1U || (GlobalRef.g_CasCadeDeviceSpiConnect & 2U) == 2U || (GlobalRef.g_CasCadeDeviceSpiConnect & 4U) == 4U || (GlobalRef.g_CasCadeDeviceSpiConnect & 8U) == 8U)) || GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
            {
                string full_command4 = string.Format("Status: Passed", new object[0]);
                m_GuiManager.RecordLog(6, full_command4);
                for (int i = 0; i < 4; i++)
                {
                    if (jsonConfigInProgress)
                    {
                        break;
                    }
                    if (((ulong)g_RadarDeviceId & (ulong)(1L << (i & 31))) != 0UL)
                    {
                        int mmwaveDevIndex = getMmwaveDevIndex(i);
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].monitoringConfig.rlSigImgMonConf_t.profileIndx = (int)SiganlAnImageMonitoringConfigurationParam.ProfileIndex;
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].monitoringConfig.rlSigImgMonConf_t.numSlices = (int)SiganlAnImageMonitoringConfigurationParam.SigImGMonNumSlices;
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].monitoringConfig.rlSigImgMonConf_t.timeSliceNumSamples = (int)SiganlAnImageMonitoringConfigurationParam.SigImGMonPriTimeSliceNumSamples;
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].monitoringConfig.rlSigImgMonConf_t.isConfigured = 1;
                    }
                }
            }
            else
            {
                string msg = string.Format("Status: Failed, Error Type: {0}", new object[]
                {
                    GetErrorType(num)
                });
                GlobalRef.LuaWrapper.PrintError(msg);
            }
            if (GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
            {
                if (iRs232ConnectDisconnect_impl() == 0 && !GlobalRef.g_NtvRS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
                {
                    m_GuiManager.DllOps.iConnect(1U, 0U);
                    string full_command5 = string.Format("Debug Port Reconnected!", new object[0]);
                    m_GuiManager.RecordLog(9, full_command5);
                    ScriptOps.KeepTrying(2000, new Func<bool>(spare_read));
                }
            }
            else if (GlobalRef.g_CasCadeDeviceSpiConnect == 0U)
            {
                string full_command6 = string.Format("Error Occurred in Port open close", new object[0]);
                m_GuiManager.RecordLog(9, full_command6);
            }
            return num;
        }

        private int iSetSynthFrequencyMonConfig_Impl(bool is_starting_op, bool is_ending_op)
        {
            SynthFreqMonitoringConfigurationParam.ProfileIndex = (byte)m_MonSynthFrequencyConfigParameters.ProfileIndex;
            SynthFreqMonitoringConfigurationParam.ReportingMode = (byte)m_MonSynthFrequencyConfigParameters.ReportingMode;
            SynthFreqMonitoringConfigurationParam.FreqErrorThreshold = m_MonSynthFrequencyConfigParameters.FreqErrorThreshold;
            SynthFreqMonitoringConfigurationParam.MonStartTime = (sbyte)(m_MonSynthFrequencyConfigParameters.MonStartTime / 0.2);
            SynthFreqMonitoringConfigurationParam.Reserved2 = 0;
            SynthFreqMonitoringConfigurationParam.Reserved3 = 0;
            SynthFreqMonitoringConfigurationParam.Reserved4 = 0U;
            IntPtr data = GCHandle.Alloc(SynthFreqMonitoringConfigurationParam, GCHandleType.Pinned).AddrOfPinnedObject();
            int num;
            if (GlobalRef.g_NtvRS232Connect[(int)GlobalRef.g_RadarDeviceIndex] && GlobalRef.g_CasCadeDeviceSpiConnect == 0U)
            {
                num = m_TsWrapper.Calling_WriteAddr_Single(4294959848U, 1U);
                if (m_GuiManager.DllOps.itempDisconnect(false) == 0)
                {
                    string full_command = string.Format("Debug Port Disconnected", new object[0]);
                    m_GuiManager.RecordLog(0, full_command);
                    if (!GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
                    {
                        iRs232ConnectDisconnect_impl();
                    }
                }
            }
            if (m_RadarDeviceModeConfigParams.NumberOfRadarDevicesDetected <= 1)
            {
                string full_command2 = string.Format("ar1.SetRfSynthFreqMonConfig({0}, {1}, {2}, {3})", new object[]
                {
                    m_MonSynthFrequencyConfigParameters.ProfileIndex,
                    m_MonSynthFrequencyConfigParameters.ReportingMode,
                    m_MonSynthFrequencyConfigParameters.FreqErrorThreshold,
                    (decimal)Math.Round(m_MonSynthFrequencyConfigParameters.MonStartTime, 1)
                });
                m_GuiManager.RecordLog(6, full_command2);
            }
            else
            {
                string full_command3 = string.Format("ar1.SetRfSynthFreqMonConfig_mult({0}, {1}, {2}, {3}, {4})", new object[]
                {
                    GlobalRef.g_RadarDeviceId,
                    m_MonSynthFrequencyConfigParameters.ProfileIndex,
                    m_MonSynthFrequencyConfigParameters.ReportingMode,
                    m_MonSynthFrequencyConfigParameters.FreqErrorThreshold,
                    (decimal)Math.Round(m_MonSynthFrequencyConfigParameters.MonStartTime, 1)
                });
                m_GuiManager.RecordLog(6, full_command3);
            }
            uint g_RadarDeviceId = GlobalRef.g_RadarDeviceId;
            num = Imports.RadarLinkImpl_RfSynthFreqMonConfig(GlobalRef.g_RadarDeviceId, data);
            if ((num == 0 && ((GlobalRef.g_CasCadeDeviceSpiConnect & 1U) == 1U || (GlobalRef.g_CasCadeDeviceSpiConnect & 2U) == 2U || (GlobalRef.g_CasCadeDeviceSpiConnect & 4U) == 4U || (GlobalRef.g_CasCadeDeviceSpiConnect & 8U) == 8U)) || GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
            {
                string full_command4 = string.Format("Status: Passed", new object[0]);
                m_GuiManager.RecordLog(6, full_command4);
                for (int i = 0; i < 4; i++)
                {
                    if (jsonConfigInProgress)
                    {
                        break;
                    }
                    if (((ulong)g_RadarDeviceId & (ulong)(1L << (i & 31))) != 0UL)
                    {
                        int mmwaveDevIndex = getMmwaveDevIndex(i);
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].monitoringConfig.rlSynthFreqMonConf_t.profileIndx = (int)SynthFreqMonitoringConfigurationParam.ProfileIndex;
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].monitoringConfig.rlSynthFreqMonConf_t.reportMode = (int)SynthFreqMonitoringConfigurationParam.ReportingMode;
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].monitoringConfig.rlSynthFreqMonConf_t.freqErrThresh = (int)SynthFreqMonitoringConfigurationParam.FreqErrorThreshold;
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].monitoringConfig.rlSynthFreqMonConf_t.monStartTime = m_MonSynthFrequencyConfigParameters.MonStartTime;
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].monitoringConfig.rlSynthFreqMonConf_t.isConfigured = 1;
                    }
                }
            }
            else
            {
                string msg = string.Format("Status: Failed, Error Type: {0}", new object[]
                {
                    GetErrorType(num)
                });
                GlobalRef.LuaWrapper.PrintError(msg);
            }
            if (GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
            {
                if (iRs232ConnectDisconnect_impl() == 0 && !GlobalRef.g_NtvRS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
                {
                    m_GuiManager.DllOps.iConnect(1U, 0U);
                    string full_command5 = string.Format("Debug Port Reconnected!", new object[0]);
                    m_GuiManager.RecordLog(9, full_command5);
                    ScriptOps.KeepTrying(2000, new Func<bool>(spare_read));
                }
            }
            else if (GlobalRef.g_CasCadeDeviceSpiConnect == 0U)
            {
                string full_command6 = string.Format("Error Occurred in Port open close", new object[0]);
                m_GuiManager.RecordLog(9, full_command6);
            }
            return num;
        }

        private int iSetRxMixerInputPowerMonConfig_Impl(bool is_starting_op, bool is_ending_op)
        {
            RXMixerInputPowerMonitoringConfigurationParam.ReportingMode = (byte)m_MonRxMixerInputPowerConfigParameters.ReportingMode;
            RXMixerInputPowerMonitoringConfigurationParam.ProfileIndex = (byte)m_MonRxMixerInputPowerConfigParameters.ProfileIndex;
            RXMixerInputPowerMonitoringConfigurationParam.TxEnable = (byte)(m_MonRxMixerInputPowerConfigParameters.Tx1Enable | m_MonRxMixerInputPowerConfigParameters.Tx2Enable << 1 | m_MonRxMixerInputPowerConfigParameters.Tx3Enable << 2);
            RXMixerInputPowerMonitoringConfigurationParam.Reserved = 0;
            RXMixerInputPowerMonitoringConfigurationParam.Thresholds = (ushort)((int)(m_MonRxMixerInputPowerConfigParameters.MinThresholds * 255 / 1800) | (int)(m_MonRxMixerInputPowerConfigParameters.MaxThresholds * 255 / 1800) << 8);
            int num = (int)((ushort)((int)m_MonRxMixerInputPowerConfigParameters.MinThresholds | (int)m_MonRxMixerInputPowerConfigParameters.MaxThresholds << 8));
            RXMixerInputPowerMonitoringConfigurationParam.Reserved2 = 0;
            RXMixerInputPowerMonitoringConfigurationParam.Reserved3 = 0U;
            IntPtr data = GCHandle.Alloc(RXMixerInputPowerMonitoringConfigurationParam, GCHandleType.Pinned).AddrOfPinnedObject();
            int num2;
            if (GlobalRef.g_NtvRS232Connect[(int)GlobalRef.g_RadarDeviceIndex] && GlobalRef.g_CasCadeDeviceSpiConnect == 0U)
            {
                num2 = m_TsWrapper.Calling_WriteAddr_Single(4294959848U, 1U);
                if (m_GuiManager.DllOps.itempDisconnect(false) == 0)
                {
                    string full_command = string.Format("Debug Port Disconnected", new object[0]);
                    m_GuiManager.RecordLog(0, full_command);
                    if (!GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
                    {
                        iRs232ConnectDisconnect_impl();
                    }
                }
            }
            if (m_RadarDeviceModeConfigParams.NumberOfRadarDevicesDetected <= 1)
            {
                string full_command2 = string.Format("ar1.SetRfMixerInpPowMonConfig({0}, {1}, {2}, {3}, {4}, {5})", new object[]
                {
                    m_MonRxMixerInputPowerConfigParameters.ReportingMode,
                    m_MonRxMixerInputPowerConfigParameters.ProfileIndex,
                    m_MonRxMixerInputPowerConfigParameters.Tx1Enable,
                    m_MonRxMixerInputPowerConfigParameters.Tx2Enable,
                    m_MonRxMixerInputPowerConfigParameters.Tx3Enable,
                    (int)m_MonRxMixerInputPowerConfigParameters.MinThresholds | (int)m_MonRxMixerInputPowerConfigParameters.MaxThresholds << 16
                });
                m_GuiManager.RecordLog(6, full_command2);
            }
            else
            {
                string full_command3 = string.Format("ar1.SetRfMixerInpPowMonConfig_mult({0}, {1}, {2}, {3}, {4}, {5}, {6})", new object[]
                {
                    GlobalRef.g_RadarDeviceId,
                    m_MonRxMixerInputPowerConfigParameters.ReportingMode,
                    m_MonRxMixerInputPowerConfigParameters.ProfileIndex,
                    m_MonRxMixerInputPowerConfigParameters.Tx1Enable,
                    m_MonRxMixerInputPowerConfigParameters.Tx2Enable,
                    m_MonRxMixerInputPowerConfigParameters.Tx3Enable,
                    (int)m_MonRxMixerInputPowerConfigParameters.MinThresholds | (int)m_MonRxMixerInputPowerConfigParameters.MaxThresholds << 16
                });
                m_GuiManager.RecordLog(6, full_command3);
            }
            uint g_RadarDeviceId = GlobalRef.g_RadarDeviceId;
            num2 = Imports.RadarLinkImpl_RfRxMixerInPwrConfig(GlobalRef.g_RadarDeviceId, data);
            if ((num2 == 0 && ((GlobalRef.g_CasCadeDeviceSpiConnect & 1U) == 1U || (GlobalRef.g_CasCadeDeviceSpiConnect & 2U) == 2U || (GlobalRef.g_CasCadeDeviceSpiConnect & 4U) == 4U || (GlobalRef.g_CasCadeDeviceSpiConnect & 8U) == 8U)) || GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
            {
                string full_command4 = string.Format("Status: Passed", new object[0]);
                m_GuiManager.RecordLog(6, full_command4);
                for (int i = 0; i < 4; i++)
                {
                    if (jsonConfigInProgress)
                    {
                        break;
                    }
                    if (((ulong)g_RadarDeviceId & (ulong)(1L << (i & 31))) != 0UL)
                    {
                        int mmwaveDevIndex = getMmwaveDevIndex(i);
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].monitoringConfig.rlRxMixInPwrMonConf_t.profileIndx = (int)RXMixerInputPowerMonitoringConfigurationParam.ProfileIndex;
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].monitoringConfig.rlRxMixInPwrMonConf_t.reportMode = (int)RXMixerInputPowerMonitoringConfigurationParam.ReportingMode;
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].monitoringConfig.rlRxMixInPwrMonConf_t.txEnable = "0x" + RXMixerInputPowerMonitoringConfigurationParam.TxEnable.ToString("X");
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].monitoringConfig.rlRxMixInPwrMonConf_t.thresholds = "0x" + num.ToString("X");
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].monitoringConfig.rlRxMixInPwrMonConf_t.isConfigured = 1;
                    }
                }
            }
            else
            {
                string msg = string.Format("Status: Failed, Error Type: {0}", new object[]
                {
                    GetErrorType(num2)
                });
                GlobalRef.LuaWrapper.PrintError(msg);
            }
            if (GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
            {
                if (iRs232ConnectDisconnect_impl() == 0 && !GlobalRef.g_NtvRS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
                {
                    m_GuiManager.DllOps.iConnect(1U, 0U);
                    string full_command5 = string.Format("Debug Port Reconnected!", new object[0]);
                    m_GuiManager.RecordLog(9, full_command5);
                    ScriptOps.KeepTrying(2000, new Func<bool>(spare_read));
                }
            }
            else if (GlobalRef.g_CasCadeDeviceSpiConnect == 0U)
            {
                string full_command6 = string.Format("Error Occurred in Port open close", new object[0]);
                m_GuiManager.RecordLog(9, full_command6);
            }
            return num2;
        }

        private int iSetExternalAnalogSignalsMonConfig_Impl(bool is_starting_op, bool is_ending_op)
        {
            ExtAnalogSigMonConfigurationParam.ReportingMode = (byte)m_MonExternalAnalogSignalConfigParameters.ReportingMode;
            ExtAnalogSigMonConfigurationParam.Reserved = 0;
            ExtAnalogSigMonConfigurationParam.SignalInputEnables = (byte)(m_MonExternalAnalogSignalConfigParameters.SigIpEnaAnalogTest1 | m_MonExternalAnalogSignalConfigParameters.SigIpEnaAnalogTest2 << 1 | m_MonExternalAnalogSignalConfigParameters.SigIpEnaAnalogTest3 << 2 | m_MonExternalAnalogSignalConfigParameters.SigIpEnaAnalogTest4 << 3 | m_MonExternalAnalogSignalConfigParameters.SigIpEnaAnalogMux << 4 | m_MonExternalAnalogSignalConfigParameters.SigIpEnaAnalogVSense << 5);
            ExtAnalogSigMonConfigurationParam.SignalBufferEnables = (byte)(m_MonExternalAnalogSignalConfigParameters.SigBufEnaAnalogTest1 | m_MonExternalAnalogSignalConfigParameters.SigBufEnaAnalogTest2 << 1 | m_MonExternalAnalogSignalConfigParameters.SigBufEnaAnalogTest3 << 2 | m_MonExternalAnalogSignalConfigParameters.SigBufEnaAnalogTest4 << 3 | m_MonExternalAnalogSignalConfigParameters.SigBufEnaAnalogMux << 4);
            ExtAnalogSigMonConfigurationParam.SignalSettlingTimeAnalogTest1AndTest2 = (ushort)((int)((byte)(m_MonExternalAnalogSignalConfigParameters.SigSettlingTimeAnalogTest1 / 0.8)) | (int)((byte)(m_MonExternalAnalogSignalConfigParameters.SigSettlingTimeAnalogTest2 / 0.8)) << 8);
            ExtAnalogSigMonConfigurationParam.SignalSettlingTimeAnalogTest3AndTest4 = (ushort)((int)((byte)(m_MonExternalAnalogSignalConfigParameters.SigSettlingTimeAnalogTest3 / 0.8)) | (int)((byte)(m_MonExternalAnalogSignalConfigParameters.SigSettlingTimeAnalogTest4 / 0.8)) << 8);
            ExtAnalogSigMonConfigurationParam.SignalSettlingTimeAnalogMuxAndVSense = (ushort)((int)((byte)(m_MonExternalAnalogSignalConfigParameters.SigSettlingTimeAnalogMux / 0.8)) | (int)((byte)(m_MonExternalAnalogSignalConfigParameters.SigSettlingTimeAnalogVSense / 0.8)) << 8);
            ExtAnalogSigMonConfigurationParam.SignalMinThresholdAnalogTest1AndTest2 = (ushort)((int)((byte)(m_MonExternalAnalogSignalConfigParameters.SigMinThresholdAnalogTest1 * 256.0 / 1800.0)) | (int)((byte)(m_MonExternalAnalogSignalConfigParameters.SigMinThresholdAnalogTest2 * 256.0 / 1800.0)) << 8);
            ExtAnalogSigMonConfigurationParam.SignalMinThresholdAnalogTest3AndTest4 = (ushort)((int)((byte)(m_MonExternalAnalogSignalConfigParameters.SigMinThresholdAnalogTest3 * 256.0 / 1800.0)) | (int)((byte)(m_MonExternalAnalogSignalConfigParameters.SigMinThresholdAnalogTest4 * 256.0 / 1800.0)) << 8);
            ExtAnalogSigMonConfigurationParam.SignalMinThresholdAnalogMuxAndVSense = (ushort)((int)((byte)(m_MonExternalAnalogSignalConfigParameters.SigMinThresholdAnalogMux * 256.0 / 1800.0)) | (int)((byte)(m_MonExternalAnalogSignalConfigParameters.SigMinThresholdAnalogVSense * 256.0 / 1800.0)) << 8);
            ExtAnalogSigMonConfigurationParam.SignalMaxThresholdAnalogTest1AndTest2 = (ushort)((int)((byte)(m_MonExternalAnalogSignalConfigParameters.SigMaxThresholdAnalogTest1 * 256.0 / 1800.0)) | (int)((byte)(m_MonExternalAnalogSignalConfigParameters.SigMaxThresholdAnalogTest2 * 256.0 / 1800.0)) << 8);
            ExtAnalogSigMonConfigurationParam.SignalMaxThresholdAnalogTest3AndTest4 = (ushort)((int)((byte)(m_MonExternalAnalogSignalConfigParameters.SigMaxThresholdAnalogTest3 * 256.0 / 1800.0)) | (int)((byte)(m_MonExternalAnalogSignalConfigParameters.SigMaxThresholdAnalogTest4 * 256.0 / 1800.0)) << 8);
            ExtAnalogSigMonConfigurationParam.SignalMaxThresholdAnalogMuxAndVSense = (ushort)((int)((byte)(m_MonExternalAnalogSignalConfigParameters.SigMaxThresholdAnalogMux * 256.0 / 1800.0)) | (int)((byte)(m_MonExternalAnalogSignalConfigParameters.SigMaxThresholdAnalogVSense * 256.0 / 1800.0)) << 8);
            ExtAnalogSigMonConfigurationParam.Reserved2 = 0;
            ExtAnalogSigMonConfigurationParam.Reserved3 = 0U;
            ExtAnalogSigMonConfigurationParam.Reserved4 = 0U;
            IntPtr data = GCHandle.Alloc(ExtAnalogSigMonConfigurationParam, GCHandleType.Pinned).AddrOfPinnedObject();
            int num;
            if (GlobalRef.g_NtvRS232Connect[(int)GlobalRef.g_RadarDeviceIndex] && GlobalRef.g_CasCadeDeviceSpiConnect == 0U)
            {
                num = m_TsWrapper.Calling_WriteAddr_Single(4294959848U, 1U);
                if (m_GuiManager.DllOps.itempDisconnect(false) == 0)
                {
                    string full_command = string.Format("Debug Port Disconnected", new object[0]);
                    m_GuiManager.RecordLog(0, full_command);
                    if (!GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
                    {
                        iRs232ConnectDisconnect_impl();
                    }
                }
            }
            if (m_RadarDeviceModeConfigParams.NumberOfRadarDevicesDetected <= 1)
            {
                string full_command2 = string.Format("ar1.SetRfExtAnaSignalsMonConfig({0}, {1}, {2}, {3}, {4} , {5}, {6}, {7}, {8}, {9}, {10}, {11}, {12}, {13}, {14}, {15}, {16}, {17}, {18}, {19}, {20}, {21}, {22}, {23}, {24}, {25}, {26}, {27}, {28}, {29})", new object[]
                {
                    m_MonExternalAnalogSignalConfigParameters.ReportingMode,
                    m_MonExternalAnalogSignalConfigParameters.SigIpEnaAnalogTest1,
                    m_MonExternalAnalogSignalConfigParameters.SigIpEnaAnalogTest2,
                    m_MonExternalAnalogSignalConfigParameters.SigIpEnaAnalogTest3,
                    m_MonExternalAnalogSignalConfigParameters.SigIpEnaAnalogTest4,
                    m_MonExternalAnalogSignalConfigParameters.SigIpEnaAnalogMux,
                    m_MonExternalAnalogSignalConfigParameters.SigIpEnaAnalogVSense,
                    m_MonExternalAnalogSignalConfigParameters.SigBufEnaAnalogTest1,
                    m_MonExternalAnalogSignalConfigParameters.SigBufEnaAnalogTest2,
                    m_MonExternalAnalogSignalConfigParameters.SigBufEnaAnalogTest3,
                    m_MonExternalAnalogSignalConfigParameters.SigBufEnaAnalogTest4,
                    m_MonExternalAnalogSignalConfigParameters.SigBufEnaAnalogMux,
                    (decimal)Math.Round(m_MonExternalAnalogSignalConfigParameters.SigSettlingTimeAnalogTest1, 1),
                    (decimal)Math.Round(m_MonExternalAnalogSignalConfigParameters.SigSettlingTimeAnalogTest2, 1),
                    (decimal)Math.Round(m_MonExternalAnalogSignalConfigParameters.SigSettlingTimeAnalogTest3, 1),
                    (decimal)Math.Round(m_MonExternalAnalogSignalConfigParameters.SigSettlingTimeAnalogTest4, 1),
                    (decimal)Math.Round(m_MonExternalAnalogSignalConfigParameters.SigSettlingTimeAnalogMux, 1),
                    (decimal)Math.Round(m_MonExternalAnalogSignalConfigParameters.SigSettlingTimeAnalogVSense, 1),
                    (decimal)m_MonExternalAnalogSignalConfigParameters.SigMinThresholdAnalogTest1,
                    (decimal)m_MonExternalAnalogSignalConfigParameters.SigMinThresholdAnalogTest2,
                    (decimal)m_MonExternalAnalogSignalConfigParameters.SigMinThresholdAnalogTest3,
                    (decimal)m_MonExternalAnalogSignalConfigParameters.SigMinThresholdAnalogTest4,
                    (decimal)m_MonExternalAnalogSignalConfigParameters.SigMinThresholdAnalogMux,
                    (decimal)m_MonExternalAnalogSignalConfigParameters.SigMinThresholdAnalogVSense,
                    (decimal)m_MonExternalAnalogSignalConfigParameters.SigMaxThresholdAnalogTest1,
                    (decimal)m_MonExternalAnalogSignalConfigParameters.SigMaxThresholdAnalogTest2,
                    (decimal)m_MonExternalAnalogSignalConfigParameters.SigMaxThresholdAnalogTest3,
                    (decimal)m_MonExternalAnalogSignalConfigParameters.SigMaxThresholdAnalogTest4,
                    (decimal)m_MonExternalAnalogSignalConfigParameters.SigMaxThresholdAnalogMux,
                    (decimal)m_MonExternalAnalogSignalConfigParameters.SigMaxThresholdAnalogVSense
                });
                m_GuiManager.RecordLog(6, full_command2);
            }
            else
            {
                string full_command3 = string.Format("ar1.SetRfExtAnaSignalsMonConfig_mult({0}, {1}, {2}, {3}, {4} , {5}, {6}, {7}, {8}, {9}, {10}, {11}, {12}, {13}, {14}, {15}, {16}, {17}, {18}, {19}, {20}, {21}, {22}, {23}, {24}, {25}, {26}, {27}, {28}, {29}, {30})", new object[]
                {
                    GlobalRef.g_RadarDeviceId,
                    m_MonExternalAnalogSignalConfigParameters.ReportingMode,
                    m_MonExternalAnalogSignalConfigParameters.SigIpEnaAnalogTest1,
                    m_MonExternalAnalogSignalConfigParameters.SigIpEnaAnalogTest2,
                    m_MonExternalAnalogSignalConfigParameters.SigIpEnaAnalogTest3,
                    m_MonExternalAnalogSignalConfigParameters.SigIpEnaAnalogTest4,
                    m_MonExternalAnalogSignalConfigParameters.SigIpEnaAnalogMux,
                    m_MonExternalAnalogSignalConfigParameters.SigIpEnaAnalogVSense,
                    m_MonExternalAnalogSignalConfigParameters.SigBufEnaAnalogTest1,
                    m_MonExternalAnalogSignalConfigParameters.SigBufEnaAnalogTest2,
                    m_MonExternalAnalogSignalConfigParameters.SigBufEnaAnalogTest3,
                    m_MonExternalAnalogSignalConfigParameters.SigBufEnaAnalogTest4,
                    m_MonExternalAnalogSignalConfigParameters.SigBufEnaAnalogMux,
                    (decimal)Math.Round(m_MonExternalAnalogSignalConfigParameters.SigSettlingTimeAnalogTest1, 1),
                    (decimal)Math.Round(m_MonExternalAnalogSignalConfigParameters.SigSettlingTimeAnalogTest2, 1),
                    (decimal)Math.Round(m_MonExternalAnalogSignalConfigParameters.SigSettlingTimeAnalogTest3, 1),
                    (decimal)Math.Round(m_MonExternalAnalogSignalConfigParameters.SigSettlingTimeAnalogTest4, 1),
                    (decimal)Math.Round(m_MonExternalAnalogSignalConfigParameters.SigSettlingTimeAnalogMux, 1),
                    (decimal)Math.Round(m_MonExternalAnalogSignalConfigParameters.SigSettlingTimeAnalogVSense, 1),
                    (decimal)m_MonExternalAnalogSignalConfigParameters.SigMinThresholdAnalogTest1,
                    (decimal)m_MonExternalAnalogSignalConfigParameters.SigMinThresholdAnalogTest2,
                    (decimal)m_MonExternalAnalogSignalConfigParameters.SigMinThresholdAnalogTest3,
                    (decimal)m_MonExternalAnalogSignalConfigParameters.SigMinThresholdAnalogTest4,
                    (decimal)m_MonExternalAnalogSignalConfigParameters.SigMinThresholdAnalogMux,
                    (decimal)m_MonExternalAnalogSignalConfigParameters.SigMinThresholdAnalogVSense,
                    (decimal)m_MonExternalAnalogSignalConfigParameters.SigMaxThresholdAnalogTest1,
                    (decimal)m_MonExternalAnalogSignalConfigParameters.SigMaxThresholdAnalogTest2,
                    (decimal)m_MonExternalAnalogSignalConfigParameters.SigMaxThresholdAnalogTest3,
                    (decimal)m_MonExternalAnalogSignalConfigParameters.SigMaxThresholdAnalogTest4,
                    (decimal)m_MonExternalAnalogSignalConfigParameters.SigMaxThresholdAnalogMux,
                    (decimal)m_MonExternalAnalogSignalConfigParameters.SigMaxThresholdAnalogVSense
                });
                m_GuiManager.RecordLog(6, full_command3);
            }
            uint g_RadarDeviceId = GlobalRef.g_RadarDeviceId;
            num = Imports.RadarLinkImpl_RfExtAnaSignalsMonConfig(GlobalRef.g_RadarDeviceId, data);
            if ((num == 0 && ((GlobalRef.g_CasCadeDeviceSpiConnect & 1U) == 1U || (GlobalRef.g_CasCadeDeviceSpiConnect & 2U) == 2U || (GlobalRef.g_CasCadeDeviceSpiConnect & 4U) == 4U || (GlobalRef.g_CasCadeDeviceSpiConnect & 8U) == 8U)) || GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
            {
                string full_command4 = string.Format("Status: Passed", new object[0]);
                m_GuiManager.RecordLog(6, full_command4);
                for (int i = 0; i < 4; i++)
                {
                    if (jsonConfigInProgress)
                    {
                        break;
                    }
                    if (((ulong)g_RadarDeviceId & (ulong)(1L << (i & 31))) != 0UL)
                    {
                        int mmwaveDevIndex = getMmwaveDevIndex(i);
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].monitoringConfig.rlExtAnaSignalsMonConf_t.reportMode = (int)ExtAnalogSigMonConfigurationParam.ReportingMode;
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].monitoringConfig.rlExtAnaSignalsMonConf_t.signalInpEnables = "0x" + ExtAnalogSigMonConfigurationParam.SignalInputEnables.ToString("X");
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].monitoringConfig.rlExtAnaSignalsMonConf_t.signalBuffEnables = "0x" + ExtAnalogSigMonConfigurationParam.SignalBufferEnables.ToString("X");
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].monitoringConfig.rlExtAnaSignalsMonConf_t.signalSettlingTime[0] = (double)((byte)m_MonExternalAnalogSignalConfigParameters.SigSettlingTimeAnalogTest1);
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].monitoringConfig.rlExtAnaSignalsMonConf_t.signalSettlingTime[1] = (double)((byte)m_MonExternalAnalogSignalConfigParameters.SigSettlingTimeAnalogTest2);
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].monitoringConfig.rlExtAnaSignalsMonConf_t.signalSettlingTime[2] = (double)((byte)m_MonExternalAnalogSignalConfigParameters.SigSettlingTimeAnalogTest3);
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].monitoringConfig.rlExtAnaSignalsMonConf_t.signalSettlingTime[3] = (double)((byte)m_MonExternalAnalogSignalConfigParameters.SigSettlingTimeAnalogTest4);
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].monitoringConfig.rlExtAnaSignalsMonConf_t.signalSettlingTime[4] = (double)((byte)m_MonExternalAnalogSignalConfigParameters.SigSettlingTimeAnalogMux);
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].monitoringConfig.rlExtAnaSignalsMonConf_t.signalSettlingTime[5] = (double)((byte)m_MonExternalAnalogSignalConfigParameters.SigSettlingTimeAnalogVSense);
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].monitoringConfig.rlExtAnaSignalsMonConf_t.signalThresh[0] = (double)((byte)m_MonExternalAnalogSignalConfigParameters.SigMinThresholdAnalogTest1);
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].monitoringConfig.rlExtAnaSignalsMonConf_t.signalThresh[1] = (double)((byte)m_MonExternalAnalogSignalConfigParameters.SigMinThresholdAnalogTest2);
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].monitoringConfig.rlExtAnaSignalsMonConf_t.signalThresh[2] = (double)((byte)m_MonExternalAnalogSignalConfigParameters.SigMinThresholdAnalogTest3);
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].monitoringConfig.rlExtAnaSignalsMonConf_t.signalThresh[3] = (double)((byte)m_MonExternalAnalogSignalConfigParameters.SigMinThresholdAnalogTest4);
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].monitoringConfig.rlExtAnaSignalsMonConf_t.signalThresh[4] = (double)((byte)m_MonExternalAnalogSignalConfigParameters.SigMinThresholdAnalogMux);
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].monitoringConfig.rlExtAnaSignalsMonConf_t.signalThresh[5] = (double)((byte)m_MonExternalAnalogSignalConfigParameters.SigMinThresholdAnalogVSense);
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].monitoringConfig.rlExtAnaSignalsMonConf_t.signalThresh[6] = (double)((byte)m_MonExternalAnalogSignalConfigParameters.SigMaxThresholdAnalogTest1);
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].monitoringConfig.rlExtAnaSignalsMonConf_t.signalThresh[7] = (double)((byte)m_MonExternalAnalogSignalConfigParameters.SigMaxThresholdAnalogTest2);
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].monitoringConfig.rlExtAnaSignalsMonConf_t.signalThresh[8] = (double)((byte)m_MonExternalAnalogSignalConfigParameters.SigMaxThresholdAnalogTest3);
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].monitoringConfig.rlExtAnaSignalsMonConf_t.signalThresh[9] = (double)((byte)m_MonExternalAnalogSignalConfigParameters.SigMaxThresholdAnalogTest4);
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].monitoringConfig.rlExtAnaSignalsMonConf_t.signalThresh[10] = (double)((byte)m_MonExternalAnalogSignalConfigParameters.SigMaxThresholdAnalogMux);
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].monitoringConfig.rlExtAnaSignalsMonConf_t.signalThresh[11] = (double)((byte)m_MonExternalAnalogSignalConfigParameters.SigMaxThresholdAnalogVSense);
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].monitoringConfig.rlExtAnaSignalsMonConf_t.isConfigured = 1;
                    }
                }
            }
            else
            {
                string msg = string.Format("Status: Failed, Error Type: {0}", new object[]
                {
                    GetErrorType(num)
                });
                GlobalRef.LuaWrapper.PrintError(msg);
            }
            if (GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
            {
                if (iRs232ConnectDisconnect_impl() == 0 && !GlobalRef.g_NtvRS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
                {
                    m_GuiManager.DllOps.iConnect(1U, 0U);
                    string full_command5 = string.Format("Debug Port Reconnected!", new object[0]);
                    m_GuiManager.RecordLog(9, full_command5);
                    ScriptOps.KeepTrying(2000, new Func<bool>(spare_read));
                }
            }
            else if (GlobalRef.g_CasCadeDeviceSpiConnect == 0U)
            {
                string full_command6 = string.Format("Error Occurred in Port open close", new object[0]);
                m_GuiManager.RecordLog(9, full_command6);
            }
            return num;
        }

        private int iSetInternalTx1AnalogSignalsMonConfig_Impl(bool is_starting_op, bool is_ending_op)
        {
            ScriptOps.IntTx1AnalogSigMonConfigurationParam.ProfileIndex = 0;
            ScriptOps.IntTx1AnalogSigMonConfigurationParam.ReportingMode = 0;
            ScriptOps.IntTx1AnalogSigMonConfigurationParam.Reserved = 0;
            ScriptOps.IntTx1AnalogSigMonConfigurationParam.Reserved2 = 0U;
            ScriptOps.IntTx2AnalogSigMonConfigurationParam.ProfileIndex = 0;
            ScriptOps.IntTx2AnalogSigMonConfigurationParam.ReportingMode = 0;
            ScriptOps.IntTx2AnalogSigMonConfigurationParam.Reserved = 0;
            ScriptOps.IntTx2AnalogSigMonConfigurationParam.Reserved2 = 0U;
            ScriptOps.IntTx3AnalogSigMonConfigurationParam.ProfileIndex = 0;
            ScriptOps.IntTx3AnalogSigMonConfigurationParam.ReportingMode = 0;
            ScriptOps.IntTx3AnalogSigMonConfigurationParam.Reserved = 0;
            ScriptOps.IntTx3AnalogSigMonConfigurationParam.Reserved2 = 0U;
            ScriptOps.IntTx1AnalogSigMonConfigurationParam.ProfileIndex = (byte)m_MonInternalTx1AnalogSignalConfigParameters.ProfileIndex;
            ScriptOps.IntTx1AnalogSigMonConfigurationParam.ReportingMode = (byte)m_MonInternalTx1AnalogSignalConfigParameters.ReportingMode;
            ScriptOps.IntTx1AnalogSigMonConfigurationParam.Reserved = 0;
            ScriptOps.IntTx1AnalogSigMonConfigurationParam.Reserved2 = 0U;
            IntPtr pTX1IntAnalogSigMonitoringConfigurationData = GCHandle.Alloc(ScriptOps.IntTx1AnalogSigMonConfigurationParam, GCHandleType.Pinned).AddrOfPinnedObject();
            GCHandle.Alloc(ScriptOps.IntTx2AnalogSigMonConfigurationParam, GCHandleType.Pinned).AddrOfPinnedObject();
            GCHandle.Alloc(ScriptOps.IntTx3AnalogSigMonConfigurationParam, GCHandleType.Pinned).AddrOfPinnedObject();
            ScriptOps.Tx1Tx2Tx3IntAnalogSigMonitoringConfigurationParam.pTX1IntAnalogSigMonitoringConfigurationData = pTX1IntAnalogSigMonitoringConfigurationData;
            ScriptOps.Tx1Tx2Tx3IntAnalogSigMonitoringConfigurationParam.pTX2IntAnalogSigMonitoringConfigurationData = IntPtr.Zero;
            ScriptOps.Tx1Tx2Tx3IntAnalogSigMonitoringConfigurationParam.pTX3IntAnalogSigMonitoringConfigurationData = IntPtr.Zero;
            IntPtr data = GCHandle.Alloc(ScriptOps.Tx1Tx2Tx3IntAnalogSigMonitoringConfigurationParam, GCHandleType.Pinned).AddrOfPinnedObject();
            int num;
            if (GlobalRef.g_NtvRS232Connect[(int)GlobalRef.g_RadarDeviceIndex] && GlobalRef.g_CasCadeDeviceSpiConnect == 0U)
            {
                num = m_TsWrapper.Calling_WriteAddr_Single(4294959848U, 1U);
                if (m_GuiManager.DllOps.itempDisconnect(false) == 0)
                {
                    string full_command = string.Format("Debug Port Disconnected", new object[0]);
                    m_GuiManager.RecordLog(0, full_command);
                    if (!GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
                    {
                        iRs232ConnectDisconnect_impl();
                    }
                }
            }
            if (m_RadarDeviceModeConfigParams.NumberOfRadarDevicesDetected <= 1)
            {
                string full_command2 = string.Format("ar1.SetRfTx0IntAnaSignalsMonConfig({0}, {1})", new object[]
                {
                    m_MonInternalTx1AnalogSignalConfigParameters.ProfileIndex,
                    m_MonInternalTx1AnalogSignalConfigParameters.ReportingMode
                });
                m_GuiManager.RecordLog(6, full_command2);
            }
            else
            {
                string full_command3 = string.Format("ar1.SetRfTx0IntAnaSignalsMonConfig_mult({0}, {1}, {2})", new object[]
                {
                    GlobalRef.g_RadarDeviceId,
                    m_MonInternalTx1AnalogSignalConfigParameters.ProfileIndex,
                    m_MonInternalTx1AnalogSignalConfigParameters.ReportingMode
                });
                m_GuiManager.RecordLog(6, full_command3);
            }
            uint g_RadarDeviceId = GlobalRef.g_RadarDeviceId;
            num = Imports.RadarLinkImpl_RfTxIntAnaSignalsMonConfig((byte)GlobalRef.g_RadarDeviceId, data);
            if ((num == 0 && ((GlobalRef.g_CasCadeDeviceSpiConnect & 1U) == 1U || (GlobalRef.g_CasCadeDeviceSpiConnect & 2U) == 2U || (GlobalRef.g_CasCadeDeviceSpiConnect & 4U) == 4U || (GlobalRef.g_CasCadeDeviceSpiConnect & 8U) == 8U)) || GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
            {
                string full_command4 = string.Format("Status: Passed", new object[0]);
                m_GuiManager.RecordLog(6, full_command4);
                for (int i = 0; i < 4; i++)
                {
                    if (jsonConfigInProgress)
                    {
                        break;
                    }
                    if (((ulong)g_RadarDeviceId & (ulong)(1L << (i & 31))) != 0UL)
                    {
                        int mmwaveDevIndex = getMmwaveDevIndex(i);
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].monitoringConfig.rlAllTxIntAnaSignalsMonConf_t.tx0IntAnaSgnlMonCfg.profileIndx = (int)ScriptOps.IntTx1AnalogSigMonConfigurationParam.ProfileIndex;
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].monitoringConfig.rlAllTxIntAnaSignalsMonConf_t.tx0IntAnaSgnlMonCfg.reportMode = (int)ScriptOps.IntTx1AnalogSigMonConfigurationParam.ReportingMode;
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].monitoringConfig.rlAllTxIntAnaSignalsMonConf_t.isConfigured = 1;
                    }
                }
            }
            else
            {
                string msg = string.Format("Status: Failed, Error Type: {0}", new object[]
                {
                    GetErrorType(num)
                });
                GlobalRef.LuaWrapper.PrintError(msg);
            }
            if (GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
            {
                if (iRs232ConnectDisconnect_impl() == 0 && !GlobalRef.g_NtvRS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
                {
                    m_GuiManager.DllOps.iConnect(1U, 0U);
                    string full_command5 = string.Format("Debug Port Reconnected!", new object[0]);
                    m_GuiManager.RecordLog(9, full_command5);
                    ScriptOps.KeepTrying(2000, new Func<bool>(spare_read));
                }
            }
            else if (GlobalRef.g_CasCadeDeviceSpiConnect == 0U)
            {
                string full_command6 = string.Format("Error Occurred in Port open close", new object[0]);
                m_GuiManager.RecordLog(9, full_command6);
            }
            return num;
        }

        private int iSetInternalTx2AnalogSignalsMonConfig_Impl(bool is_starting_op, bool is_ending_op)
        {
            ScriptOps.IntTx1AnalogSigMonConfigurationParam.ProfileIndex = 0;
            ScriptOps.IntTx1AnalogSigMonConfigurationParam.ReportingMode = 0;
            ScriptOps.IntTx1AnalogSigMonConfigurationParam.Reserved = 0;
            ScriptOps.IntTx1AnalogSigMonConfigurationParam.Reserved2 = 0U;
            ScriptOps.IntTx2AnalogSigMonConfigurationParam.ProfileIndex = 0;
            ScriptOps.IntTx2AnalogSigMonConfigurationParam.ReportingMode = 0;
            ScriptOps.IntTx2AnalogSigMonConfigurationParam.Reserved = 0;
            ScriptOps.IntTx2AnalogSigMonConfigurationParam.Reserved2 = 0U;
            ScriptOps.IntTx3AnalogSigMonConfigurationParam.ProfileIndex = 0;
            ScriptOps.IntTx3AnalogSigMonConfigurationParam.ReportingMode = 0;
            ScriptOps.IntTx3AnalogSigMonConfigurationParam.Reserved = 0;
            ScriptOps.IntTx3AnalogSigMonConfigurationParam.Reserved2 = 0U;
            ScriptOps.IntTx2AnalogSigMonConfigurationParam.ProfileIndex = (byte)m_MonInternalTx2AnalogSignalConfigParameters.ProfileIndex;
            ScriptOps.IntTx2AnalogSigMonConfigurationParam.ReportingMode = (byte)m_MonInternalTx2AnalogSignalConfigParameters.ReportingMode;
            ScriptOps.IntTx2AnalogSigMonConfigurationParam.Reserved = 0;
            ScriptOps.IntTx2AnalogSigMonConfigurationParam.Reserved2 = 0U;
            GCHandle.Alloc(ScriptOps.IntTx1AnalogSigMonConfigurationParam, GCHandleType.Pinned).AddrOfPinnedObject();
            IntPtr pTX2IntAnalogSigMonitoringConfigurationData = GCHandle.Alloc(ScriptOps.IntTx2AnalogSigMonConfigurationParam, GCHandleType.Pinned).AddrOfPinnedObject();
            GCHandle.Alloc(ScriptOps.IntTx3AnalogSigMonConfigurationParam, GCHandleType.Pinned).AddrOfPinnedObject();
            ScriptOps.Tx1Tx2Tx3IntAnalogSigMonitoringConfigurationParam.pTX1IntAnalogSigMonitoringConfigurationData = IntPtr.Zero;
            ScriptOps.Tx1Tx2Tx3IntAnalogSigMonitoringConfigurationParam.pTX2IntAnalogSigMonitoringConfigurationData = pTX2IntAnalogSigMonitoringConfigurationData;
            ScriptOps.Tx1Tx2Tx3IntAnalogSigMonitoringConfigurationParam.pTX3IntAnalogSigMonitoringConfigurationData = IntPtr.Zero;
            IntPtr data = GCHandle.Alloc(ScriptOps.Tx1Tx2Tx3IntAnalogSigMonitoringConfigurationParam, GCHandleType.Pinned).AddrOfPinnedObject();
            int num;
            if (GlobalRef.g_NtvRS232Connect[(int)GlobalRef.g_RadarDeviceIndex] && GlobalRef.g_CasCadeDeviceSpiConnect == 0U)
            {
                num = m_TsWrapper.Calling_WriteAddr_Single(4294959848U, 1U);
                if (m_GuiManager.DllOps.itempDisconnect(false) == 0)
                {
                    string full_command = string.Format("Debug Port Disconnected", new object[0]);
                    m_GuiManager.RecordLog(0, full_command);
                    if (!GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
                    {
                        iRs232ConnectDisconnect_impl();
                    }
                }
            }
            if (m_RadarDeviceModeConfigParams.NumberOfRadarDevicesDetected <= 1)
            {
                string full_command2 = string.Format("ar1.SetRfTx1IntAnaSignalsMonConfig({0}, {1})", new object[]
                {
                    m_MonInternalTx2AnalogSignalConfigParameters.ProfileIndex,
                    m_MonInternalTx2AnalogSignalConfigParameters.ReportingMode
                });
                m_GuiManager.RecordLog(6, full_command2);
            }
            else
            {
                string full_command3 = string.Format("ar1.SetRfTx1IntAnaSignalsMonConfig_mult({0}, {1}, {2})", new object[]
                {
                    GlobalRef.g_RadarDeviceId,
                    m_MonInternalTx2AnalogSignalConfigParameters.ProfileIndex,
                    m_MonInternalTx2AnalogSignalConfigParameters.ReportingMode
                });
                m_GuiManager.RecordLog(6, full_command3);
            }
            uint g_RadarDeviceId = GlobalRef.g_RadarDeviceId;
            num = Imports.RadarLinkImpl_RfTxIntAnaSignalsMonConfig((byte)GlobalRef.g_RadarDeviceId, data);
            if ((num == 0 && ((GlobalRef.g_CasCadeDeviceSpiConnect & 1U) == 1U || (GlobalRef.g_CasCadeDeviceSpiConnect & 2U) == 2U || (GlobalRef.g_CasCadeDeviceSpiConnect & 4U) == 4U || (GlobalRef.g_CasCadeDeviceSpiConnect & 8U) == 8U)) || GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
            {
                string full_command4 = string.Format("Status: Passed", new object[0]);
                m_GuiManager.RecordLog(6, full_command4);
                for (int i = 0; i < 4; i++)
                {
                    if (jsonConfigInProgress)
                    {
                        break;
                    }
                    if (((ulong)g_RadarDeviceId & (ulong)(1L << (i & 31))) != 0UL)
                    {
                        int mmwaveDevIndex = getMmwaveDevIndex(i);
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].monitoringConfig.rlAllTxIntAnaSignalsMonConf_t.tx1IntAnaSgnlMonCfg.profileIndx = (int)ScriptOps.IntTx2AnalogSigMonConfigurationParam.ProfileIndex;
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].monitoringConfig.rlAllTxIntAnaSignalsMonConf_t.tx1IntAnaSgnlMonCfg.reportMode = (int)ScriptOps.IntTx2AnalogSigMonConfigurationParam.ReportingMode;
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].monitoringConfig.rlAllTxIntAnaSignalsMonConf_t.isConfigured = 1;
                    }
                }
            }
            else
            {
                string msg = string.Format("Status: Failed, Error Type: {0}", new object[]
                {
                    GetErrorType(num)
                });
                GlobalRef.LuaWrapper.PrintError(msg);
            }
            if (GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
            {
                if (iRs232ConnectDisconnect_impl() == 0 && !GlobalRef.g_NtvRS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
                {
                    m_GuiManager.DllOps.iConnect(1U, 0U);
                    string full_command5 = string.Format("Debug Port Reconnected!", new object[0]);
                    m_GuiManager.RecordLog(9, full_command5);
                    ScriptOps.KeepTrying(2000, new Func<bool>(spare_read));
                }
            }
            else if (GlobalRef.g_CasCadeDeviceSpiConnect == 0U)
            {
                string full_command6 = string.Format("Error Occurred in Port open close", new object[0]);
                m_GuiManager.RecordLog(9, full_command6);
            }
            return num;
        }

        private int iSetInternalTx3AnalogSignalsMonConfig_Impl(bool is_starting_op, bool is_ending_op)
        {
            ScriptOps.IntTx1AnalogSigMonConfigurationParam.ProfileIndex = 0;
            ScriptOps.IntTx1AnalogSigMonConfigurationParam.ReportingMode = 0;
            ScriptOps.IntTx1AnalogSigMonConfigurationParam.Reserved = 0;
            ScriptOps.IntTx1AnalogSigMonConfigurationParam.Reserved2 = 0U;
            ScriptOps.IntTx2AnalogSigMonConfigurationParam.ProfileIndex = 0;
            ScriptOps.IntTx2AnalogSigMonConfigurationParam.ReportingMode = 0;
            ScriptOps.IntTx2AnalogSigMonConfigurationParam.Reserved = 0;
            ScriptOps.IntTx2AnalogSigMonConfigurationParam.Reserved2 = 0U;
            ScriptOps.IntTx3AnalogSigMonConfigurationParam.ProfileIndex = 0;
            ScriptOps.IntTx3AnalogSigMonConfigurationParam.ReportingMode = 0;
            ScriptOps.IntTx3AnalogSigMonConfigurationParam.Reserved = 0;
            ScriptOps.IntTx3AnalogSigMonConfigurationParam.Reserved2 = 0U;
            ScriptOps.IntTx3AnalogSigMonConfigurationParam.ProfileIndex = (byte)m_MonInternalTx3AnalogSignalConfigParameters.ProfileIndex;
            ScriptOps.IntTx3AnalogSigMonConfigurationParam.ReportingMode = (byte)m_MonInternalTx3AnalogSignalConfigParameters.ReportingMode;
            ScriptOps.IntTx3AnalogSigMonConfigurationParam.Reserved = 0;
            ScriptOps.IntTx3AnalogSigMonConfigurationParam.Reserved2 = 0U;
            GCHandle.Alloc(ScriptOps.IntTx1AnalogSigMonConfigurationParam, GCHandleType.Pinned).AddrOfPinnedObject();
            GCHandle.Alloc(ScriptOps.IntTx2AnalogSigMonConfigurationParam, GCHandleType.Pinned).AddrOfPinnedObject();
            IntPtr pTX3IntAnalogSigMonitoringConfigurationData = GCHandle.Alloc(ScriptOps.IntTx3AnalogSigMonConfigurationParam, GCHandleType.Pinned).AddrOfPinnedObject();
            ScriptOps.Tx1Tx2Tx3IntAnalogSigMonitoringConfigurationParam.pTX1IntAnalogSigMonitoringConfigurationData = IntPtr.Zero;
            ScriptOps.Tx1Tx2Tx3IntAnalogSigMonitoringConfigurationParam.pTX2IntAnalogSigMonitoringConfigurationData = IntPtr.Zero;
            ScriptOps.Tx1Tx2Tx3IntAnalogSigMonitoringConfigurationParam.pTX3IntAnalogSigMonitoringConfigurationData = pTX3IntAnalogSigMonitoringConfigurationData;
            IntPtr data = GCHandle.Alloc(ScriptOps.Tx1Tx2Tx3IntAnalogSigMonitoringConfigurationParam, GCHandleType.Pinned).AddrOfPinnedObject();
            int num;
            if (GlobalRef.g_NtvRS232Connect[(int)GlobalRef.g_RadarDeviceIndex] && GlobalRef.g_CasCadeDeviceSpiConnect == 0U)
            {
                num = m_TsWrapper.Calling_WriteAddr_Single(4294959848U, 1U);
                if (m_GuiManager.DllOps.itempDisconnect(false) == 0)
                {
                    string full_command = string.Format("Debug Port Disconnected", new object[0]);
                    m_GuiManager.RecordLog(0, full_command);
                    if (!GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
                    {
                        iRs232ConnectDisconnect_impl();
                    }
                }
            }
            if (m_RadarDeviceModeConfigParams.NumberOfRadarDevicesDetected <= 1)
            {
                string full_command2 = string.Format("ar1.SetRfTx2IntAnaSignalsMonConfig({0}, {1})", new object[]
                {
                    m_MonInternalTx3AnalogSignalConfigParameters.ProfileIndex,
                    m_MonInternalTx3AnalogSignalConfigParameters.ReportingMode
                });
                m_GuiManager.RecordLog(6, full_command2);
            }
            else
            {
                string full_command3 = string.Format("ar1.SetRfTx2IntAnaSignalsMonConfig_mult({0}, {1}, {2})", new object[]
                {
                    GlobalRef.g_RadarDeviceId,
                    m_MonInternalTx3AnalogSignalConfigParameters.ProfileIndex,
                    m_MonInternalTx3AnalogSignalConfigParameters.ReportingMode
                });
                m_GuiManager.RecordLog(6, full_command3);
            }
            uint g_RadarDeviceId = GlobalRef.g_RadarDeviceId;
            num = Imports.RadarLinkImpl_RfTxIntAnaSignalsMonConfig((byte)GlobalRef.g_RadarDeviceId, data);
            if ((num == 0 && ((GlobalRef.g_CasCadeDeviceSpiConnect & 1U) == 1U || (GlobalRef.g_CasCadeDeviceSpiConnect & 2U) == 2U || (GlobalRef.g_CasCadeDeviceSpiConnect & 4U) == 4U || (GlobalRef.g_CasCadeDeviceSpiConnect & 8U) == 8U)) || GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
            {
                string full_command4 = string.Format("Status: Passed", new object[0]);
                m_GuiManager.RecordLog(6, full_command4);
                for (int i = 0; i < 4; i++)
                {
                    if (jsonConfigInProgress)
                    {
                        break;
                    }
                    if (((ulong)g_RadarDeviceId & (ulong)(1L << (i & 31))) != 0UL)
                    {
                        int mmwaveDevIndex = getMmwaveDevIndex(i);
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].monitoringConfig.rlAllTxIntAnaSignalsMonConf_t.tx2IntAnaSgnlMonCfg.profileIndx = (int)ScriptOps.IntTx3AnalogSigMonConfigurationParam.ProfileIndex;
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].monitoringConfig.rlAllTxIntAnaSignalsMonConf_t.tx2IntAnaSgnlMonCfg.reportMode = (int)ScriptOps.IntTx3AnalogSigMonConfigurationParam.ReportingMode;
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].monitoringConfig.rlAllTxIntAnaSignalsMonConf_t.isConfigured = 1;
                    }
                }
            }
            else
            {
                string msg = string.Format("Status: Failed, Error Type: {0}", new object[]
                {
                    GetErrorType(num)
                });
                GlobalRef.LuaWrapper.PrintError(msg);
            }
            if (GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
            {
                if (iRs232ConnectDisconnect_impl() == 0 && !GlobalRef.g_NtvRS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
                {
                    m_GuiManager.DllOps.iConnect(1U, 0U);
                    string full_command5 = string.Format("Debug Port Reconnected!", new object[0]);
                    m_GuiManager.RecordLog(9, full_command5);
                    ScriptOps.KeepTrying(2000, new Func<bool>(spare_read));
                }
            }
            else if (GlobalRef.g_CasCadeDeviceSpiConnect == 0U)
            {
                string full_command6 = string.Format("Error Occurred in Port open close", new object[0]);
                m_GuiManager.RecordLog(9, full_command6);
            }
            return num;
        }

        private int iSetInternalRXAnalogSignalsMonConfig_Impl(bool is_starting_op, bool is_ending_op)
        {
            IntRxAnalogSigMonConfigurationParam.ProfileIndex = (byte)m_MonInternalRxAnalogSignalConfigParameters.ProfileIndex;
            IntRxAnalogSigMonConfigurationParam.ReportingMode = (byte)m_MonInternalRxAnalogSignalConfigParameters.ReportingMode;
            IntRxAnalogSigMonConfigurationParam.Reserved = 0;
            IntRxAnalogSigMonConfigurationParam.Reserved2 = 0U;
            IntPtr data = GCHandle.Alloc(IntRxAnalogSigMonConfigurationParam, GCHandleType.Pinned).AddrOfPinnedObject();
            int num;
            if (GlobalRef.g_NtvRS232Connect[(int)GlobalRef.g_RadarDeviceIndex] && GlobalRef.g_CasCadeDeviceSpiConnect == 0U)
            {
                num = m_TsWrapper.Calling_WriteAddr_Single(4294959848U, 1U);
                if (m_GuiManager.DllOps.itempDisconnect(false) == 0)
                {
                    string full_command = string.Format("Debug Port Disconnected", new object[0]);
                    m_GuiManager.RecordLog(0, full_command);
                    if (!GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
                    {
                        iRs232ConnectDisconnect_impl();
                    }
                }
            }
            if (m_RadarDeviceModeConfigParams.NumberOfRadarDevicesDetected <= 1)
            {
                string full_command2 = string.Format("ar1.SetRfRxIntAnaSignalsMonConfig({0}, {1})", new object[]
                {
                    m_MonInternalRxAnalogSignalConfigParameters.ProfileIndex,
                    m_MonInternalRxAnalogSignalConfigParameters.ReportingMode
                });
                m_GuiManager.RecordLog(6, full_command2);
            }
            else
            {
                string full_command3 = string.Format("ar1.SetRfRxIntAnaSignalsMonConfig_mult({0}, {1}, {2})", new object[]
                {
                    GlobalRef.g_RadarDeviceId,
                    m_MonInternalRxAnalogSignalConfigParameters.ProfileIndex,
                    m_MonInternalRxAnalogSignalConfigParameters.ReportingMode
                });
                m_GuiManager.RecordLog(6, full_command3);
            }
            uint g_RadarDeviceId = GlobalRef.g_RadarDeviceId;
            num = Imports.RadarLinkImpl_RfRxIntAnaSignalsMonConfig(GlobalRef.g_RadarDeviceId, data);
            if ((num == 0 && ((GlobalRef.g_CasCadeDeviceSpiConnect & 1U) == 1U || (GlobalRef.g_CasCadeDeviceSpiConnect & 2U) == 2U || (GlobalRef.g_CasCadeDeviceSpiConnect & 4U) == 4U || (GlobalRef.g_CasCadeDeviceSpiConnect & 8U) == 8U)) || GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
            {
                string full_command4 = string.Format("Status: Passed", new object[0]);
                m_GuiManager.RecordLog(6, full_command4);
                for (int i = 0; i < 4; i++)
                {
                    if (jsonConfigInProgress)
                    {
                        break;
                    }
                    if (((ulong)g_RadarDeviceId & (ulong)(1L << (i & 31))) != 0UL)
                    {
                        int mmwaveDevIndex = getMmwaveDevIndex(i);
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].monitoringConfig.rlRxIntAnaSignalsMonConf_t.profileIndx = (int)IntRxAnalogSigMonConfigurationParam.ProfileIndex;
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].monitoringConfig.rlRxIntAnaSignalsMonConf_t.reportMode = (int)IntRxAnalogSigMonConfigurationParam.ReportingMode;
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].monitoringConfig.rlRxIntAnaSignalsMonConf_t.isConfigured = 1;
                    }
                }
            }
            else
            {
                string msg = string.Format("Status: Failed, Error Type: {0}", new object[]
                {
                    GetErrorType(num)
                });
                GlobalRef.LuaWrapper.PrintError(msg);
            }
            if (GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
            {
                if (iRs232ConnectDisconnect_impl() == 0 && !GlobalRef.g_NtvRS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
                {
                    m_GuiManager.DllOps.iConnect(1U, 0U);
                    string full_command5 = string.Format("Debug Port Reconnected!", new object[0]);
                    m_GuiManager.RecordLog(9, full_command5);
                    ScriptOps.KeepTrying(2000, new Func<bool>(spare_read));
                }
            }
            else if (GlobalRef.g_CasCadeDeviceSpiConnect == 0U)
            {
                string full_command6 = string.Format("Error Occurred in Port open close", new object[0]);
                m_GuiManager.RecordLog(9, full_command6);
            }
            return num;
        }

        private int iSetInternalPMCLKLOAnalogSignalsMonConfig_Impl(bool is_starting_op, bool is_ending_op)
        {
            IntPMCLKLOAnalogSigMonConfigurationParam.ProfileIndex = m_MonInternalPMCLKLOAnalogSignalConfigParameters.ProfileIndex;
            IntPMCLKLOAnalogSigMonConfigurationParam.ReportingMode = m_MonInternalPMCLKLOAnalogSignalConfigParameters.ReportingMode;
            IntPMCLKLOAnalogSigMonConfigurationParam.Sync20GSigSelect = m_MonInternalPMCLKLOAnalogSignalConfigParameters.Sync20GSigSelect;
            IntPMCLKLOAnalogSigMonConfigurationParam.Sync20GMinThreshold = m_MonInternalPMCLKLOAnalogSignalConfigParameters.Sync20GMinThreshold;
            IntPMCLKLOAnalogSigMonConfigurationParam.Sync20GMaxThreshold = m_MonInternalPMCLKLOAnalogSignalConfigParameters.Sync20GMaxThreshold;
            IntPMCLKLOAnalogSigMonConfigurationParam.Reserved1 = 0;
            IntPMCLKLOAnalogSigMonConfigurationParam.Reserved2 = 0;
            IntPtr data = GCHandle.Alloc(IntPMCLKLOAnalogSigMonConfigurationParam, GCHandleType.Pinned).AddrOfPinnedObject();
            int num;
            if (GlobalRef.g_NtvRS232Connect[(int)GlobalRef.g_RadarDeviceIndex] && GlobalRef.g_CasCadeDeviceSpiConnect == 0U)
            {
                num = m_TsWrapper.Calling_WriteAddr_Single(4294959848U, 1U);
                if (m_GuiManager.DllOps.itempDisconnect(false) == 0)
                {
                    string full_command = string.Format("Debug Port Disconnected", new object[0]);
                    m_GuiManager.RecordLog(0, full_command);
                    if (!GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
                    {
                        iRs232ConnectDisconnect_impl();
                    }
                }
            }
            if (m_RadarDeviceModeConfigParams.NumberOfRadarDevicesDetected <= 1)
            {
                string full_command2 = string.Format("ar1.SetRfPmClkLoIntAnaSignalsMonConfig({0}, {1})", new object[]
                {
                    (int)m_MonInternalPMCLKLOAnalogSignalConfigParameters.ProfileIndex | (int)m_MonInternalPMCLKLOAnalogSignalConfigParameters.Sync20GSigSelect << 8 | (int)m_MonInternalPMCLKLOAnalogSignalConfigParameters.Sync20GMinThreshold << 16,
                    (int)m_MonInternalPMCLKLOAnalogSignalConfigParameters.ReportingMode | (int)m_MonInternalPMCLKLOAnalogSignalConfigParameters.Sync20GMaxThreshold << 8
                });
                m_GuiManager.RecordLog(6, full_command2);
            }
            else
            {
                string full_command3 = string.Format("ar1.SetRfPmClkLoIntAnaSignalsMonConfig_mult({0}, {1}, {2})", new object[]
                {
                    GlobalRef.g_RadarDeviceId,
                    (int)m_MonInternalPMCLKLOAnalogSignalConfigParameters.ProfileIndex | (int)m_MonInternalPMCLKLOAnalogSignalConfigParameters.Sync20GSigSelect << 8 | (int)m_MonInternalPMCLKLOAnalogSignalConfigParameters.Sync20GMinThreshold << 16,
                    (int)m_MonInternalPMCLKLOAnalogSignalConfigParameters.ReportingMode | (int)m_MonInternalPMCLKLOAnalogSignalConfigParameters.Sync20GMaxThreshold << 8
                });
                m_GuiManager.RecordLog(6, full_command3);
            }
            uint g_RadarDeviceId = GlobalRef.g_RadarDeviceId;
            num = Imports.RadarLinkImpl_RfPmClkLoIntAnaSignalsMonConfig(GlobalRef.g_RadarDeviceId, data);
            if ((num == 0 && ((GlobalRef.g_CasCadeDeviceSpiConnect & 1U) == 1U || (GlobalRef.g_CasCadeDeviceSpiConnect & 2U) == 2U || (GlobalRef.g_CasCadeDeviceSpiConnect & 4U) == 4U || (GlobalRef.g_CasCadeDeviceSpiConnect & 8U) == 8U)) || GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
            {
                string full_command4 = string.Format("Status: Passed", new object[0]);
                m_GuiManager.RecordLog(6, full_command4);
                for (int i = 0; i < 4; i++)
                {
                    if (jsonConfigInProgress)
                    {
                        break;
                    }
                    if (((ulong)g_RadarDeviceId & (ulong)(1L << (i & 31))) != 0UL)
                    {
                        int mmwaveDevIndex = getMmwaveDevIndex(i);
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].monitoringConfig.rlPmClkLoIntAnaSignalsMonConf_t.profileIndx = (int)IntPMCLKLOAnalogSigMonConfigurationParam.ProfileIndex;
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].monitoringConfig.rlPmClkLoIntAnaSignalsMonConf_t.reportMode = (int)IntPMCLKLOAnalogSigMonConfigurationParam.ReportingMode;
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].monitoringConfig.rlPmClkLoIntAnaSignalsMonConf_t.isConfigured = 1;
                    }
                }
            }
            else
            {
                string msg = string.Format("Status: Failed, Error Type: {0}", new object[]
                {
                    GetErrorType(num)
                });
                GlobalRef.LuaWrapper.PrintError(msg);
            }
            if (GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex] && iRs232ConnectDisconnect_impl() == 0 && !GlobalRef.g_NtvRS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
            {
                m_GuiManager.DllOps.iConnect(1U, 0U);
                string full_command5 = string.Format("Debug Port Reconnected!", new object[0]);
                m_GuiManager.RecordLog(9, full_command5);
                ScriptOps.KeepTrying(2000, new Func<bool>(spare_read));
            }
            return num;
        }

        private int iSetInternalGPADCAnalogSignalsMonConfig_Impl(bool is_starting_op, bool is_ending_op)
        {
            IntGPADCAnalogSigMonConfigurationParam.ReportingMode = (byte)m_MonInternalGPADCAnalogSignalConfigParameters.ReportingMode;
            IntGPADCAnalogSigMonConfigurationParam.Reserved = 0;
            IntGPADCAnalogSigMonConfigurationParam.Reserved2 = 0;
            IntGPADCAnalogSigMonConfigurationParam.Reserved3 = 0U;
            IntPtr data = GCHandle.Alloc(IntGPADCAnalogSigMonConfigurationParam, GCHandleType.Pinned).AddrOfPinnedObject();
            int num;
            if (GlobalRef.g_NtvRS232Connect[(int)GlobalRef.g_RadarDeviceIndex] && GlobalRef.g_CasCadeDeviceSpiConnect == 0U)
            {
                num = m_TsWrapper.Calling_WriteAddr_Single(4294959848U, 1U);
                if (m_GuiManager.DllOps.itempDisconnect(false) == 0)
                {
                    string full_command = string.Format("Debug Port Disconnected", new object[0]);
                    m_GuiManager.RecordLog(0, full_command);
                    if (!GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
                    {
                        iRs232ConnectDisconnect_impl();
                    }
                }
            }
            if (m_RadarDeviceModeConfigParams.NumberOfRadarDevicesDetected <= 1)
            {
                string full_command2 = string.Format("ar1.SetRfGpadcIntAnaSignalsMonConfig({0})", new object[]
                {
                    m_MonInternalGPADCAnalogSignalConfigParameters.ReportingMode
                });
                m_GuiManager.RecordLog(6, full_command2);
            }
            else
            {
                string full_command3 = string.Format("ar1.SetRfGpadcIntAnaSignalsMonConfig_mult({0}, {1})", new object[]
                {
                    GlobalRef.g_RadarDeviceId,
                    m_MonInternalGPADCAnalogSignalConfigParameters.ReportingMode
                });
                m_GuiManager.RecordLog(6, full_command3);
            }
            uint g_RadarDeviceId = GlobalRef.g_RadarDeviceId;
            num = Imports.RadarLinkImpl_RfGpadcIntAnaSignalsMonConfig(GlobalRef.g_RadarDeviceId, data);
            if ((num == 0 && ((GlobalRef.g_CasCadeDeviceSpiConnect & 1U) == 1U || (GlobalRef.g_CasCadeDeviceSpiConnect & 2U) == 2U || (GlobalRef.g_CasCadeDeviceSpiConnect & 4U) == 4U || (GlobalRef.g_CasCadeDeviceSpiConnect & 8U) == 8U)) || GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
            {
                string full_command4 = string.Format("Status: Passed", new object[0]);
                m_GuiManager.RecordLog(6, full_command4);
                for (int i = 0; i < 4; i++)
                {
                    if (jsonConfigInProgress)
                    {
                        break;
                    }
                    if (((ulong)g_RadarDeviceId & (ulong)(1L << (i & 31))) != 0UL)
                    {
                        int mmwaveDevIndex = getMmwaveDevIndex(i);
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].monitoringConfig.rlGpadcIntAnaSignalsMonConf_t.reportMode = (int)IntGPADCAnalogSigMonConfigurationParam.ReportingMode;
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].monitoringConfig.rlGpadcIntAnaSignalsMonConf_t.isConfigured = 1;
                    }
                }
            }
            else
            {
                string msg = string.Format("Status: Failed, Error Type: {0}", new object[]
                {
                    GetErrorType(num)
                });
                GlobalRef.LuaWrapper.PrintError(msg);
            }
            if (GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
            {
                if (iRs232ConnectDisconnect_impl() == 0 && !GlobalRef.g_NtvRS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
                {
                    m_GuiManager.DllOps.iConnect(1U, 0U);
                    string full_command5 = string.Format("Debug Port Reconnected!", new object[0]);
                    m_GuiManager.RecordLog(9, full_command5);
                    ScriptOps.KeepTrying(2000, new Func<bool>(spare_read));
                }
            }
            else if (GlobalRef.g_CasCadeDeviceSpiConnect == 0U)
            {
                string full_command6 = string.Format("Error Occurred in Port open close", new object[0]);
                m_GuiManager.RecordLog(9, full_command6);
            }
            return num;
        }

        private int iSetTemperatureMonConfig_Impl(bool is_starting_op, bool is_ending_op)
        {
            TemperatureMonConfigurationParam.ReportingMode = (byte)m_MonTemperatureConfigParameters.ReportingMode;
            TemperatureMonConfigurationParam.Reserved = 0;
            TemperatureMonConfigurationParam.AnaTempThreshMin = m_MonTemperatureConfigParameters.AnaTempThreshMin;
            TemperatureMonConfigurationParam.AnaTempThreshMax = m_MonTemperatureConfigParameters.AnaTempThreshMax;
            TemperatureMonConfigurationParam.DigTempThreshMin = m_MonTemperatureConfigParameters.DigTempThreshMin;
            TemperatureMonConfigurationParam.DigTempThreshMax = m_MonTemperatureConfigParameters.DigTempThreshMax;
            TemperatureMonConfigurationParam.TempDiffThresh = m_MonTemperatureConfigParameters.TempDiffThresh;
            TemperatureMonConfigurationParam.Reserved2 = 0U;
            TemperatureMonConfigurationParam.Reserved3 = 0U;
            IntPtr data = GCHandle.Alloc(TemperatureMonConfigurationParam, GCHandleType.Pinned).AddrOfPinnedObject();
            int num;
            if (GlobalRef.g_NtvRS232Connect[(int)GlobalRef.g_RadarDeviceIndex] && GlobalRef.g_CasCadeDeviceSpiConnect == 0U)
            {
                num = m_TsWrapper.Calling_WriteAddr_Single(4294959848U, 1U);
                if (m_GuiManager.DllOps.itempDisconnect(false) == 0)
                {
                    string full_command = string.Format("Debug Port Disconnected", new object[0]);
                    m_GuiManager.RecordLog(0, full_command);
                    if (!GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
                    {
                        iRs232ConnectDisconnect_impl();
                    }
                }
            }
            if (m_RadarDeviceModeConfigParams.NumberOfRadarDevicesDetected <= 1)
            {
                string full_command2 = string.Format("ar1.SetRfTempMonConfig({0}, {1}, {2}, {3}, {4}, {5})", new object[]
                {
                    m_MonTemperatureConfigParameters.ReportingMode,
                    m_MonTemperatureConfigParameters.AnaTempThreshMin,
                    m_MonTemperatureConfigParameters.AnaTempThreshMax,
                    m_MonTemperatureConfigParameters.DigTempThreshMin,
                    m_MonTemperatureConfigParameters.DigTempThreshMax,
                    m_MonTemperatureConfigParameters.TempDiffThresh
                });
                m_GuiManager.RecordLog(6, full_command2);
            }
            else
            {
                string full_command3 = string.Format("ar1.SetRfTempMonConfig_mult({0}, {1}, {2}, {3}, {4}, {5}, {6})", new object[]
                {
                    GlobalRef.g_RadarDeviceId,
                    m_MonTemperatureConfigParameters.ReportingMode,
                    m_MonTemperatureConfigParameters.AnaTempThreshMin,
                    m_MonTemperatureConfigParameters.AnaTempThreshMax,
                    m_MonTemperatureConfigParameters.DigTempThreshMin,
                    m_MonTemperatureConfigParameters.DigTempThreshMax,
                    m_MonTemperatureConfigParameters.TempDiffThresh
                });
                m_GuiManager.RecordLog(6, full_command3);
            }
            uint g_RadarDeviceId = GlobalRef.g_RadarDeviceId;
            num = Imports.RadarLinkImpl_RfTempMonConfig(GlobalRef.g_RadarDeviceId, data);
            if ((num == 0 && ((GlobalRef.g_CasCadeDeviceSpiConnect & 1U) == 1U || (GlobalRef.g_CasCadeDeviceSpiConnect & 2U) == 2U || (GlobalRef.g_CasCadeDeviceSpiConnect & 4U) == 4U || (GlobalRef.g_CasCadeDeviceSpiConnect & 8U) == 8U)) || GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
            {
                string full_command4 = string.Format("Status: Passed", new object[0]);
                m_GuiManager.RecordLog(6, full_command4);
                for (int i = 0; i < 4; i++)
                {
                    if (jsonConfigInProgress)
                    {
                        break;
                    }
                    if (((ulong)g_RadarDeviceId & (ulong)(1L << (i & 31))) != 0UL)
                    {
                        int mmwaveDevIndex = getMmwaveDevIndex(i);
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].monitoringConfig.rlTempMonConf_t.reportMode = (int)TemperatureMonConfigurationParam.ReportingMode;
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].monitoringConfig.rlTempMonConf_t.anaTempThreshMin = (int)TemperatureMonConfigurationParam.AnaTempThreshMin;
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].monitoringConfig.rlTempMonConf_t.anaTempThreshMax = (int)TemperatureMonConfigurationParam.AnaTempThreshMax;
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].monitoringConfig.rlTempMonConf_t.digTempThreshMin = (int)TemperatureMonConfigurationParam.DigTempThreshMin;
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].monitoringConfig.rlTempMonConf_t.digTempThreshMax = (int)TemperatureMonConfigurationParam.DigTempThreshMax;
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].monitoringConfig.rlTempMonConf_t.tempDiffThresh = (int)TemperatureMonConfigurationParam.TempDiffThresh;
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].monitoringConfig.rlTempMonConf_t.isConfigured = 1;
                    }
                }
            }
            else
            {
                string msg = string.Format("Status: Failed, Error Type: {0}", new object[]
                {
                    GetErrorType(num)
                });
                GlobalRef.LuaWrapper.PrintError(msg);
            }
            if (GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
            {
                if (iRs232ConnectDisconnect_impl() == 0 && !GlobalRef.g_NtvRS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
                {
                    m_GuiManager.DllOps.iConnect(1U, 0U);
                    string full_command5 = string.Format("Debug Port Reconnected!", new object[0]);
                    m_GuiManager.RecordLog(9, full_command5);
                    ScriptOps.KeepTrying(2000, new Func<bool>(spare_read));
                }
            }
            else if (GlobalRef.g_CasCadeDeviceSpiConnect == 0U)
            {
                string full_command6 = string.Format("Error Occurred in Port open close", new object[0]);
                m_GuiManager.RecordLog(9, full_command6);
            }
            return num;
        }

        private int iSetTxGainTemperatureLUTConfig_Impl(bool is_starting_op, bool is_ending_op)
        {
            TxGainTempLutConfigurationParam.ProfileIndex = (byte)m_TxGainTempLUTConfigParameters.ProfileIndex;
            TxGainTempLutConfigurationParam.Reserved = 0;
            TxGainTempLutConfigurationParam.Tx1GainCodeTempLessThanNeg30 = (byte)m_TxGainTempLUTConfigParameters.Tx1GainCodeTempLessThanNeg30;
            TxGainTempLutConfigurationParam.Tx1GainCodeTempNeg30ToNeg20 = (byte)m_TxGainTempLUTConfigParameters.Tx1GainCodeTempNeg30ToNeg20;
            TxGainTempLutConfigurationParam.Tx1GainCodeTempNeg20ToNeg10 = (byte)m_TxGainTempLUTConfigParameters.Tx1GainCodeTempNeg20ToNeg10;
            TxGainTempLutConfigurationParam.Tx1GainCodeTempNeg10To0 = (byte)m_TxGainTempLUTConfigParameters.Tx1GainCodeTempNeg10To0;
            TxGainTempLutConfigurationParam.Tx1GainCodeTemp0To10 = (byte)m_TxGainTempLUTConfigParameters.Tx1GainCodeTemp0To10;
            TxGainTempLutConfigurationParam.Tx1GainCodeTemp10To20 = (byte)m_TxGainTempLUTConfigParameters.Tx1GainCodeTemp10To20;
            TxGainTempLutConfigurationParam.Tx1GainCodeTemp20To30 = (byte)m_TxGainTempLUTConfigParameters.Tx1GainCodeTemp20To30;
            TxGainTempLutConfigurationParam.Tx1GainCodeTemp30To40 = (byte)m_TxGainTempLUTConfigParameters.Tx1GainCodeTemp30To40;
            TxGainTempLutConfigurationParam.Tx1GainCodeTemp40To50 = (byte)m_TxGainTempLUTConfigParameters.Tx1GainCodeTemp40To50;
            TxGainTempLutConfigurationParam.Tx1GainCodeTemp50To60 = (byte)m_TxGainTempLUTConfigParameters.Tx1GainCodeTemp50To60;
            TxGainTempLutConfigurationParam.Tx1GainCodeTemp60To70 = (byte)m_TxGainTempLUTConfigParameters.Tx1GainCodeTemp60To70;
            TxGainTempLutConfigurationParam.Tx1GainCodeTemp70To80 = (byte)m_TxGainTempLUTConfigParameters.Tx1GainCodeTemp70To80;
            TxGainTempLutConfigurationParam.Tx1GainCodeTemp80To90 = (byte)m_TxGainTempLUTConfigParameters.Tx1GainCodeTemp80To90;
            TxGainTempLutConfigurationParam.Tx1GainCodeTemp90To100 = (byte)m_TxGainTempLUTConfigParameters.Tx1GainCodeTemp90To100;
            TxGainTempLutConfigurationParam.Tx1GainCodeTemp100To110 = (byte)m_TxGainTempLUTConfigParameters.Tx1GainCodeTemp100To110;
            TxGainTempLutConfigurationParam.Tx1GainCodeTemp110To120 = (byte)m_TxGainTempLUTConfigParameters.Tx1GainCodeTemp110To120;
            TxGainTempLutConfigurationParam.Tx1GainCodeTemp120To130 = (byte)m_TxGainTempLUTConfigParameters.Tx1GainCodeTemp120To130;
            TxGainTempLutConfigurationParam.Tx1GainCodeTemp130To140 = (byte)m_TxGainTempLUTConfigParameters.Tx1GainCodeTemp130To140;
            TxGainTempLutConfigurationParam.Tx1GainCodeTempMoreThan140 = (byte)m_TxGainTempLUTConfigParameters.Tx1GainCodeTempMoreThan140;
            TxGainTempLutConfigurationParam.Tx2GainCodeTempLessThanNeg30 = (byte)m_TxGainTempLUTConfigParameters.Tx2GainCodeTempLessThanNeg30;
            TxGainTempLutConfigurationParam.Tx2GainCodeTempNeg30ToNeg20 = (byte)m_TxGainTempLUTConfigParameters.Tx2GainCodeTempNeg30ToNeg20;
            TxGainTempLutConfigurationParam.Tx2GainCodeTempNeg20ToNeg10 = (byte)m_TxGainTempLUTConfigParameters.Tx2GainCodeTempNeg20ToNeg10;
            TxGainTempLutConfigurationParam.Tx2GainCodeTempNeg10To0 = (byte)m_TxGainTempLUTConfigParameters.Tx2GainCodeTempNeg10To0;
            TxGainTempLutConfigurationParam.Tx2GainCodeTemp0To10 = (byte)m_TxGainTempLUTConfigParameters.Tx2GainCodeTemp0To10;
            TxGainTempLutConfigurationParam.Tx2GainCodeTemp10To20 = (byte)m_TxGainTempLUTConfigParameters.Tx2GainCodeTemp10To20;
            TxGainTempLutConfigurationParam.Tx2GainCodeTemp20To30 = (byte)m_TxGainTempLUTConfigParameters.Tx2GainCodeTemp20To30;
            TxGainTempLutConfigurationParam.Tx2GainCodeTemp30To40 = (byte)m_TxGainTempLUTConfigParameters.Tx2GainCodeTemp30To40;
            TxGainTempLutConfigurationParam.Tx2GainCodeTemp40To50 = (byte)m_TxGainTempLUTConfigParameters.Tx2GainCodeTemp40To50;
            TxGainTempLutConfigurationParam.Tx2GainCodeTemp50To60 = (byte)m_TxGainTempLUTConfigParameters.Tx2GainCodeTemp50To60;
            TxGainTempLutConfigurationParam.Tx2GainCodeTemp60To70 = (byte)m_TxGainTempLUTConfigParameters.Tx2GainCodeTemp60To70;
            TxGainTempLutConfigurationParam.Tx2GainCodeTemp70To80 = (byte)m_TxGainTempLUTConfigParameters.Tx2GainCodeTemp70To80;
            TxGainTempLutConfigurationParam.Tx2GainCodeTemp80To90 = (byte)m_TxGainTempLUTConfigParameters.Tx2GainCodeTemp80To90;
            TxGainTempLutConfigurationParam.Tx2GainCodeTemp90To100 = (byte)m_TxGainTempLUTConfigParameters.Tx2GainCodeTemp90To100;
            TxGainTempLutConfigurationParam.Tx2GainCodeTemp100To110 = (byte)m_TxGainTempLUTConfigParameters.Tx2GainCodeTemp100To110;
            TxGainTempLutConfigurationParam.Tx2GainCodeTemp110To120 = (byte)m_TxGainTempLUTConfigParameters.Tx2GainCodeTemp110To120;
            TxGainTempLutConfigurationParam.Tx2GainCodeTemp120To130 = (byte)m_TxGainTempLUTConfigParameters.Tx2GainCodeTemp120To130;
            TxGainTempLutConfigurationParam.Tx2GainCodeTemp130To140 = (byte)m_TxGainTempLUTConfigParameters.Tx2GainCodeTemp130To140;
            TxGainTempLutConfigurationParam.Tx2GainCodeTempMoreThan140 = (byte)m_TxGainTempLUTConfigParameters.Tx2GainCodeTempMoreThan140;
            TxGainTempLutConfigurationParam.Tx3GainCodeTempLessThanNeg30 = (byte)m_TxGainTempLUTConfigParameters.Tx3GainCodeTempLessThanNeg30;
            TxGainTempLutConfigurationParam.Tx3GainCodeTempNeg30ToNeg20 = (byte)m_TxGainTempLUTConfigParameters.Tx3GainCodeTempNeg30ToNeg20;
            TxGainTempLutConfigurationParam.Tx3GainCodeTempNeg20ToNeg10 = (byte)m_TxGainTempLUTConfigParameters.Tx3GainCodeTempNeg20ToNeg10;
            TxGainTempLutConfigurationParam.Tx3GainCodeTempNeg10To0 = (byte)m_TxGainTempLUTConfigParameters.Tx3GainCodeTempNeg10To0;
            TxGainTempLutConfigurationParam.Tx3GainCodeTemp0To10 = (byte)m_TxGainTempLUTConfigParameters.Tx3GainCodeTemp0To10;
            TxGainTempLutConfigurationParam.Tx3GainCodeTemp10To20 = (byte)m_TxGainTempLUTConfigParameters.Tx3GainCodeTemp10To20;
            TxGainTempLutConfigurationParam.Tx3GainCodeTemp20To30 = (byte)m_TxGainTempLUTConfigParameters.Tx3GainCodeTemp20To30;
            TxGainTempLutConfigurationParam.Tx3GainCodeTemp30To40 = (byte)m_TxGainTempLUTConfigParameters.Tx3GainCodeTemp30To40;
            TxGainTempLutConfigurationParam.Tx3GainCodeTemp40To50 = (byte)m_TxGainTempLUTConfigParameters.Tx3GainCodeTemp40To50;
            TxGainTempLutConfigurationParam.Tx3GainCodeTemp50To60 = (byte)m_TxGainTempLUTConfigParameters.Tx3GainCodeTemp50To60;
            TxGainTempLutConfigurationParam.Tx3GainCodeTemp60To70 = (byte)m_TxGainTempLUTConfigParameters.Tx3GainCodeTemp60To70;
            TxGainTempLutConfigurationParam.Tx3GainCodeTemp70To80 = (byte)m_TxGainTempLUTConfigParameters.Tx3GainCodeTemp70To80;
            TxGainTempLutConfigurationParam.Tx3GainCodeTemp80To90 = (byte)m_TxGainTempLUTConfigParameters.Tx3GainCodeTemp80To90;
            TxGainTempLutConfigurationParam.Tx3GainCodeTemp90To100 = (byte)m_TxGainTempLUTConfigParameters.Tx3GainCodeTemp90To100;
            TxGainTempLutConfigurationParam.Tx3GainCodeTemp100To110 = (byte)m_TxGainTempLUTConfigParameters.Tx3GainCodeTemp100To110;
            TxGainTempLutConfigurationParam.Tx3GainCodeTemp110To120 = (byte)m_TxGainTempLUTConfigParameters.Tx3GainCodeTemp110To120;
            TxGainTempLutConfigurationParam.Tx3GainCodeTemp120To130 = (byte)m_TxGainTempLUTConfigParameters.Tx3GainCodeTemp120To130;
            TxGainTempLutConfigurationParam.Tx3GainCodeTemp130To140 = (byte)m_TxGainTempLUTConfigParameters.Tx3GainCodeTemp130To140;
            TxGainTempLutConfigurationParam.Tx3GainCodeTempMoreThan140 = (byte)m_TxGainTempLUTConfigParameters.Tx3GainCodeTempMoreThan140;
            TxGainTempLutConfigurationParam.Reserved2 = 0;
            IntPtr data = GCHandle.Alloc(TxGainTempLutConfigurationParam, GCHandleType.Pinned).AddrOfPinnedObject();
            int num;
            if (GlobalRef.g_NtvRS232Connect[(int)GlobalRef.g_RadarDeviceIndex] && GlobalRef.g_CasCadeDeviceSpiConnect == 0U)
            {
                num = m_TsWrapper.Calling_WriteAddr_Single(4294959848U, 1U);
                if (m_GuiManager.DllOps.itempDisconnect(false) == 0)
                {
                    string full_command = string.Format("Debug Port Disconnected", new object[0]);
                    m_GuiManager.RecordLog(0, full_command);
                    if (!GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
                    {
                        iRs232ConnectDisconnect_impl();
                    }
                }
            }
            if (m_RadarDeviceModeConfigParams.NumberOfRadarDevicesDetected <= 1)
            {
                string full_command2 = string.Format("ar1.TxGainTempLutSet({0}, {1}, {2}, {3}, {4}, {5}, {6}, {7}, {8}, {9}, {10}, {11}, {12}, {13}, {14}, {15}, {16}, {17}, {18}, {19}, {20}, {21}, {22}, {23}, {24}, {25}, {26}, {27}, {28}, {29}, {30}, {31}, {32}, {33}, {34}, {35}, {36}, {37}, {38}, {39}, {40}, {41}, {42}, {43}, {44}, {45}, {46}, {47}, {48}, {49}, {50}, {51}, {52}, {53}, {54}, {55}, {56}, {57})", new object[]
                {
                    m_TxGainTempLUTConfigParameters.ProfileIndex,
                    m_TxGainTempLUTConfigParameters.Tx1GainCodeTempLessThanNeg30,
                    m_TxGainTempLUTConfigParameters.Tx1GainCodeTempNeg30ToNeg20,
                    m_TxGainTempLUTConfigParameters.Tx1GainCodeTempNeg20ToNeg10,
                    m_TxGainTempLUTConfigParameters.Tx1GainCodeTempNeg10To0,
                    m_TxGainTempLUTConfigParameters.Tx1GainCodeTemp0To10,
                    m_TxGainTempLUTConfigParameters.Tx1GainCodeTemp10To20,
                    m_TxGainTempLUTConfigParameters.Tx1GainCodeTemp20To30,
                    m_TxGainTempLUTConfigParameters.Tx1GainCodeTemp30To40,
                    m_TxGainTempLUTConfigParameters.Tx1GainCodeTemp40To50,
                    m_TxGainTempLUTConfigParameters.Tx1GainCodeTemp50To60,
                    m_TxGainTempLUTConfigParameters.Tx1GainCodeTemp60To70,
                    m_TxGainTempLUTConfigParameters.Tx1GainCodeTemp70To80,
                    m_TxGainTempLUTConfigParameters.Tx1GainCodeTemp80To90,
                    m_TxGainTempLUTConfigParameters.Tx1GainCodeTemp90To100,
                    m_TxGainTempLUTConfigParameters.Tx1GainCodeTemp100To110,
                    m_TxGainTempLUTConfigParameters.Tx1GainCodeTemp110To120,
                    m_TxGainTempLUTConfigParameters.Tx1GainCodeTemp120To130,
                    m_TxGainTempLUTConfigParameters.Tx1GainCodeTemp130To140,
                    m_TxGainTempLUTConfigParameters.Tx1GainCodeTempMoreThan140,
                    m_TxGainTempLUTConfigParameters.Tx2GainCodeTempLessThanNeg30,
                    m_TxGainTempLUTConfigParameters.Tx2GainCodeTempNeg30ToNeg20,
                    m_TxGainTempLUTConfigParameters.Tx2GainCodeTempNeg20ToNeg10,
                    m_TxGainTempLUTConfigParameters.Tx2GainCodeTempNeg10To0,
                    m_TxGainTempLUTConfigParameters.Tx2GainCodeTemp0To10,
                    m_TxGainTempLUTConfigParameters.Tx2GainCodeTemp10To20,
                    m_TxGainTempLUTConfigParameters.Tx2GainCodeTemp20To30,
                    m_TxGainTempLUTConfigParameters.Tx2GainCodeTemp30To40,
                    m_TxGainTempLUTConfigParameters.Tx2GainCodeTemp40To50,
                    m_TxGainTempLUTConfigParameters.Tx2GainCodeTemp50To60,
                    m_TxGainTempLUTConfigParameters.Tx2GainCodeTemp60To70,
                    m_TxGainTempLUTConfigParameters.Tx2GainCodeTemp70To80,
                    m_TxGainTempLUTConfigParameters.Tx2GainCodeTemp80To90,
                    m_TxGainTempLUTConfigParameters.Tx2GainCodeTemp90To100,
                    m_TxGainTempLUTConfigParameters.Tx2GainCodeTemp100To110,
                    m_TxGainTempLUTConfigParameters.Tx2GainCodeTemp110To120,
                    m_TxGainTempLUTConfigParameters.Tx2GainCodeTemp120To130,
                    m_TxGainTempLUTConfigParameters.Tx2GainCodeTemp130To140,
                    m_TxGainTempLUTConfigParameters.Tx2GainCodeTempMoreThan140,
                    m_TxGainTempLUTConfigParameters.Tx3GainCodeTempLessThanNeg30,
                    m_TxGainTempLUTConfigParameters.Tx3GainCodeTempNeg30ToNeg20,
                    m_TxGainTempLUTConfigParameters.Tx3GainCodeTempNeg20ToNeg10,
                    m_TxGainTempLUTConfigParameters.Tx3GainCodeTempNeg10To0,
                    m_TxGainTempLUTConfigParameters.Tx3GainCodeTemp0To10,
                    m_TxGainTempLUTConfigParameters.Tx3GainCodeTemp10To20,
                    m_TxGainTempLUTConfigParameters.Tx3GainCodeTemp20To30,
                    m_TxGainTempLUTConfigParameters.Tx3GainCodeTemp30To40,
                    m_TxGainTempLUTConfigParameters.Tx3GainCodeTemp40To50,
                    m_TxGainTempLUTConfigParameters.Tx3GainCodeTemp50To60,
                    m_TxGainTempLUTConfigParameters.Tx3GainCodeTemp60To70,
                    m_TxGainTempLUTConfigParameters.Tx3GainCodeTemp70To80,
                    m_TxGainTempLUTConfigParameters.Tx3GainCodeTemp80To90,
                    m_TxGainTempLUTConfigParameters.Tx3GainCodeTemp90To100,
                    m_TxGainTempLUTConfigParameters.Tx3GainCodeTemp100To110,
                    m_TxGainTempLUTConfigParameters.Tx3GainCodeTemp110To120,
                    m_TxGainTempLUTConfigParameters.Tx3GainCodeTemp120To130,
                    m_TxGainTempLUTConfigParameters.Tx3GainCodeTemp130To140,
                    m_TxGainTempLUTConfigParameters.Tx3GainCodeTempMoreThan140
                });
                m_GuiManager.RecordLog(6, full_command2);
            }
            else
            {
                string full_command3 = string.Format("ar1.TxGainTempLutSet_mult({0}, {1}, {2}, {3}, {4}, {5}, {6}, {7}, {8}, {9}, {10}, {11}, {12}, {13}, {14}, {15}, {16}, {17}, {18}, {19}, {20}, {21}, {22}, {23}, {24}, {25}, {26}, {27}, {28}, {29}, {30}, {31}, {32}, {33}, {34}, {35}, {36}, {37}, {38}, {39}, {40}, {41}, {42}, {43}, {44}, {45}, {46}, {47}, {48}, {49}, {50}, {51}, {52}, {53}, {54}, {55}, {56}, {57}, {58})", new object[]
                {
                    GlobalRef.g_RadarDeviceId,
                    m_TxGainTempLUTConfigParameters.ProfileIndex,
                    m_TxGainTempLUTConfigParameters.Tx1GainCodeTempLessThanNeg30,
                    m_TxGainTempLUTConfigParameters.Tx1GainCodeTempNeg30ToNeg20,
                    m_TxGainTempLUTConfigParameters.Tx1GainCodeTempNeg20ToNeg10,
                    m_TxGainTempLUTConfigParameters.Tx1GainCodeTempNeg10To0,
                    m_TxGainTempLUTConfigParameters.Tx1GainCodeTemp0To10,
                    m_TxGainTempLUTConfigParameters.Tx1GainCodeTemp10To20,
                    m_TxGainTempLUTConfigParameters.Tx1GainCodeTemp20To30,
                    m_TxGainTempLUTConfigParameters.Tx1GainCodeTemp30To40,
                    m_TxGainTempLUTConfigParameters.Tx1GainCodeTemp40To50,
                    m_TxGainTempLUTConfigParameters.Tx1GainCodeTemp50To60,
                    m_TxGainTempLUTConfigParameters.Tx1GainCodeTemp60To70,
                    m_TxGainTempLUTConfigParameters.Tx1GainCodeTemp70To80,
                    m_TxGainTempLUTConfigParameters.Tx1GainCodeTemp80To90,
                    m_TxGainTempLUTConfigParameters.Tx1GainCodeTemp90To100,
                    m_TxGainTempLUTConfigParameters.Tx1GainCodeTemp100To110,
                    m_TxGainTempLUTConfigParameters.Tx1GainCodeTemp110To120,
                    m_TxGainTempLUTConfigParameters.Tx1GainCodeTemp120To130,
                    m_TxGainTempLUTConfigParameters.Tx1GainCodeTemp130To140,
                    m_TxGainTempLUTConfigParameters.Tx1GainCodeTempMoreThan140,
                    m_TxGainTempLUTConfigParameters.Tx2GainCodeTempLessThanNeg30,
                    m_TxGainTempLUTConfigParameters.Tx2GainCodeTempNeg30ToNeg20,
                    m_TxGainTempLUTConfigParameters.Tx2GainCodeTempNeg20ToNeg10,
                    m_TxGainTempLUTConfigParameters.Tx2GainCodeTempNeg10To0,
                    m_TxGainTempLUTConfigParameters.Tx2GainCodeTemp0To10,
                    m_TxGainTempLUTConfigParameters.Tx2GainCodeTemp10To20,
                    m_TxGainTempLUTConfigParameters.Tx2GainCodeTemp20To30,
                    m_TxGainTempLUTConfigParameters.Tx2GainCodeTemp30To40,
                    m_TxGainTempLUTConfigParameters.Tx2GainCodeTemp40To50,
                    m_TxGainTempLUTConfigParameters.Tx2GainCodeTemp50To60,
                    m_TxGainTempLUTConfigParameters.Tx2GainCodeTemp60To70,
                    m_TxGainTempLUTConfigParameters.Tx2GainCodeTemp70To80,
                    m_TxGainTempLUTConfigParameters.Tx2GainCodeTemp80To90,
                    m_TxGainTempLUTConfigParameters.Tx2GainCodeTemp90To100,
                    m_TxGainTempLUTConfigParameters.Tx2GainCodeTemp100To110,
                    m_TxGainTempLUTConfigParameters.Tx2GainCodeTemp110To120,
                    m_TxGainTempLUTConfigParameters.Tx2GainCodeTemp120To130,
                    m_TxGainTempLUTConfigParameters.Tx2GainCodeTemp130To140,
                    m_TxGainTempLUTConfigParameters.Tx2GainCodeTempMoreThan140,
                    m_TxGainTempLUTConfigParameters.Tx3GainCodeTempLessThanNeg30,
                    m_TxGainTempLUTConfigParameters.Tx3GainCodeTempNeg30ToNeg20,
                    m_TxGainTempLUTConfigParameters.Tx3GainCodeTempNeg20ToNeg10,
                    m_TxGainTempLUTConfigParameters.Tx3GainCodeTempNeg10To0,
                    m_TxGainTempLUTConfigParameters.Tx3GainCodeTemp0To10,
                    m_TxGainTempLUTConfigParameters.Tx3GainCodeTemp10To20,
                    m_TxGainTempLUTConfigParameters.Tx3GainCodeTemp20To30,
                    m_TxGainTempLUTConfigParameters.Tx3GainCodeTemp30To40,
                    m_TxGainTempLUTConfigParameters.Tx3GainCodeTemp40To50,
                    m_TxGainTempLUTConfigParameters.Tx3GainCodeTemp50To60,
                    m_TxGainTempLUTConfigParameters.Tx3GainCodeTemp60To70,
                    m_TxGainTempLUTConfigParameters.Tx3GainCodeTemp70To80,
                    m_TxGainTempLUTConfigParameters.Tx3GainCodeTemp80To90,
                    m_TxGainTempLUTConfigParameters.Tx3GainCodeTemp90To100,
                    m_TxGainTempLUTConfigParameters.Tx3GainCodeTemp100To110,
                    m_TxGainTempLUTConfigParameters.Tx3GainCodeTemp110To120,
                    m_TxGainTempLUTConfigParameters.Tx3GainCodeTemp120To130,
                    m_TxGainTempLUTConfigParameters.Tx3GainCodeTemp130To140,
                    m_TxGainTempLUTConfigParameters.Tx3GainCodeTempMoreThan140
                });
                m_GuiManager.RecordLog(6, full_command3);
            }
            num = Imports.RadarLinkImpl_TxGainTempLutSet((byte)GlobalRef.g_RadarDeviceId, data);
            if ((num == 0 && ((GlobalRef.g_CasCadeDeviceSpiConnect & 1U) == 1U || (GlobalRef.g_CasCadeDeviceSpiConnect & 2U) == 2U || (GlobalRef.g_CasCadeDeviceSpiConnect & 4U) == 4U || (GlobalRef.g_CasCadeDeviceSpiConnect & 8U) == 8U)) || GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
            {
                string full_command4 = string.Format("Status: Passed", new object[0]);
                m_GuiManager.RecordLog(6, full_command4);
            }
            else
            {
                string msg = string.Format("Status: Failed, Error Type: {0}", new object[]
                {
                    GetErrorType(num)
                });
                GlobalRef.LuaWrapper.PrintError(msg);
            }
            if (GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
            {
                if (iRs232ConnectDisconnect_impl() == 0 && !GlobalRef.g_NtvRS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
                {
                    m_GuiManager.DllOps.iConnect(1U, 0U);
                    string full_command5 = string.Format("Debug Port Reconnected!", new object[0]);
                    m_GuiManager.RecordLog(9, full_command5);
                    ScriptOps.KeepTrying(2000, new Func<bool>(spare_read));
                }
            }
            else if (GlobalRef.g_CasCadeDeviceSpiConnect == 0U)
            {
                string full_command6 = string.Format("Error Occurred in Port open close", new object[0]);
                m_GuiManager.RecordLog(9, full_command6);
            }
            return num;
        }

        private int iGetTxGainTemperatureLUTConfig_Impl(bool is_starting_op, bool is_ending_op)
        {
            TxGainTempLutGetConfigurationParam.ProfileIndex = (byte)m_TxGainTempLUTGetConfigParameters.ProfileIndex;
            TxGainTempLutGetConfigurationParam.Reserved = 0;
            TxGainTempLutGetConfigurationParam.Reserved2 = 0;
            IntPtr data = GCHandle.Alloc(TxGainTempLutGetConfigurationParam, GCHandleType.Pinned).AddrOfPinnedObject();
            GCHandle.Alloc(TxGainTempLutReportDataParam, GCHandleType.Pinned).AddrOfPinnedObject();
            int num;
            if (GlobalRef.g_NtvRS232Connect[(int)GlobalRef.g_RadarDeviceIndex] && GlobalRef.g_CasCadeDeviceSpiConnect == 0U)
            {
                num = m_TsWrapper.Calling_WriteAddr_Single(4294959848U, 1U);
                if (m_GuiManager.DllOps.itempDisconnect(false) == 0)
                {
                    string full_command = string.Format("Debug Port Disconnected", new object[0]);
                    m_GuiManager.RecordLog(0, full_command);
                    if (!GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
                    {
                        iRs232ConnectDisconnect_impl();
                    }
                }
            }
            if (m_RadarDeviceModeConfigParams.NumberOfRadarDevicesDetected <= 1)
            {
                string full_command2 = string.Format("ar1.TxGainTempLutGet({0})", new object[]
                {
                    m_TxGainTempLUTGetConfigParameters.ProfileIndex
                });
                m_GuiManager.RecordLog(6, full_command2);
            }
            else
            {
                string full_command3 = string.Format("ar1.TxGainTempLutGet_mult({0}, {1})", new object[]
                {
                    GlobalRef.g_RadarDeviceId,
                    m_TxGainTempLUTGetConfigParameters.ProfileIndex
                });
                m_GuiManager.RecordLog(6, full_command3);
            }
            num = Imports.rlTxGainTempLutGet((byte)GlobalRef.g_RadarDeviceId, data, out TxGainTempLutReportDataParam);
            ScriptOps.m_MainForm.TxRxGainTempLUTCfg.TxGainTempLutReportDataToGui(TxGainTempLutReportDataParam.ProfileIndex, TxGainTempLutReportDataParam.Tx1GainCodeTempLessThanNeg30, TxGainTempLutReportDataParam.Tx1GainCodeTempNeg30ToNeg20, TxGainTempLutReportDataParam.Tx1GainCodeTempNeg20ToNeg10, TxGainTempLutReportDataParam.Tx1GainCodeTempNeg10To0, TxGainTempLutReportDataParam.Tx1GainCodeTemp0To10, TxGainTempLutReportDataParam.Tx1GainCodeTemp10To20, TxGainTempLutReportDataParam.Tx1GainCodeTemp20To30, TxGainTempLutReportDataParam.Tx1GainCodeTemp30To40, TxGainTempLutReportDataParam.Tx1GainCodeTemp40To50, TxGainTempLutReportDataParam.Tx1GainCodeTemp50To60, TxGainTempLutReportDataParam.Tx1GainCodeTemp60To70, TxGainTempLutReportDataParam.Tx1GainCodeTemp70To80, TxGainTempLutReportDataParam.Tx1GainCodeTemp80To90, TxGainTempLutReportDataParam.Tx1GainCodeTemp90To100, TxGainTempLutReportDataParam.Tx1GainCodeTemp100To110, TxGainTempLutReportDataParam.Tx1GainCodeTemp110To120, TxGainTempLutReportDataParam.Tx1GainCodeTemp120To130, TxGainTempLutReportDataParam.Tx1GainCodeTemp130To140, TxGainTempLutReportDataParam.Tx1GainCodeTempMoreThan140, TxGainTempLutReportDataParam.Tx2GainCodeTempLessThanNeg30, TxGainTempLutReportDataParam.Tx2GainCodeTempNeg30ToNeg20, TxGainTempLutReportDataParam.Tx2GainCodeTempNeg20ToNeg10, TxGainTempLutReportDataParam.Tx2GainCodeTempNeg10To0, TxGainTempLutReportDataParam.Tx2GainCodeTemp0To10, TxGainTempLutReportDataParam.Tx2GainCodeTemp10To20, TxGainTempLutReportDataParam.Tx2GainCodeTemp20To30, TxGainTempLutReportDataParam.Tx2GainCodeTemp30To40, TxGainTempLutReportDataParam.Tx2GainCodeTemp40To50, TxGainTempLutReportDataParam.Tx2GainCodeTemp50To60, TxGainTempLutReportDataParam.Tx2GainCodeTemp60To70, TxGainTempLutReportDataParam.Tx2GainCodeTemp70To80, TxGainTempLutReportDataParam.Tx2GainCodeTemp80To90, TxGainTempLutReportDataParam.Tx2GainCodeTemp90To100, TxGainTempLutReportDataParam.Tx2GainCodeTemp100To110, TxGainTempLutReportDataParam.Tx2GainCodeTemp110To120, TxGainTempLutReportDataParam.Tx2GainCodeTemp120To130, TxGainTempLutReportDataParam.Tx2GainCodeTemp130To140, TxGainTempLutReportDataParam.Tx2GainCodeTempMoreThan140, TxGainTempLutReportDataParam.Tx3GainCodeTempLessThanNeg30, TxGainTempLutReportDataParam.Tx3GainCodeTempNeg30ToNeg20, TxGainTempLutReportDataParam.Tx3GainCodeTempNeg20ToNeg10, TxGainTempLutReportDataParam.Tx3GainCodeTempNeg10To0, TxGainTempLutReportDataParam.Tx3GainCodeTemp0To10, TxGainTempLutReportDataParam.Tx3GainCodeTemp10To20, TxGainTempLutReportDataParam.Tx3GainCodeTemp20To30, TxGainTempLutReportDataParam.Tx3GainCodeTemp30To40, TxGainTempLutReportDataParam.Tx3GainCodeTemp40To50, TxGainTempLutReportDataParam.Tx3GainCodeTemp50To60, TxGainTempLutReportDataParam.Tx3GainCodeTemp60To70, TxGainTempLutReportDataParam.Tx3GainCodeTemp70To80, TxGainTempLutReportDataParam.Tx3GainCodeTemp80To90, TxGainTempLutReportDataParam.Tx3GainCodeTemp90To100, TxGainTempLutReportDataParam.Tx3GainCodeTemp100To110, TxGainTempLutReportDataParam.Tx3GainCodeTemp110To120, TxGainTempLutReportDataParam.Tx3GainCodeTemp120To130, TxGainTempLutReportDataParam.Tx3GainCodeTemp130To140, TxGainTempLutReportDataParam.Tx3GainCodeTempMoreThan140);
            if ((num == 0 && ((GlobalRef.g_CasCadeDeviceSpiConnect & 1U) == 1U || (GlobalRef.g_CasCadeDeviceSpiConnect & 2U) == 2U || (GlobalRef.g_CasCadeDeviceSpiConnect & 4U) == 4U || (GlobalRef.g_CasCadeDeviceSpiConnect & 8U) == 8U)) || GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
            {
                string full_command4 = string.Format("Status: Passed", new object[0]);
                m_GuiManager.RecordLog(6, full_command4);
            }
            else
            {
                string full_command5 = string.Format("Status: Failed, Error Type: {0}", new object[]
                {
                    GetErrorType(num)
                });
                m_GuiManager.RecordLog(6, full_command5);
            }
            if (GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
            {
                if (iRs232ConnectDisconnect_impl() == 0 && !GlobalRef.g_NtvRS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
                {
                    m_GuiManager.DllOps.iConnect(1U, 0U);
                    string full_command6 = string.Format("Debug Port Reconnected!", new object[0]);
                    m_GuiManager.RecordLog(9, full_command6);
                    ScriptOps.KeepTrying(2000, new Func<bool>(spare_read));
                }
            }
            else if (GlobalRef.g_CasCadeDeviceSpiConnect == 0U)
            {
                string full_command7 = string.Format("Error Occurred in Port open close", new object[0]);
                m_GuiManager.RecordLog(9, full_command7);
            }
            return num;
        }

        private int iSetRxGainTemperatureLUTConfig_Impl(bool is_starting_op, bool is_ending_op)
        {
            RxGainTempLutConfigurationParam.ProfileIndex = (byte)m_RxGainTempLUTConfigParameters.ProfileIndex;
            RxGainTempLutConfigurationParam.Reserved = 0;
            RxGainTempLutConfigurationParam.Rx1GainCodeTempLessThanNeg30 = (byte)m_RxGainTempLUTConfigParameters.Rx1GainCodeTempLessThanNeg30;
            RxGainTempLutConfigurationParam.Rx1GainCodeTempNeg30ToNeg20 = (byte)m_RxGainTempLUTConfigParameters.Rx1GainCodeTempNeg30ToNeg20;
            RxGainTempLutConfigurationParam.Rx1GainCodeTempNeg20ToNeg10 = (byte)m_RxGainTempLUTConfigParameters.Rx1GainCodeTempNeg20ToNeg10;
            RxGainTempLutConfigurationParam.Rx1GainCodeTempNeg10To0 = (byte)m_RxGainTempLUTConfigParameters.Rx1GainCodeTempNeg10To0;
            RxGainTempLutConfigurationParam.Rx1GainCodeTemp0To10 = (byte)m_RxGainTempLUTConfigParameters.Rx1GainCodeTemp0To10;
            RxGainTempLutConfigurationParam.Rx1GainCodeTemp10To20 = (byte)m_RxGainTempLUTConfigParameters.Rx1GainCodeTemp10To20;
            RxGainTempLutConfigurationParam.Rx1GainCodeTemp20To30 = (byte)m_RxGainTempLUTConfigParameters.Rx1GainCodeTemp20To30;
            RxGainTempLutConfigurationParam.Rx1GainCodeTemp30To40 = (byte)m_RxGainTempLUTConfigParameters.Rx1GainCodeTemp30To40;
            RxGainTempLutConfigurationParam.Rx1GainCodeTemp40To50 = (byte)m_RxGainTempLUTConfigParameters.Rx1GainCodeTemp40To50;
            RxGainTempLutConfigurationParam.Rx1GainCodeTemp50To60 = (byte)m_RxGainTempLUTConfigParameters.Rx1GainCodeTemp50To60;
            RxGainTempLutConfigurationParam.Rx1GainCodeTemp60To70 = (byte)m_RxGainTempLUTConfigParameters.Rx1GainCodeTemp60To70;
            RxGainTempLutConfigurationParam.Rx1GainCodeTemp70To80 = (byte)m_RxGainTempLUTConfigParameters.Rx1GainCodeTemp70To80;
            RxGainTempLutConfigurationParam.Rx1GainCodeTemp80To90 = (byte)m_RxGainTempLUTConfigParameters.Rx1GainCodeTemp80To90;
            RxGainTempLutConfigurationParam.Rx1GainCodeTemp90To100 = (byte)m_RxGainTempLUTConfigParameters.Rx1GainCodeTemp90To100;
            RxGainTempLutConfigurationParam.Rx1GainCodeTemp100To110 = (byte)m_RxGainTempLUTConfigParameters.Rx1GainCodeTemp100To110;
            RxGainTempLutConfigurationParam.Rx1GainCodeTemp110To120 = (byte)m_RxGainTempLUTConfigParameters.Rx1GainCodeTemp110To120;
            RxGainTempLutConfigurationParam.Rx1GainCodeTemp120To130 = (byte)m_RxGainTempLUTConfigParameters.Rx1GainCodeTemp120To130;
            RxGainTempLutConfigurationParam.Rx1GainCodeTemp130To140 = (byte)m_RxGainTempLUTConfigParameters.Rx1GainCodeTemp130To140;
            RxGainTempLutConfigurationParam.Rx1GainCodeTempMoreThan140 = (byte)m_RxGainTempLUTConfigParameters.Rx1GainCodeTempMoreThan140;
            RxGainTempLutConfigurationParam.Reserved2 = 0;
            RxGainTempLutConfigurationParam.Reserved3 = 0;
            RxGainTempLutConfigurationParam.Reserved4 = 0;
            IntPtr data = GCHandle.Alloc(RxGainTempLutConfigurationParam, GCHandleType.Pinned).AddrOfPinnedObject();
            int num;
            if (GlobalRef.g_NtvRS232Connect[(int)GlobalRef.g_RadarDeviceIndex] && GlobalRef.g_CasCadeDeviceSpiConnect == 0U)
            {
                num = m_TsWrapper.Calling_WriteAddr_Single(4294959848U, 1U);
                if (m_GuiManager.DllOps.itempDisconnect(false) == 0)
                {
                    string full_command = string.Format("Debug Port Disconnected", new object[0]);
                    m_GuiManager.RecordLog(0, full_command);
                    if (!GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
                    {
                        iRs232ConnectDisconnect_impl();
                    }
                }
            }
            if (m_RadarDeviceModeConfigParams.NumberOfRadarDevicesDetected <= 1)
            {
                string full_command2 = string.Format("ar1.RxGainTempLutSet({0}, {1}, {2}, {3}, {4}, {5}, {6}, {7}, {8}, {9}, {10}, {11}, {12}, {13}, {14}, {15}, {16}, {17}, {18}, {19})", new object[]
                {
                    m_RxGainTempLUTConfigParameters.ProfileIndex,
                    m_RxGainTempLUTConfigParameters.Rx1GainCodeTempLessThanNeg30,
                    m_RxGainTempLUTConfigParameters.Rx1GainCodeTempNeg30ToNeg20,
                    m_RxGainTempLUTConfigParameters.Rx1GainCodeTempNeg20ToNeg10,
                    m_RxGainTempLUTConfigParameters.Rx1GainCodeTempNeg10To0,
                    m_RxGainTempLUTConfigParameters.Rx1GainCodeTemp0To10,
                    m_RxGainTempLUTConfigParameters.Rx1GainCodeTemp10To20,
                    m_RxGainTempLUTConfigParameters.Rx1GainCodeTemp20To30,
                    m_RxGainTempLUTConfigParameters.Rx1GainCodeTemp30To40,
                    m_RxGainTempLUTConfigParameters.Rx1GainCodeTemp40To50,
                    m_RxGainTempLUTConfigParameters.Rx1GainCodeTemp50To60,
                    m_RxGainTempLUTConfigParameters.Rx1GainCodeTemp60To70,
                    m_RxGainTempLUTConfigParameters.Rx1GainCodeTemp70To80,
                    m_RxGainTempLUTConfigParameters.Rx1GainCodeTemp80To90,
                    m_RxGainTempLUTConfigParameters.Rx1GainCodeTemp90To100,
                    m_RxGainTempLUTConfigParameters.Rx1GainCodeTemp100To110,
                    m_RxGainTempLUTConfigParameters.Rx1GainCodeTemp110To120,
                    m_RxGainTempLUTConfigParameters.Rx1GainCodeTemp120To130,
                    m_RxGainTempLUTConfigParameters.Rx1GainCodeTemp130To140,
                    m_RxGainTempLUTConfigParameters.Rx1GainCodeTempMoreThan140
                });
                m_GuiManager.RecordLog(6, full_command2);
            }
            else
            {
                string full_command3 = string.Format("ar1.RxGainTempLutSet_mult({0}, {1}, {2}, {3}, {4}, {5}, {6}, {7}, {8}, {9}, {10}, {11}, {12}, {13}, {14}, {15}, {16}, {17}, {18}, {19}, {20})", new object[]
                {
                    GlobalRef.g_RadarDeviceId,
                    m_RxGainTempLUTConfigParameters.ProfileIndex,
                    m_RxGainTempLUTConfigParameters.Rx1GainCodeTempLessThanNeg30,
                    m_RxGainTempLUTConfigParameters.Rx1GainCodeTempNeg30ToNeg20,
                    m_RxGainTempLUTConfigParameters.Rx1GainCodeTempNeg20ToNeg10,
                    m_RxGainTempLUTConfigParameters.Rx1GainCodeTempNeg10To0,
                    m_RxGainTempLUTConfigParameters.Rx1GainCodeTemp0To10,
                    m_RxGainTempLUTConfigParameters.Rx1GainCodeTemp10To20,
                    m_RxGainTempLUTConfigParameters.Rx1GainCodeTemp20To30,
                    m_RxGainTempLUTConfigParameters.Rx1GainCodeTemp30To40,
                    m_RxGainTempLUTConfigParameters.Rx1GainCodeTemp40To50,
                    m_RxGainTempLUTConfigParameters.Rx1GainCodeTemp50To60,
                    m_RxGainTempLUTConfigParameters.Rx1GainCodeTemp60To70,
                    m_RxGainTempLUTConfigParameters.Rx1GainCodeTemp70To80,
                    m_RxGainTempLUTConfigParameters.Rx1GainCodeTemp80To90,
                    m_RxGainTempLUTConfigParameters.Rx1GainCodeTemp90To100,
                    m_RxGainTempLUTConfigParameters.Rx1GainCodeTemp100To110,
                    m_RxGainTempLUTConfigParameters.Rx1GainCodeTemp110To120,
                    m_RxGainTempLUTConfigParameters.Rx1GainCodeTemp120To130,
                    m_RxGainTempLUTConfigParameters.Rx1GainCodeTemp130To140,
                    m_RxGainTempLUTConfigParameters.Rx1GainCodeTempMoreThan140
                });
                m_GuiManager.RecordLog(6, full_command3);
            }
            num = Imports.rlRxGainTempLutSet((byte)GlobalRef.g_RadarDeviceId, data);
            if ((num == 0 && ((GlobalRef.g_CasCadeDeviceSpiConnect & 1U) == 1U || (GlobalRef.g_CasCadeDeviceSpiConnect & 2U) == 2U || (GlobalRef.g_CasCadeDeviceSpiConnect & 4U) == 4U || (GlobalRef.g_CasCadeDeviceSpiConnect & 8U) == 8U)) || GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
            {
                string full_command4 = string.Format("Status: Passed", new object[0]);
                m_GuiManager.RecordLog(6, full_command4);
            }
            else
            {
                string msg = string.Format("Status: Failed, Error Type: {0}", new object[]
                {
                    GetErrorType(num)
                });
                GlobalRef.LuaWrapper.PrintError(msg);
            }
            if (GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
            {
                if (iRs232ConnectDisconnect_impl() == 0 && !GlobalRef.g_NtvRS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
                {
                    m_GuiManager.DllOps.iConnect(1U, 0U);
                    string full_command5 = string.Format("Debug Port Reconnected!", new object[0]);
                    m_GuiManager.RecordLog(9, full_command5);
                    ScriptOps.KeepTrying(2000, new Func<bool>(spare_read));
                }
            }
            else if (GlobalRef.g_CasCadeDeviceSpiConnect == 0U)
            {
                string full_command6 = string.Format("Error Occurred in Port open close", new object[0]);
                m_GuiManager.RecordLog(9, full_command6);
            }
            return num;
        }

        private int iGetRxGainTemperatureLUTConfig_Impl(bool is_starting_op, bool is_ending_op)
        {
            RxGainTempLutGetConfigurationParam.ProfileIndex = (byte)m_RxGainTempLUTGetConfigParameters.ProfileIndex;
            RxGainTempLutGetConfigurationParam.Reserved = 0;
            RxGainTempLutGetConfigurationParam.Reserved2 = 0;
            IntPtr data = GCHandle.Alloc(RxGainTempLutGetConfigurationParam, GCHandleType.Pinned).AddrOfPinnedObject();
            GCHandle.Alloc(RxGainTempLutReportDataParam, GCHandleType.Pinned).AddrOfPinnedObject();
            int num;
            if (GlobalRef.g_NtvRS232Connect[(int)GlobalRef.g_RadarDeviceIndex] && GlobalRef.g_CasCadeDeviceSpiConnect == 0U)
            {
                num = m_TsWrapper.Calling_WriteAddr_Single(4294959848U, 1U);
                if (m_GuiManager.DllOps.itempDisconnect(false) == 0)
                {
                    string full_command = string.Format("Debug Port Disconnected", new object[0]);
                    m_GuiManager.RecordLog(0, full_command);
                    if (!GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
                    {
                        iRs232ConnectDisconnect_impl();
                    }
                }
            }
            if (m_RadarDeviceModeConfigParams.NumberOfRadarDevicesDetected <= 1)
            {
                string full_command2 = string.Format("ar1.RxGainTempLutGet({0})", new object[]
                {
                    m_RxGainTempLUTGetConfigParameters.ProfileIndex
                });
                m_GuiManager.RecordLog(6, full_command2);
            }
            else
            {
                string full_command3 = string.Format("ar1.RxGainTempLutGet_mult({0}, {1})", new object[]
                {
                    GlobalRef.g_RadarDeviceId,
                    m_RxGainTempLUTGetConfigParameters.ProfileIndex
                });
                m_GuiManager.RecordLog(6, full_command3);
            }
            num = Imports.rlRxGainTempLutGet((byte)GlobalRef.g_RadarDeviceId, data, out RxGainTempLutReportDataParam);
            ScriptOps.m_MainForm.TxRxGainTempLUTCfg.RxGainTempLutReportDataToGui(RxGainTempLutReportDataParam.ProfileIndex, RxGainTempLutReportDataParam.Rx1GainCodeTempLessThanNeg30, RxGainTempLutReportDataParam.Rx1GainCodeTempNeg30ToNeg20, RxGainTempLutReportDataParam.Rx1GainCodeTempNeg20ToNeg10, RxGainTempLutReportDataParam.Rx1GainCodeTempNeg10To0, RxGainTempLutReportDataParam.Rx1GainCodeTemp0To10, RxGainTempLutReportDataParam.Rx1GainCodeTemp10To20, RxGainTempLutReportDataParam.Rx1GainCodeTemp20To30, RxGainTempLutReportDataParam.Rx1GainCodeTemp30To40, RxGainTempLutReportDataParam.Rx1GainCodeTemp40To50, RxGainTempLutReportDataParam.Rx1GainCodeTemp50To60, RxGainTempLutReportDataParam.Rx1GainCodeTemp60To70, RxGainTempLutReportDataParam.Rx1GainCodeTemp70To80, RxGainTempLutReportDataParam.Rx1GainCodeTemp80To90, RxGainTempLutReportDataParam.Rx1GainCodeTemp90To100, RxGainTempLutReportDataParam.Rx1GainCodeTemp100To110, RxGainTempLutReportDataParam.Rx1GainCodeTemp110To120, RxGainTempLutReportDataParam.Rx1GainCodeTemp120To130, RxGainTempLutReportDataParam.Rx1GainCodeTemp130To140, RxGainTempLutReportDataParam.Rx1GainCodeTempMoreThan140);
            if ((num == 0 && ((GlobalRef.g_CasCadeDeviceSpiConnect & 1U) == 1U || (GlobalRef.g_CasCadeDeviceSpiConnect & 2U) == 2U || (GlobalRef.g_CasCadeDeviceSpiConnect & 4U) == 4U || (GlobalRef.g_CasCadeDeviceSpiConnect & 8U) == 8U)) || GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
            {
                string full_command4 = string.Format("Status: Passed", new object[0]);
                m_GuiManager.RecordLog(6, full_command4);
            }
            else
            {
                string msg = string.Format("Status: Failed, Error Type: {0}", new object[]
                {
                    GetErrorType(num)
                });
                GlobalRef.LuaWrapper.PrintError(msg);
            }
            if (GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
            {
                if (iRs232ConnectDisconnect_impl() == 0 && !GlobalRef.g_NtvRS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
                {
                    m_GuiManager.DllOps.iConnect(1U, 0U);
                    string full_command5 = string.Format("Debug Port Reconnected!", new object[0]);
                    m_GuiManager.RecordLog(9, full_command5);
                    ScriptOps.KeepTrying(2000, new Func<bool>(spare_read));
                }
            }
            else if (GlobalRef.g_CasCadeDeviceSpiConnect == 0U)
            {
                string full_command6 = string.Format("Error Occurred in Port open close", new object[0]);
                m_GuiManager.RecordLog(9, full_command6);
            }
            return num;
        }

        private int iSetMonitoringRFEnablesConfig_Impl(bool is_starting_op, bool is_ending_op)
        {
            MonitoringRFEnablesConfigurationParam.AnaMonitoringEnables = (uint)(m_MonRFEnablesConfigParameters.TemperatureMon | (uint)m_MonRFEnablesConfigParameters.RxGainPhase << 1 | (uint)m_MonRFEnablesConfigParameters.RxNoise << 2 | (uint)m_MonRFEnablesConfigParameters.RxIFStage << 3 | (uint)m_MonRFEnablesConfigParameters.Tx1Power << 4 | (uint)m_MonRFEnablesConfigParameters.Tx2Power << 5 | (uint)m_MonRFEnablesConfigParameters.Tx3Power << 6 | (uint)m_MonRFEnablesConfigParameters.Tx1BallBreak << 7 | (uint)m_MonRFEnablesConfigParameters.Tx2BallBreak << 8 | (uint)m_MonRFEnablesConfigParameters.Tx3BallBreak << 9 | (uint)m_MonRFEnablesConfigParameters.TxGainPhase << 10 | (uint)m_MonRFEnablesConfigParameters.Tx1BPM << 11 | (uint)m_MonRFEnablesConfigParameters.Tx2BPM << 12 | (uint)m_MonRFEnablesConfigParameters.Tx3BPM << 13 | (uint)m_MonRFEnablesConfigParameters.SynthFrequency << 14 | (uint)m_MonRFEnablesConfigParameters.ExternalAnalogSignals << 15 | (uint)m_MonRFEnablesConfigParameters.InternalTX1Signals << 16 | (uint)m_MonRFEnablesConfigParameters.InternalTX2Signals << 17 | (uint)m_MonRFEnablesConfigParameters.InternalTX3Signals << 18 | (uint)m_MonRFEnablesConfigParameters.InternalRXSignal << 19 | (uint)m_MonRFEnablesConfigParameters.f0002fe << 20 | (uint)m_MonRFEnablesConfigParameters.f0002ff << 21 | (uint)m_MonRFEnablesConfigParameters.PLLControlVoltage << 22 | (uint)m_MonRFEnablesConfigParameters.DCCClockFreq << 23 | (uint)m_MonRFEnablesConfigParameters.f000300 << 24 | (uint)m_MonRFEnablesConfigParameters.RxSigImgBand << 25 | (uint)m_MonRFEnablesConfigParameters.RxMixerInputPower << 26 | (uint)m_MonRFEnablesConfigParameters.Reserved << 27);
            MonitoringRFEnablesConfigurationParam.Reserved = (uint)((int)m_MonRFEnablesConfigParameters.ApllLdoShortCircuit | (int)m_MonRFEnablesConfigParameters.VCOLdoShortCircuit << 1 | (int)m_MonRFEnablesConfigParameters.PALdoShortCircuit << 2);
            IntPtr data = GCHandle.Alloc(MonitoringRFEnablesConfigurationParam, GCHandleType.Pinned).AddrOfPinnedObject();
            int num;
            if (GlobalRef.g_NtvRS232Connect[(int)GlobalRef.g_RadarDeviceIndex] && GlobalRef.g_CasCadeDeviceSpiConnect == 0U)
            {
                num = m_TsWrapper.Calling_WriteAddr_Single(4294959848U, 1U);
                if (m_GuiManager.DllOps.itempDisconnect(false) == 0)
                {
                    string full_command = string.Format("Debug Port Disconnected", new object[0]);
                    m_GuiManager.RecordLog(0, full_command);
                    if (!GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
                    {
                        iRs232ConnectDisconnect_impl();
                    }
                }
            }
            if (m_RadarDeviceModeConfigParams.NumberOfRadarDevicesDetected <= 1)
            {
                string full_command2 = string.Format("ar1.SetRfAnaMonConfig(0x{0:X}, 0x{1:X})", new object[]
                {
                    MonitoringRFEnablesConfigurationParam.AnaMonitoringEnables,
                    MonitoringRFEnablesConfigurationParam.Reserved
                });
                m_GuiManager.RecordLog(6, full_command2);
            }
            else
            {
                string full_command3 = string.Format("ar1.SetRfAnaMonConfig_mult({0}, 0x{1:X}, 0x{2:X})", new object[]
                {
                    GlobalRef.g_RadarDeviceId,
                    MonitoringRFEnablesConfigurationParam.AnaMonitoringEnables,
                    MonitoringRFEnablesConfigurationParam.Reserved
                });
                m_GuiManager.RecordLog(6, full_command3);
            }
            uint g_RadarDeviceId = GlobalRef.g_RadarDeviceId;
            num = Imports.RadarLinkImpl_RfAnaMonConfig(GlobalRef.g_RadarDeviceId, data);
            if ((num == 0 && ((GlobalRef.g_CasCadeDeviceSpiConnect & 1U) == 1U || (GlobalRef.g_CasCadeDeviceSpiConnect & 2U) == 2U || (GlobalRef.g_CasCadeDeviceSpiConnect & 4U) == 4U || (GlobalRef.g_CasCadeDeviceSpiConnect & 8U) == 8U)) || GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
            {
                string full_command4 = string.Format("Status: Passed", new object[0]);
                m_GuiManager.RecordLog(6, full_command4);
                for (int i = 0; i < 4; i++)
                {
                    if (jsonConfigInProgress)
                    {
                        break;
                    }
                    if (((ulong)g_RadarDeviceId & (ulong)(1L << (i & 31))) != 0UL)
                    {
                        int mmwaveDevIndex = getMmwaveDevIndex(i);
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].monitoringConfig.rlMonAnaEnables_t.enMask = "0x" + MonitoringRFEnablesConfigurationParam.AnaMonitoringEnables.ToString("X");
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].monitoringConfig.rlMonAnaEnables_t.isConfigured = 1;
                    }
                }
            }
            else
            {
                string msg = string.Format("Status: Failed, Error Type: {0}", new object[]
                {
                    GetErrorType(num)
                });
                GlobalRef.LuaWrapper.PrintError(msg);
            }
            if (GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex] && iRs232ConnectDisconnect_impl() == 0 && !GlobalRef.g_NtvRS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
            {
                m_GuiManager.DllOps.iConnect(1U, 0U);
                string full_command5 = string.Format("Debug Port Reconnected!", new object[0]);
                m_GuiManager.RecordLog(9, full_command5);
                ScriptOps.KeepTrying(2000, new Func<bool>(spare_read));
            }
            return num;
        }

        private int iSetRFDigitalSysPeriodicMonConfig_Impl(bool is_starting_op, bool is_ending_op)
        {
            RFDigSysPeriodicConfigParametersParam.ReportingMode = (byte)m_RFDigitalSysPeriodicConfigParameters.ReportingMode;
            RFDigSysPeriodicConfigParametersParam.Reserved = 0;
            RFDigSysPeriodicConfigParametersParam.Reserved2 = 0;
            RFDigSysPeriodicConfigParametersParam.Reserved3 = 0;
            RFDigSysPeriodicConfigParametersParam.RFDigSysPeriodicMonEna = (uint)((byte)(m_RFDigitalSysPeriodicConfigParameters.PeriodicRegisterRead | m_RFDigitalSysPeriodicConfigParameters.ESMTest << 1 | m_RFDigitalSysPeriodicConfigParameters.DFESTC << 2 | m_RFDigitalSysPeriodicConfigParameters.FrameTimigTest << 3));
            RFDigSysPeriodicConfigParametersParam.Reserved4 = 0U;
            IntPtr data = GCHandle.Alloc(RFDigSysPeriodicConfigParametersParam, GCHandleType.Pinned).AddrOfPinnedObject();
            int num;
            if (GlobalRef.g_NtvRS232Connect[(int)GlobalRef.g_RadarDeviceIndex] && GlobalRef.g_CasCadeDeviceSpiConnect == 0U)
            {
                num = m_TsWrapper.Calling_WriteAddr_Single(4294959848U, 1U);
                if (m_GuiManager.DllOps.itempDisconnect(false) == 0)
                {
                    string full_command = string.Format("Debug Port Disconnected", new object[0]);
                    m_GuiManager.RecordLog(0, full_command);
                    if (!GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
                    {
                        iRs232ConnectDisconnect_impl();
                    }
                }
            }
            if (m_RadarDeviceModeConfigParams.NumberOfRadarDevicesDetected <= 1)
            {
                string full_command2 = string.Format("ar1.SetRfDigMonPeriodicConfig({0}, {1}, 0x{2}, {3})", new object[]
                {
                    m_RFDigitalSysPeriodicConfigParameters.ReportingMode,
                    m_RFDigitalSysPeriodicConfigParameters.Reserved,
                    ((int)(m_RFDigitalSysPeriodicConfigParameters.PeriodicRegisterRead | (int)m_RFDigitalSysPeriodicConfigParameters.ESMTest << 1 | (int)m_RFDigitalSysPeriodicConfigParameters.DFESTC << 2 | (int)m_RFDigitalSysPeriodicConfigParameters.FrameTimigTest << 3)).ToString("X"),
                    m_RFDigitalSysPeriodicConfigParameters.Reserved2
                });
                m_GuiManager.RecordLog(6, full_command2);
            }
            else
            {
                string full_command3 = string.Format("ar1.SetRfDigMonPeriodicConfig_mult({0}, {1}, 0x{2}, {3}, {4})", new object[]
                {
                    GlobalRef.g_RadarDeviceId,
                    m_RFDigitalSysPeriodicConfigParameters.ReportingMode,
                    m_RFDigitalSysPeriodicConfigParameters.Reserved,
                    ((int)(m_RFDigitalSysPeriodicConfigParameters.PeriodicRegisterRead | (int)m_RFDigitalSysPeriodicConfigParameters.ESMTest << 1 | (int)m_RFDigitalSysPeriodicConfigParameters.DFESTC << 2 | (int)m_RFDigitalSysPeriodicConfigParameters.FrameTimigTest << 3)).ToString("X"),
                    m_RFDigitalSysPeriodicConfigParameters.Reserved2
                });
                m_GuiManager.RecordLog(6, full_command3);
            }
            uint g_RadarDeviceId = GlobalRef.g_RadarDeviceId;
            num = Imports.RadarLinkImpl_RfDigMonPeriodicConfig(GlobalRef.g_RadarDeviceId, data);
            if ((num == 0 && ((GlobalRef.g_CasCadeDeviceSpiConnect & 1U) == 1U || (GlobalRef.g_CasCadeDeviceSpiConnect & 2U) == 2U || (GlobalRef.g_CasCadeDeviceSpiConnect & 4U) == 4U || (GlobalRef.g_CasCadeDeviceSpiConnect & 8U) == 8U)) || GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
            {
                string full_command4 = string.Format("Status: Passed", new object[0]);
                m_GuiManager.RecordLog(6, full_command4);
                for (int i = 0; i < 4; i++)
                {
                    if (jsonConfigInProgress)
                    {
                        break;
                    }
                    if (((ulong)g_RadarDeviceId & (ulong)(1L << (i & 31))) != 0UL)
                    {
                        int mmwaveDevIndex = getMmwaveDevIndex(i);
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].monitoringConfig.rlDigMonPeriodicConf_t.reportMode = (int)RFDigSysPeriodicConfigParametersParam.ReportingMode;
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].monitoringConfig.rlDigMonPeriodicConf_t.periodicEnableMask = "0x" + RFDigSysPeriodicConfigParametersParam.RFDigSysPeriodicMonEna.ToString("X");
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].monitoringConfig.rlDigMonPeriodicConf_t.isConfigured = 1;
                    }
                }
            }
            else
            {
                string msg = string.Format("Status: Failed, Error Type: {0}", new object[]
                {
                    GetErrorType(num)
                });
                GlobalRef.LuaWrapper.PrintError(msg);
            }
            if (GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
            {
                if (iRs232ConnectDisconnect_impl() == 0 && !GlobalRef.g_NtvRS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
                {
                    m_GuiManager.DllOps.iConnect(1U, 0U);
                    string full_command5 = string.Format("Debug Port Reconnected!", new object[0]);
                    m_GuiManager.RecordLog(9, full_command5);
                    ScriptOps.KeepTrying(2000, new Func<bool>(spare_read));
                }
            }
            else if (GlobalRef.g_CasCadeDeviceSpiConnect == 0U)
            {
                string full_command6 = string.Format("Error Occurred in Port open close", new object[0]);
                m_GuiManager.RecordLog(9, full_command6);
            }
            return num;
        }

        private int iSetRFDigitalSysLatentFaultMonConfig_Impl(bool is_starting_op, bool is_ending_op)
        {
            m_RFDigitalSysLatentFaultConfigParameters.WDTMon = '\0';
            m_RFDigitalSysLatentFaultConfigParameters.DCCMon = '\0';
            m_RFDigitalSysLatentFaultConfigParameters.SOCCMon = '\0';
            m_RFDigitalSysLatentFaultConfigParameters.f000321 = '\0';
            m_RFDigitalSysLatentFaultConfigParameters.FRCMon = '\0';
            RFDigSysLatentFaultConfigParametersParam.DigitalMonEna = (uint)((uint)m_RFDigitalSysLatentFaultConfigParameters.f00031c << 1 | (uint)m_RFDigitalSysLatentFaultConfigParameters.VIMMOn << 3 | (uint)m_RFDigitalSysLatentFaultConfigParameters.CRCMOn << 6 | (uint)m_RFDigitalSysLatentFaultConfigParameters.RampGenECCMOn << 7 | (uint)m_RFDigitalSysLatentFaultConfigParameters.DFEParityMOn << 8 | (uint)m_RFDigitalSysLatentFaultConfigParameters.f00031d << 9 | (uint)m_RFDigitalSysLatentFaultConfigParameters.RampGenLockStepMon << 10 | (uint)m_RFDigitalSysLatentFaultConfigParameters.FRCLockStepMon << 11 | (uint)m_RFDigitalSysLatentFaultConfigParameters.WDTMon << 15 | (uint)m_RFDigitalSysLatentFaultConfigParameters.ESMMon << 16 | (uint)m_RFDigitalSysLatentFaultConfigParameters.f00031e << 17 | (uint)m_RFDigitalSysLatentFaultConfigParameters.FRCMon << 18 | (uint)m_RFDigitalSysLatentFaultConfigParameters.f00031f << 19 | (uint)m_RFDigitalSysLatentFaultConfigParameters.f000320 << 20 | (uint)m_RFDigitalSysLatentFaultConfigParameters.DCCMon << 21 | (uint)m_RFDigitalSysLatentFaultConfigParameters.SOCCMon << 22 | (uint)m_RFDigitalSysLatentFaultConfigParameters.f000321 << 23 | (uint)m_RFDigitalSysLatentFaultConfigParameters.FFTMon << 24 | (uint)m_RFDigitalSysLatentFaultConfigParameters.RTIMon << 25 | (uint)m_RFDigitalSysLatentFaultConfigParameters.PCRMon << 26);
            RFDigSysLatentFaultConfigParametersParam.TestMode = (byte)m_RFDigitalSysLatentFaultConfigParameters.TestMode;
            RFDigSysLatentFaultConfigParametersParam.Reserved = 0;
            RFDigSysLatentFaultConfigParametersParam.Reserved2 = 0;
            IntPtr data = GCHandle.Alloc(RFDigSysLatentFaultConfigParametersParam, GCHandleType.Pinned).AddrOfPinnedObject();
            int num;
            if (GlobalRef.g_NtvRS232Connect[(int)GlobalRef.g_RadarDeviceIndex] && GlobalRef.g_CasCadeDeviceSpiConnect == 0U)
            {
                num = m_TsWrapper.Calling_WriteAddr_Single(4294959848U, 1U);
                if (m_GuiManager.DllOps.itempDisconnect(false) == 0)
                {
                    string full_command = string.Format("Debug Port Disconnected", new object[0]);
                    m_GuiManager.RecordLog(0, full_command);
                    if (!GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
                    {
                        iRs232ConnectDisconnect_impl();
                    }
                }
            }
            if (m_RadarDeviceModeConfigParams.NumberOfRadarDevicesDetected <= 1)
            {
                string full_command2 = string.Format("ar1.SetRfDigLatentFaultMonEnableConfig(0x{0}, {1}, {2}, {3})", new object[]
                {
                    ((int)((int)m_RFDigitalSysLatentFaultConfigParameters.f00031c << 1 | (int)m_RFDigitalSysLatentFaultConfigParameters.VIMMOn << 3 | (int)m_RFDigitalSysLatentFaultConfigParameters.CRCMOn << 6 | (int)m_RFDigitalSysLatentFaultConfigParameters.RampGenECCMOn << 7 | (int)m_RFDigitalSysLatentFaultConfigParameters.DFEParityMOn << 8 | (int)m_RFDigitalSysLatentFaultConfigParameters.f00031d << 9 | (int)m_RFDigitalSysLatentFaultConfigParameters.RampGenLockStepMon << 10 | (int)m_RFDigitalSysLatentFaultConfigParameters.FRCLockStepMon << 11 | (int)m_RFDigitalSysLatentFaultConfigParameters.ESMMon << 16 | (int)m_RFDigitalSysLatentFaultConfigParameters.f00031e << 17 | (int)m_RFDigitalSysLatentFaultConfigParameters.f00031f << 19 | (int)m_RFDigitalSysLatentFaultConfigParameters.f000320 << 20 | (int)m_RFDigitalSysLatentFaultConfigParameters.FFTMon << 24 | (int)m_RFDigitalSysLatentFaultConfigParameters.RTIMon << 25 | (int)m_RFDigitalSysLatentFaultConfigParameters.PCRMon << 26)).ToString("X"),
                    m_RFDigitalSysLatentFaultConfigParameters.TestMode,
                    m_RFDigitalSysLatentFaultConfigParameters.Reserved,
                    m_RFDigitalSysLatentFaultConfigParameters.Reserved2
                });
                m_GuiManager.RecordLog(6, full_command2);
            }
            else
            {
                string full_command3 = string.Format("ar1.SetRfDigLatentFaultMonEnableConfig_mult({0}, 0x{1}, {2}, {3}, {4})", new object[]
                {
                    GlobalRef.g_RadarDeviceId,
                    ((int)((int)m_RFDigitalSysLatentFaultConfigParameters.f00031c << 1 | (int)m_RFDigitalSysLatentFaultConfigParameters.VIMMOn << 3 | (int)m_RFDigitalSysLatentFaultConfigParameters.CRCMOn << 6 | (int)m_RFDigitalSysLatentFaultConfigParameters.RampGenECCMOn << 7 | (int)m_RFDigitalSysLatentFaultConfigParameters.DFEParityMOn << 8 | (int)m_RFDigitalSysLatentFaultConfigParameters.f00031d << 9 | (int)m_RFDigitalSysLatentFaultConfigParameters.RampGenLockStepMon << 10 | (int)m_RFDigitalSysLatentFaultConfigParameters.FRCLockStepMon << 11 | (int)m_RFDigitalSysLatentFaultConfigParameters.ESMMon << 16 | (int)m_RFDigitalSysLatentFaultConfigParameters.f00031e << 17 | (int)m_RFDigitalSysLatentFaultConfigParameters.f00031f << 19 | (int)m_RFDigitalSysLatentFaultConfigParameters.f000320 << 20 | (int)m_RFDigitalSysLatentFaultConfigParameters.FFTMon << 24 | (int)m_RFDigitalSysLatentFaultConfigParameters.RTIMon << 25 | (int)m_RFDigitalSysLatentFaultConfigParameters.PCRMon << 26)).ToString("X"),
                    m_RFDigitalSysLatentFaultConfigParameters.TestMode,
                    m_RFDigitalSysLatentFaultConfigParameters.Reserved,
                    m_RFDigitalSysLatentFaultConfigParameters.Reserved2
                });
                m_GuiManager.RecordLog(6, full_command3);
            }
            uint g_RadarDeviceId = GlobalRef.g_RadarDeviceId;
            num = Imports.RadarLinkImpl_EnableDigMon(GlobalRef.g_RadarDeviceId, data);
            if ((num == 0 && ((GlobalRef.g_CasCadeDeviceSpiConnect & 1U) == 1U || (GlobalRef.g_CasCadeDeviceSpiConnect & 2U) == 2U || (GlobalRef.g_CasCadeDeviceSpiConnect & 4U) == 4U || (GlobalRef.g_CasCadeDeviceSpiConnect & 8U) == 8U)) || GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
            {
                string full_command4 = string.Format("Status: Passed", new object[0]);
                m_GuiManager.RecordLog(6, full_command4);
                for (int i = 0; i < 4; i++)
                {
                    if (jsonConfigInProgress)
                    {
                        break;
                    }
                    if (((ulong)g_RadarDeviceId & (ulong)(1L << (i & 31))) != 0UL)
                    {
                        int mmwaveDevIndex = getMmwaveDevIndex(i);
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].monitoringConfig.rlMonDigEnables_t.enMask = "0x" + RFDigSysLatentFaultConfigParametersParam.DigitalMonEna.ToString("X");
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].monitoringConfig.rlMonDigEnables_t.testMode = (int)RFDigSysLatentFaultConfigParametersParam.TestMode;
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].monitoringConfig.rlMonDigEnables_t.isConfigured = 1;
                    }
                }
            }
            else
            {
                string msg = string.Format("Status: Failed, Error Type: {0}", new object[]
                {
                    GetErrorType(num)
                });
                GlobalRef.LuaWrapper.PrintError(msg);
            }
            if (GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
            {
                if (iRs232ConnectDisconnect_impl() == 0 && !GlobalRef.g_NtvRS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
                {
                    m_GuiManager.DllOps.iConnect(1U, 0U);
                    string full_command5 = string.Format("Debug Port Reconnected!", new object[0]);
                    m_GuiManager.RecordLog(9, full_command5);
                    ScriptOps.KeepTrying(2000, new Func<bool>(spare_read));
                }
            }
            else if (GlobalRef.g_CasCadeDeviceSpiConnect == 0U)
            {
                string full_command6 = string.Format("Error Occurred in Port open close", new object[0]);
                m_GuiManager.RecordLog(9, full_command6);
            }
            return num;
        }

        private int iSetMSSLatentFaultMonConfig_Impl(bool is_starting_op, bool is_ending_op)
        {
            MSSLatentFaultConfigParam.TestEna1 = (uint)(m_MSSLatentFaultTestConfigParameters.f000322 | (uint)m_MSSLatentFaultTestConfigParameters.DMAMOn << 1 | (uint)m_MSSLatentFaultTestConfigParameters.RTIMOn << 3 | (uint)m_MSSLatentFaultTestConfigParameters.ESMMOn << 4 | (uint)m_MSSLatentFaultTestConfigParameters.f000323 << 5 | (uint)m_MSSLatentFaultTestConfigParameters.CRCMOn << 6 | (uint)m_MSSLatentFaultTestConfigParameters.VIMMon << 7 | (uint)m_MSSLatentFaultTestConfigParameters.MailBoxMon << 9 | (uint)m_MSSLatentFaultTestConfigParameters.LVDSPatternGenMon << 10 | (uint)m_MSSLatentFaultTestConfigParameters.CSI2PatternGenMon << 11 | (uint)m_MSSLatentFaultTestConfigParameters.GenNErrorMon << 12 | (uint)m_MSSLatentFaultTestConfigParameters.MibSPISingleBitErrorMon << 13 | (uint)m_MSSLatentFaultTestConfigParameters.MibSPIDoubleBitErrorMon << 14 | (uint)m_MSSLatentFaultTestConfigParameters.DMAParityError << 15 | (uint)m_MSSLatentFaultTestConfigParameters.TCMARamSingleBitErrorMon << 16 | (uint)m_MSSLatentFaultTestConfigParameters.TCMBRamSingleBitErrorMon << 17 | (uint)m_MSSLatentFaultTestConfigParameters.TCMARamDoubleBitErrorMon << 18 | (uint)m_MSSLatentFaultTestConfigParameters.TCMBRamDoubleBitErrorMon << 19 | (uint)m_MSSLatentFaultTestConfigParameters.TCMARamParityErrorMon << 20 | (uint)m_MSSLatentFaultTestConfigParameters.TCMBRamParityErrorMon << 21 | (uint)m_MSSLatentFaultTestConfigParameters.f000324 << 24 | (uint)m_MSSLatentFaultTestConfigParameters.MSSMailBoxSingleBitErrorMon << 25 | (uint)m_MSSLatentFaultTestConfigParameters.MSSMailBoxDoubleBitErrorMon << 26 | (uint)m_MSSLatentFaultTestConfigParameters.BSSMailBoxSingleBitErrorMon << 27 | (uint)m_MSSLatentFaultTestConfigParameters.BSSMailBoxDoubleBitErrorMon << 28 | (uint)m_MSSLatentFaultTestConfigParameters.f000325 << 29 | (uint)m_MSSLatentFaultTestConfigParameters.EDMAParityMon << 30 | (uint)m_MSSLatentFaultTestConfigParameters.CSI2ParityMon << 31);
            MSSLatentFaultConfigParam.TestEna2 = (uint)(m_MSSLatentFaultTestConfigParameters.DCCSelfTest | (uint)m_MSSLatentFaultTestConfigParameters.DCCFaultInsertion << 1 | (uint)m_MSSLatentFaultTestConfigParameters.PCRFaultGenTest << 2 | (uint)m_MSSLatentFaultTestConfigParameters.VIMRamParity << 3 | (uint)m_MSSLatentFaultTestConfigParameters.SCI << 4);
            MSSLatentFaultConfigParam.ReportingMode = (byte)m_MSSLatentFaultTestConfigParameters.ReportingMode;
            MSSLatentFaultConfigParam.TestMode = (byte)m_MSSLatentFaultTestConfigParameters.TestMode;
            MSSLatentFaultConfigParam.Reserved = 0;
            IntPtr data = GCHandle.Alloc(MSSLatentFaultConfigParam, GCHandleType.Pinned).AddrOfPinnedObject();
            int num;
            if (GlobalRef.g_NtvRS232Connect[(int)GlobalRef.g_RadarDeviceIndex] && GlobalRef.g_CasCadeDeviceSpiConnect == 0U)
            {
                num = m_TsWrapper.Calling_WriteAddr_Single(4294959848U, 1U);
                if (m_GuiManager.DllOps.itempDisconnect(false) == 0)
                {
                    string full_command = string.Format("Debug Port Disconnected", new object[0]);
                    m_GuiManager.RecordLog(0, full_command);
                    if (!GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
                    {
                        iRs232ConnectDisconnect_impl();
                    }
                }
            }
            if (m_RadarDeviceModeConfigParams.NumberOfRadarDevicesDetected <= 1)
            {
                string full_command2 = string.Format("ar1.DeviceLatentFaultConfig(0x{0}, 0x{1}, {2}, {3}, {4})", new object[]
                {
                    MSSLatentFaultConfigParam.TestEna1.ToString("X"),
                    MSSLatentFaultConfigParam.TestEna2.ToString("X"),
                    MSSLatentFaultConfigParam.ReportingMode,
                    MSSLatentFaultConfigParam.TestMode,
                    MSSLatentFaultConfigParam.Reserved
                });
                m_GuiManager.RecordLog(6, full_command2);
            }
            else
            {
                string full_command3 = string.Format("ar1.DeviceLatentFaultConfig_mult({0}, 0x{1}, 0x{2}, {3}, {4}, {5})", new object[]
                {
                    GlobalRef.g_RadarDeviceId,
                    MSSLatentFaultConfigParam.TestEna1.ToString("X"),
                    MSSLatentFaultConfigParam.TestEna2.ToString("X"),
                    MSSLatentFaultConfigParam.ReportingMode,
                    MSSLatentFaultConfigParam.TestMode,
                    MSSLatentFaultConfigParam.Reserved
                });
                m_GuiManager.RecordLog(6, full_command3);
            }
            uint g_RadarDeviceId = GlobalRef.g_RadarDeviceId;
            num = Imports.RadarLinkImpl_DeviceLatentFaultTests(GlobalRef.g_RadarDeviceId, data);
            if ((num == 0 && ((GlobalRef.g_CasCadeDeviceSpiConnect & 1U) == 1U || (GlobalRef.g_CasCadeDeviceSpiConnect & 2U) == 2U || (GlobalRef.g_CasCadeDeviceSpiConnect & 4U) == 4U || (GlobalRef.g_CasCadeDeviceSpiConnect & 8U) == 8U)) || GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
            {
                string full_command4 = string.Format("Status: Passed", new object[0]);
                m_GuiManager.RecordLog(6, full_command4);
                for (int i = 0; i < 4; i++)
                {
                    if (jsonConfigInProgress)
                    {
                        break;
                    }
                    if (((ulong)g_RadarDeviceId & (ulong)(1L << (i & 31))) != 0UL)
                    {
                        int mmwaveDevIndex = getMmwaveDevIndex(i);
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rllatentFault_t.testEn1 = "0x" + MSSLatentFaultConfigParam.TestEna1.ToString("X");
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rllatentFault_t.testEn2 = "0x" + MSSLatentFaultConfigParam.TestEna2.ToString("X");
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rllatentFault_t.repMode = (int)MSSLatentFaultConfigParam.ReportingMode;
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rllatentFault_t.testMode = (int)MSSLatentFaultConfigParam.TestMode;
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rllatentFault_t.isConfigured = 1;
                    }
                }
            }
            else
            {
                string msg = string.Format("Status: Failed, Error Type: {0}", new object[]
                {
                    GetErrorType(num)
                });
                GlobalRef.LuaWrapper.PrintError(msg);
            }
            if (GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
            {
                if (iRs232ConnectDisconnect_impl() == 0 && !GlobalRef.g_NtvRS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
                {
                    m_GuiManager.DllOps.iConnect(1U, 0U);
                    string full_command5 = string.Format("Debug Port Reconnected!", new object[0]);
                    m_GuiManager.RecordLog(9, full_command5);
                    ScriptOps.KeepTrying(2000, new Func<bool>(spare_read));
                }
            }
            else if (GlobalRef.g_CasCadeDeviceSpiConnect == 0U)
            {
                string full_command6 = string.Format("Error Occurred in Port open close", new object[0]);
                m_GuiManager.RecordLog(9, full_command6);
            }
            return num;
        }

        private int iSetMSSPeriodicTestMonConfig_Impl(bool is_starting_op, bool is_ending_op)
        {
            MSSPeriodicTestConfigurationParam.Periodicity = m_MSSPeriodicTestConfigParameters.Periodicity;
            MSSPeriodicTestConfigurationParam.TestEnable = (uint)((int)m_MSSPeriodicTestConfigParameters.PeriodicConfigRegReadEna | (int)m_MSSPeriodicTestConfigParameters.ESMMonEna << 1);
            MSSPeriodicTestConfigurationParam.ReportingMode = m_MSSPeriodicTestConfigParameters.ReportingMode;
            MSSPeriodicTestConfigurationParam.Reserved = 0;
            MSSPeriodicTestConfigurationParam.Reserved2 = 0;
            IntPtr data = GCHandle.Alloc(MSSPeriodicTestConfigurationParam, GCHandleType.Pinned).AddrOfPinnedObject();
            int num;
            if (GlobalRef.g_NtvRS232Connect[(int)GlobalRef.g_RadarDeviceIndex] && GlobalRef.g_CasCadeDeviceSpiConnect == 0U)
            {
                num = m_TsWrapper.Calling_WriteAddr_Single(4294959848U, 1U);
                if (m_GuiManager.DllOps.itempDisconnect(false) == 0)
                {
                    string full_command = string.Format("Debug Port Disconnected", new object[0]);
                    m_GuiManager.RecordLog(0, full_command);
                    if (!GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
                    {
                        iRs232ConnectDisconnect_impl();
                    }
                }
            }
            if (m_RadarDeviceModeConfigParams.NumberOfRadarDevicesDetected <= 1)
            {
                string full_command2 = string.Format("ar1.DevicePeriodicTestsConfig({0}, {1}, {2}, {3})", new object[]
                {
                    MSSPeriodicTestConfigurationParam.Periodicity,
                    MSSPeriodicTestConfigurationParam.TestEnable,
                    MSSPeriodicTestConfigurationParam.ReportingMode,
                    MSSPeriodicTestConfigurationParam.Reserved
                });
                m_GuiManager.RecordLog(6, full_command2);
            }
            else
            {
                string full_command3 = string.Format("ar1.DevicePeriodicTestsConfig_mult({0}, {1}, {2}, {3}, {4})", new object[]
                {
                    GlobalRef.g_RadarDeviceId,
                    MSSPeriodicTestConfigurationParam.Periodicity,
                    MSSPeriodicTestConfigurationParam.TestEnable,
                    MSSPeriodicTestConfigurationParam.ReportingMode,
                    MSSPeriodicTestConfigurationParam.Reserved
                });
                m_GuiManager.RecordLog(6, full_command3);
            }
            uint g_RadarDeviceId = GlobalRef.g_RadarDeviceId;
            num = Imports.RadarLinkImpl_DeviceEnablePeriodicTests(GlobalRef.g_RadarDeviceId, data);
            if ((num == 0 && ((GlobalRef.g_CasCadeDeviceSpiConnect & 1U) == 1U || (GlobalRef.g_CasCadeDeviceSpiConnect & 2U) == 2U || (GlobalRef.g_CasCadeDeviceSpiConnect & 4U) == 4U || (GlobalRef.g_CasCadeDeviceSpiConnect & 8U) == 8U)) || GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
            {
                string full_command4 = string.Format("Status: Passed", new object[0]);
                m_GuiManager.RecordLog(6, full_command4);
                for (int i = 0; i < 4; i++)
                {
                    if (jsonConfigInProgress)
                    {
                        break;
                    }
                    if (((ulong)g_RadarDeviceId & (ulong)(1L << (i & 31))) != 0UL)
                    {
                        int mmwaveDevIndex = getMmwaveDevIndex(i);
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlperiodicTest_t.periodicity_msec = (int)MSSPeriodicTestConfigurationParam.Periodicity;
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlperiodicTest_t.testEn = "0x" + MSSPeriodicTestConfigurationParam.TestEnable.ToString("X");
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlperiodicTest_t.repMode = (int)MSSPeriodicTestConfigurationParam.ReportingMode;
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlperiodicTest_t.isConfigured = 1;
                    }
                }
            }
            else
            {
                string msg = string.Format("Status: Failed, Error Type: {0}", new object[]
                {
                    GetErrorType(num)
                });
                GlobalRef.LuaWrapper.PrintError(msg);
            }
            if (GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
            {
                if (iRs232ConnectDisconnect_impl() == 0 && !GlobalRef.g_NtvRS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
                {
                    m_GuiManager.DllOps.iConnect(1U, 0U);
                    string full_command5 = string.Format("Debug Port Reconnected!", new object[0]);
                    m_GuiManager.RecordLog(9, full_command5);
                    ScriptOps.KeepTrying(2000, new Func<bool>(spare_read));
                }
            }
            else if (GlobalRef.g_CasCadeDeviceSpiConnect == 0U)
            {
                string full_command6 = string.Format("Error Occurred in Port open close", new object[0]);
                m_GuiManager.RecordLog(9, full_command6);
            }
            return num;
        }

        private int iSetRFInitCalibConfig_Impl(bool is_starting_op, bool is_ending_op)
        {
            RFInitCalibConfigurationParam.CalibEnaMask = (m_RFInitCalibConfigParameters.LODist << 4 | m_RFInitCalibConfigParameters.RXADCDC << 5 | m_RFInitCalibConfigParameters.HPFCutoff << 6 | m_RFInitCalibConfigParameters.LPFCutoff << 7 | m_RFInitCalibConfigParameters.PeakDetector << 8 | m_RFInitCalibConfigParameters.TXPower << 9 | m_RFInitCalibConfigParameters.RXGain << 10 | m_RFInitCalibConfigParameters.TXPhase << 11 | m_RFInitCalibConfigParameters.RXIQMM << 12);
            RFInitCalibConfigurationParam.Reserved0 = 0;
            RFInitCalibConfigurationParam.Reserved1 = 0;
            RFInitCalibConfigurationParam.Reserved2 = 0;
            RFInitCalibConfigurationParam.Reserved3 = 0U;
            IntPtr data = GCHandle.Alloc(RFInitCalibConfigurationParam, GCHandleType.Pinned).AddrOfPinnedObject();
            int num;
            if (GlobalRef.g_NtvRS232Connect[(int)GlobalRef.g_RadarDeviceIndex] && GlobalRef.g_CasCadeDeviceSpiConnect == 0U)
            {
                num = m_TsWrapper.Calling_WriteAddr_Single(4294959848U, 1U);
                if (m_GuiManager.DllOps.itempDisconnect(false) == 0)
                {
                    string full_command = string.Format("Debug Port Disconnected", new object[0]);
                    m_GuiManager.RecordLog(0, full_command);
                    if (!GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
                    {
                        iRs232ConnectDisconnect_impl();
                    }
                }
            }
            if (m_RadarDeviceModeConfigParams.NumberOfRadarDevicesDetected <= 1)
            {
                string full_command2 = string.Format("ar1.RfInitCalibConfig({0}, {1}, {2}, {3}, {4}, {5}, {6}, {7})", new object[]
                {
                    m_RFInitCalibConfigParameters.LODist,
                    m_RFInitCalibConfigParameters.RXADCDC,
                    m_RFInitCalibConfigParameters.HPFCutoff,
                    m_RFInitCalibConfigParameters.LPFCutoff,
                    m_RFInitCalibConfigParameters.PeakDetector,
                    m_RFInitCalibConfigParameters.TXPower,
                    m_RFInitCalibConfigParameters.RXGain,
                    m_RFInitCalibConfigParameters.RXIQMM | m_RFInitCalibConfigParameters.TXPhase << 16
                });
                m_GuiManager.RecordLog(6, full_command2);
            }
            else
            {
                string full_command3 = string.Format("ar1.RfInitCalibConfig_mult({0}, {1}, {2}, {3}, {4}, {5}, {6}, {7}, {8})", new object[]
                {
                    GlobalRef.g_RadarDeviceId,
                    m_RFInitCalibConfigParameters.LODist,
                    m_RFInitCalibConfigParameters.RXADCDC,
                    m_RFInitCalibConfigParameters.HPFCutoff,
                    m_RFInitCalibConfigParameters.LPFCutoff,
                    m_RFInitCalibConfigParameters.PeakDetector,
                    m_RFInitCalibConfigParameters.TXPower,
                    m_RFInitCalibConfigParameters.RXGain,
                    m_RFInitCalibConfigParameters.RXIQMM | m_RFInitCalibConfigParameters.TXPhase << 16
                });
                m_GuiManager.RecordLog(6, full_command3);
            }
            uint g_RadarDeviceId = GlobalRef.g_RadarDeviceId;
            num = Imports.RadarLinkImpl_RfInitCalibConfig(GlobalRef.g_RadarDeviceId, data);
            if ((num == 0 && ((GlobalRef.g_CasCadeDeviceSpiConnect & 1U) == 1U || (GlobalRef.g_CasCadeDeviceSpiConnect & 2U) == 2U || (GlobalRef.g_CasCadeDeviceSpiConnect & 4U) == 4U || (GlobalRef.g_CasCadeDeviceSpiConnect & 8U) == 8U)) || GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
            {
                string full_command4 = string.Format("Status: Passed", new object[0]);
                m_GuiManager.RecordLog(6, full_command4);
                for (int i = 0; i < 4; i++)
                {
                    if (jsonConfigInProgress)
                    {
                        break;
                    }
                    if (((ulong)g_RadarDeviceId & (ulong)(1L << (i & 31))) != 0UL)
                    {
                        int mmwaveDevIndex = getMmwaveDevIndex(i);
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlRfInitCalConf_t.calibEnMask = "0x" + RFInitCalibConfigurationParam.CalibEnaMask.ToString("X");
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlRfInitCalConf_t.isConfigured = 1;
                    }
                }
            }
            else
            {
                string msg = string.Format("Status: Failed, Error Type: {0}", new object[]
                {
                    GetErrorType(num)
                });
                GlobalRef.LuaWrapper.PrintError(msg);
            }
            if (GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
            {
                if (iRs232ConnectDisconnect_impl() == 0 && !GlobalRef.g_NtvRS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
                {
                    m_GuiManager.DllOps.iConnect(1U, 0U);
                    string full_command5 = string.Format("Debug Port Reconnected!", new object[0]);
                    m_GuiManager.RecordLog(9, full_command5);
                    ScriptOps.KeepTrying(2000, new Func<bool>(spare_read));
                }
            }
            else if (GlobalRef.g_CasCadeDeviceSpiConnect == 0U)
            {
                string full_command6 = string.Format("Error Occurred in Port open close", new object[0]);
                m_GuiManager.RecordLog(9, full_command6);
            }
            return num;
        }

        private int iSetRunTimeCalibConfig_Impl(bool is_starting_op, bool is_ending_op)
        {
            RunTimeCalibConfigurationParam.OneTimeCalibEnaMask = (m_RunTimeCalibConfigParameters.OneTimeLODist << 4 | m_RunTimeCalibConfigParameters.OneTimePDCal << 8 | m_RunTimeCalibConfigParameters.OneTimeTXPower << 9 | m_RunTimeCalibConfigParameters.OneTimeRXGain << 10);
            RunTimeCalibConfigurationParam.PeriodicCalibEnaMask = (m_RunTimeCalibConfigParameters.PeriodiCalibLODist << 4 | m_RunTimeCalibConfigParameters.PeriodiCalibPDCal << 8 | m_RunTimeCalibConfigParameters.PeriodiCalibTXPower << 9 | m_RunTimeCalibConfigParameters.PeriodiCalibRXGain << 10);
            RunTimeCalibConfigurationParam.CalibPeriodicity = m_RunTimeCalibConfigParameters.CalibPeriodicity;
            RunTimeCalibConfigurationParam.ReportEnable = (byte)m_RunTimeCalibConfigParameters.EnableCalReport;
            RunTimeCalibConfigurationParam.TxPowerCalMode = (byte)m_RunTimeCalibConfigParameters.TxPowerCalMode;
            RunTimeCalibConfigurationParam.Reserved1 = 0;
            RunTimeCalibConfigurationParam.Reserved2 = 0;
            RunTimeCalibConfigurationParam.Reserved3 = 0U;
            IntPtr data = GCHandle.Alloc(RunTimeCalibConfigurationParam, GCHandleType.Pinned).AddrOfPinnedObject();
            int num;
            if (GlobalRef.g_NtvRS232Connect[(int)GlobalRef.g_RadarDeviceIndex] && GlobalRef.g_CasCadeDeviceSpiConnect == 0U)
            {
                num = m_TsWrapper.Calling_WriteAddr_Single(4294959848U, 1U);
                if (m_GuiManager.DllOps.itempDisconnect(false) == 0)
                {
                    string full_command = string.Format("Debug Port Disconnected", new object[0]);
                    m_GuiManager.RecordLog(0, full_command);
                    if (!GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
                    {
                        iRs232ConnectDisconnect_impl();
                    }
                }
            }
            if (m_RadarDeviceModeConfigParams.NumberOfRadarDevicesDetected <= 1)
            {
                string full_command2 = string.Format("ar1.RunTimeCalibConfTrig({0}, {1}, {2}, {3}, {4}, {5}, {6}, {7}, {8}, {9}, {10})", new object[]
                {
                    m_RunTimeCalibConfigParameters.OneTimeLODist,
                    m_RunTimeCalibConfigParameters.OneTimeTXPower,
                    m_RunTimeCalibConfigParameters.OneTimeRXGain,
                    m_RunTimeCalibConfigParameters.OneTimePDCal,
                    m_RunTimeCalibConfigParameters.PeriodiCalibLODist,
                    m_RunTimeCalibConfigParameters.PeriodiCalibTXPower,
                    m_RunTimeCalibConfigParameters.PeriodiCalibRXGain,
                    m_RunTimeCalibConfigParameters.PeriodiCalibPDCal,
                    m_RunTimeCalibConfigParameters.CalibPeriodicity,
                    m_RunTimeCalibConfigParameters.EnableCalReport,
                    m_RunTimeCalibConfigParameters.TxPowerCalMode
                });
                m_GuiManager.RecordLog(6, full_command2);
            }
            else
            {
                string full_command3 = string.Format("ar1.RunTimeCalibConfTrig_mult({0}, {1}, {2}, {3}, {4}, {5}, {6}, {7}, {8}, {9}, {10}, {11})", new object[]
                {
                    GlobalRef.g_RadarDeviceId,
                    m_RunTimeCalibConfigParameters.OneTimeLODist,
                    m_RunTimeCalibConfigParameters.OneTimeTXPower,
                    m_RunTimeCalibConfigParameters.OneTimeRXGain,
                    m_RunTimeCalibConfigParameters.OneTimePDCal,
                    m_RunTimeCalibConfigParameters.PeriodiCalibLODist,
                    m_RunTimeCalibConfigParameters.PeriodiCalibTXPower,
                    m_RunTimeCalibConfigParameters.PeriodiCalibRXGain,
                    m_RunTimeCalibConfigParameters.PeriodiCalibPDCal,
                    m_RunTimeCalibConfigParameters.CalibPeriodicity,
                    m_RunTimeCalibConfigParameters.EnableCalReport,
                    m_RunTimeCalibConfigParameters.TxPowerCalMode
                });
                m_GuiManager.RecordLog(6, full_command3);
            }
            uint g_RadarDeviceId = GlobalRef.g_RadarDeviceId;
            num = Imports.RadarLinkImpl_RunTimeCalibConf(GlobalRef.g_RadarDeviceId, data);
            if ((num == 0 && ((GlobalRef.g_CasCadeDeviceSpiConnect & 1U) == 1U || (GlobalRef.g_CasCadeDeviceSpiConnect & 2U) == 2U || (GlobalRef.g_CasCadeDeviceSpiConnect & 4U) == 4U || (GlobalRef.g_CasCadeDeviceSpiConnect & 8U) == 8U)) || GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
            {
                string full_command4 = string.Format("Status: Passed", new object[0]);
                m_GuiManager.RecordLog(6, full_command4);
                for (int i = 0; i < 4; i++)
                {
                    if (jsonConfigInProgress)
                    {
                        break;
                    }
                    if (((ulong)g_RadarDeviceId & (ulong)(1L << (i & 31))) != 0UL)
                    {
                        int mmwaveDevIndex = getMmwaveDevIndex(i);
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlRunTimeCalibConf_t.oneTimeCalibEnMask = "0x" + RunTimeCalibConfigurationParam.OneTimeCalibEnaMask.ToString("X");
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlRunTimeCalibConf_t.periodicCalibEnMask = "0x" + RunTimeCalibConfigurationParam.PeriodicCalibEnaMask.ToString("X");
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlRunTimeCalibConf_t.calibPeriodicity = (int)RunTimeCalibConfigurationParam.CalibPeriodicity;
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlRunTimeCalibConf_t.reportEn = (int)RunTimeCalibConfigurationParam.ReportEnable;
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlRunTimeCalibConf_t.txPowerCalMode = (int)RunTimeCalibConfigurationParam.TxPowerCalMode;
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlRunTimeCalibConf_t.isConfigured = 1;
                    }
                }
            }
            else
            {
                string msg = string.Format("Status: Failed, Error Type: {0}", new object[]
                {
                    GetErrorType(num)
                });
                GlobalRef.LuaWrapper.PrintError(msg);
            }
            if (GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
            {
                if (iRs232ConnectDisconnect_impl() == 0 && !GlobalRef.g_NtvRS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
                {
                    m_GuiManager.DllOps.iConnect(1U, 0U);
                    string full_command5 = string.Format("Debug Port Reconnected!", new object[0]);
                    m_GuiManager.RecordLog(9, full_command5);
                    ScriptOps.KeepTrying(2000, new Func<bool>(spare_read));
                }
            }
            else if (GlobalRef.g_CasCadeDeviceSpiConnect == 0U)
            {
                string full_command6 = string.Format("Error Occurred in Port open close", new object[0]);
                m_GuiManager.RecordLog(9, full_command6);
            }
            return num;
        }

        private int iSetRfInit_Impl(bool is_starting_op, bool is_ending_op)
        {
            int num;
            if (GlobalRef.g_NtvRS232Connect[(int)GlobalRef.g_RadarDeviceIndex] && GlobalRef.g_CasCadeDeviceSpiConnect == 0U)
            {
                num = m_TsWrapper.Calling_WriteAddr_Single(4294959848U, 1U);
                if (m_GuiManager.DllOps.itempDisconnect(false) == 0)
                {
                    string full_command = string.Format("Debug Port Disconnected", new object[0]);
                    m_GuiManager.RecordLog(0, full_command);
                    if (!GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
                    {
                        iRs232ConnectDisconnect_impl();
                    }
                }
            }
            if (m_RadarDeviceModeConfigParams.NumberOfRadarDevicesDetected <= 1)
            {
                string full_command2 = string.Format("ar1.RfInit()", new object[0]);
                m_GuiManager.RecordLog(6, full_command2);
            }
            else
            {
                string full_command3 = string.Format("ar1.RfInit_mult({0})", new object[]
                {
                    GlobalRef.g_RadarDeviceId
                });
                m_GuiManager.RecordLog(6, full_command3);
            }
            num = Imports.RadarLinkImpl_RfInit(GlobalRef.g_RadarDeviceId);
            if (num == 0 && (GlobalRef.g_CasCadeDeviceSpiConnect & GlobalRef.g_RadarDeviceId) == GlobalRef.g_RadarDeviceId)
            {
                string full_command4 = string.Format("Status: Passed", new object[0]);
                m_GuiManager.RecordLog(6, full_command4);
            }
            else
            {
                string full_command5 = string.Format("Status: Failed, Error Type: {0}", new object[]
                {
                    GetErrorType(num)
                });
                m_GuiManager.RecordLog(6, full_command5);
            }
            if (GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex] && iRs232ConnectDisconnect_impl() == 0 && !GlobalRef.g_NtvRS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
            {
                m_GuiManager.DllOps.iConnect(1U, 0U);
                string full_command6 = string.Format("Debug Port Reconnected!", new object[0]);
                m_GuiManager.RecordLog(9, full_command6);
                ScriptOps.KeepTrying(2000, new Func<bool>(spare_read));
            }
            return num;
        }

        private int iSetRfInit_LUAImpl(out string CalibStatus, out string CalibUpdate, out short Temperature, out uint TimeStamp)
        {
            CalibStatus = string.Empty;
            CalibUpdate = string.Empty;
            Temperature = 0;
            TimeStamp = 0U;
            int num;
            if (GlobalRef.g_NtvRS232Connect[(int)GlobalRef.g_RadarDeviceIndex] && GlobalRef.g_CasCadeDeviceSpiConnect == 0U)
            {
                num = m_TsWrapper.Calling_WriteAddr_Single(4294959848U, 1U);
                if (m_GuiManager.DllOps.itempDisconnect(false) == 0)
                {
                    string full_command = string.Format("Debug Port Disconnected", new object[0]);
                    m_GuiManager.RecordLog(0, full_command);
                    if (!GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
                    {
                        iRs232ConnectDisconnect_impl();
                    }
                }
            }
            if (m_RadarDeviceModeConfigParams.NumberOfRadarDevicesDetected <= 1)
            {
                string full_command2 = string.Format("ar1.RfInit()", new object[0]);
                m_GuiManager.RecordLog(6, full_command2);
            }
            else
            {
                string full_command3 = string.Format("ar1.RfInit_mult({0})", new object[]
                {
                    GlobalRef.g_RadarDeviceId
                });
                m_GuiManager.RecordLog(6, full_command3);
            }
            GlobalRef.g_RFInitStatus = 0U;
            num = Imports.RadarLinkImpl_RfInit(GlobalRef.g_RadarDeviceId);
            ushort num2 = 0;
            while (GlobalRef.g_RFInitStatus == 0U)
            {
                Thread.Sleep(100);
                num2 += 1;
                if (num2 > 30)
                {
                    string msg = string.Format("RF Init response from the device timed out!", new object[0]);
                    GlobalRef.LuaWrapper.PrintError(msg);
                    return -1;
                }
            }
            if (num == 0)
            {
                if (GlobalRef.g_RadarDeviceId == 1U)
                {
                    CalibStatus = "0x" + ScriptOps.RFInitStatusParam.CalibStatus.ToString("X");
                    CalibUpdate = "0x" + ScriptOps.RFInitStatusParam.CalibUpdate.ToString("X");
                    Temperature = ScriptOps.RFInitStatusParam.Temperature;
                    TimeStamp = ScriptOps.RFInitStatusParam.TimeStamp;
                }
                else if (GlobalRef.g_RadarDeviceId == 2U)
                {
                    CalibStatus = "0x" + ScriptOps.RFInitStatusParam.CalibStatus.ToString("X");
                    CalibUpdate = "0x" + ScriptOps.RFInitStatusParam.CalibUpdate.ToString("X");
                    Temperature = ScriptOps.RFInitStatusParam.Temperature;
                    TimeStamp = ScriptOps.RFInitStatusParam.TimeStamp;
                }
                else if (GlobalRef.g_RadarDeviceId == 4U)
                {
                    CalibStatus = "0x" + ScriptOps.RFInitStatusParam.CalibStatus.ToString("X");
                    CalibUpdate = "0x" + ScriptOps.RFInitStatusParam.CalibUpdate.ToString("X");
                    Temperature = ScriptOps.RFInitStatusParam.Temperature;
                    TimeStamp = ScriptOps.RFInitStatusParam.TimeStamp;
                }
                else if (GlobalRef.g_RadarDeviceId == 8U)
                {
                    CalibStatus = "0x" + ScriptOps.RFInitStatusParam.CalibStatus.ToString("X");
                    CalibUpdate = "0x" + ScriptOps.RFInitStatusParam.CalibUpdate.ToString("X");
                    Temperature = ScriptOps.RFInitStatusParam.Temperature;
                    TimeStamp = ScriptOps.RFInitStatusParam.TimeStamp;
                }
            }
            if ((num == 0 && ((GlobalRef.g_CasCadeDeviceSpiConnect & 1U) == 1U || (GlobalRef.g_CasCadeDeviceSpiConnect & 2U) == 2U || (GlobalRef.g_CasCadeDeviceSpiConnect & 4U) == 4U || (GlobalRef.g_CasCadeDeviceSpiConnect & 8U) == 8U)) || (GlobalRef.g_CasCadeDeviceSpiConnect & 1U) == 1U || (GlobalRef.g_CasCadeDeviceSpiConnect & 2U) == 2U || (GlobalRef.g_CasCadeDeviceSpiConnect & 4U) == 4U || (GlobalRef.g_CasCadeDeviceSpiConnect & 8U) == 8U)
            {
                string full_command4 = string.Format("Status: Passed", new object[0]);
                m_GuiManager.RecordLog(6, full_command4);
            }
            else
            {
                string full_command5 = string.Format("Status: Failed, Error Type: {0}", new object[]
                {
                    GetErrorType(num)
                });
                m_GuiManager.RecordLog(6, full_command5);
            }
            if (GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex] && iRs232ConnectDisconnect_impl() == 0 && !GlobalRef.g_NtvRS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
            {
                m_GuiManager.DllOps.iConnect(1U, 0U);
                string full_command6 = string.Format("Debug Port Reconnected!", new object[0]);
                m_GuiManager.RecordLog(9, full_command6);
                ScriptOps.KeepTrying(2000, new Func<bool>(spare_read));
            }
            return num;
        }

        private int iSetChirpConfig_Impl(bool is_starting_op, bool is_ending_op)
        {
            ushort chirpStartIdx = m_ChirpConfigParams.chirpStartIdx;
            ushort chirpEndIdx = m_ChirpConfigParams.chirpEndIdx;
            ushort cprofileId = m_ChirpConfigParams.cprofileId;
            float startFreqVar = m_ChirpConfigParams.startFreqVar;
            float freqSlopeVar = m_ChirpConfigParams.freqSlopeVar;
            float idleTimeVar = m_ChirpConfigParams.idleTimeVar;
            float adcStartTimeVar = m_ChirpConfigParams.adcStartTimeVar;
            ushort num = (ushort)((int)m_ChirpConfigParams.tx1Enable | (int)m_ChirpConfigParams.tx2Enable << 1 | (int)m_ChirpConfigParams.tx3Enable << 2);
            uint num2;
            short num3;
            if (GlobalRef.g_ARDeviceOperateFreq60GHz)
            {
                num2 = (uint)Math.Round((double)startFreqVar * 24855.134814814814);
                num3 = (short)Math.Round((double)freqSlopeVar * 27.61681646090535);
            }
            else
            {
                num2 = (uint)Math.Round((double)startFreqVar * 18641.35111111111);
                num3 = (short)Math.Round((double)freqSlopeVar * 20.712612345679013);
            }
            ushort num4 = (ushort)Math.Round((double)(idleTimeVar * 100f));
            ushort num5 = (ushort)Math.Round((double)(adcStartTimeVar * 100f));
            ushort fchirpStartIdx = m_ChirpConfigParams.fchirpStartIdx;
            ushort fchirpEndIdx = m_ChirpConfigParams.fchirpEndIdx;
            ushort loopCount = m_ChirpConfigParams.loopCount;
            if (chirpEndIdx < chirpStartIdx)
            {
                string full_command = string.Format("In ChirpConfig, ChirpEndIndex should always be greater than or equal to ChirpStartIndex ", new object[0]);
                m_GuiManager.RecordLog(0, full_command);
            }
            IntializeTheChirpSpecificData(chirpStartIdx, chirpEndIdx, cprofileId, num2, num3, num4, num5, m_ChirpConfigParams.tx1Enable, m_ChirpConfigParams.tx2Enable, m_ChirpConfigParams.tx3Enable);
            float num6 = CalculateFrameOnTimeForFrame(fchirpStartIdx, fchirpEndIdx, (uint)loopCount);
            float num7 = CalculateRampOnTimeForFrame(fchirpStartIdx, fchirpEndIdx, (uint)loopCount);
            ScriptOps.m_MainForm.ChirpConfigTab.UpdateFrameDutyCycle(Convert.ToString(Math.Round((double)(num6 / m_ChirpConfigParams.periodicity * 100f), 1)));
            ScriptOps.m_MainForm.ChirpConfigTab.UpdateFrameActiveRampDutyCycle(Convert.ToString(Math.Round((double)(num7 / m_ChirpConfigParams.periodicity * 100f), 1)));
            int num8;
            if (GlobalRef.g_NtvRS232Connect[(int)GlobalRef.g_RadarDeviceIndex] && GlobalRef.g_CasCadeDeviceSpiConnect == 0U)
            {
                num8 = m_TsWrapper.Calling_WriteAddr_Single(4294959848U, 1U);
                if (m_GuiManager.DllOps.itempDisconnect(false) == 0)
                {
                    string full_command2 = string.Format("Debug Port Disconnected", new object[0]);
                    m_GuiManager.RecordLog(0, full_command2);
                    if (!GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
                    {
                        iRs232ConnectDisconnect_impl();
                    }
                }
            }
            if (m_RadarDeviceModeConfigParams.NumberOfRadarDevicesDetected <= 1)
            {
                string full_command3 = string.Format("ar1.ChirpConfig({0}, {1}, {2}, {3}, {4}, {5}, {6}, {7}, {8}, {9})", new object[]
                {
                    (int)m_ChirpConfigParams.chirpStartIdx,
                    (int)m_ChirpConfigParams.chirpEndIdx,
                    (int)m_ChirpConfigParams.cprofileId,
                    m_ChirpConfigParams.startFreqVar,
                    m_ChirpConfigParams.freqSlopeVar,
                    m_ChirpConfigParams.idleTimeVar,
                    m_ChirpConfigParams.adcStartTimeVar,
                    (int)m_ChirpConfigParams.tx1Enable,
                    (int)m_ChirpConfigParams.tx2Enable,
                    (int)m_ChirpConfigParams.tx3Enable
                });
                m_GuiManager.RecordLog(9, full_command3);
            }
            else
            {
                string full_command4 = string.Format("ar1.ChirpConfig_mult({0}, {1}, {2}, {3}, {4}, {5}, {6}, {7}, {8}, {9},{10})", new object[]
                {
                    GlobalRef.g_RadarDeviceId,
                    (int)m_ChirpConfigParams.chirpStartIdx,
                    (int)m_ChirpConfigParams.chirpEndIdx,
                    (int)m_ChirpConfigParams.cprofileId,
                    m_ChirpConfigParams.startFreqVar,
                    m_ChirpConfigParams.freqSlopeVar,
                    m_ChirpConfigParams.idleTimeVar,
                    m_ChirpConfigParams.adcStartTimeVar,
                    (int)m_ChirpConfigParams.tx1Enable,
                    (int)m_ChirpConfigParams.tx2Enable,
                    (int)m_ChirpConfigParams.tx3Enable
                });
                m_GuiManager.RecordLog(9, full_command4);
            }
            uint g_RadarDeviceId = GlobalRef.g_RadarDeviceId;
            num8 = Imports.RadarLinkImpl_ChirpConfig(GlobalRef.g_RadarDeviceId, chirpStartIdx, chirpEndIdx, cprofileId, num2, num3, num4, num5, num);
            if ((num8 == 0 && ((GlobalRef.g_CasCadeDeviceSpiConnect & 1U) == 1U || (GlobalRef.g_CasCadeDeviceSpiConnect & 2U) == 2U || (GlobalRef.g_CasCadeDeviceSpiConnect & 4U) == 4U || (GlobalRef.g_CasCadeDeviceSpiConnect & 8U) == 8U)) || GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
            {
                string full_command5 = string.Format("Status: Passed", new object[0]);
                m_GuiManager.RecordLog(8, full_command5);
                int num9 = 0;
                while (num9 < 4 && !jsonConfigInProgress)
                {
                    if (((ulong)g_RadarDeviceId & (ulong)(1L << (num9 & 31))) != 0UL)
                    {
                        int mmwaveDevIndex = getMmwaveDevIndex(num9);
                        for (int i = 0; i < GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlChirps.Count; i++)
                        {
                            if ((int)chirpEndIdx >= GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlChirps[i].rlChirpCfg_t.chirpStartIdx && (int)chirpEndIdx < GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlChirps[i].rlChirpCfg_t.chirpEndIdx)
                            {
                                if ((int)chirpStartIdx > GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlChirps[i].rlChirpCfg_t.chirpStartIdx)
                                {
                                    RlChirps rlChirps = new RlChirps();
                                    rlChirps.rlChirpCfg_t = new RlChirpCfgT();
                                    rlChirps.rlChirpCfg_t.chirpStartIdx = (int)(chirpEndIdx + 1);
                                    rlChirps.rlChirpCfg_t.chirpEndIdx = GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlChirps[i].rlChirpCfg_t.chirpEndIdx;
                                    rlChirps.rlChirpCfg_t.profileId = GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlChirps[i].rlChirpCfg_t.profileId;
                                    rlChirps.rlChirpCfg_t.startFreqVar_MHz = GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlChirps[i].rlChirpCfg_t.startFreqVar_MHz;
                                    rlChirps.rlChirpCfg_t.freqSlopeVar_KHz_usec = GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlChirps[i].rlChirpCfg_t.freqSlopeVar_KHz_usec;
                                    rlChirps.rlChirpCfg_t.idleTimeVar_usec = GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlChirps[i].rlChirpCfg_t.idleTimeVar_usec;
                                    rlChirps.rlChirpCfg_t.adcStartTimeVar_usec = GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlChirps[i].rlChirpCfg_t.adcStartTimeVar_usec;
                                    rlChirps.rlChirpCfg_t.txEnable = GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlChirps[i].rlChirpCfg_t.txEnable;
                                    GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlChirps.Add(rlChirps);
                                    GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlChirps[i].rlChirpCfg_t.chirpEndIdx = (int)(chirpStartIdx - 1);
                                    break;
                                }
                                GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlChirps[i].rlChirpCfg_t.chirpStartIdx = (int)(chirpEndIdx + 1);
                            }
                            else if ((int)chirpEndIdx >= GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlChirps[i].rlChirpCfg_t.chirpEndIdx)
                            {
                                if ((int)chirpStartIdx > GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlChirps[i].rlChirpCfg_t.chirpStartIdx && (int)chirpStartIdx <= GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlChirps[i].rlChirpCfg_t.chirpEndIdx)
                                {
                                    GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlChirps[i].rlChirpCfg_t.chirpEndIdx = (int)(chirpStartIdx - 1);
                                }
                                else if ((int)chirpStartIdx <= GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlChirps[i].rlChirpCfg_t.chirpStartIdx)
                                {
                                    GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlChirps.Remove(GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlChirps[i]);
                                    i--;
                                }
                            }
                        }
                        RlChirps rlChirps2 = new RlChirps();
                        rlChirps2.rlChirpCfg_t = new RlChirpCfgT();
                        rlChirps2.rlChirpCfg_t.chirpStartIdx = (int)chirpStartIdx;
                        rlChirps2.rlChirpCfg_t.chirpEndIdx = (int)chirpEndIdx;
                        rlChirps2.rlChirpCfg_t.profileId = (int)cprofileId;
                        rlChirps2.rlChirpCfg_t.startFreqVar_MHz = (double)startFreqVar;
                        rlChirps2.rlChirpCfg_t.freqSlopeVar_KHz_usec = (double)freqSlopeVar;
                        rlChirps2.rlChirpCfg_t.idleTimeVar_usec = (double)idleTimeVar;
                        rlChirps2.rlChirpCfg_t.adcStartTimeVar_usec = (double)adcStartTimeVar;
                        rlChirps2.rlChirpCfg_t.txEnable = "0x" + num.ToString("X");
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlChirps.Add(rlChirps2);
                    }
                    num9++;
                }
                MatlabPostProcGuiInstance.MatlabPostProcImpl_ChirpConfig((double)chirpStartIdx, (double)chirpEndIdx, (double)cprofileId, num2, (double)num3, (double)num4, (double)num5, (double)num);
            }
            else
            {
                string msg = string.Format("Status: Failed, Error Type: {0}", new object[]
                {
                    GetErrorType(num8)
                });
                GlobalRef.LuaWrapper.PrintError(msg);
            }
            if (GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex] && iRs232ConnectDisconnect_impl() == 0 && !GlobalRef.g_NtvRS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
            {
                m_GuiManager.DllOps.iConnect(1U, 0U);
                string full_command6 = string.Format("Debug Port Reconnected!", new object[0]);
                m_GuiManager.RecordLog(9, full_command6);
                ScriptOps.KeepTrying(2000, new Func<bool>(spare_read));
            }
            return num8;
        }

        private int iSetAdvChirpConfig_Impl(bool is_starting_op, bool is_ending_op)
        {
            ushort chirpParamIdx = m_AdvChirpConfigParams.chirpParamIdx;
            byte resetMode = m_AdvChirpConfigParams.resetMode;
            byte patternMode = m_AdvChirpConfigParams.patternMode;
            ushort resetPeriod = m_AdvChirpConfigParams.resetPeriod;
            ushort paramUpdatePeriod = m_AdvChirpConfigParams.paramUpdatePeriod;
            int fixedDeltaInc = (int)Math.Round(Math.Round(m_AdvChirpConfigParams.fixedDeltaInc, 7) / 3600.0 * 67108864.0);
            int num;
            if (GlobalRef.g_NtvRS232Connect[(int)GlobalRef.g_RadarDeviceIndex] && GlobalRef.g_CasCadeDeviceSpiConnect == 0U)
            {
                num = m_TsWrapper.Calling_WriteAddr_Single(4294959848U, 1U);
                if (m_GuiManager.DllOps.itempDisconnect(false) == 0)
                {
                    string full_command = string.Format("Debug Port Disconnected", new object[0]);
                    m_GuiManager.RecordLog(0, full_command);
                    if (!GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
                    {
                        iRs232ConnectDisconnect_impl();
                    }
                }
            }
            if (m_RadarDeviceModeConfigParams.NumberOfRadarDevicesDetected == 1)
            {
                string full_command2 = string.Format("ar1.AdvChirpConfig({0}, {1}, {2}, {3}, {4}, {5})", new object[]
                {
                    (int)m_AdvChirpConfigParams.chirpParamIdx,
                    (int)m_AdvChirpConfigParams.resetMode,
                    (int)m_AdvChirpConfigParams.patternMode,
                    (int)m_AdvChirpConfigParams.resetPeriod,
                    m_AdvChirpConfigParams.paramUpdatePeriod,
                    m_AdvChirpConfigParams.fixedDeltaInc
                });
                m_GuiManager.RecordLog(9, full_command2);
            }
            else
            {
                string full_command3 = string.Format("ar1.AdvChirpConfig_mult({0}, {1}, {2}, {3}, {4}, {5}, {6})", new object[]
                {
                    GlobalRef.g_RadarDeviceId,
                    (int)m_AdvChirpConfigParams.chirpParamIdx,
                    (int)m_AdvChirpConfigParams.resetMode,
                    (int)m_AdvChirpConfigParams.patternMode,
                    (int)m_AdvChirpConfigParams.resetPeriod,
                    m_AdvChirpConfigParams.paramUpdatePeriod,
                    m_AdvChirpConfigParams.fixedDeltaInc
                });
                m_GuiManager.RecordLog(9, full_command3);
            }
            uint g_RadarDeviceId = GlobalRef.g_RadarDeviceId;
            num = Imports.RadarLinkImpl_AdvChirpConfig(GlobalRef.g_RadarDeviceId, chirpParamIdx, resetMode, patternMode, resetPeriod, paramUpdatePeriod, fixedDeltaInc);
            if ((num == 0 && ((GlobalRef.g_CasCadeDeviceSpiConnect & 1U) == 1U || (GlobalRef.g_CasCadeDeviceSpiConnect & 2U) == 2U || (GlobalRef.g_CasCadeDeviceSpiConnect & 4U) == 4U || (GlobalRef.g_CasCadeDeviceSpiConnect & 8U) == 8U)) || GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
            {
                string full_command4 = string.Format("Status: Passed", new object[0]);
                m_GuiManager.RecordLog(8, full_command4);
                for (int i = 0; i < 4; i++)
                {
                    if (jsonConfigInProgress)
                    {
                        break;
                    }
                    if (((ulong)g_RadarDeviceId & (ulong)(1L << (i & 31))) != 0UL)
                    {
                        int mmwaveDevIndex = getMmwaveDevIndex(i);
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlAdvChirpCfg_t.chirpParamIdx = chirpParamIdx;
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlAdvChirpCfg_t.resetMode = resetMode;
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlAdvChirpCfg_t.resetPeriod = resetPeriod;
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlAdvChirpCfg_t.patternMode = patternMode;
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlAdvChirpCfg_t.paramUpdatePeriod = paramUpdatePeriod;
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlAdvChirpCfg_t.fixedDeltaInc = m_AdvChirpConfigParams.fixedDeltaInc;
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlAdvChirpCfg_t.isConfigured = 1;
                    }
                }
            }
            else
            {
                string msg = string.Format("Status: Failed, Error Type: {0}", new object[]
                {
                    GetErrorType(num)
                });
                GlobalRef.LuaWrapper.PrintError(msg);
            }
            if (GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex] && iRs232ConnectDisconnect_impl() == 0 && !GlobalRef.g_NtvRS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
            {
                m_GuiManager.DllOps.iConnect(1U, 0U);
                string full_command5 = string.Format("Debug Port Reconnected!", new object[0]);
                m_GuiManager.RecordLog(9, full_command5);
                ScriptOps.KeepTrying(2000, new Func<bool>(spare_read));
            }
            return num;
        }

        private int iSetFrameConfig_Impl(bool is_starting_op, bool is_ending_op)
        {
            int num = 0;
            ushort fchirpStartIdx = m_ChirpConfigParams.fchirpStartIdx;
            ushort fchirpEndIdx = m_ChirpConfigParams.fchirpEndIdx;
            ushort frameCount = m_ChirpConfigParams.frameCount;
            ushort loopCount = m_ChirpConfigParams.loopCount;
            float periodicity = m_ChirpConfigParams.periodicity;
            float triggerDelay = m_ChirpConfigParams.triggerDelay;
            byte numDummyChirpsAtEnd = m_ChirpConfigParams.numDummyChirpsAtEnd;
            uint g_RadarDeviceId = GlobalRef.g_RadarDeviceId;
            uint num2 = 0U;
            for (int i = 0; i < 4; i++)
            {
                if (((ulong)g_RadarDeviceId & (ulong)(1L << (i & 31))) != 0UL)
                {
                    int mmwaveDevIndex = getMmwaveDevIndex(i);
                    int j = 0;
                    int[] array = new int[GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlChirps.Count];
                    int num3 = 0;
                    while (j < GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlChirps.Count)
                    {
                        if (GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlChirps[j].rlChirpCfg_t.chirpStartIdx >= (int)fchirpStartIdx && GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlChirps[j].rlChirpCfg_t.chirpEndIdx <= (int)fchirpEndIdx)
                        {
                            array[num3] = GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlChirps[j].rlChirpCfg_t.profileId;
                            num3++;
                        }
                        else if (GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlChirps[j].rlChirpCfg_t.chirpStartIdx <= (int)fchirpStartIdx && GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlChirps[j].rlChirpCfg_t.chirpEndIdx >= (int)fchirpStartIdx)
                        {
                            array[num3] = GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlChirps[j].rlChirpCfg_t.profileId;
                            num3++;
                        }
                        else if (GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlChirps[j].rlChirpCfg_t.chirpStartIdx <= (int)fchirpEndIdx && GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlChirps[j].rlChirpCfg_t.chirpEndIdx >= (int)fchirpEndIdx)
                        {
                            array[num3] = GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlChirps[j].rlChirpCfg_t.profileId;
                            num3++;
                        }
                        j++;
                    }
                    int numAdcSamples = GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlProfiles[array[0]].rlProfileCfg_t.numAdcSamples;
                    num2 = (uint)numAdcSamples;
                    for (int k = 0; k < num3; k++)
                    {
                        if (numAdcSamples != GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlProfiles[array[k]].rlProfileCfg_t.numAdcSamples)
                        {
                            MessageBox.Show("Number of ADC samples should be the same in all the chirps used for the frame!");
                            return -1;
                        }
                    }
                }
            }
            ushort testSourceEnable = m_ChirpConfigParams.testSourceEnable;
            ushort num4 = 0;
            ushort num5 = 1;
            ushort num6 = 1;
            ushort num7 = 0;
            string empty = string.Empty;
            float num8 = CalculateFrameOnTimeForFrame(fchirpStartIdx, fchirpEndIdx, (uint)loopCount);
            float num9 = CalculateRampOnTimeForFrame(fchirpStartIdx, fchirpEndIdx, (uint)loopCount);
            if (num8 > m_ChirpConfigParams.periodicity)
            {
                string str = string.Format("Frame duration needed is {0} ms\n", new object[]
                {
                    num8
                });
                string str2 = string.Format("Frame duration programmed is {0} ms \n", new object[]
                {
                    m_ChirpConfigParams.periodicity
                });
                string str3 = string.Format("ERROR:Frame duration programmed is less than what is actually needed!", new object[0]);
                MessageBox.Show(str2 + str + str3);
                return num;
            }
            ScriptOps.m_MainForm.ChirpConfigTab.UpdateFrameDutyCycle(Convert.ToString(Math.Round((double)(num8 / m_ChirpConfigParams.periodicity * 100f), 1)));
            ScriptOps.m_MainForm.ChirpConfigTab.UpdateFrameActiveRampDutyCycle(Convert.ToString(Math.Round((double)(num9 / m_ChirpConfigParams.periodicity * 100f), 1)));
            uint num10;
            if (m_StaticParams.FmtVal == 0 || m_StaticParams.FmtVal == 3)
            {
                num10 = num2;
            }
            else if (m_StaticParams.FmtVal == 1 || m_StaticParams.FmtVal == 2)
            {
                num10 = num2 * 2U;
            }
            else
            {
                num10 = num2;
            }
            uint num11 = (uint)Math.Round((double)(periodicity * 1000f * 200f));
            uint num12 = (uint)(triggerDelay * 200f);
            if (GlobalRef.g_NtvRS232Connect[(int)GlobalRef.g_RadarDeviceIndex] && GlobalRef.g_CasCadeDeviceSpiConnect == 0U)
            {
                num = m_TsWrapper.Calling_WriteAddr_Single(4294959848U, 1U);
                if (m_GuiManager.DllOps.itempDisconnect(false) == 0)
                {
                    string full_command = string.Format("Debug Port Disconnected", new object[0]);
                    m_GuiManager.RecordLog(0, full_command);
                    if (!GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
                    {
                        iRs232ConnectDisconnect_impl();
                    }
                }
            }
            if (testSourceEnable == 1)
            {
                if (GlobalRef.g_TestSource == 1U)
                {
                    GlobalRef.LuaWrapper.PrintWarning("Test Source Already Enabled...!!!");
                }
                GlobalRef.g_TestSource = 1U;
                if (m_RadarDeviceModeConfigParams.NumberOfRadarDevicesDetected <= 1)
                {
                    string full_command2 = string.Format("ar1.EnableTestSource({0})", new object[]
                    {
                        num6
                    });
                    m_GuiManager.RecordLog(11, full_command2);
                }
                else
                {
                    string full_command3 = string.Format("ar1.EnableTestSource_mult({0},{1})", new object[]
                    {
                        GlobalRef.g_RadarDeviceId,
                        num6
                    });
                    m_GuiManager.RecordLog(11, full_command3);
                }
                num = Imports.RadarLinkImpl_EnableTestSource(GlobalRef.g_RadarDeviceId, num6, num5);
                num4 = 1;
            }
            else
            {
                if (GlobalRef.g_TestSource == 0U)
                {
                    GlobalRef.LuaWrapper.PrintWarning("Test Source Already Disabled...!!!");
                }
                GlobalRef.g_TestSource = 0U;
                if (m_RadarDeviceModeConfigParams.NumberOfRadarDevicesDetected <= 1)
                {
                    string full_command4 = string.Format("ar1.DisableTestSource({0})", new object[]
                    {
                        num7
                    });
                    m_GuiManager.RecordLog(11, full_command4);
                }
                else
                {
                    string full_command5 = string.Format("ar1.DisableTestSource_mult({0},{1})", new object[]
                    {
                        GlobalRef.g_RadarDeviceId,
                        num7
                    });
                    m_GuiManager.RecordLog(11, full_command5);
                }
                num = Imports.RadarLinkImpl_EnableTestSource(GlobalRef.g_RadarDeviceId, num7, num5);
            }
            if (num4 == 1)
            {
                if ((num == 0 && ((GlobalRef.g_CasCadeDeviceSpiConnect & 1U) == 1U || (GlobalRef.g_CasCadeDeviceSpiConnect & 2U) == 2U || (GlobalRef.g_CasCadeDeviceSpiConnect & 4U) == 4U || (GlobalRef.g_CasCadeDeviceSpiConnect & 8U) == 8U)) || GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
                {
                    string full_command6 = string.Format("Status: Passed", new object[0]);
                    m_GuiManager.RecordLog(11, full_command6);
                    MatlabPostProcGuiInstance.MatlabPostProcImpl_EnableTestSource((double)num5, 1.0);
                }
                else
                {
                    string msg = string.Format("Status: Failed, Error Type: {0}", new object[]
                    {
                        GetErrorType(num)
                    });
                    GlobalRef.LuaWrapper.PrintError(msg);
                }
            }
            else if ((num == 0 && ((GlobalRef.g_CasCadeDeviceSpiConnect & 1U) == 1U || (GlobalRef.g_CasCadeDeviceSpiConnect & 2U) == 2U || (GlobalRef.g_CasCadeDeviceSpiConnect & 4U) == 4U || (GlobalRef.g_CasCadeDeviceSpiConnect & 8U) == 8U)) || GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
            {
                string full_command7 = string.Format("Status: Passed", new object[0]);
                m_GuiManager.RecordLog(11, full_command7);
                MatlabPostProcGuiInstance.MatlabPostProcImpl_EnableTestSource(0.0, 1.0);
            }
            else
            {
                string msg2 = string.Format("Status: Failed, Error Type: {0}", new object[]
                {
                    GetErrorType(num)
                });
                GlobalRef.LuaWrapper.PrintError(msg2);
            }
            if (m_RadarDeviceModeConfigParams.NumberOfRadarDevicesDetected <= 1)
            {
                string full_command8 = string.Format("ar1.FrameConfig({0}, {1}, {2}, {3}, {4}, {5}, {6}, {7})", new object[]
                {
                    (int)m_ChirpConfigParams.fchirpStartIdx,
                    (int)m_ChirpConfigParams.fchirpEndIdx,
                    (int)m_ChirpConfigParams.frameCount,
                    (int)m_ChirpConfigParams.loopCount,
                    m_ChirpConfigParams.periodicity,
                    m_ChirpConfigParams.triggerDelay,
                    m_ChirpConfigParams.numDummyChirpsAtEnd,
                    m_ChirpConfigParams.TriggerSelect
                });
                m_GuiManager.RecordLog(12, full_command8);
            }
            else
            {
                string full_command9 = string.Format("ar1.FrameConfig_mult({0}, {1}, {2}, {3}, {4}, {5}, {6}, {7}, {8})", new object[]
                {
                    GlobalRef.g_RadarDeviceId,
                    (int)m_ChirpConfigParams.fchirpStartIdx,
                    (int)m_ChirpConfigParams.fchirpEndIdx,
                    (int)m_ChirpConfigParams.frameCount,
                    (int)m_ChirpConfigParams.loopCount,
                    m_ChirpConfigParams.periodicity,
                    m_ChirpConfigParams.triggerDelay,
                    m_ChirpConfigParams.numDummyChirpsAtEnd,
                    m_ChirpConfigParams.TriggerSelect
                });
                m_GuiManager.RecordLog(12, full_command9);
            }
            uint g_RadarDeviceId2 = GlobalRef.g_RadarDeviceId;
            num = Imports.RadarLinkImpl_FrameConfig(GlobalRef.g_RadarDeviceId, fchirpStartIdx, fchirpEndIdx, frameCount, loopCount, num11, num12, num10, numDummyChirpsAtEnd, m_ChirpConfigParams.TriggerSelect, 0);
            if ((num == 0 && ((GlobalRef.g_CasCadeDeviceSpiConnect & 1U) == 1U || (GlobalRef.g_CasCadeDeviceSpiConnect & 2U) == 2U || (GlobalRef.g_CasCadeDeviceSpiConnect & 4U) == 4U || (GlobalRef.g_CasCadeDeviceSpiConnect & 8U) == 8U)) || GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
            {
                string full_command10 = string.Format("Status: Passed", new object[0]);
                m_GuiManager.RecordLog(8, full_command10);
                int num13 = 0;
                while (num13 < 4 && !jsonConfigInProgress)
                {
                    if (((ulong)g_RadarDeviceId2 & (ulong)(1L << (num13 & 31))) != 0UL)
                    {
                        int mmwaveDevIndex2 = getMmwaveDevIndex(num13);
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex2].rfConfig.rlFrameCfg_t.chirpStartIdx = (int)fchirpStartIdx;
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex2].rfConfig.rlFrameCfg_t.chirpEndIdx = (int)fchirpEndIdx;
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex2].rfConfig.rlFrameCfg_t.numFrames = (int)frameCount;
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex2].rfConfig.rlFrameCfg_t.numLoops = (int)loopCount;
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex2].rfConfig.rlFrameCfg_t.framePeriodicity_msec = periodicity;
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex2].rfConfig.rlFrameCfg_t.frameTriggerDelay = triggerDelay;
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex2].rfConfig.rlFrameCfg_t.numDummyChirpsAtEnd = numDummyChirpsAtEnd;
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex2].rfConfig.rlFrameCfg_t.triggerSelect = (int)m_ChirpConfigParams.TriggerSelect;
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex2].rfConfig.waveformType = "legacyFrameChirp";
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex2].rfConfig.rlFrameCfg_t.isConfigured = 1;
                    }
                    num13++;
                }
                if (loopCount != 1 && numDummyChirpsAtEnd != 0)
                {
                    GlobalRef.LuaWrapper.PrintError("Matlab Post Processing will not work properly if (chirp loops is not equal to 1 and dummy chirps is not equal to 0");
                }
                else
                {
                    MatlabPostProcGuiInstance.MatlabPostProcImpl_FrameConfig((double)fchirpStartIdx, (double)(fchirpEndIdx - (ushort)numDummyChirpsAtEnd), (double)frameCount, (double)loopCount, num11, num12, num10);
                }
                if (GlobalRef.g_2ChipCascade || GlobalRef.g_4ChipCascade)
                {
                    num13 = 0;
                    while (num13 < 4 && !jsonConfigInProgress)
                    {
                        if (((ulong)g_RadarDeviceId2 & (ulong)(1L << (num13 & 31))) != 0UL)
                        {
                            int mmwaveDevIndex2 = getMmwaveDevIndex(num13);
                            uint num14 = 0U;
                            uint num15 = 0U;
                            uint num16 = (uint)(GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex2].rfConfig.rlFrameCfg_t.numLoops * (GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex2].rfConfig.rlFrameCfg_t.chirpEndIdx - GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex2].rfConfig.rlFrameCfg_t.chirpStartIdx + 1));
                            for (uint num17 = Convert.ToUInt32(GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex2].rfConfig.rlChanCfg_t.p000006.Substring(2), 16); num17 != 0U; num17 >>= 1)
                            {
                                if ((num17 & 1U) == 1U)
                                {
                                    num14 += 1U;
                                }
                            }
                            uint num18;
                            if (GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex2].rfConfig.rlAdcOutCfg_t.fmt.b2AdcOutFmt == 1 || GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex2].rfConfig.rlAdcOutCfg_t.fmt.b2AdcOutFmt == 2)
                            {
                                num18 = 2U;
                            }
                            else
                            {
                                num18 = 1U;
                            }
                            for (int l = 0; l < GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex2].rfConfig.rlProfiles.Count; l++)
                            {
                                if ((ulong)num15 < (ulong)((long)GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex2].rfConfig.rlProfiles[l].rlProfileCfg_t.numAdcSamples))
                                {
                                    num15 = (uint)GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex2].rfConfig.rlProfiles[l].rlProfileCfg_t.numAdcSamples;
                                }
                            }
                            int numBits = ScriptOps.m_MainForm.StaticConfigTab.getNumBits();
                            int cqvalue = ScriptOps.m_MainForm.DataConfigTab.getCQvalue();
                            int num19 = 0;
                            decimal d = 0m;
                            if (Convert.ToUInt32(GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex2].rawDataCaptureConfig.rlDevDataPathCfg_t.p000016.Substring(2), 16) == 6U || Convert.ToUInt32(GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex2].rawDataCaptureConfig.rlDevDataPathCfg_t.p000016.Substring(2), 16) == 9U)
                            {
                                num19 = 2;
                                d = 0m;
                            }
                            if (Convert.ToUInt32(GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex2].rawDataCaptureConfig.rlDevDataPathCfg_t.p000016.Substring(2), 16) == 54U)
                            {
                                num19 = 2;
                                d = Math.Ceiling((Decimal)(cqvalue * 16 / numBits));
                            }
                            uint num20 = (uint)((long)(((ulong)(num18 * num15) + (ulong)((long)num19)) * (ulong)num14) + d);
                            GlobalRef.Width_TDA[num13] = num20;
                            GlobalRef.Height_TDA[num13] = num16;
                        }
                        num13++;
                    }
                    if (GlobalRef.g_RadarDeviceId == 1U)
                    {
                        GlobalRef.framePeriodicity_TDA = (uint)periodicity;
                    }
                }
            }
            else
            {
                string msg3 = string.Format("Status: Failed, Error Type: {0}", new object[]
                {
                    GetErrorType(num)
                });
                GlobalRef.LuaWrapper.PrintError(msg3);
            }
            if ((num != 0 || ((GlobalRef.g_CasCadeDeviceSpiConnect & 1U) != 1U && (GlobalRef.g_CasCadeDeviceSpiConnect & 2U) != 2U && (GlobalRef.g_CasCadeDeviceSpiConnect & 4U) != 4U && (GlobalRef.g_CasCadeDeviceSpiConnect & 8U) != 8U)) && !GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
            {
                string full_command11 = string.Format("MatlabProc Status: Failed", new object[0]);
                m_GuiManager.RecordLog(8, full_command11);
            }
            if (GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex] && iRs232ConnectDisconnect_impl() == 0 && !GlobalRef.g_NtvRS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
            {
                m_GuiManager.DllOps.iConnect(1U, 0U);
                string full_command12 = string.Format("Debug Port Reconnected!", new object[0]);
                m_GuiManager.RecordLog(9, full_command12);
                ScriptOps.KeepTrying(2000, new Func<bool>(spare_read));
            }
            return num;
        }

        public string InterpretConfigInvalidData(int ConfigInvalid)
        {
            string text = string.Empty;
            char c = '\t';
            char c2 = ',';
            string path = string.Empty;
            string directoryName = Path.GetDirectoryName(Application.StartupPath);
            path = string.Concat(new string[]
            {
                directoryName + "\\PostProc\\InvalidConfigErr.csv"
            });
            try
            {
                if (File.Exists(path))
                {
                    StreamReader streamReader = new StreamReader(path);
                    if (streamReader.Peek() != -1)
                    {
                        streamReader.ReadLine();
                    }
                    else
                    {
                        MessageBox.Show("File is Empty!!");
                    }
                    while (streamReader.Peek() != -1)
                    {
                        string[] array = streamReader.ReadLine().Split(new char[]
                        {
                            c2
                        });
                        if (!Convert.ToBoolean(ConfigInvalid))
                        {
                            if (Convert.ToBoolean(Convert.ToInt32(array[0]) == 0))
                            {
                                text += array[1];
                            }
                            return text;
                        }
                        if (Convert.ToBoolean(ConfigInvalid & 1) && Convert.ToBoolean(Convert.ToInt32(array[0]) == 1))
                        {
                            text += array[1];
                        }
                        else if (Convert.ToBoolean(ConfigInvalid & 2) && Convert.ToBoolean(Convert.ToInt32(array[0]) == 2))
                        {
                            text += array[1];
                        }
                        else if (Convert.ToBoolean(ConfigInvalid & 4) && Convert.ToBoolean(Convert.ToInt32(array[0]) == 4))
                        {
                            text += array[1];
                        }
                        else if (Convert.ToBoolean(ConfigInvalid & 8) && Convert.ToBoolean(Convert.ToInt32(array[0]) == 8))
                        {
                            text += array[1];
                        }
                        else if (Convert.ToBoolean(ConfigInvalid & 16) && Convert.ToBoolean(Convert.ToInt32(array[0]) == 16))
                        {
                            text += array[1];
                        }
                        else if (Convert.ToBoolean(ConfigInvalid & 32) && Convert.ToBoolean(Convert.ToInt32(array[0]) == 32))
                        {
                            text += array[1];
                        }
                        else if (Convert.ToBoolean(ConfigInvalid & 64) && Convert.ToBoolean(Convert.ToInt32(array[0]) == 64))
                        {
                            text += array[1];
                        }
                        else if (Convert.ToBoolean(ConfigInvalid & 128) && Convert.ToBoolean(Convert.ToInt32(array[0]) == 128))
                        {
                            text += array[1];
                        }
                        else if (Convert.ToBoolean(ConfigInvalid & 256) && Convert.ToBoolean(Convert.ToInt32(array[0]) == 256))
                        {
                            text += array[1];
                        }
                        else if (Convert.ToBoolean(ConfigInvalid & 512) && Convert.ToBoolean(Convert.ToInt32(array[0]) == 512))
                        {
                            text += array[1];
                        }
                        else if (Convert.ToBoolean(ConfigInvalid & 1024) && Convert.ToBoolean(Convert.ToInt32(array[0]) == 1024))
                        {
                            text += array[1];
                        }
                        else if (Convert.ToBoolean(ConfigInvalid & 2048) && Convert.ToBoolean(Convert.ToInt32(array[0]) == 2048))
                        {
                            text += array[1];
                        }
                    }
                    streamReader.Close();
                }
                else
                {
                    string full_command = string.Format("PostProc folder doesn't have InvalidConfigErr.csv. Please place it back", new object[0]);
                    m_GuiManager.RecordLog(0, full_command);
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.ToString());
            }
            return text.Replace(c.ToString(), "  # ");
        }

        private int iSetBpmChirpConfig_Impl(bool is_starting_op, bool is_ending_op)
        {
            ushort chirpStartIdx = m_BpmChirpConfigParams.chirpStartIdx;
            ushort chirpEndIdx = m_BpmChirpConfigParams.chirpEndIdx;
            ushort constBpmVal = (ushort)((int)m_BpmChirpConfigParams.tx0Off | (int)m_BpmChirpConfigParams.tx0On << 1 | (int)m_BpmChirpConfigParams.tx1Off << 2 | (int)m_BpmChirpConfigParams.tx1On << 3 | (int)m_BpmChirpConfigParams.tx2Off << 4 | (int)m_BpmChirpConfigParams.tx2On << 5);
            char p = (char)((int)m_BpmChirpConfigParams.tx0On | (int)m_BpmChirpConfigParams.tx1On << 1 | (int)m_BpmChirpConfigParams.tx2On << 2);
            char p2 = (char)((int)m_BpmChirpConfigParams.tx0Off | (int)m_BpmChirpConfigParams.tx1Off << 1 | (int)m_BpmChirpConfigParams.tx2Off << 2);
            IntializeTheBPMSpecificData(chirpStartIdx, chirpEndIdx, p, p2);
            int num;
            if (GlobalRef.g_NtvRS232Connect[(int)GlobalRef.g_RadarDeviceIndex] && GlobalRef.g_CasCadeDeviceSpiConnect == 0U)
            {
                num = m_TsWrapper.Calling_WriteAddr_Single(4294959848U, 1U);
                if (m_GuiManager.DllOps.itempDisconnect(false) == 0)
                {
                    string full_command = string.Format("Debug Port Disconnected", new object[0]);
                    m_GuiManager.RecordLog(0, full_command);
                    if (!GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
                    {
                        iRs232ConnectDisconnect_impl();
                    }
                }
            }
            if (!GlobalRef.g_BpmCmnConfig)
            {
                num = Imports.RadarLinkImpl_BpmCommonConfig(GlobalRef.g_RadarDeviceId, 0, 0, 0, 0, 0, 0);
                if (num != 0)
                {
                    return num;
                }
                GlobalRef.g_BpmCmnConfig = true;
            }
            uint g_RadarDeviceId = GlobalRef.g_RadarDeviceId;
            if (m_RadarDeviceModeConfigParams.NumberOfRadarDevicesDetected <= 1)
            {
                string full_command2 = string.Format("ar1.BpmConfig({0}, {1}, {2}, {3}, {4}, {5}, {6}, {7})", new object[]
                {
                    chirpStartIdx,
                    chirpEndIdx,
                    m_BpmChirpConfigParams.tx0Off,
                    m_BpmChirpConfigParams.tx0On,
                    m_BpmChirpConfigParams.tx1Off,
                    m_BpmChirpConfigParams.tx1On,
                    m_BpmChirpConfigParams.tx2Off,
                    m_BpmChirpConfigParams.tx2On
                });
                m_GuiManager.RecordLog(14, full_command2);
                num = Imports.RadarLinkImpl_BpmChirpConfig(GlobalRef.g_RadarDeviceId, chirpStartIdx, chirpEndIdx, constBpmVal);
            }
            else
            {
                string full_command3 = string.Format("ar1.BpmConfig_mult({0}, {1}, {2}, {3}, {4}, {5}, {6}, {7},{8})", new object[]
                {
                    GlobalRef.g_RadarDeviceId,
                    chirpStartIdx,
                    chirpEndIdx,
                    m_BpmChirpConfigParams.tx0Off,
                    m_BpmChirpConfigParams.tx0On,
                    m_BpmChirpConfigParams.tx1Off,
                    m_BpmChirpConfigParams.tx1On,
                    m_BpmChirpConfigParams.tx2Off,
                    m_BpmChirpConfigParams.tx2On
                });
                m_GuiManager.RecordLog(14, full_command3);
                num = Imports.RadarLinkImpl_BpmChirpConfig(GlobalRef.g_RadarDeviceId, chirpStartIdx, chirpEndIdx, constBpmVal);
            }
            if ((num == 0 && ((GlobalRef.g_CasCadeDeviceSpiConnect & 1U) == 1U || (GlobalRef.g_CasCadeDeviceSpiConnect & 2U) == 2U || (GlobalRef.g_CasCadeDeviceSpiConnect & 4U) == 4U || (GlobalRef.g_CasCadeDeviceSpiConnect & 8U) == 8U)) || GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
            {
                string full_command4 = string.Format("Status: Passed", new object[0]);
                m_GuiManager.RecordLog(8, full_command4);
                for (int i = 0; i < 4; i++)
                {
                    if (jsonConfigInProgress)
                    {
                        break;
                    }
                    if (((ulong)g_RadarDeviceId & (ulong)(1L << (i & 31))) != 0UL)
                    {
                        int mmwaveDevIndex = getMmwaveDevIndex(i);
                        for (int j = 0; j < GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.p000012.Count; j++)
                        {
                            if ((int)chirpEndIdx >= GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.p000012[j].p000008.chirpStartIdx && (int)chirpEndIdx < GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.p000012[j].p000008.chirpEndIdx)
                            {
                                if ((int)chirpStartIdx > GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.p000012[j].p000008.chirpStartIdx)
                                {
                                    c0001d7 c0001d = new c0001d7();
                                    c0001d.p000008 = new c0001d6();
                                    c0001d.p000008.chirpStartIdx = (int)(chirpEndIdx + 1);
                                    c0001d.p000008.chirpEndIdx = GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.p000012[j].p000008.chirpEndIdx;
                                    c0001d.p000008.constBpmVal = GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.p000012[j].p000008.constBpmVal;
                                    GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.p000012.Add(c0001d);
                                    GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.p000012[j].p000008.chirpEndIdx = (int)(chirpStartIdx - 1);
                                    break;
                                }
                                GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.p000012[j].p000008.chirpStartIdx = (int)(chirpEndIdx + 1);
                            }
                            else if ((int)chirpEndIdx >= GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.p000012[j].p000008.chirpEndIdx)
                            {
                                if ((int)chirpStartIdx > GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.p000012[j].p000008.chirpStartIdx && (int)chirpStartIdx <= GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.p000012[j].p000008.chirpEndIdx)
                                {
                                    GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.p000012[j].p000008.chirpEndIdx = (int)(chirpStartIdx - 1);
                                }
                                else if ((int)chirpStartIdx <= GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.p000012[j].p000008.chirpStartIdx)
                                {
                                    GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.p000012.Remove(GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.p000012[j]);
                                    j--;
                                }
                            }
                        }
                        c0001d7 c0001d2 = new c0001d7();
                        c0001d2.p000008 = new c0001d6();
                        c0001d2.p000008.chirpStartIdx = (int)chirpStartIdx;
                        c0001d2.p000008.chirpEndIdx = (int)chirpEndIdx;
                        c0001d2.p000008.constBpmVal = "0x" + constBpmVal.ToString("X");
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.p000012.Add(c0001d2);
                    }
                }
            }
            else
            {
                string msg = string.Format("Status: Failed, Error Type: {0}", new object[]
                {
                    GetErrorType(num)
                });
                GlobalRef.LuaWrapper.PrintError(msg);
            }
            if (GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
            {
                if (iRs232ConnectDisconnect_impl() == 0 && !GlobalRef.g_NtvRS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
                {
                    m_GuiManager.DllOps.iConnect(1U, 0U);
                    string full_command5 = string.Format("Debug Port Reconnected!", new object[0]);
                    m_GuiManager.RecordLog(9, full_command5);
                    ScriptOps.KeepTrying(2000, new Func<bool>(spare_read));
                }
            }
            else if (GlobalRef.g_CasCadeDeviceSpiConnect == 0U)
            {
                string full_command6 = string.Format("Error Occurred in Port open close", new object[0]);
                m_GuiManager.RecordLog(9, full_command6);
            }
            return num;
        }

        private int iSetPerChirpPhaseShifterpConfig_Impl(bool is_starting_op, bool is_ending_op)
        {
            ushort chirpStartIdx = m_PerChirpPhaseShifterConfigParams.chirpStartIdx;
            ushort chirpEndIdx = m_PerChirpPhaseShifterConfigParams.chirpEndIdx;
            RFPhaseShifterParam.chirpStartIdx = m_PerChirpPhaseShifterConfigParams.chirpStartIdx;
            RFPhaseShifterParam.chirpEndIdx = m_PerChirpPhaseShifterConfigParams.chirpEndIdx;
            RFPhaseShifterParam.Tx0PhaseShifter = (byte)(m_PerChirpPhaseShifterConfigParams.Tx0PhaseShifter << 2);
            int tx0PhaseShifter = (int)m_PerChirpPhaseShifterConfigParams.Tx0PhaseShifter;
            RFPhaseShifterParam.Tx1PhaseShifter = (byte)(m_PerChirpPhaseShifterConfigParams.Tx1PhaseShifter << 2);
            int tx1PhaseShifter = (int)m_PerChirpPhaseShifterConfigParams.Tx1PhaseShifter;
            RFPhaseShifterParam.Tx2PhaseShifter = (byte)(m_PerChirpPhaseShifterConfigParams.Tx2PhaseShifter << 2);
            int tx2PhaseShifter = (int)m_PerChirpPhaseShifterConfigParams.Tx2PhaseShifter;
            IntPtr data = GCHandle.Alloc(RFPhaseShifterParam, GCHandleType.Pinned).AddrOfPinnedObject();
            int num;
            if (GlobalRef.g_NtvRS232Connect[(int)GlobalRef.g_RadarDeviceIndex] && GlobalRef.g_CasCadeDeviceSpiConnect == 0U)
            {
                num = m_TsWrapper.Calling_WriteAddr_Single(4294959848U, 1U);
                if (m_GuiManager.DllOps.itempDisconnect(false) == 0)
                {
                    string full_command = string.Format("Debug Port Disconnected", new object[0]);
                    m_GuiManager.RecordLog(0, full_command);
                    if (!GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
                    {
                        iRs232ConnectDisconnect_impl();
                    }
                }
            }
            if (m_RadarDeviceModeConfigParams.NumberOfRadarDevicesDetected <= 1)
            {
                string full_command2 = string.Format("ar1.SetPerChirpPhaseShifterConfig({0}, {1}, {2}, {3}, {4})", new object[]
                {
                    m_PerChirpPhaseShifterConfigParams.chirpStartIdx,
                    m_PerChirpPhaseShifterConfigParams.chirpEndIdx,
                    m_PerChirpPhaseShifterConfigParams.Tx0PhaseShifter,
                    m_PerChirpPhaseShifterConfigParams.Tx1PhaseShifter,
                    m_PerChirpPhaseShifterConfigParams.Tx2PhaseShifter
                });
                m_GuiManager.RecordLog(14, full_command2);
            }
            else
            {
                string full_command3 = string.Format("ar1.SetPerChirpPhaseShifterConfig_mult({0}, {1}, {2}, {3}, {4}, {5})", new object[]
                {
                    GlobalRef.g_RadarDeviceId,
                    m_PerChirpPhaseShifterConfigParams.chirpStartIdx,
                    m_PerChirpPhaseShifterConfigParams.chirpEndIdx,
                    m_PerChirpPhaseShifterConfigParams.Tx0PhaseShifter,
                    m_PerChirpPhaseShifterConfigParams.Tx1PhaseShifter,
                    m_PerChirpPhaseShifterConfigParams.Tx2PhaseShifter
                });
                m_GuiManager.RecordLog(14, full_command3);
            }
            uint g_RadarDeviceId = GlobalRef.g_RadarDeviceId;
            num = Imports.RadarLinkImpl_SetPhaseShiftConfig(GlobalRef.g_RadarDeviceId, data);
            if ((num == 0 && ((GlobalRef.g_CasCadeDeviceSpiConnect & 1U) == 1U || (GlobalRef.g_CasCadeDeviceSpiConnect & 2U) == 2U || (GlobalRef.g_CasCadeDeviceSpiConnect & 4U) == 4U || (GlobalRef.g_CasCadeDeviceSpiConnect & 8U) == 8U)) || GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
            {
                string full_command4 = string.Format("Status: Passed", new object[0]);
                m_GuiManager.RecordLog(8, full_command4);
                int num2 = 0;
                while (num2 < 4 && !jsonConfigInProgress)
                {
                    if (((ulong)g_RadarDeviceId & (ulong)(1L << (num2 & 31))) != 0UL)
                    {
                        int mmwaveDevIndex = getMmwaveDevIndex(num2);
                        for (int i = 0; i < GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.p000015.Count; i++)
                        {
                            if ((int)chirpEndIdx >= GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.p000015[i].rlRfPhaseShiftCfg_t.chirpStartIdx && (int)chirpEndIdx < GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.p000015[i].rlRfPhaseShiftCfg_t.chirpEndIdx)
                            {
                                if ((int)chirpStartIdx > GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.p000015[i].rlRfPhaseShiftCfg_t.chirpStartIdx)
                                {
                                    RlRfPhaseShiftCfgT rlRfPhaseShiftCfgT = new RlRfPhaseShiftCfgT();
                                    rlRfPhaseShiftCfgT.rlRfPhaseShiftCfg_t = new RlRfPhaseShiftCfgT2();
                                    rlRfPhaseShiftCfgT.rlRfPhaseShiftCfg_t.chirpStartIdx = (int)(chirpEndIdx + 1);
                                    rlRfPhaseShiftCfgT.rlRfPhaseShiftCfg_t.chirpEndIdx = GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.p000015[i].rlRfPhaseShiftCfg_t.chirpEndIdx;
                                    rlRfPhaseShiftCfgT.rlRfPhaseShiftCfg_t.tx0PhaseShift = GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.p000015[i].rlRfPhaseShiftCfg_t.tx0PhaseShift;
                                    rlRfPhaseShiftCfgT.rlRfPhaseShiftCfg_t.tx1PhaseShift = GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.p000015[i].rlRfPhaseShiftCfg_t.tx1PhaseShift;
                                    rlRfPhaseShiftCfgT.rlRfPhaseShiftCfg_t.tx2PhaseShift = GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.p000015[i].rlRfPhaseShiftCfg_t.tx2PhaseShift;
                                    GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.p000015.Add(rlRfPhaseShiftCfgT);
                                    GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.p000015[i].rlRfPhaseShiftCfg_t.chirpEndIdx = (int)(chirpStartIdx - 1);
                                    break;
                                }
                                GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.p000015[i].rlRfPhaseShiftCfg_t.chirpStartIdx = (int)(chirpEndIdx + 1);
                            }
                            else if ((int)chirpEndIdx >= GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.p000015[i].rlRfPhaseShiftCfg_t.chirpEndIdx)
                            {
                                if ((int)chirpStartIdx > GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.p000015[i].rlRfPhaseShiftCfg_t.chirpStartIdx && (int)chirpStartIdx <= GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.p000015[i].rlRfPhaseShiftCfg_t.chirpEndIdx)
                                {
                                    GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.p000015[i].rlRfPhaseShiftCfg_t.chirpEndIdx = (int)(chirpStartIdx - 1);
                                }
                                else if ((int)chirpStartIdx <= GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.p000015[i].rlRfPhaseShiftCfg_t.chirpStartIdx)
                                {
                                    GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.p000015.Remove(GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.p000015[i]);
                                    i--;
                                }
                            }
                        }
                        RlRfPhaseShiftCfgT rlRfPhaseShiftCfgT2 = new RlRfPhaseShiftCfgT();
                        rlRfPhaseShiftCfgT2.rlRfPhaseShiftCfg_t = new RlRfPhaseShiftCfgT2();
                        rlRfPhaseShiftCfgT2.rlRfPhaseShiftCfg_t.chirpStartIdx = (int)chirpStartIdx;
                        rlRfPhaseShiftCfgT2.rlRfPhaseShiftCfg_t.chirpEndIdx = (int)chirpEndIdx;
                        rlRfPhaseShiftCfgT2.rlRfPhaseShiftCfg_t.tx0PhaseShift = tx0PhaseShifter;
                        rlRfPhaseShiftCfgT2.rlRfPhaseShiftCfg_t.tx1PhaseShift = tx1PhaseShifter;
                        rlRfPhaseShiftCfgT2.rlRfPhaseShiftCfg_t.tx2PhaseShift = tx2PhaseShifter;
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.p000015.Add(rlRfPhaseShiftCfgT2);
                    }
                    num2++;
                }
                MatlabPostProcGuiInstance.MatlabPostProcImpl_PerChirpPhaseShifterConfig((double)chirpStartIdx, (double)chirpEndIdx, (double)tx0PhaseShifter, (double)tx1PhaseShifter, (double)tx2PhaseShifter);
            }
            else
            {
                string msg = string.Format("Status: Failed, Error Type: {0}", new object[]
                {
                    GetErrorType(num)
                });
                GlobalRef.LuaWrapper.PrintError(msg);
            }
            if (GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
            {
                if (iRs232ConnectDisconnect_impl() == 0 && !GlobalRef.g_NtvRS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
                {
                    m_GuiManager.DllOps.iConnect(1U, 0U);
                    string full_command5 = string.Format("Debug Port Reconnected!", new object[0]);
                    m_GuiManager.RecordLog(9, full_command5);
                    ScriptOps.KeepTrying(2000, new Func<bool>(spare_read));
                }
            }
            else if (GlobalRef.g_CasCadeDeviceSpiConnect == 0U)
            {
                string full_command6 = string.Format("Error Occurred in Port open close", new object[0]);
                m_GuiManager.RecordLog(9, full_command6);
            }
            return num;
        }

        private int iSetAdvanceBPMPatternConfig_Impl(bool is_starting_op, bool is_ending_op)
        {
            AdvanceBPMPatternParam.BPMPatternIndex = m_AdvanceBPMPatternConfigParams.BPMPatternIndex;
            AdvanceBPMPatternParam.Reserved = 0;
            AdvanceBPMPatternParam.ResetOption = m_AdvanceBPMPatternConfigParams.ResetOption;
            AdvanceBPMPatternParam.Reserved1 = 0;
            AdvanceBPMPatternParam.Reserved2 = 0;
            AdvanceBPMPatternParam.Tx0BPMpattern0 = m_AdvanceBPMPatternConfigParams.Tx0BPMpattern0;
            AdvanceBPMPatternParam.Tx0BPMpattern1 = m_AdvanceBPMPatternConfigParams.Tx0BPMpattern1;
            AdvanceBPMPatternParam.Tx0BPMpattern2 = m_AdvanceBPMPatternConfigParams.Tx0BPMpattern2;
            AdvanceBPMPatternParam.Tx0BPMpattern3 = m_AdvanceBPMPatternConfigParams.Tx0BPMpattern3;
            AdvanceBPMPatternParam.Tx0BPMpattern4 = m_AdvanceBPMPatternConfigParams.Tx0BPMpattern4;
            AdvanceBPMPatternParam.Tx0BPMpattern5 = m_AdvanceBPMPatternConfigParams.Tx0BPMpattern5;
            AdvanceBPMPatternParam.Tx0BPMpattern6 = m_AdvanceBPMPatternConfigParams.Tx0BPMpattern6;
            AdvanceBPMPatternParam.Tx0BPMpattern7 = m_AdvanceBPMPatternConfigParams.Tx0BPMpattern7;
            AdvanceBPMPatternParam.Tx0BPMpattern8 = m_AdvanceBPMPatternConfigParams.Tx0BPMpattern8;
            AdvanceBPMPatternParam.Tx0BPMpattern9 = m_AdvanceBPMPatternConfigParams.Tx0BPMpattern9;
            AdvanceBPMPatternParam.Tx0BPMpattern10 = m_AdvanceBPMPatternConfigParams.Tx0BPMpattern10;
            AdvanceBPMPatternParam.Tx0BPMpattern11 = m_AdvanceBPMPatternConfigParams.Tx0BPMpattern11;
            AdvanceBPMPatternParam.Tx0BPMpattern12 = m_AdvanceBPMPatternConfigParams.Tx0BPMpattern12;
            AdvanceBPMPatternParam.Tx0BPMpattern13 = m_AdvanceBPMPatternConfigParams.Tx0BPMpattern13;
            AdvanceBPMPatternParam.Tx0BPMpattern14 = m_AdvanceBPMPatternConfigParams.Tx0BPMpattern14;
            AdvanceBPMPatternParam.Tx0BPMpattern15 = m_AdvanceBPMPatternConfigParams.Tx0BPMpattern15;
            AdvanceBPMPatternParam.Tx1BPMpattern0 = m_AdvanceBPMPatternConfigParams.Tx1BPMpattern0;
            AdvanceBPMPatternParam.Tx1BPMpattern1 = m_AdvanceBPMPatternConfigParams.Tx1BPMpattern1;
            AdvanceBPMPatternParam.Tx1BPMpattern2 = m_AdvanceBPMPatternConfigParams.Tx1BPMpattern2;
            AdvanceBPMPatternParam.Tx1BPMpattern3 = m_AdvanceBPMPatternConfigParams.Tx1BPMpattern3;
            AdvanceBPMPatternParam.Tx1BPMpattern4 = m_AdvanceBPMPatternConfigParams.Tx1BPMpattern4;
            AdvanceBPMPatternParam.Tx1BPMpattern5 = m_AdvanceBPMPatternConfigParams.Tx1BPMpattern5;
            AdvanceBPMPatternParam.Tx1BPMpattern6 = m_AdvanceBPMPatternConfigParams.Tx1BPMpattern6;
            AdvanceBPMPatternParam.Tx1BPMpattern7 = m_AdvanceBPMPatternConfigParams.Tx1BPMpattern7;
            AdvanceBPMPatternParam.Tx1BPMpattern8 = m_AdvanceBPMPatternConfigParams.Tx1BPMpattern8;
            AdvanceBPMPatternParam.Tx1BPMpattern9 = m_AdvanceBPMPatternConfigParams.Tx1BPMpattern9;
            AdvanceBPMPatternParam.Tx1BPMpattern10 = m_AdvanceBPMPatternConfigParams.Tx1BPMpattern10;
            AdvanceBPMPatternParam.Tx1BPMpattern11 = m_AdvanceBPMPatternConfigParams.Tx1BPMpattern11;
            AdvanceBPMPatternParam.Tx1BPMpattern12 = m_AdvanceBPMPatternConfigParams.Tx1BPMpattern12;
            AdvanceBPMPatternParam.Tx1BPMpattern13 = m_AdvanceBPMPatternConfigParams.Tx1BPMpattern13;
            AdvanceBPMPatternParam.Tx1BPMpattern14 = m_AdvanceBPMPatternConfigParams.Tx1BPMpattern14;
            AdvanceBPMPatternParam.Tx1BPMpattern15 = m_AdvanceBPMPatternConfigParams.Tx1BPMpattern15;
            AdvanceBPMPatternParam.Tx2BPMpattern0 = m_AdvanceBPMPatternConfigParams.Tx2BPMpattern0;
            AdvanceBPMPatternParam.Tx2BPMpattern1 = m_AdvanceBPMPatternConfigParams.Tx2BPMpattern1;
            AdvanceBPMPatternParam.Tx2BPMpattern2 = m_AdvanceBPMPatternConfigParams.Tx2BPMpattern2;
            AdvanceBPMPatternParam.Tx2BPMpattern3 = m_AdvanceBPMPatternConfigParams.Tx2BPMpattern3;
            AdvanceBPMPatternParam.Tx2BPMpattern4 = m_AdvanceBPMPatternConfigParams.Tx2BPMpattern4;
            AdvanceBPMPatternParam.Tx2BPMpattern5 = m_AdvanceBPMPatternConfigParams.Tx2BPMpattern5;
            AdvanceBPMPatternParam.Tx2BPMpattern6 = m_AdvanceBPMPatternConfigParams.Tx2BPMpattern6;
            AdvanceBPMPatternParam.Tx2BPMpattern7 = m_AdvanceBPMPatternConfigParams.Tx2BPMpattern7;
            AdvanceBPMPatternParam.Tx2BPMpattern8 = m_AdvanceBPMPatternConfigParams.Tx2BPMpattern8;
            AdvanceBPMPatternParam.Tx2BPMpattern9 = m_AdvanceBPMPatternConfigParams.Tx2BPMpattern9;
            AdvanceBPMPatternParam.Tx2BPMpattern10 = m_AdvanceBPMPatternConfigParams.Tx2BPMpattern10;
            AdvanceBPMPatternParam.Tx2BPMpattern11 = m_AdvanceBPMPatternConfigParams.Tx2BPMpattern11;
            AdvanceBPMPatternParam.Tx2BPMpattern12 = m_AdvanceBPMPatternConfigParams.Tx2BPMpattern12;
            AdvanceBPMPatternParam.Tx2BPMpattern13 = m_AdvanceBPMPatternConfigParams.Tx2BPMpattern13;
            AdvanceBPMPatternParam.Tx2BPMpattern14 = m_AdvanceBPMPatternConfigParams.Tx2BPMpattern14;
            AdvanceBPMPatternParam.Tx2BPMpattern15 = m_AdvanceBPMPatternConfigParams.Tx2BPMpattern15;
            IntPtr data = GCHandle.Alloc(AdvanceBPMPatternParam, GCHandleType.Pinned).AddrOfPinnedObject();
            int num;
            if (GlobalRef.g_NtvRS232Connect[(int)GlobalRef.g_RadarDeviceIndex] && GlobalRef.g_CasCadeDeviceSpiConnect == 0U)
            {
                num = m_TsWrapper.Calling_WriteAddr_Single(4294959848U, 1U);
                if (m_GuiManager.DllOps.itempDisconnect(false) == 0)
                {
                    string full_command = string.Format("Debug Port Disconnected", new object[0]);
                    m_GuiManager.RecordLog(0, full_command);
                    if (!GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
                    {
                        iRs232ConnectDisconnect_impl();
                    }
                }
            }
            Thread.Sleep(200);
            if (m_RadarDeviceModeConfigParams.NumberOfRadarDevicesDetected <= 1)
            {
                string full_command2 = string.Format("ar1.SetAdvBpmPatternConfig(0x{0:X}, 0x{1:X}, 0x{2:X}, 0x{3:X}, 0x{4:X}, 0x{5:X}, 0x{6:X}, 0x{7:X}, 0x{8:X}, 0x{9:X}, 0x{10:X}, 0x{11:X}, 0x{12:X}, 0x{13:X}, 0x{14:X}, 0x{15:X}, 0x{16:X}, 0x{17:X}, 0x{18:X}, 0x{19:X}, 0x{20:X}, 0x{21:X}, 0x{22:X}, 0x{23:X}, 0x{24:X}, 0x{25:X}, 0x{26:X}, 0x{27:X}, 0x{28:X}, 0x{29:X}, 0x{30:X}, 0x{31:X}, 0x{32:X}, 0x{33:X}, 0x{34:X}, 0x{35:X}, 0x{36:X}, 0x{37:X}, 0x{38:X}, 0x{39:X}, 0x{40:X}, 0x{41:X}, 0x{42:X}, 0x{43:X}, 0x{44:X}, 0x{45:X}, 0x{46:X}, 0x{47:X}, 0x{48:X}, 0x{49:X}, 0x{50:X}, 0x{51:X}, 0x{52:X} )", new object[]
                {
                    m_AdvanceBPMPatternConfigParams.BPMPatternIndex,
                    m_AdvanceBPMPatternConfigParams.Reserved,
                    m_AdvanceBPMPatternConfigParams.ResetOption,
                    m_AdvanceBPMPatternConfigParams.Reserved1,
                    m_AdvanceBPMPatternConfigParams.Reserved2,
                    m_AdvanceBPMPatternConfigParams.Tx0BPMpattern0,
                    m_AdvanceBPMPatternConfigParams.Tx0BPMpattern1,
                    m_AdvanceBPMPatternConfigParams.Tx0BPMpattern2,
                    m_AdvanceBPMPatternConfigParams.Tx0BPMpattern3,
                    m_AdvanceBPMPatternConfigParams.Tx0BPMpattern4,
                    m_AdvanceBPMPatternConfigParams.Tx0BPMpattern5,
                    m_AdvanceBPMPatternConfigParams.Tx0BPMpattern6,
                    m_AdvanceBPMPatternConfigParams.Tx0BPMpattern7,
                    m_AdvanceBPMPatternConfigParams.Tx0BPMpattern8,
                    m_AdvanceBPMPatternConfigParams.Tx0BPMpattern9,
                    m_AdvanceBPMPatternConfigParams.Tx0BPMpattern10,
                    m_AdvanceBPMPatternConfigParams.Tx0BPMpattern11,
                    m_AdvanceBPMPatternConfigParams.Tx0BPMpattern12,
                    m_AdvanceBPMPatternConfigParams.Tx0BPMpattern13,
                    m_AdvanceBPMPatternConfigParams.Tx0BPMpattern14,
                    m_AdvanceBPMPatternConfigParams.Tx0BPMpattern15,
                    m_AdvanceBPMPatternConfigParams.Tx1BPMpattern0,
                    m_AdvanceBPMPatternConfigParams.Tx1BPMpattern1,
                    m_AdvanceBPMPatternConfigParams.Tx1BPMpattern2,
                    m_AdvanceBPMPatternConfigParams.Tx1BPMpattern3,
                    m_AdvanceBPMPatternConfigParams.Tx1BPMpattern4,
                    m_AdvanceBPMPatternConfigParams.Tx1BPMpattern5,
                    m_AdvanceBPMPatternConfigParams.Tx1BPMpattern6,
                    m_AdvanceBPMPatternConfigParams.Tx1BPMpattern7,
                    m_AdvanceBPMPatternConfigParams.Tx1BPMpattern8,
                    m_AdvanceBPMPatternConfigParams.Tx1BPMpattern9,
                    m_AdvanceBPMPatternConfigParams.Tx1BPMpattern10,
                    m_AdvanceBPMPatternConfigParams.Tx1BPMpattern11,
                    m_AdvanceBPMPatternConfigParams.Tx1BPMpattern12,
                    m_AdvanceBPMPatternConfigParams.Tx1BPMpattern13,
                    m_AdvanceBPMPatternConfigParams.Tx1BPMpattern14,
                    m_AdvanceBPMPatternConfigParams.Tx1BPMpattern15,
                    m_AdvanceBPMPatternConfigParams.Tx2BPMpattern0,
                    m_AdvanceBPMPatternConfigParams.Tx2BPMpattern1,
                    m_AdvanceBPMPatternConfigParams.Tx2BPMpattern2,
                    m_AdvanceBPMPatternConfigParams.Tx2BPMpattern3,
                    m_AdvanceBPMPatternConfigParams.Tx2BPMpattern4,
                    m_AdvanceBPMPatternConfigParams.Tx2BPMpattern5,
                    m_AdvanceBPMPatternConfigParams.Tx2BPMpattern6,
                    m_AdvanceBPMPatternConfigParams.Tx2BPMpattern7,
                    m_AdvanceBPMPatternConfigParams.Tx2BPMpattern8,
                    m_AdvanceBPMPatternConfigParams.Tx2BPMpattern9,
                    m_AdvanceBPMPatternConfigParams.Tx2BPMpattern10,
                    m_AdvanceBPMPatternConfigParams.Tx2BPMpattern11,
                    m_AdvanceBPMPatternConfigParams.Tx2BPMpattern12,
                    m_AdvanceBPMPatternConfigParams.Tx2BPMpattern13,
                    m_AdvanceBPMPatternConfigParams.Tx2BPMpattern14,
                    m_AdvanceBPMPatternConfigParams.Tx2BPMpattern15
                });
                m_GuiManager.RecordLog(14, full_command2);
            }
            else
            {
                string full_command3 = string.Format("ar1.SetAdvBpmPatternConfig_mult(0x{0:X}, 0x{1:X}, 0x{2:X}, 0x{3:X}, 0x{4:X}, 0x{5:X}, 0x{6:X}, 0x{7:X}, 0x{8:X}, 0x{9:X}, 0x{10:X}, 0x{11:X}, 0x{12:X}, 0x{13:X}, 0x{14:X}, 0x{15:X}, 0x{16:X}, 0x{17:X}, 0x{18:X}, 0x{19:X}, 0x{20:X}, 0x{21:X}, 0x{22:X}, 0x{23:X}, 0x{24:X}, 0x{25:X}, 0x{26:X}, 0x{27:X}, 0x{28:X}, 0x{29:X}, 0x{30:X}, 0x{31:X}, 0x{32:X}, 0x{33:X}, 0x{34:X}, 0x{35:X}, 0x{36:X}, 0x{37:X}, 0x{38:X}, 0x{39:X}, 0x{40:X}, 0x{41:X}, 0x{42:X}, 0x{43:X}, 0x{44:X}, 0x{45:X}, 0x{46:X}, 0x{47:X}, 0x{48:X}, 0x{49:X}, 0x{50:X}, 0x{51:X}, 0x{52:X}, 0x{53:X} )", new object[]
                {
                    GlobalRef.g_RadarDeviceId,
                    m_AdvanceBPMPatternConfigParams.BPMPatternIndex,
                    m_AdvanceBPMPatternConfigParams.Reserved,
                    m_AdvanceBPMPatternConfigParams.ResetOption,
                    m_AdvanceBPMPatternConfigParams.Reserved1,
                    m_AdvanceBPMPatternConfigParams.Reserved2,
                    m_AdvanceBPMPatternConfigParams.Tx0BPMpattern0,
                    m_AdvanceBPMPatternConfigParams.Tx0BPMpattern1,
                    m_AdvanceBPMPatternConfigParams.Tx0BPMpattern2,
                    m_AdvanceBPMPatternConfigParams.Tx0BPMpattern3,
                    m_AdvanceBPMPatternConfigParams.Tx0BPMpattern4,
                    m_AdvanceBPMPatternConfigParams.Tx0BPMpattern5,
                    m_AdvanceBPMPatternConfigParams.Tx0BPMpattern6,
                    m_AdvanceBPMPatternConfigParams.Tx0BPMpattern7,
                    m_AdvanceBPMPatternConfigParams.Tx0BPMpattern8,
                    m_AdvanceBPMPatternConfigParams.Tx0BPMpattern9,
                    m_AdvanceBPMPatternConfigParams.Tx0BPMpattern10,
                    m_AdvanceBPMPatternConfigParams.Tx0BPMpattern11,
                    m_AdvanceBPMPatternConfigParams.Tx0BPMpattern12,
                    m_AdvanceBPMPatternConfigParams.Tx0BPMpattern13,
                    m_AdvanceBPMPatternConfigParams.Tx0BPMpattern14,
                    m_AdvanceBPMPatternConfigParams.Tx0BPMpattern15,
                    m_AdvanceBPMPatternConfigParams.Tx1BPMpattern0,
                    m_AdvanceBPMPatternConfigParams.Tx1BPMpattern1,
                    m_AdvanceBPMPatternConfigParams.Tx1BPMpattern2,
                    m_AdvanceBPMPatternConfigParams.Tx1BPMpattern3,
                    m_AdvanceBPMPatternConfigParams.Tx1BPMpattern4,
                    m_AdvanceBPMPatternConfigParams.Tx1BPMpattern5,
                    m_AdvanceBPMPatternConfigParams.Tx1BPMpattern6,
                    m_AdvanceBPMPatternConfigParams.Tx1BPMpattern7,
                    m_AdvanceBPMPatternConfigParams.Tx1BPMpattern8,
                    m_AdvanceBPMPatternConfigParams.Tx1BPMpattern9,
                    m_AdvanceBPMPatternConfigParams.Tx1BPMpattern10,
                    m_AdvanceBPMPatternConfigParams.Tx1BPMpattern11,
                    m_AdvanceBPMPatternConfigParams.Tx1BPMpattern12,
                    m_AdvanceBPMPatternConfigParams.Tx1BPMpattern13,
                    m_AdvanceBPMPatternConfigParams.Tx1BPMpattern14,
                    m_AdvanceBPMPatternConfigParams.Tx1BPMpattern15,
                    m_AdvanceBPMPatternConfigParams.Tx2BPMpattern0,
                    m_AdvanceBPMPatternConfigParams.Tx2BPMpattern1,
                    m_AdvanceBPMPatternConfigParams.Tx2BPMpattern2,
                    m_AdvanceBPMPatternConfigParams.Tx2BPMpattern3,
                    m_AdvanceBPMPatternConfigParams.Tx2BPMpattern4,
                    m_AdvanceBPMPatternConfigParams.Tx2BPMpattern5,
                    m_AdvanceBPMPatternConfigParams.Tx2BPMpattern6,
                    m_AdvanceBPMPatternConfigParams.Tx2BPMpattern7,
                    m_AdvanceBPMPatternConfigParams.Tx2BPMpattern8,
                    m_AdvanceBPMPatternConfigParams.Tx2BPMpattern9,
                    m_AdvanceBPMPatternConfigParams.Tx2BPMpattern10,
                    m_AdvanceBPMPatternConfigParams.Tx2BPMpattern11,
                    m_AdvanceBPMPatternConfigParams.Tx2BPMpattern12,
                    m_AdvanceBPMPatternConfigParams.Tx2BPMpattern13,
                    m_AdvanceBPMPatternConfigParams.Tx2BPMpattern14,
                    m_AdvanceBPMPatternConfigParams.Tx2BPMpattern15
                });
                m_GuiManager.RecordLog(14, full_command3);
            }
            num = Imports.RadarLinkImpl_SetAdvBpmPattern(GlobalRef.g_RadarDeviceId, data);
            if ((num == 0 && ((GlobalRef.g_CasCadeDeviceSpiConnect & 1U) == 1U || (GlobalRef.g_CasCadeDeviceSpiConnect & 2U) == 2U || (GlobalRef.g_CasCadeDeviceSpiConnect & 4U) == 4U || (GlobalRef.g_CasCadeDeviceSpiConnect & 8U) == 8U)) || GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
            {
                string full_command4 = string.Format("Status: Passed", new object[0]);
                m_GuiManager.RecordLog(8, full_command4);
            }
            else
            {
                string msg = string.Format("Status: Failed, Error Type: {0}", new object[]
                {
                    GetErrorType(num)
                });
                GlobalRef.LuaWrapper.PrintError(msg);
            }
            if (GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
            {
                if (iRs232ConnectDisconnect_impl() == 0 && !GlobalRef.g_NtvRS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
                {
                    m_GuiManager.DllOps.iConnect(1U, 0U);
                    string full_command5 = string.Format("Debug Port Reconnected!", new object[0]);
                    m_GuiManager.RecordLog(9, full_command5);
                    ScriptOps.KeepTrying(2000, new Func<bool>(spare_read));
                }
            }
            else if (GlobalRef.g_CasCadeDeviceSpiConnect == 0U)
            {
                string full_command6 = string.Format("Error Occurred in Port open close", new object[0]);
                m_GuiManager.RecordLog(9, full_command6);
            }
            return num;
        }

        private int m000086(bool is_starting_op, bool is_ending_op)
        {
            IntPtr zero = IntPtr.Zero;
            int num = 0;
            f0002d7.SigInputEnaCfg = (byte)((int)m_RfGPADCMeasureForExtInputConfigParams.ANATest1SignalInputEna | (int)m_RfGPADCMeasureForExtInputConfigParams.ANATest2SignalInputEna << 1 | (int)m_RfGPADCMeasureForExtInputConfigParams.ANATest3SignalInputEna << 2 | (int)m_RfGPADCMeasureForExtInputConfigParams.ANATest4SignalInputEna << 3 | (int)m_RfGPADCMeasureForExtInputConfigParams.ANAMuxSignalInputEna << 4 | (int)m_RfGPADCMeasureForExtInputConfigParams.VSenseSignalInputEna << 5);
            f0002d7.SigBufEnaCfg = (byte)((int)m_RfGPADCMeasureForExtInputConfigParams.ANATest1SignalBufEna | (int)m_RfGPADCMeasureForExtInputConfigParams.ANATest2SignalBufEna << 1 | (int)m_RfGPADCMeasureForExtInputConfigParams.ANATest3SignalBufEna << 2 | (int)m_RfGPADCMeasureForExtInputConfigParams.ANATest4SignalBufEna << 3 | (int)m_RfGPADCMeasureForExtInputConfigParams.ANAMuxSignalBufEna << 4);
            f0002d7.ANATest1Cfg = (ushort)((int)m_RfGPADCMeasureForExtInputConfigParams.ANATest1Cfg_NumSamples | (int)((byte)((double)m_RfGPADCMeasureForExtInputConfigParams.ANATest1Cfg_SettlingTime / 0.8)) << 8);
            f0002d7.ANATest2Cfg = (ushort)((int)m_RfGPADCMeasureForExtInputConfigParams.ANATest2Cfg_NumSamples | (int)((byte)((double)m_RfGPADCMeasureForExtInputConfigParams.ANATest2Cfg_SettlingTime / 0.8)) << 8);
            f0002d7.ANATest3Cfg = (ushort)((int)m_RfGPADCMeasureForExtInputConfigParams.ANATest3Cfg_NumSamples | (int)((byte)((double)m_RfGPADCMeasureForExtInputConfigParams.ANATest3Cfg_SettlingTime / 0.8)) << 8);
            f0002d7.ANATest4Cfg = (ushort)((int)m_RfGPADCMeasureForExtInputConfigParams.ANATest4Cfg_NumSamples | (int)((byte)((double)m_RfGPADCMeasureForExtInputConfigParams.ANATest4Cfg_SettlingTime / 0.8)) << 8);
            f0002d7.ANAMuxCfg = (ushort)((int)m_RfGPADCMeasureForExtInputConfigParams.ANAMuxCfg_NumSamples | (int)((byte)((double)m_RfGPADCMeasureForExtInputConfigParams.ANAMuxCfg_SettlingTime / 0.8)) << 8);
            f0002d7.VSenseCfg = (ushort)((int)m_RfGPADCMeasureForExtInputConfigParams.VSenseCfg_NumSamples | (int)((byte)((double)m_RfGPADCMeasureForExtInputConfigParams.VSenseCfg_SettlingTime / 0.8)) << 8);
            f0002d7.Reserved1 = 0;
            f0002d7.Reserved2 = 0U;
            f0002d7.Reserved3 = 0U;
            f0002d7.Reserved4 = 0U;
            f0002d6.f000001 = m_RFStatusConfigParams.f000001;
            f0002d6.f000002 = m_RFStatusConfigParams.f000002;
            f0002d6.f000003 = m_RFStatusConfigParams.f000003;
            f0002d6.GPADCNumOfSkipSamples = (byte)((int)m_RFStatusConfigParams.GPADCNumOfSkipClocksExp << 4 | (int)m_RFStatusConfigParams.GPADCNumOfSkipClocksMant);
            IntPtr inData = GCHandle.Alloc(f0002d7, GCHandleType.Pinned).AddrOfPinnedObject();
            GCHandle.Alloc(new byte[8], GCHandleType.Pinned).AddrOfPinnedObject();
            int num2;
            if (GlobalRef.g_NtvRS232Connect[(int)GlobalRef.g_RadarDeviceIndex] && GlobalRef.g_CasCadeDeviceSpiConnect == 0U)
            {
                num2 = m_TsWrapper.Calling_WriteAddr_Single(4294959848U, 1U);
                if (m_GuiManager.DllOps.itempDisconnect(false) == 0)
                {
                    string full_command = string.Format("Debug Port Disconnected", new object[0]);
                    m_GuiManager.RecordLog(0, full_command);
                    if (!GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
                    {
                        iRs232ConnectDisconnect_impl();
                    }
                }
            }
            Thread.Sleep(200);
            if (m_RadarDeviceModeConfigParams.NumberOfRadarDevicesDetected <= 1)
            {
                string full_command2 = string.Format("ar1.SetExternalGpAdcConfig({0}, {1}, {2}, {3}, {4}, {5}, {6}, {7}, {8}, {9}, {10}, {11})", new object[]
                {
                    f0002d7.SigInputEnaCfg,
                    f0002d7.SigBufEnaCfg,
                    f0002d7.ANATest1Cfg,
                    f0002d7.ANATest2Cfg,
                    f0002d7.ANATest3Cfg,
                    f0002d7.ANATest4Cfg,
                    f0002d7.ANAMuxCfg,
                    f0002d7.VSenseCfg,
                    f0002d7.Reserved1,
                    f0002d7.Reserved2,
                    f0002d7.Reserved3,
                    f0002d7.Reserved4
                });
                m_GuiManager.RecordLog(15, full_command2);
            }
            else
            {
                string full_command3 = string.Format("ar1.SetExternalGpAdcConfig_mult({0}, {1}, {2}, {3}, {4}, {5}, {6}, {7}, {8}, {9}, {10}, {11}, {12})", new object[]
                {
                    GlobalRef.g_RadarDeviceId,
                    f0002d7.SigInputEnaCfg,
                    f0002d7.SigBufEnaCfg,
                    f0002d7.ANATest1Cfg,
                    f0002d7.ANATest2Cfg,
                    f0002d7.ANATest3Cfg,
                    f0002d7.ANATest4Cfg,
                    f0002d7.ANAMuxCfg,
                    f0002d7.VSenseCfg,
                    f0002d7.Reserved1,
                    f0002d7.Reserved2,
                    f0002d7.Reserved3,
                    f0002d7.Reserved4
                });
                m_GuiManager.RecordLog(15, full_command3);
            }
            ScriptOps.asyncEvent.f0000ec = 0U;
            uint g_RadarDeviceId = GlobalRef.g_RadarDeviceId;
            num2 = Imports.RadarLinkImpl_SetGpAdcConfig(GlobalRef.g_RadarDeviceId, inData);
            string full_command4 = string.Format("Waiting for async event", new object[0]);
            m_GuiManager.RecordLog(15, full_command4);
            while (ScriptOps.asyncEvent.f0000ec == 0U)
            {
                Thread.Sleep(200);
                num++;
                if (num > 10)
                {
                    string full_command5 = string.Format("Async event not received", new object[0]);
                    m_GuiManager.RecordLog(15, full_command5);
                    break;
                }
            }
            if (num2 == 0)
            {
                ushort anatest1MinData = ScriptOps.GPADCDataMeasByExternallyParam.ANATest1MinData;
                ushort anatest1MaxData = ScriptOps.GPADCDataMeasByExternallyParam.ANATest1MaxData;
                double anatest1AvgData = (double)ScriptOps.GPADCDataMeasByExternallyParam.ANATest1AvgData;
                ushort anatest2MinData = ScriptOps.GPADCDataMeasByExternallyParam.ANATest2MinData;
                ushort anatest2MaxData = ScriptOps.GPADCDataMeasByExternallyParam.ANATest2MaxData;
                ushort anatest2AvgData = ScriptOps.GPADCDataMeasByExternallyParam.ANATest2AvgData;
                ushort anatest3MinData = ScriptOps.GPADCDataMeasByExternallyParam.ANATest3MinData;
                ushort anatest3MaxData = ScriptOps.GPADCDataMeasByExternallyParam.ANATest3MaxData;
                ushort anatest3AvgData = ScriptOps.GPADCDataMeasByExternallyParam.ANATest3AvgData;
                ushort anatest4MinData = ScriptOps.GPADCDataMeasByExternallyParam.ANATest4MinData;
                ushort anatest4MaxData = ScriptOps.GPADCDataMeasByExternallyParam.ANATest4MaxData;
                ushort anatest4AvgData = ScriptOps.GPADCDataMeasByExternallyParam.ANATest4AvgData;
                ushort iforceMinData = ScriptOps.GPADCDataMeasByExternallyParam.IForceMinData;
                ushort iforceMaxData = ScriptOps.GPADCDataMeasByExternallyParam.IForceMaxData;
                ushort iforceAvgData = ScriptOps.GPADCDataMeasByExternallyParam.IForceAvgData;
                ushort vforceMinData = ScriptOps.GPADCDataMeasByExternallyParam.VForceMinData;
                ushort vforceMaxData = ScriptOps.GPADCDataMeasByExternallyParam.VForceMaxData;
                ushort vforceAvgData = ScriptOps.GPADCDataMeasByExternallyParam.VForceAvgData;
                ushort iforceBufMinData = ScriptOps.GPADCDataMeasByExternallyParam.IForceBufMinData;
                ushort iforceBufMaxData = ScriptOps.GPADCDataMeasByExternallyParam.IForceBufMaxData;
                ushort iforceBufAvgData = ScriptOps.GPADCDataMeasByExternallyParam.IForceBufAvgData;
                double value = Math.Round((double)anatest1MinData * 1.7578125, 1);
                double value2 = Math.Round((double)anatest1MaxData * 1.7578125, 1);
                double value3 = Math.Round(anatest1AvgData * 1.7578125, 1);
                double value4 = Math.Round((double)anatest2MinData * 1.7578125, 1);
                double value5 = Math.Round((double)anatest2MaxData * 1.7578125, 1);
                double value6 = Math.Round((double)anatest2AvgData * 1.7578125, 1);
                double value7 = Math.Round((double)anatest3MinData * 1.7578125, 1);
                double value8 = Math.Round((double)anatest3MaxData * 1.7578125, 1);
                double value9 = Math.Round((double)anatest3AvgData * 1.7578125, 1);
                double value10 = Math.Round((double)anatest4MinData * 1.7578125, 1);
                double value11 = Math.Round((double)anatest4MaxData * 1.7578125, 1);
                double value12 = Math.Round((double)anatest4AvgData * 1.7578125, 1);
                double value13 = Math.Round((double)iforceMinData * 1.7578125, 1);
                double value14 = Math.Round((double)iforceMaxData * 1.7578125, 1);
                double value15 = Math.Round((double)iforceAvgData * 1.7578125, 1);
                double value16 = Math.Round((double)vforceMinData * 1.7578125, 1);
                double value17 = Math.Round((double)vforceMaxData * 1.7578125, 1);
                double value18 = Math.Round((double)vforceAvgData * 1.7578125, 1);
                double value19 = Math.Round((double)iforceBufMinData * 1.7578125, 1);
                double value20 = Math.Round((double)iforceBufMaxData * 1.7578125, 1);
                double value21 = Math.Round((double)iforceBufAvgData * 1.7578125, 1);
                ScriptOps.m_MainForm.ClibTab.SetGPADCANATest1AvgDataResponseInGui(Convert.ToString(value3) + " mV  (" + Convert.ToString(anatest1MinData) + ")");
                ScriptOps.m_MainForm.ClibTab.SetGPADCANATest1MaxDataResponseInGui(Convert.ToString(value2) + " mV  (" + Convert.ToString(anatest1MaxData) + ")");
                ScriptOps.m_MainForm.ClibTab.SetGPADCANATest1MinDataResponseInGui(Convert.ToString(value) + " mV  (" + Convert.ToString(anatest1MinData) + ")");
                ScriptOps.m_MainForm.ClibTab.SetGPADCANATest2AvgDataResponseInGui(Convert.ToString(value6) + " mV  (" + Convert.ToString(anatest2MinData) + ")");
                ScriptOps.m_MainForm.ClibTab.SetGPADCANATest2MaxDataResponseInGui(Convert.ToString(value5) + " mV  (" + Convert.ToString(anatest2MaxData) + ")");
                ScriptOps.m_MainForm.ClibTab.SetGPADCANATest2MinDataResponseInGui(Convert.ToString(value4) + " mV  (" + Convert.ToString(anatest2MinData) + ")");
                ScriptOps.m_MainForm.ClibTab.SetGPADCANATest3AvgDataResponseInGui(Convert.ToString(value9) + " mV  (" + Convert.ToString(anatest3MinData) + ")");
                ScriptOps.m_MainForm.ClibTab.SetGPADCANATest3MaxDataResponseInGui(Convert.ToString(value8) + " mV  (" + Convert.ToString(anatest3MaxData) + ")");
                ScriptOps.m_MainForm.ClibTab.SetGPADCANATest3MinDataResponseInGui(Convert.ToString(value7) + " mV  (" + Convert.ToString(anatest3MinData) + ")");
                ScriptOps.m_MainForm.ClibTab.SetGPADCANATest4AvgDataResponseInGui(Convert.ToString(value12) + " mV  (" + Convert.ToString(anatest4MinData) + ")");
                ScriptOps.m_MainForm.ClibTab.SetGPADCANATest4MaxDataResponseInGui(Convert.ToString(value11) + " mV  (" + Convert.ToString(anatest4MaxData) + ")");
                ScriptOps.m_MainForm.ClibTab.SetGPADCANATest4MinDataResponseInGui(Convert.ToString(value10) + " mV  (" + Convert.ToString(anatest4MinData) + ")");
                ScriptOps.m_MainForm.ClibTab.SetGPADCIForceAvgDataResponseInGui(Convert.ToString(value15) + " mV  (" + Convert.ToString(iforceAvgData) + ")");
                ScriptOps.m_MainForm.ClibTab.SetGPADCIForceMaxDataResponseInGui(Convert.ToString(value14) + " mV  (" + Convert.ToString(iforceMaxData) + ")");
                ScriptOps.m_MainForm.ClibTab.SetGPADCIForceMinDataResponseInGui(Convert.ToString(value13) + " mV  (" + Convert.ToString(iforceMinData) + ")");
                ScriptOps.m_MainForm.ClibTab.SetGPADCVForceAvgDataResponseInGui(Convert.ToString(value18) + " mV  (" + Convert.ToString(vforceAvgData) + ")");
                ScriptOps.m_MainForm.ClibTab.SetGPADCVForceMaxDataResponseInGui(Convert.ToString(value17) + " mV  (" + Convert.ToString(vforceMaxData) + ")");
                ScriptOps.m_MainForm.ClibTab.SetGPADCVForceMinDataResponseInGui(Convert.ToString(value16) + " mV  (" + Convert.ToString(vforceMinData) + ")");
                ScriptOps.m_MainForm.ClibTab.SetGPADCIForceBufAvgDataResponseInGui(Convert.ToString(value21) + " mV  (" + Convert.ToString(iforceBufAvgData) + ")");
                ScriptOps.m_MainForm.ClibTab.SetGPADCIForceBufMaxDataResponseInGui(Convert.ToString(value20) + " mV  (" + Convert.ToString(iforceBufMaxData) + ")");
                ScriptOps.m_MainForm.ClibTab.SetGPADCIForceBufMinDataResponseInGui(Convert.ToString(value19) + " mV  (" + Convert.ToString(iforceBufMinData) + ")");
                ScriptOps.asyncEvent.f0000ec = 0U;
            }
            if ((num2 == 0 && ((GlobalRef.g_CasCadeDeviceSpiConnect & 1U) == 1U || (GlobalRef.g_CasCadeDeviceSpiConnect & 2U) == 2U || (GlobalRef.g_CasCadeDeviceSpiConnect & 4U) == 4U || (GlobalRef.g_CasCadeDeviceSpiConnect & 8U) == 8U)) || GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
            {
                string full_command6 = string.Format("Status: Passed", new object[0]);
                m_GuiManager.RecordLog(8, full_command6);
                for (int i = 0; i < 4; i++)
                {
                    if (jsonConfigInProgress)
                    {
                        break;
                    }
                    if (((ulong)g_RadarDeviceId & (ulong)(1L << (i & 31))) != 0UL)
                    {
                        int mmwaveDevIndex = getMmwaveDevIndex(i);
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.p000014.enable = "0x" + f0002d7.SigInputEnaCfg.ToString("X");
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.p000014.bufferEnable = "0x" + f0002d7.SigBufEnaCfg.ToString("X");
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.p000014.numOfSamples[0].rlGpAdcSamples_t.sampleCnt = (int)m_RfGPADCMeasureForExtInputConfigParams.ANATest1Cfg_NumSamples;
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.p000014.numOfSamples[1].rlGpAdcSamples_t.sampleCnt = (int)m_RfGPADCMeasureForExtInputConfigParams.ANATest2Cfg_NumSamples;
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.p000014.numOfSamples[2].rlGpAdcSamples_t.sampleCnt = (int)m_RfGPADCMeasureForExtInputConfigParams.ANATest3Cfg_NumSamples;
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.p000014.numOfSamples[3].rlGpAdcSamples_t.sampleCnt = (int)m_RfGPADCMeasureForExtInputConfigParams.ANATest4Cfg_NumSamples;
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.p000014.numOfSamples[4].rlGpAdcSamples_t.sampleCnt = (int)m_RfGPADCMeasureForExtInputConfigParams.ANAMuxCfg_NumSamples;
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.p000014.numOfSamples[5].rlGpAdcSamples_t.sampleCnt = (int)m_RfGPADCMeasureForExtInputConfigParams.VSenseCfg_NumSamples;
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.p000014.numOfSamples[0].rlGpAdcSamples_t.settlingTime_us = m_RfGPADCMeasureForExtInputConfigParams.ANATest1Cfg_SettlingTime;
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.p000014.numOfSamples[1].rlGpAdcSamples_t.settlingTime_us = m_RfGPADCMeasureForExtInputConfigParams.ANATest2Cfg_SettlingTime;
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.p000014.numOfSamples[2].rlGpAdcSamples_t.settlingTime_us = m_RfGPADCMeasureForExtInputConfigParams.ANATest3Cfg_SettlingTime;
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.p000014.numOfSamples[3].rlGpAdcSamples_t.settlingTime_us = m_RfGPADCMeasureForExtInputConfigParams.ANATest4Cfg_SettlingTime;
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.p000014.numOfSamples[4].rlGpAdcSamples_t.settlingTime_us = m_RfGPADCMeasureForExtInputConfigParams.ANAMuxCfg_SettlingTime;
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.p000014.numOfSamples[5].rlGpAdcSamples_t.settlingTime_us = m_RfGPADCMeasureForExtInputConfigParams.VSenseCfg_SettlingTime;
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.p000014.isConfigured = 1;
                    }
                }
            }
            else
            {
                string msg = string.Format("Status: Failed, Error Type: {0}", new object[]
                {
                    GetErrorType(num2)
                });
                GlobalRef.LuaWrapper.PrintError(msg);
            }
            if (GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
            {
                if (iRs232ConnectDisconnect_impl() == 0 && !GlobalRef.g_NtvRS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
                {
                    m_GuiManager.DllOps.iConnect(1U, 0U);
                    string full_command7 = string.Format("Debug Port Reconnected!", new object[0]);
                    m_GuiManager.RecordLog(9, full_command7);
                    ScriptOps.KeepTrying(2000, new Func<bool>(spare_read));
                }
            }
            else if (GlobalRef.g_CasCadeDeviceSpiConnect == 0U)
            {
                string full_command8 = string.Format("Error Occurred in Port open close", new object[0]);
                m_GuiManager.RecordLog(9, full_command8);
            }
            return num2;
        }

        private int iSetRFStatusConfig_Impl(bool is_starting_op, bool is_ending_op)
        {
            string empty = string.Empty;
            string directoryName = Path.GetDirectoryName(Application.StartupPath);
            StreamWriter streamWriter = new StreamWriter(string.Concat(new string[]
            {
                directoryName + "\\PostProc\\Temp_data.txt"
            }), true);
            IntPtr zero = IntPtr.Zero;
            int num = 0;
            new List<object>();
            f0002d6.f000001 = m_RFStatusConfigParams.f000001;
            f0002d6.f000002 = m_RFStatusConfigParams.f000002;
            f0002d6.f000003 = m_RFStatusConfigParams.f000003;
            f0002d6.GPADCNumOfSkipSamples = (byte)((int)m_RFStatusConfigParams.GPADCNumOfSkipClocksExp << 4 | (int)m_RFStatusConfigParams.GPADCNumOfSkipClocksMant);
            IntPtr inData = GCHandle.Alloc(f0002d6, GCHandleType.Pinned).AddrOfPinnedObject();
            IntPtr zero2 = IntPtr.Zero;
            GCHandle.Alloc(new byte[8], GCHandleType.Pinned).AddrOfPinnedObject();
            int num2;
            if (GlobalRef.g_NtvRS232Connect[(int)GlobalRef.g_RadarDeviceIndex] && GlobalRef.g_CasCadeDeviceSpiConnect == 0U)
            {
                num2 = m_TsWrapper.Calling_WriteAddr_Single(4294959848U, 1U);
                if (m_GuiManager.DllOps.itempDisconnect(false) == 0)
                {
                    string full_command = string.Format("Debug Port Disconnected", new object[0]);
                    m_GuiManager.RecordLog(0, full_command);
                    if (!GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
                    {
                        iRs232ConnectDisconnect_impl();
                    }
                }
            }
            Thread.Sleep(200);
            if (m_RadarDeviceModeConfigParams.NumberOfRadarDevicesDetected <= 1)
            {
                string full_command2 = string.Format("ar1.gpadcMeasurement({0}, {1}, {2}, {3},{4})", new object[]
                {
                    f0002d6.f000001,
                    f0002d6.f000002,
                    f0002d6.f000003,
                    m_RFStatusConfigParams.GPADCNumOfSkipClocksMant,
                    m_RFStatusConfigParams.GPADCNumOfSkipClocksExp
                });
                m_GuiManager.RecordLog(15, full_command2);
            }
            else
            {
                string full_command3 = string.Format("ar1.gpadcMeasurement_mult({0}, {1}, {2}, {3},{4},{5})", new object[]
                {
                    GlobalRef.g_RadarDeviceId,
                    f0002d6.f000001,
                    f0002d6.f000002,
                    f0002d6.f000003,
                    m_RFStatusConfigParams.GPADCNumOfSkipClocksMant,
                    m_RFStatusConfigParams.GPADCNumOfSkipClocksExp
                });
                m_GuiManager.RecordLog(15, full_command3);
            }
            ScriptOps.asyncEvent.asyncGpadc = 0U;
            num2 = Imports.RadarLinkImpl_GetGpadcData(GlobalRef.g_RadarDeviceId, inData);
            string full_command4 = string.Format("Waiting for async event", new object[0]);
            m_GuiManager.RecordLog(15, full_command4);
            while (ScriptOps.asyncEvent.asyncGpadc == 0U)
            {
                Thread.Sleep(200);
                num++;
                if (num > 10)
                {
                    string full_command5 = string.Format("Async event not received", new object[0]);
                    m_GuiManager.RecordLog(15, full_command5);
                    break;
                }
            }
            if (num2 == 0)
            {
                ushort maxMeas = ScriptOps.f0002db.maxMeas;
                ushort minMeas = ScriptOps.f0002db.minMeas;
                ushort avgMeas = ScriptOps.f0002db.avgMeas;
                double value = Math.Round((double)maxMeas * 1.7578125);
                double value2 = Math.Round((double)minMeas * 1.7578125);
                double value3 = Math.Round((double)avgMeas * 1.7578125);
                ScriptOps.m_MainForm.RFStatusTab.SetGPADCAvgDataResponseInGui(Convert.ToString(value3) + " mV  (" + Convert.ToString(avgMeas) + ")");
                ScriptOps.m_MainForm.RFStatusTab.SetGPADCMaxDataResponseInGui(Convert.ToString(value) + " mV  (" + Convert.ToString(maxMeas) + ")");
                ScriptOps.m_MainForm.RFStatusTab.SetGPADCMinDataResponseInGui(Convert.ToString(value2) + " mV  (" + Convert.ToString(minMeas) + ")");
                ScriptOps.asyncEvent.asyncGpadc = 0U;
                streamWriter.WriteLine(string.Concat(new string[]
                {
                    Convert.ToString(value3),
                    " mV  (",
                    Convert.ToString(avgMeas),
                    ")",
                    Convert.ToString(value),
                    " mV  (",
                    Convert.ToString(maxMeas),
                    ")",
                    Convert.ToString(value2),
                    " mV  (",
                    Convert.ToString(minMeas),
                    ")"
                }));
            }
            if ((num2 == 0 && ((GlobalRef.g_CasCadeDeviceSpiConnect & 1U) == 1U || (GlobalRef.g_CasCadeDeviceSpiConnect & 2U) == 2U || (GlobalRef.g_CasCadeDeviceSpiConnect & 4U) == 4U || (GlobalRef.g_CasCadeDeviceSpiConnect & 8U) == 8U)) || GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
            {
                string full_command6 = string.Format("Status: Passed", new object[0]);
                m_GuiManager.RecordLog(8, full_command6);
            }
            else
            {
                string msg = string.Format("Status: Failed, Error Type: {0}", new object[]
                {
                    GetErrorType(num2)
                });
                GlobalRef.LuaWrapper.PrintError(msg);
            }
            if (GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
            {
                if (iRs232ConnectDisconnect_impl() == 0 && !GlobalRef.g_NtvRS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
                {
                    m_GuiManager.DllOps.iConnect(1U, 0U);
                    string full_command7 = string.Format("Debug Port Reconnected!", new object[0]);
                    m_GuiManager.RecordLog(9, full_command7);
                    ScriptOps.KeepTrying(2000, new Func<bool>(spare_read));
                }
            }
            else if (GlobalRef.g_CasCadeDeviceSpiConnect == 0U)
            {
                string full_command8 = string.Format("Error Occurred in Port open close", new object[0]);
                m_GuiManager.RecordLog(9, full_command8);
            }
            streamWriter.Close();
            streamWriter.Dispose();
            return num2;
        }

        private int iSetDynamicPowerSaveConfig_Impl(bool is_starting_op, bool is_ending_op)
        {
            DynamicPowerSaveParam.BlockCfg_Tx_Rx_LO = (ushort)((int)m_DynamicPowerSaveConfigParams.BloclCfgTX | (int)m_DynamicPowerSaveConfigParams.BloclCfgRX << 1 | (int)m_DynamicPowerSaveConfigParams.BloclCfgLODist << 2);
            IntPtr inData = GCHandle.Alloc(DynamicPowerSaveParam, GCHandleType.Pinned).AddrOfPinnedObject();
            int num;
            if (GlobalRef.g_NtvRS232Connect[(int)GlobalRef.g_RadarDeviceIndex] && GlobalRef.g_CasCadeDeviceSpiConnect == 0U)
            {
                num = m_TsWrapper.Calling_WriteAddr_Single(4294959848U, 1U);
                if (m_GuiManager.DllOps.itempDisconnect(false) == 0)
                {
                    string full_command = string.Format("Debug Port Disconnected", new object[0]);
                    m_GuiManager.RecordLog(0, full_command);
                    if (!GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
                    {
                        iRs232ConnectDisconnect_impl();
                    }
                }
            }
            Thread.Sleep(200);
            if (m_RadarDeviceModeConfigParams.NumberOfRadarDevicesDetected <= 1)
            {
                string full_command2 = string.Format("ar1.SetDynamicPowerSaveMode({0}, {1}, {2})", new object[]
                {
                    m_DynamicPowerSaveConfigParams.BloclCfgTX,
                    m_DynamicPowerSaveConfigParams.BloclCfgRX,
                    m_DynamicPowerSaveConfigParams.BloclCfgLODist
                });
                m_GuiManager.RecordLog(15, full_command2);
            }
            else
            {
                string full_command3 = string.Format("ar1.SetDynamicPowerSaveMode_mult({0}, {1}, {2}, {3})", new object[]
                {
                    GlobalRef.g_RadarDeviceId,
                    m_DynamicPowerSaveConfigParams.BloclCfgTX,
                    m_DynamicPowerSaveConfigParams.BloclCfgRX,
                    m_DynamicPowerSaveConfigParams.BloclCfgLODist
                });
                m_GuiManager.RecordLog(15, full_command3);
            }
            uint g_RadarDeviceId = GlobalRef.g_RadarDeviceId;
            num = Imports.RadarLinkImpl_SetDynamicPowerSaveMode(GlobalRef.g_RadarDeviceId, inData);
            if ((num == 0 && ((GlobalRef.g_CasCadeDeviceSpiConnect & 1U) == 1U || (GlobalRef.g_CasCadeDeviceSpiConnect & 2U) == 2U || (GlobalRef.g_CasCadeDeviceSpiConnect & 4U) == 4U || (GlobalRef.g_CasCadeDeviceSpiConnect & 8U) == 8U)) || GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
            {
                string full_command4 = string.Format("Status: Passed", new object[0]);
                m_GuiManager.RecordLog(8, full_command4);
                for (int i = 0; i < 4; i++)
                {
                    if (jsonConfigInProgress)
                    {
                        break;
                    }
                    if (((ulong)g_RadarDeviceId & (ulong)(1L << (i & 31))) != 0UL)
                    {
                        int mmwaveDevIndex = getMmwaveDevIndex(i);
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlDynPwrSave_t.p00000b = "0x" + DynamicPowerSaveParam.BlockCfg_Tx_Rx_LO.ToString("X");
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlDynPwrSave_t.isConfigured = 1;
                    }
                }
            }
            else
            {
                string msg = string.Format("Status: Failed, Error Type: {0}", new object[]
                {
                    GetErrorType(num)
                });
                GlobalRef.LuaWrapper.PrintError(msg);
            }
            return num;
        }

        private int iGetDFEStaticReportDataConfig_Impl(bool is_starting_op, bool is_ending_op)
        {
            GCHandle.Alloc(new byte[22], GCHandleType.Pinned).AddrOfPinnedObject();
            byte[] array = new byte[192];
            IntPtr inData = GCHandle.Alloc(array, GCHandleType.Pinned).AddrOfPinnedObject();
            int num;
            if (GlobalRef.g_NtvRS232Connect[(int)GlobalRef.g_RadarDeviceIndex] && GlobalRef.g_CasCadeDeviceSpiConnect == 0U)
            {
                num = m_TsWrapper.Calling_WriteAddr_Single(4294959848U, 1U);
                if (m_GuiManager.DllOps.itempDisconnect(false) == 0)
                {
                    string full_command = string.Format("Debug Port Disconnected", new object[0]);
                    m_GuiManager.RecordLog(0, full_command);
                    if (!GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
                    {
                        iRs232ConnectDisconnect_impl();
                    }
                }
            }
            Thread.Sleep(200);
            if (m_RadarDeviceModeConfigParams.NumberOfRadarDevicesDetected <= 1)
            {
                string full_command2 = string.Format("ar1.DFEStaticReportGet()", new object[0]);
                m_GuiManager.RecordLog(15, full_command2);
            }
            else
            {
                string full_command3 = string.Format("ar1.DFEStaticReportGet_mult({0})", new object[]
                {
                    GlobalRef.g_RadarDeviceId
                });
                m_GuiManager.RecordLog(15, full_command3);
            }
            num = Imports.RadarLinkImpl_GetDfeRxStatistics(GlobalRef.g_RadarDeviceId, inData);
            if (GlobalRef.g_RadarDeviceId == 1U)
            {
                m_RadarDevice1DFEStaticReportDataConfigParams.Profile0Rx1Idc = (short)((int)array[1] << 8 | (int)array[0]);
                m_RadarDevice1DFEStaticReportDataConfigParams.f0004f6 = (short)((int)array[3] << 8 | (int)array[2]);
                m_RadarDevice1DFEStaticReportDataConfigParams.Profile0Rx1Ipwr = (ushort)((int)array[5] << 8 | (int)array[4]);
                m_RadarDevice1DFEStaticReportDataConfigParams.f0004f7 = (ushort)((int)array[7] << 8 | (int)array[6]);
                m_RadarDevice1DFEStaticReportDataConfigParams.Profile0Rx1IQcrosscorr = ((int)array[11] << 24 | (int)array[10] << 16 | (int)array[9] << 8 | (int)array[8]);
                ScriptOps.m_MainForm.ClibTab.DisplayProfile0RX1DataReportinGUI((int)m_RadarDevice1DFEStaticReportDataConfigParams.Profile0Rx1Idc, (uint)m_RadarDevice1DFEStaticReportDataConfigParams.f0004f6, (int)m_RadarDevice1DFEStaticReportDataConfigParams.Profile0Rx1Ipwr, (int)m_RadarDevice1DFEStaticReportDataConfigParams.f0004f7, (uint)m_RadarDevice1DFEStaticReportDataConfigParams.Profile0Rx1IQcrosscorr);
                m_RadarDevice1DFEStaticReportDataConfigParams.Profile0Rx2Idc = (short)((int)array[13] << 8 | (int)array[12]);
                m_RadarDevice1DFEStaticReportDataConfigParams.f0004f8 = (short)((int)array[15] << 8 | (int)array[14]);
                m_RadarDevice1DFEStaticReportDataConfigParams.Profile0Rx2Ipwr = (ushort)((int)array[17] << 8 | (int)array[16]);
                m_RadarDevice1DFEStaticReportDataConfigParams.f0004f9 = (ushort)((int)array[19] << 8 | (int)array[18]);
                m_RadarDevice1DFEStaticReportDataConfigParams.Profile0Rx2IQcrosscorr = ((int)array[23] << 24 | (int)array[22] << 16 | (int)array[21] << 8 | (int)array[20]);
                ScriptOps.m_MainForm.ClibTab.DisplayProfile0RX2DataReportinGUI((int)m_RadarDevice1DFEStaticReportDataConfigParams.Profile0Rx2Idc, (uint)m_RadarDevice1DFEStaticReportDataConfigParams.f0004f8, (int)m_RadarDevice1DFEStaticReportDataConfigParams.Profile0Rx2Ipwr, (int)m_RadarDevice1DFEStaticReportDataConfigParams.f0004f9, (uint)m_RadarDevice1DFEStaticReportDataConfigParams.Profile0Rx2IQcrosscorr);
                m_RadarDevice1DFEStaticReportDataConfigParams.Profile0Rx3Idc = (short)((int)array[25] << 8 | (int)array[24]);
                m_RadarDevice1DFEStaticReportDataConfigParams.f0004fa = (short)((int)array[27] << 8 | (int)array[26]);
                m_RadarDevice1DFEStaticReportDataConfigParams.Profile0Rx3Ipwr = (ushort)((int)array[29] << 8 | (int)array[28]);
                m_RadarDevice1DFEStaticReportDataConfigParams.f0004fb = (ushort)((int)array[31] << 8 | (int)array[30]);
                m_RadarDevice1DFEStaticReportDataConfigParams.Profile0Rx3IQcrosscorr = ((int)array[35] << 24 | (int)array[34] << 16 | (int)array[33] << 8 | (int)array[32]);
                ScriptOps.m_MainForm.ClibTab.DisplayProfile0RX3DataReportinGUI((int)m_RadarDevice1DFEStaticReportDataConfigParams.Profile0Rx3Idc, (uint)m_RadarDevice1DFEStaticReportDataConfigParams.f0004fa, (int)m_RadarDevice1DFEStaticReportDataConfigParams.Profile0Rx3Ipwr, (int)m_RadarDevice1DFEStaticReportDataConfigParams.f0004fb, (uint)m_RadarDevice1DFEStaticReportDataConfigParams.Profile0Rx3IQcrosscorr);
                m_RadarDevice1DFEStaticReportDataConfigParams.Profile0Rx4Idc = (short)((int)array[37] << 8 | (int)array[36]);
                m_RadarDevice1DFEStaticReportDataConfigParams.f0004fc = (short)((int)array[39] << 8 | (int)array[38]);
                m_RadarDevice1DFEStaticReportDataConfigParams.Profile0Rx4Ipwr = (ushort)((int)array[41] << 8 | (int)array[40]);
                m_RadarDevice1DFEStaticReportDataConfigParams.f0004fd = (ushort)((int)array[43] << 8 | (int)array[42]);
                m_RadarDevice1DFEStaticReportDataConfigParams.Profile0Rx4IQcrosscorr = ((int)array[47] << 24 | (int)array[46] << 16 | (int)array[45] << 8 | (int)array[44]);
                ScriptOps.m_MainForm.ClibTab.DisplayProfile0RX4DataReportinGUI((int)m_RadarDevice1DFEStaticReportDataConfigParams.Profile0Rx4Idc, (uint)m_RadarDevice1DFEStaticReportDataConfigParams.f0004fc, (int)m_RadarDevice1DFEStaticReportDataConfigParams.Profile0Rx4Ipwr, (int)m_RadarDevice1DFEStaticReportDataConfigParams.f0004fd, (uint)m_RadarDevice1DFEStaticReportDataConfigParams.Profile0Rx4IQcrosscorr);
                m_RadarDevice1DFEStaticReportDataConfigParams.Profile1Rx1Idc = (short)((int)array[49] << 8 | (int)array[48]);
                m_RadarDevice1DFEStaticReportDataConfigParams.f0004fe = (short)((int)array[51] << 8 | (int)array[50]);
                m_RadarDevice1DFEStaticReportDataConfigParams.Profile1Rx1Ipwr = (ushort)((int)array[53] << 8 | (int)array[52]);
                m_RadarDevice1DFEStaticReportDataConfigParams.f0004ff = (ushort)((int)array[55] << 8 | (int)array[54]);
                m_RadarDevice1DFEStaticReportDataConfigParams.Profile1Rx1IQcrosscorr = ((int)array[59] << 24 | (int)array[58] << 16 | (int)array[57] << 8 | (int)array[56]);
                ScriptOps.m_MainForm.ClibTab.DisplayProfile1RX1DataReportinGUI((int)m_RadarDevice1DFEStaticReportDataConfigParams.Profile1Rx1Idc, (uint)m_RadarDevice1DFEStaticReportDataConfigParams.f0004fe, (int)m_RadarDevice1DFEStaticReportDataConfigParams.Profile1Rx1Ipwr, (int)m_RadarDevice1DFEStaticReportDataConfigParams.f0004ff, (uint)m_RadarDevice1DFEStaticReportDataConfigParams.Profile1Rx1IQcrosscorr);
                m_RadarDevice1DFEStaticReportDataConfigParams.Profile1Rx2Idc = (short)((int)array[61] << 8 | (int)array[60]);
                m_RadarDevice1DFEStaticReportDataConfigParams.f000500 = (short)((int)array[63] << 8 | (int)array[62]);
                m_RadarDevice1DFEStaticReportDataConfigParams.Profile1Rx2Ipwr = (ushort)((int)array[65] << 8 | (int)array[64]);
                m_RadarDevice1DFEStaticReportDataConfigParams.f000501 = (ushort)((int)array[67] << 8 | (int)array[66]);
                m_RadarDevice1DFEStaticReportDataConfigParams.Profile1Rx2IQcrosscorr = ((int)array[71] << 24 | (int)array[70] << 16 | (int)array[69] << 8 | (int)array[68]);
                ScriptOps.m_MainForm.ClibTab.DisplayProfile1RX2DataReportinGUI((int)m_RadarDevice1DFEStaticReportDataConfigParams.Profile1Rx2Idc, (uint)m_RadarDevice1DFEStaticReportDataConfigParams.f000500, (int)m_RadarDevice1DFEStaticReportDataConfigParams.Profile1Rx2Ipwr, (int)m_RadarDevice1DFEStaticReportDataConfigParams.f000501, (uint)m_RadarDevice1DFEStaticReportDataConfigParams.Profile1Rx2IQcrosscorr);
                m_RadarDevice1DFEStaticReportDataConfigParams.Profile1Rx3Idc = (short)((int)array[73] << 8 | (int)array[72]);
                m_RadarDevice1DFEStaticReportDataConfigParams.f000502 = (short)((int)array[75] << 8 | (int)array[74]);
                m_RadarDevice1DFEStaticReportDataConfigParams.Profile1Rx3Ipwr = (ushort)((int)array[77] << 8 | (int)array[76]);
                m_RadarDevice1DFEStaticReportDataConfigParams.f000503 = (ushort)((int)array[79] << 8 | (int)array[78]);
                m_RadarDevice1DFEStaticReportDataConfigParams.Profile1Rx3IQcrosscorr = ((int)array[83] << 24 | (int)array[82] << 16 | (int)array[81] << 8 | (int)array[80]);
                ScriptOps.m_MainForm.ClibTab.DisplayProfile1RX3DataReportinGUI((int)m_RadarDevice1DFEStaticReportDataConfigParams.Profile1Rx3Idc, (uint)m_RadarDevice1DFEStaticReportDataConfigParams.f000502, (int)m_RadarDevice1DFEStaticReportDataConfigParams.Profile1Rx3Ipwr, (int)m_RadarDevice1DFEStaticReportDataConfigParams.f000503, (uint)m_RadarDevice1DFEStaticReportDataConfigParams.Profile1Rx3IQcrosscorr);
                m_RadarDevice1DFEStaticReportDataConfigParams.Profile1Rx4Idc = (short)((int)array[85] << 8 | (int)array[84]);
                m_RadarDevice1DFEStaticReportDataConfigParams.f000504 = (short)((int)array[87] << 8 | (int)array[86]);
                m_RadarDevice1DFEStaticReportDataConfigParams.Profile1Rx4Ipwr = (ushort)((int)array[89] << 8 | (int)array[88]);
                m_RadarDevice1DFEStaticReportDataConfigParams.f000505 = (ushort)((int)array[91] << 8 | (int)array[90]);
                m_RadarDevice1DFEStaticReportDataConfigParams.Profile1Rx4IQcrosscorr = ((int)array[95] << 24 | (int)array[94] << 16 | (int)array[93] << 8 | (int)array[92]);
                ScriptOps.m_MainForm.ClibTab.DisplayProfile1RX4DataReportinGUI((int)m_RadarDevice1DFEStaticReportDataConfigParams.Profile1Rx4Idc, (uint)m_RadarDevice1DFEStaticReportDataConfigParams.f000504, (int)m_RadarDevice1DFEStaticReportDataConfigParams.Profile1Rx4Ipwr, (int)m_RadarDevice1DFEStaticReportDataConfigParams.f000505, (uint)m_RadarDevice1DFEStaticReportDataConfigParams.Profile1Rx4IQcrosscorr);
                m_RadarDevice1DFEStaticReportDataConfigParams.Profile2Rx1Idc = (short)((int)array[97] << 8 | (int)array[96]);
                m_RadarDevice1DFEStaticReportDataConfigParams.f000506 = (short)((int)array[99] << 8 | (int)array[98]);
                m_RadarDevice1DFEStaticReportDataConfigParams.Profile2Rx1Ipwr = (ushort)((int)array[101] << 8 | (int)array[100]);
                m_RadarDevice1DFEStaticReportDataConfigParams.f000507 = (ushort)((int)array[103] << 8 | (int)array[102]);
                m_RadarDevice1DFEStaticReportDataConfigParams.Profile2Rx1IQcrosscorr = ((int)array[107] << 24 | (int)array[106] << 16 | (int)array[105] << 8 | (int)array[104]);
                ScriptOps.m_MainForm.ClibTab.DisplayProfile2RX1DataReportinGUI((int)m_RadarDevice1DFEStaticReportDataConfigParams.Profile2Rx1Idc, (uint)m_RadarDevice1DFEStaticReportDataConfigParams.f000506, (int)m_RadarDevice1DFEStaticReportDataConfigParams.Profile2Rx1Ipwr, (int)m_RadarDevice1DFEStaticReportDataConfigParams.f000507, (uint)m_RadarDevice1DFEStaticReportDataConfigParams.Profile2Rx1IQcrosscorr);
                m_RadarDevice1DFEStaticReportDataConfigParams.Profile2Rx2Idc = (short)((int)array[109] << 8 | (int)array[108]);
                m_RadarDevice1DFEStaticReportDataConfigParams.f000508 = (short)((int)array[111] << 8 | (int)array[110]);
                m_RadarDevice1DFEStaticReportDataConfigParams.Profile2Rx2Ipwr = (ushort)((int)array[113] << 8 | (int)array[112]);
                m_RadarDevice1DFEStaticReportDataConfigParams.f000509 = (ushort)((int)array[115] << 8 | (int)array[114]);
                m_RadarDevice1DFEStaticReportDataConfigParams.Profile2Rx2IQcrosscorr = ((int)array[119] << 24 | (int)array[118] << 16 | (int)array[117] << 8 | (int)array[116]);
                ScriptOps.m_MainForm.ClibTab.DisplayProfile2RX2DataReportinGUI((int)m_RadarDevice1DFEStaticReportDataConfigParams.Profile2Rx2Idc, (uint)m_RadarDevice1DFEStaticReportDataConfigParams.f000508, (int)m_RadarDevice1DFEStaticReportDataConfigParams.Profile2Rx2Ipwr, (int)m_RadarDevice1DFEStaticReportDataConfigParams.f000509, (uint)m_RadarDevice1DFEStaticReportDataConfigParams.Profile2Rx2IQcrosscorr);
                m_RadarDevice1DFEStaticReportDataConfigParams.Profile2Rx3Idc = (short)((int)array[121] << 8 | (int)array[120]);
                m_RadarDevice1DFEStaticReportDataConfigParams.f00050a = (short)((int)array[123] << 8 | (int)array[122]);
                m_RadarDevice1DFEStaticReportDataConfigParams.Profile2Rx3Ipwr = (ushort)((int)array[125] << 8 | (int)array[124]);
                m_RadarDevice1DFEStaticReportDataConfigParams.f00050b = (ushort)((int)array[127] << 8 | (int)array[126]);
                m_RadarDevice1DFEStaticReportDataConfigParams.Profile2Rx3IQcrosscorr = ((int)array[131] << 24 | (int)array[130] << 16 | (int)array[129] << 8 | (int)array[128]);
                ScriptOps.m_MainForm.ClibTab.DisplayProfile2RX3DataReportinGUI((int)m_RadarDevice1DFEStaticReportDataConfigParams.Profile2Rx3Idc, (uint)m_RadarDevice1DFEStaticReportDataConfigParams.f00050a, (int)m_RadarDevice1DFEStaticReportDataConfigParams.Profile2Rx3Ipwr, (int)m_RadarDevice1DFEStaticReportDataConfigParams.f00050b, (uint)m_RadarDevice1DFEStaticReportDataConfigParams.Profile2Rx3IQcrosscorr);
                m_RadarDevice1DFEStaticReportDataConfigParams.Profile2Rx4Idc = (short)((int)array[133] << 8 | (int)array[132]);
                m_RadarDevice1DFEStaticReportDataConfigParams.f00050c = (short)((int)array[135] << 8 | (int)array[134]);
                m_RadarDevice1DFEStaticReportDataConfigParams.Profile2Rx4Ipwr = (ushort)((int)array[137] << 8 | (int)array[136]);
                m_RadarDevice1DFEStaticReportDataConfigParams.f00050d = (ushort)((int)array[139] << 8 | (int)array[138]);
                m_RadarDevice1DFEStaticReportDataConfigParams.Profile2Rx4IQcrosscorr = ((int)array[143] << 24 | (int)array[142] << 16 | (int)array[141] << 8 | (int)array[140]);
                ScriptOps.m_MainForm.ClibTab.DisplayProfile2RX4DataReportinGUI((int)m_RadarDevice1DFEStaticReportDataConfigParams.Profile2Rx4Idc, (uint)m_RadarDevice1DFEStaticReportDataConfigParams.f00050c, (int)m_RadarDevice1DFEStaticReportDataConfigParams.Profile2Rx4Ipwr, (int)m_RadarDevice1DFEStaticReportDataConfigParams.f00050d, (uint)m_RadarDevice1DFEStaticReportDataConfigParams.Profile2Rx4IQcrosscorr);
                m_RadarDevice1DFEStaticReportDataConfigParams.Profile3Rx1Idc = (short)((int)array[145] << 8 | (int)array[144]);
                m_RadarDevice1DFEStaticReportDataConfigParams.f00050e = (short)((int)array[147] << 8 | (int)array[146]);
                m_RadarDevice1DFEStaticReportDataConfigParams.Profile3Rx1Ipwr = (ushort)((int)array[149] << 8 | (int)array[148]);
                m_RadarDevice1DFEStaticReportDataConfigParams.f00050f = (ushort)((int)array[151] << 8 | (int)array[150]);
                m_RadarDevice1DFEStaticReportDataConfigParams.Profile3Rx1IQcrosscorr = ((int)array[155] << 24 | (int)array[154] << 16 | (int)array[153] << 8 | (int)array[152]);
                ScriptOps.m_MainForm.ClibTab.DisplayProfile3RX1DataReportinGUI((int)m_RadarDevice1DFEStaticReportDataConfigParams.Profile3Rx1Idc, (uint)m_RadarDevice1DFEStaticReportDataConfigParams.f00050e, (int)m_RadarDevice1DFEStaticReportDataConfigParams.Profile3Rx1Ipwr, (int)m_RadarDevice1DFEStaticReportDataConfigParams.f00050f, (uint)m_RadarDevice1DFEStaticReportDataConfigParams.Profile3Rx1IQcrosscorr);
                m_RadarDevice1DFEStaticReportDataConfigParams.Profile3Rx2Idc = (short)((int)array[157] << 8 | (int)array[156]);
                m_RadarDevice1DFEStaticReportDataConfigParams.f000510 = (short)((int)array[159] << 8 | (int)array[158]);
                m_RadarDevice1DFEStaticReportDataConfigParams.Profile3Rx2Ipwr = (ushort)((int)array[161] << 8 | (int)array[160]);
                m_RadarDevice1DFEStaticReportDataConfigParams.f000511 = (ushort)((int)array[163] << 8 | (int)array[162]);
                m_RadarDevice1DFEStaticReportDataConfigParams.Profile3Rx2IQcrosscorr = ((int)array[167] << 24 | (int)array[166] << 16 | (int)array[165] << 8 | (int)array[164]);
                ScriptOps.m_MainForm.ClibTab.DisplayProfile3RX2DataReportinGUI((int)m_RadarDevice1DFEStaticReportDataConfigParams.Profile3Rx2Idc, (uint)m_RadarDevice1DFEStaticReportDataConfigParams.f000510, (int)m_RadarDevice1DFEStaticReportDataConfigParams.Profile3Rx2Ipwr, (int)m_RadarDevice1DFEStaticReportDataConfigParams.f000511, (uint)m_RadarDevice1DFEStaticReportDataConfigParams.Profile3Rx2IQcrosscorr);
                m_RadarDevice1DFEStaticReportDataConfigParams.Profile3Rx3Idc = (short)((int)array[169] << 8 | (int)array[168]);
                m_RadarDevice1DFEStaticReportDataConfigParams.f000512 = (short)((int)array[171] << 8 | (int)array[170]);
                m_RadarDevice1DFEStaticReportDataConfigParams.Profile3Rx3Ipwr = (ushort)((int)array[173] << 8 | (int)array[172]);
                m_RadarDevice1DFEStaticReportDataConfigParams.f000513 = (ushort)((int)array[175] << 8 | (int)array[174]);
                m_RadarDevice1DFEStaticReportDataConfigParams.Profile3Rx3IQcrosscorr = ((int)array[179] << 24 | (int)array[178] << 16 | (int)array[177] << 8 | (int)array[176]);
                ScriptOps.m_MainForm.ClibTab.DisplayProfile3RX3DataReportinGUI((int)m_RadarDevice1DFEStaticReportDataConfigParams.Profile3Rx3Idc, (uint)m_RadarDevice1DFEStaticReportDataConfigParams.f000512, (int)m_RadarDevice1DFEStaticReportDataConfigParams.Profile3Rx3Ipwr, (int)m_RadarDevice1DFEStaticReportDataConfigParams.f000513, (uint)m_RadarDevice1DFEStaticReportDataConfigParams.Profile3Rx3IQcrosscorr);
                m_RadarDevice1DFEStaticReportDataConfigParams.Profile3Rx4Idc = (short)((int)array[181] << 8 | (int)array[180]);
                m_RadarDevice1DFEStaticReportDataConfigParams.f000514 = (short)((int)array[183] << 8 | (int)array[182]);
                m_RadarDevice1DFEStaticReportDataConfigParams.Profile3Rx4Ipwr = (ushort)((int)array[185] << 8 | (int)array[184]);
                m_RadarDevice1DFEStaticReportDataConfigParams.f000515 = (ushort)((int)array[187] << 8 | (int)array[186]);
                m_RadarDevice1DFEStaticReportDataConfigParams.Profile3Rx4IQcrosscorr = ((int)array[191] << 24 | (int)array[190] << 16 | (int)array[189] << 8 | (int)array[188]);
                ScriptOps.m_MainForm.ClibTab.DisplayProfile3RX4DataReportinGUI((int)m_RadarDevice1DFEStaticReportDataConfigParams.Profile3Rx4Idc, (uint)m_RadarDevice1DFEStaticReportDataConfigParams.f000512, (int)m_RadarDevice1DFEStaticReportDataConfigParams.Profile3Rx4Ipwr, (int)m_RadarDevice1DFEStaticReportDataConfigParams.f000515, (uint)m_RadarDevice1DFEStaticReportDataConfigParams.Profile3Rx4IQcrosscorr);
            }
            else if (GlobalRef.g_RadarDeviceId == 2U)
            {
                m_RadarDevice2DFEStaticReportDataConfigParams.Profile0Rx1Idc = (short)((int)array[1] << 8 | (int)array[0]);
                m_RadarDevice2DFEStaticReportDataConfigParams.f0004f6 = (short)((int)array[3] << 8 | (int)array[2]);
                m_RadarDevice2DFEStaticReportDataConfigParams.Profile0Rx1Ipwr = (ushort)((int)array[5] << 8 | (int)array[4]);
                m_RadarDevice2DFEStaticReportDataConfigParams.f0004f7 = (ushort)((int)array[7] << 8 | (int)array[6]);
                m_RadarDevice2DFEStaticReportDataConfigParams.Profile0Rx1IQcrosscorr = ((int)array[11] << 24 | (int)array[10] << 16 | (int)array[9] << 8 | (int)array[8]);
                ScriptOps.m_MainForm.ClibTab.DisplayProfile0RX1DataReportinGUI((int)m_RadarDevice2DFEStaticReportDataConfigParams.Profile0Rx1Idc, (uint)m_RadarDevice2DFEStaticReportDataConfigParams.f0004f6, (int)m_RadarDevice2DFEStaticReportDataConfigParams.Profile0Rx1Ipwr, (int)m_RadarDevice2DFEStaticReportDataConfigParams.f0004f7, (uint)m_RadarDevice2DFEStaticReportDataConfigParams.Profile0Rx1IQcrosscorr);
                m_RadarDevice2DFEStaticReportDataConfigParams.Profile0Rx2Idc = (short)((int)array[13] << 8 | (int)array[12]);
                m_RadarDevice2DFEStaticReportDataConfigParams.f0004f8 = (short)((int)array[15] << 8 | (int)array[14]);
                m_RadarDevice2DFEStaticReportDataConfigParams.Profile0Rx2Ipwr = (ushort)((int)array[17] << 8 | (int)array[16]);
                m_RadarDevice2DFEStaticReportDataConfigParams.f0004f9 = (ushort)((int)array[19] << 8 | (int)array[18]);
                m_RadarDevice2DFEStaticReportDataConfigParams.Profile0Rx2IQcrosscorr = ((int)array[23] << 24 | (int)array[22] << 16 | (int)array[21] << 8 | (int)array[20]);
                ScriptOps.m_MainForm.ClibTab.DisplayProfile0RX2DataReportinGUI((int)m_RadarDevice2DFEStaticReportDataConfigParams.Profile0Rx2Idc, (uint)m_RadarDevice2DFEStaticReportDataConfigParams.f0004f8, (int)m_RadarDevice2DFEStaticReportDataConfigParams.Profile0Rx2Ipwr, (int)m_RadarDevice2DFEStaticReportDataConfigParams.f0004f9, (uint)m_RadarDevice2DFEStaticReportDataConfigParams.Profile0Rx2IQcrosscorr);
                m_RadarDevice2DFEStaticReportDataConfigParams.Profile0Rx3Idc = (short)((int)array[25] << 8 | (int)array[24]);
                m_RadarDevice2DFEStaticReportDataConfigParams.f0004fa = (short)((int)array[27] << 8 | (int)array[26]);
                m_RadarDevice2DFEStaticReportDataConfigParams.Profile0Rx3Ipwr = (ushort)((int)array[29] << 8 | (int)array[28]);
                m_RadarDevice2DFEStaticReportDataConfigParams.f0004fb = (ushort)((int)array[31] << 8 | (int)array[30]);
                m_RadarDevice2DFEStaticReportDataConfigParams.Profile0Rx3IQcrosscorr = ((int)array[35] << 24 | (int)array[34] << 16 | (int)array[33] << 8 | (int)array[32]);
                ScriptOps.m_MainForm.ClibTab.DisplayProfile0RX3DataReportinGUI((int)m_RadarDevice2DFEStaticReportDataConfigParams.Profile0Rx3Idc, (uint)m_RadarDevice2DFEStaticReportDataConfigParams.f0004fa, (int)m_RadarDevice2DFEStaticReportDataConfigParams.Profile0Rx3Ipwr, (int)m_RadarDevice2DFEStaticReportDataConfigParams.f0004fb, (uint)m_RadarDevice2DFEStaticReportDataConfigParams.Profile0Rx3IQcrosscorr);
                m_RadarDevice2DFEStaticReportDataConfigParams.Profile0Rx4Idc = (short)((int)array[37] << 8 | (int)array[36]);
                m_RadarDevice2DFEStaticReportDataConfigParams.f0004fc = (short)((int)array[39] << 8 | (int)array[38]);
                m_RadarDevice2DFEStaticReportDataConfigParams.Profile0Rx4Ipwr = (ushort)((int)array[41] << 8 | (int)array[40]);
                m_RadarDevice2DFEStaticReportDataConfigParams.f0004fd = (ushort)((int)array[43] << 8 | (int)array[42]);
                m_RadarDevice2DFEStaticReportDataConfigParams.Profile0Rx4IQcrosscorr = ((int)array[47] << 24 | (int)array[46] << 16 | (int)array[45] << 8 | (int)array[44]);
                ScriptOps.m_MainForm.ClibTab.DisplayProfile0RX4DataReportinGUI((int)m_RadarDevice2DFEStaticReportDataConfigParams.Profile0Rx4Idc, (uint)m_RadarDevice2DFEStaticReportDataConfigParams.f0004fc, (int)m_RadarDevice2DFEStaticReportDataConfigParams.Profile0Rx4Ipwr, (int)m_RadarDevice2DFEStaticReportDataConfigParams.f0004fd, (uint)m_RadarDevice2DFEStaticReportDataConfigParams.Profile0Rx4IQcrosscorr);
                m_RadarDevice2DFEStaticReportDataConfigParams.Profile1Rx1Idc = (short)((int)array[49] << 8 | (int)array[48]);
                m_RadarDevice2DFEStaticReportDataConfigParams.f0004fe = (short)((int)array[51] << 8 | (int)array[50]);
                m_RadarDevice2DFEStaticReportDataConfigParams.Profile1Rx1Ipwr = (ushort)((int)array[53] << 8 | (int)array[52]);
                m_RadarDevice2DFEStaticReportDataConfigParams.f0004ff = (ushort)((int)array[55] << 8 | (int)array[54]);
                m_RadarDevice2DFEStaticReportDataConfigParams.Profile1Rx1IQcrosscorr = ((int)array[59] << 24 | (int)array[58] << 16 | (int)array[57] << 8 | (int)array[56]);
                ScriptOps.m_MainForm.ClibTab.DisplayProfile1RX1DataReportinGUI((int)m_RadarDevice2DFEStaticReportDataConfigParams.Profile1Rx1Idc, (uint)m_RadarDevice2DFEStaticReportDataConfigParams.f0004fe, (int)m_RadarDevice2DFEStaticReportDataConfigParams.Profile1Rx1Ipwr, (int)m_RadarDevice2DFEStaticReportDataConfigParams.f0004ff, (uint)m_RadarDevice2DFEStaticReportDataConfigParams.Profile1Rx1IQcrosscorr);
                m_RadarDevice2DFEStaticReportDataConfigParams.Profile1Rx2Idc = (short)((int)array[61] << 8 | (int)array[60]);
                m_RadarDevice2DFEStaticReportDataConfigParams.f000500 = (short)((int)array[63] << 8 | (int)array[62]);
                m_RadarDevice2DFEStaticReportDataConfigParams.Profile1Rx2Ipwr = (ushort)((int)array[65] << 8 | (int)array[64]);
                m_RadarDevice2DFEStaticReportDataConfigParams.f000501 = (ushort)((int)array[67] << 8 | (int)array[66]);
                m_RadarDevice2DFEStaticReportDataConfigParams.Profile1Rx2IQcrosscorr = ((int)array[71] << 24 | (int)array[70] << 16 | (int)array[69] << 8 | (int)array[68]);
                ScriptOps.m_MainForm.ClibTab.DisplayProfile1RX2DataReportinGUI((int)m_RadarDevice2DFEStaticReportDataConfigParams.Profile1Rx2Idc, (uint)m_RadarDevice2DFEStaticReportDataConfigParams.f000500, (int)m_RadarDevice2DFEStaticReportDataConfigParams.Profile1Rx2Ipwr, (int)m_RadarDevice2DFEStaticReportDataConfigParams.f000501, (uint)m_RadarDevice2DFEStaticReportDataConfigParams.Profile1Rx2IQcrosscorr);
                m_RadarDevice2DFEStaticReportDataConfigParams.Profile1Rx3Idc = (short)((int)array[73] << 8 | (int)array[72]);
                m_RadarDevice2DFEStaticReportDataConfigParams.f000502 = (short)((int)array[75] << 8 | (int)array[74]);
                m_RadarDevice2DFEStaticReportDataConfigParams.Profile1Rx3Ipwr = (ushort)((int)array[77] << 8 | (int)array[76]);
                m_RadarDevice2DFEStaticReportDataConfigParams.f000503 = (ushort)((int)array[79] << 8 | (int)array[78]);
                m_RadarDevice2DFEStaticReportDataConfigParams.Profile1Rx3IQcrosscorr = ((int)array[83] << 24 | (int)array[82] << 16 | (int)array[81] << 8 | (int)array[80]);
                ScriptOps.m_MainForm.ClibTab.DisplayProfile1RX3DataReportinGUI((int)m_RadarDevice2DFEStaticReportDataConfigParams.Profile1Rx3Idc, (uint)m_RadarDevice2DFEStaticReportDataConfigParams.f000502, (int)m_RadarDevice2DFEStaticReportDataConfigParams.Profile1Rx3Ipwr, (int)m_RadarDevice2DFEStaticReportDataConfigParams.f000503, (uint)m_RadarDevice2DFEStaticReportDataConfigParams.Profile1Rx3IQcrosscorr);
                m_RadarDevice2DFEStaticReportDataConfigParams.Profile1Rx4Idc = (short)((int)array[85] << 8 | (int)array[84]);
                m_RadarDevice2DFEStaticReportDataConfigParams.f000504 = (short)((int)array[87] << 8 | (int)array[86]);
                m_RadarDevice2DFEStaticReportDataConfigParams.Profile1Rx4Ipwr = (ushort)((int)array[89] << 8 | (int)array[88]);
                m_RadarDevice2DFEStaticReportDataConfigParams.f000505 = (ushort)((int)array[91] << 8 | (int)array[90]);
                m_RadarDevice2DFEStaticReportDataConfigParams.Profile1Rx4IQcrosscorr = ((int)array[95] << 24 | (int)array[94] << 16 | (int)array[93] << 8 | (int)array[92]);
                ScriptOps.m_MainForm.ClibTab.DisplayProfile2RX4DataReportinGUI((int)m_RadarDevice2DFEStaticReportDataConfigParams.Profile2Rx4Idc, (uint)m_RadarDevice2DFEStaticReportDataConfigParams.f00050c, (int)m_RadarDevice2DFEStaticReportDataConfigParams.Profile2Rx4Ipwr, (int)m_RadarDevice2DFEStaticReportDataConfigParams.f00050d, (uint)m_RadarDevice2DFEStaticReportDataConfigParams.Profile2Rx4IQcrosscorr);
                m_RadarDevice2DFEStaticReportDataConfigParams.Profile2Rx1Idc = (short)((int)array[97] << 8 | (int)array[96]);
                m_RadarDevice2DFEStaticReportDataConfigParams.f000506 = (short)((int)array[99] << 8 | (int)array[98]);
                m_RadarDevice2DFEStaticReportDataConfigParams.Profile2Rx1Ipwr = (ushort)((int)array[101] << 8 | (int)array[100]);
                m_RadarDevice2DFEStaticReportDataConfigParams.f000507 = (ushort)((int)array[103] << 8 | (int)array[102]);
                m_RadarDevice2DFEStaticReportDataConfigParams.Profile2Rx1IQcrosscorr = ((int)array[107] << 24 | (int)array[106] << 16 | (int)array[105] << 8 | (int)array[104]);
                ScriptOps.m_MainForm.ClibTab.DisplayProfile2RX1DataReportinGUI((int)m_RadarDevice2DFEStaticReportDataConfigParams.Profile2Rx1Idc, (uint)m_RadarDevice2DFEStaticReportDataConfigParams.f000506, (int)m_RadarDevice2DFEStaticReportDataConfigParams.Profile2Rx1Ipwr, (int)m_RadarDevice2DFEStaticReportDataConfigParams.f000507, (uint)m_RadarDevice2DFEStaticReportDataConfigParams.Profile2Rx1IQcrosscorr);
                m_RadarDevice2DFEStaticReportDataConfigParams.Profile2Rx2Idc = (short)((int)array[109] << 8 | (int)array[108]);
                m_RadarDevice2DFEStaticReportDataConfigParams.f000508 = (short)((int)array[111] << 8 | (int)array[110]);
                m_RadarDevice2DFEStaticReportDataConfigParams.Profile2Rx2Ipwr = (ushort)((int)array[113] << 8 | (int)array[112]);
                m_RadarDevice2DFEStaticReportDataConfigParams.f000509 = (ushort)((int)array[115] << 8 | (int)array[114]);
                m_RadarDevice2DFEStaticReportDataConfigParams.Profile2Rx2IQcrosscorr = ((int)array[119] << 24 | (int)array[118] << 16 | (int)array[117] << 8 | (int)array[116]);
                ScriptOps.m_MainForm.ClibTab.DisplayProfile2RX2DataReportinGUI((int)m_RadarDevice2DFEStaticReportDataConfigParams.Profile2Rx2Idc, (uint)m_RadarDevice2DFEStaticReportDataConfigParams.f000508, (int)m_RadarDevice2DFEStaticReportDataConfigParams.Profile2Rx2Ipwr, (int)m_RadarDevice2DFEStaticReportDataConfigParams.f000509, (uint)m_RadarDevice2DFEStaticReportDataConfigParams.Profile2Rx2IQcrosscorr);
                m_RadarDevice2DFEStaticReportDataConfigParams.Profile2Rx3Idc = (short)((int)array[121] << 8 | (int)array[120]);
                m_RadarDevice2DFEStaticReportDataConfigParams.f00050a = (short)((int)array[123] << 8 | (int)array[122]);
                m_RadarDevice2DFEStaticReportDataConfigParams.Profile2Rx3Ipwr = (ushort)((int)array[125] << 8 | (int)array[124]);
                m_RadarDevice2DFEStaticReportDataConfigParams.f00050b = (ushort)((int)array[127] << 8 | (int)array[126]);
                m_RadarDevice2DFEStaticReportDataConfigParams.Profile2Rx3IQcrosscorr = ((int)array[131] << 24 | (int)array[130] << 16 | (int)array[129] << 8 | (int)array[128]);
                ScriptOps.m_MainForm.ClibTab.DisplayProfile2RX3DataReportinGUI((int)m_RadarDevice2DFEStaticReportDataConfigParams.Profile2Rx3Idc, (uint)m_RadarDevice2DFEStaticReportDataConfigParams.f00050a, (int)m_RadarDevice2DFEStaticReportDataConfigParams.Profile2Rx3Ipwr, (int)m_RadarDevice2DFEStaticReportDataConfigParams.f00050b, (uint)m_RadarDevice2DFEStaticReportDataConfigParams.Profile2Rx3IQcrosscorr);
                m_RadarDevice2DFEStaticReportDataConfigParams.Profile2Rx4Idc = (short)((int)array[133] << 8 | (int)array[132]);
                m_RadarDevice2DFEStaticReportDataConfigParams.f00050c = (short)((int)array[135] << 8 | (int)array[134]);
                m_RadarDevice2DFEStaticReportDataConfigParams.Profile2Rx4Ipwr = (ushort)((int)array[137] << 8 | (int)array[136]);
                m_RadarDevice2DFEStaticReportDataConfigParams.f00050d = (ushort)((int)array[139] << 8 | (int)array[138]);
                m_RadarDevice2DFEStaticReportDataConfigParams.Profile2Rx4IQcrosscorr = ((int)array[143] << 24 | (int)array[142] << 16 | (int)array[141] << 8 | (int)array[140]);
                ScriptOps.m_MainForm.ClibTab.DisplayProfile2RX4DataReportinGUI((int)m_RadarDevice2DFEStaticReportDataConfigParams.Profile2Rx4Idc, (uint)m_RadarDevice2DFEStaticReportDataConfigParams.f00050c, (int)m_RadarDevice2DFEStaticReportDataConfigParams.Profile2Rx4Ipwr, (int)m_RadarDevice2DFEStaticReportDataConfigParams.f00050d, (uint)m_RadarDevice2DFEStaticReportDataConfigParams.Profile2Rx4IQcrosscorr);
                m_RadarDevice2DFEStaticReportDataConfigParams.Profile3Rx1Idc = (short)((int)array[145] << 8 | (int)array[144]);
                m_RadarDevice2DFEStaticReportDataConfigParams.f00050e = (short)((int)array[147] << 8 | (int)array[146]);
                m_RadarDevice2DFEStaticReportDataConfigParams.Profile3Rx1Ipwr = (ushort)((int)array[149] << 8 | (int)array[148]);
                m_RadarDevice2DFEStaticReportDataConfigParams.f00050f = (ushort)((int)array[151] << 8 | (int)array[150]);
                m_RadarDevice2DFEStaticReportDataConfigParams.Profile3Rx1IQcrosscorr = ((int)array[155] << 24 | (int)array[154] << 16 | (int)array[153] << 8 | (int)array[152]);
                ScriptOps.m_MainForm.ClibTab.DisplayProfile3RX1DataReportinGUI((int)m_RadarDevice2DFEStaticReportDataConfigParams.Profile3Rx1Idc, (uint)m_RadarDevice2DFEStaticReportDataConfigParams.f00050e, (int)m_RadarDevice2DFEStaticReportDataConfigParams.Profile3Rx1Ipwr, (int)m_RadarDevice2DFEStaticReportDataConfigParams.f00050f, (uint)m_RadarDevice2DFEStaticReportDataConfigParams.Profile3Rx1IQcrosscorr);
                m_RadarDevice2DFEStaticReportDataConfigParams.Profile3Rx2Idc = (short)((int)array[157] << 8 | (int)array[156]);
                m_RadarDevice2DFEStaticReportDataConfigParams.f000510 = (short)((int)array[159] << 8 | (int)array[158]);
                m_RadarDevice2DFEStaticReportDataConfigParams.Profile3Rx2Ipwr = (ushort)((int)array[161] << 8 | (int)array[160]);
                m_RadarDevice2DFEStaticReportDataConfigParams.f000511 = (ushort)((int)array[163] << 8 | (int)array[162]);
                m_RadarDevice2DFEStaticReportDataConfigParams.Profile3Rx2IQcrosscorr = ((int)array[167] << 24 | (int)array[166] << 16 | (int)array[165] << 8 | (int)array[164]);
                ScriptOps.m_MainForm.ClibTab.DisplayProfile3RX2DataReportinGUI((int)m_RadarDevice2DFEStaticReportDataConfigParams.Profile3Rx2Idc, (uint)m_RadarDevice2DFEStaticReportDataConfigParams.f000510, (int)m_RadarDevice2DFEStaticReportDataConfigParams.Profile3Rx2Ipwr, (int)m_RadarDevice2DFEStaticReportDataConfigParams.f000511, (uint)m_RadarDevice2DFEStaticReportDataConfigParams.Profile3Rx2IQcrosscorr);
                m_RadarDevice2DFEStaticReportDataConfigParams.Profile3Rx3Idc = (short)((int)array[169] << 8 | (int)array[168]);
                m_RadarDevice2DFEStaticReportDataConfigParams.f000512 = (short)((int)array[171] << 8 | (int)array[170]);
                m_RadarDevice2DFEStaticReportDataConfigParams.Profile3Rx3Ipwr = (ushort)((int)array[173] << 8 | (int)array[172]);
                m_RadarDevice2DFEStaticReportDataConfigParams.f000513 = (ushort)((int)array[175] << 8 | (int)array[174]);
                m_RadarDevice2DFEStaticReportDataConfigParams.Profile3Rx3IQcrosscorr = ((int)array[179] << 24 | (int)array[178] << 16 | (int)array[177] << 8 | (int)array[176]);
                ScriptOps.m_MainForm.ClibTab.DisplayProfile3RX3DataReportinGUI((int)m_RadarDevice2DFEStaticReportDataConfigParams.Profile3Rx3Idc, (uint)m_RadarDevice2DFEStaticReportDataConfigParams.f000512, (int)m_RadarDevice2DFEStaticReportDataConfigParams.Profile3Rx3Ipwr, (int)m_RadarDevice2DFEStaticReportDataConfigParams.f000513, (uint)m_RadarDevice2DFEStaticReportDataConfigParams.Profile3Rx3IQcrosscorr);
                m_RadarDevice2DFEStaticReportDataConfigParams.Profile3Rx4Idc = (short)((int)array[181] << 8 | (int)array[180]);
                m_RadarDevice2DFEStaticReportDataConfigParams.f000514 = (short)((int)array[183] << 8 | (int)array[182]);
                m_RadarDevice2DFEStaticReportDataConfigParams.Profile3Rx4Ipwr = (ushort)((int)array[185] << 8 | (int)array[184]);
                m_RadarDevice2DFEStaticReportDataConfigParams.f000515 = (ushort)((int)array[187] << 8 | (int)array[186]);
                m_RadarDevice2DFEStaticReportDataConfigParams.Profile3Rx4IQcrosscorr = ((int)array[191] << 24 | (int)array[190] << 16 | (int)array[189] << 8 | (int)array[188]);
                ScriptOps.m_MainForm.ClibTab.DisplayProfile3RX4DataReportinGUI((int)m_RadarDevice2DFEStaticReportDataConfigParams.Profile3Rx4Idc, (uint)m_RadarDevice2DFEStaticReportDataConfigParams.f000512, (int)m_RadarDevice2DFEStaticReportDataConfigParams.Profile3Rx4Ipwr, (int)m_RadarDevice2DFEStaticReportDataConfigParams.f000515, (uint)m_RadarDevice2DFEStaticReportDataConfigParams.Profile3Rx4IQcrosscorr);
            }
            else if (GlobalRef.g_RadarDeviceId == 4U)
            {
                m_RadarDevice3DFEStaticReportDataConfigParams.Profile0Rx1Idc = (short)((int)array[1] << 8 | (int)array[0]);
                m_RadarDevice3DFEStaticReportDataConfigParams.f0004f6 = (short)((int)array[3] << 8 | (int)array[2]);
                m_RadarDevice3DFEStaticReportDataConfigParams.Profile0Rx1Ipwr = (ushort)((int)array[5] << 8 | (int)array[4]);
                m_RadarDevice3DFEStaticReportDataConfigParams.f0004f7 = (ushort)((int)array[7] << 8 | (int)array[6]);
                m_RadarDevice3DFEStaticReportDataConfigParams.Profile0Rx1IQcrosscorr = ((int)array[11] << 24 | (int)array[10] << 16 | (int)array[9] << 8 | (int)array[8]);
                m_RadarDevice3DFEStaticReportDataConfigParams.Profile0Rx2Idc = (short)((int)array[13] << 8 | (int)array[12]);
                m_RadarDevice3DFEStaticReportDataConfigParams.f0004f8 = (short)((int)array[15] << 8 | (int)array[14]);
                m_RadarDevice3DFEStaticReportDataConfigParams.Profile0Rx2Ipwr = (ushort)((int)array[17] << 8 | (int)array[16]);
                m_RadarDevice3DFEStaticReportDataConfigParams.f0004f9 = (ushort)((int)array[19] << 8 | (int)array[18]);
                m_RadarDevice3DFEStaticReportDataConfigParams.Profile0Rx2IQcrosscorr = ((int)array[23] << 24 | (int)array[22] << 16 | (int)array[21] << 8 | (int)array[20]);
                m_RadarDevice3DFEStaticReportDataConfigParams.Profile0Rx3Idc = (short)((int)array[25] << 8 | (int)array[24]);
                m_RadarDevice3DFEStaticReportDataConfigParams.f0004fa = (short)((int)array[27] << 8 | (int)array[26]);
                m_RadarDevice3DFEStaticReportDataConfigParams.Profile0Rx3Ipwr = (ushort)((int)array[29] << 8 | (int)array[28]);
                m_RadarDevice3DFEStaticReportDataConfigParams.f0004fb = (ushort)((int)array[31] << 8 | (int)array[30]);
                m_RadarDevice3DFEStaticReportDataConfigParams.Profile0Rx3IQcrosscorr = ((int)array[35] << 24 | (int)array[34] << 16 | (int)array[33] << 8 | (int)array[32]);
                m_RadarDevice3DFEStaticReportDataConfigParams.Profile0Rx4Idc = (short)((int)array[37] << 8 | (int)array[36]);
                m_RadarDevice3DFEStaticReportDataConfigParams.f0004fc = (short)((int)array[39] << 8 | (int)array[38]);
                m_RadarDevice3DFEStaticReportDataConfigParams.Profile0Rx4Ipwr = (ushort)((int)array[41] << 8 | (int)array[40]);
                m_RadarDevice3DFEStaticReportDataConfigParams.f0004fd = (ushort)((int)array[43] << 8 | (int)array[42]);
                m_RadarDevice3DFEStaticReportDataConfigParams.Profile0Rx4IQcrosscorr = ((int)array[47] << 24 | (int)array[46] << 16 | (int)array[45] << 8 | (int)array[44]);
                m_RadarDevice3DFEStaticReportDataConfigParams.Profile1Rx1Idc = (short)((int)array[49] << 8 | (int)array[48]);
                m_RadarDevice3DFEStaticReportDataConfigParams.f0004fe = (short)((int)array[51] << 8 | (int)array[50]);
                m_RadarDevice3DFEStaticReportDataConfigParams.Profile1Rx1Ipwr = (ushort)((int)array[53] << 8 | (int)array[52]);
                m_RadarDevice3DFEStaticReportDataConfigParams.f0004ff = (ushort)((int)array[55] << 8 | (int)array[54]);
                m_RadarDevice3DFEStaticReportDataConfigParams.Profile1Rx1IQcrosscorr = ((int)array[59] << 24 | (int)array[58] << 16 | (int)array[57] << 8 | (int)array[56]);
                m_RadarDevice3DFEStaticReportDataConfigParams.Profile1Rx2Idc = (short)((int)array[61] << 8 | (int)array[60]);
                m_RadarDevice3DFEStaticReportDataConfigParams.f000500 = (short)((int)array[63] << 8 | (int)array[62]);
                m_RadarDevice3DFEStaticReportDataConfigParams.Profile1Rx2Ipwr = (ushort)((int)array[65] << 8 | (int)array[64]);
                m_RadarDevice3DFEStaticReportDataConfigParams.f000501 = (ushort)((int)array[67] << 8 | (int)array[66]);
                m_RadarDevice3DFEStaticReportDataConfigParams.Profile1Rx2IQcrosscorr = ((int)array[71] << 24 | (int)array[70] << 16 | (int)array[69] << 8 | (int)array[68]);
                m_RadarDevice3DFEStaticReportDataConfigParams.Profile1Rx3Idc = (short)((int)array[73] << 8 | (int)array[72]);
                m_RadarDevice3DFEStaticReportDataConfigParams.f000502 = (short)((int)array[75] << 8 | (int)array[74]);
                m_RadarDevice3DFEStaticReportDataConfigParams.Profile1Rx3Ipwr = (ushort)((int)array[77] << 8 | (int)array[76]);
                m_RadarDevice3DFEStaticReportDataConfigParams.f000503 = (ushort)((int)array[79] << 8 | (int)array[78]);
                m_RadarDevice3DFEStaticReportDataConfigParams.Profile1Rx3IQcrosscorr = ((int)array[83] << 24 | (int)array[82] << 16 | (int)array[81] << 8 | (int)array[80]);
                m_RadarDevice3DFEStaticReportDataConfigParams.Profile1Rx4Idc = (short)((int)array[85] << 8 | (int)array[84]);
                m_RadarDevice3DFEStaticReportDataConfigParams.f000504 = (short)((int)array[87] << 8 | (int)array[86]);
                m_RadarDevice3DFEStaticReportDataConfigParams.Profile1Rx4Ipwr = (ushort)((int)array[89] << 8 | (int)array[88]);
                m_RadarDevice3DFEStaticReportDataConfigParams.f000505 = (ushort)((int)array[91] << 8 | (int)array[90]);
                m_RadarDevice3DFEStaticReportDataConfigParams.Profile1Rx4IQcrosscorr = ((int)array[95] << 24 | (int)array[94] << 16 | (int)array[93] << 8 | (int)array[92]);
                m_RadarDevice3DFEStaticReportDataConfigParams.Profile2Rx1Idc = (short)((int)array[97] << 8 | (int)array[96]);
                m_RadarDevice3DFEStaticReportDataConfigParams.f000506 = (short)((int)array[99] << 8 | (int)array[98]);
                m_RadarDevice3DFEStaticReportDataConfigParams.Profile2Rx1Ipwr = (ushort)((int)array[101] << 8 | (int)array[100]);
                m_RadarDevice3DFEStaticReportDataConfigParams.f000507 = (ushort)((int)array[103] << 8 | (int)array[102]);
                m_RadarDevice3DFEStaticReportDataConfigParams.Profile2Rx1IQcrosscorr = ((int)array[107] << 24 | (int)array[106] << 16 | (int)array[105] << 8 | (int)array[104]);
                m_RadarDevice3DFEStaticReportDataConfigParams.Profile2Rx2Idc = (short)((int)array[109] << 8 | (int)array[108]);
                m_RadarDevice3DFEStaticReportDataConfigParams.f000508 = (short)((int)array[111] << 8 | (int)array[110]);
                m_RadarDevice3DFEStaticReportDataConfigParams.Profile2Rx2Ipwr = (ushort)((int)array[113] << 8 | (int)array[112]);
                m_RadarDevice3DFEStaticReportDataConfigParams.f000509 = (ushort)((int)array[115] << 8 | (int)array[114]);
                m_RadarDevice3DFEStaticReportDataConfigParams.Profile2Rx2IQcrosscorr = ((int)array[119] << 24 | (int)array[118] << 16 | (int)array[117] << 8 | (int)array[116]);
                m_RadarDevice3DFEStaticReportDataConfigParams.Profile2Rx3Idc = (short)((int)array[121] << 8 | (int)array[120]);
                m_RadarDevice3DFEStaticReportDataConfigParams.f00050a = (short)((int)array[123] << 8 | (int)array[122]);
                m_RadarDevice3DFEStaticReportDataConfigParams.Profile2Rx3Ipwr = (ushort)((int)array[125] << 8 | (int)array[124]);
                m_RadarDevice3DFEStaticReportDataConfigParams.f00050b = (ushort)((int)array[127] << 8 | (int)array[126]);
                m_RadarDevice3DFEStaticReportDataConfigParams.Profile2Rx3IQcrosscorr = ((int)array[131] << 24 | (int)array[130] << 16 | (int)array[129] << 8 | (int)array[128]);
                m_RadarDevice3DFEStaticReportDataConfigParams.Profile2Rx4Idc = (short)((int)array[133] << 8 | (int)array[132]);
                m_RadarDevice3DFEStaticReportDataConfigParams.f00050c = (short)((int)array[135] << 8 | (int)array[134]);
                m_RadarDevice3DFEStaticReportDataConfigParams.Profile2Rx4Ipwr = (ushort)((int)array[137] << 8 | (int)array[136]);
                m_RadarDevice3DFEStaticReportDataConfigParams.f00050d = (ushort)((int)array[139] << 8 | (int)array[138]);
                m_RadarDevice3DFEStaticReportDataConfigParams.Profile2Rx4IQcrosscorr = ((int)array[143] << 24 | (int)array[142] << 16 | (int)array[141] << 8 | (int)array[140]);
                m_RadarDevice3DFEStaticReportDataConfigParams.Profile3Rx1Idc = (short)((int)array[145] << 8 | (int)array[144]);
                m_RadarDevice3DFEStaticReportDataConfigParams.f00050e = (short)((int)array[147] << 8 | (int)array[146]);
                m_RadarDevice3DFEStaticReportDataConfigParams.Profile3Rx1Ipwr = (ushort)((int)array[149] << 8 | (int)array[148]);
                m_RadarDevice3DFEStaticReportDataConfigParams.f00050f = (ushort)((int)array[151] << 8 | (int)array[150]);
                m_RadarDevice3DFEStaticReportDataConfigParams.Profile3Rx1IQcrosscorr = ((int)array[155] << 24 | (int)array[154] << 16 | (int)array[153] << 8 | (int)array[152]);
                m_RadarDevice3DFEStaticReportDataConfigParams.Profile3Rx2Idc = (short)((int)array[157] << 8 | (int)array[156]);
                m_RadarDevice3DFEStaticReportDataConfigParams.f000510 = (short)((int)array[159] << 8 | (int)array[158]);
                m_RadarDevice3DFEStaticReportDataConfigParams.Profile3Rx2Ipwr = (ushort)((int)array[161] << 8 | (int)array[160]);
                m_RadarDevice3DFEStaticReportDataConfigParams.f000511 = (ushort)((int)array[163] << 8 | (int)array[162]);
                m_RadarDevice3DFEStaticReportDataConfigParams.Profile3Rx2IQcrosscorr = ((int)array[167] << 24 | (int)array[166] << 16 | (int)array[165] << 8 | (int)array[164]);
                m_RadarDevice3DFEStaticReportDataConfigParams.Profile3Rx3Idc = (short)((int)array[169] << 8 | (int)array[168]);
                m_RadarDevice3DFEStaticReportDataConfigParams.f000512 = (short)((int)array[171] << 8 | (int)array[170]);
                m_RadarDevice3DFEStaticReportDataConfigParams.Profile3Rx3Ipwr = (ushort)((int)array[173] << 8 | (int)array[172]);
                m_RadarDevice3DFEStaticReportDataConfigParams.f000513 = (ushort)((int)array[175] << 8 | (int)array[174]);
                m_RadarDevice3DFEStaticReportDataConfigParams.Profile3Rx3IQcrosscorr = ((int)array[179] << 24 | (int)array[178] << 16 | (int)array[177] << 8 | (int)array[176]);
                m_RadarDevice3DFEStaticReportDataConfigParams.Profile3Rx4Idc = (short)((int)array[181] << 8 | (int)array[180]);
                m_RadarDevice3DFEStaticReportDataConfigParams.f000514 = (short)((int)array[183] << 8 | (int)array[182]);
                m_RadarDevice3DFEStaticReportDataConfigParams.Profile3Rx4Ipwr = (ushort)((int)array[185] << 8 | (int)array[184]);
                m_RadarDevice3DFEStaticReportDataConfigParams.f000515 = (ushort)((int)array[187] << 8 | (int)array[186]);
                m_RadarDevice3DFEStaticReportDataConfigParams.Profile3Rx4IQcrosscorr = ((int)array[191] << 24 | (int)array[190] << 16 | (int)array[189] << 8 | (int)array[188]);
            }
            else if (GlobalRef.g_RadarDeviceId == 8U)
            {
                m_RadarDevice4DFEStaticReportDataConfigParams.Profile0Rx1Idc = (short)((int)array[1] << 8 | (int)array[0]);
                m_RadarDevice4DFEStaticReportDataConfigParams.f0004f6 = (short)((int)array[3] << 8 | (int)array[2]);
                m_RadarDevice4DFEStaticReportDataConfigParams.Profile0Rx1Ipwr = (ushort)((int)array[5] << 8 | (int)array[4]);
                m_RadarDevice4DFEStaticReportDataConfigParams.f0004f7 = (ushort)((int)array[7] << 8 | (int)array[6]);
                m_RadarDevice4DFEStaticReportDataConfigParams.Profile0Rx1IQcrosscorr = ((int)array[11] << 24 | (int)array[10] << 16 | (int)array[9] << 8 | (int)array[8]);
                m_RadarDevice4DFEStaticReportDataConfigParams.Profile0Rx2Idc = (short)((int)array[13] << 8 | (int)array[12]);
                m_RadarDevice4DFEStaticReportDataConfigParams.f0004f8 = (short)((int)array[15] << 8 | (int)array[14]);
                m_RadarDevice4DFEStaticReportDataConfigParams.Profile0Rx2Ipwr = (ushort)((int)array[17] << 8 | (int)array[16]);
                m_RadarDevice4DFEStaticReportDataConfigParams.f0004f9 = (ushort)((int)array[19] << 8 | (int)array[18]);
                m_RadarDevice4DFEStaticReportDataConfigParams.Profile0Rx2IQcrosscorr = ((int)array[23] << 24 | (int)array[22] << 16 | (int)array[21] << 8 | (int)array[20]);
                m_RadarDevice4DFEStaticReportDataConfigParams.Profile0Rx3Idc = (short)((int)array[25] << 8 | (int)array[24]);
                m_RadarDevice4DFEStaticReportDataConfigParams.f0004fa = (short)((int)array[27] << 8 | (int)array[26]);
                m_RadarDevice4DFEStaticReportDataConfigParams.Profile0Rx3Ipwr = (ushort)((int)array[29] << 8 | (int)array[28]);
                m_RadarDevice4DFEStaticReportDataConfigParams.f0004fb = (ushort)((int)array[31] << 8 | (int)array[30]);
                m_RadarDevice4DFEStaticReportDataConfigParams.Profile0Rx3IQcrosscorr = ((int)array[35] << 24 | (int)array[34] << 16 | (int)array[33] << 8 | (int)array[32]);
                m_RadarDevice4DFEStaticReportDataConfigParams.Profile0Rx4Idc = (short)((int)array[37] << 8 | (int)array[36]);
                m_RadarDevice4DFEStaticReportDataConfigParams.f0004fc = (short)((int)array[39] << 8 | (int)array[38]);
                m_RadarDevice4DFEStaticReportDataConfigParams.Profile0Rx4Ipwr = (ushort)((int)array[41] << 8 | (int)array[40]);
                m_RadarDevice4DFEStaticReportDataConfigParams.f0004fd = (ushort)((int)array[43] << 8 | (int)array[42]);
                m_RadarDevice4DFEStaticReportDataConfigParams.Profile0Rx4IQcrosscorr = ((int)array[47] << 24 | (int)array[46] << 16 | (int)array[45] << 8 | (int)array[44]);
                m_RadarDevice4DFEStaticReportDataConfigParams.Profile1Rx1Idc = (short)((int)array[49] << 8 | (int)array[48]);
                m_RadarDevice4DFEStaticReportDataConfigParams.f0004fe = (short)((int)array[51] << 8 | (int)array[50]);
                m_RadarDevice4DFEStaticReportDataConfigParams.Profile1Rx1Ipwr = (ushort)((int)array[53] << 8 | (int)array[52]);
                m_RadarDevice4DFEStaticReportDataConfigParams.f0004ff = (ushort)((int)array[55] << 8 | (int)array[54]);
                m_RadarDevice4DFEStaticReportDataConfigParams.Profile1Rx1IQcrosscorr = ((int)array[59] << 24 | (int)array[58] << 16 | (int)array[57] << 8 | (int)array[56]);
                m_RadarDevice4DFEStaticReportDataConfigParams.Profile1Rx2Idc = (short)((int)array[61] << 8 | (int)array[60]);
                m_RadarDevice4DFEStaticReportDataConfigParams.f000500 = (short)((int)array[63] << 8 | (int)array[62]);
                m_RadarDevice4DFEStaticReportDataConfigParams.Profile1Rx2Ipwr = (ushort)((int)array[65] << 8 | (int)array[64]);
                m_RadarDevice4DFEStaticReportDataConfigParams.f000501 = (ushort)((int)array[67] << 8 | (int)array[66]);
                m_RadarDevice4DFEStaticReportDataConfigParams.Profile1Rx2IQcrosscorr = ((int)array[71] << 24 | (int)array[70] << 16 | (int)array[69] << 8 | (int)array[68]);
                m_RadarDevice4DFEStaticReportDataConfigParams.Profile1Rx3Idc = (short)((int)array[73] << 8 | (int)array[72]);
                m_RadarDevice4DFEStaticReportDataConfigParams.f000502 = (short)((int)array[75] << 8 | (int)array[74]);
                m_RadarDevice4DFEStaticReportDataConfigParams.Profile1Rx3Ipwr = (ushort)((int)array[77] << 8 | (int)array[76]);
                m_RadarDevice4DFEStaticReportDataConfigParams.f000503 = (ushort)((int)array[79] << 8 | (int)array[78]);
                m_RadarDevice4DFEStaticReportDataConfigParams.Profile1Rx3IQcrosscorr = ((int)array[83] << 24 | (int)array[82] << 16 | (int)array[81] << 8 | (int)array[80]);
                m_RadarDevice4DFEStaticReportDataConfigParams.Profile1Rx4Idc = (short)((int)array[85] << 8 | (int)array[84]);
                m_RadarDevice4DFEStaticReportDataConfigParams.f000504 = (short)((int)array[87] << 8 | (int)array[86]);
                m_RadarDevice4DFEStaticReportDataConfigParams.Profile1Rx4Ipwr = (ushort)((int)array[89] << 8 | (int)array[88]);
                m_RadarDevice4DFEStaticReportDataConfigParams.f000505 = (ushort)((int)array[91] << 8 | (int)array[90]);
                m_RadarDevice4DFEStaticReportDataConfigParams.Profile1Rx4IQcrosscorr = ((int)array[95] << 24 | (int)array[94] << 16 | (int)array[93] << 8 | (int)array[92]);
                m_RadarDevice4DFEStaticReportDataConfigParams.Profile2Rx1Idc = (short)((int)array[97] << 8 | (int)array[96]);
                m_RadarDevice4DFEStaticReportDataConfigParams.f000506 = (short)((int)array[99] << 8 | (int)array[98]);
                m_RadarDevice4DFEStaticReportDataConfigParams.Profile2Rx1Ipwr = (ushort)((int)array[101] << 8 | (int)array[100]);
                m_RadarDevice4DFEStaticReportDataConfigParams.f000507 = (ushort)((int)array[103] << 8 | (int)array[102]);
                m_RadarDevice4DFEStaticReportDataConfigParams.Profile2Rx1IQcrosscorr = ((int)array[107] << 24 | (int)array[106] << 16 | (int)array[105] << 8 | (int)array[104]);
                m_RadarDevice4DFEStaticReportDataConfigParams.Profile2Rx2Idc = (short)((int)array[109] << 8 | (int)array[108]);
                m_RadarDevice4DFEStaticReportDataConfigParams.f000508 = (short)((int)array[111] << 8 | (int)array[110]);
                m_RadarDevice4DFEStaticReportDataConfigParams.Profile2Rx2Ipwr = (ushort)((int)array[113] << 8 | (int)array[112]);
                m_RadarDevice4DFEStaticReportDataConfigParams.f000509 = (ushort)((int)array[115] << 8 | (int)array[114]);
                m_RadarDevice4DFEStaticReportDataConfigParams.Profile2Rx2IQcrosscorr = ((int)array[119] << 24 | (int)array[118] << 16 | (int)array[117] << 8 | (int)array[116]);
                m_RadarDevice4DFEStaticReportDataConfigParams.Profile2Rx3Idc = (short)((int)array[121] << 8 | (int)array[120]);
                m_RadarDevice4DFEStaticReportDataConfigParams.f00050a = (short)((int)array[123] << 8 | (int)array[122]);
                m_RadarDevice4DFEStaticReportDataConfigParams.Profile2Rx3Ipwr = (ushort)((int)array[125] << 8 | (int)array[124]);
                m_RadarDevice4DFEStaticReportDataConfigParams.f00050b = (ushort)((int)array[127] << 8 | (int)array[126]);
                m_RadarDevice4DFEStaticReportDataConfigParams.Profile2Rx3IQcrosscorr = ((int)array[131] << 24 | (int)array[130] << 16 | (int)array[129] << 8 | (int)array[128]);
                m_RadarDevice4DFEStaticReportDataConfigParams.Profile2Rx4Idc = (short)((int)array[133] << 8 | (int)array[132]);
                m_RadarDevice4DFEStaticReportDataConfigParams.f00050c = (short)((int)array[135] << 8 | (int)array[134]);
                m_RadarDevice4DFEStaticReportDataConfigParams.Profile2Rx4Ipwr = (ushort)((int)array[137] << 8 | (int)array[136]);
                m_RadarDevice4DFEStaticReportDataConfigParams.f00050d = (ushort)((int)array[139] << 8 | (int)array[138]);
                m_RadarDevice4DFEStaticReportDataConfigParams.Profile2Rx4IQcrosscorr = ((int)array[143] << 24 | (int)array[142] << 16 | (int)array[141] << 8 | (int)array[140]);
                m_RadarDevice4DFEStaticReportDataConfigParams.Profile3Rx1Idc = (short)((int)array[145] << 8 | (int)array[144]);
                m_RadarDevice4DFEStaticReportDataConfigParams.f00050e = (short)((int)array[147] << 8 | (int)array[146]);
                m_RadarDevice4DFEStaticReportDataConfigParams.Profile3Rx1Ipwr = (ushort)((int)array[149] << 8 | (int)array[148]);
                m_RadarDevice4DFEStaticReportDataConfigParams.f00050f = (ushort)((int)array[151] << 8 | (int)array[150]);
                m_RadarDevice4DFEStaticReportDataConfigParams.Profile3Rx1IQcrosscorr = ((int)array[155] << 24 | (int)array[154] << 16 | (int)array[153] << 8 | (int)array[152]);
                m_RadarDevice4DFEStaticReportDataConfigParams.Profile3Rx2Idc = (short)((int)array[157] << 8 | (int)array[156]);
                m_RadarDevice4DFEStaticReportDataConfigParams.f000510 = (short)((int)array[159] << 8 | (int)array[158]);
                m_RadarDevice4DFEStaticReportDataConfigParams.Profile3Rx2Ipwr = (ushort)((int)array[161] << 8 | (int)array[160]);
                m_RadarDevice4DFEStaticReportDataConfigParams.f000511 = (ushort)((int)array[163] << 8 | (int)array[162]);
                m_RadarDevice4DFEStaticReportDataConfigParams.Profile3Rx2IQcrosscorr = ((int)array[167] << 24 | (int)array[166] << 16 | (int)array[165] << 8 | (int)array[164]);
                m_RadarDevice4DFEStaticReportDataConfigParams.Profile3Rx3Idc = (short)((int)array[169] << 8 | (int)array[168]);
                m_RadarDevice4DFEStaticReportDataConfigParams.f000512 = (short)((int)array[171] << 8 | (int)array[170]);
                m_RadarDevice4DFEStaticReportDataConfigParams.Profile3Rx3Ipwr = (ushort)((int)array[173] << 8 | (int)array[172]);
                m_RadarDevice4DFEStaticReportDataConfigParams.f000513 = (ushort)((int)array[175] << 8 | (int)array[174]);
                m_RadarDevice4DFEStaticReportDataConfigParams.Profile3Rx3IQcrosscorr = ((int)array[179] << 24 | (int)array[178] << 16 | (int)array[177] << 8 | (int)array[176]);
                m_RadarDevice4DFEStaticReportDataConfigParams.Profile3Rx4Idc = (short)((int)array[181] << 8 | (int)array[180]);
                m_RadarDevice4DFEStaticReportDataConfigParams.f000514 = (short)((int)array[183] << 8 | (int)array[182]);
                m_RadarDevice4DFEStaticReportDataConfigParams.Profile3Rx4Ipwr = (ushort)((int)array[185] << 8 | (int)array[184]);
                m_RadarDevice4DFEStaticReportDataConfigParams.f000515 = (ushort)((int)array[187] << 8 | (int)array[186]);
                m_RadarDevice4DFEStaticReportDataConfigParams.Profile3Rx4IQcrosscorr = ((int)array[191] << 24 | (int)array[190] << 16 | (int)array[189] << 8 | (int)array[188]);
            }
            if ((num == 0 && ((GlobalRef.g_CasCadeDeviceSpiConnect & 1U) == 1U || (GlobalRef.g_CasCadeDeviceSpiConnect & 2U) == 2U || (GlobalRef.g_CasCadeDeviceSpiConnect & 4U) == 4U || (GlobalRef.g_CasCadeDeviceSpiConnect & 8U) == 8U)) || GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
            {
                string full_command4 = string.Format("Status: Passed", new object[0]);
                m_GuiManager.RecordLog(8, full_command4);
            }
            else
            {
                string msg = string.Format("Status: Failed, Error Type: {0}", new object[]
                {
                    GetErrorType(num)
                });
                GlobalRef.LuaWrapper.PrintError(msg);
            }
            if (GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
            {
                if (iRs232ConnectDisconnect_impl() == 0 && !GlobalRef.g_NtvRS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
                {
                    m_GuiManager.DllOps.iConnect(1U, 0U);
                    string full_command5 = string.Format("Debug Port Reconnected!", new object[0]);
                    m_GuiManager.RecordLog(9, full_command5);
                    ScriptOps.KeepTrying(2000, new Func<bool>(spare_read));
                }
            }
            else if (GlobalRef.g_CasCadeDeviceSpiConnect == 0U)
            {
                string full_command6 = string.Format("Error Occurred in Port open close", new object[0]);
                m_GuiManager.RecordLog(9, full_command6);
            }
            return num;
        }

        public int iGetDFEStaticReportDataConfigToLauCmd_Impl(uint RadarDeviceId, out short Profile0RX1Idc, out short Profile0RX1Qdc, out ushort Profile0RX1Ipwr, out ushort Profile0RX1Qpwr, out int Profile0RX1IQcrosscorr, out short Profile0RX2Idc, out short Profile0RX2Qdc, out ushort Profile0RX2Ipwr, out ushort Profile0RX2Qpwr, out int Profile0RX2IQcrosscorr, out short Profile0RX3Idc, out short Profile0RX3Qdc, out ushort Profile0RX3Ipwr, out ushort Profile0RX3Qpwr, out int Profile0RX3IQcrosscorr, out short Profile0RX4Idc, out short Profile0RX4Qdc, out ushort Profile0RX4Ipwr, out ushort Profile0RX4Qpwr, out int Profile0RX4IQcrosscorr, out short Profile1RX1Idc, out short Profile1RX1Qdc, out ushort Profile1RX1Ipwr, out ushort Profile1RX1Qpwr, out int Profile1RX1IQcrosscorr, out short Profile1RX2Idc, out short Profile1RX2Qdc, out ushort Profile1RX2Ipwr, out ushort Profile1RX2Qpwr, out int Profile1RX2IQcrosscorr, out short Profile1RX3Idc, out short Profile1RX3Qdc, out ushort Profile1RX3Ipwr, out ushort Profile1RX3Qpwr, out int Profile1RX3IQcrosscorr, out short Profile1RX4Idc, out short Profile1RX4Qdc, out ushort Profile1RX4Ipwr, out ushort Profile1RX4Qpwr, out int Profile1RX4IQcrosscorr, out short Profile2RX1Idc, out short Profile2RX1Qdc, out ushort Profile2RX1Ipwr, out ushort Profile2RX1Qpwr, out int Profile2RX1IQcrosscorr, out short Profile2RX2Idc, out short Profile2RX2Qdc, out ushort Profile2RX2Ipwr, out ushort Profile2RX2Qpwr, out int Profile2RX2IQcrosscorr, out short Profile2RX3Idc, out short Profile2RX3Qdc, out ushort Profile2RX3Ipwr, out ushort Profile2RX3Qpwr, out int Profile2RX3IQcrosscorr, out short Profile2RX4Idc, out short Profile2RX4Qdc, out ushort Profile2RX4Ipwr, out ushort Profile2RX4Qpwr, out int Profile2RX4IQcrosscorr, out short Profile3RX1Idc, out short Profile3RX1Qdc, out ushort Profile3RX1Ipwr, out ushort Profile3RX1Qpwr, out int Profile3RX1IQcrosscorr, out short Profile3RX2Idc, out short Profile3RX2Qdc, out ushort Profile3RX2Ipwr, out ushort Profile3RX2Qpwr, out int Profile3RX2IQcrosscorr, out short Profile3RX3Idc, out short Profile3RX3Qdc, out ushort Profile3RX3Ipwr, out ushort Profile3RX3Qpwr, out int Profile3RX3IQcrosscorr, out short Profile3RX4Idc, out short Profile3RX4Qdc, out ushort Profile3RX4Ipwr, out ushort Profile3RX4Qpwr, out int Profile3RX4IQcrosscorr)
        {
            GlobalRef.g_RadarDeviceId = RadarDeviceId;
            Profile0RX1Idc = 0;
            Profile0RX1Qdc = 0;
            Profile0RX1Ipwr = 0;
            Profile0RX1Qpwr = 0;
            Profile0RX1IQcrosscorr = 0;
            Profile0RX2Idc = 0;
            Profile0RX2Qdc = 0;
            Profile0RX2Ipwr = 0;
            Profile0RX2Qpwr = 0;
            Profile0RX2IQcrosscorr = 0;
            Profile0RX3Idc = 0;
            Profile0RX3Qdc = 0;
            Profile0RX3Ipwr = 0;
            Profile0RX3Qpwr = 0;
            Profile0RX3IQcrosscorr = 0;
            Profile0RX4Idc = 0;
            Profile0RX4Qdc = 0;
            Profile0RX4Ipwr = 0;
            Profile0RX4Qpwr = 0;
            Profile0RX4IQcrosscorr = 0;
            Profile1RX1Idc = 0;
            Profile1RX1Qdc = 0;
            Profile1RX1Ipwr = 0;
            Profile1RX1Qpwr = 0;
            Profile1RX1IQcrosscorr = 0;
            Profile1RX2Idc = 0;
            Profile1RX2Qdc = 0;
            Profile1RX2Ipwr = 0;
            Profile1RX2Qpwr = 0;
            Profile1RX2IQcrosscorr = 0;
            Profile1RX3Idc = 0;
            Profile1RX3Qdc = 0;
            Profile1RX3Ipwr = 0;
            Profile1RX3Qpwr = 0;
            Profile1RX3IQcrosscorr = 0;
            Profile1RX4Idc = 0;
            Profile1RX4Qdc = 0;
            Profile1RX4Ipwr = 0;
            Profile1RX4Qpwr = 0;
            Profile1RX4IQcrosscorr = 0;
            Profile2RX1Idc = 0;
            Profile2RX1Qdc = 0;
            Profile2RX1Ipwr = 0;
            Profile2RX1Qpwr = 0;
            Profile2RX1IQcrosscorr = 0;
            Profile2RX2Idc = 0;
            Profile2RX2Qdc = 0;
            Profile2RX2Ipwr = 0;
            Profile2RX2Qpwr = 0;
            Profile2RX2IQcrosscorr = 0;
            Profile2RX3Idc = 0;
            Profile2RX3Qdc = 0;
            Profile2RX3Ipwr = 0;
            Profile2RX3Qpwr = 0;
            Profile2RX3IQcrosscorr = 0;
            Profile2RX4Idc = 0;
            Profile2RX4Qdc = 0;
            Profile2RX4Ipwr = 0;
            Profile2RX4Qpwr = 0;
            Profile2RX4IQcrosscorr = 0;
            Profile3RX1Idc = 0;
            Profile3RX1Qdc = 0;
            Profile3RX1Ipwr = 0;
            Profile3RX1Qpwr = 0;
            Profile3RX1IQcrosscorr = 0;
            Profile3RX2Idc = 0;
            Profile3RX2Qdc = 0;
            Profile3RX2Ipwr = 0;
            Profile3RX2Qpwr = 0;
            Profile3RX2IQcrosscorr = 0;
            Profile3RX3Idc = 0;
            Profile3RX3Qdc = 0;
            Profile3RX3Ipwr = 0;
            Profile3RX3Qpwr = 0;
            Profile3RX3IQcrosscorr = 0;
            Profile3RX4Idc = 0;
            Profile3RX4Qdc = 0;
            Profile3RX4Ipwr = 0;
            Profile3RX4Qpwr = 0;
            Profile3RX4IQcrosscorr = 0;
            byte[] array = new byte[22];
            GCHandle.Alloc(array, GCHandleType.Pinned).AddrOfPinnedObject();
            byte[] array2 = new byte[192];
            IntPtr inData = GCHandle.Alloc(array2, GCHandleType.Pinned).AddrOfPinnedObject();
            int num;
            if (GlobalRef.g_NtvRS232Connect[(int)GlobalRef.g_RadarDeviceIndex] && GlobalRef.g_CasCadeDeviceSpiConnect == 0U)
            {
                num = m_TsWrapper.Calling_WriteAddr_Single(4294959848U, 1U);
                if (m_GuiManager.DllOps.itempDisconnect(false) == 0)
                {
                    string full_command = string.Format("Debug Port Disconnected", new object[0]);
                    m_GuiManager.RecordLog(0, full_command);
                    if (!GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
                    {
                        iRs232ConnectDisconnect_impl();
                    }
                }
            }
            Thread.Sleep(200);
            if (m_RadarDeviceModeConfigParams.NumberOfRadarDevicesDetected <= 1)
            {
                string full_command2 = string.Format("ar1.DFEStaticReportGet()", new object[0]);
                m_GuiManager.RecordLog(15, full_command2);
            }
            else
            {
                string full_command3 = string.Format("ar1.DFEStaticReportGet_mult({0})", new object[]
                {
                    GlobalRef.g_RadarDeviceId
                });
                m_GuiManager.RecordLog(15, full_command3);
            }
            num = Imports.RadarLinkImpl_GetDfeRxStatistics(GlobalRef.g_RadarDeviceId, inData);
            if (GlobalRef.g_RadarDeviceId == 1U)
            {
                Profile0RX1Idc = (short)((int)array2[1] << 8 | (int)array2[0]);
                Profile0RX1Qdc = (short)((int)array2[3] << 8 | (int)array2[2]);
                Profile0RX1Ipwr = (ushort)((int)array2[5] << 8 | (int)array2[4]);
                Profile0RX1Qpwr = (ushort)((int)array2[7] << 8 | (int)array2[6]);
                Profile0RX1IQcrosscorr = ((int)array2[11] << 24 | (int)array2[10] << 16 | (int)array2[9] << 8 | (int)array2[8]);
                ScriptOps.m_MainForm.ClibTab.DisplayProfile0RX1DataReportinGUI((int)m_RadarDevice1DFEStaticReportDataConfigParams.Profile0Rx1Idc, (uint)m_RadarDevice1DFEStaticReportDataConfigParams.f0004f6, (int)m_RadarDevice1DFEStaticReportDataConfigParams.Profile0Rx1Ipwr, (int)m_RadarDevice1DFEStaticReportDataConfigParams.f0004f7, (uint)m_RadarDevice1DFEStaticReportDataConfigParams.Profile0Rx1IQcrosscorr);
                Profile0RX2Idc = (m_RadarDevice1DFEStaticReportDataConfigParams.Profile0Rx2Idc = (short)((int)array2[13] << 8 | (int)array2[12]));
                Profile0RX2Qdc = (m_RadarDevice1DFEStaticReportDataConfigParams.f0004f8 = (short)((int)array2[15] << 8 | (int)array2[14]));
                Profile0RX2Ipwr = (m_RadarDevice1DFEStaticReportDataConfigParams.Profile0Rx2Ipwr = (ushort)((int)array2[17] << 8 | (int)array2[16]));
                Profile0RX2Qpwr = (m_RadarDevice1DFEStaticReportDataConfigParams.f0004f9 = (ushort)((int)array2[19] << 8 | (int)array2[18]));
                Profile0RX2IQcrosscorr = (m_RadarDevice1DFEStaticReportDataConfigParams.Profile0Rx2IQcrosscorr = ((int)array2[23] << 24 | (int)array2[22] << 16 | (int)array2[21] << 8 | (int)array2[20]));
                ScriptOps.m_MainForm.ClibTab.DisplayProfile0RX2DataReportinGUI((int)m_RadarDevice1DFEStaticReportDataConfigParams.Profile0Rx2Idc, (uint)m_RadarDevice1DFEStaticReportDataConfigParams.f0004f8, (int)m_RadarDevice1DFEStaticReportDataConfigParams.Profile0Rx2Ipwr, (int)m_RadarDevice1DFEStaticReportDataConfigParams.f0004f9, (uint)m_RadarDevice1DFEStaticReportDataConfigParams.Profile0Rx2IQcrosscorr);
                Profile0RX3Idc = (m_RadarDevice1DFEStaticReportDataConfigParams.Profile0Rx3Idc = (short)((int)array2[25] << 8 | (int)array2[24]));
                Profile0RX3Qdc = (m_RadarDevice1DFEStaticReportDataConfigParams.f0004fa = (short)((int)array2[27] << 8 | (int)array2[26]));
                Profile0RX3Ipwr = (m_RadarDevice1DFEStaticReportDataConfigParams.Profile0Rx3Ipwr = (ushort)((int)array2[29] << 8 | (int)array2[28]));
                Profile0RX3Qpwr = (m_RadarDevice1DFEStaticReportDataConfigParams.f0004fb = (ushort)((int)array2[31] << 8 | (int)array2[30]));
                Profile0RX3IQcrosscorr = (m_RadarDevice1DFEStaticReportDataConfigParams.Profile0Rx3IQcrosscorr = ((int)array2[35] << 24 | (int)array2[34] << 16 | (int)array2[33] << 8 | (int)array2[32]));
                ScriptOps.m_MainForm.ClibTab.DisplayProfile0RX3DataReportinGUI((int)m_RadarDevice1DFEStaticReportDataConfigParams.Profile0Rx3Idc, (uint)m_RadarDevice1DFEStaticReportDataConfigParams.f0004fa, (int)m_RadarDevice1DFEStaticReportDataConfigParams.Profile0Rx3Ipwr, (int)m_RadarDevice1DFEStaticReportDataConfigParams.f0004fb, (uint)m_RadarDevice1DFEStaticReportDataConfigParams.Profile0Rx3IQcrosscorr);
                Profile0RX4Idc = (m_RadarDevice1DFEStaticReportDataConfigParams.Profile0Rx4Idc = (short)((int)array2[37] << 8 | (int)array2[36]));
                Profile0RX4Qdc = (m_RadarDevice1DFEStaticReportDataConfigParams.f0004fc = (short)((int)array2[39] << 8 | (int)array2[38]));
                Profile0RX4Ipwr = (m_RadarDevice1DFEStaticReportDataConfigParams.Profile0Rx4Ipwr = (ushort)((int)array2[41] << 8 | (int)array2[40]));
                Profile0RX4Qpwr = (m_RadarDevice1DFEStaticReportDataConfigParams.f0004fd = (ushort)((int)array2[43] << 8 | (int)array2[42]));
                Profile0RX4IQcrosscorr = (m_RadarDevice1DFEStaticReportDataConfigParams.Profile0Rx4IQcrosscorr = ((int)array2[47] << 24 | (int)array2[46] << 16 | (int)array2[45] << 8 | (int)array2[44]));
                ScriptOps.m_MainForm.ClibTab.DisplayProfile0RX4DataReportinGUI((int)m_RadarDevice1DFEStaticReportDataConfigParams.Profile0Rx4Idc, (uint)m_RadarDevice1DFEStaticReportDataConfigParams.f0004fc, (int)m_RadarDevice1DFEStaticReportDataConfigParams.Profile0Rx4Ipwr, (int)m_RadarDevice1DFEStaticReportDataConfigParams.f0004fd, (uint)m_RadarDevice1DFEStaticReportDataConfigParams.Profile0Rx4IQcrosscorr);
                Profile1RX1Idc = (m_RadarDevice1DFEStaticReportDataConfigParams.Profile1Rx1Idc = (short)((int)array2[49] << 8 | (int)array2[48]));
                Profile1RX1Qdc = (m_RadarDevice1DFEStaticReportDataConfigParams.f0004fe = (short)((int)array2[51] << 8 | (int)array2[50]));
                Profile1RX1Ipwr = (m_RadarDevice1DFEStaticReportDataConfigParams.Profile1Rx1Ipwr = (ushort)((int)array2[53] << 8 | (int)array2[52]));
                Profile1RX1Qpwr = (m_RadarDevice1DFEStaticReportDataConfigParams.f0004ff = (ushort)((int)array2[55] << 8 | (int)array2[54]));
                Profile1RX1IQcrosscorr = (m_RadarDevice1DFEStaticReportDataConfigParams.Profile1Rx1IQcrosscorr = ((int)array2[59] << 24 | (int)array2[58] << 16 | (int)array2[57] << 8 | (int)array2[56]));
                ScriptOps.m_MainForm.ClibTab.DisplayProfile1RX1DataReportinGUI((int)m_RadarDevice1DFEStaticReportDataConfigParams.Profile1Rx1Idc, (uint)m_RadarDevice1DFEStaticReportDataConfigParams.f0004fe, (int)m_RadarDevice1DFEStaticReportDataConfigParams.Profile1Rx1Ipwr, (int)m_RadarDevice1DFEStaticReportDataConfigParams.f0004ff, (uint)m_RadarDevice1DFEStaticReportDataConfigParams.Profile1Rx1IQcrosscorr);
                Profile1RX2Idc = (m_RadarDevice1DFEStaticReportDataConfigParams.Profile1Rx2Idc = (short)((int)array2[61] << 8 | (int)array2[60]));
                Profile1RX2Qdc = (m_RadarDevice1DFEStaticReportDataConfigParams.f000500 = (short)((int)array2[63] << 8 | (int)array2[62]));
                Profile1RX2Ipwr = (m_RadarDevice1DFEStaticReportDataConfigParams.Profile1Rx2Ipwr = (ushort)((int)array2[65] << 8 | (int)array2[64]));
                Profile1RX2Qpwr = (m_RadarDevice1DFEStaticReportDataConfigParams.f000501 = (ushort)((int)array2[67] << 8 | (int)array2[66]));
                Profile1RX2IQcrosscorr = (m_RadarDevice1DFEStaticReportDataConfigParams.Profile1Rx2IQcrosscorr = ((int)array2[71] << 24 | (int)array2[70] << 16 | (int)array2[69] << 8 | (int)array2[68]));
                ScriptOps.m_MainForm.ClibTab.DisplayProfile1RX2DataReportinGUI((int)m_RadarDevice1DFEStaticReportDataConfigParams.Profile1Rx2Idc, (uint)m_RadarDevice1DFEStaticReportDataConfigParams.f000500, (int)m_RadarDevice1DFEStaticReportDataConfigParams.Profile1Rx2Ipwr, (int)m_RadarDevice1DFEStaticReportDataConfigParams.f000501, (uint)m_RadarDevice1DFEStaticReportDataConfigParams.Profile1Rx2IQcrosscorr);
                Profile1RX3Idc = (m_RadarDevice1DFEStaticReportDataConfigParams.Profile1Rx3Idc = (short)((int)array2[73] << 8 | (int)array2[72]));
                Profile1RX3Qdc = (m_RadarDevice1DFEStaticReportDataConfigParams.f000502 = (short)((int)array2[75] << 8 | (int)array2[74]));
                Profile1RX3Ipwr = (m_RadarDevice1DFEStaticReportDataConfigParams.Profile1Rx3Ipwr = (ushort)((int)array2[77] << 8 | (int)array2[76]));
                Profile1RX3Qpwr = (m_RadarDevice1DFEStaticReportDataConfigParams.f000503 = (ushort)((int)array2[79] << 8 | (int)array2[78]));
                Profile1RX3IQcrosscorr = (m_RadarDevice1DFEStaticReportDataConfigParams.Profile1Rx3IQcrosscorr = ((int)array2[83] << 24 | (int)array2[82] << 16 | (int)array2[81] << 8 | (int)array2[80]));
                ScriptOps.m_MainForm.ClibTab.DisplayProfile1RX3DataReportinGUI((int)m_RadarDevice1DFEStaticReportDataConfigParams.Profile1Rx3Idc, (uint)m_RadarDevice1DFEStaticReportDataConfigParams.f000502, (int)m_RadarDevice1DFEStaticReportDataConfigParams.Profile1Rx3Ipwr, (int)m_RadarDevice1DFEStaticReportDataConfigParams.f000503, (uint)m_RadarDevice1DFEStaticReportDataConfigParams.Profile1Rx3IQcrosscorr);
                Profile1RX4Idc = (m_RadarDevice1DFEStaticReportDataConfigParams.Profile1Rx4Idc = (short)((int)array2[85] << 8 | (int)array2[84]));
                Profile1RX4Qdc = (m_RadarDevice1DFEStaticReportDataConfigParams.f000504 = (short)((int)array2[87] << 8 | (int)array2[86]));
                Profile1RX4Ipwr = (m_RadarDevice1DFEStaticReportDataConfigParams.Profile1Rx4Ipwr = (ushort)((int)array2[89] << 8 | (int)array2[88]));
                Profile1RX4Qpwr = (m_RadarDevice1DFEStaticReportDataConfigParams.f000505 = (ushort)((int)array2[91] << 8 | (int)array2[90]));
                Profile1RX4IQcrosscorr = (m_RadarDevice1DFEStaticReportDataConfigParams.Profile1Rx4IQcrosscorr = ((int)array2[95] << 24 | (int)array2[94] << 16 | (int)array2[93] << 8 | (int)array2[92]));
                ScriptOps.m_MainForm.ClibTab.DisplayProfile1RX4DataReportinGUI((int)m_RadarDevice1DFEStaticReportDataConfigParams.Profile1Rx4Idc, (uint)m_RadarDevice1DFEStaticReportDataConfigParams.f000504, (int)m_RadarDevice1DFEStaticReportDataConfigParams.Profile1Rx4Ipwr, (int)m_RadarDevice1DFEStaticReportDataConfigParams.f000505, (uint)m_RadarDevice1DFEStaticReportDataConfigParams.Profile1Rx4IQcrosscorr);
                Profile2RX1Idc = (m_RadarDevice1DFEStaticReportDataConfigParams.Profile2Rx1Idc = (short)((int)array2[97] << 8 | (int)array2[96]));
                Profile2RX1Qdc = (m_RadarDevice1DFEStaticReportDataConfigParams.f000506 = (short)((int)array2[99] << 8 | (int)array2[98]));
                Profile2RX1Ipwr = (m_RadarDevice1DFEStaticReportDataConfigParams.Profile2Rx1Ipwr = (ushort)((int)array2[101] << 8 | (int)array2[100]));
                Profile2RX1Qpwr = (m_RadarDevice1DFEStaticReportDataConfigParams.f000507 = (ushort)((int)array2[103] << 8 | (int)array2[102]));
                Profile2RX1IQcrosscorr = (m_RadarDevice1DFEStaticReportDataConfigParams.Profile2Rx1IQcrosscorr = ((int)array2[107] << 24 | (int)array2[106] << 16 | (int)array2[105] << 8 | (int)array2[104]));
                ScriptOps.m_MainForm.ClibTab.DisplayProfile2RX1DataReportinGUI((int)m_RadarDevice1DFEStaticReportDataConfigParams.Profile2Rx1Idc, (uint)m_RadarDevice1DFEStaticReportDataConfigParams.f000506, (int)m_RadarDevice1DFEStaticReportDataConfigParams.Profile2Rx1Ipwr, (int)m_RadarDevice1DFEStaticReportDataConfigParams.f000507, (uint)m_RadarDevice1DFEStaticReportDataConfigParams.Profile2Rx1IQcrosscorr);
                Profile2RX2Idc = (m_RadarDevice1DFEStaticReportDataConfigParams.Profile2Rx2Idc = (short)((int)array2[109] << 8 | (int)array2[108]));
                Profile2RX2Qdc = (m_RadarDevice1DFEStaticReportDataConfigParams.f000508 = (short)((int)array2[111] << 8 | (int)array2[110]));
                Profile2RX2Ipwr = (m_RadarDevice1DFEStaticReportDataConfigParams.Profile2Rx2Ipwr = (ushort)((int)array2[113] << 8 | (int)array2[112]));
                Profile2RX2Qpwr = (m_RadarDevice1DFEStaticReportDataConfigParams.f000509 = (ushort)((int)array2[115] << 8 | (int)array2[114]));
                Profile2RX2IQcrosscorr = (m_RadarDevice1DFEStaticReportDataConfigParams.Profile2Rx2IQcrosscorr = ((int)array2[119] << 24 | (int)array2[118] << 16 | (int)array2[117] << 8 | (int)array2[116]));
                ScriptOps.m_MainForm.ClibTab.DisplayProfile2RX2DataReportinGUI((int)m_RadarDevice1DFEStaticReportDataConfigParams.Profile2Rx2Idc, (uint)m_RadarDevice1DFEStaticReportDataConfigParams.f000508, (int)m_RadarDevice1DFEStaticReportDataConfigParams.Profile2Rx2Ipwr, (int)m_RadarDevice1DFEStaticReportDataConfigParams.f000509, (uint)m_RadarDevice1DFEStaticReportDataConfigParams.Profile2Rx2IQcrosscorr);
                Profile2RX3Idc = (m_RadarDevice1DFEStaticReportDataConfigParams.Profile2Rx3Idc = (short)((int)array2[121] << 8 | (int)array2[120]));
                Profile2RX3Qdc = (m_RadarDevice1DFEStaticReportDataConfigParams.f00050a = (short)((int)array2[123] << 8 | (int)array2[122]));
                Profile2RX3Ipwr = (m_RadarDevice1DFEStaticReportDataConfigParams.Profile2Rx3Ipwr = (ushort)((int)array2[125] << 8 | (int)array2[124]));
                Profile2RX3Qpwr = (m_RadarDevice1DFEStaticReportDataConfigParams.f00050b = (ushort)((int)array2[127] << 8 | (int)array2[126]));
                Profile2RX3IQcrosscorr = (m_RadarDevice1DFEStaticReportDataConfigParams.Profile2Rx3IQcrosscorr = ((int)array2[131] << 24 | (int)array2[130] << 16 | (int)array2[129] << 8 | (int)array2[128]));
                ScriptOps.m_MainForm.ClibTab.DisplayProfile2RX3DataReportinGUI((int)m_RadarDevice1DFEStaticReportDataConfigParams.Profile2Rx3Idc, (uint)m_RadarDevice1DFEStaticReportDataConfigParams.f00050a, (int)m_RadarDevice1DFEStaticReportDataConfigParams.Profile2Rx3Ipwr, (int)m_RadarDevice1DFEStaticReportDataConfigParams.f00050b, (uint)m_RadarDevice1DFEStaticReportDataConfigParams.Profile2Rx3IQcrosscorr);
                Profile2RX4Idc = (m_RadarDevice1DFEStaticReportDataConfigParams.Profile2Rx4Idc = (short)((int)array2[133] << 8 | (int)array2[132]));
                Profile2RX4Qdc = (m_RadarDevice1DFEStaticReportDataConfigParams.f00050c = (short)((int)array2[135] << 8 | (int)array2[134]));
                Profile2RX4Ipwr = (m_RadarDevice1DFEStaticReportDataConfigParams.Profile2Rx4Ipwr = (ushort)((int)array2[137] << 8 | (int)array2[136]));
                Profile2RX4Qpwr = (m_RadarDevice1DFEStaticReportDataConfigParams.f00050d = (ushort)((int)array2[139] << 8 | (int)array2[138]));
                Profile2RX4IQcrosscorr = (m_RadarDevice1DFEStaticReportDataConfigParams.Profile2Rx4IQcrosscorr = ((int)array2[143] << 24 | (int)array2[142] << 16 | (int)array2[141] << 8 | (int)array2[140]));
                ScriptOps.m_MainForm.ClibTab.DisplayProfile2RX4DataReportinGUI((int)m_RadarDevice1DFEStaticReportDataConfigParams.Profile2Rx4Idc, (uint)m_RadarDevice1DFEStaticReportDataConfigParams.f00050c, (int)m_RadarDevice1DFEStaticReportDataConfigParams.Profile2Rx4Ipwr, (int)m_RadarDevice1DFEStaticReportDataConfigParams.f00050d, (uint)m_RadarDevice1DFEStaticReportDataConfigParams.Profile2Rx4IQcrosscorr);
                Profile3RX1Idc = (m_RadarDevice1DFEStaticReportDataConfigParams.Profile3Rx1Idc = (short)((int)array2[145] << 8 | (int)array2[144]));
                Profile3RX1Qdc = (m_RadarDevice1DFEStaticReportDataConfigParams.f00050e = (short)((int)array2[147] << 8 | (int)array2[146]));
                Profile3RX1Ipwr = (m_RadarDevice1DFEStaticReportDataConfigParams.Profile3Rx1Ipwr = (ushort)((int)array2[149] << 8 | (int)array2[148]));
                Profile3RX1Qpwr = (m_RadarDevice1DFEStaticReportDataConfigParams.f00050f = (ushort)((int)array2[151] << 8 | (int)array2[150]));
                Profile3RX1IQcrosscorr = (m_RadarDevice1DFEStaticReportDataConfigParams.Profile3Rx1IQcrosscorr = ((int)array2[155] << 24 | (int)array2[154] << 16 | (int)array2[153] << 8 | (int)array2[152]));
                ScriptOps.m_MainForm.ClibTab.DisplayProfile3RX1DataReportinGUI((int)m_RadarDevice1DFEStaticReportDataConfigParams.Profile3Rx1Idc, (uint)m_RadarDevice1DFEStaticReportDataConfigParams.f00050e, (int)m_RadarDevice1DFEStaticReportDataConfigParams.Profile3Rx1Ipwr, (int)m_RadarDevice1DFEStaticReportDataConfigParams.f00050f, (uint)m_RadarDevice1DFEStaticReportDataConfigParams.Profile3Rx1IQcrosscorr);
                Profile3RX2Idc = (m_RadarDevice1DFEStaticReportDataConfigParams.Profile3Rx2Idc = (short)((int)array2[157] << 8 | (int)array2[156]));
                Profile3RX2Qdc = (m_RadarDevice1DFEStaticReportDataConfigParams.f000510 = (short)((int)array2[159] << 8 | (int)array2[158]));
                Profile3RX2Ipwr = (m_RadarDevice1DFEStaticReportDataConfigParams.Profile3Rx2Ipwr = (ushort)((int)array2[161] << 8 | (int)array2[160]));
                Profile3RX2Qpwr = (m_RadarDevice1DFEStaticReportDataConfigParams.f000511 = (ushort)((int)array2[163] << 8 | (int)array2[162]));
                Profile3RX2IQcrosscorr = (m_RadarDevice1DFEStaticReportDataConfigParams.Profile3Rx2IQcrosscorr = ((int)array2[167] << 24 | (int)array2[166] << 16 | (int)array2[165] << 8 | (int)array2[164]));
                ScriptOps.m_MainForm.ClibTab.DisplayProfile3RX2DataReportinGUI((int)m_RadarDevice1DFEStaticReportDataConfigParams.Profile3Rx2Idc, (uint)m_RadarDevice1DFEStaticReportDataConfigParams.f000510, (int)m_RadarDevice1DFEStaticReportDataConfigParams.Profile3Rx2Ipwr, (int)m_RadarDevice1DFEStaticReportDataConfigParams.f000511, (uint)m_RadarDevice1DFEStaticReportDataConfigParams.Profile3Rx2IQcrosscorr);
                Profile3RX3Idc = (m_RadarDevice1DFEStaticReportDataConfigParams.Profile3Rx3Idc = (short)((int)array2[169] << 8 | (int)array2[168]));
                Profile3RX3Qdc = (m_RadarDevice1DFEStaticReportDataConfigParams.f000512 = (short)((int)array2[171] << 8 | (int)array2[170]));
                Profile3RX3Ipwr = (m_RadarDevice1DFEStaticReportDataConfigParams.Profile3Rx3Ipwr = (ushort)((int)array2[173] << 8 | (int)array2[172]));
                Profile3RX3Qpwr = (m_RadarDevice1DFEStaticReportDataConfigParams.f000513 = (ushort)((int)array2[175] << 8 | (int)array2[174]));
                Profile3RX3IQcrosscorr = (m_RadarDevice1DFEStaticReportDataConfigParams.Profile3Rx3IQcrosscorr = ((int)array2[179] << 24 | (int)array2[178] << 16 | (int)array2[177] << 8 | (int)array2[176]));
                ScriptOps.m_MainForm.ClibTab.DisplayProfile3RX3DataReportinGUI((int)m_RadarDevice1DFEStaticReportDataConfigParams.Profile3Rx3Idc, (uint)m_RadarDevice1DFEStaticReportDataConfigParams.f000512, (int)m_RadarDevice1DFEStaticReportDataConfigParams.Profile3Rx3Ipwr, (int)m_RadarDevice1DFEStaticReportDataConfigParams.f000513, (uint)m_RadarDevice1DFEStaticReportDataConfigParams.Profile3Rx3IQcrosscorr);
                Profile3RX4Idc = (m_RadarDevice1DFEStaticReportDataConfigParams.Profile3Rx4Idc = (short)((int)array2[181] << 8 | (int)array2[180]));
                Profile3RX4Qdc = (m_RadarDevice1DFEStaticReportDataConfigParams.f000514 = (short)((int)array2[183] << 8 | (int)array2[182]));
                Profile3RX4Ipwr = (m_RadarDevice1DFEStaticReportDataConfigParams.Profile3Rx4Ipwr = (ushort)((int)array2[185] << 8 | (int)array2[184]));
                Profile3RX4Qpwr = (m_RadarDevice1DFEStaticReportDataConfigParams.f000515 = (ushort)((int)array2[187] << 8 | (int)array2[186]));
                Profile3RX4IQcrosscorr = (m_RadarDevice1DFEStaticReportDataConfigParams.Profile3Rx4IQcrosscorr = ((int)array2[191] << 24 | (int)array2[190] << 16 | (int)array2[189] << 8 | (int)array2[188]));
                ScriptOps.m_MainForm.ClibTab.DisplayProfile3RX4DataReportinGUI((int)m_RadarDevice1DFEStaticReportDataConfigParams.Profile3Rx4Idc, (uint)m_RadarDevice1DFEStaticReportDataConfigParams.f000512, (int)m_RadarDevice1DFEStaticReportDataConfigParams.Profile3Rx4Ipwr, (int)m_RadarDevice1DFEStaticReportDataConfigParams.f000515, (uint)m_RadarDevice1DFEStaticReportDataConfigParams.Profile3Rx4IQcrosscorr);
            }
            else if (GlobalRef.g_RadarDeviceId == 2U)
            {
                Profile0RX1Idc = (m_RadarDevice2DFEStaticReportDataConfigParams.Profile0Rx1Idc = (short)((int)array2[1] << 8 | (int)array2[0]));
                Profile0RX1Qdc = (m_RadarDevice2DFEStaticReportDataConfigParams.f0004f6 = (short)((int)array2[3] << 8 | (int)array2[2]));
                Profile0RX1Ipwr = (m_RadarDevice2DFEStaticReportDataConfigParams.Profile0Rx1Ipwr = (ushort)((int)array2[5] << 8 | (int)array2[4]));
                Profile0RX1Qpwr = (m_RadarDevice2DFEStaticReportDataConfigParams.f0004f7 = (ushort)((int)array2[7] << 8 | (int)array2[6]));
                Profile0RX1IQcrosscorr = (m_RadarDevice2DFEStaticReportDataConfigParams.Profile0Rx1IQcrosscorr = ((int)array2[11] << 24 | (int)array2[10] << 16 | (int)array2[9] << 8 | (int)array2[8]));
                ScriptOps.m_MainForm.ClibTab.DisplayProfile0RX1DataReportinGUI((int)m_RadarDevice2DFEStaticReportDataConfigParams.Profile0Rx1Idc, (uint)m_RadarDevice2DFEStaticReportDataConfigParams.f0004f6, (int)m_RadarDevice2DFEStaticReportDataConfigParams.Profile0Rx1Ipwr, (int)m_RadarDevice2DFEStaticReportDataConfigParams.f0004f7, (uint)m_RadarDevice2DFEStaticReportDataConfigParams.Profile0Rx1IQcrosscorr);
                Profile0RX2Idc = (m_RadarDevice2DFEStaticReportDataConfigParams.Profile0Rx2Idc = (short)((int)array2[13] << 8 | (int)array2[12]));
                Profile0RX2Qdc = (m_RadarDevice2DFEStaticReportDataConfigParams.f0004f8 = (short)((int)array2[15] << 8 | (int)array2[14]));
                Profile0RX2Ipwr = (m_RadarDevice2DFEStaticReportDataConfigParams.Profile0Rx2Ipwr = (ushort)((int)array2[17] << 8 | (int)array2[16]));
                Profile0RX2Qpwr = (m_RadarDevice2DFEStaticReportDataConfigParams.f0004f9 = (ushort)((int)array2[19] << 8 | (int)array2[18]));
                Profile0RX2IQcrosscorr = (m_RadarDevice2DFEStaticReportDataConfigParams.Profile0Rx2IQcrosscorr = ((int)array2[23] << 24 | (int)array2[22] << 16 | (int)array2[21] << 8 | (int)array2[20]));
                ScriptOps.m_MainForm.ClibTab.DisplayProfile0RX2DataReportinGUI((int)m_RadarDevice2DFEStaticReportDataConfigParams.Profile0Rx2Idc, (uint)m_RadarDevice2DFEStaticReportDataConfigParams.f0004f8, (int)m_RadarDevice2DFEStaticReportDataConfigParams.Profile0Rx2Ipwr, (int)m_RadarDevice2DFEStaticReportDataConfigParams.f0004f9, (uint)m_RadarDevice2DFEStaticReportDataConfigParams.Profile0Rx2IQcrosscorr);
                Profile0RX3Idc = (m_RadarDevice2DFEStaticReportDataConfigParams.Profile0Rx3Idc = (short)((int)array2[25] << 8 | (int)array2[24]));
                Profile0RX3Qdc = (m_RadarDevice2DFEStaticReportDataConfigParams.f0004fa = (short)((int)array2[27] << 8 | (int)array2[26]));
                Profile0RX3Ipwr = (m_RadarDevice2DFEStaticReportDataConfigParams.Profile0Rx3Ipwr = (ushort)((int)array2[29] << 8 | (int)array2[28]));
                Profile0RX3Qpwr = (m_RadarDevice2DFEStaticReportDataConfigParams.f0004fb = (ushort)((int)array2[31] << 8 | (int)array2[30]));
                Profile0RX3IQcrosscorr = (m_RadarDevice2DFEStaticReportDataConfigParams.Profile0Rx3IQcrosscorr = ((int)array2[35] << 24 | (int)array2[34] << 16 | (int)array2[33] << 8 | (int)array2[32]));
                ScriptOps.m_MainForm.ClibTab.DisplayProfile0RX3DataReportinGUI((int)m_RadarDevice2DFEStaticReportDataConfigParams.Profile0Rx3Idc, (uint)m_RadarDevice2DFEStaticReportDataConfigParams.f0004fa, (int)m_RadarDevice2DFEStaticReportDataConfigParams.Profile0Rx3Ipwr, (int)m_RadarDevice2DFEStaticReportDataConfigParams.f0004fb, (uint)m_RadarDevice2DFEStaticReportDataConfigParams.Profile0Rx3IQcrosscorr);
                Profile0RX4Idc = (m_RadarDevice2DFEStaticReportDataConfigParams.Profile0Rx4Idc = (short)((int)array2[37] << 8 | (int)array2[36]));
                Profile0RX4Qdc = (m_RadarDevice2DFEStaticReportDataConfigParams.f0004fc = (short)((int)array2[39] << 8 | (int)array2[38]));
                Profile0RX4Ipwr = (m_RadarDevice2DFEStaticReportDataConfigParams.Profile0Rx4Ipwr = (ushort)((int)array2[41] << 8 | (int)array2[40]));
                Profile0RX4Qpwr = (m_RadarDevice2DFEStaticReportDataConfigParams.f0004fd = (ushort)((int)array2[43] << 8 | (int)array2[42]));
                Profile0RX4IQcrosscorr = (m_RadarDevice2DFEStaticReportDataConfigParams.Profile0Rx4IQcrosscorr = ((int)array2[47] << 24 | (int)array2[46] << 16 | (int)array2[45] << 8 | (int)array2[44]));
                ScriptOps.m_MainForm.ClibTab.DisplayProfile0RX4DataReportinGUI((int)m_RadarDevice2DFEStaticReportDataConfigParams.Profile0Rx4Idc, (uint)m_RadarDevice2DFEStaticReportDataConfigParams.f0004fc, (int)m_RadarDevice2DFEStaticReportDataConfigParams.Profile0Rx4Ipwr, (int)m_RadarDevice2DFEStaticReportDataConfigParams.f0004fd, (uint)m_RadarDevice2DFEStaticReportDataConfigParams.Profile0Rx4IQcrosscorr);
                Profile1RX1Idc = (m_RadarDevice2DFEStaticReportDataConfigParams.Profile1Rx1Idc = (short)((int)array2[49] << 8 | (int)array2[48]));
                Profile1RX1Qdc = (m_RadarDevice2DFEStaticReportDataConfigParams.f0004fe = (short)((int)array2[51] << 8 | (int)array2[50]));
                Profile1RX1Ipwr = (m_RadarDevice2DFEStaticReportDataConfigParams.Profile1Rx1Ipwr = (ushort)((int)array2[53] << 8 | (int)array2[52]));
                Profile1RX1Qpwr = (m_RadarDevice2DFEStaticReportDataConfigParams.f0004ff = (ushort)((int)array2[55] << 8 | (int)array2[54]));
                Profile1RX1IQcrosscorr = (m_RadarDevice2DFEStaticReportDataConfigParams.Profile1Rx1IQcrosscorr = ((int)array2[59] << 24 | (int)array2[58] << 16 | (int)array2[57] << 8 | (int)array2[56]));
                ScriptOps.m_MainForm.ClibTab.DisplayProfile1RX1DataReportinGUI((int)m_RadarDevice2DFEStaticReportDataConfigParams.Profile1Rx1Idc, (uint)m_RadarDevice2DFEStaticReportDataConfigParams.f0004fe, (int)m_RadarDevice2DFEStaticReportDataConfigParams.Profile1Rx1Ipwr, (int)m_RadarDevice2DFEStaticReportDataConfigParams.f0004ff, (uint)m_RadarDevice2DFEStaticReportDataConfigParams.Profile1Rx1IQcrosscorr);
                Profile1RX2Idc = (m_RadarDevice2DFEStaticReportDataConfigParams.Profile1Rx2Idc = (short)((int)array2[61] << 8 | (int)array2[60]));
                Profile1RX2Qdc = (m_RadarDevice2DFEStaticReportDataConfigParams.f000500 = (short)((int)array2[63] << 8 | (int)array2[62]));
                Profile1RX2Ipwr = (m_RadarDevice2DFEStaticReportDataConfigParams.Profile1Rx2Ipwr = (ushort)((int)array2[65] << 8 | (int)array2[64]));
                Profile1RX2Qpwr = (m_RadarDevice2DFEStaticReportDataConfigParams.f000501 = (ushort)((int)array2[67] << 8 | (int)array2[66]));
                Profile1RX2IQcrosscorr = (m_RadarDevice2DFEStaticReportDataConfigParams.Profile1Rx2IQcrosscorr = ((int)array2[71] << 24 | (int)array2[70] << 16 | (int)array2[69] << 8 | (int)array2[68]));
                ScriptOps.m_MainForm.ClibTab.DisplayProfile1RX2DataReportinGUI((int)m_RadarDevice2DFEStaticReportDataConfigParams.Profile1Rx2Idc, (uint)m_RadarDevice2DFEStaticReportDataConfigParams.f000500, (int)m_RadarDevice2DFEStaticReportDataConfigParams.Profile1Rx2Ipwr, (int)m_RadarDevice2DFEStaticReportDataConfigParams.f000501, (uint)m_RadarDevice2DFEStaticReportDataConfigParams.Profile1Rx2IQcrosscorr);
                Profile1RX3Idc = (m_RadarDevice2DFEStaticReportDataConfigParams.Profile1Rx3Idc = (short)((int)array2[73] << 8 | (int)array2[72]));
                Profile1RX3Qdc = (m_RadarDevice2DFEStaticReportDataConfigParams.f000502 = (short)((int)array2[75] << 8 | (int)array2[74]));
                Profile1RX3Ipwr = (m_RadarDevice2DFEStaticReportDataConfigParams.Profile1Rx3Ipwr = (ushort)((int)array2[77] << 8 | (int)array2[76]));
                Profile1RX3Qpwr = (m_RadarDevice2DFEStaticReportDataConfigParams.f000503 = (ushort)((int)array2[79] << 8 | (int)array2[78]));
                Profile1RX3IQcrosscorr = (m_RadarDevice2DFEStaticReportDataConfigParams.Profile1Rx3IQcrosscorr = ((int)array2[83] << 24 | (int)array2[82] << 16 | (int)array2[81] << 8 | (int)array2[80]));
                ScriptOps.m_MainForm.ClibTab.DisplayProfile1RX3DataReportinGUI((int)m_RadarDevice2DFEStaticReportDataConfigParams.Profile1Rx3Idc, (uint)m_RadarDevice2DFEStaticReportDataConfigParams.f000502, (int)m_RadarDevice2DFEStaticReportDataConfigParams.Profile1Rx3Ipwr, (int)m_RadarDevice2DFEStaticReportDataConfigParams.f000503, (uint)m_RadarDevice2DFEStaticReportDataConfigParams.Profile1Rx3IQcrosscorr);
                Profile1RX4Idc = (m_RadarDevice2DFEStaticReportDataConfigParams.Profile1Rx4Idc = (short)((int)array2[85] << 8 | (int)array2[84]));
                Profile1RX4Qdc = (m_RadarDevice2DFEStaticReportDataConfigParams.f000504 = (short)((int)array2[87] << 8 | (int)array2[86]));
                Profile1RX4Ipwr = (m_RadarDevice2DFEStaticReportDataConfigParams.Profile1Rx4Ipwr = (ushort)((int)array2[89] << 8 | (int)array2[88]));
                Profile1RX4Qpwr = (m_RadarDevice2DFEStaticReportDataConfigParams.f000505 = (ushort)((int)array2[91] << 8 | (int)array2[90]));
                Profile1RX4IQcrosscorr = (m_RadarDevice2DFEStaticReportDataConfigParams.Profile1Rx4IQcrosscorr = ((int)array2[95] << 24 | (int)array2[94] << 16 | (int)array2[93] << 8 | (int)array2[92]));
                ScriptOps.m_MainForm.ClibTab.DisplayProfile1RX4DataReportinGUI((int)m_RadarDevice2DFEStaticReportDataConfigParams.Profile1Rx4Idc, (uint)m_RadarDevice2DFEStaticReportDataConfigParams.f000504, (int)m_RadarDevice2DFEStaticReportDataConfigParams.Profile1Rx4Ipwr, (int)m_RadarDevice2DFEStaticReportDataConfigParams.f000505, (uint)m_RadarDevice2DFEStaticReportDataConfigParams.Profile1Rx4IQcrosscorr);
                Profile2RX1Idc = (m_RadarDevice2DFEStaticReportDataConfigParams.Profile2Rx1Idc = (short)((int)array2[97] << 8 | (int)array2[96]));
                Profile2RX1Qdc = (m_RadarDevice2DFEStaticReportDataConfigParams.f000506 = (short)((int)array2[99] << 8 | (int)array2[98]));
                Profile2RX1Ipwr = (m_RadarDevice2DFEStaticReportDataConfigParams.Profile2Rx1Ipwr = (ushort)((int)array2[101] << 8 | (int)array2[100]));
                Profile2RX1Qpwr = (m_RadarDevice2DFEStaticReportDataConfigParams.f000507 = (ushort)((int)array2[103] << 8 | (int)array2[102]));
                Profile2RX1IQcrosscorr = (m_RadarDevice2DFEStaticReportDataConfigParams.Profile2Rx1IQcrosscorr = ((int)array2[107] << 24 | (int)array2[106] << 16 | (int)array2[105] << 8 | (int)array2[104]));
                ScriptOps.m_MainForm.ClibTab.DisplayProfile2RX1DataReportinGUI((int)m_RadarDevice2DFEStaticReportDataConfigParams.Profile2Rx1Idc, (uint)m_RadarDevice2DFEStaticReportDataConfigParams.f000506, (int)m_RadarDevice2DFEStaticReportDataConfigParams.Profile2Rx1Ipwr, (int)m_RadarDevice2DFEStaticReportDataConfigParams.f000507, (uint)m_RadarDevice2DFEStaticReportDataConfigParams.Profile2Rx1IQcrosscorr);
                Profile2RX2Idc = (m_RadarDevice2DFEStaticReportDataConfigParams.Profile2Rx2Idc = (short)((int)array2[109] << 8 | (int)array2[108]));
                Profile2RX2Qdc = (m_RadarDevice2DFEStaticReportDataConfigParams.f000508 = (short)((int)array2[111] << 8 | (int)array2[110]));
                Profile2RX2Ipwr = (m_RadarDevice2DFEStaticReportDataConfigParams.Profile2Rx2Ipwr = (ushort)((int)array2[113] << 8 | (int)array2[112]));
                Profile2RX2Qpwr = (m_RadarDevice2DFEStaticReportDataConfigParams.f000509 = (ushort)((int)array2[115] << 8 | (int)array2[114]));
                Profile2RX2IQcrosscorr = (m_RadarDevice2DFEStaticReportDataConfigParams.Profile2Rx2IQcrosscorr = ((int)array2[119] << 24 | (int)array2[118] << 16 | (int)array2[117] << 8 | (int)array2[116]));
                ScriptOps.m_MainForm.ClibTab.DisplayProfile2RX2DataReportinGUI((int)m_RadarDevice2DFEStaticReportDataConfigParams.Profile2Rx2Idc, (uint)m_RadarDevice2DFEStaticReportDataConfigParams.f000508, (int)m_RadarDevice2DFEStaticReportDataConfigParams.Profile2Rx2Ipwr, (int)m_RadarDevice2DFEStaticReportDataConfigParams.f000509, (uint)m_RadarDevice2DFEStaticReportDataConfigParams.Profile2Rx2IQcrosscorr);
                Profile2RX3Idc = (m_RadarDevice2DFEStaticReportDataConfigParams.Profile2Rx3Idc = (short)((int)array2[121] << 8 | (int)array2[120]));
                Profile2RX3Qdc = (m_RadarDevice2DFEStaticReportDataConfigParams.f00050a = (short)((int)array2[123] << 8 | (int)array2[122]));
                Profile2RX3Ipwr = (m_RadarDevice2DFEStaticReportDataConfigParams.Profile2Rx3Ipwr = (ushort)((int)array2[125] << 8 | (int)array2[124]));
                Profile2RX3Qpwr = (m_RadarDevice2DFEStaticReportDataConfigParams.f00050b = (ushort)((int)array2[127] << 8 | (int)array2[126]));
                Profile2RX3IQcrosscorr = (m_RadarDevice2DFEStaticReportDataConfigParams.Profile2Rx3IQcrosscorr = ((int)array2[131] << 24 | (int)array2[130] << 16 | (int)array2[129] << 8 | (int)array2[128]));
                ScriptOps.m_MainForm.ClibTab.DisplayProfile2RX3DataReportinGUI((int)m_RadarDevice2DFEStaticReportDataConfigParams.Profile2Rx3Idc, (uint)m_RadarDevice2DFEStaticReportDataConfigParams.f00050a, (int)m_RadarDevice2DFEStaticReportDataConfigParams.Profile2Rx3Ipwr, (int)m_RadarDevice2DFEStaticReportDataConfigParams.f00050b, (uint)m_RadarDevice2DFEStaticReportDataConfigParams.Profile2Rx3IQcrosscorr);
                Profile2RX4Idc = (m_RadarDevice2DFEStaticReportDataConfigParams.Profile2Rx4Idc = (short)((int)array2[133] << 8 | (int)array2[132]));
                Profile2RX4Qdc = (m_RadarDevice2DFEStaticReportDataConfigParams.f00050c = (short)((int)array2[135] << 8 | (int)array2[134]));
                Profile2RX4Ipwr = (m_RadarDevice2DFEStaticReportDataConfigParams.Profile2Rx4Ipwr = (ushort)((int)array2[137] << 8 | (int)array2[136]));
                Profile2RX4Qpwr = (m_RadarDevice2DFEStaticReportDataConfigParams.f00050d = (ushort)((int)array2[139] << 8 | (int)array2[138]));
                Profile2RX4IQcrosscorr = (m_RadarDevice2DFEStaticReportDataConfigParams.Profile2Rx4IQcrosscorr = ((int)array2[143] << 24 | (int)array2[142] << 16 | (int)array2[141] << 8 | (int)array2[140]));
                ScriptOps.m_MainForm.ClibTab.DisplayProfile2RX4DataReportinGUI((int)m_RadarDevice2DFEStaticReportDataConfigParams.Profile2Rx4Idc, (uint)m_RadarDevice2DFEStaticReportDataConfigParams.f00050c, (int)m_RadarDevice2DFEStaticReportDataConfigParams.Profile2Rx4Ipwr, (int)m_RadarDevice2DFEStaticReportDataConfigParams.f00050d, (uint)m_RadarDevice2DFEStaticReportDataConfigParams.Profile2Rx4IQcrosscorr);
                Profile3RX1Idc = (m_RadarDevice2DFEStaticReportDataConfigParams.Profile3Rx1Idc = (short)((int)array2[145] << 8 | (int)array2[144]));
                Profile3RX1Qdc = (m_RadarDevice2DFEStaticReportDataConfigParams.f00050e = (short)((int)array2[147] << 8 | (int)array2[146]));
                Profile3RX1Ipwr = (m_RadarDevice2DFEStaticReportDataConfigParams.Profile3Rx1Ipwr = (ushort)((int)array2[149] << 8 | (int)array2[148]));
                Profile3RX1Qpwr = (m_RadarDevice2DFEStaticReportDataConfigParams.f00050f = (ushort)((int)array2[151] << 8 | (int)array2[150]));
                Profile3RX1IQcrosscorr = (m_RadarDevice2DFEStaticReportDataConfigParams.Profile3Rx1IQcrosscorr = ((int)array2[155] << 24 | (int)array2[154] << 16 | (int)array2[153] << 8 | (int)array2[152]));
                ScriptOps.m_MainForm.ClibTab.DisplayProfile3RX1DataReportinGUI((int)m_RadarDevice2DFEStaticReportDataConfigParams.Profile3Rx1Idc, (uint)m_RadarDevice2DFEStaticReportDataConfigParams.f00050e, (int)m_RadarDevice2DFEStaticReportDataConfigParams.Profile3Rx1Ipwr, (int)m_RadarDevice2DFEStaticReportDataConfigParams.f00050f, (uint)m_RadarDevice2DFEStaticReportDataConfigParams.Profile3Rx1IQcrosscorr);
                Profile3RX2Idc = (m_RadarDevice2DFEStaticReportDataConfigParams.Profile3Rx2Idc = (short)((int)array2[157] << 8 | (int)array2[156]));
                Profile3RX2Qdc = (m_RadarDevice2DFEStaticReportDataConfigParams.f000510 = (short)((int)array2[159] << 8 | (int)array2[158]));
                Profile3RX2Ipwr = (m_RadarDevice2DFEStaticReportDataConfigParams.Profile3Rx2Ipwr = (ushort)((int)array2[161] << 8 | (int)array2[160]));
                Profile3RX2Qpwr = (m_RadarDevice2DFEStaticReportDataConfigParams.f000511 = (ushort)((int)array2[163] << 8 | (int)array2[162]));
                Profile3RX2IQcrosscorr = (m_RadarDevice2DFEStaticReportDataConfigParams.Profile3Rx2IQcrosscorr = ((int)array2[167] << 24 | (int)array2[166] << 16 | (int)array2[165] << 8 | (int)array2[164]));
                ScriptOps.m_MainForm.ClibTab.DisplayProfile3RX2DataReportinGUI((int)m_RadarDevice2DFEStaticReportDataConfigParams.Profile3Rx2Idc, (uint)m_RadarDevice2DFEStaticReportDataConfigParams.f000510, (int)m_RadarDevice2DFEStaticReportDataConfigParams.Profile3Rx2Ipwr, (int)m_RadarDevice2DFEStaticReportDataConfigParams.f000511, (uint)m_RadarDevice2DFEStaticReportDataConfigParams.Profile3Rx2IQcrosscorr);
                Profile3RX3Idc = (m_RadarDevice2DFEStaticReportDataConfigParams.Profile3Rx3Idc = (short)((int)array2[169] << 8 | (int)array2[168]));
                Profile3RX3Qdc = (m_RadarDevice2DFEStaticReportDataConfigParams.f000512 = (short)((int)array2[171] << 8 | (int)array2[170]));
                Profile3RX3Ipwr = (m_RadarDevice2DFEStaticReportDataConfigParams.Profile3Rx3Ipwr = (ushort)((int)array2[173] << 8 | (int)array2[172]));
                Profile3RX3Qpwr = (m_RadarDevice2DFEStaticReportDataConfigParams.f000513 = (ushort)((int)array2[175] << 8 | (int)array2[174]));
                Profile3RX3IQcrosscorr = (m_RadarDevice2DFEStaticReportDataConfigParams.Profile3Rx3IQcrosscorr = ((int)array2[179] << 24 | (int)array2[178] << 16 | (int)array2[177] << 8 | (int)array2[176]));
                ScriptOps.m_MainForm.ClibTab.DisplayProfile3RX3DataReportinGUI((int)m_RadarDevice2DFEStaticReportDataConfigParams.Profile3Rx3Idc, (uint)m_RadarDevice2DFEStaticReportDataConfigParams.f000512, (int)m_RadarDevice2DFEStaticReportDataConfigParams.Profile3Rx3Ipwr, (int)m_RadarDevice2DFEStaticReportDataConfigParams.f000513, (uint)m_RadarDevice2DFEStaticReportDataConfigParams.Profile3Rx3IQcrosscorr);
                Profile3RX4Idc = (m_RadarDevice2DFEStaticReportDataConfigParams.Profile3Rx4Idc = (short)((int)array2[181] << 8 | (int)array2[180]));
                Profile3RX4Qdc = (m_RadarDevice2DFEStaticReportDataConfigParams.f000514 = (short)((int)array2[183] << 8 | (int)array2[182]));
                Profile3RX4Ipwr = (m_RadarDevice2DFEStaticReportDataConfigParams.Profile3Rx4Ipwr = (ushort)((int)array2[185] << 8 | (int)array2[184]));
                Profile3RX4Qpwr = (m_RadarDevice2DFEStaticReportDataConfigParams.f000515 = (ushort)((int)array2[187] << 8 | (int)array2[186]));
                Profile3RX4IQcrosscorr = (m_RadarDevice2DFEStaticReportDataConfigParams.Profile3Rx4IQcrosscorr = ((int)array2[191] << 24 | (int)array2[190] << 16 | (int)array2[189] << 8 | (int)array2[188]));
                ScriptOps.m_MainForm.ClibTab.DisplayProfile3RX4DataReportinGUI((int)m_RadarDevice2DFEStaticReportDataConfigParams.Profile3Rx4Idc, (uint)m_RadarDevice2DFEStaticReportDataConfigParams.f000512, (int)m_RadarDevice2DFEStaticReportDataConfigParams.Profile3Rx4Ipwr, (int)m_RadarDevice2DFEStaticReportDataConfigParams.f000515, (uint)m_RadarDevice2DFEStaticReportDataConfigParams.Profile3Rx4IQcrosscorr);
            }
            else if (GlobalRef.g_RadarDeviceId == 4U)
            {
                m_RadarDevice3DFEStaticReportDataConfigParams.Profile0Rx1Idc = (short)((int)array2[1] << 8 | (int)array2[0]);
                m_RadarDevice3DFEStaticReportDataConfigParams.f0004f6 = (short)((int)array2[3] << 8 | (int)array2[2]);
                m_RadarDevice3DFEStaticReportDataConfigParams.Profile0Rx1Ipwr = (ushort)((int)array2[5] << 8 | (int)array2[4]);
                m_RadarDevice3DFEStaticReportDataConfigParams.f0004f7 = (ushort)((int)array2[7] << 8 | (int)array2[6]);
                m_RadarDevice3DFEStaticReportDataConfigParams.Profile0Rx1IQcrosscorr = ((int)array2[11] << 24 | (int)array2[10] << 16 | (int)array2[9] << 8 | (int)array2[8]);
                m_RadarDevice3DFEStaticReportDataConfigParams.Profile0Rx2Idc = (short)((int)array2[13] << 8 | (int)array2[12]);
                m_RadarDevice3DFEStaticReportDataConfigParams.f0004f8 = (short)((int)array2[15] << 8 | (int)array2[14]);
                m_RadarDevice3DFEStaticReportDataConfigParams.Profile0Rx2Ipwr = (ushort)((int)array2[17] << 8 | (int)array2[16]);
                m_RadarDevice3DFEStaticReportDataConfigParams.f0004f9 = (ushort)((int)array2[19] << 8 | (int)array2[18]);
                m_RadarDevice3DFEStaticReportDataConfigParams.Profile0Rx2IQcrosscorr = ((int)array2[23] << 24 | (int)array2[22] << 16 | (int)array2[21] << 8 | (int)array2[20]);
                m_RadarDevice3DFEStaticReportDataConfigParams.Profile0Rx3Idc = (short)((int)array2[25] << 8 | (int)array2[24]);
                m_RadarDevice3DFEStaticReportDataConfigParams.f0004fa = (short)((int)array2[27] << 8 | (int)array2[26]);
                m_RadarDevice3DFEStaticReportDataConfigParams.Profile0Rx3Ipwr = (ushort)((int)array2[29] << 8 | (int)array2[28]);
                m_RadarDevice3DFEStaticReportDataConfigParams.f0004fb = (ushort)((int)array2[31] << 8 | (int)array2[30]);
                m_RadarDevice3DFEStaticReportDataConfigParams.Profile0Rx3IQcrosscorr = ((int)array2[35] << 24 | (int)array2[34] << 16 | (int)array2[33] << 8 | (int)array2[32]);
                m_RadarDevice3DFEStaticReportDataConfigParams.Profile0Rx4Idc = (short)((int)array2[37] << 8 | (int)array2[36]);
                m_RadarDevice3DFEStaticReportDataConfigParams.f0004fc = (short)((int)array2[39] << 8 | (int)array2[38]);
                m_RadarDevice3DFEStaticReportDataConfigParams.Profile0Rx4Ipwr = (ushort)((int)array2[41] << 8 | (int)array2[40]);
                m_RadarDevice3DFEStaticReportDataConfigParams.f0004fd = (ushort)((int)array2[43] << 8 | (int)array2[42]);
                m_RadarDevice3DFEStaticReportDataConfigParams.Profile0Rx4IQcrosscorr = ((int)array2[47] << 24 | (int)array2[46] << 16 | (int)array2[45] << 8 | (int)array2[44]);
                m_RadarDevice3DFEStaticReportDataConfigParams.Profile1Rx1Idc = (short)((int)array2[49] << 8 | (int)array2[48]);
                m_RadarDevice3DFEStaticReportDataConfigParams.f0004fe = (short)((int)array2[51] << 8 | (int)array2[50]);
                m_RadarDevice3DFEStaticReportDataConfigParams.Profile1Rx1Ipwr = (ushort)((int)array2[53] << 8 | (int)array2[52]);
                m_RadarDevice3DFEStaticReportDataConfigParams.f0004ff = (ushort)((int)array2[55] << 8 | (int)array2[54]);
                m_RadarDevice3DFEStaticReportDataConfigParams.Profile1Rx1IQcrosscorr = ((int)array2[59] << 24 | (int)array2[58] << 16 | (int)array2[57] << 8 | (int)array2[56]);
                m_RadarDevice3DFEStaticReportDataConfigParams.Profile1Rx2Idc = (short)((int)array2[61] << 8 | (int)array2[60]);
                m_RadarDevice3DFEStaticReportDataConfigParams.f000500 = (short)((int)array2[63] << 8 | (int)array2[62]);
                m_RadarDevice3DFEStaticReportDataConfigParams.Profile1Rx2Ipwr = (ushort)((int)array2[65] << 8 | (int)array2[64]);
                m_RadarDevice3DFEStaticReportDataConfigParams.f000501 = (ushort)((int)array2[67] << 8 | (int)array2[66]);
                m_RadarDevice3DFEStaticReportDataConfigParams.Profile1Rx2IQcrosscorr = ((int)array2[71] << 24 | (int)array2[70] << 16 | (int)array2[69] << 8 | (int)array2[68]);
                m_RadarDevice3DFEStaticReportDataConfigParams.Profile1Rx3Idc = (short)((int)array2[73] << 8 | (int)array2[72]);
                m_RadarDevice3DFEStaticReportDataConfigParams.f000502 = (short)((int)array2[75] << 8 | (int)array2[74]);
                m_RadarDevice3DFEStaticReportDataConfigParams.Profile1Rx3Ipwr = (ushort)((int)array2[77] << 8 | (int)array2[76]);
                m_RadarDevice3DFEStaticReportDataConfigParams.f000503 = (ushort)((int)array2[79] << 8 | (int)array2[78]);
                m_RadarDevice3DFEStaticReportDataConfigParams.Profile1Rx3IQcrosscorr = ((int)array2[83] << 24 | (int)array2[82] << 16 | (int)array2[81] << 8 | (int)array2[80]);
                m_RadarDevice3DFEStaticReportDataConfigParams.Profile1Rx4Idc = (short)((int)array2[85] << 8 | (int)array2[84]);
                m_RadarDevice3DFEStaticReportDataConfigParams.f000504 = (short)((int)array2[87] << 8 | (int)array2[86]);
                m_RadarDevice3DFEStaticReportDataConfigParams.Profile1Rx4Ipwr = (ushort)((int)array2[89] << 8 | (int)array2[88]);
                m_RadarDevice3DFEStaticReportDataConfigParams.f000505 = (ushort)((int)array2[91] << 8 | (int)array2[90]);
                m_RadarDevice3DFEStaticReportDataConfigParams.Profile1Rx4IQcrosscorr = ((int)array2[95] << 24 | (int)array2[94] << 16 | (int)array2[93] << 8 | (int)array2[92]);
                m_RadarDevice3DFEStaticReportDataConfigParams.Profile2Rx1Idc = (short)((int)array2[97] << 8 | (int)array2[96]);
                m_RadarDevice3DFEStaticReportDataConfigParams.f000506 = (short)((int)array2[99] << 8 | (int)array2[98]);
                m_RadarDevice3DFEStaticReportDataConfigParams.Profile2Rx1Ipwr = (ushort)((int)array2[101] << 8 | (int)array2[100]);
                m_RadarDevice3DFEStaticReportDataConfigParams.f000507 = (ushort)((int)array2[103] << 8 | (int)array2[102]);
                m_RadarDevice3DFEStaticReportDataConfigParams.Profile2Rx1IQcrosscorr = ((int)array2[107] << 24 | (int)array2[106] << 16 | (int)array2[105] << 8 | (int)array2[104]);
                m_RadarDevice3DFEStaticReportDataConfigParams.Profile2Rx2Idc = (short)((int)array2[109] << 8 | (int)array2[108]);
                m_RadarDevice3DFEStaticReportDataConfigParams.f000508 = (short)((int)array2[111] << 8 | (int)array2[110]);
                m_RadarDevice3DFEStaticReportDataConfigParams.Profile2Rx2Ipwr = (ushort)((int)array2[113] << 8 | (int)array2[112]);
                m_RadarDevice3DFEStaticReportDataConfigParams.f000509 = (ushort)((int)array2[115] << 8 | (int)array2[114]);
                m_RadarDevice3DFEStaticReportDataConfigParams.Profile2Rx2IQcrosscorr = ((int)array2[119] << 24 | (int)array2[118] << 16 | (int)array2[117] << 8 | (int)array2[116]);
                m_RadarDevice3DFEStaticReportDataConfigParams.Profile2Rx3Idc = (short)((int)array2[121] << 8 | (int)array2[120]);
                m_RadarDevice3DFEStaticReportDataConfigParams.f00050a = (short)((int)array2[123] << 8 | (int)array2[122]);
                m_RadarDevice3DFEStaticReportDataConfigParams.Profile2Rx3Ipwr = (ushort)((int)array2[125] << 8 | (int)array2[124]);
                m_RadarDevice3DFEStaticReportDataConfigParams.f00050b = (ushort)((int)array2[127] << 8 | (int)array2[126]);
                m_RadarDevice3DFEStaticReportDataConfigParams.Profile2Rx3IQcrosscorr = ((int)array2[131] << 24 | (int)array2[130] << 16 | (int)array2[129] << 8 | (int)array2[128]);
                m_RadarDevice3DFEStaticReportDataConfigParams.Profile2Rx4Idc = (short)((int)array2[133] << 8 | (int)array2[132]);
                m_RadarDevice3DFEStaticReportDataConfigParams.f00050c = (short)((int)array2[135] << 8 | (int)array2[134]);
                m_RadarDevice3DFEStaticReportDataConfigParams.Profile2Rx4Ipwr = (ushort)((int)array2[137] << 8 | (int)array2[136]);
                m_RadarDevice3DFEStaticReportDataConfigParams.f00050d = (ushort)((int)array2[139] << 8 | (int)array2[138]);
                m_RadarDevice3DFEStaticReportDataConfigParams.Profile2Rx4IQcrosscorr = ((int)array2[143] << 24 | (int)array2[142] << 16 | (int)array2[141] << 8 | (int)array2[140]);
                m_RadarDevice3DFEStaticReportDataConfigParams.Profile3Rx1Idc = (short)((int)array2[145] << 8 | (int)array2[144]);
                m_RadarDevice3DFEStaticReportDataConfigParams.f00050e = (short)((int)array2[147] << 8 | (int)array2[146]);
                m_RadarDevice3DFEStaticReportDataConfigParams.Profile3Rx1Ipwr = (ushort)((int)array2[149] << 8 | (int)array2[148]);
                m_RadarDevice3DFEStaticReportDataConfigParams.f00050f = (ushort)((int)array2[151] << 8 | (int)array2[150]);
                m_RadarDevice3DFEStaticReportDataConfigParams.Profile3Rx1IQcrosscorr = ((int)array2[155] << 24 | (int)array2[154] << 16 | (int)array2[153] << 8 | (int)array2[152]);
                m_RadarDevice3DFEStaticReportDataConfigParams.Profile3Rx2Idc = (short)((int)array2[157] << 8 | (int)array2[156]);
                m_RadarDevice3DFEStaticReportDataConfigParams.f000510 = (short)((int)array2[159] << 8 | (int)array2[158]);
                m_RadarDevice3DFEStaticReportDataConfigParams.Profile3Rx2Ipwr = (ushort)((int)array2[161] << 8 | (int)array2[160]);
                m_RadarDevice3DFEStaticReportDataConfigParams.f000511 = (ushort)((int)array2[163] << 8 | (int)array2[162]);
                m_RadarDevice3DFEStaticReportDataConfigParams.Profile3Rx2IQcrosscorr = ((int)array2[167] << 24 | (int)array2[166] << 16 | (int)array2[165] << 8 | (int)array2[164]);
                m_RadarDevice3DFEStaticReportDataConfigParams.Profile3Rx3Idc = (short)((int)array2[169] << 8 | (int)array2[168]);
                m_RadarDevice3DFEStaticReportDataConfigParams.f000512 = (short)((int)array2[171] << 8 | (int)array2[170]);
                m_RadarDevice3DFEStaticReportDataConfigParams.Profile3Rx3Ipwr = (ushort)((int)array2[173] << 8 | (int)array2[172]);
                m_RadarDevice3DFEStaticReportDataConfigParams.f000513 = (ushort)((int)array2[175] << 8 | (int)array2[174]);
                m_RadarDevice3DFEStaticReportDataConfigParams.Profile3Rx3IQcrosscorr = ((int)array2[179] << 24 | (int)array2[178] << 16 | (int)array2[177] << 8 | (int)array2[176]);
                m_RadarDevice3DFEStaticReportDataConfigParams.Profile3Rx4Idc = (short)((int)array2[181] << 8 | (int)array2[180]);
                m_RadarDevice3DFEStaticReportDataConfigParams.f000514 = (short)((int)array2[183] << 8 | (int)array2[182]);
                m_RadarDevice3DFEStaticReportDataConfigParams.Profile3Rx4Ipwr = (ushort)((int)array2[185] << 8 | (int)array2[184]);
                m_RadarDevice3DFEStaticReportDataConfigParams.f000515 = (ushort)((int)array2[187] << 8 | (int)array2[186]);
                m_RadarDevice3DFEStaticReportDataConfigParams.Profile3Rx4IQcrosscorr = ((int)array2[191] << 24 | (int)array2[190] << 16 | (int)array2[189] << 8 | (int)array2[188]);
            }
            else if (GlobalRef.g_RadarDeviceId == 8U)
            {
                m_RadarDevice4DFEStaticReportDataConfigParams.Profile0Rx1Idc = (short)((int)array2[1] << 8 | (int)array2[0]);
                m_RadarDevice4DFEStaticReportDataConfigParams.f0004f6 = (short)((int)array2[3] << 8 | (int)array2[2]);
                m_RadarDevice4DFEStaticReportDataConfigParams.Profile0Rx1Ipwr = (ushort)((int)array2[5] << 8 | (int)array2[4]);
                m_RadarDevice4DFEStaticReportDataConfigParams.f0004f7 = (ushort)((int)array2[7] << 8 | (int)array2[6]);
                m_RadarDevice4DFEStaticReportDataConfigParams.Profile0Rx1IQcrosscorr = ((int)array2[11] << 24 | (int)array2[10] << 16 | (int)array2[9] << 8 | (int)array2[8]);
                m_RadarDevice4DFEStaticReportDataConfigParams.Profile0Rx2Idc = (short)((int)array2[13] << 8 | (int)array2[12]);
                m_RadarDevice4DFEStaticReportDataConfigParams.f0004f8 = (short)((int)array2[15] << 8 | (int)array2[14]);
                m_RadarDevice4DFEStaticReportDataConfigParams.Profile0Rx2Ipwr = (ushort)((int)array2[17] << 8 | (int)array2[16]);
                m_RadarDevice4DFEStaticReportDataConfigParams.f0004f9 = (ushort)((int)array2[19] << 8 | (int)array2[18]);
                m_RadarDevice4DFEStaticReportDataConfigParams.Profile0Rx2IQcrosscorr = ((int)array2[23] << 24 | (int)array2[22] << 16 | (int)array2[21] << 8 | (int)array2[20]);
                m_RadarDevice4DFEStaticReportDataConfigParams.Profile0Rx3Idc = (short)((int)array2[25] << 8 | (int)array2[24]);
                m_RadarDevice4DFEStaticReportDataConfigParams.f0004fa = (short)((int)array2[27] << 8 | (int)array2[26]);
                m_RadarDevice4DFEStaticReportDataConfigParams.Profile0Rx3Ipwr = (ushort)((int)array2[29] << 8 | (int)array2[28]);
                m_RadarDevice4DFEStaticReportDataConfigParams.f0004fb = (ushort)((int)array2[31] << 8 | (int)array2[30]);
                m_RadarDevice4DFEStaticReportDataConfigParams.Profile0Rx3IQcrosscorr = ((int)array2[35] << 24 | (int)array2[34] << 16 | (int)array2[33] << 8 | (int)array2[32]);
                m_RadarDevice4DFEStaticReportDataConfigParams.Profile0Rx4Idc = (short)((int)array2[37] << 8 | (int)array2[36]);
                m_RadarDevice4DFEStaticReportDataConfigParams.f0004fc = (short)((int)array2[39] << 8 | (int)array2[38]);
                m_RadarDevice4DFEStaticReportDataConfigParams.Profile0Rx4Ipwr = (ushort)((int)array2[41] << 8 | (int)array2[40]);
                m_RadarDevice4DFEStaticReportDataConfigParams.f0004fd = (ushort)((int)array2[43] << 8 | (int)array2[42]);
                m_RadarDevice4DFEStaticReportDataConfigParams.Profile0Rx4IQcrosscorr = ((int)array2[47] << 24 | (int)array2[46] << 16 | (int)array2[45] << 8 | (int)array2[44]);
                m_RadarDevice4DFEStaticReportDataConfigParams.Profile1Rx1Idc = (short)((int)array2[49] << 8 | (int)array2[48]);
                m_RadarDevice4DFEStaticReportDataConfigParams.f0004fe = (short)((int)array2[51] << 8 | (int)array2[50]);
                m_RadarDevice4DFEStaticReportDataConfigParams.Profile1Rx1Ipwr = (ushort)((int)array2[53] << 8 | (int)array2[52]);
                m_RadarDevice4DFEStaticReportDataConfigParams.f0004ff = (ushort)((int)array2[55] << 8 | (int)array2[54]);
                m_RadarDevice4DFEStaticReportDataConfigParams.Profile1Rx1IQcrosscorr = ((int)array2[59] << 24 | (int)array2[58] << 16 | (int)array2[57] << 8 | (int)array2[56]);
                m_RadarDevice4DFEStaticReportDataConfigParams.Profile1Rx2Idc = (short)((int)array2[61] << 8 | (int)array2[60]);
                m_RadarDevice4DFEStaticReportDataConfigParams.f000500 = (short)((int)array2[63] << 8 | (int)array2[62]);
                m_RadarDevice4DFEStaticReportDataConfigParams.Profile1Rx2Ipwr = (ushort)((int)array2[65] << 8 | (int)array2[64]);
                m_RadarDevice4DFEStaticReportDataConfigParams.f000501 = (ushort)((int)array2[67] << 8 | (int)array2[66]);
                m_RadarDevice4DFEStaticReportDataConfigParams.Profile1Rx2IQcrosscorr = ((int)array2[71] << 24 | (int)array2[70] << 16 | (int)array2[69] << 8 | (int)array2[68]);
                m_RadarDevice4DFEStaticReportDataConfigParams.Profile1Rx3Idc = (short)((int)array2[73] << 8 | (int)array2[72]);
                m_RadarDevice4DFEStaticReportDataConfigParams.f000502 = (short)((int)array2[75] << 8 | (int)array2[74]);
                m_RadarDevice4DFEStaticReportDataConfigParams.Profile1Rx3Ipwr = (ushort)((int)array2[77] << 8 | (int)array2[76]);
                m_RadarDevice4DFEStaticReportDataConfigParams.f000503 = (ushort)((int)array2[79] << 8 | (int)array2[78]);
                m_RadarDevice4DFEStaticReportDataConfigParams.Profile1Rx3IQcrosscorr = ((int)array2[83] << 24 | (int)array2[82] << 16 | (int)array2[81] << 8 | (int)array2[80]);
                m_RadarDevice4DFEStaticReportDataConfigParams.Profile1Rx4Idc = (short)((int)array2[85] << 8 | (int)array2[84]);
                m_RadarDevice4DFEStaticReportDataConfigParams.f000504 = (short)((int)array2[87] << 8 | (int)array2[86]);
                m_RadarDevice4DFEStaticReportDataConfigParams.Profile1Rx4Ipwr = (ushort)((int)array2[89] << 8 | (int)array2[88]);
                m_RadarDevice4DFEStaticReportDataConfigParams.f000505 = (ushort)((int)array2[91] << 8 | (int)array2[90]);
                m_RadarDevice4DFEStaticReportDataConfigParams.Profile1Rx4IQcrosscorr = ((int)array2[95] << 24 | (int)array2[94] << 16 | (int)array2[93] << 8 | (int)array2[92]);
                m_RadarDevice4DFEStaticReportDataConfigParams.Profile2Rx1Idc = (short)((int)array2[97] << 8 | (int)array2[96]);
                m_RadarDevice4DFEStaticReportDataConfigParams.f000506 = (short)((int)array2[99] << 8 | (int)array2[98]);
                m_RadarDevice4DFEStaticReportDataConfigParams.Profile2Rx1Ipwr = (ushort)((int)array2[101] << 8 | (int)array2[100]);
                m_RadarDevice4DFEStaticReportDataConfigParams.f000507 = (ushort)((int)array2[103] << 8 | (int)array2[102]);
                m_RadarDevice4DFEStaticReportDataConfigParams.Profile2Rx1IQcrosscorr = ((int)array2[107] << 24 | (int)array2[106] << 16 | (int)array2[105] << 8 | (int)array2[104]);
                m_RadarDevice4DFEStaticReportDataConfigParams.Profile2Rx2Idc = (short)((int)array2[109] << 8 | (int)array2[108]);
                m_RadarDevice4DFEStaticReportDataConfigParams.f000508 = (short)((int)array2[111] << 8 | (int)array2[110]);
                m_RadarDevice4DFEStaticReportDataConfigParams.Profile2Rx2Ipwr = (ushort)((int)array2[113] << 8 | (int)array2[112]);
                m_RadarDevice4DFEStaticReportDataConfigParams.f000509 = (ushort)((int)array2[115] << 8 | (int)array2[114]);
                m_RadarDevice4DFEStaticReportDataConfigParams.Profile2Rx2IQcrosscorr = ((int)array2[119] << 24 | (int)array2[118] << 16 | (int)array2[117] << 8 | (int)array2[116]);
                m_RadarDevice4DFEStaticReportDataConfigParams.Profile2Rx3Idc = (short)((int)array2[121] << 8 | (int)array2[120]);
                m_RadarDevice4DFEStaticReportDataConfigParams.f00050a = (short)((int)array2[123] << 8 | (int)array2[122]);
                m_RadarDevice4DFEStaticReportDataConfigParams.Profile2Rx3Ipwr = (ushort)((int)array2[125] << 8 | (int)array2[124]);
                m_RadarDevice4DFEStaticReportDataConfigParams.f00050b = (ushort)((int)array2[127] << 8 | (int)array2[126]);
                m_RadarDevice4DFEStaticReportDataConfigParams.Profile2Rx3IQcrosscorr = ((int)array2[131] << 24 | (int)array2[130] << 16 | (int)array2[129] << 8 | (int)array2[128]);
                m_RadarDevice4DFEStaticReportDataConfigParams.Profile2Rx4Idc = (short)((int)array2[133] << 8 | (int)array2[132]);
                m_RadarDevice4DFEStaticReportDataConfigParams.f00050c = (short)((int)array2[135] << 8 | (int)array2[134]);
                m_RadarDevice4DFEStaticReportDataConfigParams.Profile2Rx4Ipwr = (ushort)((int)array2[137] << 8 | (int)array2[136]);
                m_RadarDevice4DFEStaticReportDataConfigParams.f00050d = (ushort)((int)array2[139] << 8 | (int)array2[138]);
                m_RadarDevice4DFEStaticReportDataConfigParams.Profile2Rx4IQcrosscorr = ((int)array2[143] << 24 | (int)array2[142] << 16 | (int)array2[141] << 8 | (int)array2[140]);
                m_RadarDevice4DFEStaticReportDataConfigParams.Profile3Rx1Idc = (short)((int)array2[145] << 8 | (int)array2[144]);
                m_RadarDevice4DFEStaticReportDataConfigParams.f00050e = (short)((int)array2[147] << 8 | (int)array2[146]);
                m_RadarDevice4DFEStaticReportDataConfigParams.Profile3Rx1Ipwr = (ushort)((int)array2[149] << 8 | (int)array2[148]);
                m_RadarDevice4DFEStaticReportDataConfigParams.f00050f = (ushort)((int)array2[151] << 8 | (int)array2[150]);
                m_RadarDevice4DFEStaticReportDataConfigParams.Profile3Rx1IQcrosscorr = ((int)array2[155] << 24 | (int)array2[154] << 16 | (int)array2[153] << 8 | (int)array2[152]);
                m_RadarDevice4DFEStaticReportDataConfigParams.Profile3Rx2Idc = (short)((int)array2[157] << 8 | (int)array2[156]);
                m_RadarDevice4DFEStaticReportDataConfigParams.f000510 = (short)((int)array2[159] << 8 | (int)array2[158]);
                m_RadarDevice4DFEStaticReportDataConfigParams.Profile3Rx2Ipwr = (ushort)((int)array2[161] << 8 | (int)array2[160]);
                m_RadarDevice4DFEStaticReportDataConfigParams.f000511 = (ushort)((int)array2[163] << 8 | (int)array2[162]);
                m_RadarDevice4DFEStaticReportDataConfigParams.Profile3Rx2IQcrosscorr = ((int)array2[167] << 24 | (int)array2[166] << 16 | (int)array2[165] << 8 | (int)array2[164]);
                m_RadarDevice4DFEStaticReportDataConfigParams.Profile3Rx3Idc = (short)((int)array2[169] << 8 | (int)array2[168]);
                m_RadarDevice4DFEStaticReportDataConfigParams.f000512 = (short)((int)array2[171] << 8 | (int)array2[170]);
                m_RadarDevice4DFEStaticReportDataConfigParams.Profile3Rx3Ipwr = (ushort)((int)array2[173] << 8 | (int)array2[172]);
                m_RadarDevice4DFEStaticReportDataConfigParams.f000513 = (ushort)((int)array2[175] << 8 | (int)array2[174]);
                m_RadarDevice4DFEStaticReportDataConfigParams.Profile3Rx3IQcrosscorr = ((int)array2[179] << 24 | (int)array2[178] << 16 | (int)array2[177] << 8 | (int)array2[176]);
                m_RadarDevice4DFEStaticReportDataConfigParams.Profile3Rx4Idc = (short)((int)array2[181] << 8 | (int)array2[180]);
                m_RadarDevice4DFEStaticReportDataConfigParams.f000514 = (short)((int)array2[183] << 8 | (int)array2[182]);
                m_RadarDevice4DFEStaticReportDataConfigParams.Profile3Rx4Ipwr = (ushort)((int)array2[185] << 8 | (int)array2[184]);
                m_RadarDevice4DFEStaticReportDataConfigParams.f000515 = (ushort)((int)array2[187] << 8 | (int)array2[186]);
                m_RadarDevice4DFEStaticReportDataConfigParams.Profile3Rx4IQcrosscorr = ((int)array2[191] << 24 | (int)array2[190] << 16 | (int)array2[189] << 8 | (int)array2[188]);
            }
            ScriptOps.m_MainForm.ClibTab.SetTimeTempSensinGUI(GlobalRef.g_RadarDeviceId, string.Concat(new string[]
            {
                Convert.ToString((uint)((int)array[3] << 24 | ((int)array[2] << 16 | ((int)array[1] << 8 | (int)array[0]))))
            }));
            ScriptOps.m_MainForm.ClibTab.SetRx1TempSensinGUI(GlobalRef.g_RadarDeviceId, string.Concat(new string[]
            {
                Convert.ToString((short)((int)array[5] << 8 | (int)array[4]))
            }));
            ScriptOps.m_MainForm.ClibTab.SetRx2TempSensinGUI(GlobalRef.g_RadarDeviceId, string.Concat(new string[]
            {
                Convert.ToString((short)((int)array[7] << 8 | (int)array[6]))
            }));
            ScriptOps.m_MainForm.ClibTab.SetRx3TempSensinGUI(GlobalRef.g_RadarDeviceId, string.Concat(new string[]
            {
                Convert.ToString((short)((int)array[9] << 8 | (int)array[8]))
            }));
            ScriptOps.m_MainForm.ClibTab.SetRx4TempSensinGUI(GlobalRef.g_RadarDeviceId, string.Concat(new string[]
            {
                Convert.ToString((short)((int)array[11] << 8 | (int)array[10]))
            }));
            ScriptOps.m_MainForm.ClibTab.SetTx1TempSensinGUI(GlobalRef.g_RadarDeviceId, string.Concat(new string[]
            {
                Convert.ToString((short)((int)array[13] << 8 | (int)array[12]))
            }));
            ScriptOps.m_MainForm.ClibTab.SetTx2TempSensinGUI(GlobalRef.g_RadarDeviceId, string.Concat(new string[]
            {
                Convert.ToString((short)((int)array[15] << 8 | (int)array[14]))
            }));
            ScriptOps.m_MainForm.ClibTab.SetTx3TempSensinGUI(GlobalRef.g_RadarDeviceId, string.Concat(new string[]
            {
                Convert.ToString((short)((int)array[17] << 8 | (int)array[16]))
            }));
            ScriptOps.m_MainForm.ClibTab.m000014(GlobalRef.g_RadarDeviceId, string.Concat(new string[]
            {
                Convert.ToString((short)((int)array[19] << 8 | (int)array[18]))
            }));
            ScriptOps.m_MainForm.ClibTab.SetDigTempSensinGUI(GlobalRef.g_RadarDeviceId, string.Concat(new string[]
            {
                Convert.ToString((short)((int)array[21] << 8 | (int)array[20]))
            }));
            if ((num == 0 && ((GlobalRef.g_CasCadeDeviceSpiConnect & 1U) == 1U || (GlobalRef.g_CasCadeDeviceSpiConnect & 2U) == 2U || (GlobalRef.g_CasCadeDeviceSpiConnect & 4U) == 4U || (GlobalRef.g_CasCadeDeviceSpiConnect & 8U) == 8U)) || GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
            {
                string full_command4 = string.Format("Status: Passed", new object[0]);
                m_GuiManager.RecordLog(8, full_command4);
            }
            else
            {
                string msg = string.Format("Status: Failed, Error Type: {0}", new object[]
                {
                    GetErrorType(num)
                });
                GlobalRef.LuaWrapper.PrintError(msg);
            }
            if (GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
            {
                if (iRs232ConnectDisconnect_impl() == 0 && !GlobalRef.g_NtvRS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
                {
                    m_GuiManager.DllOps.iConnect(1U, 0U);
                    string full_command5 = string.Format("Debug Port Reconnected!", new object[0]);
                    m_GuiManager.RecordLog(9, full_command5);
                    ScriptOps.KeepTrying(2000, new Func<bool>(spare_read));
                }
            }
            else if (GlobalRef.g_CasCadeDeviceSpiConnect == 0U)
            {
                string full_command6 = string.Format("Error Occurred in Port open close", new object[0]);
                m_GuiManager.RecordLog(9, full_command6);
            }
            return num;
        }

        private int iGetRFDynamicCharReportConfig_Impl(bool is_starting_op, bool is_ending_op)
        {
            int num = -1;
            byte[] array = new byte[24];
            IntPtr inData = GCHandle.Alloc(array, GCHandleType.Pinned).AddrOfPinnedObject();
            if (GlobalRef.g_NtvRS232Connect[(int)GlobalRef.g_RadarDeviceIndex] && GlobalRef.g_CasCadeDeviceSpiConnect == 0U)
            {
                num = m_TsWrapper.Calling_WriteAddr_Single(4294959848U, 1U);
                if (m_GuiManager.DllOps.itempDisconnect(false) == 0)
                {
                    string full_command = string.Format("Debug Port Disconnected", new object[0]);
                    m_GuiManager.RecordLog(0, full_command);
                    if (!GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
                    {
                        iRs232ConnectDisconnect_impl();
                    }
                }
            }
            if (m_RadarDeviceModeConfigParams.NumberOfRadarDevicesDetected <= 1)
            {
                string full_command2 = string.Format("ar1.RFTemperatureGet()", new object[0]);
                m_GuiManager.RecordLog(15, full_command2);
            }
            else
            {
                string full_command3 = string.Format("ar1.RFTemperatureGet_mult({0})", new object[]
                {
                    GlobalRef.g_RadarDeviceId
                });
                m_GuiManager.RecordLog(15, full_command3);
            }
            int num2 = 0;
            int num3 = (int)GlobalRef.g_RadarDeviceId;
            do
            {
                if ((num3 & 1 << num2) != 0)
                {
                    num = Imports.RadarLinkImpl_GetTemperatureReport(1U << num2, inData);
                    Thread.Sleep(200);
                    ScriptOps.m_MainForm.ClibTab.SetTimeTempSensinGUI(1U << num2, string.Concat(new string[]
                    {
                        Convert.ToString((uint)((int)array[3] << 24 | ((int)array[2] << 16 | ((int)array[1] << 8 | (int)array[0]))))
                    }));
                    ScriptOps.m_MainForm.ClibTab.SetRx1TempSensinGUI(1U << num2, string.Concat(new string[]
                    {
                        Convert.ToString((short)((int)array[5] << 8 | (int)array[4]))
                    }));
                    ScriptOps.m_MainForm.ClibTab.SetRx2TempSensinGUI(1U << num2, string.Concat(new string[]
                    {
                        Convert.ToString((short)((int)array[7] << 8 | (int)array[6]))
                    }));
                    ScriptOps.m_MainForm.ClibTab.SetRx3TempSensinGUI(1U << num2, string.Concat(new string[]
                    {
                        Convert.ToString((short)((int)array[9] << 8 | (int)array[8]))
                    }));
                    ScriptOps.m_MainForm.ClibTab.SetRx4TempSensinGUI(1U << num2, string.Concat(new string[]
                    {
                        Convert.ToString((short)((int)array[11] << 8 | (int)array[10]))
                    }));
                    ScriptOps.m_MainForm.ClibTab.SetTx1TempSensinGUI(1U << num2, string.Concat(new string[]
                    {
                        Convert.ToString((short)((int)array[13] << 8 | (int)array[12]))
                    }));
                    ScriptOps.m_MainForm.ClibTab.SetTx2TempSensinGUI(1U << num2, string.Concat(new string[]
                    {
                        Convert.ToString((short)((int)array[15] << 8 | (int)array[14]))
                    }));
                    ScriptOps.m_MainForm.ClibTab.SetTx3TempSensinGUI(1U << num2, string.Concat(new string[]
                    {
                        Convert.ToString((short)((int)array[17] << 8 | (int)array[16]))
                    }));
                    ScriptOps.m_MainForm.ClibTab.m000014(1U << num2, string.Concat(new string[]
                    {
                        Convert.ToString((short)((int)array[19] << 8 | (int)array[18]))
                    }));
                    ScriptOps.m_MainForm.ClibTab.SetDigTempSensinGUI(1U << num2, string.Concat(new string[]
                    {
                        Convert.ToString((short)((int)array[21] << 8 | (int)array[20]))
                    }));
                    ScriptOps.m_MainForm.ClibTab.SetDig2TempSensinGUI(1U << num2, string.Concat(new string[]
                    {
                        Convert.ToString((short)((int)array[23] << 8 | (int)array[22]))
                    }));
                    ScriptOps.m_MainForm.ClibTab.SetAvgTempinGUI(1 << num2);
                    ScriptOps.m_MainForm.ClibTab.RFTemperatureReport(1U << num2, "0", "0", string.Concat(new string[]
                    {
                        Convert.ToString((short)((int)array[5] << 8 | (int)array[4]))
                    }), string.Concat(new string[]
                    {
                        Convert.ToString((short)((int)array[7] << 8 | (int)array[6]))
                    }), string.Concat(new string[]
                    {
                        Convert.ToString((short)((int)array[9] << 8 | (int)array[8]))
                    }), string.Concat(new string[]
                    {
                        Convert.ToString((short)((int)array[11] << 8 | (int)array[10]))
                    }), string.Concat(new string[]
                    {
                        Convert.ToString((short)((int)array[13] << 8 | (int)array[12]))
                    }), string.Concat(new string[]
                    {
                        Convert.ToString((short)((int)array[15] << 8 | (int)array[14]))
                    }), string.Concat(new string[]
                    {
                        Convert.ToString((short)((int)array[17] << 8 | (int)array[16]))
                    }), string.Concat(new string[]
                    {
                        Convert.ToString((short)((int)array[19] << 8 | (int)array[18]))
                    }), string.Concat(new string[]
                    {
                        Convert.ToString((short)((int)array[21] << 8 | (int)array[20]))
                    }), string.Concat(new string[]
                    {
                        Convert.ToString((short)((int)array[23] << 8 | (int)array[22]))
                    }), string.Concat(new string[]
                    {
                        Convert.ToString((uint)((int)array[3] << 24 | ((int)array[2] << 16 | ((int)array[1] << 8 | (int)array[0]))))
                    }));
                    num3 &= ~(1 << num2);
                }
                num2++;
            }
            while (num3 != 0);
            if ((num == 0 && ((GlobalRef.g_CasCadeDeviceSpiConnect & 1U) == 1U || (GlobalRef.g_CasCadeDeviceSpiConnect & 2U) == 2U || (GlobalRef.g_CasCadeDeviceSpiConnect & 4U) == 4U || (GlobalRef.g_CasCadeDeviceSpiConnect & 8U) == 8U)) || GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
            {
                string full_command4 = string.Format("Status: Passed", new object[0]);
                m_GuiManager.RecordLog(8, full_command4);
            }
            else
            {
                string msg = string.Format("Status: Failed, Error Type: {0}", new object[]
                {
                    GetErrorType(num)
                });
                GlobalRef.LuaWrapper.PrintError(msg);
            }
            if (GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex] && iRs232ConnectDisconnect_impl() == 0 && !GlobalRef.g_NtvRS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
            {
                m_GuiManager.DllOps.iConnect(1U, 0U);
                string full_command5 = string.Format("Debug Port Reconnected!", new object[0]);
                m_GuiManager.RecordLog(9, full_command5);
                ScriptOps.KeepTrying(2000, new Func<bool>(spare_read));
            }
            return num;
        }

        private int GetRFDynamicCharReportConfig_Impl(out uint time, out short p1, out short p2, out short p3, out short p4, out short p5, out short p6, out short p7, out short p8, out short tmpDig1Sens, out short tmpDig2Sens)
        {
            int num = -1;
            time = 0U;
            p1 = 0;
            p2 = 0;
            p3 = 0;
            p4 = 0;
            p5 = 0;
            p6 = 0;
            p7 = 0;
            p8 = 0;
            tmpDig1Sens = 0;
            tmpDig2Sens = 0;
            byte[] array = new byte[24];
            IntPtr inData = GCHandle.Alloc(array, GCHandleType.Pinned).AddrOfPinnedObject();
            if (GlobalRef.g_NtvRS232Connect[(int)GlobalRef.g_RadarDeviceIndex] && GlobalRef.g_CasCadeDeviceSpiConnect == 0U)
            {
                num = m_TsWrapper.Calling_WriteAddr_Single(4294959848U, 1U);
                if (m_GuiManager.DllOps.itempDisconnect(false) == 0)
                {
                    string full_command = string.Format("Debug Port Disconnected", new object[0]);
                    m_GuiManager.RecordLog(0, full_command);
                    if (!GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
                    {
                        iRs232ConnectDisconnect_impl();
                    }
                }
            }
            if (m_RadarDeviceModeConfigParams.NumberOfRadarDevicesDetected <= 1)
            {
                string full_command2 = string.Format("ar1.RFTemperatureGet()", new object[0]);
                m_GuiManager.RecordLog(15, full_command2);
            }
            else
            {
                string full_command3 = string.Format("ar1.RFTemperatureGet_mult({0})", new object[]
                {
                    GlobalRef.g_RadarDeviceId
                });
                m_GuiManager.RecordLog(15, full_command3);
            }
            int num2 = 0;
            int num3 = (int)GlobalRef.g_RadarDeviceId;
            do
            {
                if ((num3 & 1 << num2) != 0)
                {
                    num = Imports.RadarLinkImpl_GetTemperatureReport(1U << num2, inData);
                    Thread.Sleep(200);
                    time = (uint)((int)array[3] << 24 | ((int)array[2] << 16 | ((int)array[1] << 8 | (int)array[0])));
                    p1 = (short)((int)array[5] << 8 | (int)array[4]);
                    p2 = (short)((int)array[7] << 8 | (int)array[6]);
                    p3 = (short)((int)array[9] << 8 | (int)array[8]);
                    p4 = (short)((int)array[11] << 8 | (int)array[10]);
                    p5 = (short)((int)array[13] << 8 | (int)array[12]);
                    p6 = (short)((int)array[15] << 8 | (int)array[14]);
                    p7 = (short)((int)array[17] << 8 | (int)array[16]);
                    p8 = (short)((int)array[19] << 8 | (int)array[18]);
                    tmpDig1Sens = (short)((int)array[21] << 8 | (int)array[20]);
                    tmpDig2Sens = (short)((int)array[23] << 8 | (int)array[22]);
                    ScriptOps.m_MainForm.ClibTab.SetTimeTempSensinGUI(1U << num2, string.Concat(new string[]
                    {
                        Convert.ToString((uint)((int)array[3] << 24 | ((int)array[2] << 16 | ((int)array[1] << 8 | (int)array[0]))))
                    }));
                    ScriptOps.m_MainForm.ClibTab.SetRx1TempSensinGUI(1U << num2, string.Concat(new string[]
                    {
                        Convert.ToString((short)((int)array[5] << 8 | (int)array[4]))
                    }));
                    ScriptOps.m_MainForm.ClibTab.SetRx2TempSensinGUI(1U << num2, string.Concat(new string[]
                    {
                        Convert.ToString((short)((int)array[7] << 8 | (int)array[6]))
                    }));
                    ScriptOps.m_MainForm.ClibTab.SetRx3TempSensinGUI(1U << num2, string.Concat(new string[]
                    {
                        Convert.ToString((short)((int)array[9] << 8 | (int)array[8]))
                    }));
                    ScriptOps.m_MainForm.ClibTab.SetRx4TempSensinGUI(1U << num2, string.Concat(new string[]
                    {
                        Convert.ToString((short)((int)array[11] << 8 | (int)array[10]))
                    }));
                    ScriptOps.m_MainForm.ClibTab.SetTx1TempSensinGUI(1U << num2, string.Concat(new string[]
                    {
                        Convert.ToString((short)((int)array[13] << 8 | (int)array[12]))
                    }));
                    ScriptOps.m_MainForm.ClibTab.SetTx2TempSensinGUI(1U << num2, string.Concat(new string[]
                    {
                        Convert.ToString((short)((int)array[15] << 8 | (int)array[14]))
                    }));
                    ScriptOps.m_MainForm.ClibTab.SetTx3TempSensinGUI(1U << num2, string.Concat(new string[]
                    {
                        Convert.ToString((short)((int)array[17] << 8 | (int)array[16]))
                    }));
                    ScriptOps.m_MainForm.ClibTab.m000014(1U << num2, string.Concat(new string[]
                    {
                        Convert.ToString((short)((int)array[19] << 8 | (int)array[18]))
                    }));
                    ScriptOps.m_MainForm.ClibTab.SetDigTempSensinGUI(1U << num2, string.Concat(new string[]
                    {
                        Convert.ToString((short)((int)array[21] << 8 | (int)array[20]))
                    }));
                    ScriptOps.m_MainForm.ClibTab.SetDig2TempSensinGUI(1U << num2, string.Concat(new string[]
                    {
                        Convert.ToString((short)((int)array[23] << 8 | (int)array[22]))
                    }));
                    ScriptOps.m_MainForm.ClibTab.SetAvgTempinGUI(1 << num2);
                    ScriptOps.m_MainForm.ClibTab.RFTemperatureReport(1U << num2, "0", "0", string.Concat(new string[]
                    {
                        Convert.ToString((short)((int)array[5] << 8 | (int)array[4]))
                    }), string.Concat(new string[]
                    {
                        Convert.ToString((short)((int)array[7] << 8 | (int)array[6]))
                    }), string.Concat(new string[]
                    {
                        Convert.ToString((short)((int)array[9] << 8 | (int)array[8]))
                    }), string.Concat(new string[]
                    {
                        Convert.ToString((short)((int)array[11] << 8 | (int)array[10]))
                    }), string.Concat(new string[]
                    {
                        Convert.ToString((short)((int)array[13] << 8 | (int)array[12]))
                    }), string.Concat(new string[]
                    {
                        Convert.ToString((short)((int)array[15] << 8 | (int)array[14]))
                    }), string.Concat(new string[]
                    {
                        Convert.ToString((short)((int)array[17] << 8 | (int)array[16]))
                    }), string.Concat(new string[]
                    {
                        Convert.ToString((short)((int)array[19] << 8 | (int)array[18]))
                    }), string.Concat(new string[]
                    {
                        Convert.ToString((short)((int)array[21] << 8 | (int)array[20]))
                    }), string.Concat(new string[]
                    {
                        Convert.ToString((short)((int)array[23] << 8 | (int)array[22]))
                    }), string.Concat(new string[]
                    {
                        Convert.ToString((uint)((int)array[3] << 24 | ((int)array[2] << 16 | ((int)array[1] << 8 | (int)array[0]))))
                    }));
                    num3 &= ~(1 << num2);
                }
                num2++;
            }
            while (num3 != 0);
            if ((num == 0 && ((GlobalRef.g_CasCadeDeviceSpiConnect & 1U) == 1U || (GlobalRef.g_CasCadeDeviceSpiConnect & 2U) == 2U || (GlobalRef.g_CasCadeDeviceSpiConnect & 4U) == 4U || (GlobalRef.g_CasCadeDeviceSpiConnect & 8U) == 8U)) || GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
            {
                string full_command4 = string.Format("Status: Passed", new object[0]);
                m_GuiManager.RecordLog(8, full_command4);
            }
            else
            {
                string msg = string.Format("Status: Failed, Error Type: {0}", new object[]
                {
                    GetErrorType(num)
                });
                GlobalRef.LuaWrapper.PrintError(msg);
            }
            if (GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
            {
                if (iRs232ConnectDisconnect_impl() == 0 && !GlobalRef.g_NtvRS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
                {
                    m_GuiManager.DllOps.iConnect(1U, 0U);
                    string full_command5 = string.Format("Debug Port Reconnected!", new object[0]);
                    m_GuiManager.RecordLog(9, full_command5);
                    ScriptOps.KeepTrying(2000, new Func<bool>(spare_read));
                }
            }
            else if (GlobalRef.g_CasCadeDeviceSpiConnect == 0U)
            {
                string full_command6 = string.Format("Error Occurred in Port open close", new object[0]);
                m_GuiManager.RecordLog(9, full_command6);
            }
            return num;
        }

        private int iSetRFCharReportConfig_Impl(bool is_starting_op, bool is_ending_op)
        {
            RFCharReportParam.AeReportPeriod = m_RFCharReportConfigParams.AeReportPeriod;
            IntPtr inData = GCHandle.Alloc(RFCharReportParam, GCHandleType.Pinned).AddrOfPinnedObject();
            int num;
            if (GlobalRef.g_NtvRS232Connect[(int)GlobalRef.g_RadarDeviceIndex] && GlobalRef.g_CasCadeDeviceSpiConnect == 0U)
            {
                num = m_TsWrapper.Calling_WriteAddr_Single(4294959848U, 1U);
                if (m_GuiManager.DllOps.itempDisconnect(false) == 0)
                {
                    string full_command = string.Format("Debug Port Disconnected", new object[0]);
                    m_GuiManager.RecordLog(0, full_command);
                    if (!GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
                    {
                        iRs232ConnectDisconnect_impl();
                    }
                }
            }
            if (m_RadarDeviceModeConfigParams.NumberOfRadarDevicesDetected <= 1)
            {
                string full_command2 = string.Format("ar1.SetTemperatureReportConfig({0})", new object[]
                {
                    RFCharReportParam.AeReportPeriod
                });
                m_GuiManager.RecordLog(15, full_command2);
            }
            else
            {
                string full_command3 = string.Format("ar1.SetTemperatureReportConfig_mult({0},{1})", new object[]
                {
                    GlobalRef.g_RadarDeviceId,
                    RFCharReportParam.AeReportPeriod
                });
                m_GuiManager.RecordLog(15, full_command3);
            }
            ScriptOps.asyncEvent.asyncDynamicChar = 0U;
            num = Imports.RadarLinkImpl_SetDynamicCharReportConfig(GlobalRef.g_RadarDeviceId, inData);
            if ((num == 0 && ((GlobalRef.g_CasCadeDeviceSpiConnect & 1U) == 1U || (GlobalRef.g_CasCadeDeviceSpiConnect & 2U) == 2U || (GlobalRef.g_CasCadeDeviceSpiConnect & 4U) == 4U || (GlobalRef.g_CasCadeDeviceSpiConnect & 8U) == 8U)) || GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
            {
                string full_command4 = string.Format("Status: Passed", new object[0]);
                m_GuiManager.RecordLog(8, full_command4);
            }
            else
            {
                string msg = string.Format("Status: Failed, Error Type: {0}", new object[]
                {
                    GetErrorType(num)
                });
                GlobalRef.LuaWrapper.PrintError(msg);
            }
            if (GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
            {
                if (iRs232ConnectDisconnect_impl() == 0 && !GlobalRef.g_NtvRS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
                {
                    m_GuiManager.DllOps.iConnect(1U, 0U);
                    string full_command5 = string.Format("Debug Port Reconnected!", new object[0]);
                    m_GuiManager.RecordLog(9, full_command5);
                    ScriptOps.KeepTrying(2000, new Func<bool>(spare_read));
                }
            }
            else if (GlobalRef.g_CasCadeDeviceSpiConnect == 0U)
            {
                string full_command6 = string.Format("Error Occurred in Port open close", new object[0]);
                m_GuiManager.RecordLog(9, full_command6);
            }
            return num;
        }

        private int iSetRFCalibMonConfig_Impl(bool is_starting_op, bool is_ending_op)
        {
            RFCalibMonParam.CalibMonId = m_RFCalibMonConfigParams.CalibMonId;
            IntPtr inData = GCHandle.Alloc(RFCalibMonParam, GCHandleType.Pinned).AddrOfPinnedObject();
            int num;
            if (GlobalRef.g_NtvRS232Connect[(int)GlobalRef.g_RadarDeviceIndex] && GlobalRef.g_CasCadeDeviceSpiConnect == 0U)
            {
                num = m_TsWrapper.Calling_WriteAddr_Single(4294959848U, 1U);
                if (m_GuiManager.DllOps.itempDisconnect(false) == 0)
                {
                    string full_command = string.Format("Debug Port Disconnected", new object[0]);
                    m_GuiManager.RecordLog(0, full_command);
                    if (!GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
                    {
                        iRs232ConnectDisconnect_impl();
                    }
                }
            }
            Thread.Sleep(200);
            if (m_RadarDeviceModeConfigParams.NumberOfRadarDevicesDetected <= 1)
            {
                string full_command2 = string.Format("ar1.SetCalibMonConfig({0})", new object[]
                {
                    RFCalibMonParam.CalibMonId
                });
                m_GuiManager.RecordLog(15, full_command2);
            }
            else
            {
                string full_command3 = string.Format("ar1.SetCalibMonConfig_mult({0},{1})", new object[]
                {
                    GlobalRef.g_RadarDeviceId,
                    RFCalibMonParam.CalibMonId
                });
                m_GuiManager.RecordLog(15, full_command3);
            }
            num = Imports.RadarLinkImpl_SetCalibMonConfig(GlobalRef.g_RadarDeviceId, inData);
            if ((num == 0 && ((GlobalRef.g_CasCadeDeviceSpiConnect & 1U) == 1U || (GlobalRef.g_CasCadeDeviceSpiConnect & 2U) == 2U || (GlobalRef.g_CasCadeDeviceSpiConnect & 4U) == 4U || (GlobalRef.g_CasCadeDeviceSpiConnect & 8U) == 8U)) || GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
            {
                string full_command4 = string.Format("Status: Passed", new object[0]);
                m_GuiManager.RecordLog(8, full_command4);
            }
            else
            {
                string msg = string.Format("Status: Failed, Error Type: {0}", new object[]
                {
                    GetErrorType(num)
                });
                GlobalRef.LuaWrapper.PrintError(msg);
            }
            if (GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
            {
                if (iRs232ConnectDisconnect_impl() == 0 && !GlobalRef.g_NtvRS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
                {
                    m_GuiManager.DllOps.iConnect(1U, 0U);
                    string full_command5 = string.Format("Debug Port Reconnected!", new object[0]);
                    m_GuiManager.RecordLog(9, full_command5);
                    ScriptOps.KeepTrying(2000, new Func<bool>(spare_read));
                }
            }
            else if (GlobalRef.g_CasCadeDeviceSpiConnect == 0U)
            {
                string full_command6 = string.Format("Error Occurred in Port open close", new object[0]);
                m_GuiManager.RecordLog(9, full_command6);
            }
            return num;
        }

        private int iSetRFClibDisableConfig_Impl(bool is_starting_op, bool is_ending_op)
        {
            RFDynamicParam.CalFuncDisabledata = (m_RFCalibEnaDisConfigParams.f0004f5 | m_RFCalibEnaDisConfigParams.APLLCalDisable << 1 | m_RFCalibEnaDisConfigParams.Synth1CalDisable << 2 | m_RFCalibEnaDisConfigParams.Synth2CalDisable << 3);
            RFDynamicParam.Reserved0 = 0U;
            RFDynamicParam.Reserved1 = 0U;
            IntPtr inData = GCHandle.Alloc(RFDynamicParam, GCHandleType.Pinned).AddrOfPinnedObject();
            int num;
            if (GlobalRef.g_NtvRS232Connect[(int)GlobalRef.g_RadarDeviceIndex] && GlobalRef.g_CasCadeDeviceSpiConnect == 0U)
            {
                num = m_TsWrapper.Calling_WriteAddr_Single(4294959848U, 1U);
                if (m_GuiManager.DllOps.itempDisconnect(false) == 0)
                {
                    string full_command = string.Format("Debug Port Disconnected", new object[0]);
                    m_GuiManager.RecordLog(0, full_command);
                    if (!GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
                    {
                        iRs232ConnectDisconnect_impl();
                    }
                }
            }
            Thread.Sleep(200);
            if (m_RadarDeviceModeConfigParams.NumberOfRadarDevicesDetected <= 1)
            {
                string full_command2 = string.Format("ar1.SetCalibDisableConfig({0}, {1}, {2}, {3})", new object[]
                {
                    m_RFCalibEnaDisConfigParams.f0004f5,
                    m_RFCalibEnaDisConfigParams.APLLCalDisable,
                    m_RFCalibEnaDisConfigParams.Synth1CalDisable,
                    m_RFCalibEnaDisConfigParams.Synth2CalDisable
                });
                m_GuiManager.RecordLog(15, full_command2);
            }
            else
            {
                string full_command3 = string.Format("ar1.SetCalibDisableConfig_mult({0}, {1}, {2}, {3}, {4})", new object[]
                {
                    GlobalRef.g_RadarDeviceId,
                    m_RFCalibEnaDisConfigParams.f0004f5,
                    m_RFCalibEnaDisConfigParams.APLLCalDisable,
                    m_RFCalibEnaDisConfigParams.Synth1CalDisable,
                    m_RFCalibEnaDisConfigParams.Synth2CalDisable
                });
                m_GuiManager.RecordLog(15, full_command3);
            }
            num = Imports.RadarLinkImpl_SetCalibDisableConfig(GlobalRef.g_RadarDeviceId, inData);
            if ((num == 0 && ((GlobalRef.g_CasCadeDeviceSpiConnect & 1U) == 1U || (GlobalRef.g_CasCadeDeviceSpiConnect & 2U) == 2U || (GlobalRef.g_CasCadeDeviceSpiConnect & 4U) == 4U || (GlobalRef.g_CasCadeDeviceSpiConnect & 8U) == 8U)) || GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
            {
                string full_command4 = string.Format("Status: Passed", new object[0]);
                m_GuiManager.RecordLog(8, full_command4);
            }
            else
            {
                string msg = string.Format("Status: Failed, Error Type: {0}", new object[]
                {
                    GetErrorType(num)
                });
                GlobalRef.LuaWrapper.PrintError(msg);
            }
            if (GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
            {
                if (iRs232ConnectDisconnect_impl() == 0 && !GlobalRef.g_NtvRS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
                {
                    m_GuiManager.DllOps.iConnect(1U, 0U);
                    string full_command5 = string.Format("Debug Port Reconnected!", new object[0]);
                    m_GuiManager.RecordLog(9, full_command5);
                    ScriptOps.KeepTrying(2000, new Func<bool>(spare_read));
                }
            }
            else if (GlobalRef.g_CasCadeDeviceSpiConnect == 0U)
            {
                string full_command6 = string.Format("Error Occurred in Port open close", new object[0]);
                m_GuiManager.RecordLog(9, full_command6);
            }
            return num;
        }

        private int m000087(bool is_starting_op, bool is_ending_op)
        {
            f0002da.PDInstance = (byte)f000210.PDInstance;
            f0002da.RFInPowerIndex = (byte)f000210.RFINPowerIndex;
            f0002da.RFInPowerOn = (byte)f000210.RFINPowerOn;
            f0002da.Mode = (byte)f000210.Mode;
            f0002da.Reserved = 0U;
            if (f000210.Mode == '\u0001')
            {
                string msg = string.Format("Started prog_pd_trim_val script", new object[0]);
                m_GuiManager.Log(msg);
                string directoryName = Path.GetDirectoryName(Application.StartupPath);
                string file_name = string.Concat(new string[]
                {
                    directoryName + "\\Scripts\\prog_pd_trim_val.lua"
                });
                GlobalRef.LuaWrapper.DoFile(file_name);
                string msg2 = string.Format("Ended prog_pd_trim_val script", new object[0]);
                m_GuiManager.Log(msg2);
            }
            Thread.Sleep(200);
            IntPtr inData = GCHandle.Alloc(f0002da, GCHandleType.Pinned).AddrOfPinnedObject();
            int num;
            if (GlobalRef.g_NtvRS232Connect[(int)GlobalRef.g_RadarDeviceIndex] && GlobalRef.g_CasCadeDeviceSpiConnect == 0U)
            {
                num = m_TsWrapper.Calling_WriteAddr_Single(4294959848U, 1U);
                if (m_GuiManager.DllOps.itempDisconnect(false) == 0)
                {
                    string full_command = string.Format("Debug Port Disconnected", new object[0]);
                    m_GuiManager.RecordLog(0, full_command);
                    if (!GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
                    {
                        iRs232ConnectDisconnect_impl();
                    }
                }
            }
            Thread.Sleep(200);
            if (m_RadarDeviceModeConfigParams.NumberOfRadarDevicesDetected <= 1)
            {
                string full_command2 = string.Format("ar1.RfSetPdTrimConfig({0}, {1}, {2}, {3})", new object[]
                {
                    f000210.PDInstance,
                    f000210.RFINPowerIndex,
                    f000210.RFINPowerOn,
                    f000210.Mode
                });
                m_GuiManager.RecordLog(15, full_command2);
            }
            else
            {
                string full_command3 = string.Format("ar1.RfSetPdTrimConfig_mult({0}, {1}, {2}, {3}, {4})", new object[]
                {
                    GlobalRef.g_RadarDeviceId,
                    f000210.PDInstance,
                    f000210.RFINPowerIndex,
                    f000210.RFINPowerOn,
                    f000210.Mode
                });
                m_GuiManager.RecordLog(15, full_command3);
            }
            num = Imports.RadarLinkImpl_RfSetPdTrimConfig(GlobalRef.g_RadarDeviceId, inData);
            if ((num == 0 && ((GlobalRef.g_CasCadeDeviceSpiConnect & 1U) == 1U || (GlobalRef.g_CasCadeDeviceSpiConnect & 2U) == 2U || (GlobalRef.g_CasCadeDeviceSpiConnect & 4U) == 4U || (GlobalRef.g_CasCadeDeviceSpiConnect & 8U) == 8U)) || GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
            {
                string full_command4 = string.Format("Status: Passed", new object[0]);
                m_GuiManager.RecordLog(8, full_command4);
            }
            else
            {
                string msg3 = string.Format("Status: Failed, Error Type: {0}", new object[]
                {
                    GetErrorType(num)
                });
                GlobalRef.LuaWrapper.PrintError(msg3);
            }
            if (GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
            {
                if (iRs232ConnectDisconnect_impl() == 0 && !GlobalRef.g_NtvRS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
                {
                    m_GuiManager.DllOps.iConnect(1U, 0U);
                    string full_command5 = string.Format("Debug Port Reconnected!", new object[0]);
                    m_GuiManager.RecordLog(9, full_command5);
                    ScriptOps.KeepTrying(2000, new Func<bool>(spare_read));
                }
            }
            else if (GlobalRef.g_CasCadeDeviceSpiConnect == 0U)
            {
                string full_command6 = string.Format("Error Occurred in Port open close", new object[0]);
                m_GuiManager.RecordLog(9, full_command6);
            }
            return num;
        }

        private int iMeasurePDPowerConfig_Impl(bool is_starting_op, bool is_ending_op)
        {
            MeasurePDPowerParam.PDId = (byte)m_MeasurePDPowerConfigParams.PDId;
            MeasurePDPowerParam.PDLnaGainIndex = (byte)m_MeasurePDPowerConfigParams.PDLnaGainIndex;
            MeasurePDPowerParam.PDType = m_MeasurePDPowerConfigParams.PDType;
            MeasurePDPowerParam.pdSel = m_MeasurePDPowerConfigParams.pdSel;
            MeasurePDPowerParam.pdDacVal = m_MeasurePDPowerConfigParams.pdDacVal;
            MeasurePDPowerParam.paramVal = m_MeasurePDPowerConfigParams.paramVal;
            MeasurePDPowerParam.NumAccumulations = (byte)m_MeasurePDPowerConfigParams.NumOfAccumulations;
            MeasurePDPowerParam.NumSamples = (byte)m_MeasurePDPowerConfigParams.NumOfSamples;
            MeasurePDPowerParam.Reserved = m_MeasurePDPowerConfigParams.Reserved;
            IntPtr inData = GCHandle.Alloc(MeasurePDPowerParam, GCHandleType.Pinned).AddrOfPinnedObject();
            int num;
            if (GlobalRef.g_NtvRS232Connect[(int)GlobalRef.g_RadarDeviceIndex] && GlobalRef.g_CasCadeDeviceSpiConnect == 0U)
            {
                num = m_TsWrapper.Calling_WriteAddr_Single(4294959848U, 1U);
                if (m_GuiManager.DllOps.itempDisconnect(false) == 0)
                {
                    string full_command = string.Format("Debug Port Disconnected", new object[0]);
                    m_GuiManager.RecordLog(0, full_command);
                    if (!GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
                    {
                        iRs232ConnectDisconnect_impl();
                    }
                }
            }
            Thread.Sleep(200);
            if (m_RadarDeviceModeConfigParams.NumberOfRadarDevicesDetected <= 1)
            {
                string full_command2 = string.Format("ar1.SetMeasPdPowerConfig({0}, {1}, {2}, {3}, {4}, {5}, {6}, {7}, {8} )", new object[]
                {
                    m_MeasurePDPowerConfigParams.PDId,
                    m_MeasurePDPowerConfigParams.PDLnaGainIndex,
                    m_MeasurePDPowerConfigParams.NumOfAccumulations,
                    m_MeasurePDPowerConfigParams.NumOfSamples,
                    m_MeasurePDPowerConfigParams.PDType,
                    m_MeasurePDPowerConfigParams.pdSel,
                    m_MeasurePDPowerConfigParams.pdDacVal,
                    m_MeasurePDPowerConfigParams.paramVal,
                    m_MeasurePDPowerConfigParams.Reserved
                });
                m_GuiManager.RecordLog(15, full_command2);
            }
            else
            {
                string full_command3 = string.Format("ar1.SetMeasPdPowerConfig_mult({0}, {1}, {2}, {3}, {4}, {5}, {6}, {7}, {8}, {9})", new object[]
                {
                    GlobalRef.g_RadarDeviceId,
                    m_MeasurePDPowerConfigParams.PDId,
                    m_MeasurePDPowerConfigParams.PDLnaGainIndex,
                    m_MeasurePDPowerConfigParams.NumOfAccumulations,
                    m_MeasurePDPowerConfigParams.NumOfSamples,
                    m_MeasurePDPowerConfigParams.PDType,
                    m_MeasurePDPowerConfigParams.pdSel,
                    m_MeasurePDPowerConfigParams.pdDacVal,
                    m_MeasurePDPowerConfigParams.paramVal,
                    m_MeasurePDPowerConfigParams.Reserved
                });
                m_GuiManager.RecordLog(15, full_command3);
            }
            num = Imports.RadarLinkImpl_RfSetMeasPdPowerConfig(GlobalRef.g_RadarDeviceId, inData);
            if ((num == 0 && ((GlobalRef.g_CasCadeDeviceSpiConnect & 1U) == 1U || (GlobalRef.g_CasCadeDeviceSpiConnect & 2U) == 2U || (GlobalRef.g_CasCadeDeviceSpiConnect & 4U) == 4U || (GlobalRef.g_CasCadeDeviceSpiConnect & 8U) == 8U)) || GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
            {
                string full_command4 = string.Format("Status: Passed", new object[0]);
                m_GuiManager.RecordLog(8, full_command4);
            }
            else
            {
                string msg = string.Format("Status: Failed, Error Type: {0}", new object[]
                {
                    GetErrorType(num)
                });
                GlobalRef.LuaWrapper.PrintError(msg);
            }
            if (GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
            {
                if (iRs232ConnectDisconnect_impl() == 0 && !GlobalRef.g_NtvRS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
                {
                    m_GuiManager.DllOps.iConnect(1U, 0U);
                    string full_command5 = string.Format("Debug Port Reconnected!", new object[0]);
                    m_GuiManager.RecordLog(9, full_command5);
                    ScriptOps.KeepTrying(2000, new Func<bool>(spare_read));
                }
            }
            else if (GlobalRef.g_CasCadeDeviceSpiConnect == 0U)
            {
                string full_command6 = string.Format("Error Occurred in Port open close", new object[0]);
                m_GuiManager.RecordLog(9, full_command6);
            }
            return num;
        }

        private int iSynthFreqLinearityMonConfig_Impl(bool is_starting_op, bool is_ending_op)
        {
            SynthFreqLinearityConfigDataParam.ProfileIndex = (byte)(m_MonSynthFreqLinearityConfigParams.Profile0Index | m_MonSynthFreqLinearityConfigParams.Profile1Index << 1 | m_MonSynthFreqLinearityConfigParams.Profile2Index << 2 | m_MonSynthFreqLinearityConfigParams.Profile3Index << 3);
            SynthFreqLinearityConfigDataParam.ReportingMode = (byte)m_MonSynthFreqLinearityConfigParams.ReportingMode;
            SynthFreqLinearityConfigDataParam.FreqErrorThreshold = m_MonSynthFreqLinearityConfigParams.FreqErrorThreshold;
            SynthFreqLinearityConfigDataParam.MonStartTime = (uint)((int)((byte)(m_MonSynthFreqLinearityConfigParams.Profile0MonStartTime / 0.2)) | (int)((byte)(m_MonSynthFreqLinearityConfigParams.Profile1MonStartTime / 0.2)) << 8 | (int)((byte)(m_MonSynthFreqLinearityConfigParams.Profile2MonStartTime / 0.2)) << 16 | (int)((byte)(m_MonSynthFreqLinearityConfigParams.Profile3MonStartTime / 0.2)) << 24);
            SynthFreqLinearityConfigDataParam.DataPathParams1 = (uint)((int)((byte)m_MonSynthFreqLinearityConfigParams.DataPathParams1L1) | (int)((byte)m_MonSynthFreqLinearityConfigParams.DataPathParams1L1) << 8 | (int)((byte)m_MonSynthFreqLinearityConfigParams.DataPathParams1N) << 16);
            SynthFreqLinearityConfigDataParam.DataPathParams2 = (uint)((int)((byte)m_MonSynthFreqLinearityConfigParams.DataPathParams2S1) | (int)((byte)m_MonSynthFreqLinearityConfigParams.DataPathParams2S2) << 8 | (int)((byte)m_MonSynthFreqLinearityConfigParams.DataPathParams2S) << 16);
            SynthFreqLinearityConfigDataParam.LinearityRAMAddress = (uint)((int)((byte)m_MonSynthFreqLinearityConfigParams.Profile0LinearityRAMAddress) | (int)((byte)m_MonSynthFreqLinearityConfigParams.Profile1LinearityRAMAddress) << 4 | (int)((byte)m_MonSynthFreqLinearityConfigParams.Profile2LinearityRAMAddress) << 8 | (int)((byte)m_MonSynthFreqLinearityConfigParams.Profile3LinearityRAMAddress) << 12 | (int)((byte)m_MonSynthFreqLinearityConfigParams.Profile3LinearityRAMAddress) << 16);
            SynthFreqLinearityConfigDataParam.Reserved = 0U;
            IntPtr inData = GCHandle.Alloc(SynthFreqLinearityConfigDataParam, GCHandleType.Pinned).AddrOfPinnedObject();
            int num;
            if (GlobalRef.g_NtvRS232Connect[(int)GlobalRef.g_RadarDeviceIndex] && GlobalRef.g_CasCadeDeviceSpiConnect == 0U)
            {
                num = m_TsWrapper.Calling_WriteAddr_Single(4294959848U, 1U);
                if (m_GuiManager.DllOps.itempDisconnect(false) == 0)
                {
                    string full_command = string.Format("Debug Port Disconnected", new object[0]);
                    m_GuiManager.RecordLog(0, full_command);
                    if (!GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
                    {
                        iRs232ConnectDisconnect_impl();
                    }
                }
            }
            Thread.Sleep(200);
            if (m_RadarDeviceModeConfigParams.NumberOfRadarDevicesDetected <= 1)
            {
                string full_command2 = string.Format("ar1.SetRfSynthLinMonConfig({0}, {1}, {2}, {3}, {4}, {5}, {6}, {7}, {8}, {9}, {10}, {11}, {12}, {13}, {14}, {15}, {16})", new object[]
                {
                    SynthFreqLinearityConfigDataParam.ProfileIndex,
                    m_MonSynthFreqLinearityConfigParams.ReportingMode,
                    m_MonSynthFreqLinearityConfigParams.FreqErrorThreshold,
                    (decimal)m_MonSynthFreqLinearityConfigParams.Profile0MonStartTime,
                    (decimal)m_MonSynthFreqLinearityConfigParams.Profile1MonStartTime,
                    (decimal)m_MonSynthFreqLinearityConfigParams.Profile2MonStartTime,
                    (decimal)m_MonSynthFreqLinearityConfigParams.Profile3MonStartTime,
                    m_MonSynthFreqLinearityConfigParams.DataPathParams1L1,
                    m_MonSynthFreqLinearityConfigParams.DataPathParams1L2,
                    m_MonSynthFreqLinearityConfigParams.DataPathParams1N,
                    m_MonSynthFreqLinearityConfigParams.DataPathParams2S1,
                    m_MonSynthFreqLinearityConfigParams.DataPathParams2S2,
                    m_MonSynthFreqLinearityConfigParams.DataPathParams2S,
                    m_MonSynthFreqLinearityConfigParams.Profile0LinearityRAMAddress,
                    m_MonSynthFreqLinearityConfigParams.Profile1LinearityRAMAddress,
                    m_MonSynthFreqLinearityConfigParams.Profile2LinearityRAMAddress,
                    m_MonSynthFreqLinearityConfigParams.Profile3LinearityRAMAddress
                });
                m_GuiManager.RecordLog(15, full_command2);
            }
            else
            {
                string full_command3 = string.Format("ar1.SetRfSynthLinMonConfig_mult({0}, {1}, {2}, {3}, {4}, {5}, {6}, {7}, {8}, {9}, {10}, {11}, {12}, {13}, {14}, {15}, {16}, {17})", new object[]
                {
                    GlobalRef.g_RadarDeviceId,
                    SynthFreqLinearityConfigDataParam.ProfileIndex,
                    m_MonSynthFreqLinearityConfigParams.ReportingMode,
                    m_MonSynthFreqLinearityConfigParams.FreqErrorThreshold,
                    (decimal)m_MonSynthFreqLinearityConfigParams.Profile0MonStartTime,
                    (decimal)m_MonSynthFreqLinearityConfigParams.Profile1MonStartTime,
                    (decimal)m_MonSynthFreqLinearityConfigParams.Profile2MonStartTime,
                    (decimal)m_MonSynthFreqLinearityConfigParams.Profile3MonStartTime,
                    m_MonSynthFreqLinearityConfigParams.DataPathParams1L1,
                    m_MonSynthFreqLinearityConfigParams.DataPathParams1L2,
                    m_MonSynthFreqLinearityConfigParams.DataPathParams1N,
                    m_MonSynthFreqLinearityConfigParams.DataPathParams2S1,
                    m_MonSynthFreqLinearityConfigParams.DataPathParams2S2,
                    m_MonSynthFreqLinearityConfigParams.DataPathParams2S,
                    m_MonSynthFreqLinearityConfigParams.Profile0LinearityRAMAddress,
                    m_MonSynthFreqLinearityConfigParams.Profile1LinearityRAMAddress,
                    m_MonSynthFreqLinearityConfigParams.Profile2LinearityRAMAddress,
                    m_MonSynthFreqLinearityConfigParams.Profile3LinearityRAMAddress
                });
                m_GuiManager.RecordLog(15, full_command3);
            }
            num = Imports.RadarLinkImpl_RfSynthLinMonConfig((byte)GlobalRef.g_RadarDeviceId, inData);
            if ((num == 0 && ((GlobalRef.g_CasCadeDeviceSpiConnect & 1U) == 1U || (GlobalRef.g_CasCadeDeviceSpiConnect & 2U) == 2U || (GlobalRef.g_CasCadeDeviceSpiConnect & 4U) == 4U || (GlobalRef.g_CasCadeDeviceSpiConnect & 8U) == 8U)) || GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
            {
                string full_command4 = string.Format("Status: Passed", new object[0]);
                m_GuiManager.RecordLog(8, full_command4);
            }
            else
            {
                string msg = string.Format("Status: Failed, Error Type: {0}", new object[]
                {
                    GetErrorType(num)
                });
                GlobalRef.LuaWrapper.PrintError(msg);
            }
            if (GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
            {
                if (iRs232ConnectDisconnect_impl() == 0 && !GlobalRef.g_NtvRS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
                {
                    m_GuiManager.DllOps.iConnect(1U, 0U);
                    string full_command5 = string.Format("Debug Port Reconnected!", new object[0]);
                    m_GuiManager.RecordLog(9, full_command5);
                    ScriptOps.KeepTrying(2000, new Func<bool>(spare_read));
                }
            }
            else if (GlobalRef.g_CasCadeDeviceSpiConnect == 0U)
            {
                string full_command6 = string.Format("Error Occurred in Port open close", new object[0]);
                m_GuiManager.RecordLog(9, full_command6);
            }
            return num;
        }

        private int iSetTempertureSensorTempConfig_Impl(bool is_starting_op, bool is_ending_op)
        {
            TempSensorDataParam.TrimTemp1 = m_TemperatrueSensorTempDataConfigParams.TrimTemp1;
            TempSensorDataParam.TrimTemp2 = m_TemperatrueSensorTempDataConfigParams.TrimTemp2;
            TempSensorDataParam.TrimCodeRx1 = m_TemperatrueSensorTempDataConfigParams.TrimCodeRx1;
            TempSensorDataParam.TrimCodeTx1 = m_TemperatrueSensorTempDataConfigParams.TrimCodeTx1;
            TempSensorDataParam.TrimCodePm1 = m_TemperatrueSensorTempDataConfigParams.TrimCodePm1;
            TempSensorDataParam.TrimCodeDig1 = m_TemperatrueSensorTempDataConfigParams.TrimCodeDig1;
            TempSensorDataParam.TrimCodeRx2 = m_TemperatrueSensorTempDataConfigParams.TrimCodeRx2;
            TempSensorDataParam.TrimCodeTx2 = m_TemperatrueSensorTempDataConfigParams.TrimCodeTx2;
            TempSensorDataParam.TrimCodePm2 = m_TemperatrueSensorTempDataConfigParams.TrimCodePm2;
            TempSensorDataParam.TrimCodeDig2 = m_TemperatrueSensorTempDataConfigParams.TrimCodeDig2;
            IntPtr data = GCHandle.Alloc(TempSensorDataParam, GCHandleType.Pinned).AddrOfPinnedObject();
            int num;
            if (GlobalRef.g_NtvRS232Connect[(int)GlobalRef.g_RadarDeviceIndex] && GlobalRef.g_CasCadeDeviceSpiConnect == 0U)
            {
                num = m_TsWrapper.Calling_WriteAddr_Single(4294959848U, 1U);
                if (m_GuiManager.DllOps.itempDisconnect(false) == 0)
                {
                    string full_command = string.Format("Debug Port Disconnected", new object[0]);
                    m_GuiManager.RecordLog(0, full_command);
                    if (!GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
                    {
                        iRs232ConnectDisconnect_impl();
                    }
                }
            }
            Thread.Sleep(200);
            if (m_RadarDeviceModeConfigParams.NumberOfRadarDevicesDetected <= 1)
            {
                string full_command2 = string.Format("ar1.SetTempSensTrimConfig({0}, {1}, {2}, {3}, {4}, {5}, {6}, {7}, {8}, {9})", new object[]
                {
                    TempSensorDataParam.TrimTemp1,
                    TempSensorDataParam.TrimTemp2,
                    TempSensorDataParam.TrimCodeRx1,
                    TempSensorDataParam.TrimCodeTx1,
                    TempSensorDataParam.TrimCodePm1,
                    TempSensorDataParam.TrimCodeDig1,
                    TempSensorDataParam.TrimCodeRx2,
                    TempSensorDataParam.TrimCodeTx2,
                    TempSensorDataParam.TrimCodePm2,
                    TempSensorDataParam.TrimCodeDig2
                });
                m_GuiManager.RecordLog(15, full_command2);
            }
            else
            {
                string full_command3 = string.Format("ar1.SetTempSensTrimConfig_mult({0}, {1}, {2}, {3}, {4}, {5}, {6}, {7}, {8}, {9},{10})", new object[]
                {
                    GlobalRef.g_RadarDeviceId,
                    TempSensorDataParam.TrimTemp1,
                    TempSensorDataParam.TrimTemp2,
                    TempSensorDataParam.TrimCodeRx1,
                    TempSensorDataParam.TrimCodeTx1,
                    TempSensorDataParam.TrimCodePm1,
                    TempSensorDataParam.TrimCodeDig1,
                    TempSensorDataParam.TrimCodeRx2,
                    TempSensorDataParam.TrimCodeTx2,
                    TempSensorDataParam.TrimCodePm2,
                    TempSensorDataParam.TrimCodeDig2
                });
                m_GuiManager.RecordLog(15, full_command3);
            }
            num = Imports.RadarLinkImpl_RfSetTempSensTrimCfg(GlobalRef.g_RadarDeviceId, data);
            if ((num == 0 && ((GlobalRef.g_CasCadeDeviceSpiConnect & 1U) == 1U || (GlobalRef.g_CasCadeDeviceSpiConnect & 2U) == 2U || (GlobalRef.g_CasCadeDeviceSpiConnect & 4U) == 4U || (GlobalRef.g_CasCadeDeviceSpiConnect & 8U) == 8U)) || GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
            {
                string full_command4 = string.Format("Status: Passed", new object[0]);
                m_GuiManager.RecordLog(8, full_command4);
            }
            else
            {
                string msg = string.Format("Status: Failed, Error Type: {0}", new object[]
                {
                    GetErrorType(num)
                });
                GlobalRef.LuaWrapper.PrintError(msg);
            }
            if (GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
            {
                if (iRs232ConnectDisconnect_impl() == 0 && !GlobalRef.g_NtvRS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
                {
                    m_GuiManager.DllOps.iConnect(1U, 0U);
                    string full_command5 = string.Format("Debug Port Reconnected!", new object[0]);
                    m_GuiManager.RecordLog(9, full_command5);
                    ScriptOps.KeepTrying(2000, new Func<bool>(spare_read));
                }
            }
            else if (GlobalRef.g_CasCadeDeviceSpiConnect == 0U)
            {
                string full_command6 = string.Format("Error Occurred in Port open close", new object[0]);
                m_GuiManager.RecordLog(9, full_command6);
            }
            return num;
        }

        public int iReadTemperatureSensorData_Impl(bool is_starting_op, bool is_ending_op)
        {
            byte[] array = new byte[4];
            IntPtr msbData = GCHandle.Alloc(array, GCHandleType.Pinned).AddrOfPinnedObject();
            byte[] array2 = new byte[4];
            IntPtr lsbData = GCHandle.Alloc(array2, GCHandleType.Pinned).AddrOfPinnedObject();
            GCHandle.Alloc(new byte[4], GCHandleType.Pinned).AddrOfPinnedObject();
            GCHandle.Alloc(new byte[4], GCHandleType.Pinned).AddrOfPinnedObject();
            GCHandle.Alloc(new byte[4], GCHandleType.Pinned).AddrOfPinnedObject();
            GCHandle.Alloc(new byte[4], GCHandleType.Pinned).AddrOfPinnedObject();
            GCHandle.Alloc(new byte[4], GCHandleType.Pinned).AddrOfPinnedObject();
            GCHandle.Alloc(new byte[4], GCHandleType.Pinned).AddrOfPinnedObject();
            int datasize = 2;
            string empty = string.Empty;
            string text = string.Empty;
            string text2 = string.Empty;
            string empty2 = string.Empty;
            string empty3 = string.Empty;
            int num;
            if (GlobalRef.g_I2COpenCloseHandler == 0U)
            {
                num = Imports.RadarLinkImpl_OpenI2cIrqIf(1U);
            }
            array[0] = 0;
            array[1] = 0;
            array[2] = 0;
            array[3] = 0;
            array2[0] = 0;
            array2[1] = 0;
            array2[2] = 0;
            array2[3] = 0;
            Thread.Sleep(500);
            string full_command = string.Format("ar1.GetTemperatureSensorData()", new object[0]);
            m_GuiManager.RecordLog(8, full_command);
            num = Imports.RadarLinkImpl_I2CRead(1U, 'H', '\0', msbData, lsbData, datasize);
            if (num == 0)
            {
                string full_command2 = string.Format("Status: Passed", new object[0]);
                m_GuiManager.RecordLog(8, full_command2);
            }
            else
            {
                string msg = string.Format("Status: Failed, Error Type: {0}", new object[]
                {
                    GetErrorType(num)
                });
                GlobalRef.LuaWrapper.PrintError(msg);
            }
            text = Convert.ToString(TemperatureConversion(array[0], array2[0]));
            if (text.Contains("."))
            {
                ScriptOps.m_MainForm.ConnectTab.DispalyTopNearRx1TempSensValueinGUI(Convert.ToString(text) + " °C");
            }
            else
            {
                text += ".00";
                ScriptOps.m_MainForm.ConnectTab.DispalyTopNearRx1TempSensValueinGUI(Convert.ToString(text) + " °C");
            }
            array[0] = 0;
            array[1] = 0;
            array[2] = 0;
            array[3] = 0;
            array2[0] = 0;
            array2[1] = 0;
            array2[2] = 0;
            array2[3] = 0;
            num = Imports.RadarLinkImpl_I2CRead(1U, 'I', '\0', msbData, lsbData, datasize);
            if (num == 0)
            {
                string full_command3 = string.Format("Status: Passed", new object[0]);
                m_GuiManager.RecordLog(8, full_command3);
            }
            else
            {
                string msg2 = string.Format("Status: Failed, Error Type: {0}", new object[]
                {
                    GetErrorType(num)
                });
                GlobalRef.LuaWrapper.PrintError(msg2);
            }
            text2 = Convert.ToString(TemperatureConversion(array[0], array2[0]));
            if (text2.Contains("."))
            {
                ScriptOps.m_MainForm.ConnectTab.DispalyBottomNearTx2TempSensValueinGUI(Convert.ToString(text2) + " °C");
            }
            else
            {
                text2 += ".00";
                ScriptOps.m_MainForm.ConnectTab.DispalyBottomNearTx2TempSensValueinGUI(Convert.ToString(text2) + " °C");
            }
            if (GlobalRef.g_I2COpenCloseHandler == 0U)
            {
                num = Imports.RadarLinkImpl_CloseI2cIrqIf(1U);
            }
            return num;
        }

        public double TemperatureConversion(byte MSB, byte LSB)
        {
            int num = 2048;
            uint num2 = 2047;
            ushort num3 = (ushort)((int)MSB << 4 | LSB >> 4);
            ushort num4 = (ushort)((int)num3 & num);
            num3 = (ushort)((uint)num3 & num2);
            double value;
            if (num4 == 0)
            {
                value = (double)num3 * 0.0625;
            }
            else
            {
                num3 = (ushort)(((uint)~num3 + 1U) & num2);
                value = (double)num3 * 0.0625 * -1.0;
            }
            return Math.Round(value, 1);
        }

        public int iReadTemperatureSensorDataFromLua_Impl(out double TopnearRX1, out double BottomnearTX2)
        {
            TopnearRX1 = 0.0;
            BottomnearTX2 = 0.0;
            byte[] array = new byte[4];
            IntPtr msbData = GCHandle.Alloc(array, GCHandleType.Pinned).AddrOfPinnedObject();
            byte[] array2 = new byte[4];
            IntPtr lsbData = GCHandle.Alloc(array2, GCHandleType.Pinned).AddrOfPinnedObject();
            GCHandle.Alloc(new byte[4], GCHandleType.Pinned).AddrOfPinnedObject();
            GCHandle.Alloc(new byte[4], GCHandleType.Pinned).AddrOfPinnedObject();
            GCHandle.Alloc(new byte[4], GCHandleType.Pinned).AddrOfPinnedObject();
            GCHandle.Alloc(new byte[4], GCHandleType.Pinned).AddrOfPinnedObject();
            GCHandle.Alloc(new byte[4], GCHandleType.Pinned).AddrOfPinnedObject();
            GCHandle.Alloc(new byte[4], GCHandleType.Pinned).AddrOfPinnedObject();
            int datasize = 2;
            string empty = string.Empty;
            string empty2 = string.Empty;
            string empty3 = string.Empty;
            string empty4 = string.Empty;
            string empty5 = string.Empty;
            int num;
            if (GlobalRef.g_I2COpenCloseHandler == 0U)
            {
                num = Imports.RadarLinkImpl_OpenI2cIrqIf(1U);
            }
            array[0] = 0;
            array[1] = 0;
            array[2] = 0;
            array[3] = 0;
            array2[0] = 0;
            array2[1] = 0;
            array2[2] = 0;
            array2[3] = 0;
            Thread.Sleep(200);
            string full_command = string.Format("ar1.GetTemperatureSensorData()", new object[0]);
            m_GuiManager.RecordLog(8, full_command);
            num = Imports.RadarLinkImpl_I2CRead(1U, 'H', '\0', msbData, lsbData, datasize);
            if (num == 0)
            {
                string full_command2 = string.Format("Status: Passed", new object[0]);
                m_GuiManager.RecordLog(8, full_command2);
            }
            else
            {
                string msg = string.Format("Status: Failed, Error Type: {0}", new object[]
                {
                    GetErrorType(num)
                });
                GlobalRef.LuaWrapper.PrintError(msg);
            }
            TopnearRX1 = TemperatureConversion(array[0], array2[0]);
            string text = Convert.ToString(TopnearRX1);
            if (text.Contains("."))
            {
                ScriptOps.m_MainForm.ConnectTab.DispalyTopNearRx1TempSensValueinGUI(Convert.ToString(text) + " °C");
            }
            else
            {
                text += ".00";
                ScriptOps.m_MainForm.ConnectTab.DispalyTopNearRx1TempSensValueinGUI(Convert.ToString(text) + " °C");
            }
            array[0] = 0;
            array[1] = 0;
            array[2] = 0;
            array[3] = 0;
            array2[0] = 0;
            array2[1] = 0;
            array2[2] = 0;
            array2[3] = 0;
            Thread.Sleep(200);
            num = Imports.RadarLinkImpl_I2CRead(1U, 'I', '\0', msbData, lsbData, datasize);
            if (num == 0)
            {
                string full_command3 = string.Format("Status: Passed", new object[0]);
                m_GuiManager.RecordLog(8, full_command3);
            }
            else
            {
                string msg2 = string.Format("Status: Failed, Error Type: {0}", new object[]
                {
                    GetErrorType(num)
                });
                GlobalRef.LuaWrapper.PrintError(msg2);
            }
            BottomnearTX2 = TemperatureConversion(array[0], array2[0]);
            string text2 = Convert.ToString(BottomnearTX2);
            if (text2.Contains("."))
            {
                ScriptOps.m_MainForm.ConnectTab.DispalyBottomNearTx2TempSensValueinGUI(Convert.ToString(text2) + " °C");
            }
            else
            {
                text2 += ".00";
                ScriptOps.m_MainForm.ConnectTab.DispalyBottomNearTx2TempSensValueinGUI(Convert.ToString(text2) + " °C");
            }
            Thread.Sleep(200);
            array[0] = 0;
            array[1] = 0;
            array[2] = 0;
            array[3] = 0;
            array2[0] = 0;
            array2[1] = 0;
            array2[2] = 0;
            array2[3] = 0;
            Thread.Sleep(200);
            array[0] = 0;
            array[1] = 0;
            array[2] = 0;
            array[3] = 0;
            array2[0] = 0;
            array2[1] = 0;
            array2[2] = 0;
            array2[3] = 0;
            if (GlobalRef.g_I2COpenCloseHandler == 0U)
            {
                num = Imports.RadarLinkImpl_CloseI2cIrqIf(1U);
            }
            return num;
        }

        private int iGetPMICBuckVoltageConfig_Impl(bool is_starting_op, bool is_ending_op)
        {
            int num = -1;
            byte[] array = new byte[4];
            IntPtr msbData = GCHandle.Alloc(array, GCHandleType.Pinned).AddrOfPinnedObject();
            IntPtr lsbData = GCHandle.Alloc(new byte[4], GCHandleType.Pinned).AddrOfPinnedObject();
            byte[] array2 = new byte[4];
            IntPtr msbData2 = GCHandle.Alloc(array2, GCHandleType.Pinned).AddrOfPinnedObject();
            IntPtr lsbData2 = GCHandle.Alloc(new byte[4], GCHandleType.Pinned).AddrOfPinnedObject();
            byte[] array3 = new byte[4];
            IntPtr msbData3 = GCHandle.Alloc(array3, GCHandleType.Pinned).AddrOfPinnedObject();
            IntPtr lsbData3 = GCHandle.Alloc(new byte[4], GCHandleType.Pinned).AddrOfPinnedObject();
            byte[] array4 = new byte[4];
            IntPtr msbData4 = GCHandle.Alloc(array4, GCHandleType.Pinned).AddrOfPinnedObject();
            IntPtr lsbData4 = GCHandle.Alloc(new byte[4], GCHandleType.Pinned).AddrOfPinnedObject();
            string text = string.Empty;
            uint num2 = 1U;
            if (GlobalRef.g_I2COpenCloseHandler == 0U)
            {
                num = Imports.RadarLinkImpl_OpenI2cIrqIf(num2);
            }
            Thread.Sleep(200);
            if (f0001fc.f0004ed == 1)
            {
                num = Imports.RadarLinkImpl_I2CRead(num2, '`', '\n', msbData, lsbData, 1);
                if (m_RadarDeviceModeConfigParams.NumberOfRadarDevicesDetected <= 1)
                {
                    string full_command = string.Format("ar1.GetPMICBuck0()", new object[0]);
                    m_GuiManager.RecordLog(15, full_command);
                    ScriptOps.m_MainForm.PMICTab.m000046(Convert.ToString(array[0]));
                    text = Convert.ToString(ScriptOps.m_MainForm.PMICTab.GetPMICBuckVoltageValueFromCode(array[0]));
                    string full_command2 = string.Format("PMIC Buck0 configured voltage is: {0} V", new object[]
                    {
                        text
                    });
                    m_GuiManager.RecordLog(15, full_command2);
                }
                else
                {
                    string full_command3 = string.Format("ar1.GetPMICBuck0_mult({0})", new object[]
                    {
                        num2
                    });
                    m_GuiManager.RecordLog(15, full_command3);
                    ScriptOps.m_MainForm.PMICTab.m000046(Convert.ToString(array[0]));
                    text = Convert.ToString(ScriptOps.m_MainForm.PMICTab.GetPMICBuckVoltageValueFromCode(array[0]));
                    string full_command4 = string.Format("PMIC Buck0 configured voltage is: {0}, {1} V", new object[]
                    {
                        num2,
                        text
                    });
                    m_GuiManager.RecordLog(15, full_command4);
                }
                if (num == 0)
                {
                    string full_command5 = string.Format("Status: Passed", new object[0]);
                    m_GuiManager.RecordLog(8, full_command5);
                }
                else
                {
                    string msg = string.Format("Status: Failed, Error Type: {0}", new object[]
                    {
                        GetErrorType(num)
                    });
                    GlobalRef.LuaWrapper.PrintError(msg);
                }
            }
            if (f0001fc.f0004ee == 1)
            {
                num = Imports.RadarLinkImpl_I2CRead(num2, '`', '\f', msbData2, lsbData2, 1);
                if (m_RadarDeviceModeConfigParams.NumberOfRadarDevicesDetected <= 1)
                {
                    string full_command6 = string.Format("ar1.GetPMICBuck1()", new object[0]);
                    m_GuiManager.RecordLog(15, full_command6);
                    ScriptOps.m_MainForm.PMICTab.m000047(Convert.ToString(array2[0]));
                    text = Convert.ToString(ScriptOps.m_MainForm.PMICTab.GetPMICBuckVoltageValueFromCode(array2[0]));
                    string full_command7 = string.Format("PMIC Buck1 configured voltage is: {0} V", new object[]
                    {
                        text
                    });
                    m_GuiManager.RecordLog(15, full_command7);
                }
                else
                {
                    string full_command8 = string.Format("ar1.GetPMICBuck1_mult({0})", new object[]
                    {
                        num2
                    });
                    m_GuiManager.RecordLog(15, full_command8);
                    ScriptOps.m_MainForm.PMICTab.m000047(Convert.ToString(array2[0]));
                    text = Convert.ToString(ScriptOps.m_MainForm.PMICTab.GetPMICBuckVoltageValueFromCode(array2[0]));
                    string full_command9 = string.Format("PMIC Buck1 configured voltage is: {0}, {1} V", new object[]
                    {
                        num2,
                        text
                    });
                    m_GuiManager.RecordLog(15, full_command9);
                }
                if (num == 0)
                {
                    string full_command10 = string.Format("Status: Passed", new object[0]);
                    m_GuiManager.RecordLog(8, full_command10);
                }
                else
                {
                    string msg2 = string.Format("Status: Failed, Error Type: {0}", new object[]
                    {
                        GetErrorType(num)
                    });
                    GlobalRef.LuaWrapper.PrintError(msg2);
                }
            }
            if (f0001fc.f0004ef == 1)
            {
                num = Imports.RadarLinkImpl_I2CRead(num2, '`', '\u000e', msbData3, lsbData3, 1);
                if (m_RadarDeviceModeConfigParams.NumberOfRadarDevicesDetected <= 1)
                {
                    string full_command11 = string.Format("ar1.GetPMICBuck2()", new object[0]);
                    m_GuiManager.RecordLog(15, full_command11);
                    ScriptOps.m_MainForm.PMICTab.m000048(Convert.ToString(array3[0]));
                    text = Convert.ToString(ScriptOps.m_MainForm.PMICTab.GetPMICBuckVoltageValueFromCode(array3[0]));
                    string full_command12 = string.Format("PMIC Buck2 configured voltage is: {0} V", new object[]
                    {
                        text
                    });
                    m_GuiManager.RecordLog(15, full_command12);
                }
                else
                {
                    string full_command13 = string.Format("ar1.GetPMICBuck2_mult({0})", new object[]
                    {
                        num2
                    });
                    m_GuiManager.RecordLog(15, full_command13);
                    ScriptOps.m_MainForm.PMICTab.m000048(Convert.ToString(array3[0]));
                    text = Convert.ToString(ScriptOps.m_MainForm.PMICTab.GetPMICBuckVoltageValueFromCode(array3[0]));
                    string full_command14 = string.Format("PMIC Buck2 configured voltage is: {0}, {1} V", new object[]
                    {
                        num2,
                        text
                    });
                    m_GuiManager.RecordLog(15, full_command14);
                }
                if (num == 0)
                {
                    string full_command15 = string.Format("Status: Passed", new object[0]);
                    m_GuiManager.RecordLog(8, full_command15);
                }
                else
                {
                    string msg3 = string.Format("Status: Failed, Error Type: {0}", new object[]
                    {
                        GetErrorType(num)
                    });
                    GlobalRef.LuaWrapper.PrintError(msg3);
                }
            }
            if (f0001fc.f0004f0 == 1)
            {
                num = Imports.RadarLinkImpl_I2CRead(num2, '`', '\u0010', msbData4, lsbData4, 1);
                if (m_RadarDeviceModeConfigParams.NumberOfRadarDevicesDetected <= 1)
                {
                    string full_command16 = string.Format("ar1.GetPMICBuck3()", new object[0]);
                    m_GuiManager.RecordLog(15, full_command16);
                    ScriptOps.m_MainForm.PMICTab.m000049(Convert.ToString(array4[0]));
                    text = Convert.ToString(ScriptOps.m_MainForm.PMICTab.GetPMICBuckVoltageValueFromCode(array4[0]));
                    string full_command17 = string.Format("PMIC Buck3 configured voltage is: {0} V", new object[]
                    {
                        text
                    });
                    m_GuiManager.RecordLog(15, full_command17);
                }
                else
                {
                    string full_command18 = string.Format("ar1.GetPMICBuck3_mult({0})", new object[]
                    {
                        num2
                    });
                    m_GuiManager.RecordLog(15, full_command18);
                    ScriptOps.m_MainForm.PMICTab.m000049(Convert.ToString(array4[0]));
                    text = Convert.ToString(ScriptOps.m_MainForm.PMICTab.GetPMICBuckVoltageValueFromCode(array4[0]));
                    string full_command19 = string.Format("PMIC Buck3 configured voltage is: {0},{1} V", new object[]
                    {
                        num2,
                        text
                    });
                    m_GuiManager.RecordLog(15, full_command19);
                }
                if (num == 0)
                {
                    string full_command20 = string.Format("Status: Passed", new object[0]);
                    m_GuiManager.RecordLog(8, full_command20);
                }
                else
                {
                    string msg4 = string.Format("Status: Failed, Error Type: {0}", new object[]
                    {
                        GetErrorType(num)
                    });
                    GlobalRef.LuaWrapper.PrintError(msg4);
                }
            }
            if (GlobalRef.g_I2COpenCloseHandler == 0U)
            {
                num = Imports.RadarLinkImpl_CloseI2cIrqIf(num2);
            }
            return num;
        }

        private int iSetPMICBuckVoltageConfig_Impl(bool is_starting_op, bool is_ending_op)
        {
            int num = -1;
            string text = string.Empty;
            uint num2 = 1U;
            Thread.Sleep(200);
            if (GlobalRef.g_I2COpenCloseHandler == 0U)
            {
                num = Imports.RadarLinkImpl_OpenI2cIrqIf(num2);
            }
            if (f0001fc.f0004f1 == 1)
            {
                ushort slaveAddress = 96;
                ushort regAddress = 10;
                byte msbData = f0001fc.Buck0MsbData;
                byte lsbData = 0;
                int datasize = 1;
                num = Imports.RadarLinkImpl_I2CWrite(num2, (char)slaveAddress, (char)regAddress, msbData, lsbData, datasize);
                text = Convert.ToString(ScriptOps.m_MainForm.PMICTab.GetPMICBuckVoltageValueFromCode(f0001fc.Buck0MsbData));
                if (m_RadarDeviceModeConfigParams.NumberOfRadarDevicesDetected <= 1)
                {
                    string full_command = string.Format("ar1.SetPMICBuck0({0})", new object[]
                    {
                        text
                    });
                    m_GuiManager.RecordLog(15, full_command);
                }
                else
                {
                    string full_command2 = string.Format("ar1.SetPMICBuck0_mult({0},{1})", new object[]
                    {
                        num2,
                        text
                    });
                    m_GuiManager.RecordLog(15, full_command2);
                }
                if (num == 0)
                {
                    string full_command3 = string.Format("Status: Passed", new object[0]);
                    m_GuiManager.RecordLog(8, full_command3);
                }
                else
                {
                    string msg = string.Format("Status: Failed, Error Type: {0}", new object[]
                    {
                        GetErrorType(num)
                    });
                    GlobalRef.LuaWrapper.PrintError(msg);
                }
            }
            Thread.Sleep(200);
            if (f0001fc.f0004f2 == 1)
            {
                ushort slaveAddress = 96;
                ushort regAddress = 12;
                byte msbData = f0001fc.Buck1MsbData;
                byte lsbData = 0;
                int datasize = 1;
                num = Imports.RadarLinkImpl_I2CWrite(num2, (char)slaveAddress, (char)regAddress, msbData, lsbData, datasize);
                text = Convert.ToString(ScriptOps.m_MainForm.PMICTab.GetPMICBuckVoltageValueFromCode(f0001fc.Buck1MsbData));
                if (m_RadarDeviceModeConfigParams.NumberOfRadarDevicesDetected <= 1)
                {
                    string full_command4 = string.Format("ar1.SetPMICBuck1({0})", new object[]
                    {
                        text
                    });
                    m_GuiManager.RecordLog(15, full_command4);
                }
                else
                {
                    string full_command5 = string.Format("ar1.SetPMICBuck1_mult({0},{1})", new object[]
                    {
                        num2,
                        text
                    });
                    m_GuiManager.RecordLog(15, full_command5);
                }
                if (num == 0)
                {
                    string full_command6 = string.Format("Status: Passed", new object[0]);
                    m_GuiManager.RecordLog(8, full_command6);
                }
                else
                {
                    string msg2 = string.Format("Status: Failed, Error Type: {0}", new object[]
                    {
                        GetErrorType(num)
                    });
                    GlobalRef.LuaWrapper.PrintError(msg2);
                }
            }
            Thread.Sleep(200);
            if (f0001fc.f0004f3 == 1)
            {
                ushort slaveAddress = 96;
                ushort regAddress = 14;
                byte msbData = f0001fc.Buck2MsbData;
                byte lsbData = 0;
                int datasize = 1;
                num = Imports.RadarLinkImpl_I2CWrite(num2, (char)slaveAddress, (char)regAddress, msbData, lsbData, datasize);
                text = Convert.ToString(ScriptOps.m_MainForm.PMICTab.GetPMICBuckVoltageValueFromCode(f0001fc.Buck2MsbData));
                if (m_RadarDeviceModeConfigParams.NumberOfRadarDevicesDetected <= 1)
                {
                    string full_command7 = string.Format("ar1.SetPMICBuck2({0})", new object[]
                    {
                        text
                    });
                    m_GuiManager.RecordLog(15, full_command7);
                }
                else
                {
                    string full_command8 = string.Format("ar1.SetPMICBuck2_mult({0},{1})", new object[]
                    {
                        num2,
                        text
                    });
                    m_GuiManager.RecordLog(15, full_command8);
                }
                if (num == 0)
                {
                    string full_command9 = string.Format("Status: Passed", new object[0]);
                    m_GuiManager.RecordLog(8, full_command9);
                }
                else
                {
                    string msg3 = string.Format("Status: Failed, Error Type: {0}", new object[]
                    {
                        GetErrorType(num)
                    });
                    GlobalRef.LuaWrapper.PrintError(msg3);
                }
            }
            Thread.Sleep(200);
            if (f0001fc.f0004f4 == 1)
            {
                ushort slaveAddress = 96;
                ushort regAddress = 16;
                byte msbData = f0001fc.Buck3MsbData;
                byte lsbData = 0;
                int datasize = 1;
                num = Imports.RadarLinkImpl_I2CWrite(num2, (char)slaveAddress, (char)regAddress, msbData, lsbData, datasize);
                text = Convert.ToString(ScriptOps.m_MainForm.PMICTab.GetPMICBuckVoltageValueFromCode(f0001fc.Buck3MsbData));
                if (m_RadarDeviceModeConfigParams.NumberOfRadarDevicesDetected <= 1)
                {
                    string full_command10 = string.Format("ar1.SetPMICBuck3({0})", new object[]
                    {
                        text
                    });
                    m_GuiManager.RecordLog(15, full_command10);
                }
                else
                {
                    string full_command11 = string.Format("ar1.SetPMICBuck3_mult({0},{1})", new object[]
                    {
                        num2,
                        text
                    });
                    m_GuiManager.RecordLog(15, full_command11);
                }
                if (num == 0)
                {
                    string full_command12 = string.Format("Status: Passed", new object[0]);
                    m_GuiManager.RecordLog(8, full_command12);
                }
                else
                {
                    string msg4 = string.Format("Status: Failed, Error Type: {0}", new object[]
                    {
                        GetErrorType(num)
                    });
                    GlobalRef.LuaWrapper.PrintError(msg4);
                }
            }
            if (GlobalRef.g_I2COpenCloseHandler == 0U)
            {
                num = Imports.RadarLinkImpl_CloseI2cIrqIf(num2);
            }
            return num;
        }

        private int iSetMultiplePMICDevicesConfig_Impl(bool is_starting_op, bool is_ending_op)
        {
            int num = -1;
            string empty = string.Empty;
            Thread.Sleep(200);
            if (f0001fc.PMIC1 == 1)
            {
                uint num2 = 1U;
                if (m_RadarDeviceModeConfigParams.NumberOfRadarDevicesDetected <= 1)
                {
                    string full_command = string.Format("ar1.SelectPMICDevice({0})", new object[]
                    {
                        num2
                    });
                    m_GuiManager.RecordLog(15, full_command);
                }
                else
                {
                    string full_command2 = string.Format("ar1.SelectPMICDevice({0})", new object[]
                    {
                        num2
                    });
                    m_GuiManager.RecordLog(15, full_command2);
                }
                if (num == 0)
                {
                    string full_command3 = string.Format("Status: Passed", new object[0]);
                    m_GuiManager.RecordLog(8, full_command3);
                }
                else
                {
                    string full_command4 = string.Format("Status: Failed, Error Type: {0}", new object[]
                    {
                        GetErrorType(num)
                    });
                    m_GuiManager.RecordLog(8, full_command4);
                }
            }
            Thread.Sleep(200);
            if (f0001fc.PMIC2 == 1)
            {
                byte buck1MsbData = f0001fc.Buck1MsbData;
                uint num3 = 2U;
                if (m_RadarDeviceModeConfigParams.NumberOfRadarDevicesDetected <= 1)
                {
                    string full_command5 = string.Format("ar1.SelectPMICDevice({0})", new object[]
                    {
                        num3
                    });
                    m_GuiManager.RecordLog(15, full_command5);
                }
                else
                {
                    string full_command6 = string.Format("ar1.SelectPMICDevice({0})", new object[]
                    {
                        num3
                    });
                    m_GuiManager.RecordLog(15, full_command6);
                }
                if (num == 0)
                {
                    string full_command7 = string.Format("Status: Passed", new object[0]);
                    m_GuiManager.RecordLog(8, full_command7);
                }
                else
                {
                    string full_command8 = string.Format("Status: Failed, Error Type: {0}", new object[]
                    {
                        GetErrorType(num)
                    });
                    m_GuiManager.RecordLog(8, full_command8);
                }
            }
            return num;
        }

        private int iSetPMICRegConfig_Impl(bool is_starting_op, bool is_ending_op)
        {
            uint g_RadarDeviceId = GlobalRef.g_RadarDeviceId;
            Thread.Sleep(200);
            int num;
            if (GlobalRef.g_I2COpenCloseHandler == 0U)
            {
                num = Imports.RadarLinkImpl_OpenI2cIrqIf(g_RadarDeviceId);
            }
            Thread.Sleep(200);
            num = Imports.RadarLinkImpl_I2CWrite(g_RadarDeviceId, (char)m_SetPMICRegConfigParams.SlaveAddress, (char)m_SetPMICRegConfigParams.RegAddress, m_SetPMICRegConfigParams.RegMsbData, m_SetPMICRegConfigParams.RegLsbData, m_SetPMICRegConfigParams.DataSize);
            if (m_RadarDeviceModeConfigParams.NumberOfRadarDevicesDetected <= 1)
            {
                string full_command = string.Format("ar1.SetPMICRegConfig(0x{0:X}, 0x{1:X}, 0x{2:X}, 0x{3:X}, 0x{4:X})", new object[]
                {
                    m_SetPMICRegConfigParams.SlaveAddress,
                    m_SetPMICRegConfigParams.RegAddress,
                    m_SetPMICRegConfigParams.RegMsbData,
                    m_SetPMICRegConfigParams.RegLsbData,
                    m_SetPMICRegConfigParams.DataSize
                });
                m_GuiManager.RecordLog(15, full_command);
            }
            else
            {
                string full_command2 = string.Format("ar1.SetPMICRegConfig_mult(0x{0:X}, 0x{1:X}, 0x{2:X}, 0x{3:X}, 0x{4:X}, 0x{5:X})", new object[]
                {
                    GlobalRef.g_RadarDeviceId,
                    m_SetPMICRegConfigParams.SlaveAddress,
                    m_SetPMICRegConfigParams.RegAddress,
                    m_SetPMICRegConfigParams.RegMsbData,
                    m_SetPMICRegConfigParams.RegLsbData,
                    m_SetPMICRegConfigParams.DataSize
                });
                m_GuiManager.RecordLog(15, full_command2);
            }
            if (num == 0)
            {
                string full_command3 = string.Format("Status: Passed", new object[0]);
                m_GuiManager.RecordLog(8, full_command3);
            }
            else
            {
                string msg = string.Format("Status: Failed, Error Type: {0}", new object[]
                {
                    GetErrorType(num)
                });
                GlobalRef.LuaWrapper.PrintError(msg);
            }
            Thread.Sleep(200);
            if (GlobalRef.g_I2COpenCloseHandler == 0U)
            {
                num = Imports.RadarLinkImpl_CloseI2cIrqIf(g_RadarDeviceId);
            }
            return num;
        }

        private int iGetPMICRegConfig_Impl(bool is_starting_op, bool is_ending_op)
        {
            byte[] array = new byte[4];
            IntPtr msbData = GCHandle.Alloc(array, GCHandleType.Pinned).AddrOfPinnedObject();
            byte[] array2 = new byte[4];
            IntPtr lsbData = GCHandle.Alloc(array2, GCHandleType.Pinned).AddrOfPinnedObject();
            uint g_RadarDeviceId = GlobalRef.g_RadarDeviceId;
            Thread.Sleep(200);
            int num;
            if (GlobalRef.g_I2COpenCloseHandler == 0U)
            {
                num = Imports.RadarLinkImpl_OpenI2cIrqIf(g_RadarDeviceId);
            }
            Thread.Sleep(200);
            num = Imports.RadarLinkImpl_I2CRead(g_RadarDeviceId, (char)m_GetPMICRegConfigParams.SlaveAddress, (char)m_GetPMICRegConfigParams.RegAddress, msbData, lsbData, m_GetPMICRegConfigParams.DataSize);
            Thread.Sleep(200);
            if (m_RadarDeviceModeConfigParams.NumberOfRadarDevicesDetected <= 1)
            {
                string full_command = string.Format("ar1.GetPMICRegConfig(0x{0:X}, 0x{1:X}, 0x{2:X})", new object[]
                {
                    m_GetPMICRegConfigParams.SlaveAddress,
                    m_GetPMICRegConfigParams.RegAddress,
                    m_GetPMICRegConfigParams.DataSize
                });
                m_GuiManager.RecordLog(15, full_command);
                ScriptOps.m_MainForm.PMICTab.m000058(array[0].ToString("X"));
                ScriptOps.m_MainForm.PMICTab.m000059(array2[0].ToString("X"));
            }
            else
            {
                string full_command2 = string.Format("ar1.GetPMICRegConfig_mult(0x{0:X}, 0x{1:X}, 0x{2:X}, 0x{3:X})", new object[]
                {
                    GlobalRef.g_RadarDeviceId,
                    m_GetPMICRegConfigParams.SlaveAddress,
                    m_GetPMICRegConfigParams.RegAddress,
                    m_GetPMICRegConfigParams.DataSize
                });
                m_GuiManager.RecordLog(15, full_command2);
                ScriptOps.m_MainForm.PMICTab.m000058(array[0].ToString("X"));
                ScriptOps.m_MainForm.PMICTab.m000059(array2[0].ToString("X"));
            }
            if (num == 0)
            {
                string full_command3 = string.Format("Status: Passed", new object[0]);
                m_GuiManager.RecordLog(8, full_command3);
            }
            else
            {
                string msg = string.Format("Status: Failed, Error Type: {0}", new object[]
                {
                    GetErrorType(num)
                });
                GlobalRef.LuaWrapper.PrintError(msg);
            }
            Thread.Sleep(200);
            if (GlobalRef.g_I2COpenCloseHandler == 0U)
            {
                num = Imports.RadarLinkImpl_CloseI2cIrqIf(g_RadarDeviceId);
            }
            return num;
        }

        private int iCreateAdvanceFrameConfig_Impl(bool is_starting_op, bool is_ending_op)
        {
            int num = -1;
            ushort testSourceEnable = m_AdvancedFrameConfigParams.testSourceEnable;
            ushort num2 = 0;
            ushort num3 = 1;
            ushort num4 = 1;
            ushort num5 = 0;
            if (CalculateBurstPeriodicityForAdvFrame() == -1)
            {
                return num;
            }
            AdvSubFrameConfigAndDataParam.NumOfSubFrames = m_AdvancedFrameConfigParams.NumOfSubFrames;
            AdvSubFrameConfigAndDataParam.ForceProfile = m_AdvancedFrameConfigParams.ForceProfile;
            AdvSubFrameConfigAndDataParam.LoopBackCfg = (byte)((int)m_AdvancedFrameConfigParams.LoopBackCfg | (int)m_AdvancedFrameConfigParams.SubFrameId << 1);
            byte b = (byte)((int)m_AdvancedFrameConfigParams.LoopBackCfg | (int)m_AdvancedFrameConfigParams.SubFrameId << 1);
            AdvSubFrameConfigAndDataParam.SWSubFrameTriggerMode = m_AdvancedFrameConfigParams.SWSubFrameTriggerMode;
            AdvSubFrameConfigAndDataParam.ForceProfileIdx = m_AdvancedFrameConfigParams.ForceProfileIdx;
            AdvSubFrameConfigAndDataParam.ChirpStartIdx = m_AdvancedFrameConfigParams.ChirpStartIdx;
            AdvSubFrameConfigAndDataParam.NumOfChirps = m_AdvancedFrameConfigParams.NumOfChirps;
            AdvSubFrameConfigAndDataParam.NumOfLoops = m_AdvancedFrameConfigParams.NumOfLoops;
            AdvSubFrameConfigAndDataParam.BurstPeriodicity = (uint)Math.Round((double)(m_AdvancedFrameConfigParams.BurstPeriodicity * 200000f));
            AdvSubFrameConfigAndDataParam.ChirpStartIdxOffset = m_AdvancedFrameConfigParams.ChirpStartIdxOffset;
            AdvSubFrameConfigAndDataParam.NumOfBrust = m_AdvancedFrameConfigParams.NumOfBrust;
            AdvSubFrameConfigAndDataParam.NumOfBrustLoops = m_AdvancedFrameConfigParams.NumOfBrustLoops;
            AdvSubFrameConfigAndDataParam.SubFrame1Reserved1 = 0;
            AdvSubFrameConfigAndDataParam.SubFramePeriodicity = (uint)Math.Round((double)(m_AdvancedFrameConfigParams.SubFramePeriodicity * 200000f));
            AdvSubFrameConfigAndDataParam.SubFrame1Reserved2 = 0U;
            AdvSubFrameConfigAndDataParam.SubFrame1Reserved3 = 0U;
            AdvSubFrameConfigAndDataParam.ForceProfileIdx2 = m_AdvancedFrameConfigParams.ForceProfileIdx2;
            AdvSubFrameConfigAndDataParam.ChirpStartIdx2 = m_AdvancedFrameConfigParams.ChirpStartIdx2;
            AdvSubFrameConfigAndDataParam.NumOfChirps2 = m_AdvancedFrameConfigParams.NumOfChirps2;
            AdvSubFrameConfigAndDataParam.NumOfLoops2 = m_AdvancedFrameConfigParams.NumOfLoops2;
            AdvSubFrameConfigAndDataParam.BurstPeriodicity2 = (uint)Math.Round((double)(m_AdvancedFrameConfigParams.BurstPeriodicity2 * 200000f));
            AdvSubFrameConfigAndDataParam.ChirpStartIdxOffset2 = m_AdvancedFrameConfigParams.ChirpStartIdxOffset2;
            AdvSubFrameConfigAndDataParam.NumOfBrust2 = m_AdvancedFrameConfigParams.NumOfBrust2;
            AdvSubFrameConfigAndDataParam.NumOfBrustLoops2 = m_AdvancedFrameConfigParams.NumOfBrustLoops2;
            AdvSubFrameConfigAndDataParam.SubFrame2Reserved1 = 0;
            AdvSubFrameConfigAndDataParam.SubFramePeriodicity2 = (uint)Math.Round((double)(m_AdvancedFrameConfigParams.SubFramePeriodicity2 * 2f * 100000f));
            AdvSubFrameConfigAndDataParam.SubFrame2Reserved2 = 0U;
            AdvSubFrameConfigAndDataParam.SubFrame2Reserved3 = 0U;
            AdvSubFrameConfigAndDataParam.ForceProfileIdx3 = m_AdvancedFrameConfigParams.ForceProfileIdx3;
            AdvSubFrameConfigAndDataParam.ChirpStartIdx3 = m_AdvancedFrameConfigParams.ChirpStartIdx3;
            AdvSubFrameConfigAndDataParam.NumOfChirps3 = m_AdvancedFrameConfigParams.NumOfChirps3;
            AdvSubFrameConfigAndDataParam.NumOfLoops3 = m_AdvancedFrameConfigParams.NumOfLoops3;
            AdvSubFrameConfigAndDataParam.BurstPeriodicity3 = (uint)Math.Round((double)(m_AdvancedFrameConfigParams.BurstPeriodicity3 * 200000f));
            AdvSubFrameConfigAndDataParam.ChirpStartIdxOffset3 = m_AdvancedFrameConfigParams.ChirpStartIdxOffset3;
            AdvSubFrameConfigAndDataParam.NumOfBrust3 = m_AdvancedFrameConfigParams.NumOfBrust3;
            AdvSubFrameConfigAndDataParam.NumOfBrustLoops3 = m_AdvancedFrameConfigParams.NumOfBrustLoops3;
            AdvSubFrameConfigAndDataParam.SubFrame3Reserved1 = 0;
            AdvSubFrameConfigAndDataParam.SubFramePeriodicity3 = (uint)Math.Round((double)(m_AdvancedFrameConfigParams.SubFramePeriodicity3 * 200000f));
            AdvSubFrameConfigAndDataParam.SubFrame3Reserved2 = 0U;
            AdvSubFrameConfigAndDataParam.SubFrame3Reserved3 = 0U;
            AdvSubFrameConfigAndDataParam.ForceProfileIdx4 = m_AdvancedFrameConfigParams.ForceProfileIdx4;
            AdvSubFrameConfigAndDataParam.ChirpStartIdx4 = m_AdvancedFrameConfigParams.ChirpStartIdx4;
            AdvSubFrameConfigAndDataParam.NumOfChirps4 = m_AdvancedFrameConfigParams.NumOfChirps4;
            AdvSubFrameConfigAndDataParam.NumOfLoops4 = m_AdvancedFrameConfigParams.NumOfLoops4;
            AdvSubFrameConfigAndDataParam.BurstPeriodicity4 = (uint)Math.Round((double)(m_AdvancedFrameConfigParams.BurstPeriodicity4 * 200000f));
            AdvSubFrameConfigAndDataParam.ChirpStartIdxOffset4 = m_AdvancedFrameConfigParams.ChirpStartIdxOffset4;
            AdvSubFrameConfigAndDataParam.NumOfBrust4 = m_AdvancedFrameConfigParams.NumOfBrust4;
            AdvSubFrameConfigAndDataParam.NumOfBrustLoops4 = m_AdvancedFrameConfigParams.NumOfBrustLoops4;
            AdvSubFrameConfigAndDataParam.SubFrame4Reserved1 = 0;
            AdvSubFrameConfigAndDataParam.SubFramePeriodicity4 = (uint)Math.Round((double)(m_AdvancedFrameConfigParams.SubFramePeriodicity4 * 200000f));
            AdvSubFrameConfigAndDataParam.SubFrame4Reserved2 = 0U;
            AdvSubFrameConfigAndDataParam.SubFrame4Reserved3 = 0U;
            AdvSubFrameConfigAndDataParam.NumOfFrames = m_AdvancedFrameConfigParams.NumOfFrames;
            AdvSubFrameConfigAndDataParam.TriggerSelect = m_AdvancedFrameConfigParams.TriggerSelect;
            AdvSubFrameConfigAndDataParam.FrameTrigDelay = (uint)(m_AdvancedFrameConfigParams.FrameTrigDelay * 200f);
            AdvSubFrameConfigAndDataParam.SubFrameSeqCfgReserved1 = 0U;
            AdvSubFrameConfigAndDataParam.SubFrameSeqCfgReserved2 = 0U;
            AdvSubFrameConfigAndDataParam.NumOfCloneSubFrames = m_AdvancedFrameConfigParams.NumOfSubFrames;
            AdvSubFrameConfigAndDataParam.AdvFrameDataReserved1 = 0;
            AdvSubFrameConfigAndDataParam.AdvFrameDataReserved2 = 0;
            AdvSubFrameConfigAndDataParam.TotalChirps = (uint)(m_AdvancedFrameConfigParams.NumOfLoops * m_AdvancedFrameConfigParams.NumOfBrust * m_AdvancedFrameConfigParams.NumOfBrustLoops * m_AdvancedFrameConfigParams.NumOfChirps);
            AdvSubFrameConfigAndDataParam.NumOfAdcSamples = m_AdvancedFrameConfigParams.NumOfAdcSamples;
            AdvSubFrameConfigAndDataParam.NumOfChirpsInDataPacket = 1;
            AdvSubFrameConfigAndDataParam.AdvSubFrame1DataReserved1 = 0;
            AdvSubFrameConfigAndDataParam.TotalChirps2 = (uint)(m_AdvancedFrameConfigParams.NumOfLoops2 * m_AdvancedFrameConfigParams.NumOfBrust2 * m_AdvancedFrameConfigParams.NumOfBrustLoops2 * m_AdvancedFrameConfigParams.NumOfChirps2);
            AdvSubFrameConfigAndDataParam.NumOfAdcSamples2 = m_AdvancedFrameConfigParams.NumOfAdcSamples2;
            AdvSubFrameConfigAndDataParam.NumOfChirpsInDataPacket2 = 1;
            AdvSubFrameConfigAndDataParam.AdvSubFrame2DataReserved2 = 0;
            AdvSubFrameConfigAndDataParam.TotalChirps3 = (uint)(m_AdvancedFrameConfigParams.NumOfLoops3 * m_AdvancedFrameConfigParams.NumOfBrust3 * m_AdvancedFrameConfigParams.NumOfBrustLoops3 * m_AdvancedFrameConfigParams.NumOfChirps3);
            AdvSubFrameConfigAndDataParam.NumOfAdcSamples3 = m_AdvancedFrameConfigParams.NumOfAdcSamples3;
            AdvSubFrameConfigAndDataParam.NumOfChirpsInDataPacket3 = 1;
            AdvSubFrameConfigAndDataParam.AdvSubFrame3DataReserved3 = 0;
            AdvSubFrameConfigAndDataParam.TotalChirps4 = (uint)(m_AdvancedFrameConfigParams.NumOfLoops4 * m_AdvancedFrameConfigParams.NumOfBrust4 * m_AdvancedFrameConfigParams.NumOfBrustLoops4 * m_AdvancedFrameConfigParams.NumOfChirps4);
            AdvSubFrameConfigAndDataParam.NumOfAdcSamples4 = m_AdvancedFrameConfigParams.NumOfAdcSamples4;
            AdvSubFrameConfigAndDataParam.NumOfChirpsInDataPacket4 = 1;
            AdvSubFrameConfigAndDataParam.AdvSubFrame4DataReserved4 = 0;
            if (m_AdvancedFrameConfigParams.ForceProfile == 0)
            {
                FindADCSamplesForAdvancedFrameConfig();
                if (m_AdvancedFrameConfigParams.NumOfSubFrames == 1)
                {
                    if (FindADCSamplesToAdvSubFrameFromProfileData(m_AdvancedFrameConfigParams.ChirpStartIdx, m_AdvancedFrameConfigParams.NumOfChirps) == 1U)
                    {
                        MessageBox.Show(" Mismatch of ADC samples across chirps in Subframe1 configuration !", "Error", MessageBoxButtons.OK, MessageBoxIcon.Hand);
                        return num;
                    }
                    if (m_StaticParams.FmtVal == 0 || m_StaticParams.FmtVal == 3)
                    {
                        AdvSubFrameConfigAndDataParam.NumOfAdcSamples = ScriptOps.ProfileConfigDataParam[(int)ScriptOps.ChirpConfigDataParam[(int)m_AdvancedFrameConfigParams.ChirpStartIdx].profileId].pnumAdcSamples;
                    }
                    else
                    {
                        AdvSubFrameConfigAndDataParam.NumOfAdcSamples = (ushort)(ScriptOps.ProfileConfigDataParam[(int)ScriptOps.ChirpConfigDataParam[(int)m_AdvancedFrameConfigParams.ChirpStartIdx].profileId].pnumAdcSamples * 2);
                    }
                }
                else if (m_AdvancedFrameConfigParams.NumOfSubFrames == 2)
                {
                    if (FindADCSamplesToAdvSubFrameFromProfileData(m_AdvancedFrameConfigParams.ChirpStartIdx, m_AdvancedFrameConfigParams.NumOfChirps) == 1U)
                    {
                        MessageBox.Show(" Mismatch of ADC samples across chirps in Subframe1 configuration!", "Error", MessageBoxButtons.OK, MessageBoxIcon.Hand);
                        return num;
                    }
                    if (m_StaticParams.FmtVal == 0 || m_StaticParams.FmtVal == 3)
                    {
                        AdvSubFrameConfigAndDataParam.NumOfAdcSamples = ScriptOps.ProfileConfigDataParam[(int)ScriptOps.ChirpConfigDataParam[(int)m_AdvancedFrameConfigParams.ChirpStartIdx].profileId].pnumAdcSamples;
                    }
                    else
                    {
                        AdvSubFrameConfigAndDataParam.NumOfAdcSamples = (ushort)(ScriptOps.ProfileConfigDataParam[(int)ScriptOps.ChirpConfigDataParam[(int)m_AdvancedFrameConfigParams.ChirpStartIdx].profileId].pnumAdcSamples * 2);
                    }
                    if (FindADCSamplesToAdvSubFrameFromProfileData(m_AdvancedFrameConfigParams.ChirpStartIdx2, m_AdvancedFrameConfigParams.NumOfChirps2) == 1U)
                    {
                        MessageBox.Show(" Mismatch of ADC samples across chirps in Subframe2 configuration!", "Error", MessageBoxButtons.OK, MessageBoxIcon.Hand);
                        return num;
                    }
                    if (m_StaticParams.FmtVal == 0 || m_StaticParams.FmtVal == 3)
                    {
                        AdvSubFrameConfigAndDataParam.NumOfAdcSamples2 = ScriptOps.ProfileConfigDataParam[(int)ScriptOps.ChirpConfigDataParam[(int)m_AdvancedFrameConfigParams.ChirpStartIdx2].profileId].pnumAdcSamples;
                    }
                    else
                    {
                        AdvSubFrameConfigAndDataParam.NumOfAdcSamples2 = (ushort)(ScriptOps.ProfileConfigDataParam[(int)ScriptOps.ChirpConfigDataParam[(int)m_AdvancedFrameConfigParams.ChirpStartIdx2].profileId].pnumAdcSamples * 2);
                    }
                }
                else if (m_AdvancedFrameConfigParams.NumOfSubFrames == 3)
                {
                    if (FindADCSamplesToAdvSubFrameFromProfileData(m_AdvancedFrameConfigParams.ChirpStartIdx, m_AdvancedFrameConfigParams.NumOfChirps) == 1U)
                    {
                        MessageBox.Show(" Mismatch of ADC samples across chirps in Subframe1 configuration!", "Error", MessageBoxButtons.OK, MessageBoxIcon.Hand);
                        return num;
                    }
                    if (m_StaticParams.FmtVal == 0 || m_StaticParams.FmtVal == 3)
                    {
                        AdvSubFrameConfigAndDataParam.NumOfAdcSamples = ScriptOps.ProfileConfigDataParam[(int)ScriptOps.ChirpConfigDataParam[(int)m_AdvancedFrameConfigParams.ChirpStartIdx].profileId].pnumAdcSamples;
                    }
                    else
                    {
                        AdvSubFrameConfigAndDataParam.NumOfAdcSamples = (ushort)(ScriptOps.ProfileConfigDataParam[(int)ScriptOps.ChirpConfigDataParam[(int)m_AdvancedFrameConfigParams.ChirpStartIdx].profileId].pnumAdcSamples * 2);
                    }
                    if (FindADCSamplesToAdvSubFrameFromProfileData(m_AdvancedFrameConfigParams.ChirpStartIdx2, m_AdvancedFrameConfigParams.NumOfChirps2) == 1U)
                    {
                        MessageBox.Show(" Mismatch of ADC samples across chirps in Subframe2 configuration!", "Error", MessageBoxButtons.OK, MessageBoxIcon.Hand);
                        return num;
                    }
                    if (m_StaticParams.FmtVal == 0 || m_StaticParams.FmtVal == 3)
                    {
                        AdvSubFrameConfigAndDataParam.NumOfAdcSamples2 = ScriptOps.ProfileConfigDataParam[(int)ScriptOps.ChirpConfigDataParam[(int)m_AdvancedFrameConfigParams.ChirpStartIdx2].profileId].pnumAdcSamples;
                    }
                    else
                    {
                        AdvSubFrameConfigAndDataParam.NumOfAdcSamples2 = (ushort)(ScriptOps.ProfileConfigDataParam[(int)ScriptOps.ChirpConfigDataParam[(int)m_AdvancedFrameConfigParams.ChirpStartIdx2].profileId].pnumAdcSamples * 2);
                    }
                    if (FindADCSamplesToAdvSubFrameFromProfileData(m_AdvancedFrameConfigParams.ChirpStartIdx3, m_AdvancedFrameConfigParams.NumOfChirps3) == 1U)
                    {
                        MessageBox.Show(" Mismatch of ADC samples across chirps in Subframe3 configuration!", "Error", MessageBoxButtons.OK, MessageBoxIcon.Hand);
                        return num;
                    }
                    if (m_StaticParams.FmtVal == 0 || m_StaticParams.FmtVal == 3)
                    {
                        AdvSubFrameConfigAndDataParam.NumOfAdcSamples3 = ScriptOps.ProfileConfigDataParam[(int)ScriptOps.ChirpConfigDataParam[(int)m_AdvancedFrameConfigParams.ChirpStartIdx3].profileId].pnumAdcSamples;
                    }
                    else
                    {
                        AdvSubFrameConfigAndDataParam.NumOfAdcSamples3 = (ushort)(ScriptOps.ProfileConfigDataParam[(int)ScriptOps.ChirpConfigDataParam[(int)m_AdvancedFrameConfigParams.ChirpStartIdx3].profileId].pnumAdcSamples * 2);
                    }
                }
                else if (m_AdvancedFrameConfigParams.NumOfSubFrames == 4)
                {
                    if (FindADCSamplesToAdvSubFrameFromProfileData(m_AdvancedFrameConfigParams.ChirpStartIdx, m_AdvancedFrameConfigParams.NumOfChirps) == 1U)
                    {
                        MessageBox.Show(" Mismatch of ADC samples across chirps in Subframe1 configuration!", "Error", MessageBoxButtons.OK, MessageBoxIcon.Hand);
                        return num;
                    }
                    if (m_StaticParams.FmtVal == 0 || m_StaticParams.FmtVal == 3)
                    {
                        AdvSubFrameConfigAndDataParam.NumOfAdcSamples = ScriptOps.ProfileConfigDataParam[(int)ScriptOps.ChirpConfigDataParam[(int)m_AdvancedFrameConfigParams.ChirpStartIdx].profileId].pnumAdcSamples;
                    }
                    else
                    {
                        AdvSubFrameConfigAndDataParam.NumOfAdcSamples = (ushort)(ScriptOps.ProfileConfigDataParam[(int)ScriptOps.ChirpConfigDataParam[(int)m_AdvancedFrameConfigParams.ChirpStartIdx].profileId].pnumAdcSamples * 2);
                    }
                    if (FindADCSamplesToAdvSubFrameFromProfileData(m_AdvancedFrameConfigParams.ChirpStartIdx2, m_AdvancedFrameConfigParams.NumOfChirps2) == 1U)
                    {
                        MessageBox.Show(" Mismatch of ADC samples across chirps in Subframe2 configuration!", "Error", MessageBoxButtons.OK, MessageBoxIcon.Hand);
                        return num;
                    }
                    if (m_StaticParams.FmtVal == 0 || m_StaticParams.FmtVal == 3)
                    {
                        AdvSubFrameConfigAndDataParam.NumOfAdcSamples2 = ScriptOps.ProfileConfigDataParam[(int)ScriptOps.ChirpConfigDataParam[(int)m_AdvancedFrameConfigParams.ChirpStartIdx2].profileId].pnumAdcSamples;
                    }
                    else
                    {
                        AdvSubFrameConfigAndDataParam.NumOfAdcSamples2 = (ushort)(ScriptOps.ProfileConfigDataParam[(int)ScriptOps.ChirpConfigDataParam[(int)m_AdvancedFrameConfigParams.ChirpStartIdx2].profileId].pnumAdcSamples * 2);
                    }
                    if (FindADCSamplesToAdvSubFrameFromProfileData(m_AdvancedFrameConfigParams.ChirpStartIdx3, m_AdvancedFrameConfigParams.NumOfChirps3) == 1U)
                    {
                        MessageBox.Show(" Mismatch of ADC samples across chirps in Subframe3 configuration !", "Error", MessageBoxButtons.OK, MessageBoxIcon.Hand);
                        return num;
                    }
                    if (m_StaticParams.FmtVal == 0 || m_StaticParams.FmtVal == 3)
                    {
                        AdvSubFrameConfigAndDataParam.NumOfAdcSamples3 = ScriptOps.ProfileConfigDataParam[(int)ScriptOps.ChirpConfigDataParam[(int)m_AdvancedFrameConfigParams.ChirpStartIdx3].profileId].pnumAdcSamples;
                    }
                    else
                    {
                        AdvSubFrameConfigAndDataParam.NumOfAdcSamples3 = (ushort)(ScriptOps.ProfileConfigDataParam[(int)ScriptOps.ChirpConfigDataParam[(int)m_AdvancedFrameConfigParams.ChirpStartIdx3].profileId].pnumAdcSamples * 2);
                    }
                    if (FindADCSamplesToAdvSubFrameFromProfileData(m_AdvancedFrameConfigParams.ChirpStartIdx4, m_AdvancedFrameConfigParams.NumOfChirps4) == 1U)
                    {
                        MessageBox.Show(" Mismatch of ADC samples across chirps in Subframe4 configuration !", "Error", MessageBoxButtons.OK, MessageBoxIcon.Hand);
                        return num;
                    }
                    if (m_StaticParams.FmtVal == 0 || m_StaticParams.FmtVal == 3)
                    {
                        AdvSubFrameConfigAndDataParam.NumOfAdcSamples4 = ScriptOps.ProfileConfigDataParam[(int)ScriptOps.ChirpConfigDataParam[(int)m_AdvancedFrameConfigParams.ChirpStartIdx4].profileId].pnumAdcSamples;
                    }
                    else
                    {
                        AdvSubFrameConfigAndDataParam.NumOfAdcSamples4 = (ushort)(ScriptOps.ProfileConfigDataParam[(int)ScriptOps.ChirpConfigDataParam[(int)m_AdvancedFrameConfigParams.ChirpStartIdx4].profileId].pnumAdcSamples * 2);
                    }
                }
            }
            else if (m_AdvancedFrameConfigParams.NumOfSubFrames == 1)
            {
                if (m_StaticParams.FmtVal == 0 || m_StaticParams.FmtVal == 3)
                {
                    AdvSubFrameConfigAndDataParam.NumOfAdcSamples = ScriptOps.ProfileConfigDataParam[(int)m_AdvancedFrameConfigParams.ForceProfileIdx].pnumAdcSamples;
                }
                else
                {
                    AdvSubFrameConfigAndDataParam.NumOfAdcSamples = (ushort)(ScriptOps.ProfileConfigDataParam[(int)m_AdvancedFrameConfigParams.ForceProfileIdx].pnumAdcSamples * 2);
                }
            }
            else if (m_AdvancedFrameConfigParams.NumOfSubFrames == 2)
            {
                if (m_StaticParams.FmtVal == 0 || m_StaticParams.FmtVal == 3)
                {
                    AdvSubFrameConfigAndDataParam.NumOfAdcSamples = ScriptOps.ProfileConfigDataParam[(int)m_AdvancedFrameConfigParams.ForceProfileIdx].pnumAdcSamples;
                }
                else
                {
                    AdvSubFrameConfigAndDataParam.NumOfAdcSamples = (ushort)(ScriptOps.ProfileConfigDataParam[(int)m_AdvancedFrameConfigParams.ForceProfileIdx].pnumAdcSamples * 2);
                }
                if (m_StaticParams.FmtVal == 0 || m_StaticParams.FmtVal == 3)
                {
                    AdvSubFrameConfigAndDataParam.NumOfAdcSamples2 = ScriptOps.ProfileConfigDataParam[(int)m_AdvancedFrameConfigParams.ForceProfileIdx2].pnumAdcSamples;
                }
                else
                {
                    AdvSubFrameConfigAndDataParam.NumOfAdcSamples2 = (ushort)(ScriptOps.ProfileConfigDataParam[(int)m_AdvancedFrameConfigParams.ForceProfileIdx2].pnumAdcSamples * 2);
                }
            }
            else if (m_AdvancedFrameConfigParams.NumOfSubFrames == 3)
            {
                if (m_StaticParams.FmtVal == 0 || m_StaticParams.FmtVal == 3)
                {
                    AdvSubFrameConfigAndDataParam.NumOfAdcSamples = ScriptOps.ProfileConfigDataParam[(int)m_AdvancedFrameConfigParams.ForceProfileIdx].pnumAdcSamples;
                }
                else
                {
                    AdvSubFrameConfigAndDataParam.NumOfAdcSamples = (ushort)(ScriptOps.ProfileConfigDataParam[(int)m_AdvancedFrameConfigParams.ForceProfileIdx].pnumAdcSamples * 2);
                }
                if (m_StaticParams.FmtVal == 0 || m_StaticParams.FmtVal == 3)
                {
                    AdvSubFrameConfigAndDataParam.NumOfAdcSamples2 = ScriptOps.ProfileConfigDataParam[(int)m_AdvancedFrameConfigParams.ForceProfileIdx2].pnumAdcSamples;
                }
                else
                {
                    AdvSubFrameConfigAndDataParam.NumOfAdcSamples2 = (ushort)(ScriptOps.ProfileConfigDataParam[(int)m_AdvancedFrameConfigParams.ForceProfileIdx2].pnumAdcSamples * 2);
                }
                if (m_StaticParams.FmtVal == 0 || m_StaticParams.FmtVal == 3)
                {
                    AdvSubFrameConfigAndDataParam.NumOfAdcSamples3 = ScriptOps.ProfileConfigDataParam[(int)m_AdvancedFrameConfigParams.ForceProfileIdx3].pnumAdcSamples;
                }
                else
                {
                    AdvSubFrameConfigAndDataParam.NumOfAdcSamples3 = (ushort)(ScriptOps.ProfileConfigDataParam[(int)m_AdvancedFrameConfigParams.ForceProfileIdx3].pnumAdcSamples * 2);
                }
            }
            else if (m_AdvancedFrameConfigParams.NumOfSubFrames == 4)
            {
                if (m_StaticParams.FmtVal == 0 || m_StaticParams.FmtVal == 3)
                {
                    AdvSubFrameConfigAndDataParam.NumOfAdcSamples = ScriptOps.ProfileConfigDataParam[(int)m_AdvancedFrameConfigParams.ForceProfileIdx].pnumAdcSamples;
                }
                else
                {
                    AdvSubFrameConfigAndDataParam.NumOfAdcSamples = (ushort)(ScriptOps.ProfileConfigDataParam[(int)m_AdvancedFrameConfigParams.ForceProfileIdx].pnumAdcSamples * 2);
                }
                if (m_StaticParams.FmtVal == 0 || m_StaticParams.FmtVal == 3)
                {
                    AdvSubFrameConfigAndDataParam.NumOfAdcSamples2 = ScriptOps.ProfileConfigDataParam[(int)m_AdvancedFrameConfigParams.ForceProfileIdx2].pnumAdcSamples;
                }
                else
                {
                    AdvSubFrameConfigAndDataParam.NumOfAdcSamples2 = (ushort)(ScriptOps.ProfileConfigDataParam[(int)m_AdvancedFrameConfigParams.ForceProfileIdx2].pnumAdcSamples * 2);
                }
                if (m_StaticParams.FmtVal == 0 || m_StaticParams.FmtVal == 3)
                {
                    AdvSubFrameConfigAndDataParam.NumOfAdcSamples3 = ScriptOps.ProfileConfigDataParam[(int)m_AdvancedFrameConfigParams.ForceProfileIdx3].pnumAdcSamples;
                }
                else
                {
                    AdvSubFrameConfigAndDataParam.NumOfAdcSamples3 = (ushort)(ScriptOps.ProfileConfigDataParam[(int)m_AdvancedFrameConfigParams.ForceProfileIdx3].pnumAdcSamples * 2);
                }
                if (m_StaticParams.FmtVal == 0 || m_StaticParams.FmtVal == 3)
                {
                    AdvSubFrameConfigAndDataParam.NumOfAdcSamples4 = ScriptOps.ProfileConfigDataParam[(int)m_AdvancedFrameConfigParams.ForceProfileIdx4].pnumAdcSamples;
                }
                else
                {
                    AdvSubFrameConfigAndDataParam.NumOfAdcSamples4 = (ushort)(ScriptOps.ProfileConfigDataParam[(int)m_AdvancedFrameConfigParams.ForceProfileIdx4].pnumAdcSamples * 2);
                }
            }
            IntPtr inData = GCHandle.Alloc(AdvSubFrameConfigAndDataParam, GCHandleType.Pinned).AddrOfPinnedObject();
            if (GlobalRef.g_NtvRS232Connect[(int)GlobalRef.g_RadarDeviceIndex] && GlobalRef.g_CasCadeDeviceSpiConnect == 0U)
            {
                num = m_TsWrapper.Calling_WriteAddr_Single(4294959848U, 1U);
                if (m_GuiManager.DllOps.itempDisconnect(false) == 0)
                {
                    string full_command = string.Format("Debug Port Disconnected", new object[0]);
                    m_GuiManager.RecordLog(0, full_command);
                    if (!GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
                    {
                        iRs232ConnectDisconnect_impl();
                    }
                }
            }
            if (testSourceEnable == 1)
            {
                if (m_RadarDeviceModeConfigParams.NumberOfRadarDevicesDetected <= 1)
                {
                    num = Imports.RadarLinkImpl_EnableTestSource(GlobalRef.g_RadarDeviceId, num4, num3);
                    string full_command2 = string.Format("ar1.EnableTestSource({0})", new object[]
                    {
                        num4
                    });
                    m_GuiManager.RecordLog(11, full_command2);
                }
                else
                {
                    num = Imports.RadarLinkImpl_EnableTestSource(GlobalRef.g_RadarDeviceId, num4, num3);
                    string full_command3 = string.Format("ar1.EnableTestSource_mult({0},{1})", new object[]
                    {
                        GlobalRef.g_RadarDeviceId,
                        num4
                    });
                    m_GuiManager.RecordLog(11, full_command3);
                }
                num2 = 1;
            }
            else if (m_RadarDeviceModeConfigParams.NumberOfRadarDevicesDetected <= 1)
            {
                num = Imports.RadarLinkImpl_EnableTestSource(GlobalRef.g_RadarDeviceId, num5, num3);
                string full_command4 = string.Format("ar1.DisableTestSource({0})", new object[]
                {
                    num5
                });
                m_GuiManager.RecordLog(11, full_command4);
            }
            else
            {
                num = Imports.RadarLinkImpl_EnableTestSource(GlobalRef.g_RadarDeviceId, num5, num3);
                string full_command5 = string.Format("ar1.DisableTestSource_mult({0},{1})", new object[]
                {
                    GlobalRef.g_RadarDeviceId,
                    num5
                });
                m_GuiManager.RecordLog(11, full_command5);
            }
            if (num2 == 1)
            {
                if ((num == 0 && ((GlobalRef.g_CasCadeDeviceSpiConnect & 1U) == 1U || (GlobalRef.g_CasCadeDeviceSpiConnect & 2U) == 2U || (GlobalRef.g_CasCadeDeviceSpiConnect & 4U) == 4U || (GlobalRef.g_CasCadeDeviceSpiConnect & 8U) == 8U)) || GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
                {
                    string full_command6 = string.Format("Status: Passed", new object[0]);
                    m_GuiManager.RecordLog(11, full_command6);
                    MatlabPostProcGuiInstance.MatlabPostProcImpl_EnableTestSource((double)num3, 1.0);
                }
                else
                {
                    string msg = string.Format("Status: Failed, Error Type: {0}", new object[]
                    {
                        GetErrorType(num)
                    });
                    GlobalRef.LuaWrapper.PrintError(msg);
                }
            }
            else if ((num == 0 && ((GlobalRef.g_CasCadeDeviceSpiConnect & 1U) == 1U || (GlobalRef.g_CasCadeDeviceSpiConnect & 2U) == 2U || (GlobalRef.g_CasCadeDeviceSpiConnect & 4U) == 4U || (GlobalRef.g_CasCadeDeviceSpiConnect & 8U) == 8U)) || GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
            {
                string full_command7 = string.Format("Status: Passed", new object[0]);
                m_GuiManager.RecordLog(11, full_command7);
                MatlabPostProcGuiInstance.MatlabPostProcImpl_EnableTestSource(0.0, 1.0);
            }
            else
            {
                string msg2 = string.Format("Status: Failed, Error Type: {0}", new object[]
                {
                    GetErrorType(num)
                });
                GlobalRef.LuaWrapper.PrintError(msg2);
            }
            if (m_RadarDeviceModeConfigParams.NumberOfRadarDevicesDetected <= 1)
            {
                string full_command8 = string.Format("ar1.AdvanceFrameConfig({0}, {1}, {2}, {3}, {4}, {5}, {6}, {7}, {8}, {9}, {10}, {11}, {12}, {13}, {14}, {15}, {16},{17}, {18}, {19}, {20}, {21}, {22}, {23}, {24}, {25}, {26}, {27}, {28}, {29}, {30}, {31}, {32},{33}, {34}, {35}, {36}, {37}, {38}, {39}, {40}, {41}, {42}, {43}, {44}, {45}, {46}, {47}, {48},{49}, {50}, {51}, {52}, {53})", new object[]
                {
                    (int)AdvSubFrameConfigAndDataParam.NumOfSubFrames | (int)AdvSubFrameConfigAndDataParam.SWSubFrameTriggerMode << 16,
                    (int)AdvSubFrameConfigAndDataParam.ForceProfile | (int)b << 8,
                    AdvSubFrameConfigAndDataParam.ForceProfileIdx,
                    AdvSubFrameConfigAndDataParam.ChirpStartIdx,
                    AdvSubFrameConfigAndDataParam.NumOfChirps,
                    AdvSubFrameConfigAndDataParam.NumOfLoops,
                    AdvSubFrameConfigAndDataParam.BurstPeriodicity,
                    AdvSubFrameConfigAndDataParam.ChirpStartIdxOffset,
                    AdvSubFrameConfigAndDataParam.NumOfBrust,
                    AdvSubFrameConfigAndDataParam.NumOfBrustLoops,
                    AdvSubFrameConfigAndDataParam.SubFramePeriodicity,
                    AdvSubFrameConfigAndDataParam.ForceProfileIdx2,
                    AdvSubFrameConfigAndDataParam.ChirpStartIdx2,
                    AdvSubFrameConfigAndDataParam.NumOfChirps2,
                    AdvSubFrameConfigAndDataParam.NumOfLoops2,
                    AdvSubFrameConfigAndDataParam.BurstPeriodicity2,
                    AdvSubFrameConfigAndDataParam.ChirpStartIdxOffset2,
                    AdvSubFrameConfigAndDataParam.NumOfBrust2,
                    AdvSubFrameConfigAndDataParam.NumOfBrustLoops2,
                    AdvSubFrameConfigAndDataParam.SubFramePeriodicity2,
                    AdvSubFrameConfigAndDataParam.ForceProfileIdx3,
                    AdvSubFrameConfigAndDataParam.ChirpStartIdx3,
                    AdvSubFrameConfigAndDataParam.NumOfChirps3,
                    AdvSubFrameConfigAndDataParam.NumOfLoops3,
                    AdvSubFrameConfigAndDataParam.BurstPeriodicity3,
                    AdvSubFrameConfigAndDataParam.ChirpStartIdxOffset3,
                    AdvSubFrameConfigAndDataParam.NumOfBrust3,
                    AdvSubFrameConfigAndDataParam.NumOfBrustLoops3,
                    AdvSubFrameConfigAndDataParam.SubFramePeriodicity3,
                    AdvSubFrameConfigAndDataParam.ForceProfileIdx4,
                    AdvSubFrameConfigAndDataParam.ChirpStartIdx4,
                    AdvSubFrameConfigAndDataParam.NumOfChirps4,
                    AdvSubFrameConfigAndDataParam.NumOfLoops4,
                    AdvSubFrameConfigAndDataParam.BurstPeriodicity4,
                    AdvSubFrameConfigAndDataParam.ChirpStartIdxOffset4,
                    AdvSubFrameConfigAndDataParam.NumOfBrust4,
                    AdvSubFrameConfigAndDataParam.NumOfBrustLoops4,
                    AdvSubFrameConfigAndDataParam.SubFramePeriodicity4,
                    AdvSubFrameConfigAndDataParam.NumOfFrames,
                    AdvSubFrameConfigAndDataParam.TriggerSelect,
                    AdvSubFrameConfigAndDataParam.FrameTrigDelay,
                    AdvSubFrameConfigAndDataParam.NumOfCloneSubFrames,
                    AdvSubFrameConfigAndDataParam.TotalChirps,
                    AdvSubFrameConfigAndDataParam.NumOfAdcSamples,
                    AdvSubFrameConfigAndDataParam.NumOfChirpsInDataPacket,
                    AdvSubFrameConfigAndDataParam.TotalChirps2,
                    AdvSubFrameConfigAndDataParam.NumOfAdcSamples2,
                    AdvSubFrameConfigAndDataParam.NumOfChirpsInDataPacket2,
                    AdvSubFrameConfigAndDataParam.TotalChirps3,
                    AdvSubFrameConfigAndDataParam.NumOfAdcSamples3,
                    AdvSubFrameConfigAndDataParam.NumOfChirpsInDataPacket3,
                    AdvSubFrameConfigAndDataParam.TotalChirps4,
                    AdvSubFrameConfigAndDataParam.NumOfAdcSamples4,
                    AdvSubFrameConfigAndDataParam.NumOfChirpsInDataPacket4
                });
                m_GuiManager.RecordLog(8, full_command8);
            }
            else
            {
                string full_command9 = string.Format("ar1.AdvanceFrameConfig_mult({0}, {1}, {2}, {3}, {4}, {5}, {6}, {7}, {8}, {9}, {10}, {11}, {12}, {13}, {14}, {15}, {16},{17}, {18}, {19}, {20}, {21}, {22}, {23}, {24}, {25}, {26}, {27}, {28}, {29}, {30}, {31}, {32},{33}, {34}, {35}, {36}, {37}, {38}, {39}, {40}, {41}, {42}, {43}, {44}, {45}, {46}, {47}, {48},{49}, {50}, {51}, {52}, {53}, {54})", new object[]
                {
                    GlobalRef.g_RadarDeviceId,
                    (int)AdvSubFrameConfigAndDataParam.NumOfSubFrames | (int)AdvSubFrameConfigAndDataParam.SWSubFrameTriggerMode << 16,
                    (int)AdvSubFrameConfigAndDataParam.ForceProfile | (int)b << 8,
                    AdvSubFrameConfigAndDataParam.ForceProfileIdx,
                    AdvSubFrameConfigAndDataParam.ChirpStartIdx,
                    AdvSubFrameConfigAndDataParam.NumOfChirps,
                    AdvSubFrameConfigAndDataParam.NumOfLoops,
                    AdvSubFrameConfigAndDataParam.BurstPeriodicity,
                    AdvSubFrameConfigAndDataParam.ChirpStartIdxOffset,
                    AdvSubFrameConfigAndDataParam.NumOfBrust,
                    AdvSubFrameConfigAndDataParam.NumOfBrustLoops,
                    AdvSubFrameConfigAndDataParam.SubFramePeriodicity,
                    AdvSubFrameConfigAndDataParam.ForceProfileIdx2,
                    AdvSubFrameConfigAndDataParam.ChirpStartIdx2,
                    AdvSubFrameConfigAndDataParam.NumOfChirps2,
                    AdvSubFrameConfigAndDataParam.NumOfLoops2,
                    AdvSubFrameConfigAndDataParam.BurstPeriodicity2,
                    AdvSubFrameConfigAndDataParam.ChirpStartIdxOffset2,
                    AdvSubFrameConfigAndDataParam.NumOfBrust2,
                    AdvSubFrameConfigAndDataParam.NumOfBrustLoops2,
                    AdvSubFrameConfigAndDataParam.SubFramePeriodicity2,
                    AdvSubFrameConfigAndDataParam.ForceProfileIdx3,
                    AdvSubFrameConfigAndDataParam.ChirpStartIdx3,
                    AdvSubFrameConfigAndDataParam.NumOfChirps3,
                    AdvSubFrameConfigAndDataParam.NumOfLoops3,
                    AdvSubFrameConfigAndDataParam.BurstPeriodicity3,
                    AdvSubFrameConfigAndDataParam.ChirpStartIdxOffset3,
                    AdvSubFrameConfigAndDataParam.NumOfBrust3,
                    AdvSubFrameConfigAndDataParam.NumOfBrustLoops3,
                    AdvSubFrameConfigAndDataParam.SubFramePeriodicity3,
                    AdvSubFrameConfigAndDataParam.ForceProfileIdx4,
                    AdvSubFrameConfigAndDataParam.ChirpStartIdx4,
                    AdvSubFrameConfigAndDataParam.NumOfChirps4,
                    AdvSubFrameConfigAndDataParam.NumOfLoops4,
                    AdvSubFrameConfigAndDataParam.BurstPeriodicity4,
                    AdvSubFrameConfigAndDataParam.ChirpStartIdxOffset4,
                    AdvSubFrameConfigAndDataParam.NumOfBrust4,
                    AdvSubFrameConfigAndDataParam.NumOfBrustLoops4,
                    AdvSubFrameConfigAndDataParam.SubFramePeriodicity4,
                    AdvSubFrameConfigAndDataParam.NumOfFrames,
                    AdvSubFrameConfigAndDataParam.TriggerSelect,
                    AdvSubFrameConfigAndDataParam.FrameTrigDelay,
                    AdvSubFrameConfigAndDataParam.NumOfCloneSubFrames,
                    AdvSubFrameConfigAndDataParam.TotalChirps,
                    AdvSubFrameConfigAndDataParam.NumOfAdcSamples,
                    AdvSubFrameConfigAndDataParam.NumOfChirpsInDataPacket,
                    AdvSubFrameConfigAndDataParam.TotalChirps2,
                    AdvSubFrameConfigAndDataParam.NumOfAdcSamples2,
                    AdvSubFrameConfigAndDataParam.NumOfChirpsInDataPacket2,
                    AdvSubFrameConfigAndDataParam.TotalChirps3,
                    AdvSubFrameConfigAndDataParam.NumOfAdcSamples3,
                    AdvSubFrameConfigAndDataParam.NumOfChirpsInDataPacket3,
                    AdvSubFrameConfigAndDataParam.TotalChirps4,
                    AdvSubFrameConfigAndDataParam.NumOfAdcSamples4,
                    AdvSubFrameConfigAndDataParam.NumOfChirpsInDataPacket4
                });
                m_GuiManager.RecordLog(8, full_command9);
            }
            uint g_RadarDeviceId = GlobalRef.g_RadarDeviceId;
            num = Imports.RadarLinkImpl_AdvanceFrameConfig(GlobalRef.g_RadarDeviceId, inData);
            if ((num == 0 && ((GlobalRef.g_CasCadeDeviceSpiConnect & 1U) == 1U || (GlobalRef.g_CasCadeDeviceSpiConnect & 2U) == 2U || (GlobalRef.g_CasCadeDeviceSpiConnect & 4U) == 4U || (GlobalRef.g_CasCadeDeviceSpiConnect & 8U) == 8U)) || GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
            {
                string full_command10 = string.Format("Status: Passed", new object[0]);
                m_GuiManager.RecordLog(8, full_command10);
                int num6 = 0;
                while (num6 < 4 && !jsonConfigInProgress)
                {
                    if (((ulong)g_RadarDeviceId & (ulong)(1L << (num6 & 31))) != 0UL)
                    {
                        int mmwaveDevIndex = getMmwaveDevIndex(num6);
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlAdvFrameCfg_t.frameSeq.numOfSubFrames = (int)AdvSubFrameConfigAndDataParam.NumOfSubFrames;
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlAdvFrameCfg_t.frameSeq.forceProfile = (int)AdvSubFrameConfigAndDataParam.ForceProfile;
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlAdvFrameCfg_t.frameSeq.numFrames = (int)AdvSubFrameConfigAndDataParam.NumOfFrames;
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlAdvFrameCfg_t.frameSeq.triggerSelect = (int)AdvSubFrameConfigAndDataParam.TriggerSelect;
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlAdvFrameCfg_t.frameSeq.frameTrigDelay_usec = (double)m_AdvancedFrameConfigParams.FrameTrigDelay;
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlAdvFrameCfg_t.frameSeq.loopBackCfg = "0x" + b.ToString("X");
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlAdvFrameCfg_t.frameSeq.subFrameTrigger = (int)AdvSubFrameConfigAndDataParam.SWSubFrameTriggerMode;
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlAdvFrameCfg_t.frameSeq.subFrameCfg[0].rlSubFrameCfg_t.forceProfileIdx = (int)AdvSubFrameConfigAndDataParam.ForceProfileIdx;
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlAdvFrameCfg_t.frameSeq.subFrameCfg[0].rlSubFrameCfg_t.chirpStartIdx = (int)AdvSubFrameConfigAndDataParam.ChirpStartIdx;
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlAdvFrameCfg_t.frameSeq.subFrameCfg[0].rlSubFrameCfg_t.numOfChirps = (int)AdvSubFrameConfigAndDataParam.NumOfChirps;
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlAdvFrameCfg_t.frameSeq.subFrameCfg[0].rlSubFrameCfg_t.numLoops = (int)AdvSubFrameConfigAndDataParam.NumOfLoops;
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlAdvFrameCfg_t.frameSeq.subFrameCfg[0].rlSubFrameCfg_t.burstPeriodicity_msec = (double)m_AdvancedFrameConfigParams.BurstPeriodicity;
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlAdvFrameCfg_t.frameSeq.subFrameCfg[0].rlSubFrameCfg_t.chirpStartIdxOffset = (int)AdvSubFrameConfigAndDataParam.ChirpStartIdxOffset;
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlAdvFrameCfg_t.frameSeq.subFrameCfg[0].rlSubFrameCfg_t.numOfBurst = (int)AdvSubFrameConfigAndDataParam.NumOfBrust;
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlAdvFrameCfg_t.frameSeq.subFrameCfg[0].rlSubFrameCfg_t.numOfBurstLoops = (int)AdvSubFrameConfigAndDataParam.NumOfBrustLoops;
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlAdvFrameCfg_t.frameSeq.subFrameCfg[0].rlSubFrameCfg_t.subFramePeriodicity_msec = (double)m_AdvancedFrameConfigParams.SubFramePeriodicity;
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlAdvFrameCfg_t.frameData.subframeDataCfg[0].rlSubFrameDataCfg_t.numChirpsInDataPacket = (int)AdvSubFrameConfigAndDataParam.NumOfChirpsInDataPacket;
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlAdvFrameCfg_t.frameSeq.subFrameCfg[1].rlSubFrameCfg_t.forceProfileIdx = (int)AdvSubFrameConfigAndDataParam.ForceProfileIdx2;
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlAdvFrameCfg_t.frameSeq.subFrameCfg[1].rlSubFrameCfg_t.chirpStartIdx = (int)AdvSubFrameConfigAndDataParam.ChirpStartIdx2;
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlAdvFrameCfg_t.frameSeq.subFrameCfg[1].rlSubFrameCfg_t.numOfChirps = (int)AdvSubFrameConfigAndDataParam.NumOfChirps2;
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlAdvFrameCfg_t.frameSeq.subFrameCfg[1].rlSubFrameCfg_t.numLoops = (int)AdvSubFrameConfigAndDataParam.NumOfLoops2;
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlAdvFrameCfg_t.frameSeq.subFrameCfg[1].rlSubFrameCfg_t.burstPeriodicity_msec = (double)m_AdvancedFrameConfigParams.BurstPeriodicity2;
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlAdvFrameCfg_t.frameSeq.subFrameCfg[1].rlSubFrameCfg_t.chirpStartIdxOffset = (int)AdvSubFrameConfigAndDataParam.ChirpStartIdxOffset2;
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlAdvFrameCfg_t.frameSeq.subFrameCfg[1].rlSubFrameCfg_t.numOfBurst = (int)AdvSubFrameConfigAndDataParam.NumOfBrust2;
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlAdvFrameCfg_t.frameSeq.subFrameCfg[1].rlSubFrameCfg_t.numOfBurstLoops = (int)AdvSubFrameConfigAndDataParam.NumOfBrustLoops2;
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlAdvFrameCfg_t.frameSeq.subFrameCfg[1].rlSubFrameCfg_t.subFramePeriodicity_msec = (double)m_AdvancedFrameConfigParams.SubFramePeriodicity2;
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlAdvFrameCfg_t.frameData.subframeDataCfg[1].rlSubFrameDataCfg_t.numChirpsInDataPacket = (int)AdvSubFrameConfigAndDataParam.NumOfChirpsInDataPacket2;
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlAdvFrameCfg_t.frameSeq.subFrameCfg[2].rlSubFrameCfg_t.forceProfileIdx = (int)AdvSubFrameConfigAndDataParam.ForceProfileIdx3;
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlAdvFrameCfg_t.frameSeq.subFrameCfg[2].rlSubFrameCfg_t.chirpStartIdx = (int)AdvSubFrameConfigAndDataParam.ChirpStartIdx3;
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlAdvFrameCfg_t.frameSeq.subFrameCfg[2].rlSubFrameCfg_t.numOfChirps = (int)AdvSubFrameConfigAndDataParam.NumOfChirps3;
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlAdvFrameCfg_t.frameSeq.subFrameCfg[2].rlSubFrameCfg_t.numLoops = (int)AdvSubFrameConfigAndDataParam.NumOfLoops3;
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlAdvFrameCfg_t.frameSeq.subFrameCfg[2].rlSubFrameCfg_t.burstPeriodicity_msec = (double)m_AdvancedFrameConfigParams.BurstPeriodicity3;
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlAdvFrameCfg_t.frameSeq.subFrameCfg[2].rlSubFrameCfg_t.chirpStartIdxOffset = (int)AdvSubFrameConfigAndDataParam.ChirpStartIdxOffset3;
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlAdvFrameCfg_t.frameSeq.subFrameCfg[2].rlSubFrameCfg_t.numOfBurst = (int)AdvSubFrameConfigAndDataParam.NumOfBrust3;
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlAdvFrameCfg_t.frameSeq.subFrameCfg[2].rlSubFrameCfg_t.numOfBurstLoops = (int)AdvSubFrameConfigAndDataParam.NumOfBrustLoops3;
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlAdvFrameCfg_t.frameSeq.subFrameCfg[2].rlSubFrameCfg_t.subFramePeriodicity_msec = (double)m_AdvancedFrameConfigParams.SubFramePeriodicity3;
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlAdvFrameCfg_t.frameData.subframeDataCfg[2].rlSubFrameDataCfg_t.numChirpsInDataPacket = (int)AdvSubFrameConfigAndDataParam.NumOfChirpsInDataPacket3;
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlAdvFrameCfg_t.frameSeq.subFrameCfg[3].rlSubFrameCfg_t.forceProfileIdx = (int)AdvSubFrameConfigAndDataParam.ForceProfileIdx4;
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlAdvFrameCfg_t.frameSeq.subFrameCfg[3].rlSubFrameCfg_t.chirpStartIdx = (int)AdvSubFrameConfigAndDataParam.ChirpStartIdx4;
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlAdvFrameCfg_t.frameSeq.subFrameCfg[3].rlSubFrameCfg_t.numOfChirps = (int)AdvSubFrameConfigAndDataParam.NumOfChirps4;
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlAdvFrameCfg_t.frameSeq.subFrameCfg[3].rlSubFrameCfg_t.numLoops = (int)AdvSubFrameConfigAndDataParam.NumOfLoops4;
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlAdvFrameCfg_t.frameSeq.subFrameCfg[3].rlSubFrameCfg_t.burstPeriodicity_msec = (double)m_AdvancedFrameConfigParams.BurstPeriodicity4;
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlAdvFrameCfg_t.frameSeq.subFrameCfg[3].rlSubFrameCfg_t.chirpStartIdxOffset = (int)AdvSubFrameConfigAndDataParam.ChirpStartIdxOffset4;
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlAdvFrameCfg_t.frameSeq.subFrameCfg[3].rlSubFrameCfg_t.numOfBurst = (int)AdvSubFrameConfigAndDataParam.NumOfBrust4;
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlAdvFrameCfg_t.frameSeq.subFrameCfg[3].rlSubFrameCfg_t.numOfBurstLoops = (int)AdvSubFrameConfigAndDataParam.NumOfBrustLoops4;
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlAdvFrameCfg_t.frameSeq.subFrameCfg[3].rlSubFrameCfg_t.subFramePeriodicity_msec = (double)m_AdvancedFrameConfigParams.SubFramePeriodicity4;
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlAdvFrameCfg_t.frameData.subframeDataCfg[3].rlSubFrameDataCfg_t.numChirpsInDataPacket = (int)AdvSubFrameConfigAndDataParam.NumOfChirpsInDataPacket4;
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.waveformType = "advancedFrameChirp";
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlAdvFrameCfg_t.isConfigured = 1;
                    }
                    num6++;
                }
                MatlabPostProcGuiInstance.MatlabPostProcImpl_AdvancedFrameConfig((double)AdvSubFrameConfigAndDataParam.NumOfSubFrames, (double)AdvSubFrameConfigAndDataParam.ForceProfile, (double)AdvSubFrameConfigAndDataParam.ForceProfileIdx, (double)AdvSubFrameConfigAndDataParam.ChirpStartIdx, (double)AdvSubFrameConfigAndDataParam.NumOfChirps, (double)AdvSubFrameConfigAndDataParam.NumOfLoops, AdvSubFrameConfigAndDataParam.BurstPeriodicity, (double)AdvSubFrameConfigAndDataParam.ChirpStartIdxOffset, (double)AdvSubFrameConfigAndDataParam.NumOfBrust, (double)AdvSubFrameConfigAndDataParam.NumOfBrustLoops, AdvSubFrameConfigAndDataParam.SubFramePeriodicity, (double)AdvSubFrameConfigAndDataParam.ForceProfileIdx2, (double)AdvSubFrameConfigAndDataParam.ChirpStartIdx2, (double)AdvSubFrameConfigAndDataParam.NumOfChirps2, (double)AdvSubFrameConfigAndDataParam.NumOfLoops2, AdvSubFrameConfigAndDataParam.BurstPeriodicity2, (double)AdvSubFrameConfigAndDataParam.ChirpStartIdxOffset2, (double)AdvSubFrameConfigAndDataParam.NumOfBrust2, (double)AdvSubFrameConfigAndDataParam.NumOfBrustLoops2, AdvSubFrameConfigAndDataParam.SubFramePeriodicity2, (double)AdvSubFrameConfigAndDataParam.ForceProfileIdx3, (double)AdvSubFrameConfigAndDataParam.ChirpStartIdx3, (double)AdvSubFrameConfigAndDataParam.NumOfChirps3, (double)AdvSubFrameConfigAndDataParam.NumOfLoops3, AdvSubFrameConfigAndDataParam.BurstPeriodicity3, (double)AdvSubFrameConfigAndDataParam.ChirpStartIdxOffset3, (double)AdvSubFrameConfigAndDataParam.NumOfBrust3, (double)AdvSubFrameConfigAndDataParam.NumOfBrustLoops3, AdvSubFrameConfigAndDataParam.SubFramePeriodicity3, (double)AdvSubFrameConfigAndDataParam.ForceProfileIdx4, (double)AdvSubFrameConfigAndDataParam.ChirpStartIdx4, (double)AdvSubFrameConfigAndDataParam.NumOfChirps4, (double)AdvSubFrameConfigAndDataParam.NumOfLoops4, AdvSubFrameConfigAndDataParam.BurstPeriodicity4, (double)AdvSubFrameConfigAndDataParam.ChirpStartIdxOffset4, (double)AdvSubFrameConfigAndDataParam.NumOfBrust4, (double)AdvSubFrameConfigAndDataParam.NumOfBrustLoops4, AdvSubFrameConfigAndDataParam.SubFramePeriodicity4, (double)AdvSubFrameConfigAndDataParam.NumOfFrames, (double)AdvSubFrameConfigAndDataParam.TriggerSelect, AdvSubFrameConfigAndDataParam.FrameTrigDelay, (double)AdvSubFrameConfigAndDataParam.NumOfCloneSubFrames, AdvSubFrameConfigAndDataParam.TotalChirps, (double)AdvSubFrameConfigAndDataParam.NumOfAdcSamples, (double)AdvSubFrameConfigAndDataParam.NumOfChirpsInDataPacket, AdvSubFrameConfigAndDataParam.TotalChirps2, (double)AdvSubFrameConfigAndDataParam.NumOfAdcSamples2, (double)AdvSubFrameConfigAndDataParam.NumOfChirpsInDataPacket2, AdvSubFrameConfigAndDataParam.TotalChirps3, (double)AdvSubFrameConfigAndDataParam.NumOfAdcSamples3, (double)AdvSubFrameConfigAndDataParam.NumOfChirpsInDataPacket3, AdvSubFrameConfigAndDataParam.TotalChirps4, (double)AdvSubFrameConfigAndDataParam.NumOfAdcSamples4, (double)AdvSubFrameConfigAndDataParam.NumOfChirpsInDataPacket4);
                if (GlobalRef.g_2ChipCascade || GlobalRef.g_4ChipCascade)
                {
                    uint framePeriodicity_TDA = (uint)new float[]
                    {
                        m_AdvancedFrameConfigParams.SubFramePeriodicity,
                        m_AdvancedFrameConfigParams.SubFramePeriodicity2,
                        m_AdvancedFrameConfigParams.SubFramePeriodicity3,
                        m_AdvancedFrameConfigParams.SubFramePeriodicity4
                    }.Max();
                    num6 = 0;
                    while (num6 < 4 && !jsonConfigInProgress)
                    {
                        if (((ulong)g_RadarDeviceId & (ulong)(1L << (num6 & 31))) != 0UL)
                        {
                            int mmwaveDevIndex = getMmwaveDevIndex(num6);
                            uint num7 = 0U;
                            uint num8 = 0U;
                            uint num9 = 0U;
                            for (int i = 0; i < GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlAdvFrameCfg_t.frameSeq.numOfSubFrames; i++)
                            {
                                if (num7 < (uint)(GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlAdvFrameCfg_t.frameSeq.subFrameCfg[i].rlSubFrameCfg_t.numLoops * GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlAdvFrameCfg_t.frameSeq.subFrameCfg[i].rlSubFrameCfg_t.numOfChirps * GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlAdvFrameCfg_t.frameSeq.subFrameCfg[i].rlSubFrameCfg_t.numOfBurst * GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlAdvFrameCfg_t.frameSeq.subFrameCfg[i].rlSubFrameCfg_t.numOfBurstLoops))
                                {
                                    num7 = (uint)(GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlAdvFrameCfg_t.frameSeq.subFrameCfg[i].rlSubFrameCfg_t.numLoops * GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlAdvFrameCfg_t.frameSeq.subFrameCfg[i].rlSubFrameCfg_t.numOfChirps * GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlAdvFrameCfg_t.frameSeq.subFrameCfg[i].rlSubFrameCfg_t.numOfBurst * GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlAdvFrameCfg_t.frameSeq.subFrameCfg[i].rlSubFrameCfg_t.numOfBurstLoops);
                                }
                            }
                            for (uint num10 = Convert.ToUInt32(GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlChanCfg_t.p000006.Substring(2), 16); num10 != 0U; num10 >>= 1)
                            {
                                if ((num10 & 1U) == 1U)
                                {
                                    num8 += 1U;
                                }
                            }
                            uint num11;
                            if (GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlAdcOutCfg_t.fmt.b2AdcOutFmt == 1 || GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlAdcOutCfg_t.fmt.b2AdcOutFmt == 2)
                            {
                                num11 = 2U;
                            }
                            else
                            {
                                num11 = 1U;
                            }
                            for (int j = 0; j < GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlProfiles.Count; j++)
                            {
                                if ((ulong)num9 < (ulong)((long)GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlProfiles[j].rlProfileCfg_t.numAdcSamples))
                                {
                                    num9 = (uint)GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlProfiles[j].rlProfileCfg_t.numAdcSamples;
                                }
                            }
                            int numBits = ScriptOps.m_MainForm.StaticConfigTab.getNumBits();
                            int cqvalue = ScriptOps.m_MainForm.DataConfigTab.getCQvalue();
                            int num12 = 0;
                            decimal d = 0m;
                            if (Convert.ToUInt32(GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rawDataCaptureConfig.rlDevDataPathCfg_t.p000016.Substring(2), 16) == 6U || Convert.ToUInt32(GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rawDataCaptureConfig.rlDevDataPathCfg_t.p000016.Substring(2), 16) == 9U)
                            {
                                num12 = 2;
                                d = 0m;
                            }
                            if (Convert.ToUInt32(GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rawDataCaptureConfig.rlDevDataPathCfg_t.p000016.Substring(2), 16) == 54U)
                            {
                                num12 = 2;
                                d = Math.Ceiling((decimal)(cqvalue * 16 / numBits));
                            }
                            uint num13 = (uint)((long)(((ulong)(num11 * num9) + (ulong)((long)num12)) * (ulong)num8) + d);
                            GlobalRef.Width_TDA[num6] = num13;
                            GlobalRef.Height_TDA[num6] = num7;
                        }
                        num6++;
                    }
                    if (GlobalRef.g_RadarDeviceId == 1U)
                    {
                        GlobalRef.framePeriodicity_TDA = framePeriodicity_TDA;
                    }
                }
            }
            else
            {
                string msg3 = string.Format("Status: Failed, Error Type: {0}", new object[]
                {
                    GetErrorType(num)
                });
                GlobalRef.LuaWrapper.PrintError(msg3);
            }
            if (GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
            {
                if (iRs232ConnectDisconnect_impl() == 0 && !GlobalRef.g_NtvRS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
                {
                    m_GuiManager.DllOps.iConnect(1U, 0U);
                    string full_command11 = string.Format("Debug Port Reconnected!", new object[0]);
                    m_GuiManager.RecordLog(9, full_command11);
                    ScriptOps.KeepTrying(2000, new Func<bool>(spare_read));
                }
            }
            else if (GlobalRef.g_CasCadeDeviceSpiConnect == 0U)
            {
                string full_command12 = string.Format("Error Occurred in Port open close", new object[0]);
                m_GuiManager.RecordLog(9, full_command12);
            }
            return num;
        }

        private int iLoopBackBurstConfig_Impl(bool is_starting_op, bool is_ending_op)
        {
            LoopBackBurstConfigurationParam.LoopBackSelect = (byte)((char)m_LoopBackBurstConfigParams.LoopBackSelect | m_MonSynthFreqLinearityConfigParams.Profile1Index << 1 | m_MonSynthFreqLinearityConfigParams.Profile2Index << 2 | m_MonSynthFreqLinearityConfigParams.Profile3Index << 3);
            LoopBackBurstConfigurationParam.BaseProfileIndex = m_LoopBackBurstConfigParams.BaseProfileIndex;
            LoopBackBurstConfigurationParam.BurstIndex = m_LoopBackBurstConfigParams.BurstIndex;
            LoopBackBurstConfigurationParam.Reserved = 0;
            double num = Math.Round(m_LoopBackBurstConfigParams.FreqConst, 7);
            double num2 = (double)m_LoopBackBurstConfigParams.SlopeConst;
            uint freqConst;
            ushort slopeConst;
            if (GlobalRef.g_ARDeviceOperateFreq60GHz)
            {
                freqConst = (uint)Math.Round(num * 67108864.0 / 2.7);
                slopeConst = (ushort)Math.Round(num2 * 27.61681646090535);
            }
            else
            {
                freqConst = (uint)Math.Round(num / 3.6 * 67108864.0);
                slopeConst = (ushort)Math.Round(num2 * 20.712612345679013);
            }
            LoopBackBurstConfigurationParam.FreqConst = freqConst;
            LoopBackBurstConfigurationParam.SlopeConst = slopeConst;
            LoopBackBurstConfigurationParam.Reserved2 = 0;
            LoopBackBurstConfigurationParam.TxBackOff = (uint)((int)m_LoopBackBurstConfigParams.Tx1BackOff | (int)m_LoopBackBurstConfigParams.Tx2BackOff << 8 | (int)m_LoopBackBurstConfigParams.Tx3BackOff << 16);
            LoopBackBurstConfigurationParam.RxGain = (ushort)((int)m_LoopBackBurstConfigParams.RxGain | (int)m_LoopBackBurstConfigParams.RFGainTarget << 6);
            LoopBackBurstConfigurationParam.TxEnable = (byte)((int)m_LoopBackBurstConfigParams.Tx1Enable | (int)m_LoopBackBurstConfigParams.Tx2Enable << 1 | (int)m_LoopBackBurstConfigParams.Tx3Enable << 2);
            LoopBackBurstConfigurationParam.Reserved3 = 0;
            LoopBackBurstConfigurationParam.BPMConfig = (ushort)((byte)((int)m_LoopBackBurstConfigParams.BPMTx0Off | (int)m_LoopBackBurstConfigParams.BPMTx0On << 1 | (int)m_LoopBackBurstConfigParams.BPMTx1Off << 2 | (int)m_LoopBackBurstConfigParams.BPMTx1On << 3 | (int)m_LoopBackBurstConfigParams.BPMTx2Off << 4 | (int)m_LoopBackBurstConfigParams.BPMTx2On << 5));
            LoopBackBurstConfigurationParam.DigitalCorrectionDisable = (ushort)((int)m_LoopBackBurstConfigParams.IQMM | (int)m_LoopBackBurstConfigParams.RxGainPhase << 1);
            LoopBackBurstConfigurationParam.IFLoopBackFreq = m_LoopBackBurstConfigParams.IFLoopBackFreq;
            LoopBackBurstConfigurationParam.IFLoopBackMagnitude = m_LoopBackBurstConfigParams.IFLoopBackMagnitude;
            LoopBackBurstConfigurationParam.f000027 = m_LoopBackBurstConfigParams.f000027;
            LoopBackBurstConfigurationParam.f000028 = m_LoopBackBurstConfigParams.f000028;
            LoopBackBurstConfigurationParam.PSLoopBackFreq = (uint)((int)m_LoopBackBurstConfigParams.Tx1PSLoopBackFreq | (int)m_LoopBackBurstConfigParams.Tx2PSLoopBackFreq << 16);
            LoopBackBurstConfigurationParam.Reserved4 = 0U;
            LoopBackBurstConfigurationParam.PALoopBackFreq = (ushort)(100 / m_LoopBackBurstConfigParams.PALoopBackFreq);
            LoopBackBurstConfigurationParam.Reserved5 = 0;
            LoopBackBurstConfigurationParam.Reserved6 = 0;
            LoopBackBurstConfigurationParam.Reserved7 = 0;
            IntPtr inData = GCHandle.Alloc(LoopBackBurstConfigurationParam, GCHandleType.Pinned).AddrOfPinnedObject();
            int num3;
            if (GlobalRef.g_NtvRS232Connect[(int)GlobalRef.g_RadarDeviceIndex] && GlobalRef.g_CasCadeDeviceSpiConnect == 0U)
            {
                num3 = m_TsWrapper.Calling_WriteAddr_Single(4294959848U, 1U);
                if (m_GuiManager.DllOps.itempDisconnect(false) == 0)
                {
                    string full_command = string.Format("Debug Port Disconnected", new object[0]);
                    m_GuiManager.RecordLog(0, full_command);
                    if (!GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
                    {
                        iRs232ConnectDisconnect_impl();
                    }
                }
            }
            Thread.Sleep(200);
            if (m_RadarDeviceModeConfigParams.NumberOfRadarDevicesDetected <= 1)
            {
                string full_command2 = string.Format("ar1.LbBurstCfgSet({0}, {1}, {2}, {3}, {4}, {5}, {6}, {7}, {8}, {9}, {10}, {11}, {12}, {13}, {14}, {15}, {16}, {17}, {18}, {19}, {20}, {21}, {22})", new object[]
                {
                    LoopBackBurstConfigurationParam.LoopBackSelect,
                    LoopBackBurstConfigurationParam.BaseProfileIndex,
                    LoopBackBurstConfigurationParam.BurstIndex,
                    LoopBackBurstConfigurationParam.Reserved,
                    Math.Round(m_LoopBackBurstConfigParams.FreqConst, 7),
                    (decimal)m_LoopBackBurstConfigParams.SlopeConst,
                    LoopBackBurstConfigurationParam.Reserved2,
                    LoopBackBurstConfigurationParam.TxBackOff,
                    LoopBackBurstConfigurationParam.RxGain,
                    LoopBackBurstConfigurationParam.TxEnable,
                    LoopBackBurstConfigurationParam.Reserved3,
                    LoopBackBurstConfigurationParam.BPMConfig,
                    LoopBackBurstConfigurationParam.DigitalCorrectionDisable,
                    LoopBackBurstConfigurationParam.IFLoopBackFreq,
                    LoopBackBurstConfigurationParam.IFLoopBackMagnitude,
                    LoopBackBurstConfigurationParam.f000027,
                    LoopBackBurstConfigurationParam.f000028,
                    LoopBackBurstConfigurationParam.PSLoopBackFreq,
                    LoopBackBurstConfigurationParam.Reserved4,
                    m_LoopBackBurstConfigParams.PALoopBackFreq,
                    LoopBackBurstConfigurationParam.Reserved5,
                    LoopBackBurstConfigurationParam.Reserved6,
                    LoopBackBurstConfigurationParam.Reserved7
                });
                m_GuiManager.RecordLog(15, full_command2);
            }
            else
            {
                string full_command3 = string.Format("ar1.LbBurstCfgSet_mult({0}, {1}, {2}, {3}, {4}, {5}, {6}, {7}, {8}, {9}, {10}, {11}, {12}, {13}, {14}, {15}, {16}, {17}, {18}, {19}, {20}, {21}, {22}, {23})", new object[]
                {
                    GlobalRef.g_RadarDeviceId,
                    LoopBackBurstConfigurationParam.LoopBackSelect,
                    LoopBackBurstConfigurationParam.BaseProfileIndex,
                    LoopBackBurstConfigurationParam.BurstIndex,
                    LoopBackBurstConfigurationParam.Reserved,
                    Math.Round(m_LoopBackBurstConfigParams.FreqConst, 7),
                    (decimal)m_LoopBackBurstConfigParams.SlopeConst,
                    LoopBackBurstConfigurationParam.Reserved2,
                    LoopBackBurstConfigurationParam.TxBackOff,
                    LoopBackBurstConfigurationParam.RxGain,
                    LoopBackBurstConfigurationParam.TxEnable,
                    LoopBackBurstConfigurationParam.Reserved3,
                    LoopBackBurstConfigurationParam.BPMConfig,
                    LoopBackBurstConfigurationParam.DigitalCorrectionDisable,
                    LoopBackBurstConfigurationParam.IFLoopBackFreq,
                    LoopBackBurstConfigurationParam.IFLoopBackMagnitude,
                    LoopBackBurstConfigurationParam.f000027,
                    LoopBackBurstConfigurationParam.f000028,
                    LoopBackBurstConfigurationParam.PSLoopBackFreq,
                    LoopBackBurstConfigurationParam.Reserved4,
                    m_LoopBackBurstConfigParams.PALoopBackFreq,
                    LoopBackBurstConfigurationParam.Reserved5,
                    LoopBackBurstConfigurationParam.Reserved6,
                    LoopBackBurstConfigurationParam.Reserved7
                });
                m_GuiManager.RecordLog(15, full_command3);
            }
            uint g_RadarDeviceId = GlobalRef.g_RadarDeviceId;
            num3 = Imports.RadarLinkImpl_SetLoopBckBurstCfg((byte)GlobalRef.g_RadarDeviceId, inData);
            if ((num3 == 0 && ((GlobalRef.g_CasCadeDeviceSpiConnect & 1U) == 1U || (GlobalRef.g_CasCadeDeviceSpiConnect & 2U) == 2U || (GlobalRef.g_CasCadeDeviceSpiConnect & 4U) == 4U || (GlobalRef.g_CasCadeDeviceSpiConnect & 8U) == 8U)) || GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
            {
                string full_command4 = string.Format("Status: Passed", new object[0]);
                m_GuiManager.RecordLog(8, full_command4);
                for (int i = 0; i < 4; i++)
                {
                    if (jsonConfigInProgress)
                    {
                        break;
                    }
                    if (((ulong)g_RadarDeviceId & (ulong)(1L << (i & 31))) != 0UL)
                    {
                        int mmwaveDevIndex = getMmwaveDevIndex(i);
                        int j;
                        for (j = 0; j < GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlLoopbackBursts.Count; j++)
                        {
                            if ((int)m_LoopBackBurstConfigParams.BurstIndex == GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlLoopbackBursts[j].rlLoopbackBurst_t.burstIndx)
                            {
                                GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlLoopbackBursts[j].rlLoopbackBurst_t.loopbackSel = (int)LoopBackBurstConfigurationParam.LoopBackSelect;
                                GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlLoopbackBursts[j].rlLoopbackBurst_t.baseProfileIndx = (int)LoopBackBurstConfigurationParam.BaseProfileIndex;
                                GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlLoopbackBursts[j].rlLoopbackBurst_t.burstIndx = (int)LoopBackBurstConfigurationParam.BurstIndex;
                                GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlLoopbackBursts[j].rlLoopbackBurst_t.freqConst_GHz = m_LoopBackBurstConfigParams.FreqConst;
                                GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlLoopbackBursts[j].rlLoopbackBurst_t.slopeConst_MHz_us = (double)m_LoopBackBurstConfigParams.SlopeConst;
                                GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlLoopbackBursts[j].rlLoopbackBurst_t.txBackoff = "0x" + LoopBackBurstConfigurationParam.TxBackOff.ToString("X");
                                GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlLoopbackBursts[j].rlLoopbackBurst_t.rxGain_dB = "0x" + LoopBackBurstConfigurationParam.RxGain.ToString("X");
                                GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlLoopbackBursts[j].rlLoopbackBurst_t.txEn = "0x" + LoopBackBurstConfigurationParam.TxEnable.ToString("X");
                                GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlLoopbackBursts[j].rlLoopbackBurst_t.bpmConfig = "0x" + LoopBackBurstConfigurationParam.BPMConfig.ToString("X");
                                GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlLoopbackBursts[j].rlLoopbackBurst_t.digCorrDis = "0x" + LoopBackBurstConfigurationParam.DigitalCorrectionDisable.ToString("X");
                                GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlLoopbackBursts[j].rlLoopbackBurst_t.ifLbFreq = (int)LoopBackBurstConfigurationParam.IFLoopBackFreq;
                                GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlLoopbackBursts[j].rlLoopbackBurst_t.ifLbMag_10mv = (int)LoopBackBurstConfigurationParam.IFLoopBackMagnitude;
                                GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlLoopbackBursts[j].rlLoopbackBurst_t.ps1PgaIndx = (int)LoopBackBurstConfigurationParam.f000027;
                                GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlLoopbackBursts[j].rlLoopbackBurst_t.ps2PgaIndx = (int)LoopBackBurstConfigurationParam.f000028;
                                GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlLoopbackBursts[j].rlLoopbackBurst_t.p00000f = (int)m_LoopBackBurstConfigParams.PALoopBackFreq;
                                GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlLoopbackBursts[j].rlLoopbackBurst_t.p00000e = "0x" + LoopBackBurstConfigurationParam.PSLoopBackFreq.ToString("X");
                                break;
                            }
                        }
                        if (j == GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlLoopbackBursts.Count)
                        {
                            GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlLoopbackBursts.Add(new RlLoopbackBursts());
                            GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlLoopbackBursts[j].rlLoopbackBurst_t = new RlLoopbackBurstT();
                            GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlLoopbackBursts[j].rlLoopbackBurst_t.loopbackSel = (int)LoopBackBurstConfigurationParam.LoopBackSelect;
                            GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlLoopbackBursts[j].rlLoopbackBurst_t.baseProfileIndx = (int)LoopBackBurstConfigurationParam.BaseProfileIndex;
                            GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlLoopbackBursts[j].rlLoopbackBurst_t.burstIndx = (int)LoopBackBurstConfigurationParam.BurstIndex;
                            GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlLoopbackBursts[j].rlLoopbackBurst_t.freqConst_GHz = m_LoopBackBurstConfigParams.FreqConst;
                            GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlLoopbackBursts[j].rlLoopbackBurst_t.slopeConst_MHz_us = (double)m_LoopBackBurstConfigParams.SlopeConst;
                            GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlLoopbackBursts[j].rlLoopbackBurst_t.txBackoff = "0x" + LoopBackBurstConfigurationParam.TxBackOff.ToString("X");
                            GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlLoopbackBursts[j].rlLoopbackBurst_t.rxGain_dB = "0x" + LoopBackBurstConfigurationParam.RxGain.ToString("X");
                            GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlLoopbackBursts[j].rlLoopbackBurst_t.txEn = "0x" + LoopBackBurstConfigurationParam.TxEnable.ToString("X");
                            GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlLoopbackBursts[j].rlLoopbackBurst_t.bpmConfig = "0x" + LoopBackBurstConfigurationParam.BPMConfig.ToString("X");
                            GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlLoopbackBursts[j].rlLoopbackBurst_t.digCorrDis = "0x" + LoopBackBurstConfigurationParam.DigitalCorrectionDisable.ToString("X");
                            GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlLoopbackBursts[j].rlLoopbackBurst_t.ifLbFreq = (int)LoopBackBurstConfigurationParam.IFLoopBackFreq;
                            GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlLoopbackBursts[j].rlLoopbackBurst_t.ifLbMag_10mv = (int)LoopBackBurstConfigurationParam.IFLoopBackMagnitude;
                            GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlLoopbackBursts[j].rlLoopbackBurst_t.ps1PgaIndx = (int)LoopBackBurstConfigurationParam.f000027;
                            GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlLoopbackBursts[j].rlLoopbackBurst_t.ps2PgaIndx = (int)LoopBackBurstConfigurationParam.f000028;
                            GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlLoopbackBursts[j].rlLoopbackBurst_t.p00000f = (int)m_LoopBackBurstConfigParams.PALoopBackFreq;
                            GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlLoopbackBursts[j].rlLoopbackBurst_t.p00000e = "0x" + LoopBackBurstConfigurationParam.PSLoopBackFreq.ToString("X");
                        }
                    }
                }
            }
            else
            {
                string msg = string.Format("Status: Failed, Error Type: {0}", new object[]
                {
                    GetErrorType(num3)
                });
                GlobalRef.LuaWrapper.PrintError(msg);
            }
            if (GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
            {
                if (iRs232ConnectDisconnect_impl() == 0 && !GlobalRef.g_NtvRS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
                {
                    m_GuiManager.DllOps.iConnect(1U, 0U);
                    string full_command5 = string.Format("Debug Port Reconnected!", new object[0]);
                    m_GuiManager.RecordLog(9, full_command5);
                    ScriptOps.KeepTrying(2000, new Func<bool>(spare_read));
                }
            }
            else if (GlobalRef.g_CasCadeDeviceSpiConnect == 0U)
            {
                string full_command6 = string.Format("Error Occurred in Port open close", new object[0]);
                m_GuiManager.RecordLog(9, full_command6);
            }
            return num3;
        }

        private int iSWSubFrameStartStopConfig_Impl(bool is_starting_op, bool is_ending_op)
        {
            SWSubFrameStartStopConfigurationParam.startCommand = m_SWSubFrameStartStopConfigParams.StartCommand;
            SWSubFrameStartStopConfigurationParam.Reserved = 0;
            IntPtr inData = GCHandle.Alloc(SWSubFrameStartStopConfigurationParam, GCHandleType.Pinned).AddrOfPinnedObject();
            int num;
            if (GlobalRef.g_NtvRS232Connect[(int)GlobalRef.g_RadarDeviceIndex] && GlobalRef.g_CasCadeDeviceSpiConnect == 0U)
            {
                num = m_TsWrapper.Calling_WriteAddr_Single(4294959848U, 1U);
                if (m_GuiManager.DllOps.itempDisconnect(false) == 0)
                {
                    string full_command = string.Format("Debug Port Disconnected", new object[0]);
                    m_GuiManager.RecordLog(0, full_command);
                    if (!GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
                    {
                        iRs232ConnectDisconnect_impl();
                    }
                }
            }
            Thread.Sleep(200);
            if (m_RadarDeviceModeConfigParams.NumberOfRadarDevicesDetected <= 1)
            {
                string full_command2 = string.Format("ar1.SubFrameStartCfgSet({0}, {1}, {2})", new object[]
                {
                    m_SWSubFrameStartStopConfigParams.StartCommand,
                    m_SWSubFrameStartStopConfigParams.Reserved,
                    m_SWSubFrameStartStopConfigParams.Reserved
                });
                m_GuiManager.RecordLog(15, full_command2);
            }
            else
            {
                string full_command3 = string.Format("ar1.SubFrameStartCfgSet_mult({0}, {1}, {2}, {3})", new object[]
                {
                    GlobalRef.g_RadarDeviceId,
                    m_SWSubFrameStartStopConfigParams.StartCommand,
                    m_SWSubFrameStartStopConfigParams.Reserved,
                    m_SWSubFrameStartStopConfigParams.Reserved
                });
                m_GuiManager.RecordLog(15, full_command3);
            }
            num = Imports.RadarLinkImpl_SetSubFrameStart((byte)GlobalRef.g_RadarDeviceId, inData);
            if ((num == 0 && ((GlobalRef.g_CasCadeDeviceSpiConnect & 1U) == 1U || (GlobalRef.g_CasCadeDeviceSpiConnect & 2U) == 2U || (GlobalRef.g_CasCadeDeviceSpiConnect & 4U) == 4U || (GlobalRef.g_CasCadeDeviceSpiConnect & 8U) == 8U)) || GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
            {
                string full_command4 = string.Format("Status: Passed", new object[0]);
                m_GuiManager.RecordLog(8, full_command4);
            }
            else
            {
                string msg = string.Format("Status: Failed, Error Type: {0}", new object[]
                {
                    GetErrorType(num)
                });
                GlobalRef.LuaWrapper.PrintError(msg);
            }
            if (GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
            {
                if (iRs232ConnectDisconnect_impl() == 0 && !GlobalRef.g_NtvRS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
                {
                    m_GuiManager.DllOps.iConnect(1U, 0U);
                    string full_command5 = string.Format("Debug Port Reconnected!", new object[0]);
                    m_GuiManager.RecordLog(9, full_command5);
                    ScriptOps.KeepTrying(2000, new Func<bool>(spare_read));
                }
            }
            else if (GlobalRef.g_CasCadeDeviceSpiConnect == 0U)
            {
                string full_command6 = string.Format("Error Occurred in Port open close", new object[0]);
                m_GuiManager.RecordLog(9, full_command6);
            }
            return num;
        }

        private int iMCUClockOutConfig_Impl(bool is_starting_op, bool is_ending_op)
        {
            MCUClockOutConfigurationParam.MCUClockControl = m_MCUClockOutConfigParams.MCUClockControl;
            MCUClockOutConfigurationParam.MCUClockSrc = m_MCUClockOutConfigParams.MCUClockSrc;
            MCUClockOutConfigurationParam.SrcClockDiv = m_MCUClockOutConfigParams.SrcClockDiv;
            MCUClockOutConfigurationParam.Reserved = m_MCUClockOutConfigParams.Reserved;
            IntPtr inData = GCHandle.Alloc(MCUClockOutConfigurationParam, GCHandleType.Pinned).AddrOfPinnedObject();
            int num;
            if (GlobalRef.g_NtvRS232Connect[(int)GlobalRef.g_RadarDeviceIndex] && GlobalRef.g_CasCadeDeviceSpiConnect == 0U)
            {
                num = m_TsWrapper.Calling_WriteAddr_Single(4294959848U, 1U);
                if (m_GuiManager.DllOps.itempDisconnect(false) == 0)
                {
                    string full_command = string.Format("Debug Port Disconnected", new object[0]);
                    m_GuiManager.RecordLog(0, full_command);
                    if (!GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
                    {
                        iRs232ConnectDisconnect_impl();
                    }
                }
            }
            Thread.Sleep(200);
            if (m_RadarDeviceModeConfigParams.NumberOfRadarDevicesDetected <= 1)
            {
                string full_command2 = string.Format("ar1.SetMCUClockOutConfig({0}, {1}, {2}, {3})", new object[]
                {
                    m_MCUClockOutConfigParams.MCUClockControl,
                    m_MCUClockOutConfigParams.MCUClockSrc,
                    m_MCUClockOutConfigParams.SrcClockDiv,
                    m_MCUClockOutConfigParams.Reserved
                });
                m_GuiManager.RecordLog(15, full_command2);
            }
            else
            {
                string full_command3 = string.Format("ar1.SetMCUClockOutConfig_mult({0}, {1}, {2}, {3}, {4})", new object[]
                {
                    GlobalRef.g_RadarDeviceId,
                    m_MCUClockOutConfigParams.MCUClockControl,
                    m_MCUClockOutConfigParams.MCUClockSrc,
                    m_MCUClockOutConfigParams.SrcClockDiv,
                    m_MCUClockOutConfigParams.Reserved
                });
                m_GuiManager.RecordLog(15, full_command3);
            }
            num = Imports.RadarLinkImpl_DeviceMcuClkConfig((byte)GlobalRef.g_RadarDeviceId, inData);
            if ((num == 0 && ((GlobalRef.g_CasCadeDeviceSpiConnect & 1U) == 1U || (GlobalRef.g_CasCadeDeviceSpiConnect & 2U) == 2U || (GlobalRef.g_CasCadeDeviceSpiConnect & 4U) == 4U || (GlobalRef.g_CasCadeDeviceSpiConnect & 8U) == 8U)) || GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
            {
                string full_command4 = string.Format("Status: Passed", new object[0]);
                m_GuiManager.RecordLog(8, full_command4);
            }
            else
            {
                string msg = string.Format("Status: Failed, Error Type: {0}", new object[]
                {
                    GetErrorType(num)
                });
                GlobalRef.LuaWrapper.PrintError(msg);
            }
            if (GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
            {
                if (iRs232ConnectDisconnect_impl() == 0 && !GlobalRef.g_NtvRS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
                {
                    m_GuiManager.DllOps.iConnect(1U, 0U);
                    string full_command5 = string.Format("Debug Port Reconnected!", new object[0]);
                    m_GuiManager.RecordLog(9, full_command5);
                    ScriptOps.KeepTrying(2000, new Func<bool>(spare_read));
                }
            }
            else if (GlobalRef.g_CasCadeDeviceSpiConnect == 0U)
            {
                string full_command6 = string.Format("Error Occurred in Port open close", new object[0]);
                m_GuiManager.RecordLog(9, full_command6);
            }
            return num;
        }

        private int iCalibDataRestoreConfig_Impl(bool is_starting_op, bool is_ending_op)
        {
            ScriptOps.CalibDataRestoreConfigurationParam.NumChunks = (ushort)(GlobalRef.CalibData_chunkID_0[0] & 65535U);
            ScriptOps.CalibDataRestoreConfigurationParam.ChunkID = (ushort)(GlobalRef.CalibData_chunkID_0[0] >> 16);
            ScriptOps.CalibDataRestoreConfigurationParam.CalibData0 = GlobalRef.CalibData_chunkID_0[1];
            ScriptOps.CalibDataRestoreConfigurationParam.CalibData1 = GlobalRef.CalibData_chunkID_0[2];
            ScriptOps.CalibDataRestoreConfigurationParam.CalibData2 = GlobalRef.CalibData_chunkID_0[3];
            ScriptOps.CalibDataRestoreConfigurationParam.CalibData3 = GlobalRef.CalibData_chunkID_0[4];
            ScriptOps.CalibDataRestoreConfigurationParam.CalibData4 = GlobalRef.CalibData_chunkID_0[5];
            ScriptOps.CalibDataRestoreConfigurationParam.CalibData5 = GlobalRef.CalibData_chunkID_0[6];
            ScriptOps.CalibDataRestoreConfigurationParam.CalibData6 = GlobalRef.CalibData_chunkID_0[7];
            ScriptOps.CalibDataRestoreConfigurationParam.CalibData7 = GlobalRef.CalibData_chunkID_0[8];
            ScriptOps.CalibDataRestoreConfigurationParam.CalibData8 = GlobalRef.CalibData_chunkID_0[9];
            ScriptOps.CalibDataRestoreConfigurationParam.CalibData9 = GlobalRef.CalibData_chunkID_0[10];
            ScriptOps.CalibDataRestoreConfigurationParam.CalibData10 = GlobalRef.CalibData_chunkID_0[11];
            ScriptOps.CalibDataRestoreConfigurationParam.CalibData11 = GlobalRef.CalibData_chunkID_0[12];
            ScriptOps.CalibDataRestoreConfigurationParam.CalibData12 = GlobalRef.CalibData_chunkID_0[13];
            ScriptOps.CalibDataRestoreConfigurationParam.CalibData13 = GlobalRef.CalibData_chunkID_0[14];
            ScriptOps.CalibDataRestoreConfigurationParam.CalibData14 = GlobalRef.CalibData_chunkID_0[15];
            ScriptOps.CalibDataRestoreConfigurationParam.CalibData15 = GlobalRef.CalibData_chunkID_0[16];
            ScriptOps.CalibDataRestoreConfigurationParam.CalibData16 = GlobalRef.CalibData_chunkID_0[17];
            ScriptOps.CalibDataRestoreConfigurationParam.CalibData17 = GlobalRef.CalibData_chunkID_0[18];
            ScriptOps.CalibDataRestoreConfigurationParam.CalibData18 = GlobalRef.CalibData_chunkID_0[19];
            ScriptOps.CalibDataRestoreConfigurationParam.CalibData19 = GlobalRef.CalibData_chunkID_0[20];
            ScriptOps.CalibDataRestoreConfigurationParam.CalibData20 = GlobalRef.CalibData_chunkID_0[21];
            ScriptOps.CalibDataRestoreConfigurationParam.CalibData21 = GlobalRef.CalibData_chunkID_0[22];
            ScriptOps.CalibDataRestoreConfigurationParam.CalibData22 = GlobalRef.CalibData_chunkID_0[23];
            ScriptOps.CalibDataRestoreConfigurationParam.CalibData23 = GlobalRef.CalibData_chunkID_0[24];
            ScriptOps.CalibDataRestoreConfigurationParam.CalibData24 = GlobalRef.CalibData_chunkID_0[25];
            ScriptOps.CalibDataRestoreConfigurationParam.CalibData25 = GlobalRef.CalibData_chunkID_0[26];
            ScriptOps.CalibDataRestoreConfigurationParam.CalibData26 = GlobalRef.CalibData_chunkID_0[27];
            ScriptOps.CalibDataRestoreConfigurationParam.CalibData27 = GlobalRef.CalibData_chunkID_0[28];
            ScriptOps.CalibDataRestoreConfigurationParam.CalibData28 = GlobalRef.CalibData_chunkID_0[29];
            ScriptOps.CalibDataRestoreConfigurationParam.CalibData29 = GlobalRef.CalibData_chunkID_0[30];
            ScriptOps.CalibDataRestoreConfigurationParam.CalibData30 = GlobalRef.CalibData_chunkID_0[31];
            ScriptOps.CalibDataRestoreConfigurationParam.CalibData31 = GlobalRef.CalibData_chunkID_0[32];
            ScriptOps.CalibDataRestoreConfigurationParam.CalibData32 = GlobalRef.CalibData_chunkID_0[33];
            ScriptOps.CalibDataRestoreConfigurationParam.CalibData33 = GlobalRef.CalibData_chunkID_0[34];
            ScriptOps.CalibDataRestoreConfigurationParam.CalibData34 = GlobalRef.CalibData_chunkID_0[35];
            ScriptOps.CalibDataRestoreConfigurationParam.CalibData35 = GlobalRef.CalibData_chunkID_0[36];
            ScriptOps.CalibDataRestoreConfigurationParam.CalibData36 = GlobalRef.CalibData_chunkID_0[37];
            ScriptOps.CalibDataRestoreConfigurationParam.CalibData37 = GlobalRef.CalibData_chunkID_0[38];
            ScriptOps.CalibDataRestoreConfigurationParam.CalibData38 = GlobalRef.CalibData_chunkID_0[39];
            ScriptOps.CalibDataRestoreConfigurationParam.CalibData39 = GlobalRef.CalibData_chunkID_0[40];
            ScriptOps.CalibDataRestoreConfigurationParam.CalibData40 = GlobalRef.CalibData_chunkID_0[41];
            ScriptOps.CalibDataRestoreConfigurationParam.CalibData41 = GlobalRef.CalibData_chunkID_0[42];
            ScriptOps.CalibDataRestoreConfigurationParam.CalibData42 = GlobalRef.CalibData_chunkID_0[43];
            ScriptOps.CalibDataRestoreConfigurationParam.CalibData43 = GlobalRef.CalibData_chunkID_0[44];
            ScriptOps.CalibDataRestoreConfigurationParam.CalibData44 = GlobalRef.CalibData_chunkID_0[45];
            ScriptOps.CalibDataRestoreConfigurationParam.CalibData45 = GlobalRef.CalibData_chunkID_0[46];
            ScriptOps.CalibDataRestoreConfigurationParam.CalibData46 = GlobalRef.CalibData_chunkID_0[47];
            ScriptOps.CalibDataRestoreConfigurationParam.CalibData47 = GlobalRef.CalibData_chunkID_0[48];
            ScriptOps.CalibDataRestoreConfigurationParam.CalibData48 = GlobalRef.CalibData_chunkID_0[49];
            ScriptOps.CalibDataRestoreConfigurationParam.CalibData49 = GlobalRef.CalibData_chunkID_0[50];
            ScriptOps.CalibDataRestoreConfigurationParam.CalibData50 = GlobalRef.CalibData_chunkID_0[51];
            ScriptOps.CalibDataRestoreConfigurationParam.CalibData51 = GlobalRef.CalibData_chunkID_0[52];
            ScriptOps.CalibDataRestoreConfigurationParam.CalibData52 = GlobalRef.CalibData_chunkID_0[53];
            ScriptOps.CalibDataRestoreConfigurationParam.CalibData53 = GlobalRef.CalibData_chunkID_0[54];
            ScriptOps.CalibDataRestoreConfigurationParam.CalibData54 = GlobalRef.CalibData_chunkID_0[55];
            ScriptOps.CalibDataRestoreConfigurationParam.CalibData55 = GlobalRef.CalibData_chunkID_0[56];
            ScriptOps.CalibDataRestoreConfigurationParam2.NumChunks = (ushort)(GlobalRef.CalibData_chunkID_0[57] & 65535U);
            ScriptOps.CalibDataRestoreConfigurationParam2.ChunkID = (ushort)(GlobalRef.CalibData_chunkID_0[57] >> 16);
            ScriptOps.CalibDataRestoreConfigurationParam2.CalibData0 = GlobalRef.CalibData_chunkID_0[58];
            ScriptOps.CalibDataRestoreConfigurationParam2.CalibData1 = GlobalRef.CalibData_chunkID_0[59];
            ScriptOps.CalibDataRestoreConfigurationParam2.CalibData2 = GlobalRef.CalibData_chunkID_0[60];
            ScriptOps.CalibDataRestoreConfigurationParam2.CalibData3 = GlobalRef.CalibData_chunkID_0[61];
            ScriptOps.CalibDataRestoreConfigurationParam2.CalibData4 = GlobalRef.CalibData_chunkID_0[62];
            ScriptOps.CalibDataRestoreConfigurationParam2.CalibData5 = GlobalRef.CalibData_chunkID_0[63];
            ScriptOps.CalibDataRestoreConfigurationParam2.CalibData6 = GlobalRef.CalibData_chunkID_0[64];
            ScriptOps.CalibDataRestoreConfigurationParam2.CalibData7 = GlobalRef.CalibData_chunkID_0[65];
            ScriptOps.CalibDataRestoreConfigurationParam2.CalibData8 = GlobalRef.CalibData_chunkID_0[66];
            ScriptOps.CalibDataRestoreConfigurationParam2.CalibData9 = GlobalRef.CalibData_chunkID_0[67];
            ScriptOps.CalibDataRestoreConfigurationParam2.CalibData10 = GlobalRef.CalibData_chunkID_0[68];
            ScriptOps.CalibDataRestoreConfigurationParam2.CalibData11 = GlobalRef.CalibData_chunkID_0[69];
            ScriptOps.CalibDataRestoreConfigurationParam2.CalibData12 = GlobalRef.CalibData_chunkID_0[70];
            ScriptOps.CalibDataRestoreConfigurationParam2.CalibData13 = GlobalRef.CalibData_chunkID_0[71];
            ScriptOps.CalibDataRestoreConfigurationParam2.CalibData14 = GlobalRef.CalibData_chunkID_0[72];
            ScriptOps.CalibDataRestoreConfigurationParam2.CalibData15 = GlobalRef.CalibData_chunkID_0[73];
            ScriptOps.CalibDataRestoreConfigurationParam2.CalibData16 = GlobalRef.CalibData_chunkID_0[74];
            ScriptOps.CalibDataRestoreConfigurationParam2.CalibData17 = GlobalRef.CalibData_chunkID_0[75];
            ScriptOps.CalibDataRestoreConfigurationParam2.CalibData18 = GlobalRef.CalibData_chunkID_0[76];
            ScriptOps.CalibDataRestoreConfigurationParam2.CalibData19 = GlobalRef.CalibData_chunkID_0[77];
            ScriptOps.CalibDataRestoreConfigurationParam2.CalibData20 = GlobalRef.CalibData_chunkID_0[78];
            ScriptOps.CalibDataRestoreConfigurationParam2.CalibData21 = GlobalRef.CalibData_chunkID_0[79];
            ScriptOps.CalibDataRestoreConfigurationParam2.CalibData22 = GlobalRef.CalibData_chunkID_0[80];
            ScriptOps.CalibDataRestoreConfigurationParam2.CalibData23 = GlobalRef.CalibData_chunkID_0[81];
            ScriptOps.CalibDataRestoreConfigurationParam2.CalibData24 = GlobalRef.CalibData_chunkID_0[82];
            ScriptOps.CalibDataRestoreConfigurationParam2.CalibData25 = GlobalRef.CalibData_chunkID_0[83];
            ScriptOps.CalibDataRestoreConfigurationParam2.CalibData26 = GlobalRef.CalibData_chunkID_0[84];
            ScriptOps.CalibDataRestoreConfigurationParam2.CalibData27 = GlobalRef.CalibData_chunkID_0[85];
            ScriptOps.CalibDataRestoreConfigurationParam2.CalibData28 = GlobalRef.CalibData_chunkID_0[86];
            ScriptOps.CalibDataRestoreConfigurationParam2.CalibData29 = GlobalRef.CalibData_chunkID_0[87];
            ScriptOps.CalibDataRestoreConfigurationParam2.CalibData30 = GlobalRef.CalibData_chunkID_0[88];
            ScriptOps.CalibDataRestoreConfigurationParam2.CalibData31 = GlobalRef.CalibData_chunkID_0[89];
            ScriptOps.CalibDataRestoreConfigurationParam2.CalibData32 = GlobalRef.CalibData_chunkID_0[90];
            ScriptOps.CalibDataRestoreConfigurationParam2.CalibData33 = GlobalRef.CalibData_chunkID_0[91];
            ScriptOps.CalibDataRestoreConfigurationParam2.CalibData34 = GlobalRef.CalibData_chunkID_0[92];
            ScriptOps.CalibDataRestoreConfigurationParam2.CalibData35 = GlobalRef.CalibData_chunkID_0[93];
            ScriptOps.CalibDataRestoreConfigurationParam2.CalibData36 = GlobalRef.CalibData_chunkID_0[94];
            ScriptOps.CalibDataRestoreConfigurationParam2.CalibData37 = GlobalRef.CalibData_chunkID_0[95];
            ScriptOps.CalibDataRestoreConfigurationParam2.CalibData38 = GlobalRef.CalibData_chunkID_0[96];
            ScriptOps.CalibDataRestoreConfigurationParam2.CalibData39 = GlobalRef.CalibData_chunkID_0[97];
            ScriptOps.CalibDataRestoreConfigurationParam2.CalibData40 = GlobalRef.CalibData_chunkID_0[98];
            ScriptOps.CalibDataRestoreConfigurationParam2.CalibData41 = GlobalRef.CalibData_chunkID_0[99];
            ScriptOps.CalibDataRestoreConfigurationParam2.CalibData42 = GlobalRef.CalibData_chunkID_0[100];
            ScriptOps.CalibDataRestoreConfigurationParam2.CalibData43 = GlobalRef.CalibData_chunkID_0[101];
            ScriptOps.CalibDataRestoreConfigurationParam2.CalibData44 = GlobalRef.CalibData_chunkID_0[102];
            ScriptOps.CalibDataRestoreConfigurationParam2.CalibData45 = GlobalRef.CalibData_chunkID_0[103];
            ScriptOps.CalibDataRestoreConfigurationParam2.CalibData46 = GlobalRef.CalibData_chunkID_0[104];
            ScriptOps.CalibDataRestoreConfigurationParam2.CalibData47 = GlobalRef.CalibData_chunkID_0[105];
            ScriptOps.CalibDataRestoreConfigurationParam2.CalibData48 = GlobalRef.CalibData_chunkID_0[106];
            ScriptOps.CalibDataRestoreConfigurationParam2.CalibData49 = GlobalRef.CalibData_chunkID_0[107];
            ScriptOps.CalibDataRestoreConfigurationParam2.CalibData50 = GlobalRef.CalibData_chunkID_0[108];
            ScriptOps.CalibDataRestoreConfigurationParam2.CalibData51 = GlobalRef.CalibData_chunkID_0[109];
            ScriptOps.CalibDataRestoreConfigurationParam2.CalibData52 = GlobalRef.CalibData_chunkID_0[110];
            ScriptOps.CalibDataRestoreConfigurationParam2.CalibData53 = GlobalRef.CalibData_chunkID_0[111];
            ScriptOps.CalibDataRestoreConfigurationParam2.CalibData54 = GlobalRef.CalibData_chunkID_0[112];
            ScriptOps.CalibDataRestoreConfigurationParam2.CalibData55 = GlobalRef.CalibData_chunkID_0[113];
            ScriptOps.CalibDataRestoreConfigurationParam3.NumChunks = (ushort)(GlobalRef.CalibData_chunkID_0[114] & 65535U);
            ScriptOps.CalibDataRestoreConfigurationParam3.ChunkID = (ushort)(GlobalRef.CalibData_chunkID_0[114] >> 16);
            ScriptOps.CalibDataRestoreConfigurationParam3.CalibData0 = GlobalRef.CalibData_chunkID_0[115];
            ScriptOps.CalibDataRestoreConfigurationParam3.CalibData1 = GlobalRef.CalibData_chunkID_0[116];
            ScriptOps.CalibDataRestoreConfigurationParam3.CalibData2 = GlobalRef.CalibData_chunkID_0[117];
            ScriptOps.CalibDataRestoreConfigurationParam3.CalibData3 = GlobalRef.CalibData_chunkID_0[118];
            ScriptOps.CalibDataRestoreConfigurationParam3.CalibData4 = GlobalRef.CalibData_chunkID_0[119];
            ScriptOps.CalibDataRestoreConfigurationParam3.CalibData5 = GlobalRef.CalibData_chunkID_0[120];
            ScriptOps.CalibDataRestoreConfigurationParam3.CalibData6 = GlobalRef.CalibData_chunkID_0[121];
            ScriptOps.CalibDataRestoreConfigurationParam3.CalibData7 = GlobalRef.CalibData_chunkID_0[122];
            ScriptOps.CalibDataRestoreConfigurationParam3.CalibData8 = GlobalRef.CalibData_chunkID_0[123];
            ScriptOps.CalibDataRestoreConfigurationParam3.CalibData9 = GlobalRef.CalibData_chunkID_0[124];
            ScriptOps.CalibDataRestoreConfigurationParam3.CalibData10 = GlobalRef.CalibData_chunkID_0[125];
            ScriptOps.CalibDataRestoreConfigurationParam3.CalibData11 = GlobalRef.CalibData_chunkID_0[126];
            ScriptOps.CalibDataRestoreConfigurationParam3.CalibData12 = GlobalRef.CalibData_chunkID_0[127];
            ScriptOps.CalibDataRestoreConfigurationParam3.CalibData13 = GlobalRef.CalibData_chunkID_0[128];
            ScriptOps.CalibDataRestoreConfigurationParam3.CalibData14 = GlobalRef.CalibData_chunkID_0[129];
            ScriptOps.CalibDataRestoreConfigurationParam3.CalibData15 = GlobalRef.CalibData_chunkID_0[130];
            ScriptOps.CalibDataRestoreConfigurationParam3.CalibData16 = GlobalRef.CalibData_chunkID_0[131];
            ScriptOps.CalibDataRestoreConfigurationParam3.CalibData17 = GlobalRef.CalibData_chunkID_0[132];
            ScriptOps.CalibDataRestoreConfigurationParam3.CalibData18 = GlobalRef.CalibData_chunkID_0[133];
            ScriptOps.CalibDataRestoreConfigurationParam3.CalibData19 = GlobalRef.CalibData_chunkID_0[134];
            ScriptOps.CalibDataRestoreConfigurationParam3.CalibData20 = GlobalRef.CalibData_chunkID_0[135];
            ScriptOps.CalibDataRestoreConfigurationParam3.CalibData21 = GlobalRef.CalibData_chunkID_0[136];
            ScriptOps.CalibDataRestoreConfigurationParam3.CalibData22 = GlobalRef.CalibData_chunkID_0[137];
            ScriptOps.CalibDataRestoreConfigurationParam3.CalibData23 = GlobalRef.CalibData_chunkID_0[138];
            ScriptOps.CalibDataRestoreConfigurationParam3.CalibData24 = GlobalRef.CalibData_chunkID_0[139];
            ScriptOps.CalibDataRestoreConfigurationParam3.CalibData25 = GlobalRef.CalibData_chunkID_0[140];
            ScriptOps.CalibDataRestoreConfigurationParam3.CalibData26 = GlobalRef.CalibData_chunkID_0[141];
            ScriptOps.CalibDataRestoreConfigurationParam3.CalibData27 = GlobalRef.CalibData_chunkID_0[142];
            ScriptOps.CalibDataRestoreConfigurationParam3.CalibData28 = GlobalRef.CalibData_chunkID_0[143];
            ScriptOps.CalibDataRestoreConfigurationParam3.CalibData29 = GlobalRef.CalibData_chunkID_0[144];
            ScriptOps.CalibDataRestoreConfigurationParam3.CalibData30 = GlobalRef.CalibData_chunkID_0[145];
            ScriptOps.CalibDataRestoreConfigurationParam3.CalibData31 = GlobalRef.CalibData_chunkID_0[146];
            ScriptOps.CalibDataRestoreConfigurationParam3.CalibData32 = GlobalRef.CalibData_chunkID_0[147];
            ScriptOps.CalibDataRestoreConfigurationParam3.CalibData33 = GlobalRef.CalibData_chunkID_0[148];
            ScriptOps.CalibDataRestoreConfigurationParam3.CalibData34 = GlobalRef.CalibData_chunkID_0[149];
            ScriptOps.CalibDataRestoreConfigurationParam3.CalibData35 = GlobalRef.CalibData_chunkID_0[150];
            ScriptOps.CalibDataRestoreConfigurationParam3.CalibData36 = GlobalRef.CalibData_chunkID_0[151];
            ScriptOps.CalibDataRestoreConfigurationParam3.CalibData37 = GlobalRef.CalibData_chunkID_0[152];
            ScriptOps.CalibDataRestoreConfigurationParam3.CalibData38 = GlobalRef.CalibData_chunkID_0[153];
            ScriptOps.CalibDataRestoreConfigurationParam3.CalibData39 = GlobalRef.CalibData_chunkID_0[154];
            ScriptOps.CalibDataRestoreConfigurationParam3.CalibData40 = GlobalRef.CalibData_chunkID_0[155];
            ScriptOps.CalibDataRestoreConfigurationParam3.CalibData41 = GlobalRef.CalibData_chunkID_0[156];
            ScriptOps.CalibDataRestoreConfigurationParam3.CalibData42 = GlobalRef.CalibData_chunkID_0[157];
            ScriptOps.CalibDataRestoreConfigurationParam3.CalibData43 = GlobalRef.CalibData_chunkID_0[158];
            ScriptOps.CalibDataRestoreConfigurationParam3.CalibData44 = GlobalRef.CalibData_chunkID_0[159];
            ScriptOps.CalibDataRestoreConfigurationParam3.CalibData45 = GlobalRef.CalibData_chunkID_0[160];
            ScriptOps.CalibDataRestoreConfigurationParam3.CalibData46 = GlobalRef.CalibData_chunkID_0[161];
            ScriptOps.CalibDataRestoreConfigurationParam3.CalibData47 = GlobalRef.CalibData_chunkID_0[162];
            ScriptOps.CalibDataRestoreConfigurationParam3.CalibData48 = GlobalRef.CalibData_chunkID_0[163];
            ScriptOps.CalibDataRestoreConfigurationParam3.CalibData49 = GlobalRef.CalibData_chunkID_0[164];
            ScriptOps.CalibDataRestoreConfigurationParam3.CalibData50 = GlobalRef.CalibData_chunkID_0[165];
            ScriptOps.CalibDataRestoreConfigurationParam3.CalibData51 = GlobalRef.CalibData_chunkID_0[166];
            ScriptOps.CalibDataRestoreConfigurationParam3.CalibData52 = GlobalRef.CalibData_chunkID_0[167];
            ScriptOps.CalibDataRestoreConfigurationParam3.CalibData53 = GlobalRef.CalibData_chunkID_0[168];
            ScriptOps.CalibDataRestoreConfigurationParam3.CalibData54 = GlobalRef.CalibData_chunkID_0[169];
            ScriptOps.CalibDataRestoreConfigurationParam3.CalibData55 = GlobalRef.CalibData_chunkID_0[170];
            IntPtr pChunk1CalibDataRestoreConfigurationData = GCHandle.Alloc(ScriptOps.CalibDataRestoreConfigurationParam, GCHandleType.Pinned).AddrOfPinnedObject();
            IntPtr pChunk2CalibDataRestoreConfigurationData = GCHandle.Alloc(ScriptOps.CalibDataRestoreConfigurationParam2, GCHandleType.Pinned).AddrOfPinnedObject();
            IntPtr pChunk3CalibDataRestoreConfigurationData = GCHandle.Alloc(ScriptOps.CalibDataRestoreConfigurationParam3, GCHandleType.Pinned).AddrOfPinnedObject();
            ScriptOps.CalibDataRestoreConfigurationPtrHandlerParam.pChunk1CalibDataRestoreConfigurationData = pChunk1CalibDataRestoreConfigurationData;
            ScriptOps.CalibDataRestoreConfigurationPtrHandlerParam.pChunk2CalibDataRestoreConfigurationData = pChunk2CalibDataRestoreConfigurationData;
            ScriptOps.CalibDataRestoreConfigurationPtrHandlerParam.pChunk3CalibDataRestoreConfigurationData = pChunk3CalibDataRestoreConfigurationData;
            GCHandle.Alloc(ScriptOps.CalibDataRestoreConfigurationPtrHandlerParam, GCHandleType.Pinned).AddrOfPinnedObject();
            IntPtr inData = GCHandle.Alloc(GlobalRef.CalibData_chunkID_0, GCHandleType.Pinned).AddrOfPinnedObject();
            int num;
            if (GlobalRef.g_NtvRS232Connect[(int)GlobalRef.g_RadarDeviceIndex] && GlobalRef.g_CasCadeDeviceSpiConnect == 0U)
            {
                num = m_TsWrapper.Calling_WriteAddr_Single(4294959848U, 1U);
                if (m_GuiManager.DllOps.itempDisconnect(false) == 0)
                {
                    string full_command = string.Format("Debug Port Disconnected", new object[0]);
                    m_GuiManager.RecordLog(0, full_command);
                    if (!GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
                    {
                        iRs232ConnectDisconnect_impl();
                    }
                }
            }
            Thread.Sleep(200);
            if (m_RadarDeviceModeConfigParams.NumberOfRadarDevicesDetected <= 1)
            {
                string full_command2 = string.Format("ar1.SetCalibDataRestoreConfig({0}, {1}, \"{2}\")", new object[]
                {
                    m_CalibDataRestoreConfigParams.ChunkID,
                    m_CalibDataRestoreConfigParams.NumChunks,
                    m_PhaseShiftAndCalibFilePathParams.CalibStoreRestorePath
                });
                m_GuiManager.RecordLog(15, full_command2);
            }
            else
            {
                string full_command3 = string.Format("ar1.SetCalibDataRestoreConfig_mult({0}, {1}, {2}, \"{3}\")", new object[]
                {
                    GlobalRef.g_RadarDeviceId,
                    m_CalibDataRestoreConfigParams.ChunkID,
                    m_CalibDataRestoreConfigParams.NumChunks,
                    m_PhaseShiftAndCalibFilePathParams.CalibStoreRestorePath
                });
                m_GuiManager.RecordLog(15, full_command3);
            }
            GlobalRef.g_RFInitStatus = 0U;
            num = Imports.RadarLinkImpl_RfCalibDataRestore((byte)GlobalRef.g_RadarDeviceId, inData);
            ushort num2 = 0;
            while (GlobalRef.g_RFInitStatus == 0U)
            {
                Thread.Sleep(100);
                num2 += 1;
                if (num2 > 30)
                {
                    string msg = string.Format("RF Init response from the device timed out!", new object[0]);
                    GlobalRef.LuaWrapper.PrintError(msg);
                    return -1;
                }
            }
            if ((num == 0 && ((GlobalRef.g_CasCadeDeviceSpiConnect & 1U) == 1U || (GlobalRef.g_CasCadeDeviceSpiConnect & 2U) == 2U || (GlobalRef.g_CasCadeDeviceSpiConnect & 4U) == 4U || (GlobalRef.g_CasCadeDeviceSpiConnect & 8U) == 8U)) || GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
            {
                string full_command4 = string.Format("Status: Passed", new object[0]);
                m_GuiManager.RecordLog(8, full_command4);
            }
            else
            {
                string msg2 = string.Format("Status: Failed, Error Type: {0}", new object[]
                {
                    GetErrorType(num)
                });
                GlobalRef.LuaWrapper.PrintError(msg2);
            }
            if (GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
            {
                if (iRs232ConnectDisconnect_impl() == 0 && !GlobalRef.g_NtvRS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
                {
                    m_GuiManager.DllOps.iConnect(1U, 0U);
                    string full_command5 = string.Format("Debug Port Reconnected!", new object[0]);
                    m_GuiManager.RecordLog(9, full_command5);
                    ScriptOps.KeepTrying(2000, new Func<bool>(spare_read));
                }
            }
            else if (GlobalRef.g_CasCadeDeviceSpiConnect == 0U)
            {
                string full_command6 = string.Format("Error Occurred in Port open close", new object[0]);
                m_GuiManager.RecordLog(9, full_command6);
            }
            return num;
        }

        private int iphaseShifterCalibDataRestoreConfig_Impl(bool is_starting_op, bool is_ending_op)
        {
            PhaseShifterClalibSetConfigParam.tx0Index = (byte)GlobalRef.PhaseShitCalibData[0];
            PhaseShifterClalibSetConfigParam.f000029 = (byte)GlobalRef.PhaseShitCalibData[1];
            PhaseShifterClalibSetConfigParam.f00002a = GlobalRef.PhaseShitCalibData[2];
            PhaseShifterClalibSetConfigParam.f00002b = GlobalRef.PhaseShitCalibData[3];
            PhaseShifterClalibSetConfigParam.f00002c = GlobalRef.PhaseShitCalibData[4];
            PhaseShifterClalibSetConfigParam.f00002d = GlobalRef.PhaseShitCalibData[5];
            PhaseShifterClalibSetConfigParam.f00002e = GlobalRef.PhaseShitCalibData[6];
            PhaseShifterClalibSetConfigParam.f00002f = GlobalRef.PhaseShitCalibData[7];
            PhaseShifterClalibSetConfigParam.f000030 = GlobalRef.PhaseShitCalibData[8];
            PhaseShifterClalibSetConfigParam.f000031 = GlobalRef.PhaseShitCalibData[9];
            PhaseShifterClalibSetConfigParam.f000032 = GlobalRef.PhaseShitCalibData[10];
            PhaseShifterClalibSetConfigParam.f000033 = GlobalRef.PhaseShitCalibData[11];
            PhaseShifterClalibSetConfigParam.f000034 = GlobalRef.PhaseShitCalibData[12];
            PhaseShifterClalibSetConfigParam.f000035 = GlobalRef.PhaseShitCalibData[13];
            PhaseShifterClalibSetConfigParam.f000036 = GlobalRef.PhaseShitCalibData[14];
            PhaseShifterClalibSetConfigParam.f000037 = GlobalRef.PhaseShitCalibData[15];
            PhaseShifterClalibSetConfigParam.f000038 = GlobalRef.PhaseShitCalibData[16];
            PhaseShifterClalibSetConfigParam.f000039 = GlobalRef.PhaseShitCalibData[17];
            PhaseShifterClalibSetConfigParam.f00003a = GlobalRef.PhaseShitCalibData[18];
            PhaseShifterClalibSetConfigParam.f00003b = GlobalRef.PhaseShitCalibData[19];
            PhaseShifterClalibSetConfigParam.f00003c = GlobalRef.PhaseShitCalibData[20];
            PhaseShifterClalibSetConfigParam.f00003d = GlobalRef.PhaseShitCalibData[21];
            PhaseShifterClalibSetConfigParam.f00003e = GlobalRef.PhaseShitCalibData[22];
            PhaseShifterClalibSetConfigParam.f00003f = GlobalRef.PhaseShitCalibData[23];
            PhaseShifterClalibSetConfigParam.f000040 = GlobalRef.PhaseShitCalibData[24];
            PhaseShifterClalibSetConfigParam.f000041 = GlobalRef.PhaseShitCalibData[25];
            PhaseShifterClalibSetConfigParam.f000042 = GlobalRef.PhaseShitCalibData[26];
            PhaseShifterClalibSetConfigParam.f000043 = GlobalRef.PhaseShitCalibData[27];
            PhaseShifterClalibSetConfigParam.f000044 = GlobalRef.PhaseShitCalibData[28];
            PhaseShifterClalibSetConfigParam.f000045 = GlobalRef.PhaseShitCalibData[29];
            PhaseShifterClalibSetConfigParam.f000046 = GlobalRef.PhaseShitCalibData[30];
            PhaseShifterClalibSetConfigParam.f000047 = GlobalRef.PhaseShitCalibData[31];
            PhaseShifterClalibSetConfigParam.f000048 = GlobalRef.PhaseShitCalibData[32];
            PhaseShifterClalibSetConfigParam.f000049 = GlobalRef.PhaseShitCalibData[33];
            PhaseShifterClalibSetConfigParam.f00004a = GlobalRef.PhaseShitCalibData[34];
            PhaseShifterClalibSetConfigParam.f00004b = GlobalRef.PhaseShitCalibData[35];
            PhaseShifterClalibSetConfigParam.f00004c = GlobalRef.PhaseShitCalibData[36];
            PhaseShifterClalibSetConfigParam.f00004d = GlobalRef.PhaseShitCalibData[37];
            PhaseShifterClalibSetConfigParam.f00004e = GlobalRef.PhaseShitCalibData[38];
            PhaseShifterClalibSetConfigParam.f00004f = GlobalRef.PhaseShitCalibData[39];
            PhaseShifterClalibSetConfigParam.f000050 = GlobalRef.PhaseShitCalibData[40];
            PhaseShifterClalibSetConfigParam.f000051 = GlobalRef.PhaseShitCalibData[41];
            PhaseShifterClalibSetConfigParam.f000052 = GlobalRef.PhaseShitCalibData[42];
            PhaseShifterClalibSetConfigParam.f000053 = GlobalRef.PhaseShitCalibData[43];
            PhaseShifterClalibSetConfigParam.f000054 = GlobalRef.PhaseShitCalibData[44];
            PhaseShifterClalibSetConfigParam.f000055 = GlobalRef.PhaseShitCalibData[45];
            PhaseShifterClalibSetConfigParam.f000056 = GlobalRef.PhaseShitCalibData[46];
            PhaseShifterClalibSetConfigParam.f000057 = GlobalRef.PhaseShitCalibData[47];
            PhaseShifterClalibSetConfigParam.f000058 = GlobalRef.PhaseShitCalibData[48];
            PhaseShifterClalibSetConfigParam.f000059 = GlobalRef.PhaseShitCalibData[49];
            PhaseShifterClalibSetConfigParam.f00005a = GlobalRef.PhaseShitCalibData[50];
            PhaseShifterClalibSetConfigParam.f00005b = GlobalRef.PhaseShitCalibData[51];
            PhaseShifterClalibSetConfigParam.f00005c = GlobalRef.PhaseShitCalibData[52];
            PhaseShifterClalibSetConfigParam.f00005d = GlobalRef.PhaseShitCalibData[53];
            PhaseShifterClalibSetConfigParam.f00005e = GlobalRef.PhaseShitCalibData[54];
            PhaseShifterClalibSetConfigParam.f00005f = GlobalRef.PhaseShitCalibData[55];
            PhaseShifterClalibSetConfigParam.f000060 = GlobalRef.PhaseShitCalibData[56];
            PhaseShifterClalibSetConfigParam.f000061 = GlobalRef.PhaseShitCalibData[57];
            PhaseShifterClalibSetConfigParam.f000062 = GlobalRef.PhaseShitCalibData[58];
            PhaseShifterClalibSetConfigParam.f000063 = GlobalRef.PhaseShitCalibData[59];
            PhaseShifterClalibSetConfigParam.f000064 = GlobalRef.PhaseShitCalibData[60];
            PhaseShifterClalibSetConfigParam.f000065 = GlobalRef.PhaseShitCalibData[61];
            PhaseShifterClalibSetConfigParam.f000066 = GlobalRef.PhaseShitCalibData[62];
            PhaseShifterClalibSetConfigParam.f000067 = GlobalRef.PhaseShitCalibData[63];
            PhaseShifterClalibSetConfigParam.f000068 = GlobalRef.PhaseShitCalibData[64];
            PhaseShifterClalibSetConfigParam.f000069 = GlobalRef.PhaseShitCalibData[65];
            PhaseShifterClalibSetConfigParam.tx0Reserved = GlobalRef.PhaseShitCalibData[66];
            PhaseShifterClalibSetConfigParam.tx1Index = (byte)GlobalRef.PhaseShitCalibData[67];
            PhaseShifterClalibSetConfigParam.f00006a = (byte)GlobalRef.PhaseShitCalibData[68];
            PhaseShifterClalibSetConfigParam.f00006b = GlobalRef.PhaseShitCalibData[69];
            PhaseShifterClalibSetConfigParam.f00006c = GlobalRef.PhaseShitCalibData[70];
            PhaseShifterClalibSetConfigParam.f00006d = GlobalRef.PhaseShitCalibData[71];
            PhaseShifterClalibSetConfigParam.f00006e = GlobalRef.PhaseShitCalibData[72];
            PhaseShifterClalibSetConfigParam.f00006f = GlobalRef.PhaseShitCalibData[73];
            PhaseShifterClalibSetConfigParam.f000070 = GlobalRef.PhaseShitCalibData[74];
            PhaseShifterClalibSetConfigParam.f000071 = GlobalRef.PhaseShitCalibData[75];
            PhaseShifterClalibSetConfigParam.f000072 = GlobalRef.PhaseShitCalibData[76];
            PhaseShifterClalibSetConfigParam.f000073 = GlobalRef.PhaseShitCalibData[77];
            PhaseShifterClalibSetConfigParam.f000074 = GlobalRef.PhaseShitCalibData[78];
            PhaseShifterClalibSetConfigParam.f000075 = GlobalRef.PhaseShitCalibData[79];
            PhaseShifterClalibSetConfigParam.f000076 = GlobalRef.PhaseShitCalibData[80];
            PhaseShifterClalibSetConfigParam.f000077 = GlobalRef.PhaseShitCalibData[81];
            PhaseShifterClalibSetConfigParam.f000078 = GlobalRef.PhaseShitCalibData[82];
            PhaseShifterClalibSetConfigParam.f000079 = GlobalRef.PhaseShitCalibData[83];
            PhaseShifterClalibSetConfigParam.f00007a = GlobalRef.PhaseShitCalibData[84];
            PhaseShifterClalibSetConfigParam.f00007b = GlobalRef.PhaseShitCalibData[85];
            PhaseShifterClalibSetConfigParam.f00007c = GlobalRef.PhaseShitCalibData[86];
            PhaseShifterClalibSetConfigParam.f00007d = GlobalRef.PhaseShitCalibData[87];
            PhaseShifterClalibSetConfigParam.f00007e = GlobalRef.PhaseShitCalibData[88];
            PhaseShifterClalibSetConfigParam.f00007f = GlobalRef.PhaseShitCalibData[89];
            PhaseShifterClalibSetConfigParam.f000080 = GlobalRef.PhaseShitCalibData[90];
            PhaseShifterClalibSetConfigParam.f000081 = GlobalRef.PhaseShitCalibData[91];
            PhaseShifterClalibSetConfigParam.f000082 = GlobalRef.PhaseShitCalibData[92];
            PhaseShifterClalibSetConfigParam.f000083 = GlobalRef.PhaseShitCalibData[93];
            PhaseShifterClalibSetConfigParam.f000084 = GlobalRef.PhaseShitCalibData[94];
            PhaseShifterClalibSetConfigParam.f000085 = GlobalRef.PhaseShitCalibData[95];
            PhaseShifterClalibSetConfigParam.f000086 = GlobalRef.PhaseShitCalibData[96];
            PhaseShifterClalibSetConfigParam.f000087 = GlobalRef.PhaseShitCalibData[97];
            PhaseShifterClalibSetConfigParam.f000088 = GlobalRef.PhaseShitCalibData[98];
            PhaseShifterClalibSetConfigParam.f000089 = GlobalRef.PhaseShitCalibData[99];
            PhaseShifterClalibSetConfigParam.f00008a = GlobalRef.PhaseShitCalibData[100];
            PhaseShifterClalibSetConfigParam.f00008b = GlobalRef.PhaseShitCalibData[101];
            PhaseShifterClalibSetConfigParam.f00008c = GlobalRef.PhaseShitCalibData[102];
            PhaseShifterClalibSetConfigParam.f00008d = GlobalRef.PhaseShitCalibData[103];
            PhaseShifterClalibSetConfigParam.f00008e = GlobalRef.PhaseShitCalibData[104];
            PhaseShifterClalibSetConfigParam.f00008f = GlobalRef.PhaseShitCalibData[105];
            PhaseShifterClalibSetConfigParam.f000090 = GlobalRef.PhaseShitCalibData[106];
            PhaseShifterClalibSetConfigParam.f000091 = GlobalRef.PhaseShitCalibData[107];
            PhaseShifterClalibSetConfigParam.f000092 = GlobalRef.PhaseShitCalibData[108];
            PhaseShifterClalibSetConfigParam.f000093 = GlobalRef.PhaseShitCalibData[109];
            PhaseShifterClalibSetConfigParam.f000094 = GlobalRef.PhaseShitCalibData[110];
            PhaseShifterClalibSetConfigParam.f000095 = GlobalRef.PhaseShitCalibData[111];
            PhaseShifterClalibSetConfigParam.f000096 = GlobalRef.PhaseShitCalibData[112];
            PhaseShifterClalibSetConfigParam.f000097 = GlobalRef.PhaseShitCalibData[113];
            PhaseShifterClalibSetConfigParam.f000098 = GlobalRef.PhaseShitCalibData[114];
            PhaseShifterClalibSetConfigParam.f000099 = GlobalRef.PhaseShitCalibData[115];
            PhaseShifterClalibSetConfigParam.f00009a = GlobalRef.PhaseShitCalibData[116];
            PhaseShifterClalibSetConfigParam.f00009b = GlobalRef.PhaseShitCalibData[117];
            PhaseShifterClalibSetConfigParam.f00009c = GlobalRef.PhaseShitCalibData[118];
            PhaseShifterClalibSetConfigParam.f00009d = GlobalRef.PhaseShitCalibData[119];
            PhaseShifterClalibSetConfigParam.f00009e = GlobalRef.PhaseShitCalibData[120];
            PhaseShifterClalibSetConfigParam.f00009f = GlobalRef.PhaseShitCalibData[121];
            PhaseShifterClalibSetConfigParam.f0000a0 = GlobalRef.PhaseShitCalibData[122];
            PhaseShifterClalibSetConfigParam.f0000a1 = GlobalRef.PhaseShitCalibData[123];
            PhaseShifterClalibSetConfigParam.f0000a2 = GlobalRef.PhaseShitCalibData[124];
            PhaseShifterClalibSetConfigParam.f0000a3 = GlobalRef.PhaseShitCalibData[125];
            PhaseShifterClalibSetConfigParam.f0000a4 = GlobalRef.PhaseShitCalibData[126];
            PhaseShifterClalibSetConfigParam.f0000a5 = GlobalRef.PhaseShitCalibData[127];
            PhaseShifterClalibSetConfigParam.f0000a6 = GlobalRef.PhaseShitCalibData[128];
            PhaseShifterClalibSetConfigParam.f0000a7 = GlobalRef.PhaseShitCalibData[129];
            PhaseShifterClalibSetConfigParam.f0000a8 = GlobalRef.PhaseShitCalibData[130];
            PhaseShifterClalibSetConfigParam.f0000a9 = GlobalRef.PhaseShitCalibData[131];
            PhaseShifterClalibSetConfigParam.f0000aa = GlobalRef.PhaseShitCalibData[132];
            PhaseShifterClalibSetConfigParam.Tx1Reserved = GlobalRef.PhaseShitCalibData[133];
            PhaseShifterClalibSetConfigParam.tx2Index = (byte)GlobalRef.PhaseShitCalibData[134];
            PhaseShifterClalibSetConfigParam.f0000ab = (byte)GlobalRef.PhaseShitCalibData[135];
            PhaseShifterClalibSetConfigParam.f0000ac = GlobalRef.PhaseShitCalibData[136];
            PhaseShifterClalibSetConfigParam.f0000ad = GlobalRef.PhaseShitCalibData[137];
            PhaseShifterClalibSetConfigParam.f0000ae = GlobalRef.PhaseShitCalibData[138];
            PhaseShifterClalibSetConfigParam.f0000af = GlobalRef.PhaseShitCalibData[139];
            PhaseShifterClalibSetConfigParam.f0000b0 = GlobalRef.PhaseShitCalibData[140];
            PhaseShifterClalibSetConfigParam.f0000b1 = GlobalRef.PhaseShitCalibData[141];
            PhaseShifterClalibSetConfigParam.f0000b2 = GlobalRef.PhaseShitCalibData[142];
            PhaseShifterClalibSetConfigParam.f0000b3 = GlobalRef.PhaseShitCalibData[143];
            PhaseShifterClalibSetConfigParam.f0000b4 = GlobalRef.PhaseShitCalibData[144];
            PhaseShifterClalibSetConfigParam.f0000b5 = GlobalRef.PhaseShitCalibData[145];
            PhaseShifterClalibSetConfigParam.f0000b6 = GlobalRef.PhaseShitCalibData[146];
            PhaseShifterClalibSetConfigParam.f0000b7 = GlobalRef.PhaseShitCalibData[147];
            PhaseShifterClalibSetConfigParam.f0000b8 = GlobalRef.PhaseShitCalibData[148];
            PhaseShifterClalibSetConfigParam.f0000b9 = GlobalRef.PhaseShitCalibData[149];
            PhaseShifterClalibSetConfigParam.f0000ba = GlobalRef.PhaseShitCalibData[150];
            PhaseShifterClalibSetConfigParam.f0000bb = GlobalRef.PhaseShitCalibData[151];
            PhaseShifterClalibSetConfigParam.f0000bc = GlobalRef.PhaseShitCalibData[152];
            PhaseShifterClalibSetConfigParam.f0000bd = GlobalRef.PhaseShitCalibData[153];
            PhaseShifterClalibSetConfigParam.f0000be = GlobalRef.PhaseShitCalibData[154];
            PhaseShifterClalibSetConfigParam.f0000bf = GlobalRef.PhaseShitCalibData[155];
            PhaseShifterClalibSetConfigParam.f0000c0 = GlobalRef.PhaseShitCalibData[156];
            PhaseShifterClalibSetConfigParam.f0000c1 = GlobalRef.PhaseShitCalibData[157];
            PhaseShifterClalibSetConfigParam.f0000c2 = GlobalRef.PhaseShitCalibData[158];
            PhaseShifterClalibSetConfigParam.f0000c3 = GlobalRef.PhaseShitCalibData[159];
            PhaseShifterClalibSetConfigParam.f0000c4 = GlobalRef.PhaseShitCalibData[160];
            PhaseShifterClalibSetConfigParam.f0000c5 = GlobalRef.PhaseShitCalibData[161];
            PhaseShifterClalibSetConfigParam.f0000c6 = GlobalRef.PhaseShitCalibData[162];
            PhaseShifterClalibSetConfigParam.f0000c7 = GlobalRef.PhaseShitCalibData[163];
            PhaseShifterClalibSetConfigParam.f0000c8 = GlobalRef.PhaseShitCalibData[164];
            PhaseShifterClalibSetConfigParam.f0000c9 = GlobalRef.PhaseShitCalibData[165];
            PhaseShifterClalibSetConfigParam.f0000ca = GlobalRef.PhaseShitCalibData[166];
            PhaseShifterClalibSetConfigParam.f0000cb = GlobalRef.PhaseShitCalibData[167];
            PhaseShifterClalibSetConfigParam.f0000cc = GlobalRef.PhaseShitCalibData[168];
            PhaseShifterClalibSetConfigParam.f0000cd = GlobalRef.PhaseShitCalibData[169];
            PhaseShifterClalibSetConfigParam.f0000ce = GlobalRef.PhaseShitCalibData[170];
            PhaseShifterClalibSetConfigParam.f0000cf = GlobalRef.PhaseShitCalibData[171];
            PhaseShifterClalibSetConfigParam.f0000d0 = GlobalRef.PhaseShitCalibData[172];
            PhaseShifterClalibSetConfigParam.f0000d1 = GlobalRef.PhaseShitCalibData[173];
            PhaseShifterClalibSetConfigParam.f0000d2 = GlobalRef.PhaseShitCalibData[174];
            PhaseShifterClalibSetConfigParam.f0000d3 = GlobalRef.PhaseShitCalibData[175];
            PhaseShifterClalibSetConfigParam.f0000d4 = GlobalRef.PhaseShitCalibData[176];
            PhaseShifterClalibSetConfigParam.f0000d5 = GlobalRef.PhaseShitCalibData[177];
            PhaseShifterClalibSetConfigParam.f0000d6 = GlobalRef.PhaseShitCalibData[178];
            PhaseShifterClalibSetConfigParam.f0000d7 = GlobalRef.PhaseShitCalibData[179];
            PhaseShifterClalibSetConfigParam.f0000d8 = GlobalRef.PhaseShitCalibData[180];
            PhaseShifterClalibSetConfigParam.f0000d9 = GlobalRef.PhaseShitCalibData[181];
            PhaseShifterClalibSetConfigParam.f0000da = GlobalRef.PhaseShitCalibData[182];
            PhaseShifterClalibSetConfigParam.f0000db = GlobalRef.PhaseShitCalibData[183];
            PhaseShifterClalibSetConfigParam.f0000dc = GlobalRef.PhaseShitCalibData[184];
            PhaseShifterClalibSetConfigParam.f0000dd = GlobalRef.PhaseShitCalibData[185];
            PhaseShifterClalibSetConfigParam.f0000de = GlobalRef.PhaseShitCalibData[186];
            PhaseShifterClalibSetConfigParam.f0000df = GlobalRef.PhaseShitCalibData[187];
            PhaseShifterClalibSetConfigParam.f0000e0 = GlobalRef.PhaseShitCalibData[188];
            PhaseShifterClalibSetConfigParam.f0000e1 = GlobalRef.PhaseShitCalibData[189];
            PhaseShifterClalibSetConfigParam.f0000e2 = GlobalRef.PhaseShitCalibData[190];
            PhaseShifterClalibSetConfigParam.f0000e3 = GlobalRef.PhaseShitCalibData[191];
            PhaseShifterClalibSetConfigParam.f0000e4 = GlobalRef.PhaseShitCalibData[192];
            PhaseShifterClalibSetConfigParam.f0000e5 = GlobalRef.PhaseShitCalibData[193];
            PhaseShifterClalibSetConfigParam.f0000e6 = GlobalRef.PhaseShitCalibData[194];
            PhaseShifterClalibSetConfigParam.f0000e7 = GlobalRef.PhaseShitCalibData[195];
            PhaseShifterClalibSetConfigParam.f0000e8 = GlobalRef.PhaseShitCalibData[196];
            PhaseShifterClalibSetConfigParam.f0000e9 = GlobalRef.PhaseShitCalibData[197];
            PhaseShifterClalibSetConfigParam.f0000ea = GlobalRef.PhaseShitCalibData[198];
            PhaseShifterClalibSetConfigParam.f0000eb = GlobalRef.PhaseShitCalibData[199];
            PhaseShifterClalibSetConfigParam.Tx2Reserved = GlobalRef.PhaseShitCalibData[200];
            IntPtr inData = GCHandle.Alloc(PhaseShifterClalibSetConfigParam, GCHandleType.Pinned).AddrOfPinnedObject();
            GCHandle.Alloc(ScriptOps.CalibDataRestoreConfigurationParam2, GCHandleType.Pinned).AddrOfPinnedObject();
            GCHandle.Alloc(ScriptOps.CalibDataRestoreConfigurationParam3, GCHandleType.Pinned).AddrOfPinnedObject();
            GCHandle.Alloc(GlobalRef.PhaseShitCalibData, GCHandleType.Pinned).AddrOfPinnedObject();
            int num;
            if (GlobalRef.g_NtvRS232Connect[(int)GlobalRef.g_RadarDeviceIndex] && GlobalRef.g_CasCadeDeviceSpiConnect == 0U)
            {
                num = m_TsWrapper.Calling_WriteAddr_Single(4294959848U, 1U);
                if (m_GuiManager.DllOps.itempDisconnect(false) == 0)
                {
                    string full_command = string.Format("Debug Port Disconnected", new object[0]);
                    m_GuiManager.RecordLog(0, full_command);
                    if (!GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
                    {
                        iRs232ConnectDisconnect_impl();
                    }
                }
            }
            if (m_RadarDeviceModeConfigParams.NumberOfRadarDevicesDetected <= 1)
            {
                string full_command2 = string.Format("ar1.rlRfPhShifterCalibDataRestore({0}, {1}, {2}, \"{3}\")", new object[]
                {
                    PhaseShifterClalibSetConfigParam.tx0Reserved,
                    PhaseShifterClalibSetConfigParam.Tx1Reserved,
                    PhaseShifterClalibSetConfigParam.Tx2Reserved,
                    m_PhaseShiftAndCalibFilePathParams.PhaseShifterCalibStoreRestorePath
                });
                m_GuiManager.RecordLog(15, full_command2);
            }
            else
            {
                string full_command3 = string.Format("ar1.rlRfPhShifterCalibDataRestore_mult({0}, {1}, {2}, {3}, \"{4}\")", new object[]
                {
                    GlobalRef.g_RadarDeviceId,
                    PhaseShifterClalibSetConfigParam.tx0Reserved,
                    PhaseShifterClalibSetConfigParam.Tx1Reserved,
                    PhaseShifterClalibSetConfigParam.Tx2Reserved,
                    m_PhaseShiftAndCalibFilePathParams.PhaseShifterCalibStoreRestorePath
                });
                m_GuiManager.RecordLog(15, full_command3);
            }
            num = Imports.RadarLinkImpl_RfPhShiftCalibDataRestore((byte)GlobalRef.g_RadarDeviceId, inData);
            if ((num == 0 && ((GlobalRef.g_CasCadeDeviceSpiConnect & 1U) == 1U || (GlobalRef.g_CasCadeDeviceSpiConnect & 2U) == 2U || (GlobalRef.g_CasCadeDeviceSpiConnect & 4U) == 4U || (GlobalRef.g_CasCadeDeviceSpiConnect & 8U) == 8U)) || GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
            {
                string full_command4 = string.Format("Status: Passed", new object[0]);
                m_GuiManager.RecordLog(8, full_command4);
            }
            else
            {
                string msg = string.Format("Status: Failed, Error Type: {0}", new object[]
                {
                    GetErrorType(num)
                });
                GlobalRef.LuaWrapper.PrintError(msg);
            }
            if (GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex] && iRs232ConnectDisconnect_impl() == 0 && !GlobalRef.g_NtvRS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
            {
                m_GuiManager.DllOps.iConnect(1U, 0U);
                string full_command5 = string.Format("Debug Port Reconnected!", new object[0]);
                m_GuiManager.RecordLog(9, full_command5);
                ScriptOps.KeepTrying(2000, new Func<bool>(spare_read));
            }
            return num;
        }

        private int iInterChirpBlockControlsConfig_Impl(bool is_starting_op, bool is_ending_op)
        {
            InterChirpBlockControlsConfigurationParam.Rx02RFTurnOffTime = (ushort)(m_InterChirpBlockControlsConfigParams.Rx02RFTurnOffTime * 100.0);
            InterChirpBlockControlsConfigurationParam.Rx13RFTurnOffTime = (ushort)(m_InterChirpBlockControlsConfigParams.Rx13RFTurnOffTime * 100.0);
            InterChirpBlockControlsConfigurationParam.Rx02BBTurnOffTime = (ushort)(m_InterChirpBlockControlsConfigParams.Rx02BBTurnOffTime * 100.0);
            InterChirpBlockControlsConfigurationParam.Rx13BBTurnOffTime = (ushort)(m_InterChirpBlockControlsConfigParams.Rx13BBTurnOffTime * 100.0);
            InterChirpBlockControlsConfigurationParam.Rx02RFPreEnableTime = (ushort)(m_InterChirpBlockControlsConfigParams.Rx02RFPreEnableTime * 100.0);
            InterChirpBlockControlsConfigurationParam.Rx24RFPreEnableTime = (ushort)(m_InterChirpBlockControlsConfigParams.Rx24RFPreEnableTime * 100.0);
            InterChirpBlockControlsConfigurationParam.Rx02BBPreEnableTime = (ushort)(m_InterChirpBlockControlsConfigParams.Rx02BBPreEnableTime * 100.0);
            InterChirpBlockControlsConfigurationParam.Rx13BBPreEnableTime = (ushort)(m_InterChirpBlockControlsConfigParams.Rx13BBPreEnableTime * 100.0);
            InterChirpBlockControlsConfigurationParam.Rx02RFTurnOnTime = (ushort)(m_InterChirpBlockControlsConfigParams.Rx02RFTurnOnTime * 100.0);
            InterChirpBlockControlsConfigurationParam.Rx13RFTurnOnTime = (ushort)(m_InterChirpBlockControlsConfigParams.Rx13RFTurnOnTime * 100.0);
            InterChirpBlockControlsConfigurationParam.Rx02BBTurnOnTime = (ushort)(m_InterChirpBlockControlsConfigParams.Rx02BBTurnOnTime * 100.0);
            InterChirpBlockControlsConfigurationParam.Rx13BBTurnOnTime = (ushort)(m_InterChirpBlockControlsConfigParams.Rx13BBTurnOnTime * 100.0);
            InterChirpBlockControlsConfigurationParam.RxLOChainTurnOffTime = (ushort)(m_InterChirpBlockControlsConfigParams.RxLOChainTurnOffTime * 100.0);
            InterChirpBlockControlsConfigurationParam.TxLOChainTurnOffTime = (ushort)(m_InterChirpBlockControlsConfigParams.TxLOChainTurnOffTime * 100.0);
            InterChirpBlockControlsConfigurationParam.RxLOChainTurnOnTime = (ushort)(m_InterChirpBlockControlsConfigParams.RxLOChainTurnOnTime * 100.0);
            InterChirpBlockControlsConfigurationParam.TxLOChainTurnOnTime = (ushort)(m_InterChirpBlockControlsConfigParams.TxLOChainTurnOnTime * 100.0);
            IntPtr inData = GCHandle.Alloc(InterChirpBlockControlsConfigurationParam, GCHandleType.Pinned).AddrOfPinnedObject();
            int num;
            if (GlobalRef.g_NtvRS232Connect[(int)GlobalRef.g_RadarDeviceIndex] && GlobalRef.g_CasCadeDeviceSpiConnect == 0U)
            {
                num = m_TsWrapper.Calling_WriteAddr_Single(4294959848U, 1U);
                if (m_GuiManager.DllOps.itempDisconnect(false) == 0)
                {
                    string full_command = string.Format("Debug Port Disconnected", new object[0]);
                    m_GuiManager.RecordLog(0, full_command);
                    if (!GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
                    {
                        iRs232ConnectDisconnect_impl();
                    }
                }
            }
            Thread.Sleep(200);
            if (m_RadarDeviceModeConfigParams.NumberOfRadarDevicesDetected <= 1)
            {
                string full_command2 = string.Format("ar1.SetInterChirpBlockControlsConfig({0}, {1}, {2}, {3}, {4}, {5}, {6}, {7}, {8}, {9},{10}, {11}, {12}, {13}, {14}, {15}, {16}, {17})", new object[]
                {
                    (decimal)Math.Round(m_InterChirpBlockControlsConfigParams.Rx02RFTurnOffTime, 2),
                    (decimal)Math.Round(m_InterChirpBlockControlsConfigParams.Rx13RFTurnOffTime, 2),
                    (decimal)Math.Round(m_InterChirpBlockControlsConfigParams.Rx02BBTurnOffTime, 2),
                    (decimal)Math.Round(m_InterChirpBlockControlsConfigParams.Rx13BBTurnOffTime, 2),
                    (decimal)Math.Round(m_InterChirpBlockControlsConfigParams.Rx02RFPreEnableTime, 2),
                    (decimal)Math.Round(m_InterChirpBlockControlsConfigParams.Rx24RFPreEnableTime, 2),
                    (decimal)Math.Round(m_InterChirpBlockControlsConfigParams.Rx02BBPreEnableTime, 2),
                    (decimal)Math.Round(m_InterChirpBlockControlsConfigParams.Rx13BBPreEnableTime, 2),
                    (decimal)Math.Round(m_InterChirpBlockControlsConfigParams.Rx02RFTurnOnTime, 2),
                    (decimal)Math.Round(m_InterChirpBlockControlsConfigParams.Rx13RFTurnOnTime, 2),
                    (decimal)Math.Round(m_InterChirpBlockControlsConfigParams.Rx02BBTurnOnTime, 2),
                    (decimal)Math.Round(m_InterChirpBlockControlsConfigParams.Rx13BBTurnOnTime, 2),
                    (decimal)Math.Round(m_InterChirpBlockControlsConfigParams.RxLOChainTurnOffTime, 2),
                    (decimal)Math.Round(m_InterChirpBlockControlsConfigParams.TxLOChainTurnOffTime, 2),
                    (decimal)Math.Round(m_InterChirpBlockControlsConfigParams.RxLOChainTurnOnTime, 2),
                    (decimal)Math.Round(m_InterChirpBlockControlsConfigParams.TxLOChainTurnOnTime, 2),
                    m_InterChirpBlockControlsConfigParams.Reserved,
                    m_InterChirpBlockControlsConfigParams.Reserved2
                });
                m_GuiManager.RecordLog(15, full_command2);
            }
            else
            {
                string full_command3 = string.Format("ar1.SetInterChirpBlockControlsConfig_mult({0}, {1}, {2},{3}, {4}, {5}, {6}, {7}, {8}, {9},{10}, {11}, {12}, {13}, {14}, {15}, {16}, {17}, {18})", new object[]
                {
                    GlobalRef.g_RadarDeviceId,
                    (decimal)Math.Round(m_InterChirpBlockControlsConfigParams.Rx02RFTurnOffTime, 2),
                    (decimal)Math.Round(m_InterChirpBlockControlsConfigParams.Rx13RFTurnOffTime, 2),
                    (decimal)Math.Round(m_InterChirpBlockControlsConfigParams.Rx02BBTurnOffTime, 2),
                    (decimal)Math.Round(m_InterChirpBlockControlsConfigParams.Rx13BBTurnOffTime, 2),
                    (decimal)Math.Round(m_InterChirpBlockControlsConfigParams.Rx02RFPreEnableTime, 2),
                    (decimal)Math.Round(m_InterChirpBlockControlsConfigParams.Rx24RFPreEnableTime, 2),
                    (decimal)Math.Round(m_InterChirpBlockControlsConfigParams.Rx02BBPreEnableTime, 2),
                    (decimal)Math.Round(m_InterChirpBlockControlsConfigParams.Rx13BBPreEnableTime, 2),
                    (decimal)Math.Round(m_InterChirpBlockControlsConfigParams.Rx02RFTurnOnTime, 2),
                    (decimal)Math.Round(m_InterChirpBlockControlsConfigParams.Rx13RFTurnOnTime, 2),
                    (decimal)Math.Round(m_InterChirpBlockControlsConfigParams.Rx02BBTurnOnTime, 2),
                    (decimal)Math.Round(m_InterChirpBlockControlsConfigParams.Rx13BBTurnOnTime, 2),
                    (decimal)Math.Round(m_InterChirpBlockControlsConfigParams.RxLOChainTurnOffTime, 2),
                    (decimal)Math.Round(m_InterChirpBlockControlsConfigParams.TxLOChainTurnOffTime, 2),
                    (decimal)Math.Round(m_InterChirpBlockControlsConfigParams.RxLOChainTurnOnTime, 2),
                    (decimal)Math.Round(m_InterChirpBlockControlsConfigParams.TxLOChainTurnOnTime, 2),
                    m_InterChirpBlockControlsConfigParams.Reserved,
                    m_InterChirpBlockControlsConfigParams.Reserved2
                });
                m_GuiManager.RecordLog(15, full_command3);
            }
            uint g_RadarDeviceId = GlobalRef.g_RadarDeviceId;
            num = Imports.RadarLinkImpl_SetInterChirpBlkCtrl((byte)GlobalRef.g_RadarDeviceId, inData);
            if ((num == 0 && ((GlobalRef.g_CasCadeDeviceSpiConnect & 1U) == 1U || (GlobalRef.g_CasCadeDeviceSpiConnect & 2U) == 2U || (GlobalRef.g_CasCadeDeviceSpiConnect & 4U) == 4U || (GlobalRef.g_CasCadeDeviceSpiConnect & 8U) == 8U)) || GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
            {
                string full_command4 = string.Format("Status: Passed", new object[0]);
                m_GuiManager.RecordLog(8, full_command4);
                for (int i = 0; i < 4; i++)
                {
                    if (jsonConfigInProgress)
                    {
                        break;
                    }
                    if (((ulong)g_RadarDeviceId & (ulong)(1L << (i & 31))) != 0UL)
                    {
                        int mmwaveDevIndex = getMmwaveDevIndex(i);
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlInterChirpBlkCtrlCfg_t.rx02RfTurnOffTime_us = m_InterChirpBlockControlsConfigParams.Rx02RFTurnOffTime;
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlInterChirpBlkCtrlCfg_t.rx13RfTurnOffTime_us = m_InterChirpBlockControlsConfigParams.Rx13RFTurnOffTime;
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlInterChirpBlkCtrlCfg_t.rx02BbTurnOffTime_us = m_InterChirpBlockControlsConfigParams.Rx02BBTurnOffTime;
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlInterChirpBlkCtrlCfg_t.rx12BbTurnOffTime_us = m_InterChirpBlockControlsConfigParams.Rx13BBTurnOffTime;
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlInterChirpBlkCtrlCfg_t.rx02RfPreEnTime_us = m_InterChirpBlockControlsConfigParams.Rx02RFPreEnableTime;
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlInterChirpBlkCtrlCfg_t.rx13RfPreEnTime_us = m_InterChirpBlockControlsConfigParams.Rx24RFPreEnableTime;
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlInterChirpBlkCtrlCfg_t.rx02BbPreEnTime_us = m_InterChirpBlockControlsConfigParams.Rx02BBPreEnableTime;
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlInterChirpBlkCtrlCfg_t.rx13BbPreEnTime_us = m_InterChirpBlockControlsConfigParams.Rx13BBPreEnableTime;
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlInterChirpBlkCtrlCfg_t.rx02RfTurnOnTime_us = m_InterChirpBlockControlsConfigParams.Rx02RFTurnOnTime;
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlInterChirpBlkCtrlCfg_t.rx13RfTurnOnTime_us = m_InterChirpBlockControlsConfigParams.Rx13RFTurnOnTime;
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlInterChirpBlkCtrlCfg_t.rx02BbTurnOnTime_us = m_InterChirpBlockControlsConfigParams.Rx02BBTurnOnTime;
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlInterChirpBlkCtrlCfg_t.rx13BbTurnOnTime_us = m_InterChirpBlockControlsConfigParams.Rx13BBTurnOnTime;
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlInterChirpBlkCtrlCfg_t.rxLoChainTurnOffTime_us = m_InterChirpBlockControlsConfigParams.RxLOChainTurnOffTime;
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlInterChirpBlkCtrlCfg_t.txLoChainTurnOffTime_us = m_InterChirpBlockControlsConfigParams.TxLOChainTurnOffTime;
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlInterChirpBlkCtrlCfg_t.rxLoChainTurnOnTime_us = m_InterChirpBlockControlsConfigParams.RxLOChainTurnOnTime;
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlInterChirpBlkCtrlCfg_t.txLoChainTurnOnTime_us = m_InterChirpBlockControlsConfigParams.TxLOChainTurnOnTime;
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlInterChirpBlkCtrlCfg_t.isConfigured = 1;
                    }
                }
            }
            else
            {
                string msg = string.Format("Status: Failed, Error Type: {0}", new object[]
                {
                    GetErrorType(num)
                });
                GlobalRef.LuaWrapper.PrintError(msg);
            }
            if (GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
            {
                if (iRs232ConnectDisconnect_impl() == 0 && !GlobalRef.g_NtvRS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
                {
                    m_GuiManager.DllOps.iConnect(1U, 0U);
                    string full_command5 = string.Format("Debug Port Reconnected!", new object[0]);
                    m_GuiManager.RecordLog(9, full_command5);
                    ScriptOps.KeepTrying(2000, new Func<bool>(spare_read));
                }
            }
            else if (GlobalRef.g_CasCadeDeviceSpiConnect == 0U)
            {
                string full_command6 = string.Format("Error Occurred in Port open close", new object[0]);
                m_GuiManager.RecordLog(9, full_command6);
            }
            return num;
        }

        private int iCalibDataRestoreAndSaveConfig_Impl(bool is_starting_op, bool is_ending_op)
        {
            ClalibDataRestoreSaveConfigurationParam.ChunkID = m_CalibDataRestoreSaveConfigParams.ChunkID;
            ClalibDataRestoreSaveConfigurationParam.Reserved = m_CalibDataRestoreSaveConfigParams.Reserved;
            GCHandle.Alloc(CalibDataSaveReportParam, GCHandleType.Pinned).AddrOfPinnedObject();
            int num;
            if (GlobalRef.g_NtvRS232Connect[(int)GlobalRef.g_RadarDeviceIndex] && GlobalRef.g_CasCadeDeviceSpiConnect == 0U)
            {
                num = m_TsWrapper.Calling_WriteAddr_Single(4294959848U, 1U);
                if (m_GuiManager.DllOps.itempDisconnect(false) == 0)
                {
                    string full_command = string.Format("Debug Port Disconnected", new object[0]);
                    m_GuiManager.RecordLog(0, full_command);
                    if (!GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
                    {
                        iRs232ConnectDisconnect_impl();
                    }
                }
            }
            Thread.Sleep(200);
            if (m_RadarDeviceModeConfigParams.NumberOfRadarDevicesDetected <= 1)
            {
                string full_command2 = string.Format("ar1.SetCalibDataSaveConfig({0}, {1}, \"{2}\")", new object[]
                {
                    m_CalibDataRestoreSaveConfigParams.ChunkID,
                    m_MCUClockOutConfigParams.Reserved,
                    m_PhaseShiftAndCalibFilePathParams.CalibStoreRestorePath
                });
                m_GuiManager.RecordLog(15, full_command2);
            }
            else
            {
                string full_command3 = string.Format("ar1.SetCalibDataSaveConfig_mult({0}, {1}, {2}, \"{3}\")", new object[]
                {
                    GlobalRef.g_RadarDeviceId,
                    m_CalibDataRestoreSaveConfigParams.ChunkID,
                    m_CalibDataRestoreSaveConfigParams.Reserved,
                    m_PhaseShiftAndCalibFilePathParams.CalibStoreRestorePath
                });
                m_GuiManager.RecordLog(15, full_command3);
            }
            num = Imports.RadarLinkImpl_RfCalibDataStore((byte)GlobalRef.g_RadarDeviceId, out CalibDataSaveReportParam);
            if (num == 0)
            {
                GlobalRef.CalibData_chunkID_0[0] = (uint)((int)CalibDataSaveReportParam.NumChunks | (int)CalibDataSaveReportParam.ChunkID << 16);
                GlobalRef.CalibData_chunkID_0[1] = CalibDataSaveReportParam.CalibData0;
                GlobalRef.CalibData_chunkID_0[2] = CalibDataSaveReportParam.CalibData1;
                GlobalRef.CalibData_chunkID_0[3] = CalibDataSaveReportParam.CalibData2;
                GlobalRef.CalibData_chunkID_0[4] = CalibDataSaveReportParam.CalibData3;
                GlobalRef.CalibData_chunkID_0[5] = CalibDataSaveReportParam.CalibData4;
                GlobalRef.CalibData_chunkID_0[6] = CalibDataSaveReportParam.CalibData5;
                GlobalRef.CalibData_chunkID_0[7] = CalibDataSaveReportParam.CalibData6;
                GlobalRef.CalibData_chunkID_0[8] = CalibDataSaveReportParam.CalibData7;
                GlobalRef.CalibData_chunkID_0[9] = CalibDataSaveReportParam.CalibData8;
                GlobalRef.CalibData_chunkID_0[10] = CalibDataSaveReportParam.CalibData9;
                GlobalRef.CalibData_chunkID_0[11] = CalibDataSaveReportParam.CalibData10;
                GlobalRef.CalibData_chunkID_0[12] = CalibDataSaveReportParam.CalibData11;
                GlobalRef.CalibData_chunkID_0[13] = CalibDataSaveReportParam.CalibData12;
                GlobalRef.CalibData_chunkID_0[14] = CalibDataSaveReportParam.CalibData13;
                GlobalRef.CalibData_chunkID_0[15] = CalibDataSaveReportParam.CalibData14;
                GlobalRef.CalibData_chunkID_0[16] = CalibDataSaveReportParam.CalibData15;
                GlobalRef.CalibData_chunkID_0[17] = CalibDataSaveReportParam.CalibData16;
                GlobalRef.CalibData_chunkID_0[18] = CalibDataSaveReportParam.CalibData17;
                GlobalRef.CalibData_chunkID_0[19] = CalibDataSaveReportParam.CalibData18;
                GlobalRef.CalibData_chunkID_0[20] = CalibDataSaveReportParam.CalibData19;
                GlobalRef.CalibData_chunkID_0[21] = CalibDataSaveReportParam.CalibData20;
                GlobalRef.CalibData_chunkID_0[22] = CalibDataSaveReportParam.CalibData21;
                GlobalRef.CalibData_chunkID_0[23] = CalibDataSaveReportParam.CalibData22;
                GlobalRef.CalibData_chunkID_0[24] = CalibDataSaveReportParam.CalibData23;
                GlobalRef.CalibData_chunkID_0[25] = CalibDataSaveReportParam.CalibData24;
                GlobalRef.CalibData_chunkID_0[26] = CalibDataSaveReportParam.CalibData25;
                GlobalRef.CalibData_chunkID_0[27] = CalibDataSaveReportParam.CalibData26;
                GlobalRef.CalibData_chunkID_0[28] = CalibDataSaveReportParam.CalibData27;
                GlobalRef.CalibData_chunkID_0[29] = CalibDataSaveReportParam.CalibData28;
                GlobalRef.CalibData_chunkID_0[30] = CalibDataSaveReportParam.CalibData29;
                GlobalRef.CalibData_chunkID_0[31] = CalibDataSaveReportParam.CalibData30;
                GlobalRef.CalibData_chunkID_0[32] = CalibDataSaveReportParam.CalibData31;
                GlobalRef.CalibData_chunkID_0[33] = CalibDataSaveReportParam.CalibData32;
                GlobalRef.CalibData_chunkID_0[34] = CalibDataSaveReportParam.CalibData33;
                GlobalRef.CalibData_chunkID_0[35] = CalibDataSaveReportParam.CalibData34;
                GlobalRef.CalibData_chunkID_0[36] = CalibDataSaveReportParam.CalibData35;
                GlobalRef.CalibData_chunkID_0[37] = CalibDataSaveReportParam.CalibData36;
                GlobalRef.CalibData_chunkID_0[38] = CalibDataSaveReportParam.CalibData37;
                GlobalRef.CalibData_chunkID_0[39] = CalibDataSaveReportParam.CalibData38;
                GlobalRef.CalibData_chunkID_0[40] = CalibDataSaveReportParam.CalibData39;
                GlobalRef.CalibData_chunkID_0[41] = CalibDataSaveReportParam.CalibData40;
                GlobalRef.CalibData_chunkID_0[42] = CalibDataSaveReportParam.CalibData41;
                GlobalRef.CalibData_chunkID_0[43] = CalibDataSaveReportParam.CalibData42;
                GlobalRef.CalibData_chunkID_0[44] = CalibDataSaveReportParam.CalibData43;
                GlobalRef.CalibData_chunkID_0[45] = CalibDataSaveReportParam.CalibData44;
                GlobalRef.CalibData_chunkID_0[46] = CalibDataSaveReportParam.CalibData45;
                GlobalRef.CalibData_chunkID_0[47] = CalibDataSaveReportParam.CalibData46;
                GlobalRef.CalibData_chunkID_0[48] = CalibDataSaveReportParam.CalibData47;
                GlobalRef.CalibData_chunkID_0[49] = CalibDataSaveReportParam.CalibData48;
                GlobalRef.CalibData_chunkID_0[50] = CalibDataSaveReportParam.CalibData49;
                GlobalRef.CalibData_chunkID_0[51] = CalibDataSaveReportParam.CalibData50;
                GlobalRef.CalibData_chunkID_0[52] = CalibDataSaveReportParam.CalibData51;
                GlobalRef.CalibData_chunkID_0[53] = CalibDataSaveReportParam.CalibData52;
                GlobalRef.CalibData_chunkID_0[54] = CalibDataSaveReportParam.CalibData53;
                GlobalRef.CalibData_chunkID_0[55] = CalibDataSaveReportParam.CalibData54;
                GlobalRef.CalibData_chunkID_0[56] = CalibDataSaveReportParam.CalibData55;
                GlobalRef.CalibData_chunkID_0[57] = (uint)((int)CalibDataSaveReportParam.Chunk1NumChunks | (int)CalibDataSaveReportParam.Chunk1ChunkID << 16);
                GlobalRef.CalibData_chunkID_0[58] = CalibDataSaveReportParam.Chunk1CalibData0;
                GlobalRef.CalibData_chunkID_0[59] = CalibDataSaveReportParam.Chunk1CalibData1;
                GlobalRef.CalibData_chunkID_0[60] = CalibDataSaveReportParam.Chunk1CalibData2;
                GlobalRef.CalibData_chunkID_0[61] = CalibDataSaveReportParam.Chunk1CalibData3;
                GlobalRef.CalibData_chunkID_0[62] = CalibDataSaveReportParam.Chunk1CalibData4;
                GlobalRef.CalibData_chunkID_0[63] = CalibDataSaveReportParam.Chunk1CalibData5;
                GlobalRef.CalibData_chunkID_0[64] = CalibDataSaveReportParam.Chunk1CalibData6;
                GlobalRef.CalibData_chunkID_0[65] = CalibDataSaveReportParam.Chunk1CalibData7;
                GlobalRef.CalibData_chunkID_0[66] = CalibDataSaveReportParam.Chunk1CalibData8;
                GlobalRef.CalibData_chunkID_0[67] = CalibDataSaveReportParam.Chunk1CalibData9;
                GlobalRef.CalibData_chunkID_0[68] = CalibDataSaveReportParam.Chunk1CalibData10;
                GlobalRef.CalibData_chunkID_0[69] = CalibDataSaveReportParam.Chunk1CalibData11;
                GlobalRef.CalibData_chunkID_0[70] = CalibDataSaveReportParam.Chunk1CalibData12;
                GlobalRef.CalibData_chunkID_0[71] = CalibDataSaveReportParam.Chunk1CalibData13;
                GlobalRef.CalibData_chunkID_0[72] = CalibDataSaveReportParam.Chunk1CalibData14;
                GlobalRef.CalibData_chunkID_0[73] = CalibDataSaveReportParam.Chunk1CalibData15;
                GlobalRef.CalibData_chunkID_0[74] = CalibDataSaveReportParam.Chunk1CalibData16;
                GlobalRef.CalibData_chunkID_0[75] = CalibDataSaveReportParam.Chunk1CalibData17;
                GlobalRef.CalibData_chunkID_0[76] = CalibDataSaveReportParam.Chunk1CalibData18;
                GlobalRef.CalibData_chunkID_0[77] = CalibDataSaveReportParam.Chunk1CalibData19;
                GlobalRef.CalibData_chunkID_0[78] = CalibDataSaveReportParam.Chunk1CalibData20;
                GlobalRef.CalibData_chunkID_0[79] = CalibDataSaveReportParam.Chunk1CalibData21;
                GlobalRef.CalibData_chunkID_0[80] = CalibDataSaveReportParam.Chunk1CalibData22;
                GlobalRef.CalibData_chunkID_0[81] = CalibDataSaveReportParam.Chunk1CalibData23;
                GlobalRef.CalibData_chunkID_0[82] = CalibDataSaveReportParam.Chunk1CalibData24;
                GlobalRef.CalibData_chunkID_0[83] = CalibDataSaveReportParam.Chunk1CalibData25;
                GlobalRef.CalibData_chunkID_0[84] = CalibDataSaveReportParam.Chunk1CalibData26;
                GlobalRef.CalibData_chunkID_0[85] = CalibDataSaveReportParam.Chunk1CalibData27;
                GlobalRef.CalibData_chunkID_0[86] = CalibDataSaveReportParam.Chunk1CalibData28;
                GlobalRef.CalibData_chunkID_0[87] = CalibDataSaveReportParam.Chunk1CalibData29;
                GlobalRef.CalibData_chunkID_0[88] = CalibDataSaveReportParam.Chunk1CalibData30;
                GlobalRef.CalibData_chunkID_0[89] = CalibDataSaveReportParam.Chunk1CalibData31;
                GlobalRef.CalibData_chunkID_0[90] = CalibDataSaveReportParam.Chunk1CalibData32;
                GlobalRef.CalibData_chunkID_0[91] = CalibDataSaveReportParam.Chunk1CalibData33;
                GlobalRef.CalibData_chunkID_0[92] = CalibDataSaveReportParam.Chunk1CalibData34;
                GlobalRef.CalibData_chunkID_0[93] = CalibDataSaveReportParam.Chunk1CalibData35;
                GlobalRef.CalibData_chunkID_0[94] = CalibDataSaveReportParam.Chunk1CalibData36;
                GlobalRef.CalibData_chunkID_0[95] = CalibDataSaveReportParam.Chunk1CalibData37;
                GlobalRef.CalibData_chunkID_0[96] = CalibDataSaveReportParam.Chunk1CalibData38;
                GlobalRef.CalibData_chunkID_0[97] = CalibDataSaveReportParam.Chunk1CalibData39;
                GlobalRef.CalibData_chunkID_0[98] = CalibDataSaveReportParam.Chunk1CalibData40;
                GlobalRef.CalibData_chunkID_0[99] = CalibDataSaveReportParam.Chunk1CalibData41;
                GlobalRef.CalibData_chunkID_0[100] = CalibDataSaveReportParam.Chunk1CalibData42;
                GlobalRef.CalibData_chunkID_0[101] = CalibDataSaveReportParam.Chunk1CalibData43;
                GlobalRef.CalibData_chunkID_0[102] = CalibDataSaveReportParam.Chunk1CalibData44;
                GlobalRef.CalibData_chunkID_0[103] = CalibDataSaveReportParam.Chunk1CalibData45;
                GlobalRef.CalibData_chunkID_0[104] = CalibDataSaveReportParam.Chunk1CalibData46;
                GlobalRef.CalibData_chunkID_0[105] = CalibDataSaveReportParam.Chunk1CalibData47;
                GlobalRef.CalibData_chunkID_0[106] = CalibDataSaveReportParam.Chunk1CalibData48;
                GlobalRef.CalibData_chunkID_0[107] = CalibDataSaveReportParam.Chunk1CalibData49;
                GlobalRef.CalibData_chunkID_0[108] = CalibDataSaveReportParam.Chunk1CalibData50;
                GlobalRef.CalibData_chunkID_0[109] = CalibDataSaveReportParam.Chunk1CalibData51;
                GlobalRef.CalibData_chunkID_0[110] = CalibDataSaveReportParam.Chunk1CalibData52;
                GlobalRef.CalibData_chunkID_0[111] = CalibDataSaveReportParam.Chunk1CalibData53;
                GlobalRef.CalibData_chunkID_0[112] = CalibDataSaveReportParam.Chunk1CalibData54;
                GlobalRef.CalibData_chunkID_0[113] = CalibDataSaveReportParam.Chunk1CalibData55;
                GlobalRef.CalibData_chunkID_0[114] = (uint)((int)CalibDataSaveReportParam.Chunk2NumChunks | (int)CalibDataSaveReportParam.Chunk2ChunkID << 16);
                GlobalRef.CalibData_chunkID_0[115] = CalibDataSaveReportParam.Chunk2CalibData0;
                GlobalRef.CalibData_chunkID_0[116] = CalibDataSaveReportParam.Chunk2CalibData1;
                GlobalRef.CalibData_chunkID_0[117] = CalibDataSaveReportParam.Chunk2CalibData2;
                GlobalRef.CalibData_chunkID_0[118] = CalibDataSaveReportParam.Chunk2CalibData3;
                GlobalRef.CalibData_chunkID_0[119] = CalibDataSaveReportParam.Chunk2CalibData4;
                GlobalRef.CalibData_chunkID_0[120] = CalibDataSaveReportParam.Chunk2CalibData5;
                GlobalRef.CalibData_chunkID_0[121] = CalibDataSaveReportParam.Chunk2CalibData6;
                GlobalRef.CalibData_chunkID_0[122] = CalibDataSaveReportParam.Chunk2CalibData7;
                GlobalRef.CalibData_chunkID_0[123] = CalibDataSaveReportParam.Chunk2CalibData8;
                GlobalRef.CalibData_chunkID_0[124] = CalibDataSaveReportParam.Chunk2CalibData9;
                GlobalRef.CalibData_chunkID_0[125] = CalibDataSaveReportParam.Chunk2CalibData10;
                GlobalRef.CalibData_chunkID_0[126] = CalibDataSaveReportParam.Chunk2CalibData11;
                GlobalRef.CalibData_chunkID_0[127] = CalibDataSaveReportParam.Chunk2CalibData12;
                GlobalRef.CalibData_chunkID_0[128] = CalibDataSaveReportParam.Chunk2CalibData13;
                GlobalRef.CalibData_chunkID_0[129] = CalibDataSaveReportParam.Chunk2CalibData14;
                GlobalRef.CalibData_chunkID_0[130] = CalibDataSaveReportParam.Chunk2CalibData15;
                GlobalRef.CalibData_chunkID_0[131] = CalibDataSaveReportParam.Chunk2CalibData16;
                GlobalRef.CalibData_chunkID_0[132] = CalibDataSaveReportParam.Chunk2CalibData17;
                GlobalRef.CalibData_chunkID_0[133] = CalibDataSaveReportParam.Chunk2CalibData18;
                GlobalRef.CalibData_chunkID_0[134] = CalibDataSaveReportParam.Chunk2CalibData19;
                GlobalRef.CalibData_chunkID_0[135] = CalibDataSaveReportParam.Chunk2CalibData20;
                GlobalRef.CalibData_chunkID_0[136] = CalibDataSaveReportParam.Chunk2CalibData21;
                GlobalRef.CalibData_chunkID_0[137] = CalibDataSaveReportParam.Chunk2CalibData22;
                GlobalRef.CalibData_chunkID_0[138] = CalibDataSaveReportParam.Chunk2CalibData23;
                GlobalRef.CalibData_chunkID_0[139] = CalibDataSaveReportParam.Chunk2CalibData24;
                GlobalRef.CalibData_chunkID_0[140] = CalibDataSaveReportParam.Chunk2CalibData25;
                GlobalRef.CalibData_chunkID_0[141] = CalibDataSaveReportParam.Chunk2CalibData26;
                GlobalRef.CalibData_chunkID_0[142] = CalibDataSaveReportParam.Chunk2CalibData27;
                GlobalRef.CalibData_chunkID_0[143] = CalibDataSaveReportParam.Chunk2CalibData28;
                GlobalRef.CalibData_chunkID_0[144] = CalibDataSaveReportParam.Chunk2CalibData29;
                GlobalRef.CalibData_chunkID_0[145] = CalibDataSaveReportParam.Chunk2CalibData30;
                GlobalRef.CalibData_chunkID_0[146] = CalibDataSaveReportParam.Chunk2CalibData31;
                GlobalRef.CalibData_chunkID_0[147] = CalibDataSaveReportParam.Chunk2CalibData32;
                GlobalRef.CalibData_chunkID_0[148] = CalibDataSaveReportParam.Chunk2CalibData33;
                GlobalRef.CalibData_chunkID_0[149] = CalibDataSaveReportParam.Chunk2CalibData34;
                GlobalRef.CalibData_chunkID_0[150] = CalibDataSaveReportParam.Chunk2CalibData35;
                GlobalRef.CalibData_chunkID_0[151] = CalibDataSaveReportParam.Chunk2CalibData36;
                GlobalRef.CalibData_chunkID_0[152] = CalibDataSaveReportParam.Chunk2CalibData37;
                GlobalRef.CalibData_chunkID_0[153] = CalibDataSaveReportParam.Chunk2CalibData38;
                GlobalRef.CalibData_chunkID_0[154] = CalibDataSaveReportParam.Chunk2CalibData39;
                GlobalRef.CalibData_chunkID_0[155] = CalibDataSaveReportParam.Chunk2CalibData40;
                GlobalRef.CalibData_chunkID_0[156] = CalibDataSaveReportParam.Chunk2CalibData41;
                GlobalRef.CalibData_chunkID_0[157] = CalibDataSaveReportParam.Chunk2CalibData42;
                GlobalRef.CalibData_chunkID_0[158] = CalibDataSaveReportParam.Chunk2CalibData43;
                GlobalRef.CalibData_chunkID_0[159] = CalibDataSaveReportParam.Chunk2CalibData44;
                GlobalRef.CalibData_chunkID_0[160] = CalibDataSaveReportParam.Chunk2CalibData45;
                GlobalRef.CalibData_chunkID_0[161] = CalibDataSaveReportParam.Chunk2CalibData46;
                GlobalRef.CalibData_chunkID_0[162] = CalibDataSaveReportParam.Chunk2CalibData47;
                GlobalRef.CalibData_chunkID_0[163] = CalibDataSaveReportParam.Chunk2CalibData48;
                GlobalRef.CalibData_chunkID_0[164] = CalibDataSaveReportParam.Chunk2CalibData49;
                GlobalRef.CalibData_chunkID_0[165] = CalibDataSaveReportParam.Chunk2CalibData50;
                GlobalRef.CalibData_chunkID_0[166] = CalibDataSaveReportParam.Chunk2CalibData51;
                GlobalRef.CalibData_chunkID_0[167] = CalibDataSaveReportParam.Chunk2CalibData52;
                GlobalRef.CalibData_chunkID_0[168] = CalibDataSaveReportParam.Chunk2CalibData53;
                GlobalRef.CalibData_chunkID_0[169] = CalibDataSaveReportParam.Chunk2CalibData54;
                GlobalRef.CalibData_chunkID_0[170] = CalibDataSaveReportParam.Chunk2CalibData55;
                ScriptOps.m_MainForm.CalibDataReStore.WriteCalibData(m_CalibDataRestoreSaveConfigParams.ChunkID);
            }
            if ((num == 0 && ((GlobalRef.g_CasCadeDeviceSpiConnect & 1U) == 1U || (GlobalRef.g_CasCadeDeviceSpiConnect & 2U) == 2U || (GlobalRef.g_CasCadeDeviceSpiConnect & 4U) == 4U || (GlobalRef.g_CasCadeDeviceSpiConnect & 8U) == 8U)) || GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
            {
                string full_command4 = string.Format("Status: Passed", new object[0]);
                m_GuiManager.RecordLog(8, full_command4);
            }
            else
            {
                string msg = string.Format("Status: Failed, Error Type: {0}", new object[]
                {
                    GetErrorType(num)
                });
                GlobalRef.LuaWrapper.PrintError(msg);
            }
            if (GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
            {
                if (iRs232ConnectDisconnect_impl() == 0 && !GlobalRef.g_NtvRS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
                {
                    m_GuiManager.DllOps.iConnect(1U, 0U);
                    string full_command5 = string.Format("Debug Port Reconnected!", new object[0]);
                    m_GuiManager.RecordLog(9, full_command5);
                    ScriptOps.KeepTrying(2000, new Func<bool>(spare_read));
                }
            }
            else if (GlobalRef.g_CasCadeDeviceSpiConnect == 0U)
            {
                string full_command6 = string.Format("Error Occurred in Port open close", new object[0]);
                m_GuiManager.RecordLog(9, full_command6);
            }
            return num;
        }

        private int iPhaseShifterCalibGetConfig_Impl(bool is_starting_op, bool is_ending_op)
        {
            PhaseShifterClalibGetConfigParam.tx0Index = 0;
            PhaseShifterClalibGetConfigParam.tx0Reserved = 0;
            PhaseShifterClalibGetConfigParam.f000029 = 1;
            PhaseShifterClalibGetConfigParam.tx1Index = 1;
            PhaseShifterClalibGetConfigParam.Tx1Reserved = 0;
            PhaseShifterClalibGetConfigParam.f00006a = 1;
            PhaseShifterClalibGetConfigParam.tx2Index = 2;
            PhaseShifterClalibGetConfigParam.Tx2Reserved = 0;
            PhaseShifterClalibGetConfigParam.f0000ab = 1;
            GCHandle.Alloc(PhaseShifterClalibGetConfigParam, GCHandleType.Pinned).AddrOfPinnedObject();
            int num;
            if (GlobalRef.g_NtvRS232Connect[(int)GlobalRef.g_RadarDeviceIndex] && GlobalRef.g_CasCadeDeviceSpiConnect == 0U)
            {
                num = m_TsWrapper.Calling_WriteAddr_Single(4294959848U, 1U);
                if (m_GuiManager.DllOps.itempDisconnect(false) == 0)
                {
                    string full_command = string.Format("Debug Port Disconnected", new object[0]);
                    m_GuiManager.RecordLog(0, full_command);
                    if (!GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
                    {
                        iRs232ConnectDisconnect_impl();
                    }
                }
            }
            Thread.Sleep(200);
            if (m_RadarDeviceModeConfigParams.NumberOfRadarDevicesDetected <= 1)
            {
                string full_command2 = string.Format("ar1.rlRfPhShifterCalibDataStore({0}, {1}, {2}, \"{3}\")", new object[]
                {
                    PhaseShifterClalibGetConfigParam.tx0Reserved,
                    PhaseShifterClalibGetConfigParam.Tx1Reserved,
                    PhaseShifterClalibGetConfigParam.Tx2Reserved,
                    m_PhaseShiftAndCalibFilePathParams.PhaseShifterCalibStoreRestorePath
                });
                m_GuiManager.RecordLog(15, full_command2);
            }
            else
            {
                string full_command3 = string.Format("ar1.rlRfPhShifterCalibDataStore_mult({0}, {1}, {2}, {3}, \"{4}\")", new object[]
                {
                    GlobalRef.g_RadarDeviceId,
                    PhaseShifterClalibGetConfigParam.tx0Reserved,
                    PhaseShifterClalibGetConfigParam.Tx1Reserved,
                    PhaseShifterClalibGetConfigParam.Tx2Reserved,
                    m_PhaseShiftAndCalibFilePathParams.PhaseShifterCalibStoreRestorePath
                });
                m_GuiManager.RecordLog(15, full_command3);
            }
            num = Imports.RadarLinkImpl_RfPhShiftCalibDataStore((byte)GlobalRef.g_RadarDeviceId, out PhaseShifterClalibGetConfigParam);
            if (num == 0)
            {
                GlobalRef.PhaseShitCalibData[0] = (ushort)PhaseShifterClalibGetConfigParam.tx0Index;
                GlobalRef.PhaseShitCalibData[1] = (ushort)PhaseShifterClalibGetConfigParam.f000029;
                GlobalRef.PhaseShitCalibData[2] = PhaseShifterClalibGetConfigParam.f00002a;
                GlobalRef.PhaseShitCalibData[3] = PhaseShifterClalibGetConfigParam.f00002b;
                GlobalRef.PhaseShitCalibData[4] = PhaseShifterClalibGetConfigParam.f00002c;
                GlobalRef.PhaseShitCalibData[5] = PhaseShifterClalibGetConfigParam.f00002d;
                GlobalRef.PhaseShitCalibData[6] = PhaseShifterClalibGetConfigParam.f00002e;
                GlobalRef.PhaseShitCalibData[7] = PhaseShifterClalibGetConfigParam.f00002f;
                GlobalRef.PhaseShitCalibData[8] = PhaseShifterClalibGetConfigParam.f000030;
                GlobalRef.PhaseShitCalibData[9] = PhaseShifterClalibGetConfigParam.f000031;
                GlobalRef.PhaseShitCalibData[10] = PhaseShifterClalibGetConfigParam.f000032;
                GlobalRef.PhaseShitCalibData[11] = PhaseShifterClalibGetConfigParam.f000033;
                GlobalRef.PhaseShitCalibData[12] = PhaseShifterClalibGetConfigParam.f000034;
                GlobalRef.PhaseShitCalibData[13] = PhaseShifterClalibGetConfigParam.f000035;
                GlobalRef.PhaseShitCalibData[14] = PhaseShifterClalibGetConfigParam.f000036;
                GlobalRef.PhaseShitCalibData[15] = PhaseShifterClalibGetConfigParam.f000037;
                GlobalRef.PhaseShitCalibData[16] = PhaseShifterClalibGetConfigParam.f000038;
                GlobalRef.PhaseShitCalibData[17] = PhaseShifterClalibGetConfigParam.f000039;
                GlobalRef.PhaseShitCalibData[18] = PhaseShifterClalibGetConfigParam.f00003a;
                GlobalRef.PhaseShitCalibData[19] = PhaseShifterClalibGetConfigParam.f00003b;
                GlobalRef.PhaseShitCalibData[20] = PhaseShifterClalibGetConfigParam.f00003c;
                GlobalRef.PhaseShitCalibData[21] = PhaseShifterClalibGetConfigParam.f00003d;
                GlobalRef.PhaseShitCalibData[22] = PhaseShifterClalibGetConfigParam.f00003e;
                GlobalRef.PhaseShitCalibData[23] = PhaseShifterClalibGetConfigParam.f00003f;
                GlobalRef.PhaseShitCalibData[24] = PhaseShifterClalibGetConfigParam.f000040;
                GlobalRef.PhaseShitCalibData[25] = PhaseShifterClalibGetConfigParam.f000041;
                GlobalRef.PhaseShitCalibData[26] = PhaseShifterClalibGetConfigParam.f000042;
                GlobalRef.PhaseShitCalibData[27] = PhaseShifterClalibGetConfigParam.f000043;
                GlobalRef.PhaseShitCalibData[28] = PhaseShifterClalibGetConfigParam.f000044;
                GlobalRef.PhaseShitCalibData[29] = PhaseShifterClalibGetConfigParam.f000045;
                GlobalRef.PhaseShitCalibData[30] = PhaseShifterClalibGetConfigParam.f000046;
                GlobalRef.PhaseShitCalibData[31] = PhaseShifterClalibGetConfigParam.f000047;
                GlobalRef.PhaseShitCalibData[32] = PhaseShifterClalibGetConfigParam.f000048;
                GlobalRef.PhaseShitCalibData[33] = PhaseShifterClalibGetConfigParam.f000049;
                GlobalRef.PhaseShitCalibData[34] = PhaseShifterClalibGetConfigParam.f00004a;
                GlobalRef.PhaseShitCalibData[35] = PhaseShifterClalibGetConfigParam.f00004b;
                GlobalRef.PhaseShitCalibData[36] = PhaseShifterClalibGetConfigParam.f00004c;
                GlobalRef.PhaseShitCalibData[37] = PhaseShifterClalibGetConfigParam.f00004d;
                GlobalRef.PhaseShitCalibData[38] = PhaseShifterClalibGetConfigParam.f00004e;
                GlobalRef.PhaseShitCalibData[39] = PhaseShifterClalibGetConfigParam.f00004f;
                GlobalRef.PhaseShitCalibData[40] = PhaseShifterClalibGetConfigParam.f000050;
                GlobalRef.PhaseShitCalibData[41] = PhaseShifterClalibGetConfigParam.f000051;
                GlobalRef.PhaseShitCalibData[42] = PhaseShifterClalibGetConfigParam.f000052;
                GlobalRef.PhaseShitCalibData[43] = PhaseShifterClalibGetConfigParam.f000053;
                GlobalRef.PhaseShitCalibData[44] = PhaseShifterClalibGetConfigParam.f000054;
                GlobalRef.PhaseShitCalibData[45] = PhaseShifterClalibGetConfigParam.f000055;
                GlobalRef.PhaseShitCalibData[46] = PhaseShifterClalibGetConfigParam.f000056;
                GlobalRef.PhaseShitCalibData[47] = PhaseShifterClalibGetConfigParam.f000057;
                GlobalRef.PhaseShitCalibData[48] = PhaseShifterClalibGetConfigParam.f000058;
                GlobalRef.PhaseShitCalibData[49] = PhaseShifterClalibGetConfigParam.f000059;
                GlobalRef.PhaseShitCalibData[50] = PhaseShifterClalibGetConfigParam.f00005a;
                GlobalRef.PhaseShitCalibData[51] = PhaseShifterClalibGetConfigParam.f00005b;
                GlobalRef.PhaseShitCalibData[52] = PhaseShifterClalibGetConfigParam.f00005c;
                GlobalRef.PhaseShitCalibData[53] = PhaseShifterClalibGetConfigParam.f00005d;
                GlobalRef.PhaseShitCalibData[54] = PhaseShifterClalibGetConfigParam.f00005e;
                GlobalRef.PhaseShitCalibData[55] = PhaseShifterClalibGetConfigParam.f00005f;
                GlobalRef.PhaseShitCalibData[56] = PhaseShifterClalibGetConfigParam.f000060;
                GlobalRef.PhaseShitCalibData[57] = PhaseShifterClalibGetConfigParam.f000061;
                GlobalRef.PhaseShitCalibData[58] = PhaseShifterClalibGetConfigParam.f000062;
                GlobalRef.PhaseShitCalibData[59] = PhaseShifterClalibGetConfigParam.f000063;
                GlobalRef.PhaseShitCalibData[60] = PhaseShifterClalibGetConfigParam.f000064;
                GlobalRef.PhaseShitCalibData[61] = PhaseShifterClalibGetConfigParam.f000065;
                GlobalRef.PhaseShitCalibData[62] = PhaseShifterClalibGetConfigParam.f000066;
                GlobalRef.PhaseShitCalibData[63] = PhaseShifterClalibGetConfigParam.f000067;
                GlobalRef.PhaseShitCalibData[64] = PhaseShifterClalibGetConfigParam.f000068;
                GlobalRef.PhaseShitCalibData[65] = PhaseShifterClalibGetConfigParam.f000069;
                GlobalRef.PhaseShitCalibData[66] = PhaseShifterClalibGetConfigParam.tx0Reserved;
                GlobalRef.PhaseShitCalibData[67] = (ushort)PhaseShifterClalibGetConfigParam.tx1Index;
                GlobalRef.PhaseShitCalibData[68] = (ushort)PhaseShifterClalibGetConfigParam.f00006a;
                GlobalRef.PhaseShitCalibData[69] = PhaseShifterClalibGetConfigParam.f00006b;
                GlobalRef.PhaseShitCalibData[70] = PhaseShifterClalibGetConfigParam.f00006c;
                GlobalRef.PhaseShitCalibData[71] = PhaseShifterClalibGetConfigParam.f00006d;
                GlobalRef.PhaseShitCalibData[72] = PhaseShifterClalibGetConfigParam.f00006e;
                GlobalRef.PhaseShitCalibData[73] = PhaseShifterClalibGetConfigParam.f00006f;
                GlobalRef.PhaseShitCalibData[74] = PhaseShifterClalibGetConfigParam.f000070;
                GlobalRef.PhaseShitCalibData[75] = PhaseShifterClalibGetConfigParam.f000071;
                GlobalRef.PhaseShitCalibData[76] = PhaseShifterClalibGetConfigParam.f000072;
                GlobalRef.PhaseShitCalibData[77] = PhaseShifterClalibGetConfigParam.f000073;
                GlobalRef.PhaseShitCalibData[78] = PhaseShifterClalibGetConfigParam.f000074;
                GlobalRef.PhaseShitCalibData[79] = PhaseShifterClalibGetConfigParam.f000075;
                GlobalRef.PhaseShitCalibData[80] = PhaseShifterClalibGetConfigParam.f000076;
                GlobalRef.PhaseShitCalibData[81] = PhaseShifterClalibGetConfigParam.f000077;
                GlobalRef.PhaseShitCalibData[82] = PhaseShifterClalibGetConfigParam.f000078;
                GlobalRef.PhaseShitCalibData[83] = PhaseShifterClalibGetConfigParam.f000079;
                GlobalRef.PhaseShitCalibData[84] = PhaseShifterClalibGetConfigParam.f00007a;
                GlobalRef.PhaseShitCalibData[85] = PhaseShifterClalibGetConfigParam.f00007b;
                GlobalRef.PhaseShitCalibData[86] = PhaseShifterClalibGetConfigParam.f00007c;
                GlobalRef.PhaseShitCalibData[87] = PhaseShifterClalibGetConfigParam.f00007d;
                GlobalRef.PhaseShitCalibData[88] = PhaseShifterClalibGetConfigParam.f00007e;
                GlobalRef.PhaseShitCalibData[89] = PhaseShifterClalibGetConfigParam.f00007f;
                GlobalRef.PhaseShitCalibData[90] = PhaseShifterClalibGetConfigParam.f000080;
                GlobalRef.PhaseShitCalibData[91] = PhaseShifterClalibGetConfigParam.f000081;
                GlobalRef.PhaseShitCalibData[92] = PhaseShifterClalibGetConfigParam.f000082;
                GlobalRef.PhaseShitCalibData[93] = PhaseShifterClalibGetConfigParam.f000083;
                GlobalRef.PhaseShitCalibData[94] = PhaseShifterClalibGetConfigParam.f000084;
                GlobalRef.PhaseShitCalibData[95] = PhaseShifterClalibGetConfigParam.f000085;
                GlobalRef.PhaseShitCalibData[96] = PhaseShifterClalibGetConfigParam.f000086;
                GlobalRef.PhaseShitCalibData[97] = PhaseShifterClalibGetConfigParam.f000087;
                GlobalRef.PhaseShitCalibData[98] = PhaseShifterClalibGetConfigParam.f000088;
                GlobalRef.PhaseShitCalibData[99] = PhaseShifterClalibGetConfigParam.f000089;
                GlobalRef.PhaseShitCalibData[100] = PhaseShifterClalibGetConfigParam.f00008a;
                GlobalRef.PhaseShitCalibData[101] = PhaseShifterClalibGetConfigParam.f00008b;
                GlobalRef.PhaseShitCalibData[102] = PhaseShifterClalibGetConfigParam.f00008c;
                GlobalRef.PhaseShitCalibData[103] = PhaseShifterClalibGetConfigParam.f00008d;
                GlobalRef.PhaseShitCalibData[104] = PhaseShifterClalibGetConfigParam.f00008e;
                GlobalRef.PhaseShitCalibData[105] = PhaseShifterClalibGetConfigParam.f00008f;
                GlobalRef.PhaseShitCalibData[106] = PhaseShifterClalibGetConfigParam.f000090;
                GlobalRef.PhaseShitCalibData[107] = PhaseShifterClalibGetConfigParam.f000091;
                GlobalRef.PhaseShitCalibData[108] = PhaseShifterClalibGetConfigParam.f000092;
                GlobalRef.PhaseShitCalibData[109] = PhaseShifterClalibGetConfigParam.f000093;
                GlobalRef.PhaseShitCalibData[110] = PhaseShifterClalibGetConfigParam.f000094;
                GlobalRef.PhaseShitCalibData[111] = PhaseShifterClalibGetConfigParam.f000095;
                GlobalRef.PhaseShitCalibData[112] = PhaseShifterClalibGetConfigParam.f000096;
                GlobalRef.PhaseShitCalibData[113] = PhaseShifterClalibGetConfigParam.f000097;
                GlobalRef.PhaseShitCalibData[114] = PhaseShifterClalibGetConfigParam.f000098;
                GlobalRef.PhaseShitCalibData[115] = PhaseShifterClalibGetConfigParam.f000099;
                GlobalRef.PhaseShitCalibData[116] = PhaseShifterClalibGetConfigParam.f00009a;
                GlobalRef.PhaseShitCalibData[117] = PhaseShifterClalibGetConfigParam.f00009b;
                GlobalRef.PhaseShitCalibData[118] = PhaseShifterClalibGetConfigParam.f00009c;
                GlobalRef.PhaseShitCalibData[119] = PhaseShifterClalibGetConfigParam.f00009d;
                GlobalRef.PhaseShitCalibData[120] = PhaseShifterClalibGetConfigParam.f00009e;
                GlobalRef.PhaseShitCalibData[121] = PhaseShifterClalibGetConfigParam.f00009f;
                GlobalRef.PhaseShitCalibData[122] = PhaseShifterClalibGetConfigParam.f0000a0;
                GlobalRef.PhaseShitCalibData[123] = PhaseShifterClalibGetConfigParam.f0000a1;
                GlobalRef.PhaseShitCalibData[124] = PhaseShifterClalibGetConfigParam.f0000a2;
                GlobalRef.PhaseShitCalibData[125] = PhaseShifterClalibGetConfigParam.f0000a3;
                GlobalRef.PhaseShitCalibData[126] = PhaseShifterClalibGetConfigParam.f0000a4;
                GlobalRef.PhaseShitCalibData[127] = PhaseShifterClalibGetConfigParam.f0000a5;
                GlobalRef.PhaseShitCalibData[128] = PhaseShifterClalibGetConfigParam.f0000a6;
                GlobalRef.PhaseShitCalibData[129] = PhaseShifterClalibGetConfigParam.f0000a7;
                GlobalRef.PhaseShitCalibData[130] = PhaseShifterClalibGetConfigParam.f0000a8;
                GlobalRef.PhaseShitCalibData[131] = PhaseShifterClalibGetConfigParam.f0000a9;
                GlobalRef.PhaseShitCalibData[132] = PhaseShifterClalibGetConfigParam.f0000aa;
                GlobalRef.PhaseShitCalibData[133] = PhaseShifterClalibGetConfigParam.Tx1Reserved;
                GlobalRef.PhaseShitCalibData[134] = (ushort)PhaseShifterClalibGetConfigParam.tx2Index;
                GlobalRef.PhaseShitCalibData[135] = (ushort)PhaseShifterClalibGetConfigParam.f0000ab;
                GlobalRef.PhaseShitCalibData[136] = PhaseShifterClalibGetConfigParam.f0000ac;
                GlobalRef.PhaseShitCalibData[137] = PhaseShifterClalibGetConfigParam.f0000ad;
                GlobalRef.PhaseShitCalibData[138] = PhaseShifterClalibGetConfigParam.f0000ae;
                GlobalRef.PhaseShitCalibData[139] = PhaseShifterClalibGetConfigParam.f0000af;
                GlobalRef.PhaseShitCalibData[140] = PhaseShifterClalibGetConfigParam.f0000b0;
                GlobalRef.PhaseShitCalibData[141] = PhaseShifterClalibGetConfigParam.f0000b1;
                GlobalRef.PhaseShitCalibData[142] = PhaseShifterClalibGetConfigParam.f0000b2;
                GlobalRef.PhaseShitCalibData[143] = PhaseShifterClalibGetConfigParam.f0000b3;
                GlobalRef.PhaseShitCalibData[144] = PhaseShifterClalibGetConfigParam.f0000b4;
                GlobalRef.PhaseShitCalibData[145] = PhaseShifterClalibGetConfigParam.f0000b5;
                GlobalRef.PhaseShitCalibData[146] = PhaseShifterClalibGetConfigParam.f0000b6;
                GlobalRef.PhaseShitCalibData[147] = PhaseShifterClalibGetConfigParam.f0000b7;
                GlobalRef.PhaseShitCalibData[148] = PhaseShifterClalibGetConfigParam.f0000b8;
                GlobalRef.PhaseShitCalibData[149] = PhaseShifterClalibGetConfigParam.f0000b9;
                GlobalRef.PhaseShitCalibData[150] = PhaseShifterClalibGetConfigParam.f0000ba;
                GlobalRef.PhaseShitCalibData[151] = PhaseShifterClalibGetConfigParam.f0000bb;
                GlobalRef.PhaseShitCalibData[152] = PhaseShifterClalibGetConfigParam.f0000bc;
                GlobalRef.PhaseShitCalibData[153] = PhaseShifterClalibGetConfigParam.f0000bd;
                GlobalRef.PhaseShitCalibData[154] = PhaseShifterClalibGetConfigParam.f0000be;
                GlobalRef.PhaseShitCalibData[155] = PhaseShifterClalibGetConfigParam.f0000bf;
                GlobalRef.PhaseShitCalibData[156] = PhaseShifterClalibGetConfigParam.f0000c0;
                GlobalRef.PhaseShitCalibData[157] = PhaseShifterClalibGetConfigParam.f0000c1;
                GlobalRef.PhaseShitCalibData[158] = PhaseShifterClalibGetConfigParam.f0000c2;
                GlobalRef.PhaseShitCalibData[159] = PhaseShifterClalibGetConfigParam.f0000c3;
                GlobalRef.PhaseShitCalibData[160] = PhaseShifterClalibGetConfigParam.f0000c4;
                GlobalRef.PhaseShitCalibData[161] = PhaseShifterClalibGetConfigParam.f0000c5;
                GlobalRef.PhaseShitCalibData[162] = PhaseShifterClalibGetConfigParam.f0000c6;
                GlobalRef.PhaseShitCalibData[163] = PhaseShifterClalibGetConfigParam.f0000c7;
                GlobalRef.PhaseShitCalibData[164] = PhaseShifterClalibGetConfigParam.f0000c8;
                GlobalRef.PhaseShitCalibData[165] = PhaseShifterClalibGetConfigParam.f0000c9;
                GlobalRef.PhaseShitCalibData[166] = PhaseShifterClalibGetConfigParam.f0000ca;
                GlobalRef.PhaseShitCalibData[167] = PhaseShifterClalibGetConfigParam.f0000cb;
                GlobalRef.PhaseShitCalibData[168] = PhaseShifterClalibGetConfigParam.f0000cc;
                GlobalRef.PhaseShitCalibData[169] = PhaseShifterClalibGetConfigParam.f0000cd;
                GlobalRef.PhaseShitCalibData[170] = PhaseShifterClalibGetConfigParam.f0000ce;
                GlobalRef.PhaseShitCalibData[171] = PhaseShifterClalibGetConfigParam.f0000cf;
                GlobalRef.PhaseShitCalibData[172] = PhaseShifterClalibGetConfigParam.f0000d0;
                GlobalRef.PhaseShitCalibData[173] = PhaseShifterClalibGetConfigParam.f0000d1;
                GlobalRef.PhaseShitCalibData[174] = PhaseShifterClalibGetConfigParam.f0000d2;
                GlobalRef.PhaseShitCalibData[175] = PhaseShifterClalibGetConfigParam.f0000d3;
                GlobalRef.PhaseShitCalibData[176] = PhaseShifterClalibGetConfigParam.f0000d4;
                GlobalRef.PhaseShitCalibData[177] = PhaseShifterClalibGetConfigParam.f0000d5;
                GlobalRef.PhaseShitCalibData[178] = PhaseShifterClalibGetConfigParam.f0000d6;
                GlobalRef.PhaseShitCalibData[179] = PhaseShifterClalibGetConfigParam.f0000d7;
                GlobalRef.PhaseShitCalibData[180] = PhaseShifterClalibGetConfigParam.f0000d8;
                GlobalRef.PhaseShitCalibData[181] = PhaseShifterClalibGetConfigParam.f0000d9;
                GlobalRef.PhaseShitCalibData[182] = PhaseShifterClalibGetConfigParam.f0000da;
                GlobalRef.PhaseShitCalibData[183] = PhaseShifterClalibGetConfigParam.f0000db;
                GlobalRef.PhaseShitCalibData[184] = PhaseShifterClalibGetConfigParam.f0000dc;
                GlobalRef.PhaseShitCalibData[185] = PhaseShifterClalibGetConfigParam.f0000dd;
                GlobalRef.PhaseShitCalibData[186] = PhaseShifterClalibGetConfigParam.f0000de;
                GlobalRef.PhaseShitCalibData[187] = PhaseShifterClalibGetConfigParam.f0000df;
                GlobalRef.PhaseShitCalibData[188] = PhaseShifterClalibGetConfigParam.f0000e0;
                GlobalRef.PhaseShitCalibData[189] = PhaseShifterClalibGetConfigParam.f0000e1;
                GlobalRef.PhaseShitCalibData[190] = PhaseShifterClalibGetConfigParam.f0000e2;
                GlobalRef.PhaseShitCalibData[191] = PhaseShifterClalibGetConfigParam.f0000e3;
                GlobalRef.PhaseShitCalibData[192] = PhaseShifterClalibGetConfigParam.f0000e4;
                GlobalRef.PhaseShitCalibData[193] = PhaseShifterClalibGetConfigParam.f0000e5;
                GlobalRef.PhaseShitCalibData[194] = PhaseShifterClalibGetConfigParam.f0000e6;
                GlobalRef.PhaseShitCalibData[195] = PhaseShifterClalibGetConfigParam.f0000e7;
                GlobalRef.PhaseShitCalibData[196] = PhaseShifterClalibGetConfigParam.f0000e8;
                GlobalRef.PhaseShitCalibData[197] = PhaseShifterClalibGetConfigParam.f0000e9;
                GlobalRef.PhaseShitCalibData[198] = PhaseShifterClalibGetConfigParam.f0000ea;
                GlobalRef.PhaseShitCalibData[199] = PhaseShifterClalibGetConfigParam.f0000eb;
                GlobalRef.PhaseShitCalibData[200] = PhaseShifterClalibGetConfigParam.Tx2Reserved;
                ScriptOps.m_MainForm.CalibDataReStore.WritePhaseShifterCalibData(PhaseShifterClalibGetConfigParam.Tx2Reserved);
            }
            if ((num == 0 && ((GlobalRef.g_CasCadeDeviceSpiConnect & 1U) == 1U || (GlobalRef.g_CasCadeDeviceSpiConnect & 2U) == 2U || (GlobalRef.g_CasCadeDeviceSpiConnect & 4U) == 4U || (GlobalRef.g_CasCadeDeviceSpiConnect & 8U) == 8U)) || GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
            {
                string full_command4 = string.Format("Status: Passed", new object[0]);
                m_GuiManager.RecordLog(8, full_command4);
            }
            else
            {
                string msg = string.Format("Status: Failed, Error Type: {0}", new object[]
                {
                    GetErrorType(num)
                });
                GlobalRef.LuaWrapper.PrintError(msg);
            }
            if (GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
            {
                if (iRs232ConnectDisconnect_impl() == 0 && !GlobalRef.g_NtvRS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
                {
                    m_GuiManager.DllOps.iConnect(1U, 0U);
                    string full_command5 = string.Format("Debug Port Reconnected!", new object[0]);
                    m_GuiManager.RecordLog(9, full_command5);
                    ScriptOps.KeepTrying(2000, new Func<bool>(spare_read));
                }
            }
            else if (GlobalRef.g_CasCadeDeviceSpiConnect == 0U)
            {
                string full_command6 = string.Format("Error Occurred in Port open close", new object[0]);
                m_GuiManager.RecordLog(9, full_command6);
            }
            return num;
        }

        private int iPMICClockOutConfig_Impl(bool is_starting_op, bool is_ending_op)
        {
            PMICClockOutConfigurationParam.PMICClockControl = m_PMICClockOutConfigParams.PMICClockControl;
            PMICClockOutConfigurationParam.PMICClockSrc = m_PMICClockOutConfigParams.PMICClockSrc;
            PMICClockOutConfigurationParam.SrcClockDiv = m_PMICClockOutConfigParams.SrcClockDiv;
            PMICClockOutConfigurationParam.ModeSelect = m_PMICClockOutConfigParams.ModeSelect;
            PMICClockOutConfigurationParam.FreqSlope = m_PMICClockOutConfigParams.FreqSlope;
            PMICClockOutConfigurationParam.MinNDivVal = m_PMICClockOutConfigParams.MinNDivVal;
            PMICClockOutConfigurationParam.MaxNDivVal = m_PMICClockOutConfigParams.MaxNDivVal;
            PMICClockOutConfigurationParam.ClockDitherEna = m_PMICClockOutConfigParams.ClockDitherEna;
            PMICClockOutConfigurationParam.Reserved = m_PMICClockOutConfigParams.Reserved;
            IntPtr inData = GCHandle.Alloc(PMICClockOutConfigurationParam, GCHandleType.Pinned).AddrOfPinnedObject();
            int num;
            if (GlobalRef.g_NtvRS232Connect[(int)GlobalRef.g_RadarDeviceIndex] && GlobalRef.g_CasCadeDeviceSpiConnect == 0U)
            {
                num = m_TsWrapper.Calling_WriteAddr_Single(4294959848U, 1U);
                if (m_GuiManager.DllOps.itempDisconnect(false) == 0)
                {
                    string full_command = string.Format("Debug Port Disconnected", new object[0]);
                    m_GuiManager.RecordLog(0, full_command);
                    if (!GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
                    {
                        iRs232ConnectDisconnect_impl();
                    }
                }
            }
            Thread.Sleep(200);
            if (m_RadarDeviceModeConfigParams.NumberOfRadarDevicesDetected <= 1)
            {
                string full_command2 = string.Format("ar1.SetPMICClockOutConfig({0}, {1}, {2}, {3}, {4}, {5}, {6}, {7}, {8})", new object[]
                {
                    m_PMICClockOutConfigParams.PMICClockControl,
                    m_PMICClockOutConfigParams.PMICClockSrc,
                    m_PMICClockOutConfigParams.SrcClockDiv,
                    m_PMICClockOutConfigParams.ModeSelect,
                    m_PMICClockOutConfigParams.FreqSlope,
                    m_PMICClockOutConfigParams.MinNDivVal,
                    m_PMICClockOutConfigParams.MaxNDivVal,
                    m_PMICClockOutConfigParams.ClockDitherEna,
                    m_PMICClockOutConfigParams.Reserved
                });
                m_GuiManager.RecordLog(15, full_command2);
            }
            else
            {
                string full_command3 = string.Format("ar1.SetPMICClockOutConfig_mult({0}, {1}, {2}, {3}, {4}, {5}, {6}, {7}, {8}, {9})", new object[]
                {
                    GlobalRef.g_RadarDeviceId,
                    m_PMICClockOutConfigParams.PMICClockControl,
                    m_PMICClockOutConfigParams.PMICClockSrc,
                    m_PMICClockOutConfigParams.SrcClockDiv,
                    m_PMICClockOutConfigParams.ModeSelect,
                    m_PMICClockOutConfigParams.FreqSlope,
                    m_PMICClockOutConfigParams.MinNDivVal,
                    m_PMICClockOutConfigParams.MaxNDivVal,
                    m_PMICClockOutConfigParams.ClockDitherEna,
                    m_PMICClockOutConfigParams.Reserved
                });
                m_GuiManager.RecordLog(15, full_command3);
            }
            num = Imports.RadarLinkImpl_DevicePmicClkConfig((byte)GlobalRef.g_RadarDeviceId, inData);
            if ((num == 0 && ((GlobalRef.g_CasCadeDeviceSpiConnect & 1U) == 1U || (GlobalRef.g_CasCadeDeviceSpiConnect & 2U) == 2U || (GlobalRef.g_CasCadeDeviceSpiConnect & 4U) == 4U || (GlobalRef.g_CasCadeDeviceSpiConnect & 8U) == 8U)) || GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
            {
                string full_command4 = string.Format("Status: Passed", new object[0]);
                m_GuiManager.RecordLog(8, full_command4);
            }
            else
            {
                string msg = string.Format("Status: Failed, Error Type: {0}", new object[]
                {
                    GetErrorType(num)
                });
                GlobalRef.LuaWrapper.PrintError(msg);
            }
            if (GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
            {
                if (iRs232ConnectDisconnect_impl() == 0 && !GlobalRef.g_NtvRS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
                {
                    m_GuiManager.DllOps.iConnect(1U, 0U);
                    string full_command5 = string.Format("Debug Port Reconnected!", new object[0]);
                    m_GuiManager.RecordLog(9, full_command5);
                    ScriptOps.KeepTrying(2000, new Func<bool>(spare_read));
                }
            }
            else if (GlobalRef.g_CasCadeDeviceSpiConnect == 0U)
            {
                string full_command6 = string.Format("Error Occurred in Port open close", new object[0]);
                m_GuiManager.RecordLog(9, full_command6);
            }
            return num;
        }

        private void UpdateDynChirpAllRow()
        {
            if (GlobalRef.g_ARDeviceOperateFreq60GHz)
            {
                DynamicChirpConfigurationParam.Chirp1R1 = (uint)((int)m_DynamicChirpConfigParams.Chirp1R1ProfileIndex | (int)((byte)Math.Round((double)m_DynamicChirpConfigParams.Chirp1R1FreqSlopeVar * 27.61681646090535)) << 8 | (int)m_DynamicChirpConfigParams.Chirp1R1Tx1Enable << 16 | (int)m_DynamicChirpConfigParams.Chirp1R1Tx2Enable << 17 | (int)m_DynamicChirpConfigParams.Chirp1R1Tx3Enable << 18 | (int)m_DynamicChirpConfigParams.Chirp1R1BPMConstVal << 24);
                DynamicChirpConfigurationParam.Chirp1R2 = (uint)Math.Round(Math.Round(m_DynamicChirpConfigParams.Chirp1R2FreqStartVar, 7) / 2.7 * 67108864.0);
                DynamicChirpConfigurationParam.Chirp1R3 = (uint)((int)((ushort)Math.Round((double)(m_DynamicChirpConfigParams.Chirp1R3IdleTimeVar * 100f))) | (int)((ushort)Math.Round((double)(m_DynamicChirpConfigParams.Chirp1R3ADCStartTimeVar * 100f))) << 16);
                DynamicChirpConfigurationParam.Chirp2R1 = (uint)((int)m_DynamicChirpConfigParams.Chirp2R1ProfileIndex | (int)((byte)Math.Round((double)m_DynamicChirpConfigParams.Chirp2R1FreqSlopeVar * 27.61681646090535)) << 8 | (int)m_DynamicChirpConfigParams.Chirp2R1Tx1Enable << 16 | (int)m_DynamicChirpConfigParams.Chirp2R1Tx2Enable << 17 | (int)m_DynamicChirpConfigParams.Chirp2R1Tx3Enable << 18 | (int)m_DynamicChirpConfigParams.Chirp2R1BPMConstVal << 24);
                DynamicChirpConfigurationParam.Chirp2R2 = (uint)Math.Round(Math.Round(m_DynamicChirpConfigParams.Chirp2R2FreqStartVar, 7) / 2.7 * 67108864.0);
                DynamicChirpConfigurationParam.Chirp2R3 = (uint)((int)((ushort)Math.Round((double)(m_DynamicChirpConfigParams.Chirp2R3IdleTimeVar * 100f))) | (int)((ushort)Math.Round((double)(m_DynamicChirpConfigParams.Chirp2R3ADCStartTimeVar * 100f))) << 16);
                DynamicChirpConfigurationParam.Chirp3R1 = (uint)((int)m_DynamicChirpConfigParams.Chirp3R1ProfileIndex | (int)((byte)Math.Round((double)m_DynamicChirpConfigParams.Chirp3R1FreqSlopeVar * 27.61681646090535)) << 8 | (int)m_DynamicChirpConfigParams.Chirp3R1Tx1Enable << 16 | (int)m_DynamicChirpConfigParams.Chirp3R1Tx2Enable << 17 | (int)m_DynamicChirpConfigParams.Chirp3R1Tx3Enable << 18 | (int)m_DynamicChirpConfigParams.Chirp3R1BPMConstVal << 24);
                DynamicChirpConfigurationParam.Chirp3R2 = (uint)Math.Round(Math.Round(m_DynamicChirpConfigParams.Chirp3R2FreqStartVar, 7) / 2.7 * 67108864.0);
                DynamicChirpConfigurationParam.Chirp3R3 = (uint)((int)((ushort)Math.Round((double)(m_DynamicChirpConfigParams.Chirp3R3IdleTimeVar * 100f))) | (int)((ushort)Math.Round((double)(m_DynamicChirpConfigParams.Chirp3R3ADCStartTimeVar * 100f))) << 16);
                DynamicChirpConfigurationParam.Chirp4R1 = (uint)((int)m_DynamicChirpConfigParams.Chirp4R1ProfileIndex | (int)((byte)Math.Round((double)m_DynamicChirpConfigParams.Chirp4R1FreqSlopeVar * 27.61681646090535)) << 8 | (int)m_DynamicChirpConfigParams.Chirp4R1Tx1Enable << 16 | (int)m_DynamicChirpConfigParams.Chirp4R1Tx2Enable << 17 | (int)m_DynamicChirpConfigParams.Chirp4R1Tx3Enable << 18 | (int)m_DynamicChirpConfigParams.Chirp4R1BPMConstVal << 24);
                DynamicChirpConfigurationParam.Chirp4R2 = (uint)Math.Round(Math.Round(m_DynamicChirpConfigParams.Chirp4R2FreqStartVar, 7) / 2.7 * 67108864.0);
                DynamicChirpConfigurationParam.Chirp4R3 = (uint)((int)((ushort)Math.Round((double)(m_DynamicChirpConfigParams.Chirp4R3IdleTimeVar * 100f))) | (int)((ushort)Math.Round((double)(m_DynamicChirpConfigParams.Chirp4R3ADCStartTimeVar * 100f))) << 16);
                DynamicChirpConfigurationParam.Chirp5R1 = (uint)((int)m_DynamicChirpConfigParams.Chirp5R1ProfileIndex | (int)((byte)Math.Round((double)m_DynamicChirpConfigParams.Chirp5R1FreqSlopeVar * 27.61681646090535)) << 8 | (int)m_DynamicChirpConfigParams.Chirp5R1Tx1Enable << 16 | (int)m_DynamicChirpConfigParams.Chirp5R1Tx2Enable << 17 | (int)m_DynamicChirpConfigParams.Chirp5R1Tx3Enable << 18 | (int)m_DynamicChirpConfigParams.Chirp5R1BPMConstVal << 24);
                DynamicChirpConfigurationParam.Chirp5R2 = (uint)Math.Round(Math.Round(m_DynamicChirpConfigParams.Chirp5R2FreqStartVar, 7) / 2.7 * 67108864.0);
                DynamicChirpConfigurationParam.Chirp5R3 = (uint)((int)((ushort)Math.Round((double)(m_DynamicChirpConfigParams.Chirp5R3IdleTimeVar * 100f))) | (int)((ushort)Math.Round((double)(m_DynamicChirpConfigParams.Chirp5R3ADCStartTimeVar * 100f))) << 16);
                DynamicChirpConfigurationParam.Chirp6R1 = (uint)((int)m_DynamicChirpConfigParams.Chirp6R1ProfileIndex | (int)((byte)Math.Round((double)m_DynamicChirpConfigParams.Chirp6R1FreqSlopeVar * 27.61681646090535)) << 8 | (int)m_DynamicChirpConfigParams.Chirp6R1Tx1Enable << 16 | (int)m_DynamicChirpConfigParams.Chirp6R1Tx2Enable << 17 | (int)m_DynamicChirpConfigParams.Chirp6R1Tx3Enable << 18 | (int)m_DynamicChirpConfigParams.Chirp6R1BPMConstVal << 24);
                DynamicChirpConfigurationParam.Chirp6R2 = (uint)Math.Round(Math.Round(m_DynamicChirpConfigParams.Chirp6R2FreqStartVar, 7) / 2.7 * 67108864.0);
                DynamicChirpConfigurationParam.Chirp6R3 = (uint)((int)((ushort)Math.Round((double)(m_DynamicChirpConfigParams.Chirp6R3IdleTimeVar * 100f))) | (int)((ushort)Math.Round((double)(m_DynamicChirpConfigParams.Chirp6R3ADCStartTimeVar * 100f))) << 16);
                DynamicChirpConfigurationParam.Chirp7R1 = (uint)((int)m_DynamicChirpConfigParams.Chirp7R1ProfileIndex | (int)((byte)Math.Round((double)m_DynamicChirpConfigParams.Chirp7R1FreqSlopeVar * 27.61681646090535)) << 8 | (int)m_DynamicChirpConfigParams.Chirp7R1Tx1Enable << 16 | (int)m_DynamicChirpConfigParams.Chirp7R1Tx2Enable << 17 | (int)m_DynamicChirpConfigParams.Chirp7R1Tx3Enable << 18 | (int)m_DynamicChirpConfigParams.Chirp7R1BPMConstVal << 24);
                DynamicChirpConfigurationParam.Chirp7R2 = (uint)Math.Round(Math.Round(m_DynamicChirpConfigParams.Chirp7R2FreqStartVar, 7) / 2.7 * 67108864.0);
                DynamicChirpConfigurationParam.Chirp7R3 = (uint)((int)((ushort)Math.Round((double)(m_DynamicChirpConfigParams.Chirp7R3IdleTimeVar * 100f))) | (int)((ushort)Math.Round((double)(m_DynamicChirpConfigParams.Chirp7R3ADCStartTimeVar * 100f))) << 16);
                DynamicChirpConfigurationParam.Chirp8R1 = (uint)((int)m_DynamicChirpConfigParams.Chirp8R1ProfileIndex | (int)((byte)Math.Round((double)m_DynamicChirpConfigParams.Chirp8R1FreqSlopeVar * 27.61681646090535)) << 8 | (int)m_DynamicChirpConfigParams.Chirp8R1Tx1Enable << 16 | (int)m_DynamicChirpConfigParams.Chirp8R1Tx2Enable << 17 | (int)m_DynamicChirpConfigParams.Chirp8R1Tx3Enable << 18 | (int)m_DynamicChirpConfigParams.Chirp8R1BPMConstVal << 24);
                DynamicChirpConfigurationParam.Chirp8R2 = (uint)Math.Round(Math.Round(m_DynamicChirpConfigParams.Chirp8R2FreqStartVar, 7) / 2.7 * 67108864.0);
                DynamicChirpConfigurationParam.Chirp8R3 = (uint)((int)((ushort)Math.Round((double)(m_DynamicChirpConfigParams.Chirp8R3IdleTimeVar * 100f))) | (int)((ushort)Math.Round((double)(m_DynamicChirpConfigParams.Chirp8R3ADCStartTimeVar * 100f))) << 16);
                DynamicChirpConfigurationParam.Chirp9R1 = (uint)((int)m_DynamicChirpConfigParams.Chirp9R1ProfileIndex | (int)((byte)Math.Round((double)m_DynamicChirpConfigParams.Chirp9R1FreqSlopeVar * 27.61681646090535)) << 8 | (int)m_DynamicChirpConfigParams.Chirp9R1Tx1Enable << 16 | (int)m_DynamicChirpConfigParams.Chirp9R1Tx2Enable << 17 | (int)m_DynamicChirpConfigParams.Chirp9R1Tx3Enable << 18 | (int)m_DynamicChirpConfigParams.Chirp9R1BPMConstVal << 24);
                DynamicChirpConfigurationParam.Chirp9R2 = (uint)Math.Round(Math.Round(m_DynamicChirpConfigParams.Chirp9R2FreqStartVar, 7) / 2.7 * 67108864.0);
                DynamicChirpConfigurationParam.Chirp9R3 = (uint)((int)((ushort)Math.Round((double)(m_DynamicChirpConfigParams.Chirp9R3IdleTimeVar * 100f))) | (int)((ushort)Math.Round((double)(m_DynamicChirpConfigParams.Chirp9R3ADCStartTimeVar * 100f))) << 16);
                DynamicChirpConfigurationParam.Chirp10R1 = (uint)((int)m_DynamicChirpConfigParams.Chirp10R1ProfileIndex | (int)((byte)Math.Round((double)m_DynamicChirpConfigParams.Chirp10R1FreqSlopeVar * 27.61681646090535)) << 8 | (int)m_DynamicChirpConfigParams.Chirp10R1Tx1Enable << 16 | (int)m_DynamicChirpConfigParams.Chirp10R1Tx2Enable << 17 | (int)m_DynamicChirpConfigParams.Chirp10R1Tx3Enable << 18 | (int)m_DynamicChirpConfigParams.Chirp10R1BPMConstVal << 24);
                DynamicChirpConfigurationParam.Chirp10R2 = (uint)Math.Round(Math.Round(m_DynamicChirpConfigParams.Chirp10R2FreqStartVar, 7) / 2.7 * 67108864.0);
                DynamicChirpConfigurationParam.Chirp10R3 = (uint)((int)((ushort)Math.Round((double)(m_DynamicChirpConfigParams.Chirp10R3IdleTimeVar * 100f))) | (int)((ushort)Math.Round((double)(m_DynamicChirpConfigParams.Chirp10R3ADCStartTimeVar * 100f))) << 16);
                DynamicChirpConfigurationParam.Chirp11R1 = (uint)((int)m_DynamicChirpConfigParams.Chirp11R1ProfileIndex | (int)((byte)Math.Round((double)m_DynamicChirpConfigParams.Chirp11R1FreqSlopeVar * 27.61681646090535)) << 8 | (int)m_DynamicChirpConfigParams.Chirp11R1Tx1Enable << 16 | (int)m_DynamicChirpConfigParams.Chirp11R1Tx2Enable << 17 | (int)m_DynamicChirpConfigParams.Chirp11R1Tx3Enable << 18 | (int)m_DynamicChirpConfigParams.Chirp11R1BPMConstVal << 24);
                DynamicChirpConfigurationParam.Chirp11R2 = (uint)Math.Round(Math.Round(m_DynamicChirpConfigParams.Chirp11R2FreqStartVar, 7) / 2.7 * 67108864.0);
                DynamicChirpConfigurationParam.Chirp11R3 = (uint)((int)((ushort)Math.Round((double)(m_DynamicChirpConfigParams.Chirp11R3IdleTimeVar * 100f))) | (int)((ushort)Math.Round((double)(m_DynamicChirpConfigParams.Chirp11R3ADCStartTimeVar * 100f))) << 16);
                DynamicChirpConfigurationParam.Chirp12R1 = (uint)((int)m_DynamicChirpConfigParams.Chirp12R1ProfileIndex | (int)((byte)Math.Round((double)m_DynamicChirpConfigParams.Chirp12R1FreqSlopeVar * 27.61681646090535)) << 8 | (int)m_DynamicChirpConfigParams.Chirp12R1Tx1Enable << 16 | (int)m_DynamicChirpConfigParams.Chirp12R1Tx2Enable << 17 | (int)m_DynamicChirpConfigParams.Chirp12R1Tx3Enable << 18 | (int)m_DynamicChirpConfigParams.Chirp12R1BPMConstVal << 24);
                DynamicChirpConfigurationParam.Chirp12R2 = (uint)Math.Round(Math.Round(m_DynamicChirpConfigParams.Chirp12R2FreqStartVar, 7) / 2.7 * 67108864.0);
                DynamicChirpConfigurationParam.Chirp12R3 = (uint)((int)((ushort)Math.Round((double)(m_DynamicChirpConfigParams.Chirp12R3IdleTimeVar * 100f))) | (int)((ushort)Math.Round((double)(m_DynamicChirpConfigParams.Chirp12R3ADCStartTimeVar * 100f))) << 16);
                DynamicChirpConfigurationParam.Chirp13R1 = (uint)((int)m_DynamicChirpConfigParams.Chirp13R1ProfileIndex | (int)((byte)Math.Round((double)m_DynamicChirpConfigParams.Chirp13R1FreqSlopeVar * 27.61681646090535)) << 8 | (int)m_DynamicChirpConfigParams.Chirp13R1Tx1Enable << 16 | (int)m_DynamicChirpConfigParams.Chirp13R1Tx2Enable << 17 | (int)m_DynamicChirpConfigParams.Chirp13R1Tx3Enable << 18 | (int)m_DynamicChirpConfigParams.Chirp13R1BPMConstVal << 24);
                DynamicChirpConfigurationParam.Chirp13R2 = (uint)Math.Round(Math.Round(m_DynamicChirpConfigParams.Chirp13R2FreqStartVar, 7) / 2.7 * 67108864.0);
                DynamicChirpConfigurationParam.Chirp13R3 = (uint)((int)((ushort)Math.Round((double)(m_DynamicChirpConfigParams.Chirp13R3IdleTimeVar * 100f))) | (int)((ushort)Math.Round((double)(m_DynamicChirpConfigParams.Chirp13R3ADCStartTimeVar * 100f))) << 16);
                DynamicChirpConfigurationParam.Chirp14R1 = (uint)((int)m_DynamicChirpConfigParams.Chirp14R1ProfileIndex | (int)((byte)Math.Round((double)m_DynamicChirpConfigParams.Chirp14R1FreqSlopeVar * 27.61681646090535)) << 8 | (int)m_DynamicChirpConfigParams.Chirp14R1Tx1Enable << 16 | (int)m_DynamicChirpConfigParams.Chirp14R1Tx2Enable << 17 | (int)m_DynamicChirpConfigParams.Chirp14R1Tx3Enable << 18 | (int)m_DynamicChirpConfigParams.Chirp14R1BPMConstVal << 24);
                DynamicChirpConfigurationParam.Chirp14R2 = (uint)Math.Round(Math.Round(m_DynamicChirpConfigParams.Chirp14R2FreqStartVar, 7) / 2.7 * 67108864.0);
                DynamicChirpConfigurationParam.Chirp14R3 = (uint)((int)((ushort)Math.Round((double)(m_DynamicChirpConfigParams.Chirp14R3IdleTimeVar * 100f))) | (int)((ushort)Math.Round((double)(m_DynamicChirpConfigParams.Chirp14R3ADCStartTimeVar * 100f))) << 16);
                DynamicChirpConfigurationParam.Chirp15R1 = (uint)((int)m_DynamicChirpConfigParams.Chirp15R1ProfileIndex | (int)((byte)Math.Round((double)m_DynamicChirpConfigParams.Chirp15R1FreqSlopeVar * 27.61681646090535)) << 8 | (int)m_DynamicChirpConfigParams.Chirp15R1Tx1Enable << 16 | (int)m_DynamicChirpConfigParams.Chirp15R1Tx2Enable << 17 | (int)m_DynamicChirpConfigParams.Chirp15R1Tx3Enable << 18 | (int)m_DynamicChirpConfigParams.Chirp15R1BPMConstVal << 24);
                DynamicChirpConfigurationParam.Chirp15R2 = (uint)Math.Round(Math.Round(m_DynamicChirpConfigParams.Chirp15R2FreqStartVar, 7) / 2.7 * 67108864.0);
                DynamicChirpConfigurationParam.Chirp15R3 = (uint)((int)((ushort)Math.Round((double)(m_DynamicChirpConfigParams.Chirp15R3IdleTimeVar * 100f))) | (int)((ushort)Math.Round((double)(m_DynamicChirpConfigParams.Chirp15R3ADCStartTimeVar * 100f))) << 16);
                DynamicChirpConfigurationParam.Chirp16R1 = (uint)((int)m_DynamicChirpConfigParams.Chirp16R1ProfileIndex | (int)((byte)Math.Round((double)m_DynamicChirpConfigParams.Chirp16R1FreqSlopeVar * 27.61681646090535)) << 8 | (int)m_DynamicChirpConfigParams.Chirp16R1Tx1Enable << 16 | (int)m_DynamicChirpConfigParams.Chirp16R1Tx2Enable << 17 | (int)m_DynamicChirpConfigParams.Chirp16R1Tx3Enable << 18 | (int)m_DynamicChirpConfigParams.Chirp16R1BPMConstVal << 24);
                DynamicChirpConfigurationParam.Chirp16R2 = (uint)Math.Round(Math.Round(m_DynamicChirpConfigParams.Chirp16R2FreqStartVar, 7) / 2.7 * 67108864.0);
                DynamicChirpConfigurationParam.Chirp16R3 = (uint)((int)((ushort)Math.Round((double)(m_DynamicChirpConfigParams.Chirp16R3IdleTimeVar * 100f))) | (int)((ushort)Math.Round((double)(m_DynamicChirpConfigParams.Chirp16R3ADCStartTimeVar * 100f))) << 16);
                return;
            }
            DynamicChirpConfigurationParam.Chirp1R1 = (uint)((int)m_DynamicChirpConfigParams.Chirp1R1ProfileIndex | (int)((byte)Math.Round((double)m_DynamicChirpConfigParams.Chirp1R1FreqSlopeVar * 20.712612345679013)) << 8 | (int)m_DynamicChirpConfigParams.Chirp1R1Tx1Enable << 16 | (int)m_DynamicChirpConfigParams.Chirp1R1Tx2Enable << 17 | (int)m_DynamicChirpConfigParams.Chirp1R1Tx3Enable << 18 | (int)m_DynamicChirpConfigParams.Chirp1R1BPMConstVal << 24);
            DynamicChirpConfigurationParam.Chirp1R2 = (uint)Math.Round(Math.Round(m_DynamicChirpConfigParams.Chirp1R2FreqStartVar, 7) / 3.6 * 67108864.0);
            DynamicChirpConfigurationParam.Chirp1R3 = (uint)((int)((ushort)Math.Round((double)(m_DynamicChirpConfigParams.Chirp1R3IdleTimeVar * 100f))) | (int)((ushort)Math.Round((double)(m_DynamicChirpConfigParams.Chirp1R3ADCStartTimeVar * 100f))) << 16);
            DynamicChirpConfigurationParam.Chirp2R1 = (uint)((int)m_DynamicChirpConfigParams.Chirp2R1ProfileIndex | (int)((byte)Math.Round((double)m_DynamicChirpConfigParams.Chirp2R1FreqSlopeVar * 20.712612345679013)) << 8 | (int)m_DynamicChirpConfigParams.Chirp2R1Tx1Enable << 16 | (int)m_DynamicChirpConfigParams.Chirp2R1Tx2Enable << 17 | (int)m_DynamicChirpConfigParams.Chirp2R1Tx3Enable << 18 | (int)m_DynamicChirpConfigParams.Chirp2R1BPMConstVal << 24);
            DynamicChirpConfigurationParam.Chirp2R2 = (uint)Math.Round(Math.Round(m_DynamicChirpConfigParams.Chirp2R2FreqStartVar, 7) / 3.6 * 67108864.0);
            DynamicChirpConfigurationParam.Chirp2R3 = (uint)((int)((ushort)Math.Round((double)(m_DynamicChirpConfigParams.Chirp2R3IdleTimeVar * 100f))) | (int)((ushort)Math.Round((double)(m_DynamicChirpConfigParams.Chirp2R3ADCStartTimeVar * 100f))) << 16);
            DynamicChirpConfigurationParam.Chirp3R1 = (uint)((int)m_DynamicChirpConfigParams.Chirp3R1ProfileIndex | (int)((byte)Math.Round((double)m_DynamicChirpConfigParams.Chirp3R1FreqSlopeVar * 20.712612345679013)) << 8 | (int)m_DynamicChirpConfigParams.Chirp3R1Tx1Enable << 16 | (int)m_DynamicChirpConfigParams.Chirp3R1Tx2Enable << 17 | (int)m_DynamicChirpConfigParams.Chirp3R1Tx3Enable << 18 | (int)m_DynamicChirpConfigParams.Chirp3R1BPMConstVal << 24);
            DynamicChirpConfigurationParam.Chirp3R2 = (uint)Math.Round(Math.Round(m_DynamicChirpConfigParams.Chirp3R2FreqStartVar, 7) / 3.6 * 67108864.0);
            DynamicChirpConfigurationParam.Chirp3R3 = (uint)((int)((ushort)Math.Round((double)(m_DynamicChirpConfigParams.Chirp3R3IdleTimeVar * 100f))) | (int)((ushort)Math.Round((double)(m_DynamicChirpConfigParams.Chirp3R3ADCStartTimeVar * 100f))) << 16);
            DynamicChirpConfigurationParam.Chirp4R1 = (uint)((int)m_DynamicChirpConfigParams.Chirp4R1ProfileIndex | (int)((byte)Math.Round((double)m_DynamicChirpConfigParams.Chirp4R1FreqSlopeVar * 20.712612345679013)) << 8 | (int)m_DynamicChirpConfigParams.Chirp4R1Tx1Enable << 16 | (int)m_DynamicChirpConfigParams.Chirp4R1Tx2Enable << 17 | (int)m_DynamicChirpConfigParams.Chirp4R1Tx3Enable << 18 | (int)m_DynamicChirpConfigParams.Chirp4R1BPMConstVal << 24);
            DynamicChirpConfigurationParam.Chirp4R2 = (uint)Math.Round(Math.Round(m_DynamicChirpConfigParams.Chirp4R2FreqStartVar, 7) / 3.6 * 67108864.0);
            DynamicChirpConfigurationParam.Chirp4R3 = (uint)((int)((ushort)Math.Round((double)(m_DynamicChirpConfigParams.Chirp4R3IdleTimeVar * 100f))) | (int)((ushort)Math.Round((double)(m_DynamicChirpConfigParams.Chirp4R3ADCStartTimeVar * 100f))) << 16);
            DynamicChirpConfigurationParam.Chirp5R1 = (uint)((int)m_DynamicChirpConfigParams.Chirp5R1ProfileIndex | (int)((byte)Math.Round((double)m_DynamicChirpConfigParams.Chirp5R1FreqSlopeVar * 20.712612345679013)) << 8 | (int)m_DynamicChirpConfigParams.Chirp5R1Tx1Enable << 16 | (int)m_DynamicChirpConfigParams.Chirp5R1Tx2Enable << 17 | (int)m_DynamicChirpConfigParams.Chirp5R1Tx3Enable << 18 | (int)m_DynamicChirpConfigParams.Chirp5R1BPMConstVal << 24);
            DynamicChirpConfigurationParam.Chirp5R2 = (uint)Math.Round(Math.Round(m_DynamicChirpConfigParams.Chirp5R2FreqStartVar, 7) / 3.6 * 67108864.0);
            DynamicChirpConfigurationParam.Chirp5R3 = (uint)((int)((ushort)Math.Round((double)(m_DynamicChirpConfigParams.Chirp5R3IdleTimeVar * 100f))) | (int)((ushort)Math.Round((double)(m_DynamicChirpConfigParams.Chirp5R3ADCStartTimeVar * 100f))) << 16);
            DynamicChirpConfigurationParam.Chirp6R1 = (uint)((int)m_DynamicChirpConfigParams.Chirp6R1ProfileIndex | (int)((byte)Math.Round((double)m_DynamicChirpConfigParams.Chirp6R1FreqSlopeVar * 20.712612345679013)) << 8 | (int)m_DynamicChirpConfigParams.Chirp6R1Tx1Enable << 16 | (int)m_DynamicChirpConfigParams.Chirp6R1Tx2Enable << 17 | (int)m_DynamicChirpConfigParams.Chirp6R1Tx3Enable << 18 | (int)m_DynamicChirpConfigParams.Chirp6R1BPMConstVal << 24);
            DynamicChirpConfigurationParam.Chirp6R2 = (uint)Math.Round(Math.Round(m_DynamicChirpConfigParams.Chirp6R2FreqStartVar, 7) / 3.6 * 67108864.0);
            DynamicChirpConfigurationParam.Chirp6R3 = (uint)((int)((ushort)Math.Round((double)(m_DynamicChirpConfigParams.Chirp6R3IdleTimeVar * 100f))) | (int)((ushort)Math.Round((double)(m_DynamicChirpConfigParams.Chirp6R3ADCStartTimeVar * 100f))) << 16);
            DynamicChirpConfigurationParam.Chirp7R1 = (uint)((int)m_DynamicChirpConfigParams.Chirp7R1ProfileIndex | (int)((byte)Math.Round((double)m_DynamicChirpConfigParams.Chirp7R1FreqSlopeVar * 20.712612345679013)) << 8 | (int)m_DynamicChirpConfigParams.Chirp7R1Tx1Enable << 16 | (int)m_DynamicChirpConfigParams.Chirp7R1Tx2Enable << 17 | (int)m_DynamicChirpConfigParams.Chirp7R1Tx3Enable << 18 | (int)m_DynamicChirpConfigParams.Chirp7R1BPMConstVal << 24);
            DynamicChirpConfigurationParam.Chirp7R2 = (uint)Math.Round(Math.Round(m_DynamicChirpConfigParams.Chirp7R2FreqStartVar, 7) / 3.6 * 67108864.0);
            DynamicChirpConfigurationParam.Chirp7R3 = (uint)((int)((ushort)Math.Round((double)(m_DynamicChirpConfigParams.Chirp7R3IdleTimeVar * 100f))) | (int)((ushort)Math.Round((double)(m_DynamicChirpConfigParams.Chirp7R3ADCStartTimeVar * 100f))) << 16);
            DynamicChirpConfigurationParam.Chirp8R1 = (uint)((int)m_DynamicChirpConfigParams.Chirp8R1ProfileIndex | (int)((byte)Math.Round((double)m_DynamicChirpConfigParams.Chirp8R1FreqSlopeVar * 20.712612345679013)) << 8 | (int)m_DynamicChirpConfigParams.Chirp8R1Tx1Enable << 16 | (int)m_DynamicChirpConfigParams.Chirp8R1Tx2Enable << 17 | (int)m_DynamicChirpConfigParams.Chirp8R1Tx3Enable << 18 | (int)m_DynamicChirpConfigParams.Chirp8R1BPMConstVal << 24);
            DynamicChirpConfigurationParam.Chirp8R2 = (uint)Math.Round(Math.Round(m_DynamicChirpConfigParams.Chirp8R2FreqStartVar, 7) / 3.6 * 67108864.0);
            DynamicChirpConfigurationParam.Chirp8R3 = (uint)((int)((ushort)Math.Round((double)(m_DynamicChirpConfigParams.Chirp8R3IdleTimeVar * 100f))) | (int)((ushort)Math.Round((double)(m_DynamicChirpConfigParams.Chirp8R3ADCStartTimeVar * 100f))) << 16);
            DynamicChirpConfigurationParam.Chirp9R1 = (uint)((int)m_DynamicChirpConfigParams.Chirp9R1ProfileIndex | (int)((byte)Math.Round((double)m_DynamicChirpConfigParams.Chirp9R1FreqSlopeVar * 20.712612345679013)) << 8 | (int)m_DynamicChirpConfigParams.Chirp9R1Tx1Enable << 16 | (int)m_DynamicChirpConfigParams.Chirp9R1Tx2Enable << 17 | (int)m_DynamicChirpConfigParams.Chirp9R1Tx3Enable << 18 | (int)m_DynamicChirpConfigParams.Chirp9R1BPMConstVal << 24);
            DynamicChirpConfigurationParam.Chirp9R2 = (uint)Math.Round(Math.Round(m_DynamicChirpConfigParams.Chirp9R2FreqStartVar, 7) / 3.6 * 67108864.0);
            DynamicChirpConfigurationParam.Chirp9R3 = (uint)((int)((ushort)Math.Round((double)(m_DynamicChirpConfigParams.Chirp9R3IdleTimeVar * 100f))) | (int)((ushort)Math.Round((double)(m_DynamicChirpConfigParams.Chirp9R3ADCStartTimeVar * 100f))) << 16);
            DynamicChirpConfigurationParam.Chirp10R1 = (uint)((int)m_DynamicChirpConfigParams.Chirp10R1ProfileIndex | (int)((byte)Math.Round((double)m_DynamicChirpConfigParams.Chirp10R1FreqSlopeVar * 20.712612345679013)) << 8 | (int)m_DynamicChirpConfigParams.Chirp10R1Tx1Enable << 16 | (int)m_DynamicChirpConfigParams.Chirp10R1Tx2Enable << 17 | (int)m_DynamicChirpConfigParams.Chirp10R1Tx3Enable << 18 | (int)m_DynamicChirpConfigParams.Chirp10R1BPMConstVal << 24);
            DynamicChirpConfigurationParam.Chirp10R2 = (uint)Math.Round(Math.Round(m_DynamicChirpConfigParams.Chirp10R2FreqStartVar, 7) / 3.6 * 67108864.0);
            DynamicChirpConfigurationParam.Chirp10R3 = (uint)((int)((ushort)Math.Round((double)(m_DynamicChirpConfigParams.Chirp10R3IdleTimeVar * 100f))) | (int)((ushort)Math.Round((double)(m_DynamicChirpConfigParams.Chirp10R3ADCStartTimeVar * 100f))) << 16);
            DynamicChirpConfigurationParam.Chirp11R1 = (uint)((int)m_DynamicChirpConfigParams.Chirp11R1ProfileIndex | (int)((byte)Math.Round((double)m_DynamicChirpConfigParams.Chirp11R1FreqSlopeVar * 20.712612345679013)) << 8 | (int)m_DynamicChirpConfigParams.Chirp11R1Tx1Enable << 16 | (int)m_DynamicChirpConfigParams.Chirp11R1Tx2Enable << 17 | (int)m_DynamicChirpConfigParams.Chirp11R1Tx3Enable << 18 | (int)m_DynamicChirpConfigParams.Chirp11R1BPMConstVal << 24);
            DynamicChirpConfigurationParam.Chirp11R2 = (uint)Math.Round(Math.Round(m_DynamicChirpConfigParams.Chirp11R2FreqStartVar, 7) / 3.6 * 67108864.0);
            DynamicChirpConfigurationParam.Chirp11R3 = (uint)((int)((ushort)Math.Round((double)(m_DynamicChirpConfigParams.Chirp11R3IdleTimeVar * 100f))) | (int)((ushort)Math.Round((double)(m_DynamicChirpConfigParams.Chirp11R3ADCStartTimeVar * 100f))) << 16);
            DynamicChirpConfigurationParam.Chirp12R1 = (uint)((int)m_DynamicChirpConfigParams.Chirp12R1ProfileIndex | (int)((byte)Math.Round((double)m_DynamicChirpConfigParams.Chirp12R1FreqSlopeVar * 20.712612345679013)) << 8 | (int)m_DynamicChirpConfigParams.Chirp12R1Tx1Enable << 16 | (int)m_DynamicChirpConfigParams.Chirp12R1Tx2Enable << 17 | (int)m_DynamicChirpConfigParams.Chirp12R1Tx3Enable << 18 | (int)m_DynamicChirpConfigParams.Chirp12R1BPMConstVal << 24);
            DynamicChirpConfigurationParam.Chirp12R2 = (uint)Math.Round(Math.Round(m_DynamicChirpConfigParams.Chirp12R2FreqStartVar, 7) / 3.6 * 67108864.0);
            DynamicChirpConfigurationParam.Chirp12R3 = (uint)((int)((ushort)Math.Round((double)(m_DynamicChirpConfigParams.Chirp12R3IdleTimeVar * 100f))) | (int)((ushort)Math.Round((double)(m_DynamicChirpConfigParams.Chirp12R3ADCStartTimeVar * 100f))) << 16);
            DynamicChirpConfigurationParam.Chirp13R1 = (uint)((int)m_DynamicChirpConfigParams.Chirp13R1ProfileIndex | (int)((byte)Math.Round((double)m_DynamicChirpConfigParams.Chirp13R1FreqSlopeVar * 20.712612345679013)) << 8 | (int)m_DynamicChirpConfigParams.Chirp13R1Tx1Enable << 16 | (int)m_DynamicChirpConfigParams.Chirp13R1Tx2Enable << 17 | (int)m_DynamicChirpConfigParams.Chirp13R1Tx3Enable << 18 | (int)m_DynamicChirpConfigParams.Chirp13R1BPMConstVal << 24);
            DynamicChirpConfigurationParam.Chirp13R2 = (uint)Math.Round(Math.Round(m_DynamicChirpConfigParams.Chirp13R2FreqStartVar, 7) / 3.6 * 67108864.0);
            DynamicChirpConfigurationParam.Chirp13R3 = (uint)((int)((ushort)Math.Round((double)(m_DynamicChirpConfigParams.Chirp13R3IdleTimeVar * 100f))) | (int)((ushort)Math.Round((double)(m_DynamicChirpConfigParams.Chirp13R3ADCStartTimeVar * 100f))) << 16);
            DynamicChirpConfigurationParam.Chirp14R1 = (uint)((int)m_DynamicChirpConfigParams.Chirp14R1ProfileIndex | (int)((byte)Math.Round((double)m_DynamicChirpConfigParams.Chirp14R1FreqSlopeVar * 20.712612345679013)) << 8 | (int)m_DynamicChirpConfigParams.Chirp14R1Tx1Enable << 16 | (int)m_DynamicChirpConfigParams.Chirp14R1Tx2Enable << 17 | (int)m_DynamicChirpConfigParams.Chirp14R1Tx3Enable << 18 | (int)m_DynamicChirpConfigParams.Chirp14R1BPMConstVal << 24);
            DynamicChirpConfigurationParam.Chirp14R2 = (uint)Math.Round(Math.Round(m_DynamicChirpConfigParams.Chirp14R2FreqStartVar, 7) / 3.6 * 67108864.0);
            DynamicChirpConfigurationParam.Chirp14R3 = (uint)((int)((ushort)Math.Round((double)(m_DynamicChirpConfigParams.Chirp14R3IdleTimeVar * 100f))) | (int)((ushort)Math.Round((double)(m_DynamicChirpConfigParams.Chirp14R3ADCStartTimeVar * 100f))) << 16);
            DynamicChirpConfigurationParam.Chirp15R1 = (uint)((int)m_DynamicChirpConfigParams.Chirp15R1ProfileIndex | (int)((byte)Math.Round((double)m_DynamicChirpConfigParams.Chirp15R1FreqSlopeVar * 20.712612345679013)) << 8 | (int)m_DynamicChirpConfigParams.Chirp15R1Tx1Enable << 16 | (int)m_DynamicChirpConfigParams.Chirp15R1Tx2Enable << 17 | (int)m_DynamicChirpConfigParams.Chirp15R1Tx3Enable << 18 | (int)m_DynamicChirpConfigParams.Chirp15R1BPMConstVal << 24);
            DynamicChirpConfigurationParam.Chirp15R2 = (uint)Math.Round(Math.Round(m_DynamicChirpConfigParams.Chirp15R2FreqStartVar, 7) / 3.6 * 67108864.0);
            DynamicChirpConfigurationParam.Chirp15R3 = (uint)((int)((ushort)Math.Round((double)(m_DynamicChirpConfigParams.Chirp15R3IdleTimeVar * 100f))) | (int)((ushort)Math.Round((double)(m_DynamicChirpConfigParams.Chirp15R3ADCStartTimeVar * 100f))) << 16);
            DynamicChirpConfigurationParam.Chirp16R1 = (uint)((int)m_DynamicChirpConfigParams.Chirp16R1ProfileIndex | (int)((byte)Math.Round((double)m_DynamicChirpConfigParams.Chirp16R1FreqSlopeVar * 20.712612345679013)) << 8 | (int)m_DynamicChirpConfigParams.Chirp16R1Tx1Enable << 16 | (int)m_DynamicChirpConfigParams.Chirp16R1Tx2Enable << 17 | (int)m_DynamicChirpConfigParams.Chirp16R1Tx3Enable << 18 | (int)m_DynamicChirpConfigParams.Chirp16R1BPMConstVal << 24);
            DynamicChirpConfigurationParam.Chirp16R2 = (uint)Math.Round(Math.Round(m_DynamicChirpConfigParams.Chirp16R2FreqStartVar, 7) / 3.6 * 67108864.0);
            DynamicChirpConfigurationParam.Chirp16R3 = (uint)((int)((ushort)Math.Round((double)(m_DynamicChirpConfigParams.Chirp16R3IdleTimeVar * 100f))) | (int)((ushort)Math.Round((double)(m_DynamicChirpConfigParams.Chirp16R3ADCStartTimeVar * 100f))) << 16);
        }

        public void UpdateDynChirpAllRow_JSON(int devInd, int chirpSegInd)
        {
            GlobalRef.jobject.mmWaveDevices[devInd].rfConfig.rlDynChirpCfgs[chirpSegInd].rlDynChirpCfg_t.rlChirpRows[0].rlChirpRow_t.chirpNR1 = "0x" + DynamicChirpConfigurationParam.Chirp1R1.ToString();
            GlobalRef.jobject.mmWaveDevices[devInd].rfConfig.rlDynChirpCfgs[chirpSegInd].rlDynChirpCfg_t.rlChirpRows[0].rlChirpRow_t.chirpNR2 = "0x" + DynamicChirpConfigurationParam.Chirp1R2.ToString();
            GlobalRef.jobject.mmWaveDevices[devInd].rfConfig.rlDynChirpCfgs[chirpSegInd].rlDynChirpCfg_t.rlChirpRows[0].rlChirpRow_t.chirpNR3 = "0x" + DynamicChirpConfigurationParam.Chirp1R3.ToString();
            GlobalRef.jobject.mmWaveDevices[devInd].rfConfig.rlDynChirpCfgs[chirpSegInd].rlDynChirpCfg_t.rlChirpRows[1].rlChirpRow_t.chirpNR1 = "0x" + DynamicChirpConfigurationParam.Chirp2R1.ToString();
            GlobalRef.jobject.mmWaveDevices[devInd].rfConfig.rlDynChirpCfgs[chirpSegInd].rlDynChirpCfg_t.rlChirpRows[1].rlChirpRow_t.chirpNR2 = "0x" + DynamicChirpConfigurationParam.Chirp2R2.ToString();
            GlobalRef.jobject.mmWaveDevices[devInd].rfConfig.rlDynChirpCfgs[chirpSegInd].rlDynChirpCfg_t.rlChirpRows[1].rlChirpRow_t.chirpNR3 = "0x" + DynamicChirpConfigurationParam.Chirp2R3.ToString();
            GlobalRef.jobject.mmWaveDevices[devInd].rfConfig.rlDynChirpCfgs[chirpSegInd].rlDynChirpCfg_t.rlChirpRows[2].rlChirpRow_t.chirpNR1 = "0x" + DynamicChirpConfigurationParam.Chirp3R1.ToString();
            GlobalRef.jobject.mmWaveDevices[devInd].rfConfig.rlDynChirpCfgs[chirpSegInd].rlDynChirpCfg_t.rlChirpRows[2].rlChirpRow_t.chirpNR2 = "0x" + DynamicChirpConfigurationParam.Chirp3R2.ToString();
            GlobalRef.jobject.mmWaveDevices[devInd].rfConfig.rlDynChirpCfgs[chirpSegInd].rlDynChirpCfg_t.rlChirpRows[2].rlChirpRow_t.chirpNR3 = "0x" + DynamicChirpConfigurationParam.Chirp3R3.ToString();
            GlobalRef.jobject.mmWaveDevices[devInd].rfConfig.rlDynChirpCfgs[chirpSegInd].rlDynChirpCfg_t.rlChirpRows[3].rlChirpRow_t.chirpNR1 = "0x" + DynamicChirpConfigurationParam.Chirp4R1.ToString();
            GlobalRef.jobject.mmWaveDevices[devInd].rfConfig.rlDynChirpCfgs[chirpSegInd].rlDynChirpCfg_t.rlChirpRows[3].rlChirpRow_t.chirpNR2 = "0x" + DynamicChirpConfigurationParam.Chirp4R2.ToString();
            GlobalRef.jobject.mmWaveDevices[devInd].rfConfig.rlDynChirpCfgs[chirpSegInd].rlDynChirpCfg_t.rlChirpRows[3].rlChirpRow_t.chirpNR3 = "0x" + DynamicChirpConfigurationParam.Chirp4R3.ToString();
            GlobalRef.jobject.mmWaveDevices[devInd].rfConfig.rlDynChirpCfgs[chirpSegInd].rlDynChirpCfg_t.rlChirpRows[4].rlChirpRow_t.chirpNR1 = "0x" + DynamicChirpConfigurationParam.Chirp5R1.ToString();
            GlobalRef.jobject.mmWaveDevices[devInd].rfConfig.rlDynChirpCfgs[chirpSegInd].rlDynChirpCfg_t.rlChirpRows[4].rlChirpRow_t.chirpNR2 = "0x" + DynamicChirpConfigurationParam.Chirp5R2.ToString();
            GlobalRef.jobject.mmWaveDevices[devInd].rfConfig.rlDynChirpCfgs[chirpSegInd].rlDynChirpCfg_t.rlChirpRows[4].rlChirpRow_t.chirpNR3 = "0x" + DynamicChirpConfigurationParam.Chirp5R3.ToString();
            GlobalRef.jobject.mmWaveDevices[devInd].rfConfig.rlDynChirpCfgs[chirpSegInd].rlDynChirpCfg_t.rlChirpRows[5].rlChirpRow_t.chirpNR1 = "0x" + DynamicChirpConfigurationParam.Chirp6R1.ToString();
            GlobalRef.jobject.mmWaveDevices[devInd].rfConfig.rlDynChirpCfgs[chirpSegInd].rlDynChirpCfg_t.rlChirpRows[5].rlChirpRow_t.chirpNR2 = "0x" + DynamicChirpConfigurationParam.Chirp6R2.ToString();
            GlobalRef.jobject.mmWaveDevices[devInd].rfConfig.rlDynChirpCfgs[chirpSegInd].rlDynChirpCfg_t.rlChirpRows[5].rlChirpRow_t.chirpNR3 = "0x" + DynamicChirpConfigurationParam.Chirp6R3.ToString();
            GlobalRef.jobject.mmWaveDevices[devInd].rfConfig.rlDynChirpCfgs[chirpSegInd].rlDynChirpCfg_t.rlChirpRows[6].rlChirpRow_t.chirpNR1 = "0x" + DynamicChirpConfigurationParam.Chirp7R1.ToString();
            GlobalRef.jobject.mmWaveDevices[devInd].rfConfig.rlDynChirpCfgs[chirpSegInd].rlDynChirpCfg_t.rlChirpRows[6].rlChirpRow_t.chirpNR2 = "0x" + DynamicChirpConfigurationParam.Chirp7R2.ToString();
            GlobalRef.jobject.mmWaveDevices[devInd].rfConfig.rlDynChirpCfgs[chirpSegInd].rlDynChirpCfg_t.rlChirpRows[6].rlChirpRow_t.chirpNR3 = "0x" + DynamicChirpConfigurationParam.Chirp7R3.ToString();
            GlobalRef.jobject.mmWaveDevices[devInd].rfConfig.rlDynChirpCfgs[chirpSegInd].rlDynChirpCfg_t.rlChirpRows[7].rlChirpRow_t.chirpNR1 = "0x" + DynamicChirpConfigurationParam.Chirp8R1.ToString();
            GlobalRef.jobject.mmWaveDevices[devInd].rfConfig.rlDynChirpCfgs[chirpSegInd].rlDynChirpCfg_t.rlChirpRows[7].rlChirpRow_t.chirpNR2 = "0x" + DynamicChirpConfigurationParam.Chirp8R2.ToString();
            GlobalRef.jobject.mmWaveDevices[devInd].rfConfig.rlDynChirpCfgs[chirpSegInd].rlDynChirpCfg_t.rlChirpRows[7].rlChirpRow_t.chirpNR3 = "0x" + DynamicChirpConfigurationParam.Chirp8R3.ToString();
            GlobalRef.jobject.mmWaveDevices[devInd].rfConfig.rlDynChirpCfgs[chirpSegInd].rlDynChirpCfg_t.rlChirpRows[8].rlChirpRow_t.chirpNR1 = "0x" + DynamicChirpConfigurationParam.Chirp9R1.ToString();
            GlobalRef.jobject.mmWaveDevices[devInd].rfConfig.rlDynChirpCfgs[chirpSegInd].rlDynChirpCfg_t.rlChirpRows[8].rlChirpRow_t.chirpNR2 = "0x" + DynamicChirpConfigurationParam.Chirp9R2.ToString();
            GlobalRef.jobject.mmWaveDevices[devInd].rfConfig.rlDynChirpCfgs[chirpSegInd].rlDynChirpCfg_t.rlChirpRows[8].rlChirpRow_t.chirpNR3 = "0x" + DynamicChirpConfigurationParam.Chirp9R3.ToString();
            GlobalRef.jobject.mmWaveDevices[devInd].rfConfig.rlDynChirpCfgs[chirpSegInd].rlDynChirpCfg_t.rlChirpRows[9].rlChirpRow_t.chirpNR1 = "0x" + DynamicChirpConfigurationParam.Chirp10R1.ToString();
            GlobalRef.jobject.mmWaveDevices[devInd].rfConfig.rlDynChirpCfgs[chirpSegInd].rlDynChirpCfg_t.rlChirpRows[9].rlChirpRow_t.chirpNR2 = "0x" + DynamicChirpConfigurationParam.Chirp10R2.ToString();
            GlobalRef.jobject.mmWaveDevices[devInd].rfConfig.rlDynChirpCfgs[chirpSegInd].rlDynChirpCfg_t.rlChirpRows[9].rlChirpRow_t.chirpNR3 = "0x" + DynamicChirpConfigurationParam.Chirp10R3.ToString();
            GlobalRef.jobject.mmWaveDevices[devInd].rfConfig.rlDynChirpCfgs[chirpSegInd].rlDynChirpCfg_t.rlChirpRows[10].rlChirpRow_t.chirpNR1 = "0x" + DynamicChirpConfigurationParam.Chirp11R1.ToString();
            GlobalRef.jobject.mmWaveDevices[devInd].rfConfig.rlDynChirpCfgs[chirpSegInd].rlDynChirpCfg_t.rlChirpRows[10].rlChirpRow_t.chirpNR2 = "0x" + DynamicChirpConfigurationParam.Chirp11R2.ToString();
            GlobalRef.jobject.mmWaveDevices[devInd].rfConfig.rlDynChirpCfgs[chirpSegInd].rlDynChirpCfg_t.rlChirpRows[10].rlChirpRow_t.chirpNR3 = "0x" + DynamicChirpConfigurationParam.Chirp11R3.ToString();
            GlobalRef.jobject.mmWaveDevices[devInd].rfConfig.rlDynChirpCfgs[chirpSegInd].rlDynChirpCfg_t.rlChirpRows[11].rlChirpRow_t.chirpNR1 = "0x" + DynamicChirpConfigurationParam.Chirp12R1.ToString();
            GlobalRef.jobject.mmWaveDevices[devInd].rfConfig.rlDynChirpCfgs[chirpSegInd].rlDynChirpCfg_t.rlChirpRows[11].rlChirpRow_t.chirpNR2 = "0x" + DynamicChirpConfigurationParam.Chirp12R2.ToString();
            GlobalRef.jobject.mmWaveDevices[devInd].rfConfig.rlDynChirpCfgs[chirpSegInd].rlDynChirpCfg_t.rlChirpRows[11].rlChirpRow_t.chirpNR3 = "0x" + DynamicChirpConfigurationParam.Chirp12R3.ToString();
            GlobalRef.jobject.mmWaveDevices[devInd].rfConfig.rlDynChirpCfgs[chirpSegInd].rlDynChirpCfg_t.rlChirpRows[12].rlChirpRow_t.chirpNR1 = "0x" + DynamicChirpConfigurationParam.Chirp13R1.ToString();
            GlobalRef.jobject.mmWaveDevices[devInd].rfConfig.rlDynChirpCfgs[chirpSegInd].rlDynChirpCfg_t.rlChirpRows[12].rlChirpRow_t.chirpNR2 = "0x" + DynamicChirpConfigurationParam.Chirp13R2.ToString();
            GlobalRef.jobject.mmWaveDevices[devInd].rfConfig.rlDynChirpCfgs[chirpSegInd].rlDynChirpCfg_t.rlChirpRows[12].rlChirpRow_t.chirpNR3 = "0x" + DynamicChirpConfigurationParam.Chirp13R3.ToString();
            GlobalRef.jobject.mmWaveDevices[devInd].rfConfig.rlDynChirpCfgs[chirpSegInd].rlDynChirpCfg_t.rlChirpRows[13].rlChirpRow_t.chirpNR1 = "0x" + DynamicChirpConfigurationParam.Chirp14R1.ToString();
            GlobalRef.jobject.mmWaveDevices[devInd].rfConfig.rlDynChirpCfgs[chirpSegInd].rlDynChirpCfg_t.rlChirpRows[13].rlChirpRow_t.chirpNR2 = "0x" + DynamicChirpConfigurationParam.Chirp14R2.ToString();
            GlobalRef.jobject.mmWaveDevices[devInd].rfConfig.rlDynChirpCfgs[chirpSegInd].rlDynChirpCfg_t.rlChirpRows[13].rlChirpRow_t.chirpNR3 = "0x" + DynamicChirpConfigurationParam.Chirp14R3.ToString();
            GlobalRef.jobject.mmWaveDevices[devInd].rfConfig.rlDynChirpCfgs[chirpSegInd].rlDynChirpCfg_t.rlChirpRows[14].rlChirpRow_t.chirpNR1 = "0x" + DynamicChirpConfigurationParam.Chirp15R1.ToString();
            GlobalRef.jobject.mmWaveDevices[devInd].rfConfig.rlDynChirpCfgs[chirpSegInd].rlDynChirpCfg_t.rlChirpRows[14].rlChirpRow_t.chirpNR2 = "0x" + DynamicChirpConfigurationParam.Chirp15R2.ToString();
            GlobalRef.jobject.mmWaveDevices[devInd].rfConfig.rlDynChirpCfgs[chirpSegInd].rlDynChirpCfg_t.rlChirpRows[14].rlChirpRow_t.chirpNR3 = "0x" + DynamicChirpConfigurationParam.Chirp15R3.ToString();
            GlobalRef.jobject.mmWaveDevices[devInd].rfConfig.rlDynChirpCfgs[chirpSegInd].rlDynChirpCfg_t.rlChirpRows[15].rlChirpRow_t.chirpNR1 = "0x" + DynamicChirpConfigurationParam.Chirp16R1.ToString();
            GlobalRef.jobject.mmWaveDevices[devInd].rfConfig.rlDynChirpCfgs[chirpSegInd].rlDynChirpCfg_t.rlChirpRows[15].rlChirpRow_t.chirpNR2 = "0x" + DynamicChirpConfigurationParam.Chirp16R2.ToString();
            GlobalRef.jobject.mmWaveDevices[devInd].rfConfig.rlDynChirpCfgs[chirpSegInd].rlDynChirpCfg_t.rlChirpRows[15].rlChirpRow_t.chirpNR3 = "0x" + DynamicChirpConfigurationParam.Chirp16R3.ToString();
        }

        private void UpdateDynChirpRow1()
        {
            if (GlobalRef.g_ARDeviceOperateFreq60GHz)
            {
                DynamicChirpConfigurationParam.Chirp1R1 = (uint)((int)m_DynamicChirpConfigParams.Chirp1R1ProfileIndex | (int)((byte)Math.Round((double)m_DynamicChirpConfigParams.Chirp1R1FreqSlopeVar * 27.61681646090535)) << 8 | (int)m_DynamicChirpConfigParams.Chirp1R1Tx1Enable << 16 | (int)m_DynamicChirpConfigParams.Chirp1R1Tx2Enable << 17 | (int)m_DynamicChirpConfigParams.Chirp1R1Tx3Enable << 18 | (int)m_DynamicChirpConfigParams.Chirp1R1BPMConstVal << 24);
                DynamicChirpConfigurationParam.Chirp1R2 = (uint)((int)m_DynamicChirpConfigParams.Chirp2R1ProfileIndex | (int)((byte)Math.Round((double)m_DynamicChirpConfigParams.Chirp2R1FreqSlopeVar * 27.61681646090535)) << 8 | (int)m_DynamicChirpConfigParams.Chirp2R1Tx1Enable << 16 | (int)m_DynamicChirpConfigParams.Chirp2R1Tx2Enable << 17 | (int)m_DynamicChirpConfigParams.Chirp2R1Tx3Enable << 18 | (int)m_DynamicChirpConfigParams.Chirp2R1BPMConstVal << 24);
                DynamicChirpConfigurationParam.Chirp1R3 = (uint)((int)m_DynamicChirpConfigParams.Chirp3R1ProfileIndex | (int)((byte)Math.Round((double)m_DynamicChirpConfigParams.Chirp3R1FreqSlopeVar * 27.61681646090535)) << 8 | (int)m_DynamicChirpConfigParams.Chirp3R1Tx1Enable << 16 | (int)m_DynamicChirpConfigParams.Chirp3R1Tx2Enable << 17 | (int)m_DynamicChirpConfigParams.Chirp3R1Tx3Enable << 18 | (int)m_DynamicChirpConfigParams.Chirp3R1BPMConstVal << 24);
                DynamicChirpConfigurationParam.Chirp2R1 = (uint)((int)m_DynamicChirpConfigParams.Chirp4R1ProfileIndex | (int)((byte)Math.Round((double)m_DynamicChirpConfigParams.Chirp4R1FreqSlopeVar * 27.61681646090535)) << 8 | (int)m_DynamicChirpConfigParams.Chirp4R1Tx1Enable << 16 | (int)m_DynamicChirpConfigParams.Chirp4R1Tx2Enable << 17 | (int)m_DynamicChirpConfigParams.Chirp4R1Tx3Enable << 18 | (int)m_DynamicChirpConfigParams.Chirp4R1BPMConstVal << 24);
                DynamicChirpConfigurationParam.Chirp2R2 = (uint)((int)m_DynamicChirpConfigParams.Chirp5R1ProfileIndex | (int)((byte)Math.Round((double)m_DynamicChirpConfigParams.Chirp5R1FreqSlopeVar * 27.61681646090535)) << 8 | (int)m_DynamicChirpConfigParams.Chirp5R1Tx1Enable << 16 | (int)m_DynamicChirpConfigParams.Chirp5R1Tx2Enable << 17 | (int)m_DynamicChirpConfigParams.Chirp5R1Tx3Enable << 18 | (int)m_DynamicChirpConfigParams.Chirp5R1BPMConstVal << 24);
                DynamicChirpConfigurationParam.Chirp2R3 = (uint)((int)m_DynamicChirpConfigParams.Chirp6R1ProfileIndex | (int)((byte)Math.Round((double)m_DynamicChirpConfigParams.Chirp6R1FreqSlopeVar * 27.61681646090535)) << 8 | (int)m_DynamicChirpConfigParams.Chirp6R1Tx1Enable << 16 | (int)m_DynamicChirpConfigParams.Chirp6R1Tx2Enable << 17 | (int)m_DynamicChirpConfigParams.Chirp6R1Tx3Enable << 18 | (int)m_DynamicChirpConfigParams.Chirp6R1BPMConstVal << 24);
                DynamicChirpConfigurationParam.Chirp3R1 = (uint)((int)m_DynamicChirpConfigParams.Chirp7R1ProfileIndex | (int)((byte)Math.Round((double)m_DynamicChirpConfigParams.Chirp7R1FreqSlopeVar * 27.61681646090535)) << 8 | (int)m_DynamicChirpConfigParams.Chirp7R1Tx1Enable << 16 | (int)m_DynamicChirpConfigParams.Chirp7R1Tx2Enable << 17 | (int)m_DynamicChirpConfigParams.Chirp7R1Tx3Enable << 18 | (int)m_DynamicChirpConfigParams.Chirp7R1BPMConstVal << 24);
                DynamicChirpConfigurationParam.Chirp3R2 = (uint)((int)m_DynamicChirpConfigParams.Chirp8R1ProfileIndex | (int)((byte)Math.Round((double)m_DynamicChirpConfigParams.Chirp8R1FreqSlopeVar * 27.61681646090535)) << 8 | (int)m_DynamicChirpConfigParams.Chirp8R1Tx1Enable << 16 | (int)m_DynamicChirpConfigParams.Chirp8R1Tx2Enable << 17 | (int)m_DynamicChirpConfigParams.Chirp8R1Tx3Enable << 18 | (int)m_DynamicChirpConfigParams.Chirp8R1BPMConstVal << 24);
                DynamicChirpConfigurationParam.Chirp3R3 = (uint)((int)m_DynamicChirpConfigParams.Chirp9R1ProfileIndex | (int)((byte)Math.Round((double)m_DynamicChirpConfigParams.Chirp9R1FreqSlopeVar * 27.61681646090535)) << 8 | (int)m_DynamicChirpConfigParams.Chirp9R1Tx1Enable << 16 | (int)m_DynamicChirpConfigParams.Chirp9R1Tx2Enable << 17 | (int)m_DynamicChirpConfigParams.Chirp9R1Tx3Enable << 18 | (int)m_DynamicChirpConfigParams.Chirp9R1BPMConstVal << 24);
                DynamicChirpConfigurationParam.Chirp4R1 = (uint)((int)m_DynamicChirpConfigParams.Chirp10R1ProfileIndex | (int)((byte)Math.Round((double)m_DynamicChirpConfigParams.Chirp10R1FreqSlopeVar * 27.61681646090535)) << 8 | (int)m_DynamicChirpConfigParams.Chirp10R1Tx1Enable << 16 | (int)m_DynamicChirpConfigParams.Chirp10R1Tx2Enable << 17 | (int)m_DynamicChirpConfigParams.Chirp10R1Tx3Enable << 18 | (int)m_DynamicChirpConfigParams.Chirp10R1BPMConstVal << 24);
                DynamicChirpConfigurationParam.Chirp4R2 = (uint)((int)m_DynamicChirpConfigParams.Chirp11R1ProfileIndex | (int)((byte)Math.Round((double)m_DynamicChirpConfigParams.Chirp11R1FreqSlopeVar * 27.61681646090535)) << 8 | (int)m_DynamicChirpConfigParams.Chirp11R1Tx1Enable << 16 | (int)m_DynamicChirpConfigParams.Chirp11R1Tx2Enable << 17 | (int)m_DynamicChirpConfigParams.Chirp11R1Tx3Enable << 18 | (int)m_DynamicChirpConfigParams.Chirp11R1BPMConstVal << 24);
                DynamicChirpConfigurationParam.Chirp4R3 = (uint)((int)m_DynamicChirpConfigParams.Chirp12R1ProfileIndex | (int)((byte)Math.Round((double)m_DynamicChirpConfigParams.Chirp12R1FreqSlopeVar * 27.61681646090535)) << 8 | (int)m_DynamicChirpConfigParams.Chirp12R1Tx1Enable << 16 | (int)m_DynamicChirpConfigParams.Chirp12R1Tx2Enable << 17 | (int)m_DynamicChirpConfigParams.Chirp12R1Tx3Enable << 18 | (int)m_DynamicChirpConfigParams.Chirp12R1BPMConstVal << 24);
                DynamicChirpConfigurationParam.Chirp5R1 = (uint)((int)m_DynamicChirpConfigParams.Chirp13R1ProfileIndex | (int)((byte)Math.Round((double)m_DynamicChirpConfigParams.Chirp13R1FreqSlopeVar * 27.61681646090535)) << 8 | (int)m_DynamicChirpConfigParams.Chirp13R1Tx1Enable << 16 | (int)m_DynamicChirpConfigParams.Chirp13R1Tx2Enable << 17 | (int)m_DynamicChirpConfigParams.Chirp13R1Tx3Enable << 18 | (int)m_DynamicChirpConfigParams.Chirp13R1BPMConstVal << 24);
                DynamicChirpConfigurationParam.Chirp5R2 = (uint)((int)m_DynamicChirpConfigParams.Chirp14R1ProfileIndex | (int)((byte)Math.Round((double)m_DynamicChirpConfigParams.Chirp14R1FreqSlopeVar * 27.61681646090535)) << 8 | (int)m_DynamicChirpConfigParams.Chirp14R1Tx1Enable << 16 | (int)m_DynamicChirpConfigParams.Chirp14R1Tx2Enable << 17 | (int)m_DynamicChirpConfigParams.Chirp14R1Tx3Enable << 18 | (int)m_DynamicChirpConfigParams.Chirp14R1BPMConstVal << 24);
                DynamicChirpConfigurationParam.Chirp5R3 = (uint)((int)m_DynamicChirpConfigParams.Chirp15R1ProfileIndex | (int)((byte)Math.Round((double)m_DynamicChirpConfigParams.Chirp15R1FreqSlopeVar * 27.61681646090535)) << 8 | (int)m_DynamicChirpConfigParams.Chirp15R1Tx1Enable << 16 | (int)m_DynamicChirpConfigParams.Chirp15R1Tx2Enable << 17 | (int)m_DynamicChirpConfigParams.Chirp15R1Tx3Enable << 18 | (int)m_DynamicChirpConfigParams.Chirp15R1BPMConstVal << 24);
                DynamicChirpConfigurationParam.Chirp6R1 = (uint)((int)m_DynamicChirpConfigParams.Chirp16R1ProfileIndex | (int)((byte)Math.Round((double)m_DynamicChirpConfigParams.Chirp16R1FreqSlopeVar * 27.61681646090535)) << 8 | (int)m_DynamicChirpConfigParams.Chirp16R1Tx1Enable << 16 | (int)m_DynamicChirpConfigParams.Chirp16R1Tx2Enable << 17 | (int)m_DynamicChirpConfigParams.Chirp16R1Tx3Enable << 18 | (int)m_DynamicChirpConfigParams.Chirp16R1BPMConstVal << 24);
                DynamicChirpConfigurationParam.Chirp6R2 = (uint)((int)m_DynamicChirpConfigParams.Chirp17R1ProfileIndex | (int)((byte)Math.Round((double)m_DynamicChirpConfigParams.Chirp17R1FreqSlopeVar * 27.61681646090535)) << 8 | (int)m_DynamicChirpConfigParams.Chirp17R1Tx1Enable << 16 | (int)m_DynamicChirpConfigParams.Chirp17R1Tx2Enable << 17 | (int)m_DynamicChirpConfigParams.Chirp17R1Tx3Enable << 18 | (int)m_DynamicChirpConfigParams.Chirp17R1BPMConstVal << 24);
                DynamicChirpConfigurationParam.Chirp6R3 = (uint)((int)m_DynamicChirpConfigParams.Chirp18R1ProfileIndex | (int)((byte)Math.Round((double)m_DynamicChirpConfigParams.Chirp18R1FreqSlopeVar * 27.61681646090535)) << 8 | (int)m_DynamicChirpConfigParams.Chirp18R1Tx1Enable << 16 | (int)m_DynamicChirpConfigParams.Chirp18R1Tx2Enable << 17 | (int)m_DynamicChirpConfigParams.Chirp18R1Tx3Enable << 18 | (int)m_DynamicChirpConfigParams.Chirp18R1BPMConstVal << 24);
                DynamicChirpConfigurationParam.Chirp7R1 = (uint)((int)m_DynamicChirpConfigParams.Chirp19R1ProfileIndex | (int)((byte)Math.Round((double)m_DynamicChirpConfigParams.Chirp19R1FreqSlopeVar * 27.61681646090535)) << 8 | (int)m_DynamicChirpConfigParams.Chirp19R1Tx1Enable << 16 | (int)m_DynamicChirpConfigParams.Chirp19R1Tx2Enable << 17 | (int)m_DynamicChirpConfigParams.Chirp19R1Tx3Enable << 18 | (int)m_DynamicChirpConfigParams.Chirp19R1BPMConstVal << 24);
                DynamicChirpConfigurationParam.Chirp7R2 = (uint)((int)m_DynamicChirpConfigParams.Chirp20R1ProfileIndex | (int)((byte)Math.Round((double)m_DynamicChirpConfigParams.Chirp20R1FreqSlopeVar * 27.61681646090535)) << 8 | (int)m_DynamicChirpConfigParams.Chirp20R1Tx1Enable << 16 | (int)m_DynamicChirpConfigParams.Chirp20R1Tx2Enable << 17 | (int)m_DynamicChirpConfigParams.Chirp20R1Tx3Enable << 18 | (int)m_DynamicChirpConfigParams.Chirp20R1BPMConstVal << 24);
                DynamicChirpConfigurationParam.Chirp7R3 = (uint)((int)m_DynamicChirpConfigParams.Chirp21R1ProfileIndex | (int)((byte)Math.Round((double)m_DynamicChirpConfigParams.Chirp21R1FreqSlopeVar * 27.61681646090535)) << 8 | (int)m_DynamicChirpConfigParams.Chirp21R1Tx1Enable << 16 | (int)m_DynamicChirpConfigParams.Chirp21R1Tx2Enable << 17 | (int)m_DynamicChirpConfigParams.Chirp21R1Tx3Enable << 18 | (int)m_DynamicChirpConfigParams.Chirp21R1BPMConstVal << 24);
                DynamicChirpConfigurationParam.Chirp8R1 = (uint)((int)m_DynamicChirpConfigParams.Chirp22R1ProfileIndex | (int)((byte)Math.Round((double)m_DynamicChirpConfigParams.Chirp22R1FreqSlopeVar * 27.61681646090535)) << 8 | (int)m_DynamicChirpConfigParams.Chirp22R1Tx1Enable << 16 | (int)m_DynamicChirpConfigParams.Chirp22R1Tx2Enable << 17 | (int)m_DynamicChirpConfigParams.Chirp22R1Tx3Enable << 18 | (int)m_DynamicChirpConfigParams.Chirp22R1BPMConstVal << 24);
                DynamicChirpConfigurationParam.Chirp8R2 = (uint)((int)m_DynamicChirpConfigParams.Chirp23R1ProfileIndex | (int)((byte)Math.Round((double)m_DynamicChirpConfigParams.Chirp23R1FreqSlopeVar * 27.61681646090535)) << 8 | (int)m_DynamicChirpConfigParams.Chirp23R1Tx1Enable << 16 | (int)m_DynamicChirpConfigParams.Chirp23R1Tx2Enable << 17 | (int)m_DynamicChirpConfigParams.Chirp23R1Tx3Enable << 18 | (int)m_DynamicChirpConfigParams.Chirp23R1BPMConstVal << 24);
                DynamicChirpConfigurationParam.Chirp8R3 = (uint)((int)m_DynamicChirpConfigParams.Chirp24R1ProfileIndex | (int)((byte)Math.Round((double)m_DynamicChirpConfigParams.Chirp24R1FreqSlopeVar * 27.61681646090535)) << 8 | (int)m_DynamicChirpConfigParams.Chirp24R1Tx1Enable << 16 | (int)m_DynamicChirpConfigParams.Chirp24R1Tx2Enable << 17 | (int)m_DynamicChirpConfigParams.Chirp24R1Tx3Enable << 18 | (int)m_DynamicChirpConfigParams.Chirp24R1BPMConstVal << 24);
                DynamicChirpConfigurationParam.Chirp9R1 = (uint)((int)m_DynamicChirpConfigParams.Chirp25R1ProfileIndex | (int)((byte)Math.Round((double)m_DynamicChirpConfigParams.Chirp25R1FreqSlopeVar * 27.61681646090535)) << 8 | (int)m_DynamicChirpConfigParams.Chirp25R1Tx1Enable << 16 | (int)m_DynamicChirpConfigParams.Chirp25R1Tx2Enable << 17 | (int)m_DynamicChirpConfigParams.Chirp25R1Tx3Enable << 18 | (int)m_DynamicChirpConfigParams.Chirp25R1BPMConstVal << 24);
                DynamicChirpConfigurationParam.Chirp9R2 = (uint)((int)m_DynamicChirpConfigParams.Chirp26R1ProfileIndex | (int)((byte)Math.Round((double)m_DynamicChirpConfigParams.Chirp26R1FreqSlopeVar * 27.61681646090535)) << 8 | (int)m_DynamicChirpConfigParams.Chirp26R1Tx1Enable << 16 | (int)m_DynamicChirpConfigParams.Chirp26R1Tx2Enable << 17 | (int)m_DynamicChirpConfigParams.Chirp26R1Tx3Enable << 18 | (int)m_DynamicChirpConfigParams.Chirp26R1BPMConstVal << 24);
                DynamicChirpConfigurationParam.Chirp9R3 = (uint)((int)m_DynamicChirpConfigParams.Chirp27R1ProfileIndex | (int)((byte)Math.Round((double)m_DynamicChirpConfigParams.Chirp27R1FreqSlopeVar * 27.61681646090535)) << 8 | (int)m_DynamicChirpConfigParams.Chirp27R1Tx1Enable << 16 | (int)m_DynamicChirpConfigParams.Chirp27R1Tx2Enable << 17 | (int)m_DynamicChirpConfigParams.Chirp27R1Tx3Enable << 18 | (int)m_DynamicChirpConfigParams.Chirp27R1BPMConstVal << 24);
                DynamicChirpConfigurationParam.Chirp10R1 = (uint)((int)m_DynamicChirpConfigParams.Chirp28R1ProfileIndex | (int)((byte)Math.Round((double)m_DynamicChirpConfigParams.Chirp28R1FreqSlopeVar * 27.61681646090535)) << 8 | (int)m_DynamicChirpConfigParams.Chirp28R1Tx1Enable << 16 | (int)m_DynamicChirpConfigParams.Chirp28R1Tx2Enable << 17 | (int)m_DynamicChirpConfigParams.Chirp28R1Tx3Enable << 18 | (int)m_DynamicChirpConfigParams.Chirp28R1BPMConstVal << 24);
                DynamicChirpConfigurationParam.Chirp10R2 = (uint)((int)m_DynamicChirpConfigParams.Chirp29R1ProfileIndex | (int)((byte)Math.Round((double)m_DynamicChirpConfigParams.Chirp29R1FreqSlopeVar * 27.61681646090535)) << 8 | (int)m_DynamicChirpConfigParams.Chirp29R1Tx1Enable << 16 | (int)m_DynamicChirpConfigParams.Chirp29R1Tx2Enable << 17 | (int)m_DynamicChirpConfigParams.Chirp29R1Tx3Enable << 18 | (int)m_DynamicChirpConfigParams.Chirp29R1BPMConstVal << 24);
                DynamicChirpConfigurationParam.Chirp10R3 = (uint)((int)m_DynamicChirpConfigParams.Chirp30R1ProfileIndex | (int)((byte)Math.Round((double)m_DynamicChirpConfigParams.Chirp30R1FreqSlopeVar * 27.61681646090535)) << 8 | (int)m_DynamicChirpConfigParams.Chirp30R1Tx1Enable << 16 | (int)m_DynamicChirpConfigParams.Chirp30R1Tx2Enable << 17 | (int)m_DynamicChirpConfigParams.Chirp30R1Tx3Enable << 18 | (int)m_DynamicChirpConfigParams.Chirp30R1BPMConstVal << 24);
                DynamicChirpConfigurationParam.Chirp11R1 = (uint)((int)m_DynamicChirpConfigParams.Chirp31R1ProfileIndex | (int)((byte)Math.Round((double)m_DynamicChirpConfigParams.Chirp31R1FreqSlopeVar * 27.61681646090535)) << 8 | (int)m_DynamicChirpConfigParams.Chirp31R1Tx1Enable << 16 | (int)m_DynamicChirpConfigParams.Chirp31R1Tx2Enable << 17 | (int)m_DynamicChirpConfigParams.Chirp31R1Tx3Enable << 18 | (int)m_DynamicChirpConfigParams.Chirp31R1BPMConstVal << 24);
                DynamicChirpConfigurationParam.Chirp11R2 = (uint)((int)m_DynamicChirpConfigParams.Chirp32R1ProfileIndex | (int)((byte)Math.Round((double)m_DynamicChirpConfigParams.Chirp32R1FreqSlopeVar * 27.61681646090535)) << 8 | (int)m_DynamicChirpConfigParams.Chirp32R1Tx1Enable << 16 | (int)m_DynamicChirpConfigParams.Chirp32R1Tx2Enable << 17 | (int)m_DynamicChirpConfigParams.Chirp32R1Tx3Enable << 18 | (int)m_DynamicChirpConfigParams.Chirp32R1BPMConstVal << 24);
                DynamicChirpConfigurationParam.Chirp11R3 = (uint)((int)m_DynamicChirpConfigParams.Chirp33R1ProfileIndex | (int)((byte)Math.Round((double)m_DynamicChirpConfigParams.Chirp33R1FreqSlopeVar * 27.61681646090535)) << 8 | (int)m_DynamicChirpConfigParams.Chirp33R1Tx1Enable << 16 | (int)m_DynamicChirpConfigParams.Chirp33R1Tx2Enable << 17 | (int)m_DynamicChirpConfigParams.Chirp33R1Tx3Enable << 18 | (int)m_DynamicChirpConfigParams.Chirp33R1BPMConstVal << 24);
                DynamicChirpConfigurationParam.Chirp12R1 = (uint)((int)m_DynamicChirpConfigParams.Chirp34R1ProfileIndex | (int)((byte)Math.Round((double)m_DynamicChirpConfigParams.Chirp34R1FreqSlopeVar * 27.61681646090535)) << 8 | (int)m_DynamicChirpConfigParams.Chirp34R1Tx1Enable << 16 | (int)m_DynamicChirpConfigParams.Chirp34R1Tx2Enable << 17 | (int)m_DynamicChirpConfigParams.Chirp34R1Tx3Enable << 18 | (int)m_DynamicChirpConfigParams.Chirp34R1BPMConstVal << 24);
                DynamicChirpConfigurationParam.Chirp12R2 = (uint)((int)m_DynamicChirpConfigParams.Chirp35R1ProfileIndex | (int)((byte)Math.Round((double)m_DynamicChirpConfigParams.Chirp35R1FreqSlopeVar * 27.61681646090535)) << 8 | (int)m_DynamicChirpConfigParams.Chirp35R1Tx1Enable << 16 | (int)m_DynamicChirpConfigParams.Chirp35R1Tx2Enable << 17 | (int)m_DynamicChirpConfigParams.Chirp35R1Tx3Enable << 18 | (int)m_DynamicChirpConfigParams.Chirp35R1BPMConstVal << 24);
                DynamicChirpConfigurationParam.Chirp12R3 = (uint)((int)m_DynamicChirpConfigParams.Chirp36R1ProfileIndex | (int)((byte)Math.Round((double)m_DynamicChirpConfigParams.Chirp36R1FreqSlopeVar * 27.61681646090535)) << 8 | (int)m_DynamicChirpConfigParams.Chirp36R1Tx1Enable << 16 | (int)m_DynamicChirpConfigParams.Chirp36R1Tx2Enable << 17 | (int)m_DynamicChirpConfigParams.Chirp36R1Tx3Enable << 18 | (int)m_DynamicChirpConfigParams.Chirp36R1BPMConstVal << 24);
                DynamicChirpConfigurationParam.Chirp13R1 = (uint)((int)m_DynamicChirpConfigParams.Chirp37R1ProfileIndex | (int)((byte)Math.Round((double)m_DynamicChirpConfigParams.Chirp37R1FreqSlopeVar * 27.61681646090535)) << 8 | (int)m_DynamicChirpConfigParams.Chirp37R1Tx1Enable << 16 | (int)m_DynamicChirpConfigParams.Chirp37R1Tx2Enable << 17 | (int)m_DynamicChirpConfigParams.Chirp37R1Tx3Enable << 18 | (int)m_DynamicChirpConfigParams.Chirp37R1BPMConstVal << 24);
                DynamicChirpConfigurationParam.Chirp13R2 = (uint)((int)m_DynamicChirpConfigParams.Chirp38R1ProfileIndex | (int)((byte)Math.Round((double)m_DynamicChirpConfigParams.Chirp38R1FreqSlopeVar * 27.61681646090535)) << 8 | (int)m_DynamicChirpConfigParams.Chirp38R1Tx1Enable << 16 | (int)m_DynamicChirpConfigParams.Chirp38R1Tx2Enable << 17 | (int)m_DynamicChirpConfigParams.Chirp38R1Tx3Enable << 18 | (int)m_DynamicChirpConfigParams.Chirp38R1BPMConstVal << 24);
                DynamicChirpConfigurationParam.Chirp13R3 = (uint)((int)m_DynamicChirpConfigParams.Chirp39R1ProfileIndex | (int)((byte)Math.Round((double)m_DynamicChirpConfigParams.Chirp39R1FreqSlopeVar * 27.61681646090535)) << 8 | (int)m_DynamicChirpConfigParams.Chirp39R1Tx1Enable << 16 | (int)m_DynamicChirpConfigParams.Chirp39R1Tx2Enable << 17 | (int)m_DynamicChirpConfigParams.Chirp39R1Tx3Enable << 18 | (int)m_DynamicChirpConfigParams.Chirp39R1BPMConstVal << 24);
                DynamicChirpConfigurationParam.Chirp14R1 = (uint)((int)m_DynamicChirpConfigParams.Chirp40R1ProfileIndex | (int)((byte)Math.Round((double)m_DynamicChirpConfigParams.Chirp40R1FreqSlopeVar * 27.61681646090535)) << 8 | (int)m_DynamicChirpConfigParams.Chirp40R1Tx1Enable << 16 | (int)m_DynamicChirpConfigParams.Chirp40R1Tx2Enable << 17 | (int)m_DynamicChirpConfigParams.Chirp40R1Tx3Enable << 18 | (int)m_DynamicChirpConfigParams.Chirp40R1BPMConstVal << 24);
                DynamicChirpConfigurationParam.Chirp14R2 = (uint)((int)m_DynamicChirpConfigParams.Chirp41R1ProfileIndex | (int)((byte)Math.Round((double)m_DynamicChirpConfigParams.Chirp41R1FreqSlopeVar * 27.61681646090535)) << 8 | (int)m_DynamicChirpConfigParams.Chirp41R1Tx1Enable << 16 | (int)m_DynamicChirpConfigParams.Chirp41R1Tx2Enable << 17 | (int)m_DynamicChirpConfigParams.Chirp41R1Tx3Enable << 18 | (int)m_DynamicChirpConfigParams.Chirp41R1BPMConstVal << 24);
                DynamicChirpConfigurationParam.Chirp14R3 = (uint)((int)m_DynamicChirpConfigParams.Chirp42R1ProfileIndex | (int)((byte)Math.Round((double)m_DynamicChirpConfigParams.Chirp42R1FreqSlopeVar * 27.61681646090535)) << 8 | (int)m_DynamicChirpConfigParams.Chirp42R1Tx1Enable << 16 | (int)m_DynamicChirpConfigParams.Chirp42R1Tx2Enable << 17 | (int)m_DynamicChirpConfigParams.Chirp42R1Tx3Enable << 18 | (int)m_DynamicChirpConfigParams.Chirp42R1BPMConstVal << 24);
                DynamicChirpConfigurationParam.Chirp15R1 = (uint)((int)m_DynamicChirpConfigParams.Chirp43R1ProfileIndex | (int)((byte)Math.Round((double)m_DynamicChirpConfigParams.Chirp43R1FreqSlopeVar * 27.61681646090535)) << 8 | (int)m_DynamicChirpConfigParams.Chirp43R1Tx1Enable << 16 | (int)m_DynamicChirpConfigParams.Chirp43R1Tx2Enable << 17 | (int)m_DynamicChirpConfigParams.Chirp43R1Tx3Enable << 18 | (int)m_DynamicChirpConfigParams.Chirp43R1BPMConstVal << 24);
                DynamicChirpConfigurationParam.Chirp15R2 = (uint)((int)m_DynamicChirpConfigParams.Chirp44R1ProfileIndex | (int)((byte)Math.Round((double)m_DynamicChirpConfigParams.Chirp44R1FreqSlopeVar * 27.61681646090535)) << 8 | (int)m_DynamicChirpConfigParams.Chirp44R1Tx1Enable << 16 | (int)m_DynamicChirpConfigParams.Chirp44R1Tx2Enable << 17 | (int)m_DynamicChirpConfigParams.Chirp44R1Tx3Enable << 18 | (int)m_DynamicChirpConfigParams.Chirp44R1BPMConstVal << 24);
                DynamicChirpConfigurationParam.Chirp15R3 = (uint)((int)m_DynamicChirpConfigParams.Chirp45R1ProfileIndex | (int)((byte)Math.Round((double)m_DynamicChirpConfigParams.Chirp45R1FreqSlopeVar * 27.61681646090535)) << 8 | (int)m_DynamicChirpConfigParams.Chirp45R1Tx1Enable << 16 | (int)m_DynamicChirpConfigParams.Chirp45R1Tx2Enable << 17 | (int)m_DynamicChirpConfigParams.Chirp45R1Tx3Enable << 18 | (int)m_DynamicChirpConfigParams.Chirp45R1BPMConstVal << 24);
                DynamicChirpConfigurationParam.Chirp16R1 = (uint)((int)m_DynamicChirpConfigParams.Chirp46R1ProfileIndex | (int)((byte)Math.Round((double)m_DynamicChirpConfigParams.Chirp46R1FreqSlopeVar * 27.61681646090535)) << 8 | (int)m_DynamicChirpConfigParams.Chirp46R1Tx1Enable << 16 | (int)m_DynamicChirpConfigParams.Chirp46R1Tx2Enable << 17 | (int)m_DynamicChirpConfigParams.Chirp46R1Tx3Enable << 18 | (int)m_DynamicChirpConfigParams.Chirp46R1BPMConstVal << 24);
                DynamicChirpConfigurationParam.Chirp16R2 = (uint)((int)m_DynamicChirpConfigParams.Chirp47R1ProfileIndex | (int)((byte)Math.Round((double)m_DynamicChirpConfigParams.Chirp47R1FreqSlopeVar * 27.61681646090535)) << 8 | (int)m_DynamicChirpConfigParams.Chirp47R1Tx1Enable << 16 | (int)m_DynamicChirpConfigParams.Chirp47R1Tx2Enable << 17 | (int)m_DynamicChirpConfigParams.Chirp47R1Tx3Enable << 18 | (int)m_DynamicChirpConfigParams.Chirp47R1BPMConstVal << 24);
                DynamicChirpConfigurationParam.Chirp16R3 = (uint)((int)m_DynamicChirpConfigParams.Chirp48R1ProfileIndex | (int)((byte)Math.Round((double)m_DynamicChirpConfigParams.Chirp48R1FreqSlopeVar * 27.61681646090535)) << 8 | (int)m_DynamicChirpConfigParams.Chirp48R1Tx1Enable << 16 | (int)m_DynamicChirpConfigParams.Chirp48R1Tx2Enable << 17 | (int)m_DynamicChirpConfigParams.Chirp48R1Tx3Enable << 18 | (int)m_DynamicChirpConfigParams.Chirp48R1BPMConstVal << 24);
                return;
            }
            DynamicChirpConfigurationParam.Chirp1R1 = (uint)((int)m_DynamicChirpConfigParams.Chirp1R1ProfileIndex | (int)((byte)Math.Round((double)m_DynamicChirpConfigParams.Chirp1R1FreqSlopeVar * 20.712612345679013)) << 8 | (int)m_DynamicChirpConfigParams.Chirp1R1Tx1Enable << 16 | (int)m_DynamicChirpConfigParams.Chirp1R1Tx2Enable << 17 | (int)m_DynamicChirpConfigParams.Chirp1R1Tx3Enable << 18 | (int)m_DynamicChirpConfigParams.Chirp1R1BPMConstVal << 24);
            DynamicChirpConfigurationParam.Chirp1R2 = (uint)((int)m_DynamicChirpConfigParams.Chirp2R1ProfileIndex | (int)((byte)Math.Round((double)m_DynamicChirpConfigParams.Chirp2R1FreqSlopeVar * 20.712612345679013)) << 8 | (int)m_DynamicChirpConfigParams.Chirp2R1Tx1Enable << 16 | (int)m_DynamicChirpConfigParams.Chirp2R1Tx2Enable << 17 | (int)m_DynamicChirpConfigParams.Chirp2R1Tx3Enable << 18 | (int)m_DynamicChirpConfigParams.Chirp2R1BPMConstVal << 24);
            DynamicChirpConfigurationParam.Chirp1R3 = (uint)((int)m_DynamicChirpConfigParams.Chirp3R1ProfileIndex | (int)((byte)Math.Round((double)m_DynamicChirpConfigParams.Chirp3R1FreqSlopeVar * 20.712612345679013)) << 8 | (int)m_DynamicChirpConfigParams.Chirp3R1Tx1Enable << 16 | (int)m_DynamicChirpConfigParams.Chirp3R1Tx2Enable << 17 | (int)m_DynamicChirpConfigParams.Chirp3R1Tx3Enable << 18 | (int)m_DynamicChirpConfigParams.Chirp3R1BPMConstVal << 24);
            DynamicChirpConfigurationParam.Chirp2R1 = (uint)((int)m_DynamicChirpConfigParams.Chirp4R1ProfileIndex | (int)((byte)Math.Round((double)m_DynamicChirpConfigParams.Chirp4R1FreqSlopeVar * 20.712612345679013)) << 8 | (int)m_DynamicChirpConfigParams.Chirp4R1Tx1Enable << 16 | (int)m_DynamicChirpConfigParams.Chirp4R1Tx2Enable << 17 | (int)m_DynamicChirpConfigParams.Chirp4R1Tx3Enable << 18 | (int)m_DynamicChirpConfigParams.Chirp4R1BPMConstVal << 24);
            DynamicChirpConfigurationParam.Chirp2R2 = (uint)((int)m_DynamicChirpConfigParams.Chirp5R1ProfileIndex | (int)((byte)Math.Round((double)m_DynamicChirpConfigParams.Chirp5R1FreqSlopeVar * 20.712612345679013)) << 8 | (int)m_DynamicChirpConfigParams.Chirp5R1Tx1Enable << 16 | (int)m_DynamicChirpConfigParams.Chirp5R1Tx2Enable << 17 | (int)m_DynamicChirpConfigParams.Chirp5R1Tx3Enable << 18 | (int)m_DynamicChirpConfigParams.Chirp5R1BPMConstVal << 24);
            DynamicChirpConfigurationParam.Chirp2R3 = (uint)((int)m_DynamicChirpConfigParams.Chirp6R1ProfileIndex | (int)((byte)Math.Round((double)m_DynamicChirpConfigParams.Chirp6R1FreqSlopeVar * 20.712612345679013)) << 8 | (int)m_DynamicChirpConfigParams.Chirp6R1Tx1Enable << 16 | (int)m_DynamicChirpConfigParams.Chirp6R1Tx2Enable << 17 | (int)m_DynamicChirpConfigParams.Chirp6R1Tx3Enable << 18 | (int)m_DynamicChirpConfigParams.Chirp6R1BPMConstVal << 24);
            DynamicChirpConfigurationParam.Chirp3R1 = (uint)((int)m_DynamicChirpConfigParams.Chirp7R1ProfileIndex | (int)((byte)Math.Round((double)m_DynamicChirpConfigParams.Chirp7R1FreqSlopeVar * 20.712612345679013)) << 8 | (int)m_DynamicChirpConfigParams.Chirp7R1Tx1Enable << 16 | (int)m_DynamicChirpConfigParams.Chirp7R1Tx2Enable << 17 | (int)m_DynamicChirpConfigParams.Chirp7R1Tx3Enable << 18 | (int)m_DynamicChirpConfigParams.Chirp7R1BPMConstVal << 24);
            DynamicChirpConfigurationParam.Chirp3R2 = (uint)((int)m_DynamicChirpConfigParams.Chirp8R1ProfileIndex | (int)((byte)Math.Round((double)m_DynamicChirpConfigParams.Chirp8R1FreqSlopeVar * 20.712612345679013)) << 8 | (int)m_DynamicChirpConfigParams.Chirp8R1Tx1Enable << 16 | (int)m_DynamicChirpConfigParams.Chirp8R1Tx2Enable << 17 | (int)m_DynamicChirpConfigParams.Chirp8R1Tx3Enable << 18 | (int)m_DynamicChirpConfigParams.Chirp8R1BPMConstVal << 24);
            DynamicChirpConfigurationParam.Chirp3R3 = (uint)((int)m_DynamicChirpConfigParams.Chirp9R1ProfileIndex | (int)((byte)Math.Round((double)m_DynamicChirpConfigParams.Chirp9R1FreqSlopeVar * 20.712612345679013)) << 8 | (int)m_DynamicChirpConfigParams.Chirp9R1Tx1Enable << 16 | (int)m_DynamicChirpConfigParams.Chirp9R1Tx2Enable << 17 | (int)m_DynamicChirpConfigParams.Chirp9R1Tx3Enable << 18 | (int)m_DynamicChirpConfigParams.Chirp9R1BPMConstVal << 24);
            DynamicChirpConfigurationParam.Chirp4R1 = (uint)((int)m_DynamicChirpConfigParams.Chirp10R1ProfileIndex | (int)((byte)Math.Round((double)m_DynamicChirpConfigParams.Chirp10R1FreqSlopeVar * 20.712612345679013)) << 8 | (int)m_DynamicChirpConfigParams.Chirp10R1Tx1Enable << 16 | (int)m_DynamicChirpConfigParams.Chirp10R1Tx2Enable << 17 | (int)m_DynamicChirpConfigParams.Chirp10R1Tx3Enable << 18 | (int)m_DynamicChirpConfigParams.Chirp10R1BPMConstVal << 24);
            DynamicChirpConfigurationParam.Chirp4R2 = (uint)((int)m_DynamicChirpConfigParams.Chirp11R1ProfileIndex | (int)((byte)Math.Round((double)m_DynamicChirpConfigParams.Chirp11R1FreqSlopeVar * 20.712612345679013)) << 8 | (int)m_DynamicChirpConfigParams.Chirp11R1Tx1Enable << 16 | (int)m_DynamicChirpConfigParams.Chirp11R1Tx2Enable << 17 | (int)m_DynamicChirpConfigParams.Chirp11R1Tx3Enable << 18 | (int)m_DynamicChirpConfigParams.Chirp11R1BPMConstVal << 24);
            DynamicChirpConfigurationParam.Chirp4R3 = (uint)((int)m_DynamicChirpConfigParams.Chirp12R1ProfileIndex | (int)((byte)Math.Round((double)m_DynamicChirpConfigParams.Chirp12R1FreqSlopeVar * 20.712612345679013)) << 8 | (int)m_DynamicChirpConfigParams.Chirp12R1Tx1Enable << 16 | (int)m_DynamicChirpConfigParams.Chirp12R1Tx2Enable << 17 | (int)m_DynamicChirpConfigParams.Chirp12R1Tx3Enable << 18 | (int)m_DynamicChirpConfigParams.Chirp12R1BPMConstVal << 24);
            DynamicChirpConfigurationParam.Chirp5R1 = (uint)((int)m_DynamicChirpConfigParams.Chirp13R1ProfileIndex | (int)((byte)Math.Round((double)m_DynamicChirpConfigParams.Chirp13R1FreqSlopeVar * 20.712612345679013)) << 8 | (int)m_DynamicChirpConfigParams.Chirp13R1Tx1Enable << 16 | (int)m_DynamicChirpConfigParams.Chirp13R1Tx2Enable << 17 | (int)m_DynamicChirpConfigParams.Chirp13R1Tx3Enable << 18 | (int)m_DynamicChirpConfigParams.Chirp13R1BPMConstVal << 24);
            DynamicChirpConfigurationParam.Chirp5R2 = (uint)((int)m_DynamicChirpConfigParams.Chirp14R1ProfileIndex | (int)((byte)Math.Round((double)m_DynamicChirpConfigParams.Chirp14R1FreqSlopeVar * 20.712612345679013)) << 8 | (int)m_DynamicChirpConfigParams.Chirp14R1Tx1Enable << 16 | (int)m_DynamicChirpConfigParams.Chirp14R1Tx2Enable << 17 | (int)m_DynamicChirpConfigParams.Chirp14R1Tx3Enable << 18 | (int)m_DynamicChirpConfigParams.Chirp14R1BPMConstVal << 24);
            DynamicChirpConfigurationParam.Chirp5R3 = (uint)((int)m_DynamicChirpConfigParams.Chirp15R1ProfileIndex | (int)((byte)Math.Round((double)m_DynamicChirpConfigParams.Chirp15R1FreqSlopeVar * 20.712612345679013)) << 8 | (int)m_DynamicChirpConfigParams.Chirp15R1Tx1Enable << 16 | (int)m_DynamicChirpConfigParams.Chirp15R1Tx2Enable << 17 | (int)m_DynamicChirpConfigParams.Chirp15R1Tx3Enable << 18 | (int)m_DynamicChirpConfigParams.Chirp15R1BPMConstVal << 24);
            DynamicChirpConfigurationParam.Chirp6R1 = (uint)((int)m_DynamicChirpConfigParams.Chirp16R1ProfileIndex | (int)((byte)Math.Round((double)m_DynamicChirpConfigParams.Chirp16R1FreqSlopeVar * 20.712612345679013)) << 8 | (int)m_DynamicChirpConfigParams.Chirp16R1Tx1Enable << 16 | (int)m_DynamicChirpConfigParams.Chirp16R1Tx2Enable << 17 | (int)m_DynamicChirpConfigParams.Chirp16R1Tx3Enable << 18 | (int)m_DynamicChirpConfigParams.Chirp16R1BPMConstVal << 24);
            DynamicChirpConfigurationParam.Chirp6R2 = (uint)((int)m_DynamicChirpConfigParams.Chirp17R1ProfileIndex | (int)((byte)Math.Round((double)m_DynamicChirpConfigParams.Chirp17R1FreqSlopeVar * 20.712612345679013)) << 8 | (int)m_DynamicChirpConfigParams.Chirp17R1Tx1Enable << 16 | (int)m_DynamicChirpConfigParams.Chirp17R1Tx2Enable << 17 | (int)m_DynamicChirpConfigParams.Chirp17R1Tx3Enable << 18 | (int)m_DynamicChirpConfigParams.Chirp17R1BPMConstVal << 24);
            DynamicChirpConfigurationParam.Chirp6R3 = (uint)((int)m_DynamicChirpConfigParams.Chirp18R1ProfileIndex | (int)((byte)Math.Round((double)m_DynamicChirpConfigParams.Chirp18R1FreqSlopeVar * 20.712612345679013)) << 8 | (int)m_DynamicChirpConfigParams.Chirp18R1Tx1Enable << 16 | (int)m_DynamicChirpConfigParams.Chirp18R1Tx2Enable << 17 | (int)m_DynamicChirpConfigParams.Chirp18R1Tx3Enable << 18 | (int)m_DynamicChirpConfigParams.Chirp18R1BPMConstVal << 24);
            DynamicChirpConfigurationParam.Chirp7R1 = (uint)((int)m_DynamicChirpConfigParams.Chirp19R1ProfileIndex | (int)((byte)Math.Round((double)m_DynamicChirpConfigParams.Chirp19R1FreqSlopeVar * 20.712612345679013)) << 8 | (int)m_DynamicChirpConfigParams.Chirp19R1Tx1Enable << 16 | (int)m_DynamicChirpConfigParams.Chirp19R1Tx2Enable << 17 | (int)m_DynamicChirpConfigParams.Chirp19R1Tx3Enable << 18 | (int)m_DynamicChirpConfigParams.Chirp19R1BPMConstVal << 24);
            DynamicChirpConfigurationParam.Chirp7R2 = (uint)((int)m_DynamicChirpConfigParams.Chirp20R1ProfileIndex | (int)((byte)Math.Round((double)m_DynamicChirpConfigParams.Chirp20R1FreqSlopeVar * 20.712612345679013)) << 8 | (int)m_DynamicChirpConfigParams.Chirp20R1Tx1Enable << 16 | (int)m_DynamicChirpConfigParams.Chirp20R1Tx2Enable << 17 | (int)m_DynamicChirpConfigParams.Chirp20R1Tx3Enable << 18 | (int)m_DynamicChirpConfigParams.Chirp20R1BPMConstVal << 24);
            DynamicChirpConfigurationParam.Chirp7R3 = (uint)((int)m_DynamicChirpConfigParams.Chirp21R1ProfileIndex | (int)((byte)Math.Round((double)m_DynamicChirpConfigParams.Chirp21R1FreqSlopeVar * 20.712612345679013)) << 8 | (int)m_DynamicChirpConfigParams.Chirp21R1Tx1Enable << 16 | (int)m_DynamicChirpConfigParams.Chirp21R1Tx2Enable << 17 | (int)m_DynamicChirpConfigParams.Chirp21R1Tx3Enable << 18 | (int)m_DynamicChirpConfigParams.Chirp21R1BPMConstVal << 24);
            DynamicChirpConfigurationParam.Chirp8R1 = (uint)((int)m_DynamicChirpConfigParams.Chirp22R1ProfileIndex | (int)((byte)Math.Round((double)m_DynamicChirpConfigParams.Chirp22R1FreqSlopeVar * 20.712612345679013)) << 8 | (int)m_DynamicChirpConfigParams.Chirp22R1Tx1Enable << 16 | (int)m_DynamicChirpConfigParams.Chirp22R1Tx2Enable << 17 | (int)m_DynamicChirpConfigParams.Chirp22R1Tx3Enable << 18 | (int)m_DynamicChirpConfigParams.Chirp22R1BPMConstVal << 24);
            DynamicChirpConfigurationParam.Chirp8R2 = (uint)((int)m_DynamicChirpConfigParams.Chirp23R1ProfileIndex | (int)((byte)Math.Round((double)m_DynamicChirpConfigParams.Chirp23R1FreqSlopeVar * 20.712612345679013)) << 8 | (int)m_DynamicChirpConfigParams.Chirp23R1Tx1Enable << 16 | (int)m_DynamicChirpConfigParams.Chirp23R1Tx2Enable << 17 | (int)m_DynamicChirpConfigParams.Chirp23R1Tx3Enable << 18 | (int)m_DynamicChirpConfigParams.Chirp23R1BPMConstVal << 24);
            DynamicChirpConfigurationParam.Chirp8R3 = (uint)((int)m_DynamicChirpConfigParams.Chirp24R1ProfileIndex | (int)((byte)Math.Round((double)m_DynamicChirpConfigParams.Chirp24R1FreqSlopeVar * 20.712612345679013)) << 8 | (int)m_DynamicChirpConfigParams.Chirp24R1Tx1Enable << 16 | (int)m_DynamicChirpConfigParams.Chirp24R1Tx2Enable << 17 | (int)m_DynamicChirpConfigParams.Chirp24R1Tx3Enable << 18 | (int)m_DynamicChirpConfigParams.Chirp24R1BPMConstVal << 24);
            DynamicChirpConfigurationParam.Chirp9R1 = (uint)((int)m_DynamicChirpConfigParams.Chirp25R1ProfileIndex | (int)((byte)Math.Round((double)m_DynamicChirpConfigParams.Chirp25R1FreqSlopeVar * 20.712612345679013)) << 8 | (int)m_DynamicChirpConfigParams.Chirp25R1Tx1Enable << 16 | (int)m_DynamicChirpConfigParams.Chirp25R1Tx2Enable << 17 | (int)m_DynamicChirpConfigParams.Chirp25R1Tx3Enable << 18 | (int)m_DynamicChirpConfigParams.Chirp25R1BPMConstVal << 24);
            DynamicChirpConfigurationParam.Chirp9R2 = (uint)((int)m_DynamicChirpConfigParams.Chirp26R1ProfileIndex | (int)((byte)Math.Round((double)m_DynamicChirpConfigParams.Chirp26R1FreqSlopeVar * 20.712612345679013)) << 8 | (int)m_DynamicChirpConfigParams.Chirp26R1Tx1Enable << 16 | (int)m_DynamicChirpConfigParams.Chirp26R1Tx2Enable << 17 | (int)m_DynamicChirpConfigParams.Chirp26R1Tx3Enable << 18 | (int)m_DynamicChirpConfigParams.Chirp26R1BPMConstVal << 24);
            DynamicChirpConfigurationParam.Chirp9R3 = (uint)((int)m_DynamicChirpConfigParams.Chirp27R1ProfileIndex | (int)((byte)Math.Round((double)m_DynamicChirpConfigParams.Chirp27R1FreqSlopeVar * 20.712612345679013)) << 8 | (int)m_DynamicChirpConfigParams.Chirp27R1Tx1Enable << 16 | (int)m_DynamicChirpConfigParams.Chirp27R1Tx2Enable << 17 | (int)m_DynamicChirpConfigParams.Chirp27R1Tx3Enable << 18 | (int)m_DynamicChirpConfigParams.Chirp27R1BPMConstVal << 24);
            DynamicChirpConfigurationParam.Chirp10R1 = (uint)((int)m_DynamicChirpConfigParams.Chirp28R1ProfileIndex | (int)((byte)Math.Round((double)m_DynamicChirpConfigParams.Chirp28R1FreqSlopeVar * 20.712612345679013)) << 8 | (int)m_DynamicChirpConfigParams.Chirp28R1Tx1Enable << 16 | (int)m_DynamicChirpConfigParams.Chirp28R1Tx2Enable << 17 | (int)m_DynamicChirpConfigParams.Chirp28R1Tx3Enable << 18 | (int)m_DynamicChirpConfigParams.Chirp28R1BPMConstVal << 24);
            DynamicChirpConfigurationParam.Chirp10R2 = (uint)((int)m_DynamicChirpConfigParams.Chirp29R1ProfileIndex | (int)((byte)Math.Round((double)m_DynamicChirpConfigParams.Chirp29R1FreqSlopeVar * 20.712612345679013)) << 8 | (int)m_DynamicChirpConfigParams.Chirp29R1Tx1Enable << 16 | (int)m_DynamicChirpConfigParams.Chirp29R1Tx2Enable << 17 | (int)m_DynamicChirpConfigParams.Chirp29R1Tx3Enable << 18 | (int)m_DynamicChirpConfigParams.Chirp29R1BPMConstVal << 24);
            DynamicChirpConfigurationParam.Chirp10R3 = (uint)((int)m_DynamicChirpConfigParams.Chirp30R1ProfileIndex | (int)((byte)Math.Round((double)m_DynamicChirpConfigParams.Chirp30R1FreqSlopeVar * 20.712612345679013)) << 8 | (int)m_DynamicChirpConfigParams.Chirp30R1Tx1Enable << 16 | (int)m_DynamicChirpConfigParams.Chirp30R1Tx2Enable << 17 | (int)m_DynamicChirpConfigParams.Chirp30R1Tx3Enable << 18 | (int)m_DynamicChirpConfigParams.Chirp30R1BPMConstVal << 24);
            DynamicChirpConfigurationParam.Chirp11R1 = (uint)((int)m_DynamicChirpConfigParams.Chirp31R1ProfileIndex | (int)((byte)Math.Round((double)m_DynamicChirpConfigParams.Chirp31R1FreqSlopeVar * 20.712612345679013)) << 8 | (int)m_DynamicChirpConfigParams.Chirp31R1Tx1Enable << 16 | (int)m_DynamicChirpConfigParams.Chirp31R1Tx2Enable << 17 | (int)m_DynamicChirpConfigParams.Chirp31R1Tx3Enable << 18 | (int)m_DynamicChirpConfigParams.Chirp31R1BPMConstVal << 24);
            DynamicChirpConfigurationParam.Chirp11R2 = (uint)((int)m_DynamicChirpConfigParams.Chirp32R1ProfileIndex | (int)((byte)Math.Round((double)m_DynamicChirpConfigParams.Chirp32R1FreqSlopeVar * 20.712612345679013)) << 8 | (int)m_DynamicChirpConfigParams.Chirp32R1Tx1Enable << 16 | (int)m_DynamicChirpConfigParams.Chirp32R1Tx2Enable << 17 | (int)m_DynamicChirpConfigParams.Chirp32R1Tx3Enable << 18 | (int)m_DynamicChirpConfigParams.Chirp32R1BPMConstVal << 24);
            DynamicChirpConfigurationParam.Chirp11R3 = (uint)((int)m_DynamicChirpConfigParams.Chirp33R1ProfileIndex | (int)((byte)Math.Round((double)m_DynamicChirpConfigParams.Chirp33R1FreqSlopeVar * 20.712612345679013)) << 8 | (int)m_DynamicChirpConfigParams.Chirp33R1Tx1Enable << 16 | (int)m_DynamicChirpConfigParams.Chirp33R1Tx2Enable << 17 | (int)m_DynamicChirpConfigParams.Chirp33R1Tx3Enable << 18 | (int)m_DynamicChirpConfigParams.Chirp33R1BPMConstVal << 24);
            DynamicChirpConfigurationParam.Chirp12R1 = (uint)((int)m_DynamicChirpConfigParams.Chirp34R1ProfileIndex | (int)((byte)Math.Round((double)m_DynamicChirpConfigParams.Chirp34R1FreqSlopeVar * 20.712612345679013)) << 8 | (int)m_DynamicChirpConfigParams.Chirp34R1Tx1Enable << 16 | (int)m_DynamicChirpConfigParams.Chirp34R1Tx2Enable << 17 | (int)m_DynamicChirpConfigParams.Chirp34R1Tx3Enable << 18 | (int)m_DynamicChirpConfigParams.Chirp34R1BPMConstVal << 24);
            DynamicChirpConfigurationParam.Chirp12R2 = (uint)((int)m_DynamicChirpConfigParams.Chirp35R1ProfileIndex | (int)((byte)Math.Round((double)m_DynamicChirpConfigParams.Chirp35R1FreqSlopeVar * 20.712612345679013)) << 8 | (int)m_DynamicChirpConfigParams.Chirp35R1Tx1Enable << 16 | (int)m_DynamicChirpConfigParams.Chirp35R1Tx2Enable << 17 | (int)m_DynamicChirpConfigParams.Chirp35R1Tx3Enable << 18 | (int)m_DynamicChirpConfigParams.Chirp35R1BPMConstVal << 24);
            DynamicChirpConfigurationParam.Chirp12R3 = (uint)((int)m_DynamicChirpConfigParams.Chirp36R1ProfileIndex | (int)((byte)Math.Round((double)m_DynamicChirpConfigParams.Chirp36R1FreqSlopeVar * 20.712612345679013)) << 8 | (int)m_DynamicChirpConfigParams.Chirp36R1Tx1Enable << 16 | (int)m_DynamicChirpConfigParams.Chirp36R1Tx2Enable << 17 | (int)m_DynamicChirpConfigParams.Chirp36R1Tx3Enable << 18 | (int)m_DynamicChirpConfigParams.Chirp36R1BPMConstVal << 24);
            DynamicChirpConfigurationParam.Chirp13R1 = (uint)((int)m_DynamicChirpConfigParams.Chirp37R1ProfileIndex | (int)((byte)Math.Round((double)m_DynamicChirpConfigParams.Chirp37R1FreqSlopeVar * 20.712612345679013)) << 8 | (int)m_DynamicChirpConfigParams.Chirp37R1Tx1Enable << 16 | (int)m_DynamicChirpConfigParams.Chirp37R1Tx2Enable << 17 | (int)m_DynamicChirpConfigParams.Chirp37R1Tx3Enable << 18 | (int)m_DynamicChirpConfigParams.Chirp37R1BPMConstVal << 24);
            DynamicChirpConfigurationParam.Chirp13R2 = (uint)((int)m_DynamicChirpConfigParams.Chirp38R1ProfileIndex | (int)((byte)Math.Round((double)m_DynamicChirpConfigParams.Chirp38R1FreqSlopeVar * 20.712612345679013)) << 8 | (int)m_DynamicChirpConfigParams.Chirp38R1Tx1Enable << 16 | (int)m_DynamicChirpConfigParams.Chirp38R1Tx2Enable << 17 | (int)m_DynamicChirpConfigParams.Chirp38R1Tx3Enable << 18 | (int)m_DynamicChirpConfigParams.Chirp38R1BPMConstVal << 24);
            DynamicChirpConfigurationParam.Chirp13R3 = (uint)((int)m_DynamicChirpConfigParams.Chirp39R1ProfileIndex | (int)((byte)Math.Round((double)m_DynamicChirpConfigParams.Chirp39R1FreqSlopeVar * 20.712612345679013)) << 8 | (int)m_DynamicChirpConfigParams.Chirp39R1Tx1Enable << 16 | (int)m_DynamicChirpConfigParams.Chirp39R1Tx2Enable << 17 | (int)m_DynamicChirpConfigParams.Chirp39R1Tx3Enable << 18 | (int)m_DynamicChirpConfigParams.Chirp39R1BPMConstVal << 24);
            DynamicChirpConfigurationParam.Chirp14R1 = (uint)((int)m_DynamicChirpConfigParams.Chirp40R1ProfileIndex | (int)((byte)Math.Round((double)m_DynamicChirpConfigParams.Chirp40R1FreqSlopeVar * 20.712612345679013)) << 8 | (int)m_DynamicChirpConfigParams.Chirp40R1Tx1Enable << 16 | (int)m_DynamicChirpConfigParams.Chirp40R1Tx2Enable << 17 | (int)m_DynamicChirpConfigParams.Chirp40R1Tx3Enable << 18 | (int)m_DynamicChirpConfigParams.Chirp40R1BPMConstVal << 24);
            DynamicChirpConfigurationParam.Chirp14R2 = (uint)((int)m_DynamicChirpConfigParams.Chirp41R1ProfileIndex | (int)((byte)Math.Round((double)m_DynamicChirpConfigParams.Chirp41R1FreqSlopeVar * 20.712612345679013)) << 8 | (int)m_DynamicChirpConfigParams.Chirp41R1Tx1Enable << 16 | (int)m_DynamicChirpConfigParams.Chirp41R1Tx2Enable << 17 | (int)m_DynamicChirpConfigParams.Chirp41R1Tx3Enable << 18 | (int)m_DynamicChirpConfigParams.Chirp41R1BPMConstVal << 24);
            DynamicChirpConfigurationParam.Chirp14R3 = (uint)((int)m_DynamicChirpConfigParams.Chirp42R1ProfileIndex | (int)((byte)Math.Round((double)m_DynamicChirpConfigParams.Chirp42R1FreqSlopeVar * 20.712612345679013)) << 8 | (int)m_DynamicChirpConfigParams.Chirp42R1Tx1Enable << 16 | (int)m_DynamicChirpConfigParams.Chirp42R1Tx2Enable << 17 | (int)m_DynamicChirpConfigParams.Chirp42R1Tx3Enable << 18 | (int)m_DynamicChirpConfigParams.Chirp42R1BPMConstVal << 24);
            DynamicChirpConfigurationParam.Chirp15R1 = (uint)((int)m_DynamicChirpConfigParams.Chirp43R1ProfileIndex | (int)((byte)Math.Round((double)m_DynamicChirpConfigParams.Chirp43R1FreqSlopeVar * 20.712612345679013)) << 8 | (int)m_DynamicChirpConfigParams.Chirp43R1Tx1Enable << 16 | (int)m_DynamicChirpConfigParams.Chirp43R1Tx2Enable << 17 | (int)m_DynamicChirpConfigParams.Chirp43R1Tx3Enable << 18 | (int)m_DynamicChirpConfigParams.Chirp43R1BPMConstVal << 24);
            DynamicChirpConfigurationParam.Chirp15R2 = (uint)((int)m_DynamicChirpConfigParams.Chirp44R1ProfileIndex | (int)((byte)Math.Round((double)m_DynamicChirpConfigParams.Chirp44R1FreqSlopeVar * 20.712612345679013)) << 8 | (int)m_DynamicChirpConfigParams.Chirp44R1Tx1Enable << 16 | (int)m_DynamicChirpConfigParams.Chirp44R1Tx2Enable << 17 | (int)m_DynamicChirpConfigParams.Chirp44R1Tx3Enable << 18 | (int)m_DynamicChirpConfigParams.Chirp44R1BPMConstVal << 24);
            DynamicChirpConfigurationParam.Chirp15R3 = (uint)((int)m_DynamicChirpConfigParams.Chirp45R1ProfileIndex | (int)((byte)Math.Round((double)m_DynamicChirpConfigParams.Chirp45R1FreqSlopeVar * 20.712612345679013)) << 8 | (int)m_DynamicChirpConfigParams.Chirp45R1Tx1Enable << 16 | (int)m_DynamicChirpConfigParams.Chirp45R1Tx2Enable << 17 | (int)m_DynamicChirpConfigParams.Chirp45R1Tx3Enable << 18 | (int)m_DynamicChirpConfigParams.Chirp45R1BPMConstVal << 24);
            DynamicChirpConfigurationParam.Chirp16R1 = (uint)((int)m_DynamicChirpConfigParams.Chirp46R1ProfileIndex | (int)((byte)Math.Round((double)m_DynamicChirpConfigParams.Chirp46R1FreqSlopeVar * 20.712612345679013)) << 8 | (int)m_DynamicChirpConfigParams.Chirp46R1Tx1Enable << 16 | (int)m_DynamicChirpConfigParams.Chirp46R1Tx2Enable << 17 | (int)m_DynamicChirpConfigParams.Chirp46R1Tx3Enable << 18 | (int)m_DynamicChirpConfigParams.Chirp46R1BPMConstVal << 24);
            DynamicChirpConfigurationParam.Chirp16R2 = (uint)((int)m_DynamicChirpConfigParams.Chirp47R1ProfileIndex | (int)((byte)Math.Round((double)m_DynamicChirpConfigParams.Chirp47R1FreqSlopeVar * 20.712612345679013)) << 8 | (int)m_DynamicChirpConfigParams.Chirp47R1Tx1Enable << 16 | (int)m_DynamicChirpConfigParams.Chirp47R1Tx2Enable << 17 | (int)m_DynamicChirpConfigParams.Chirp47R1Tx3Enable << 18 | (int)m_DynamicChirpConfigParams.Chirp47R1BPMConstVal << 24);
            DynamicChirpConfigurationParam.Chirp16R3 = (uint)((int)m_DynamicChirpConfigParams.Chirp48R1ProfileIndex | (int)((byte)Math.Round((double)m_DynamicChirpConfigParams.Chirp48R1FreqSlopeVar * 20.712612345679013)) << 8 | (int)m_DynamicChirpConfigParams.Chirp48R1Tx1Enable << 16 | (int)m_DynamicChirpConfigParams.Chirp48R1Tx2Enable << 17 | (int)m_DynamicChirpConfigParams.Chirp48R1Tx3Enable << 18 | (int)m_DynamicChirpConfigParams.Chirp48R1BPMConstVal << 24);
        }

        public void UpdateDynChirpRow1_JSON(int devInd, int chirpSegInd)
        {
            GlobalRef.jobject.mmWaveDevices[devInd].rfConfig.rlDynChirpCfgs[chirpSegInd].rlDynChirpCfg_t.rlChirpRows[0].rlChirpRow_t.chirpNR1 = "0x" + DynamicChirpConfigurationParam.Chirp1R1.ToString();
            GlobalRef.jobject.mmWaveDevices[devInd].rfConfig.rlDynChirpCfgs[chirpSegInd].rlDynChirpCfg_t.rlChirpRows[1].rlChirpRow_t.chirpNR1 = "0x" + DynamicChirpConfigurationParam.Chirp1R2.ToString();
            GlobalRef.jobject.mmWaveDevices[devInd].rfConfig.rlDynChirpCfgs[chirpSegInd].rlDynChirpCfg_t.rlChirpRows[2].rlChirpRow_t.chirpNR1 = "0x" + DynamicChirpConfigurationParam.Chirp1R3.ToString();
            GlobalRef.jobject.mmWaveDevices[devInd].rfConfig.rlDynChirpCfgs[chirpSegInd].rlDynChirpCfg_t.rlChirpRows[3].rlChirpRow_t.chirpNR1 = "0x" + DynamicChirpConfigurationParam.Chirp2R1.ToString();
            GlobalRef.jobject.mmWaveDevices[devInd].rfConfig.rlDynChirpCfgs[chirpSegInd].rlDynChirpCfg_t.rlChirpRows[4].rlChirpRow_t.chirpNR1 = "0x" + DynamicChirpConfigurationParam.Chirp2R2.ToString();
            GlobalRef.jobject.mmWaveDevices[devInd].rfConfig.rlDynChirpCfgs[chirpSegInd].rlDynChirpCfg_t.rlChirpRows[5].rlChirpRow_t.chirpNR1 = "0x" + DynamicChirpConfigurationParam.Chirp2R3.ToString();
            GlobalRef.jobject.mmWaveDevices[devInd].rfConfig.rlDynChirpCfgs[chirpSegInd].rlDynChirpCfg_t.rlChirpRows[6].rlChirpRow_t.chirpNR1 = "0x" + DynamicChirpConfigurationParam.Chirp3R1.ToString();
            GlobalRef.jobject.mmWaveDevices[devInd].rfConfig.rlDynChirpCfgs[chirpSegInd].rlDynChirpCfg_t.rlChirpRows[7].rlChirpRow_t.chirpNR1 = "0x" + DynamicChirpConfigurationParam.Chirp3R2.ToString();
            GlobalRef.jobject.mmWaveDevices[devInd].rfConfig.rlDynChirpCfgs[chirpSegInd].rlDynChirpCfg_t.rlChirpRows[8].rlChirpRow_t.chirpNR1 = "0x" + DynamicChirpConfigurationParam.Chirp3R3.ToString();
            GlobalRef.jobject.mmWaveDevices[devInd].rfConfig.rlDynChirpCfgs[chirpSegInd].rlDynChirpCfg_t.rlChirpRows[9].rlChirpRow_t.chirpNR1 = "0x" + DynamicChirpConfigurationParam.Chirp4R1.ToString();
            GlobalRef.jobject.mmWaveDevices[devInd].rfConfig.rlDynChirpCfgs[chirpSegInd].rlDynChirpCfg_t.rlChirpRows[10].rlChirpRow_t.chirpNR1 = "0x" + DynamicChirpConfigurationParam.Chirp4R2.ToString();
            GlobalRef.jobject.mmWaveDevices[devInd].rfConfig.rlDynChirpCfgs[chirpSegInd].rlDynChirpCfg_t.rlChirpRows[11].rlChirpRow_t.chirpNR1 = "0x" + DynamicChirpConfigurationParam.Chirp4R3.ToString();
            GlobalRef.jobject.mmWaveDevices[devInd].rfConfig.rlDynChirpCfgs[chirpSegInd].rlDynChirpCfg_t.rlChirpRows[12].rlChirpRow_t.chirpNR1 = "0x" + DynamicChirpConfigurationParam.Chirp5R1.ToString();
            GlobalRef.jobject.mmWaveDevices[devInd].rfConfig.rlDynChirpCfgs[chirpSegInd].rlDynChirpCfg_t.rlChirpRows[13].rlChirpRow_t.chirpNR1 = "0x" + DynamicChirpConfigurationParam.Chirp5R2.ToString();
            GlobalRef.jobject.mmWaveDevices[devInd].rfConfig.rlDynChirpCfgs[chirpSegInd].rlDynChirpCfg_t.rlChirpRows[14].rlChirpRow_t.chirpNR1 = "0x" + DynamicChirpConfigurationParam.Chirp5R3.ToString();
            GlobalRef.jobject.mmWaveDevices[devInd].rfConfig.rlDynChirpCfgs[chirpSegInd].rlDynChirpCfg_t.rlChirpRows[15].rlChirpRow_t.chirpNR1 = "0x" + DynamicChirpConfigurationParam.Chirp6R1.ToString();
            GlobalRef.jobject.mmWaveDevices[devInd].rfConfig.rlDynChirpCfgs[chirpSegInd].rlDynChirpCfg_t.rlChirpRows[16].rlChirpRow_t.chirpNR1 = "0x" + DynamicChirpConfigurationParam.Chirp6R2.ToString();
            GlobalRef.jobject.mmWaveDevices[devInd].rfConfig.rlDynChirpCfgs[chirpSegInd].rlDynChirpCfg_t.rlChirpRows[17].rlChirpRow_t.chirpNR1 = "0x" + DynamicChirpConfigurationParam.Chirp6R3.ToString();
            GlobalRef.jobject.mmWaveDevices[devInd].rfConfig.rlDynChirpCfgs[chirpSegInd].rlDynChirpCfg_t.rlChirpRows[18].rlChirpRow_t.chirpNR1 = "0x" + DynamicChirpConfigurationParam.Chirp7R1.ToString();
            GlobalRef.jobject.mmWaveDevices[devInd].rfConfig.rlDynChirpCfgs[chirpSegInd].rlDynChirpCfg_t.rlChirpRows[19].rlChirpRow_t.chirpNR1 = "0x" + DynamicChirpConfigurationParam.Chirp7R2.ToString();
            GlobalRef.jobject.mmWaveDevices[devInd].rfConfig.rlDynChirpCfgs[chirpSegInd].rlDynChirpCfg_t.rlChirpRows[20].rlChirpRow_t.chirpNR1 = "0x" + DynamicChirpConfigurationParam.Chirp7R3.ToString();
            GlobalRef.jobject.mmWaveDevices[devInd].rfConfig.rlDynChirpCfgs[chirpSegInd].rlDynChirpCfg_t.rlChirpRows[21].rlChirpRow_t.chirpNR1 = "0x" + DynamicChirpConfigurationParam.Chirp8R1.ToString();
            GlobalRef.jobject.mmWaveDevices[devInd].rfConfig.rlDynChirpCfgs[chirpSegInd].rlDynChirpCfg_t.rlChirpRows[22].rlChirpRow_t.chirpNR1 = "0x" + DynamicChirpConfigurationParam.Chirp8R2.ToString();
            GlobalRef.jobject.mmWaveDevices[devInd].rfConfig.rlDynChirpCfgs[chirpSegInd].rlDynChirpCfg_t.rlChirpRows[23].rlChirpRow_t.chirpNR1 = "0x" + DynamicChirpConfigurationParam.Chirp8R3.ToString();
            GlobalRef.jobject.mmWaveDevices[devInd].rfConfig.rlDynChirpCfgs[chirpSegInd].rlDynChirpCfg_t.rlChirpRows[24].rlChirpRow_t.chirpNR1 = "0x" + DynamicChirpConfigurationParam.Chirp9R1.ToString();
            GlobalRef.jobject.mmWaveDevices[devInd].rfConfig.rlDynChirpCfgs[chirpSegInd].rlDynChirpCfg_t.rlChirpRows[25].rlChirpRow_t.chirpNR1 = "0x" + DynamicChirpConfigurationParam.Chirp9R2.ToString();
            GlobalRef.jobject.mmWaveDevices[devInd].rfConfig.rlDynChirpCfgs[chirpSegInd].rlDynChirpCfg_t.rlChirpRows[26].rlChirpRow_t.chirpNR1 = "0x" + DynamicChirpConfigurationParam.Chirp9R3.ToString();
            GlobalRef.jobject.mmWaveDevices[devInd].rfConfig.rlDynChirpCfgs[chirpSegInd].rlDynChirpCfg_t.rlChirpRows[27].rlChirpRow_t.chirpNR1 = "0x" + DynamicChirpConfigurationParam.Chirp10R1.ToString();
            GlobalRef.jobject.mmWaveDevices[devInd].rfConfig.rlDynChirpCfgs[chirpSegInd].rlDynChirpCfg_t.rlChirpRows[28].rlChirpRow_t.chirpNR1 = "0x" + DynamicChirpConfigurationParam.Chirp10R2.ToString();
            GlobalRef.jobject.mmWaveDevices[devInd].rfConfig.rlDynChirpCfgs[chirpSegInd].rlDynChirpCfg_t.rlChirpRows[29].rlChirpRow_t.chirpNR1 = "0x" + DynamicChirpConfigurationParam.Chirp10R3.ToString();
            GlobalRef.jobject.mmWaveDevices[devInd].rfConfig.rlDynChirpCfgs[chirpSegInd].rlDynChirpCfg_t.rlChirpRows[30].rlChirpRow_t.chirpNR1 = "0x" + DynamicChirpConfigurationParam.Chirp11R1.ToString();
            GlobalRef.jobject.mmWaveDevices[devInd].rfConfig.rlDynChirpCfgs[chirpSegInd].rlDynChirpCfg_t.rlChirpRows[31].rlChirpRow_t.chirpNR1 = "0x" + DynamicChirpConfigurationParam.Chirp11R2.ToString();
            GlobalRef.jobject.mmWaveDevices[devInd].rfConfig.rlDynChirpCfgs[chirpSegInd].rlDynChirpCfg_t.rlChirpRows[32].rlChirpRow_t.chirpNR1 = "0x" + DynamicChirpConfigurationParam.Chirp11R3.ToString();
            GlobalRef.jobject.mmWaveDevices[devInd].rfConfig.rlDynChirpCfgs[chirpSegInd].rlDynChirpCfg_t.rlChirpRows[33].rlChirpRow_t.chirpNR1 = "0x" + DynamicChirpConfigurationParam.Chirp12R1.ToString();
            GlobalRef.jobject.mmWaveDevices[devInd].rfConfig.rlDynChirpCfgs[chirpSegInd].rlDynChirpCfg_t.rlChirpRows[34].rlChirpRow_t.chirpNR1 = "0x" + DynamicChirpConfigurationParam.Chirp12R2.ToString();
            GlobalRef.jobject.mmWaveDevices[devInd].rfConfig.rlDynChirpCfgs[chirpSegInd].rlDynChirpCfg_t.rlChirpRows[35].rlChirpRow_t.chirpNR1 = "0x" + DynamicChirpConfigurationParam.Chirp12R3.ToString();
            GlobalRef.jobject.mmWaveDevices[devInd].rfConfig.rlDynChirpCfgs[chirpSegInd].rlDynChirpCfg_t.rlChirpRows[36].rlChirpRow_t.chirpNR1 = "0x" + DynamicChirpConfigurationParam.Chirp13R1.ToString();
            GlobalRef.jobject.mmWaveDevices[devInd].rfConfig.rlDynChirpCfgs[chirpSegInd].rlDynChirpCfg_t.rlChirpRows[37].rlChirpRow_t.chirpNR1 = "0x" + DynamicChirpConfigurationParam.Chirp13R2.ToString();
            GlobalRef.jobject.mmWaveDevices[devInd].rfConfig.rlDynChirpCfgs[chirpSegInd].rlDynChirpCfg_t.rlChirpRows[38].rlChirpRow_t.chirpNR1 = "0x" + DynamicChirpConfigurationParam.Chirp13R3.ToString();
            GlobalRef.jobject.mmWaveDevices[devInd].rfConfig.rlDynChirpCfgs[chirpSegInd].rlDynChirpCfg_t.rlChirpRows[39].rlChirpRow_t.chirpNR1 = "0x" + DynamicChirpConfigurationParam.Chirp14R1.ToString();
            GlobalRef.jobject.mmWaveDevices[devInd].rfConfig.rlDynChirpCfgs[chirpSegInd].rlDynChirpCfg_t.rlChirpRows[40].rlChirpRow_t.chirpNR1 = "0x" + DynamicChirpConfigurationParam.Chirp14R2.ToString();
            GlobalRef.jobject.mmWaveDevices[devInd].rfConfig.rlDynChirpCfgs[chirpSegInd].rlDynChirpCfg_t.rlChirpRows[41].rlChirpRow_t.chirpNR1 = "0x" + DynamicChirpConfigurationParam.Chirp14R3.ToString();
            GlobalRef.jobject.mmWaveDevices[devInd].rfConfig.rlDynChirpCfgs[chirpSegInd].rlDynChirpCfg_t.rlChirpRows[42].rlChirpRow_t.chirpNR1 = "0x" + DynamicChirpConfigurationParam.Chirp15R1.ToString();
            GlobalRef.jobject.mmWaveDevices[devInd].rfConfig.rlDynChirpCfgs[chirpSegInd].rlDynChirpCfg_t.rlChirpRows[43].rlChirpRow_t.chirpNR1 = "0x" + DynamicChirpConfigurationParam.Chirp15R2.ToString();
            GlobalRef.jobject.mmWaveDevices[devInd].rfConfig.rlDynChirpCfgs[chirpSegInd].rlDynChirpCfg_t.rlChirpRows[44].rlChirpRow_t.chirpNR1 = "0x" + DynamicChirpConfigurationParam.Chirp15R3.ToString();
            GlobalRef.jobject.mmWaveDevices[devInd].rfConfig.rlDynChirpCfgs[chirpSegInd].rlDynChirpCfg_t.rlChirpRows[45].rlChirpRow_t.chirpNR1 = "0x" + DynamicChirpConfigurationParam.Chirp16R1.ToString();
            GlobalRef.jobject.mmWaveDevices[devInd].rfConfig.rlDynChirpCfgs[chirpSegInd].rlDynChirpCfg_t.rlChirpRows[46].rlChirpRow_t.chirpNR1 = "0x" + DynamicChirpConfigurationParam.Chirp16R2.ToString();
            GlobalRef.jobject.mmWaveDevices[devInd].rfConfig.rlDynChirpCfgs[chirpSegInd].rlDynChirpCfg_t.rlChirpRows[47].rlChirpRow_t.chirpNR1 = "0x" + DynamicChirpConfigurationParam.Chirp16R3.ToString();
        }

        private void UpdateDynChirpRow2()
        {
            if (GlobalRef.g_ARDeviceOperateFreq60GHz)
            {
                DynamicChirpConfigurationParam.Chirp1R1 = (uint)Math.Round(Math.Round(m_DynamicChirpConfigParams.Chirp1R2FreqStartVar, 7) / 2.7 * 67108864.0);
                DynamicChirpConfigurationParam.Chirp1R2 = (uint)Math.Round(Math.Round(m_DynamicChirpConfigParams.Chirp2R2FreqStartVar, 7) / 2.7 * 67108864.0);
                DynamicChirpConfigurationParam.Chirp1R3 = (uint)Math.Round(Math.Round(m_DynamicChirpConfigParams.Chirp3R2FreqStartVar, 7) / 2.7 * 67108864.0);
                DynamicChirpConfigurationParam.Chirp2R1 = (uint)Math.Round(Math.Round(m_DynamicChirpConfigParams.Chirp4R2FreqStartVar, 7) / 2.7 * 67108864.0);
                DynamicChirpConfigurationParam.Chirp2R2 = (uint)Math.Round(Math.Round(m_DynamicChirpConfigParams.Chirp5R2FreqStartVar, 7) / 2.7 * 67108864.0);
                DynamicChirpConfigurationParam.Chirp2R3 = (uint)Math.Round(Math.Round(m_DynamicChirpConfigParams.Chirp6R2FreqStartVar, 7) / 2.7 * 67108864.0);
                DynamicChirpConfigurationParam.Chirp3R1 = (uint)Math.Round(Math.Round(m_DynamicChirpConfigParams.Chirp7R2FreqStartVar, 7) / 2.7 * 67108864.0);
                DynamicChirpConfigurationParam.Chirp3R2 = (uint)Math.Round(Math.Round(m_DynamicChirpConfigParams.Chirp8R2FreqStartVar, 7) / 2.7 * 67108864.0);
                DynamicChirpConfigurationParam.Chirp3R3 = (uint)Math.Round(Math.Round(m_DynamicChirpConfigParams.Chirp9R2FreqStartVar, 7) / 2.7 * 67108864.0);
                DynamicChirpConfigurationParam.Chirp4R1 = (uint)Math.Round(Math.Round(m_DynamicChirpConfigParams.Chirp10R2FreqStartVar, 7) / 2.7 * 67108864.0);
                DynamicChirpConfigurationParam.Chirp4R2 = (uint)Math.Round(Math.Round(m_DynamicChirpConfigParams.Chirp11R2FreqStartVar, 7) / 2.7 * 67108864.0);
                DynamicChirpConfigurationParam.Chirp4R3 = (uint)Math.Round(Math.Round(m_DynamicChirpConfigParams.Chirp12R2FreqStartVar, 7) / 2.7 * 67108864.0);
                DynamicChirpConfigurationParam.Chirp5R1 = (uint)Math.Round(Math.Round(m_DynamicChirpConfigParams.Chirp13R2FreqStartVar, 7) / 2.7 * 67108864.0);
                DynamicChirpConfigurationParam.Chirp5R2 = (uint)Math.Round(Math.Round(m_DynamicChirpConfigParams.Chirp14R2FreqStartVar, 7) / 2.7 * 67108864.0);
                DynamicChirpConfigurationParam.Chirp5R3 = (uint)Math.Round(Math.Round(m_DynamicChirpConfigParams.Chirp15R2FreqStartVar, 7) / 2.7 * 67108864.0);
                DynamicChirpConfigurationParam.Chirp6R1 = (uint)Math.Round(Math.Round(m_DynamicChirpConfigParams.Chirp16R2FreqStartVar, 7) / 2.7 * 67108864.0);
                DynamicChirpConfigurationParam.Chirp6R2 = (uint)Math.Round(Math.Round(m_DynamicChirpConfigParams.Chirp17R2FreqStartVar, 7) / 2.7 * 67108864.0);
                DynamicChirpConfigurationParam.Chirp6R3 = (uint)Math.Round(Math.Round(m_DynamicChirpConfigParams.Chirp18R2FreqStartVar, 7) / 2.7 * 67108864.0);
                DynamicChirpConfigurationParam.Chirp7R1 = (uint)Math.Round(Math.Round(m_DynamicChirpConfigParams.Chirp19R2FreqStartVar, 7) / 2.7 * 67108864.0);
                DynamicChirpConfigurationParam.Chirp7R2 = (uint)Math.Round(Math.Round(m_DynamicChirpConfigParams.Chirp20R2FreqStartVar, 7) / 2.7 * 67108864.0);
                DynamicChirpConfigurationParam.Chirp7R3 = (uint)Math.Round(Math.Round(m_DynamicChirpConfigParams.Chirp21R2FreqStartVar, 7) / 2.7 * 67108864.0);
                DynamicChirpConfigurationParam.Chirp8R1 = (uint)Math.Round(Math.Round(m_DynamicChirpConfigParams.Chirp22R2FreqStartVar, 7) / 2.7 * 67108864.0);
                DynamicChirpConfigurationParam.Chirp8R2 = (uint)Math.Round(Math.Round(m_DynamicChirpConfigParams.Chirp23R2FreqStartVar, 7) / 2.7 * 67108864.0);
                DynamicChirpConfigurationParam.Chirp8R3 = (uint)Math.Round(Math.Round(m_DynamicChirpConfigParams.Chirp24R2FreqStartVar, 7) / 2.7 * 67108864.0);
                DynamicChirpConfigurationParam.Chirp9R1 = (uint)Math.Round(Math.Round(m_DynamicChirpConfigParams.Chirp25R2FreqStartVar, 7) / 2.7 * 67108864.0);
                DynamicChirpConfigurationParam.Chirp9R2 = (uint)Math.Round(Math.Round(m_DynamicChirpConfigParams.Chirp26R2FreqStartVar, 7) / 2.7 * 67108864.0);
                DynamicChirpConfigurationParam.Chirp9R3 = (uint)Math.Round(Math.Round(m_DynamicChirpConfigParams.Chirp27R2FreqStartVar, 7) / 2.7 * 67108864.0);
                DynamicChirpConfigurationParam.Chirp10R1 = (uint)Math.Round(Math.Round(m_DynamicChirpConfigParams.Chirp28R2FreqStartVar, 7) / 2.7 * 67108864.0);
                DynamicChirpConfigurationParam.Chirp10R2 = (uint)Math.Round(Math.Round(m_DynamicChirpConfigParams.Chirp29R2FreqStartVar, 7) / 2.7 * 67108864.0);
                DynamicChirpConfigurationParam.Chirp10R3 = (uint)Math.Round(Math.Round(m_DynamicChirpConfigParams.Chirp30R2FreqStartVar, 7) / 2.7 * 67108864.0);
                DynamicChirpConfigurationParam.Chirp11R1 = (uint)Math.Round(Math.Round(m_DynamicChirpConfigParams.Chirp31R2FreqStartVar, 7) / 2.7 * 67108864.0);
                DynamicChirpConfigurationParam.Chirp11R2 = (uint)Math.Round(Math.Round(m_DynamicChirpConfigParams.Chirp32R2FreqStartVar, 7) / 2.7 * 67108864.0);
                DynamicChirpConfigurationParam.Chirp11R3 = (uint)Math.Round(Math.Round(m_DynamicChirpConfigParams.Chirp33R2FreqStartVar, 7) / 2.7 * 67108864.0);
                DynamicChirpConfigurationParam.Chirp12R1 = (uint)Math.Round(Math.Round(m_DynamicChirpConfigParams.Chirp34R2FreqStartVar, 7) / 2.7 * 67108864.0);
                DynamicChirpConfigurationParam.Chirp12R2 = (uint)Math.Round(Math.Round(m_DynamicChirpConfigParams.Chirp35R2FreqStartVar, 7) / 2.7 * 67108864.0);
                DynamicChirpConfigurationParam.Chirp12R3 = (uint)Math.Round(Math.Round(m_DynamicChirpConfigParams.Chirp36R2FreqStartVar, 7) / 2.7 * 67108864.0);
                DynamicChirpConfigurationParam.Chirp13R1 = (uint)Math.Round(Math.Round(m_DynamicChirpConfigParams.Chirp37R2FreqStartVar, 7) / 2.7 * 67108864.0);
                DynamicChirpConfigurationParam.Chirp13R2 = (uint)Math.Round(Math.Round(m_DynamicChirpConfigParams.Chirp38R2FreqStartVar, 7) / 2.7 * 67108864.0);
                DynamicChirpConfigurationParam.Chirp13R3 = (uint)Math.Round(Math.Round(m_DynamicChirpConfigParams.Chirp39R2FreqStartVar, 7) / 2.7 * 67108864.0);
                DynamicChirpConfigurationParam.Chirp14R1 = (uint)Math.Round(Math.Round(m_DynamicChirpConfigParams.Chirp40R2FreqStartVar, 7) / 2.7 * 67108864.0);
                DynamicChirpConfigurationParam.Chirp14R2 = (uint)Math.Round(Math.Round(m_DynamicChirpConfigParams.Chirp41R2FreqStartVar, 7) / 2.7 * 67108864.0);
                DynamicChirpConfigurationParam.Chirp14R3 = (uint)Math.Round(Math.Round(m_DynamicChirpConfigParams.Chirp42R2FreqStartVar, 7) / 2.7 * 67108864.0);
                DynamicChirpConfigurationParam.Chirp15R1 = (uint)Math.Round(Math.Round(m_DynamicChirpConfigParams.Chirp43R2FreqStartVar, 7) / 2.7 * 67108864.0);
                DynamicChirpConfigurationParam.Chirp15R2 = (uint)Math.Round(Math.Round(m_DynamicChirpConfigParams.Chirp44R2FreqStartVar, 7) / 2.7 * 67108864.0);
                DynamicChirpConfigurationParam.Chirp15R3 = (uint)Math.Round(Math.Round(m_DynamicChirpConfigParams.Chirp45R2FreqStartVar, 7) / 2.7 * 67108864.0);
                DynamicChirpConfigurationParam.Chirp16R1 = (uint)Math.Round(Math.Round(m_DynamicChirpConfigParams.Chirp46R2FreqStartVar, 7) / 2.7 * 67108864.0);
                DynamicChirpConfigurationParam.Chirp16R2 = (uint)Math.Round(Math.Round(m_DynamicChirpConfigParams.Chirp47R2FreqStartVar, 7) / 2.7 * 67108864.0);
                DynamicChirpConfigurationParam.Chirp16R3 = (uint)Math.Round(Math.Round(m_DynamicChirpConfigParams.Chirp48R2FreqStartVar, 7) / 2.7 * 67108864.0);
                return;
            }
            DynamicChirpConfigurationParam.Chirp1R1 = (uint)Math.Round(Math.Round(m_DynamicChirpConfigParams.Chirp1R2FreqStartVar, 7) / 3.6 * 67108864.0);
            DynamicChirpConfigurationParam.Chirp1R2 = (uint)Math.Round(Math.Round(m_DynamicChirpConfigParams.Chirp2R2FreqStartVar, 7) / 3.6 * 67108864.0);
            DynamicChirpConfigurationParam.Chirp1R3 = (uint)Math.Round(Math.Round(m_DynamicChirpConfigParams.Chirp3R2FreqStartVar, 7) / 3.6 * 67108864.0);
            DynamicChirpConfigurationParam.Chirp2R1 = (uint)Math.Round(Math.Round(m_DynamicChirpConfigParams.Chirp4R2FreqStartVar, 7) / 3.6 * 67108864.0);
            DynamicChirpConfigurationParam.Chirp2R2 = (uint)Math.Round(Math.Round(m_DynamicChirpConfigParams.Chirp5R2FreqStartVar, 7) / 3.6 * 67108864.0);
            DynamicChirpConfigurationParam.Chirp2R3 = (uint)Math.Round(Math.Round(m_DynamicChirpConfigParams.Chirp6R2FreqStartVar, 7) / 3.6 * 67108864.0);
            DynamicChirpConfigurationParam.Chirp3R1 = (uint)Math.Round(Math.Round(m_DynamicChirpConfigParams.Chirp7R2FreqStartVar, 7) / 3.6 * 67108864.0);
            DynamicChirpConfigurationParam.Chirp3R2 = (uint)Math.Round(Math.Round(m_DynamicChirpConfigParams.Chirp8R2FreqStartVar, 7) / 3.6 * 67108864.0);
            DynamicChirpConfigurationParam.Chirp3R3 = (uint)Math.Round(Math.Round(m_DynamicChirpConfigParams.Chirp9R2FreqStartVar, 7) / 3.6 * 67108864.0);
            DynamicChirpConfigurationParam.Chirp4R1 = (uint)Math.Round(Math.Round(m_DynamicChirpConfigParams.Chirp10R2FreqStartVar, 7) / 3.6 * 67108864.0);
            DynamicChirpConfigurationParam.Chirp4R2 = (uint)Math.Round(Math.Round(m_DynamicChirpConfigParams.Chirp11R2FreqStartVar, 7) / 3.6 * 67108864.0);
            DynamicChirpConfigurationParam.Chirp4R3 = (uint)Math.Round(Math.Round(m_DynamicChirpConfigParams.Chirp12R2FreqStartVar, 7) / 3.6 * 67108864.0);
            DynamicChirpConfigurationParam.Chirp5R1 = (uint)Math.Round(Math.Round(m_DynamicChirpConfigParams.Chirp13R2FreqStartVar, 7) / 3.6 * 67108864.0);
            DynamicChirpConfigurationParam.Chirp5R2 = (uint)Math.Round(Math.Round(m_DynamicChirpConfigParams.Chirp14R2FreqStartVar, 7) / 3.6 * 67108864.0);
            DynamicChirpConfigurationParam.Chirp5R3 = (uint)Math.Round(Math.Round(m_DynamicChirpConfigParams.Chirp15R2FreqStartVar, 7) / 3.6 * 67108864.0);
            DynamicChirpConfigurationParam.Chirp6R1 = (uint)Math.Round(Math.Round(m_DynamicChirpConfigParams.Chirp16R2FreqStartVar, 7) / 3.6 * 67108864.0);
            DynamicChirpConfigurationParam.Chirp6R2 = (uint)Math.Round(Math.Round(m_DynamicChirpConfigParams.Chirp17R2FreqStartVar, 7) / 3.6 * 67108864.0);
            DynamicChirpConfigurationParam.Chirp6R3 = (uint)Math.Round(Math.Round(m_DynamicChirpConfigParams.Chirp18R2FreqStartVar, 7) / 3.6 * 67108864.0);
            DynamicChirpConfigurationParam.Chirp7R1 = (uint)Math.Round(Math.Round(m_DynamicChirpConfigParams.Chirp19R2FreqStartVar, 7) / 3.6 * 67108864.0);
            DynamicChirpConfigurationParam.Chirp7R2 = (uint)Math.Round(Math.Round(m_DynamicChirpConfigParams.Chirp20R2FreqStartVar, 7) / 3.6 * 67108864.0);
            DynamicChirpConfigurationParam.Chirp7R3 = (uint)Math.Round(Math.Round(m_DynamicChirpConfigParams.Chirp21R2FreqStartVar, 7) / 3.6 * 67108864.0);
            DynamicChirpConfigurationParam.Chirp8R1 = (uint)Math.Round(Math.Round(m_DynamicChirpConfigParams.Chirp22R2FreqStartVar, 7) / 3.6 * 67108864.0);
            DynamicChirpConfigurationParam.Chirp8R2 = (uint)Math.Round(Math.Round(m_DynamicChirpConfigParams.Chirp23R2FreqStartVar, 7) / 3.6 * 67108864.0);
            DynamicChirpConfigurationParam.Chirp8R3 = (uint)Math.Round(Math.Round(m_DynamicChirpConfigParams.Chirp24R2FreqStartVar, 7) / 3.6 * 67108864.0);
            DynamicChirpConfigurationParam.Chirp9R1 = (uint)Math.Round(Math.Round(m_DynamicChirpConfigParams.Chirp25R2FreqStartVar, 7) / 3.6 * 67108864.0);
            DynamicChirpConfigurationParam.Chirp9R2 = (uint)Math.Round(Math.Round(m_DynamicChirpConfigParams.Chirp26R2FreqStartVar, 7) / 3.6 * 67108864.0);
            DynamicChirpConfigurationParam.Chirp9R3 = (uint)Math.Round(Math.Round(m_DynamicChirpConfigParams.Chirp27R2FreqStartVar, 7) / 3.6 * 67108864.0);
            DynamicChirpConfigurationParam.Chirp10R1 = (uint)Math.Round(Math.Round(m_DynamicChirpConfigParams.Chirp28R2FreqStartVar, 7) / 3.6 * 67108864.0);
            DynamicChirpConfigurationParam.Chirp10R2 = (uint)Math.Round(Math.Round(m_DynamicChirpConfigParams.Chirp29R2FreqStartVar, 7) / 3.6 * 67108864.0);
            DynamicChirpConfigurationParam.Chirp10R3 = (uint)Math.Round(Math.Round(m_DynamicChirpConfigParams.Chirp30R2FreqStartVar, 7) / 3.6 * 67108864.0);
            DynamicChirpConfigurationParam.Chirp11R1 = (uint)Math.Round(Math.Round(m_DynamicChirpConfigParams.Chirp31R2FreqStartVar, 7) / 3.6 * 67108864.0);
            DynamicChirpConfigurationParam.Chirp11R2 = (uint)Math.Round(Math.Round(m_DynamicChirpConfigParams.Chirp32R2FreqStartVar, 7) / 3.6 * 67108864.0);
            DynamicChirpConfigurationParam.Chirp11R3 = (uint)Math.Round(Math.Round(m_DynamicChirpConfigParams.Chirp33R2FreqStartVar, 7) / 3.6 * 67108864.0);
            DynamicChirpConfigurationParam.Chirp12R1 = (uint)Math.Round(Math.Round(m_DynamicChirpConfigParams.Chirp34R2FreqStartVar, 7) / 3.6 * 67108864.0);
            DynamicChirpConfigurationParam.Chirp12R2 = (uint)Math.Round(Math.Round(m_DynamicChirpConfigParams.Chirp35R2FreqStartVar, 7) / 3.6 * 67108864.0);
            DynamicChirpConfigurationParam.Chirp12R3 = (uint)Math.Round(Math.Round(m_DynamicChirpConfigParams.Chirp36R2FreqStartVar, 7) / 3.6 * 67108864.0);
            DynamicChirpConfigurationParam.Chirp13R1 = (uint)Math.Round(Math.Round(m_DynamicChirpConfigParams.Chirp37R2FreqStartVar, 7) / 3.6 * 67108864.0);
            DynamicChirpConfigurationParam.Chirp13R2 = (uint)Math.Round(Math.Round(m_DynamicChirpConfigParams.Chirp38R2FreqStartVar, 7) / 3.6 * 67108864.0);
            DynamicChirpConfigurationParam.Chirp13R3 = (uint)Math.Round(Math.Round(m_DynamicChirpConfigParams.Chirp39R2FreqStartVar, 7) / 3.6 * 67108864.0);
            DynamicChirpConfigurationParam.Chirp14R1 = (uint)Math.Round(Math.Round(m_DynamicChirpConfigParams.Chirp40R2FreqStartVar, 7) / 3.6 * 67108864.0);
            DynamicChirpConfigurationParam.Chirp14R2 = (uint)Math.Round(Math.Round(m_DynamicChirpConfigParams.Chirp41R2FreqStartVar, 7) / 3.6 * 67108864.0);
            DynamicChirpConfigurationParam.Chirp14R3 = (uint)Math.Round(Math.Round(m_DynamicChirpConfigParams.Chirp42R2FreqStartVar, 7) / 3.6 * 67108864.0);
            DynamicChirpConfigurationParam.Chirp15R1 = (uint)Math.Round(Math.Round(m_DynamicChirpConfigParams.Chirp43R2FreqStartVar, 7) / 3.6 * 67108864.0);
            DynamicChirpConfigurationParam.Chirp15R2 = (uint)Math.Round(Math.Round(m_DynamicChirpConfigParams.Chirp44R2FreqStartVar, 7) / 3.6 * 67108864.0);
            DynamicChirpConfigurationParam.Chirp15R3 = (uint)Math.Round(Math.Round(m_DynamicChirpConfigParams.Chirp45R2FreqStartVar, 7) / 3.6 * 67108864.0);
            DynamicChirpConfigurationParam.Chirp16R1 = (uint)Math.Round(Math.Round(m_DynamicChirpConfigParams.Chirp46R2FreqStartVar, 7) / 3.6 * 67108864.0);
            DynamicChirpConfigurationParam.Chirp16R2 = (uint)Math.Round(Math.Round(m_DynamicChirpConfigParams.Chirp47R2FreqStartVar, 7) / 3.6 * 67108864.0);
            DynamicChirpConfigurationParam.Chirp16R3 = (uint)Math.Round(Math.Round(m_DynamicChirpConfigParams.Chirp48R2FreqStartVar, 7) / 3.6 * 67108864.0);
        }

        public void UpdateDynChirpRow2_JSON(int devInd, int chirpSegInd)
        {
            GlobalRef.jobject.mmWaveDevices[devInd].rfConfig.rlDynChirpCfgs[chirpSegInd].rlDynChirpCfg_t.rlChirpRows[0].rlChirpRow_t.chirpNR2 = "0x" + DynamicChirpConfigurationParam.Chirp1R1.ToString();
            GlobalRef.jobject.mmWaveDevices[devInd].rfConfig.rlDynChirpCfgs[chirpSegInd].rlDynChirpCfg_t.rlChirpRows[1].rlChirpRow_t.chirpNR2 = "0x" + DynamicChirpConfigurationParam.Chirp1R2.ToString();
            GlobalRef.jobject.mmWaveDevices[devInd].rfConfig.rlDynChirpCfgs[chirpSegInd].rlDynChirpCfg_t.rlChirpRows[2].rlChirpRow_t.chirpNR2 = "0x" + DynamicChirpConfigurationParam.Chirp1R3.ToString();
            GlobalRef.jobject.mmWaveDevices[devInd].rfConfig.rlDynChirpCfgs[chirpSegInd].rlDynChirpCfg_t.rlChirpRows[3].rlChirpRow_t.chirpNR2 = "0x" + DynamicChirpConfigurationParam.Chirp2R1.ToString();
            GlobalRef.jobject.mmWaveDevices[devInd].rfConfig.rlDynChirpCfgs[chirpSegInd].rlDynChirpCfg_t.rlChirpRows[4].rlChirpRow_t.chirpNR2 = "0x" + DynamicChirpConfigurationParam.Chirp2R2.ToString();
            GlobalRef.jobject.mmWaveDevices[devInd].rfConfig.rlDynChirpCfgs[chirpSegInd].rlDynChirpCfg_t.rlChirpRows[5].rlChirpRow_t.chirpNR2 = "0x" + DynamicChirpConfigurationParam.Chirp2R3.ToString();
            GlobalRef.jobject.mmWaveDevices[devInd].rfConfig.rlDynChirpCfgs[chirpSegInd].rlDynChirpCfg_t.rlChirpRows[6].rlChirpRow_t.chirpNR2 = "0x" + DynamicChirpConfigurationParam.Chirp3R1.ToString();
            GlobalRef.jobject.mmWaveDevices[devInd].rfConfig.rlDynChirpCfgs[chirpSegInd].rlDynChirpCfg_t.rlChirpRows[7].rlChirpRow_t.chirpNR2 = "0x" + DynamicChirpConfigurationParam.Chirp3R2.ToString();
            GlobalRef.jobject.mmWaveDevices[devInd].rfConfig.rlDynChirpCfgs[chirpSegInd].rlDynChirpCfg_t.rlChirpRows[8].rlChirpRow_t.chirpNR2 = "0x" + DynamicChirpConfigurationParam.Chirp3R3.ToString();
            GlobalRef.jobject.mmWaveDevices[devInd].rfConfig.rlDynChirpCfgs[chirpSegInd].rlDynChirpCfg_t.rlChirpRows[9].rlChirpRow_t.chirpNR2 = "0x" + DynamicChirpConfigurationParam.Chirp4R1.ToString();
            GlobalRef.jobject.mmWaveDevices[devInd].rfConfig.rlDynChirpCfgs[chirpSegInd].rlDynChirpCfg_t.rlChirpRows[10].rlChirpRow_t.chirpNR2 = "0x" + DynamicChirpConfigurationParam.Chirp4R2.ToString();
            GlobalRef.jobject.mmWaveDevices[devInd].rfConfig.rlDynChirpCfgs[chirpSegInd].rlDynChirpCfg_t.rlChirpRows[11].rlChirpRow_t.chirpNR2 = "0x" + DynamicChirpConfigurationParam.Chirp4R3.ToString();
            GlobalRef.jobject.mmWaveDevices[devInd].rfConfig.rlDynChirpCfgs[chirpSegInd].rlDynChirpCfg_t.rlChirpRows[12].rlChirpRow_t.chirpNR2 = "0x" + DynamicChirpConfigurationParam.Chirp5R1.ToString();
            GlobalRef.jobject.mmWaveDevices[devInd].rfConfig.rlDynChirpCfgs[chirpSegInd].rlDynChirpCfg_t.rlChirpRows[13].rlChirpRow_t.chirpNR2 = "0x" + DynamicChirpConfigurationParam.Chirp5R2.ToString();
            GlobalRef.jobject.mmWaveDevices[devInd].rfConfig.rlDynChirpCfgs[chirpSegInd].rlDynChirpCfg_t.rlChirpRows[14].rlChirpRow_t.chirpNR2 = "0x" + DynamicChirpConfigurationParam.Chirp5R3.ToString();
            GlobalRef.jobject.mmWaveDevices[devInd].rfConfig.rlDynChirpCfgs[chirpSegInd].rlDynChirpCfg_t.rlChirpRows[15].rlChirpRow_t.chirpNR2 = "0x" + DynamicChirpConfigurationParam.Chirp6R1.ToString();
            GlobalRef.jobject.mmWaveDevices[devInd].rfConfig.rlDynChirpCfgs[chirpSegInd].rlDynChirpCfg_t.rlChirpRows[16].rlChirpRow_t.chirpNR2 = "0x" + DynamicChirpConfigurationParam.Chirp6R2.ToString();
            GlobalRef.jobject.mmWaveDevices[devInd].rfConfig.rlDynChirpCfgs[chirpSegInd].rlDynChirpCfg_t.rlChirpRows[17].rlChirpRow_t.chirpNR2 = "0x" + DynamicChirpConfigurationParam.Chirp6R3.ToString();
            GlobalRef.jobject.mmWaveDevices[devInd].rfConfig.rlDynChirpCfgs[chirpSegInd].rlDynChirpCfg_t.rlChirpRows[18].rlChirpRow_t.chirpNR2 = "0x" + DynamicChirpConfigurationParam.Chirp7R1.ToString();
            GlobalRef.jobject.mmWaveDevices[devInd].rfConfig.rlDynChirpCfgs[chirpSegInd].rlDynChirpCfg_t.rlChirpRows[19].rlChirpRow_t.chirpNR2 = "0x" + DynamicChirpConfigurationParam.Chirp7R2.ToString();
            GlobalRef.jobject.mmWaveDevices[devInd].rfConfig.rlDynChirpCfgs[chirpSegInd].rlDynChirpCfg_t.rlChirpRows[20].rlChirpRow_t.chirpNR2 = "0x" + DynamicChirpConfigurationParam.Chirp7R3.ToString();
            GlobalRef.jobject.mmWaveDevices[devInd].rfConfig.rlDynChirpCfgs[chirpSegInd].rlDynChirpCfg_t.rlChirpRows[21].rlChirpRow_t.chirpNR2 = "0x" + DynamicChirpConfigurationParam.Chirp8R1.ToString();
            GlobalRef.jobject.mmWaveDevices[devInd].rfConfig.rlDynChirpCfgs[chirpSegInd].rlDynChirpCfg_t.rlChirpRows[22].rlChirpRow_t.chirpNR2 = "0x" + DynamicChirpConfigurationParam.Chirp8R2.ToString();
            GlobalRef.jobject.mmWaveDevices[devInd].rfConfig.rlDynChirpCfgs[chirpSegInd].rlDynChirpCfg_t.rlChirpRows[23].rlChirpRow_t.chirpNR2 = "0x" + DynamicChirpConfigurationParam.Chirp8R3.ToString();
            GlobalRef.jobject.mmWaveDevices[devInd].rfConfig.rlDynChirpCfgs[chirpSegInd].rlDynChirpCfg_t.rlChirpRows[24].rlChirpRow_t.chirpNR2 = "0x" + DynamicChirpConfigurationParam.Chirp9R1.ToString();
            GlobalRef.jobject.mmWaveDevices[devInd].rfConfig.rlDynChirpCfgs[chirpSegInd].rlDynChirpCfg_t.rlChirpRows[25].rlChirpRow_t.chirpNR2 = "0x" + DynamicChirpConfigurationParam.Chirp9R2.ToString();
            GlobalRef.jobject.mmWaveDevices[devInd].rfConfig.rlDynChirpCfgs[chirpSegInd].rlDynChirpCfg_t.rlChirpRows[26].rlChirpRow_t.chirpNR2 = "0x" + DynamicChirpConfigurationParam.Chirp9R3.ToString();
            GlobalRef.jobject.mmWaveDevices[devInd].rfConfig.rlDynChirpCfgs[chirpSegInd].rlDynChirpCfg_t.rlChirpRows[27].rlChirpRow_t.chirpNR2 = "0x" + DynamicChirpConfigurationParam.Chirp10R1.ToString();
            GlobalRef.jobject.mmWaveDevices[devInd].rfConfig.rlDynChirpCfgs[chirpSegInd].rlDynChirpCfg_t.rlChirpRows[28].rlChirpRow_t.chirpNR2 = "0x" + DynamicChirpConfigurationParam.Chirp10R2.ToString();
            GlobalRef.jobject.mmWaveDevices[devInd].rfConfig.rlDynChirpCfgs[chirpSegInd].rlDynChirpCfg_t.rlChirpRows[29].rlChirpRow_t.chirpNR2 = "0x" + DynamicChirpConfigurationParam.Chirp10R3.ToString();
            GlobalRef.jobject.mmWaveDevices[devInd].rfConfig.rlDynChirpCfgs[chirpSegInd].rlDynChirpCfg_t.rlChirpRows[30].rlChirpRow_t.chirpNR2 = "0x" + DynamicChirpConfigurationParam.Chirp11R1.ToString();
            GlobalRef.jobject.mmWaveDevices[devInd].rfConfig.rlDynChirpCfgs[chirpSegInd].rlDynChirpCfg_t.rlChirpRows[31].rlChirpRow_t.chirpNR2 = "0x" + DynamicChirpConfigurationParam.Chirp11R2.ToString();
            GlobalRef.jobject.mmWaveDevices[devInd].rfConfig.rlDynChirpCfgs[chirpSegInd].rlDynChirpCfg_t.rlChirpRows[32].rlChirpRow_t.chirpNR2 = "0x" + DynamicChirpConfigurationParam.Chirp11R3.ToString();
            GlobalRef.jobject.mmWaveDevices[devInd].rfConfig.rlDynChirpCfgs[chirpSegInd].rlDynChirpCfg_t.rlChirpRows[33].rlChirpRow_t.chirpNR2 = "0x" + DynamicChirpConfigurationParam.Chirp12R1.ToString();
            GlobalRef.jobject.mmWaveDevices[devInd].rfConfig.rlDynChirpCfgs[chirpSegInd].rlDynChirpCfg_t.rlChirpRows[34].rlChirpRow_t.chirpNR2 = "0x" + DynamicChirpConfigurationParam.Chirp12R2.ToString();
            GlobalRef.jobject.mmWaveDevices[devInd].rfConfig.rlDynChirpCfgs[chirpSegInd].rlDynChirpCfg_t.rlChirpRows[35].rlChirpRow_t.chirpNR2 = "0x" + DynamicChirpConfigurationParam.Chirp12R3.ToString();
            GlobalRef.jobject.mmWaveDevices[devInd].rfConfig.rlDynChirpCfgs[chirpSegInd].rlDynChirpCfg_t.rlChirpRows[36].rlChirpRow_t.chirpNR2 = "0x" + DynamicChirpConfigurationParam.Chirp13R1.ToString();
            GlobalRef.jobject.mmWaveDevices[devInd].rfConfig.rlDynChirpCfgs[chirpSegInd].rlDynChirpCfg_t.rlChirpRows[37].rlChirpRow_t.chirpNR2 = "0x" + DynamicChirpConfigurationParam.Chirp13R2.ToString();
            GlobalRef.jobject.mmWaveDevices[devInd].rfConfig.rlDynChirpCfgs[chirpSegInd].rlDynChirpCfg_t.rlChirpRows[38].rlChirpRow_t.chirpNR2 = "0x" + DynamicChirpConfigurationParam.Chirp13R3.ToString();
            GlobalRef.jobject.mmWaveDevices[devInd].rfConfig.rlDynChirpCfgs[chirpSegInd].rlDynChirpCfg_t.rlChirpRows[39].rlChirpRow_t.chirpNR2 = "0x" + DynamicChirpConfigurationParam.Chirp14R1.ToString();
            GlobalRef.jobject.mmWaveDevices[devInd].rfConfig.rlDynChirpCfgs[chirpSegInd].rlDynChirpCfg_t.rlChirpRows[40].rlChirpRow_t.chirpNR2 = "0x" + DynamicChirpConfigurationParam.Chirp14R2.ToString();
            GlobalRef.jobject.mmWaveDevices[devInd].rfConfig.rlDynChirpCfgs[chirpSegInd].rlDynChirpCfg_t.rlChirpRows[41].rlChirpRow_t.chirpNR2 = "0x" + DynamicChirpConfigurationParam.Chirp14R3.ToString();
            GlobalRef.jobject.mmWaveDevices[devInd].rfConfig.rlDynChirpCfgs[chirpSegInd].rlDynChirpCfg_t.rlChirpRows[42].rlChirpRow_t.chirpNR2 = "0x" + DynamicChirpConfigurationParam.Chirp15R1.ToString();
            GlobalRef.jobject.mmWaveDevices[devInd].rfConfig.rlDynChirpCfgs[chirpSegInd].rlDynChirpCfg_t.rlChirpRows[43].rlChirpRow_t.chirpNR2 = "0x" + DynamicChirpConfigurationParam.Chirp15R2.ToString();
            GlobalRef.jobject.mmWaveDevices[devInd].rfConfig.rlDynChirpCfgs[chirpSegInd].rlDynChirpCfg_t.rlChirpRows[44].rlChirpRow_t.chirpNR2 = "0x" + DynamicChirpConfigurationParam.Chirp15R3.ToString();
            GlobalRef.jobject.mmWaveDevices[devInd].rfConfig.rlDynChirpCfgs[chirpSegInd].rlDynChirpCfg_t.rlChirpRows[45].rlChirpRow_t.chirpNR2 = "0x" + DynamicChirpConfigurationParam.Chirp16R1.ToString();
            GlobalRef.jobject.mmWaveDevices[devInd].rfConfig.rlDynChirpCfgs[chirpSegInd].rlDynChirpCfg_t.rlChirpRows[46].rlChirpRow_t.chirpNR2 = "0x" + DynamicChirpConfigurationParam.Chirp16R2.ToString();
            GlobalRef.jobject.mmWaveDevices[devInd].rfConfig.rlDynChirpCfgs[chirpSegInd].rlDynChirpCfg_t.rlChirpRows[47].rlChirpRow_t.chirpNR2 = "0x" + DynamicChirpConfigurationParam.Chirp16R3.ToString();
        }

        private void UpdateDynChirpRow3()
        {
            DynamicChirpConfigurationParam.Chirp1R1 = (uint)((int)((ushort)Math.Round((double)(m_DynamicChirpConfigParams.Chirp1R3IdleTimeVar * 100f))) | (int)((ushort)Math.Round((double)(m_DynamicChirpConfigParams.Chirp1R3ADCStartTimeVar * 100f))) << 16);
            DynamicChirpConfigurationParam.Chirp1R2 = (uint)((int)((ushort)Math.Round((double)(m_DynamicChirpConfigParams.Chirp2R3IdleTimeVar * 100f))) | (int)((ushort)Math.Round((double)(m_DynamicChirpConfigParams.Chirp2R3ADCStartTimeVar * 100f))) << 16);
            DynamicChirpConfigurationParam.Chirp1R3 = (uint)((int)((ushort)Math.Round((double)(m_DynamicChirpConfigParams.Chirp3R3IdleTimeVar * 100f))) | (int)((ushort)Math.Round((double)(m_DynamicChirpConfigParams.Chirp3R3ADCStartTimeVar * 100f))) << 16);
            DynamicChirpConfigurationParam.Chirp2R1 = (uint)((int)((ushort)Math.Round((double)(m_DynamicChirpConfigParams.Chirp4R3IdleTimeVar * 100f))) | (int)((ushort)Math.Round((double)(m_DynamicChirpConfigParams.Chirp4R3ADCStartTimeVar * 100f))) << 16);
            DynamicChirpConfigurationParam.Chirp2R2 = (uint)((int)((ushort)Math.Round((double)(m_DynamicChirpConfigParams.Chirp5R3IdleTimeVar * 100f))) | (int)((ushort)Math.Round((double)(m_DynamicChirpConfigParams.Chirp5R3ADCStartTimeVar * 100f))) << 16);
            DynamicChirpConfigurationParam.Chirp2R3 = (uint)((int)((ushort)Math.Round((double)(m_DynamicChirpConfigParams.Chirp6R3IdleTimeVar * 100f))) | (int)((ushort)Math.Round((double)(m_DynamicChirpConfigParams.Chirp6R3ADCStartTimeVar * 100f))) << 16);
            DynamicChirpConfigurationParam.Chirp3R1 = (uint)((int)((ushort)Math.Round((double)(m_DynamicChirpConfigParams.Chirp7R3IdleTimeVar * 100f))) | (int)((ushort)Math.Round((double)(m_DynamicChirpConfigParams.Chirp7R3ADCStartTimeVar * 100f))) << 16);
            DynamicChirpConfigurationParam.Chirp3R2 = (uint)((int)((ushort)Math.Round((double)(m_DynamicChirpConfigParams.Chirp8R3IdleTimeVar * 100f))) | (int)((ushort)Math.Round((double)(m_DynamicChirpConfigParams.Chirp8R3ADCStartTimeVar * 100f))) << 16);
            DynamicChirpConfigurationParam.Chirp3R3 = (uint)((int)((ushort)Math.Round((double)(m_DynamicChirpConfigParams.Chirp9R3IdleTimeVar * 100f))) | (int)((ushort)Math.Round((double)(m_DynamicChirpConfigParams.Chirp9R3ADCStartTimeVar * 100f))) << 16);
            DynamicChirpConfigurationParam.Chirp4R1 = (uint)((int)((ushort)Math.Round((double)(m_DynamicChirpConfigParams.Chirp10R3IdleTimeVar * 100f))) | (int)((ushort)Math.Round((double)(m_DynamicChirpConfigParams.Chirp10R3ADCStartTimeVar * 100f))) << 16);
            DynamicChirpConfigurationParam.Chirp4R2 = (uint)((int)((ushort)Math.Round((double)(m_DynamicChirpConfigParams.Chirp11R3IdleTimeVar * 100f))) | (int)((ushort)Math.Round((double)(m_DynamicChirpConfigParams.Chirp11R3ADCStartTimeVar * 100f))) << 16);
            DynamicChirpConfigurationParam.Chirp4R3 = (uint)((int)((ushort)Math.Round((double)(m_DynamicChirpConfigParams.Chirp12R3IdleTimeVar * 100f))) | (int)((ushort)Math.Round((double)(m_DynamicChirpConfigParams.Chirp12R3ADCStartTimeVar * 100f))) << 16);
            DynamicChirpConfigurationParam.Chirp5R1 = (uint)((int)((ushort)Math.Round((double)(m_DynamicChirpConfigParams.Chirp13R3IdleTimeVar * 100f))) | (int)((ushort)Math.Round((double)(m_DynamicChirpConfigParams.Chirp13R3ADCStartTimeVar * 100f))) << 16);
            DynamicChirpConfigurationParam.Chirp5R2 = (uint)((int)((ushort)Math.Round((double)(m_DynamicChirpConfigParams.Chirp14R3IdleTimeVar * 100f))) | (int)((ushort)Math.Round((double)(m_DynamicChirpConfigParams.Chirp14R3ADCStartTimeVar * 100f))) << 16);
            DynamicChirpConfigurationParam.Chirp5R3 = (uint)((int)((ushort)Math.Round((double)(m_DynamicChirpConfigParams.Chirp15R3IdleTimeVar * 100f))) | (int)((ushort)Math.Round((double)(m_DynamicChirpConfigParams.Chirp15R3ADCStartTimeVar * 100f))) << 16);
            DynamicChirpConfigurationParam.Chirp6R1 = (uint)((int)((ushort)Math.Round((double)(m_DynamicChirpConfigParams.Chirp16R3IdleTimeVar * 100f))) | (int)((ushort)Math.Round((double)(m_DynamicChirpConfigParams.Chirp16R3ADCStartTimeVar * 100f))) << 16);
            DynamicChirpConfigurationParam.Chirp6R2 = (uint)((int)((ushort)Math.Round((double)(m_DynamicChirpConfigParams.Chirp17R3IdleTimeVar * 100f))) | (int)((ushort)Math.Round((double)(m_DynamicChirpConfigParams.Chirp17R3ADCStartTimeVar * 100f))) << 16);
            DynamicChirpConfigurationParam.Chirp6R3 = (uint)((int)((ushort)Math.Round((double)(m_DynamicChirpConfigParams.Chirp18R3IdleTimeVar * 100f))) | (int)((ushort)Math.Round((double)(m_DynamicChirpConfigParams.Chirp18R3ADCStartTimeVar * 100f))) << 16);
            DynamicChirpConfigurationParam.Chirp7R1 = (uint)((int)((ushort)Math.Round((double)(m_DynamicChirpConfigParams.Chirp19R3IdleTimeVar * 100f))) | (int)((ushort)Math.Round((double)(m_DynamicChirpConfigParams.Chirp19R3ADCStartTimeVar * 100f))) << 16);
            DynamicChirpConfigurationParam.Chirp7R2 = (uint)((int)((ushort)Math.Round((double)(m_DynamicChirpConfigParams.Chirp20R3IdleTimeVar * 100f))) | (int)((ushort)Math.Round((double)(m_DynamicChirpConfigParams.Chirp20R3ADCStartTimeVar * 100f))) << 16);
            DynamicChirpConfigurationParam.Chirp7R3 = (uint)((int)((ushort)Math.Round((double)(m_DynamicChirpConfigParams.Chirp21R3IdleTimeVar * 100f))) | (int)((ushort)Math.Round((double)(m_DynamicChirpConfigParams.Chirp21R3ADCStartTimeVar * 100f))) << 16);
            DynamicChirpConfigurationParam.Chirp8R1 = (uint)((int)((ushort)Math.Round((double)(m_DynamicChirpConfigParams.Chirp22R3IdleTimeVar * 100f))) | (int)((ushort)Math.Round((double)(m_DynamicChirpConfigParams.Chirp22R3ADCStartTimeVar * 100f))) << 16);
            DynamicChirpConfigurationParam.Chirp8R2 = (uint)((int)((ushort)Math.Round((double)(m_DynamicChirpConfigParams.Chirp23R3IdleTimeVar * 100f))) | (int)((ushort)Math.Round((double)(m_DynamicChirpConfigParams.Chirp23R3ADCStartTimeVar * 100f))) << 16);
            DynamicChirpConfigurationParam.Chirp8R3 = (uint)((int)((ushort)Math.Round((double)(m_DynamicChirpConfigParams.Chirp24R3IdleTimeVar * 100f))) | (int)((ushort)Math.Round((double)(m_DynamicChirpConfigParams.Chirp24R3ADCStartTimeVar * 100f))) << 16);
            DynamicChirpConfigurationParam.Chirp9R1 = (uint)((int)((ushort)Math.Round((double)(m_DynamicChirpConfigParams.Chirp25R3IdleTimeVar * 100f))) | (int)((ushort)Math.Round((double)(m_DynamicChirpConfigParams.Chirp25R3ADCStartTimeVar * 100f))) << 16);
            DynamicChirpConfigurationParam.Chirp9R2 = (uint)((int)((ushort)Math.Round((double)(m_DynamicChirpConfigParams.Chirp26R3IdleTimeVar * 100f))) | (int)((ushort)Math.Round((double)(m_DynamicChirpConfigParams.Chirp26R3ADCStartTimeVar * 100f))) << 16);
            DynamicChirpConfigurationParam.Chirp9R3 = (uint)((int)((ushort)Math.Round((double)(m_DynamicChirpConfigParams.Chirp27R3IdleTimeVar * 100f))) | (int)((ushort)Math.Round((double)(m_DynamicChirpConfigParams.Chirp27R3ADCStartTimeVar * 100f))) << 16);
            DynamicChirpConfigurationParam.Chirp10R1 = (uint)((int)((ushort)Math.Round((double)(m_DynamicChirpConfigParams.Chirp28R3IdleTimeVar * 100f))) | (int)((ushort)Math.Round((double)(m_DynamicChirpConfigParams.Chirp28R3ADCStartTimeVar * 100f))) << 16);
            DynamicChirpConfigurationParam.Chirp10R2 = (uint)((int)((ushort)Math.Round((double)(m_DynamicChirpConfigParams.Chirp29R3IdleTimeVar * 100f))) | (int)((ushort)Math.Round((double)(m_DynamicChirpConfigParams.Chirp29R3ADCStartTimeVar * 100f))) << 16);
            DynamicChirpConfigurationParam.Chirp10R3 = (uint)((int)((ushort)Math.Round((double)(m_DynamicChirpConfigParams.Chirp30R3IdleTimeVar * 100f))) | (int)((ushort)Math.Round((double)(m_DynamicChirpConfigParams.Chirp30R3ADCStartTimeVar * 100f))) << 16);
            DynamicChirpConfigurationParam.Chirp11R1 = (uint)((int)((ushort)Math.Round((double)(m_DynamicChirpConfigParams.Chirp31R3IdleTimeVar * 100f))) | (int)((ushort)Math.Round((double)(m_DynamicChirpConfigParams.Chirp31R3ADCStartTimeVar * 100f))) << 16);
            DynamicChirpConfigurationParam.Chirp11R2 = (uint)((int)((ushort)Math.Round((double)(m_DynamicChirpConfigParams.Chirp32R3IdleTimeVar * 100f))) | (int)((ushort)Math.Round((double)(m_DynamicChirpConfigParams.Chirp32R3ADCStartTimeVar * 100f))) << 16);
            DynamicChirpConfigurationParam.Chirp11R3 = (uint)((int)((ushort)Math.Round((double)(m_DynamicChirpConfigParams.Chirp33R3IdleTimeVar * 100f))) | (int)((ushort)Math.Round((double)(m_DynamicChirpConfigParams.Chirp33R3ADCStartTimeVar * 100f))) << 16);
            DynamicChirpConfigurationParam.Chirp12R1 = (uint)((int)((ushort)Math.Round((double)(m_DynamicChirpConfigParams.Chirp34R3IdleTimeVar * 100f))) | (int)((ushort)Math.Round((double)(m_DynamicChirpConfigParams.Chirp34R3ADCStartTimeVar * 100f))) << 16);
            DynamicChirpConfigurationParam.Chirp12R2 = (uint)((int)((ushort)Math.Round((double)(m_DynamicChirpConfigParams.Chirp35R3IdleTimeVar * 100f))) | (int)((ushort)Math.Round((double)(m_DynamicChirpConfigParams.Chirp35R3ADCStartTimeVar * 100f))) << 16);
            DynamicChirpConfigurationParam.Chirp12R3 = (uint)((int)((ushort)Math.Round((double)(m_DynamicChirpConfigParams.Chirp36R3IdleTimeVar * 100f))) | (int)((ushort)Math.Round((double)(m_DynamicChirpConfigParams.Chirp36R3ADCStartTimeVar * 100f))) << 16);
            DynamicChirpConfigurationParam.Chirp13R1 = (uint)((int)((ushort)Math.Round((double)(m_DynamicChirpConfigParams.Chirp37R3IdleTimeVar * 100f))) | (int)((ushort)Math.Round((double)(m_DynamicChirpConfigParams.Chirp37R3ADCStartTimeVar * 100f))) << 16);
            DynamicChirpConfigurationParam.Chirp13R2 = (uint)((int)((ushort)Math.Round((double)(m_DynamicChirpConfigParams.Chirp38R3IdleTimeVar * 100f))) | (int)((ushort)Math.Round((double)(m_DynamicChirpConfigParams.Chirp38R3ADCStartTimeVar * 100f))) << 16);
            DynamicChirpConfigurationParam.Chirp13R3 = (uint)((int)((ushort)Math.Round((double)(m_DynamicChirpConfigParams.Chirp39R3IdleTimeVar * 100f))) | (int)((ushort)Math.Round((double)(m_DynamicChirpConfigParams.Chirp39R3ADCStartTimeVar * 100f))) << 16);
            DynamicChirpConfigurationParam.Chirp14R1 = (uint)((int)((ushort)Math.Round((double)(m_DynamicChirpConfigParams.Chirp40R3IdleTimeVar * 100f))) | (int)((ushort)Math.Round((double)(m_DynamicChirpConfigParams.Chirp40R3ADCStartTimeVar * 100f))) << 16);
            DynamicChirpConfigurationParam.Chirp14R2 = (uint)((int)((ushort)Math.Round((double)(m_DynamicChirpConfigParams.Chirp41R3IdleTimeVar * 100f))) | (int)((ushort)Math.Round((double)(m_DynamicChirpConfigParams.Chirp41R3ADCStartTimeVar * 100f))) << 16);
            DynamicChirpConfigurationParam.Chirp14R3 = (uint)((int)((ushort)Math.Round((double)(m_DynamicChirpConfigParams.Chirp42R3IdleTimeVar * 100f))) | (int)((ushort)Math.Round((double)(m_DynamicChirpConfigParams.Chirp42R3ADCStartTimeVar * 100f))) << 16);
            DynamicChirpConfigurationParam.Chirp15R1 = (uint)((int)((ushort)Math.Round((double)(m_DynamicChirpConfigParams.Chirp43R3IdleTimeVar * 100f))) | (int)((ushort)Math.Round((double)(m_DynamicChirpConfigParams.Chirp43R3ADCStartTimeVar * 100f))) << 16);
            DynamicChirpConfigurationParam.Chirp15R2 = (uint)((int)((ushort)Math.Round((double)(m_DynamicChirpConfigParams.Chirp44R3IdleTimeVar * 100f))) | (int)((ushort)Math.Round((double)(m_DynamicChirpConfigParams.Chirp44R3ADCStartTimeVar * 100f))) << 16);
            DynamicChirpConfigurationParam.Chirp15R3 = (uint)((int)((ushort)Math.Round((double)(m_DynamicChirpConfigParams.Chirp45R3IdleTimeVar * 100f))) | (int)((ushort)Math.Round((double)(m_DynamicChirpConfigParams.Chirp45R3ADCStartTimeVar * 100f))) << 16);
            DynamicChirpConfigurationParam.Chirp16R1 = (uint)((int)((ushort)Math.Round((double)(m_DynamicChirpConfigParams.Chirp46R3IdleTimeVar * 100f))) | (int)((ushort)Math.Round((double)(m_DynamicChirpConfigParams.Chirp46R3ADCStartTimeVar * 100f))) << 16);
            DynamicChirpConfigurationParam.Chirp16R2 = (uint)((int)((ushort)Math.Round((double)(m_DynamicChirpConfigParams.Chirp47R3IdleTimeVar * 100f))) | (int)((ushort)Math.Round((double)(m_DynamicChirpConfigParams.Chirp47R3ADCStartTimeVar * 100f))) << 16);
            DynamicChirpConfigurationParam.Chirp16R3 = (uint)((int)((ushort)Math.Round((double)(m_DynamicChirpConfigParams.Chirp48R3IdleTimeVar * 100f))) | (int)((ushort)Math.Round((double)(m_DynamicChirpConfigParams.Chirp48R3ADCStartTimeVar * 100f))) << 16);
        }

        public void UpdateDynChirpRow3_JSON(int devInd, int chirpSegInd)
        {
            GlobalRef.jobject.mmWaveDevices[devInd].rfConfig.rlDynChirpCfgs[chirpSegInd].rlDynChirpCfg_t.rlChirpRows[0].rlChirpRow_t.chirpNR3 = "0x" + DynamicChirpConfigurationParam.Chirp1R1.ToString();
            GlobalRef.jobject.mmWaveDevices[devInd].rfConfig.rlDynChirpCfgs[chirpSegInd].rlDynChirpCfg_t.rlChirpRows[1].rlChirpRow_t.chirpNR3 = "0x" + DynamicChirpConfigurationParam.Chirp1R2.ToString();
            GlobalRef.jobject.mmWaveDevices[devInd].rfConfig.rlDynChirpCfgs[chirpSegInd].rlDynChirpCfg_t.rlChirpRows[2].rlChirpRow_t.chirpNR3 = "0x" + DynamicChirpConfigurationParam.Chirp1R3.ToString();
            GlobalRef.jobject.mmWaveDevices[devInd].rfConfig.rlDynChirpCfgs[chirpSegInd].rlDynChirpCfg_t.rlChirpRows[3].rlChirpRow_t.chirpNR3 = "0x" + DynamicChirpConfigurationParam.Chirp2R1.ToString();
            GlobalRef.jobject.mmWaveDevices[devInd].rfConfig.rlDynChirpCfgs[chirpSegInd].rlDynChirpCfg_t.rlChirpRows[4].rlChirpRow_t.chirpNR3 = "0x" + DynamicChirpConfigurationParam.Chirp2R2.ToString();
            GlobalRef.jobject.mmWaveDevices[devInd].rfConfig.rlDynChirpCfgs[chirpSegInd].rlDynChirpCfg_t.rlChirpRows[5].rlChirpRow_t.chirpNR3 = "0x" + DynamicChirpConfigurationParam.Chirp2R3.ToString();
            GlobalRef.jobject.mmWaveDevices[devInd].rfConfig.rlDynChirpCfgs[chirpSegInd].rlDynChirpCfg_t.rlChirpRows[6].rlChirpRow_t.chirpNR3 = "0x" + DynamicChirpConfigurationParam.Chirp3R1.ToString();
            GlobalRef.jobject.mmWaveDevices[devInd].rfConfig.rlDynChirpCfgs[chirpSegInd].rlDynChirpCfg_t.rlChirpRows[7].rlChirpRow_t.chirpNR3 = "0x" + DynamicChirpConfigurationParam.Chirp3R2.ToString();
            GlobalRef.jobject.mmWaveDevices[devInd].rfConfig.rlDynChirpCfgs[chirpSegInd].rlDynChirpCfg_t.rlChirpRows[8].rlChirpRow_t.chirpNR3 = "0x" + DynamicChirpConfigurationParam.Chirp3R3.ToString();
            GlobalRef.jobject.mmWaveDevices[devInd].rfConfig.rlDynChirpCfgs[chirpSegInd].rlDynChirpCfg_t.rlChirpRows[9].rlChirpRow_t.chirpNR3 = "0x" + DynamicChirpConfigurationParam.Chirp4R1.ToString();
            GlobalRef.jobject.mmWaveDevices[devInd].rfConfig.rlDynChirpCfgs[chirpSegInd].rlDynChirpCfg_t.rlChirpRows[10].rlChirpRow_t.chirpNR3 = "0x" + DynamicChirpConfigurationParam.Chirp4R2.ToString();
            GlobalRef.jobject.mmWaveDevices[devInd].rfConfig.rlDynChirpCfgs[chirpSegInd].rlDynChirpCfg_t.rlChirpRows[11].rlChirpRow_t.chirpNR3 = "0x" + DynamicChirpConfigurationParam.Chirp4R3.ToString();
            GlobalRef.jobject.mmWaveDevices[devInd].rfConfig.rlDynChirpCfgs[chirpSegInd].rlDynChirpCfg_t.rlChirpRows[12].rlChirpRow_t.chirpNR3 = "0x" + DynamicChirpConfigurationParam.Chirp5R1.ToString();
            GlobalRef.jobject.mmWaveDevices[devInd].rfConfig.rlDynChirpCfgs[chirpSegInd].rlDynChirpCfg_t.rlChirpRows[13].rlChirpRow_t.chirpNR3 = "0x" + DynamicChirpConfigurationParam.Chirp5R2.ToString();
            GlobalRef.jobject.mmWaveDevices[devInd].rfConfig.rlDynChirpCfgs[chirpSegInd].rlDynChirpCfg_t.rlChirpRows[14].rlChirpRow_t.chirpNR3 = "0x" + DynamicChirpConfigurationParam.Chirp5R3.ToString();
            GlobalRef.jobject.mmWaveDevices[devInd].rfConfig.rlDynChirpCfgs[chirpSegInd].rlDynChirpCfg_t.rlChirpRows[15].rlChirpRow_t.chirpNR3 = "0x" + DynamicChirpConfigurationParam.Chirp6R1.ToString();
            GlobalRef.jobject.mmWaveDevices[devInd].rfConfig.rlDynChirpCfgs[chirpSegInd].rlDynChirpCfg_t.rlChirpRows[16].rlChirpRow_t.chirpNR3 = "0x" + DynamicChirpConfigurationParam.Chirp6R2.ToString();
            GlobalRef.jobject.mmWaveDevices[devInd].rfConfig.rlDynChirpCfgs[chirpSegInd].rlDynChirpCfg_t.rlChirpRows[17].rlChirpRow_t.chirpNR3 = "0x" + DynamicChirpConfigurationParam.Chirp6R3.ToString();
            GlobalRef.jobject.mmWaveDevices[devInd].rfConfig.rlDynChirpCfgs[chirpSegInd].rlDynChirpCfg_t.rlChirpRows[18].rlChirpRow_t.chirpNR3 = "0x" + DynamicChirpConfigurationParam.Chirp7R1.ToString();
            GlobalRef.jobject.mmWaveDevices[devInd].rfConfig.rlDynChirpCfgs[chirpSegInd].rlDynChirpCfg_t.rlChirpRows[19].rlChirpRow_t.chirpNR3 = "0x" + DynamicChirpConfigurationParam.Chirp7R2.ToString();
            GlobalRef.jobject.mmWaveDevices[devInd].rfConfig.rlDynChirpCfgs[chirpSegInd].rlDynChirpCfg_t.rlChirpRows[20].rlChirpRow_t.chirpNR3 = "0x" + DynamicChirpConfigurationParam.Chirp7R3.ToString();
            GlobalRef.jobject.mmWaveDevices[devInd].rfConfig.rlDynChirpCfgs[chirpSegInd].rlDynChirpCfg_t.rlChirpRows[21].rlChirpRow_t.chirpNR3 = "0x" + DynamicChirpConfigurationParam.Chirp8R1.ToString();
            GlobalRef.jobject.mmWaveDevices[devInd].rfConfig.rlDynChirpCfgs[chirpSegInd].rlDynChirpCfg_t.rlChirpRows[22].rlChirpRow_t.chirpNR3 = "0x" + DynamicChirpConfigurationParam.Chirp8R2.ToString();
            GlobalRef.jobject.mmWaveDevices[devInd].rfConfig.rlDynChirpCfgs[chirpSegInd].rlDynChirpCfg_t.rlChirpRows[23].rlChirpRow_t.chirpNR3 = "0x" + DynamicChirpConfigurationParam.Chirp8R3.ToString();
            GlobalRef.jobject.mmWaveDevices[devInd].rfConfig.rlDynChirpCfgs[chirpSegInd].rlDynChirpCfg_t.rlChirpRows[24].rlChirpRow_t.chirpNR3 = "0x" + DynamicChirpConfigurationParam.Chirp9R1.ToString();
            GlobalRef.jobject.mmWaveDevices[devInd].rfConfig.rlDynChirpCfgs[chirpSegInd].rlDynChirpCfg_t.rlChirpRows[25].rlChirpRow_t.chirpNR3 = "0x" + DynamicChirpConfigurationParam.Chirp9R2.ToString();
            GlobalRef.jobject.mmWaveDevices[devInd].rfConfig.rlDynChirpCfgs[chirpSegInd].rlDynChirpCfg_t.rlChirpRows[26].rlChirpRow_t.chirpNR3 = "0x" + DynamicChirpConfigurationParam.Chirp9R3.ToString();
            GlobalRef.jobject.mmWaveDevices[devInd].rfConfig.rlDynChirpCfgs[chirpSegInd].rlDynChirpCfg_t.rlChirpRows[27].rlChirpRow_t.chirpNR3 = "0x" + DynamicChirpConfigurationParam.Chirp10R1.ToString();
            GlobalRef.jobject.mmWaveDevices[devInd].rfConfig.rlDynChirpCfgs[chirpSegInd].rlDynChirpCfg_t.rlChirpRows[28].rlChirpRow_t.chirpNR3 = "0x" + DynamicChirpConfigurationParam.Chirp10R2.ToString();
            GlobalRef.jobject.mmWaveDevices[devInd].rfConfig.rlDynChirpCfgs[chirpSegInd].rlDynChirpCfg_t.rlChirpRows[29].rlChirpRow_t.chirpNR3 = "0x" + DynamicChirpConfigurationParam.Chirp10R3.ToString();
            GlobalRef.jobject.mmWaveDevices[devInd].rfConfig.rlDynChirpCfgs[chirpSegInd].rlDynChirpCfg_t.rlChirpRows[30].rlChirpRow_t.chirpNR3 = "0x" + DynamicChirpConfigurationParam.Chirp11R1.ToString();
            GlobalRef.jobject.mmWaveDevices[devInd].rfConfig.rlDynChirpCfgs[chirpSegInd].rlDynChirpCfg_t.rlChirpRows[31].rlChirpRow_t.chirpNR3 = "0x" + DynamicChirpConfigurationParam.Chirp11R2.ToString();
            GlobalRef.jobject.mmWaveDevices[devInd].rfConfig.rlDynChirpCfgs[chirpSegInd].rlDynChirpCfg_t.rlChirpRows[32].rlChirpRow_t.chirpNR3 = "0x" + DynamicChirpConfigurationParam.Chirp11R3.ToString();
            GlobalRef.jobject.mmWaveDevices[devInd].rfConfig.rlDynChirpCfgs[chirpSegInd].rlDynChirpCfg_t.rlChirpRows[33].rlChirpRow_t.chirpNR3 = "0x" + DynamicChirpConfigurationParam.Chirp12R1.ToString();
            GlobalRef.jobject.mmWaveDevices[devInd].rfConfig.rlDynChirpCfgs[chirpSegInd].rlDynChirpCfg_t.rlChirpRows[34].rlChirpRow_t.chirpNR3 = "0x" + DynamicChirpConfigurationParam.Chirp12R2.ToString();
            GlobalRef.jobject.mmWaveDevices[devInd].rfConfig.rlDynChirpCfgs[chirpSegInd].rlDynChirpCfg_t.rlChirpRows[35].rlChirpRow_t.chirpNR3 = "0x" + DynamicChirpConfigurationParam.Chirp12R3.ToString();
            GlobalRef.jobject.mmWaveDevices[devInd].rfConfig.rlDynChirpCfgs[chirpSegInd].rlDynChirpCfg_t.rlChirpRows[36].rlChirpRow_t.chirpNR3 = "0x" + DynamicChirpConfigurationParam.Chirp13R1.ToString();
            GlobalRef.jobject.mmWaveDevices[devInd].rfConfig.rlDynChirpCfgs[chirpSegInd].rlDynChirpCfg_t.rlChirpRows[37].rlChirpRow_t.chirpNR3 = "0x" + DynamicChirpConfigurationParam.Chirp13R2.ToString();
            GlobalRef.jobject.mmWaveDevices[devInd].rfConfig.rlDynChirpCfgs[chirpSegInd].rlDynChirpCfg_t.rlChirpRows[38].rlChirpRow_t.chirpNR3 = "0x" + DynamicChirpConfigurationParam.Chirp13R3.ToString();
            GlobalRef.jobject.mmWaveDevices[devInd].rfConfig.rlDynChirpCfgs[chirpSegInd].rlDynChirpCfg_t.rlChirpRows[39].rlChirpRow_t.chirpNR3 = "0x" + DynamicChirpConfigurationParam.Chirp14R1.ToString();
            GlobalRef.jobject.mmWaveDevices[devInd].rfConfig.rlDynChirpCfgs[chirpSegInd].rlDynChirpCfg_t.rlChirpRows[40].rlChirpRow_t.chirpNR3 = "0x" + DynamicChirpConfigurationParam.Chirp14R2.ToString();
            GlobalRef.jobject.mmWaveDevices[devInd].rfConfig.rlDynChirpCfgs[chirpSegInd].rlDynChirpCfg_t.rlChirpRows[41].rlChirpRow_t.chirpNR3 = "0x" + DynamicChirpConfigurationParam.Chirp14R3.ToString();
            GlobalRef.jobject.mmWaveDevices[devInd].rfConfig.rlDynChirpCfgs[chirpSegInd].rlDynChirpCfg_t.rlChirpRows[42].rlChirpRow_t.chirpNR3 = "0x" + DynamicChirpConfigurationParam.Chirp15R1.ToString();
            GlobalRef.jobject.mmWaveDevices[devInd].rfConfig.rlDynChirpCfgs[chirpSegInd].rlDynChirpCfg_t.rlChirpRows[43].rlChirpRow_t.chirpNR3 = "0x" + DynamicChirpConfigurationParam.Chirp15R2.ToString();
            GlobalRef.jobject.mmWaveDevices[devInd].rfConfig.rlDynChirpCfgs[chirpSegInd].rlDynChirpCfg_t.rlChirpRows[44].rlChirpRow_t.chirpNR3 = "0x" + DynamicChirpConfigurationParam.Chirp15R3.ToString();
            GlobalRef.jobject.mmWaveDevices[devInd].rfConfig.rlDynChirpCfgs[chirpSegInd].rlDynChirpCfg_t.rlChirpRows[45].rlChirpRow_t.chirpNR3 = "0x" + DynamicChirpConfigurationParam.Chirp16R1.ToString();
            GlobalRef.jobject.mmWaveDevices[devInd].rfConfig.rlDynChirpCfgs[chirpSegInd].rlDynChirpCfg_t.rlChirpRows[46].rlChirpRow_t.chirpNR3 = "0x" + DynamicChirpConfigurationParam.Chirp16R2.ToString();
            GlobalRef.jobject.mmWaveDevices[devInd].rfConfig.rlDynChirpCfgs[chirpSegInd].rlDynChirpCfg_t.rlChirpRows[47].rlChirpRow_t.chirpNR3 = "0x" + DynamicChirpConfigurationParam.Chirp16R3.ToString();
        }

        private int iDynamicChirpConfig_Impl(bool is_starting_op, bool is_ending_op)
        {
            if (GlobalRef.lua_method == 0)
            {
                DynamicChirpConfigurationParam.ChirpRowSelect = (byte)(m_DynamicChirpConfigParams.ChirpRowSelect << 4);
                DynamicChirpConfigurationParam.ChirpSegmentSelect = (byte)((char)m_DynamicChirpConfigParams.ChirpSegmentSelect | m_MonSynthFreqLinearityConfigParams.Profile1Index << 1 | m_MonSynthFreqLinearityConfigParams.Profile2Index << 2 | m_MonSynthFreqLinearityConfigParams.Profile3Index << 3);
                DynamicChirpConfigurationParam.ProgramMode = m_DynamicChirpConfigParams.ProgramMode;
                switch (m_DynamicChirpConfigParams.ChirpRowSelect)
                {
                    case 0:
                        UpdateDynChirpAllRow();
                        break;
                    case 1:
                        UpdateDynChirpRow1();
                        break;
                    case 2:
                        UpdateDynChirpRow2();
                        break;
                    case 3:
                        UpdateDynChirpRow3();
                        break;
                    default:
                        UpdateDynChirpAllRow();
                        break;
                }
            }
            IntPtr pDynamicChirpCfgHandler = GCHandle.Alloc(DynamicChirpConfigurationParam, GCHandleType.Pinned).AddrOfPinnedObject();
            DynamicChirpCfgHandlerParam.pDynamicChirpCfgHandler = pDynamicChirpCfgHandler;
            IntPtr inData = GCHandle.Alloc(DynamicChirpCfgHandlerParam, GCHandleType.Pinned).AddrOfPinnedObject();
            int num;
            if (GlobalRef.g_NtvRS232Connect[(int)GlobalRef.g_RadarDeviceIndex] && GlobalRef.g_CasCadeDeviceSpiConnect == 0U)
            {
                num = m_TsWrapper.Calling_WriteAddr_Single(4294959848U, 1U);
                if (m_GuiManager.DllOps.itempDisconnect(false) == 0)
                {
                    string full_command = string.Format("Debug Port Disconnected", new object[0]);
                    m_GuiManager.RecordLog(0, full_command);
                    if (!GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
                    {
                        iRs232ConnectDisconnect_impl();
                    }
                }
            }
            Thread.Sleep(200);
            if (m_RadarDeviceModeConfigParams.NumberOfRadarDevicesDetected <= 1)
            {
                string full_command2 = string.Format("ar1.DynChirpCfgSet({0}, {1}, {2}, {3}, {4}, {5}, {6}, {7}, {8}, {9}, {10}, {11}, {12}, {13}, {14}, {15}, {16},{17}, {18}, {19}, {20}, {21}, {22}, {23}, {24}, {25}, {26}, {27}, {28}, {29}, {30}, {31}, {32},{33}, {34}, {35}, {36}, {37}, {38}, {39}, {40}, {41}, {42}, {43}, {44}, {45}, {46}, {47}, {48},{49}, {50})", new object[]
                {
                    DynamicChirpConfigurationParam.ChirpRowSelect,
                    DynamicChirpConfigurationParam.ChirpSegmentSelect,
                    DynamicChirpConfigurationParam.ProgramMode,
                    DynamicChirpConfigurationParam.Chirp1R1,
                    DynamicChirpConfigurationParam.Chirp1R2,
                    DynamicChirpConfigurationParam.Chirp1R3,
                    DynamicChirpConfigurationParam.Chirp2R1,
                    DynamicChirpConfigurationParam.Chirp2R2,
                    DynamicChirpConfigurationParam.Chirp2R3,
                    DynamicChirpConfigurationParam.Chirp3R1,
                    DynamicChirpConfigurationParam.Chirp3R2,
                    DynamicChirpConfigurationParam.Chirp3R3,
                    DynamicChirpConfigurationParam.Chirp4R1,
                    DynamicChirpConfigurationParam.Chirp4R2,
                    DynamicChirpConfigurationParam.Chirp4R3,
                    DynamicChirpConfigurationParam.Chirp5R1,
                    DynamicChirpConfigurationParam.Chirp5R2,
                    DynamicChirpConfigurationParam.Chirp5R3,
                    DynamicChirpConfigurationParam.Chirp6R1,
                    DynamicChirpConfigurationParam.Chirp6R2,
                    DynamicChirpConfigurationParam.Chirp6R3,
                    DynamicChirpConfigurationParam.Chirp7R1,
                    DynamicChirpConfigurationParam.Chirp7R2,
                    DynamicChirpConfigurationParam.Chirp7R3,
                    DynamicChirpConfigurationParam.Chirp8R1,
                    DynamicChirpConfigurationParam.Chirp8R2,
                    DynamicChirpConfigurationParam.Chirp8R3,
                    DynamicChirpConfigurationParam.Chirp9R1,
                    DynamicChirpConfigurationParam.Chirp9R2,
                    DynamicChirpConfigurationParam.Chirp9R3,
                    DynamicChirpConfigurationParam.Chirp10R1,
                    DynamicChirpConfigurationParam.Chirp10R2,
                    DynamicChirpConfigurationParam.Chirp10R3,
                    DynamicChirpConfigurationParam.Chirp11R1,
                    DynamicChirpConfigurationParam.Chirp11R2,
                    DynamicChirpConfigurationParam.Chirp11R3,
                    DynamicChirpConfigurationParam.Chirp12R1,
                    DynamicChirpConfigurationParam.Chirp12R2,
                    DynamicChirpConfigurationParam.Chirp12R3,
                    DynamicChirpConfigurationParam.Chirp13R1,
                    DynamicChirpConfigurationParam.Chirp13R2,
                    DynamicChirpConfigurationParam.Chirp13R3,
                    DynamicChirpConfigurationParam.Chirp14R1,
                    DynamicChirpConfigurationParam.Chirp14R2,
                    DynamicChirpConfigurationParam.Chirp14R3,
                    DynamicChirpConfigurationParam.Chirp15R1,
                    DynamicChirpConfigurationParam.Chirp15R2,
                    DynamicChirpConfigurationParam.Chirp15R3,
                    DynamicChirpConfigurationParam.Chirp16R1,
                    DynamicChirpConfigurationParam.Chirp16R2,
                    DynamicChirpConfigurationParam.Chirp16R3
                });
                m_GuiManager.RecordLog(15, full_command2);
            }
            else
            {
                string full_command3 = string.Format("ar1.DynChirpCfgSet_mult({0}, {1}, {2}, {3}, {4}, {5}, {6}, {7}, {8}, {9}, {10}, {11}, {12}, {13}, {14}, {15}, {16},{17}, {18}, {19}, {20}, {21}, {22}, {23}, {24}, {25}, {26}, {27}, {28}, {29}, {30}, {31}, {32},{33}, {34}, {35}, {36}, {37}, {38}, {39}, {40}, {41}, {42}, {43}, {44}, {45}, {46}, {47}, {48},{49}, {50}, {51})", new object[]
                {
                    GlobalRef.g_RadarDeviceId,
                    DynamicChirpConfigurationParam.ChirpRowSelect,
                    DynamicChirpConfigurationParam.ChirpSegmentSelect,
                    DynamicChirpConfigurationParam.ProgramMode,
                    DynamicChirpConfigurationParam.Chirp1R1,
                    DynamicChirpConfigurationParam.Chirp1R2,
                    DynamicChirpConfigurationParam.Chirp1R3,
                    DynamicChirpConfigurationParam.Chirp2R1,
                    DynamicChirpConfigurationParam.Chirp2R2,
                    DynamicChirpConfigurationParam.Chirp2R3,
                    DynamicChirpConfigurationParam.Chirp3R1,
                    DynamicChirpConfigurationParam.Chirp3R2,
                    DynamicChirpConfigurationParam.Chirp3R3,
                    DynamicChirpConfigurationParam.Chirp4R1,
                    DynamicChirpConfigurationParam.Chirp4R2,
                    DynamicChirpConfigurationParam.Chirp4R3,
                    DynamicChirpConfigurationParam.Chirp5R1,
                    DynamicChirpConfigurationParam.Chirp5R2,
                    DynamicChirpConfigurationParam.Chirp5R3,
                    DynamicChirpConfigurationParam.Chirp6R1,
                    DynamicChirpConfigurationParam.Chirp6R2,
                    DynamicChirpConfigurationParam.Chirp6R3,
                    DynamicChirpConfigurationParam.Chirp7R1,
                    DynamicChirpConfigurationParam.Chirp7R2,
                    DynamicChirpConfigurationParam.Chirp7R3,
                    DynamicChirpConfigurationParam.Chirp8R1,
                    DynamicChirpConfigurationParam.Chirp8R2,
                    DynamicChirpConfigurationParam.Chirp8R3,
                    DynamicChirpConfigurationParam.Chirp9R1,
                    DynamicChirpConfigurationParam.Chirp9R2,
                    DynamicChirpConfigurationParam.Chirp9R3,
                    DynamicChirpConfigurationParam.Chirp10R1,
                    DynamicChirpConfigurationParam.Chirp10R2,
                    DynamicChirpConfigurationParam.Chirp10R3,
                    DynamicChirpConfigurationParam.Chirp11R1,
                    DynamicChirpConfigurationParam.Chirp11R2,
                    DynamicChirpConfigurationParam.Chirp11R3,
                    DynamicChirpConfigurationParam.Chirp12R1,
                    DynamicChirpConfigurationParam.Chirp12R2,
                    DynamicChirpConfigurationParam.Chirp12R3,
                    DynamicChirpConfigurationParam.Chirp13R1,
                    DynamicChirpConfigurationParam.Chirp13R2,
                    DynamicChirpConfigurationParam.Chirp13R3,
                    DynamicChirpConfigurationParam.Chirp14R1,
                    DynamicChirpConfigurationParam.Chirp14R2,
                    DynamicChirpConfigurationParam.Chirp14R3,
                    DynamicChirpConfigurationParam.Chirp15R1,
                    DynamicChirpConfigurationParam.Chirp15R2,
                    DynamicChirpConfigurationParam.Chirp15R3,
                    DynamicChirpConfigurationParam.Chirp16R1,
                    DynamicChirpConfigurationParam.Chirp16R2,
                    DynamicChirpConfigurationParam.Chirp16R3
                });
                m_GuiManager.RecordLog(15, full_command3);
            }
            uint g_RadarDeviceId = GlobalRef.g_RadarDeviceId;
            num = Imports.RadarLinkImpl_SetDynChirpCfg((byte)GlobalRef.g_RadarDeviceId, 1, inData);
            if ((num == 0 && ((GlobalRef.g_CasCadeDeviceSpiConnect & 1U) == 1U || (GlobalRef.g_CasCadeDeviceSpiConnect & 2U) == 2U || (GlobalRef.g_CasCadeDeviceSpiConnect & 4U) == 4U || (GlobalRef.g_CasCadeDeviceSpiConnect & 8U) == 8U)) || GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
            {
                string full_command4 = string.Format("Status: Passed", new object[0]);
                m_GuiManager.RecordLog(8, full_command4);
                for (int i = 0; i < 4; i++)
                {
                    if (jsonConfigInProgress)
                    {
                        break;
                    }
                    if (((ulong)g_RadarDeviceId & (ulong)(1L << (i & 31))) != 0UL)
                    {
                        int mmwaveDevIndex = getMmwaveDevIndex(i);
                        int j = 0;
                        while (j < GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlDynChirpCfgs.Count)
                        {
                            if ((int)m_DynamicChirpConfigParams.ChirpSegmentSelect == GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlDynChirpCfgs[j].rlDynChirpCfg_t.chirpSegSel && (int)m_DynamicChirpConfigParams.ChirpRowSelect == GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlDynChirpCfgs[j].rlDynChirpCfg_t.chirpRowSel)
                            {
                                GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlDynChirpCfgs[j].rlDynChirpCfg_t.chirpSegSel = (int)m_DynamicChirpConfigParams.ChirpSegmentSelect;
                                GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlDynChirpCfgs[j].rlDynChirpCfg_t.chirpRowSel = (int)m_DynamicChirpConfigParams.ChirpRowSelect;
                                switch (m_DynamicChirpConfigParams.ChirpRowSelect)
                                {
                                    case 0:
                                        UpdateDynChirpAllRow_JSON(mmwaveDevIndex, j);
                                        goto IL_E4D;
                                    case 1:
                                        UpdateDynChirpRow1_JSON(mmwaveDevIndex, j);
                                        goto IL_E4D;
                                    case 2:
                                        UpdateDynChirpRow2_JSON(mmwaveDevIndex, j);
                                        goto IL_E4D;
                                    case 3:
                                        UpdateDynChirpRow3_JSON(mmwaveDevIndex, j);
                                        goto IL_E4D;
                                    default:
                                        UpdateDynChirpAllRow_JSON(mmwaveDevIndex, j);
                                        goto IL_E4D;
                                }
                            }
                            else
                            {
                                j++;
                            }
                        }
                    IL_E4D:
                        if (j == GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlDynChirpCfgs.Count)
                        {
                            if (m_DynamicChirpConfigParams.ChirpRowSelect == 0)
                            {
                                GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlDynChirpCfgs.Add(new RlDynChirpCfgs());
                                GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlDynChirpCfgs[j].rlDynChirpCfg_t = new RlDynChirpCfgT();
                                GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlDynChirpCfgs[j].rlDynChirpCfg_t.rlChirpRows = new List<RlChirpRows>();
                                for (int k = 0; k < 16; k++)
                                {
                                    GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlDynChirpCfgs[j].rlDynChirpCfg_t.rlChirpRows.Add(new RlChirpRows());
                                    GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlDynChirpCfgs[j].rlDynChirpCfg_t.rlChirpRows[k].rlChirpRow_t = new RlChirpRowT();
                                }
                                GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlDynChirpCfgs[j].rlDynChirpCfg_t.chirpSegSel = (int)m_DynamicChirpConfigParams.ChirpSegmentSelect;
                                GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlDynChirpCfgs[j].rlDynChirpCfg_t.chirpRowSel = (int)m_DynamicChirpConfigParams.ChirpRowSelect;
                                GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlDynChirpCfgs[j].rlDynChirpCfg_t.rlChirpRows[0].rlChirpRow_t.chirpNR1 = "0x" + DynamicChirpConfigurationParam.Chirp1R1.ToString();
                                GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlDynChirpCfgs[j].rlDynChirpCfg_t.rlChirpRows[0].rlChirpRow_t.chirpNR2 = "0x" + DynamicChirpConfigurationParam.Chirp1R2.ToString();
                                GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlDynChirpCfgs[j].rlDynChirpCfg_t.rlChirpRows[0].rlChirpRow_t.chirpNR3 = "0x" + DynamicChirpConfigurationParam.Chirp1R3.ToString();
                                GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlDynChirpCfgs[j].rlDynChirpCfg_t.rlChirpRows[1].rlChirpRow_t.chirpNR1 = "0x" + DynamicChirpConfigurationParam.Chirp2R1.ToString();
                                GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlDynChirpCfgs[j].rlDynChirpCfg_t.rlChirpRows[1].rlChirpRow_t.chirpNR2 = "0x" + DynamicChirpConfigurationParam.Chirp2R2.ToString();
                                GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlDynChirpCfgs[j].rlDynChirpCfg_t.rlChirpRows[1].rlChirpRow_t.chirpNR3 = "0x" + DynamicChirpConfigurationParam.Chirp2R3.ToString();
                                GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlDynChirpCfgs[j].rlDynChirpCfg_t.rlChirpRows[2].rlChirpRow_t.chirpNR1 = "0x" + DynamicChirpConfigurationParam.Chirp3R1.ToString();
                                GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlDynChirpCfgs[j].rlDynChirpCfg_t.rlChirpRows[2].rlChirpRow_t.chirpNR2 = "0x" + DynamicChirpConfigurationParam.Chirp3R2.ToString();
                                GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlDynChirpCfgs[j].rlDynChirpCfg_t.rlChirpRows[2].rlChirpRow_t.chirpNR3 = "0x" + DynamicChirpConfigurationParam.Chirp3R3.ToString();
                                GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlDynChirpCfgs[j].rlDynChirpCfg_t.rlChirpRows[3].rlChirpRow_t.chirpNR1 = "0x" + DynamicChirpConfigurationParam.Chirp4R1.ToString();
                                GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlDynChirpCfgs[j].rlDynChirpCfg_t.rlChirpRows[3].rlChirpRow_t.chirpNR2 = "0x" + DynamicChirpConfigurationParam.Chirp4R2.ToString();
                                GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlDynChirpCfgs[j].rlDynChirpCfg_t.rlChirpRows[3].rlChirpRow_t.chirpNR3 = "0x" + DynamicChirpConfigurationParam.Chirp4R3.ToString();
                                GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlDynChirpCfgs[j].rlDynChirpCfg_t.rlChirpRows[4].rlChirpRow_t.chirpNR1 = "0x" + DynamicChirpConfigurationParam.Chirp5R1.ToString();
                                GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlDynChirpCfgs[j].rlDynChirpCfg_t.rlChirpRows[4].rlChirpRow_t.chirpNR2 = "0x" + DynamicChirpConfigurationParam.Chirp5R2.ToString();
                                GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlDynChirpCfgs[j].rlDynChirpCfg_t.rlChirpRows[4].rlChirpRow_t.chirpNR3 = "0x" + DynamicChirpConfigurationParam.Chirp5R3.ToString();
                                GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlDynChirpCfgs[j].rlDynChirpCfg_t.rlChirpRows[5].rlChirpRow_t.chirpNR1 = "0x" + DynamicChirpConfigurationParam.Chirp6R1.ToString();
                                GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlDynChirpCfgs[j].rlDynChirpCfg_t.rlChirpRows[5].rlChirpRow_t.chirpNR2 = "0x" + DynamicChirpConfigurationParam.Chirp6R2.ToString();
                                GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlDynChirpCfgs[j].rlDynChirpCfg_t.rlChirpRows[5].rlChirpRow_t.chirpNR3 = "0x" + DynamicChirpConfigurationParam.Chirp6R3.ToString();
                                GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlDynChirpCfgs[j].rlDynChirpCfg_t.rlChirpRows[6].rlChirpRow_t.chirpNR1 = "0x" + DynamicChirpConfigurationParam.Chirp7R1.ToString();
                                GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlDynChirpCfgs[j].rlDynChirpCfg_t.rlChirpRows[6].rlChirpRow_t.chirpNR2 = "0x" + DynamicChirpConfigurationParam.Chirp7R2.ToString();
                                GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlDynChirpCfgs[j].rlDynChirpCfg_t.rlChirpRows[6].rlChirpRow_t.chirpNR3 = "0x" + DynamicChirpConfigurationParam.Chirp7R3.ToString();
                                GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlDynChirpCfgs[j].rlDynChirpCfg_t.rlChirpRows[7].rlChirpRow_t.chirpNR1 = "0x" + DynamicChirpConfigurationParam.Chirp8R1.ToString();
                                GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlDynChirpCfgs[j].rlDynChirpCfg_t.rlChirpRows[7].rlChirpRow_t.chirpNR2 = "0x" + DynamicChirpConfigurationParam.Chirp8R2.ToString();
                                GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlDynChirpCfgs[j].rlDynChirpCfg_t.rlChirpRows[7].rlChirpRow_t.chirpNR3 = "0x" + DynamicChirpConfigurationParam.Chirp8R3.ToString();
                                GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlDynChirpCfgs[j].rlDynChirpCfg_t.rlChirpRows[8].rlChirpRow_t.chirpNR1 = "0x" + DynamicChirpConfigurationParam.Chirp9R1.ToString();
                                GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlDynChirpCfgs[j].rlDynChirpCfg_t.rlChirpRows[8].rlChirpRow_t.chirpNR2 = "0x" + DynamicChirpConfigurationParam.Chirp9R2.ToString();
                                GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlDynChirpCfgs[j].rlDynChirpCfg_t.rlChirpRows[8].rlChirpRow_t.chirpNR3 = "0x" + DynamicChirpConfigurationParam.Chirp9R3.ToString();
                                GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlDynChirpCfgs[j].rlDynChirpCfg_t.rlChirpRows[9].rlChirpRow_t.chirpNR1 = "0x" + DynamicChirpConfigurationParam.Chirp10R1.ToString();
                                GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlDynChirpCfgs[j].rlDynChirpCfg_t.rlChirpRows[9].rlChirpRow_t.chirpNR2 = "0x" + DynamicChirpConfigurationParam.Chirp10R2.ToString();
                                GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlDynChirpCfgs[j].rlDynChirpCfg_t.rlChirpRows[9].rlChirpRow_t.chirpNR3 = "0x" + DynamicChirpConfigurationParam.Chirp10R3.ToString();
                                GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlDynChirpCfgs[j].rlDynChirpCfg_t.rlChirpRows[10].rlChirpRow_t.chirpNR1 = "0x" + DynamicChirpConfigurationParam.Chirp11R1.ToString();
                                GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlDynChirpCfgs[j].rlDynChirpCfg_t.rlChirpRows[10].rlChirpRow_t.chirpNR2 = "0x" + DynamicChirpConfigurationParam.Chirp11R2.ToString();
                                GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlDynChirpCfgs[j].rlDynChirpCfg_t.rlChirpRows[10].rlChirpRow_t.chirpNR3 = "0x" + DynamicChirpConfigurationParam.Chirp11R3.ToString();
                                GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlDynChirpCfgs[j].rlDynChirpCfg_t.rlChirpRows[11].rlChirpRow_t.chirpNR1 = "0x" + DynamicChirpConfigurationParam.Chirp12R1.ToString();
                                GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlDynChirpCfgs[j].rlDynChirpCfg_t.rlChirpRows[11].rlChirpRow_t.chirpNR2 = "0x" + DynamicChirpConfigurationParam.Chirp12R2.ToString();
                                GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlDynChirpCfgs[j].rlDynChirpCfg_t.rlChirpRows[11].rlChirpRow_t.chirpNR3 = "0x" + DynamicChirpConfigurationParam.Chirp12R3.ToString();
                                GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlDynChirpCfgs[j].rlDynChirpCfg_t.rlChirpRows[12].rlChirpRow_t.chirpNR1 = "0x" + DynamicChirpConfigurationParam.Chirp13R1.ToString();
                                GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlDynChirpCfgs[j].rlDynChirpCfg_t.rlChirpRows[12].rlChirpRow_t.chirpNR2 = "0x" + DynamicChirpConfigurationParam.Chirp13R2.ToString();
                                GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlDynChirpCfgs[j].rlDynChirpCfg_t.rlChirpRows[12].rlChirpRow_t.chirpNR3 = "0x" + DynamicChirpConfigurationParam.Chirp13R3.ToString();
                                GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlDynChirpCfgs[j].rlDynChirpCfg_t.rlChirpRows[13].rlChirpRow_t.chirpNR1 = "0x" + DynamicChirpConfigurationParam.Chirp14R1.ToString();
                                GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlDynChirpCfgs[j].rlDynChirpCfg_t.rlChirpRows[13].rlChirpRow_t.chirpNR2 = "0x" + DynamicChirpConfigurationParam.Chirp14R2.ToString();
                                GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlDynChirpCfgs[j].rlDynChirpCfg_t.rlChirpRows[13].rlChirpRow_t.chirpNR3 = "0x" + DynamicChirpConfigurationParam.Chirp14R3.ToString();
                                GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlDynChirpCfgs[j].rlDynChirpCfg_t.rlChirpRows[14].rlChirpRow_t.chirpNR1 = "0x" + DynamicChirpConfigurationParam.Chirp15R1.ToString();
                                GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlDynChirpCfgs[j].rlDynChirpCfg_t.rlChirpRows[14].rlChirpRow_t.chirpNR2 = "0x" + DynamicChirpConfigurationParam.Chirp15R2.ToString();
                                GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlDynChirpCfgs[j].rlDynChirpCfg_t.rlChirpRows[14].rlChirpRow_t.chirpNR3 = "0x" + DynamicChirpConfigurationParam.Chirp15R3.ToString();
                                GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlDynChirpCfgs[j].rlDynChirpCfg_t.rlChirpRows[15].rlChirpRow_t.chirpNR1 = "0x" + DynamicChirpConfigurationParam.Chirp16R1.ToString();
                                GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlDynChirpCfgs[j].rlDynChirpCfg_t.rlChirpRows[15].rlChirpRow_t.chirpNR2 = "0x" + DynamicChirpConfigurationParam.Chirp16R2.ToString();
                                GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlDynChirpCfgs[j].rlDynChirpCfg_t.rlChirpRows[15].rlChirpRow_t.chirpNR3 = "0x" + DynamicChirpConfigurationParam.Chirp16R3.ToString();
                            }
                            else if (m_DynamicChirpConfigParams.ChirpRowSelect == 1)
                            {
                                GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlDynChirpCfgs.Add(new RlDynChirpCfgs());
                                GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlDynChirpCfgs[j].rlDynChirpCfg_t = new RlDynChirpCfgT();
                                GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlDynChirpCfgs[j].rlDynChirpCfg_t.rlChirpRows = new List<RlChirpRows>();
                                for (int l = 0; l < 48; l++)
                                {
                                    GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlDynChirpCfgs[j].rlDynChirpCfg_t.rlChirpRows.Add(new RlChirpRows());
                                    GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlDynChirpCfgs[j].rlDynChirpCfg_t.rlChirpRows[l].rlChirpRow_t = new RlChirpRowT();
                                }
                                GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlDynChirpCfgs[j].rlDynChirpCfg_t.chirpSegSel = (int)m_DynamicChirpConfigParams.ChirpSegmentSelect;
                                GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlDynChirpCfgs[j].rlDynChirpCfg_t.chirpRowSel = (int)m_DynamicChirpConfigParams.ChirpRowSelect;
                                GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlDynChirpCfgs[j].rlDynChirpCfg_t.rlChirpRows[0].rlChirpRow_t.chirpNR1 = "0x" + DynamicChirpConfigurationParam.Chirp1R1.ToString();
                                GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlDynChirpCfgs[j].rlDynChirpCfg_t.rlChirpRows[1].rlChirpRow_t.chirpNR1 = "0x" + DynamicChirpConfigurationParam.Chirp1R2.ToString();
                                GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlDynChirpCfgs[j].rlDynChirpCfg_t.rlChirpRows[2].rlChirpRow_t.chirpNR1 = "0x" + DynamicChirpConfigurationParam.Chirp1R3.ToString();
                                GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlDynChirpCfgs[j].rlDynChirpCfg_t.rlChirpRows[3].rlChirpRow_t.chirpNR1 = "0x" + DynamicChirpConfigurationParam.Chirp2R1.ToString();
                                GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlDynChirpCfgs[j].rlDynChirpCfg_t.rlChirpRows[4].rlChirpRow_t.chirpNR1 = "0x" + DynamicChirpConfigurationParam.Chirp2R2.ToString();
                                GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlDynChirpCfgs[j].rlDynChirpCfg_t.rlChirpRows[5].rlChirpRow_t.chirpNR1 = "0x" + DynamicChirpConfigurationParam.Chirp2R3.ToString();
                                GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlDynChirpCfgs[j].rlDynChirpCfg_t.rlChirpRows[6].rlChirpRow_t.chirpNR1 = "0x" + DynamicChirpConfigurationParam.Chirp3R1.ToString();
                                GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlDynChirpCfgs[j].rlDynChirpCfg_t.rlChirpRows[7].rlChirpRow_t.chirpNR1 = "0x" + DynamicChirpConfigurationParam.Chirp3R2.ToString();
                                GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlDynChirpCfgs[j].rlDynChirpCfg_t.rlChirpRows[8].rlChirpRow_t.chirpNR1 = "0x" + DynamicChirpConfigurationParam.Chirp3R3.ToString();
                                GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlDynChirpCfgs[j].rlDynChirpCfg_t.rlChirpRows[9].rlChirpRow_t.chirpNR1 = "0x" + DynamicChirpConfigurationParam.Chirp4R1.ToString();
                                GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlDynChirpCfgs[j].rlDynChirpCfg_t.rlChirpRows[10].rlChirpRow_t.chirpNR1 = "0x" + DynamicChirpConfigurationParam.Chirp4R2.ToString();
                                GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlDynChirpCfgs[j].rlDynChirpCfg_t.rlChirpRows[11].rlChirpRow_t.chirpNR1 = "0x" + DynamicChirpConfigurationParam.Chirp4R3.ToString();
                                GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlDynChirpCfgs[j].rlDynChirpCfg_t.rlChirpRows[12].rlChirpRow_t.chirpNR1 = "0x" + DynamicChirpConfigurationParam.Chirp5R1.ToString();
                                GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlDynChirpCfgs[j].rlDynChirpCfg_t.rlChirpRows[13].rlChirpRow_t.chirpNR1 = "0x" + DynamicChirpConfigurationParam.Chirp5R2.ToString();
                                GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlDynChirpCfgs[j].rlDynChirpCfg_t.rlChirpRows[14].rlChirpRow_t.chirpNR1 = "0x" + DynamicChirpConfigurationParam.Chirp5R3.ToString();
                                GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlDynChirpCfgs[j].rlDynChirpCfg_t.rlChirpRows[15].rlChirpRow_t.chirpNR1 = "0x" + DynamicChirpConfigurationParam.Chirp6R1.ToString();
                                GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlDynChirpCfgs[j].rlDynChirpCfg_t.rlChirpRows[16].rlChirpRow_t.chirpNR1 = "0x" + DynamicChirpConfigurationParam.Chirp6R2.ToString();
                                GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlDynChirpCfgs[j].rlDynChirpCfg_t.rlChirpRows[17].rlChirpRow_t.chirpNR1 = "0x" + DynamicChirpConfigurationParam.Chirp6R3.ToString();
                                GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlDynChirpCfgs[j].rlDynChirpCfg_t.rlChirpRows[18].rlChirpRow_t.chirpNR1 = "0x" + DynamicChirpConfigurationParam.Chirp7R1.ToString();
                                GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlDynChirpCfgs[j].rlDynChirpCfg_t.rlChirpRows[19].rlChirpRow_t.chirpNR1 = "0x" + DynamicChirpConfigurationParam.Chirp7R2.ToString();
                                GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlDynChirpCfgs[j].rlDynChirpCfg_t.rlChirpRows[20].rlChirpRow_t.chirpNR1 = "0x" + DynamicChirpConfigurationParam.Chirp7R3.ToString();
                                GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlDynChirpCfgs[j].rlDynChirpCfg_t.rlChirpRows[21].rlChirpRow_t.chirpNR1 = "0x" + DynamicChirpConfigurationParam.Chirp8R1.ToString();
                                GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlDynChirpCfgs[j].rlDynChirpCfg_t.rlChirpRows[22].rlChirpRow_t.chirpNR1 = "0x" + DynamicChirpConfigurationParam.Chirp8R2.ToString();
                                GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlDynChirpCfgs[j].rlDynChirpCfg_t.rlChirpRows[23].rlChirpRow_t.chirpNR1 = "0x" + DynamicChirpConfigurationParam.Chirp8R3.ToString();
                                GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlDynChirpCfgs[j].rlDynChirpCfg_t.rlChirpRows[24].rlChirpRow_t.chirpNR1 = "0x" + DynamicChirpConfigurationParam.Chirp9R1.ToString();
                                GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlDynChirpCfgs[j].rlDynChirpCfg_t.rlChirpRows[25].rlChirpRow_t.chirpNR1 = "0x" + DynamicChirpConfigurationParam.Chirp9R2.ToString();
                                GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlDynChirpCfgs[j].rlDynChirpCfg_t.rlChirpRows[26].rlChirpRow_t.chirpNR1 = "0x" + DynamicChirpConfigurationParam.Chirp9R3.ToString();
                                GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlDynChirpCfgs[j].rlDynChirpCfg_t.rlChirpRows[27].rlChirpRow_t.chirpNR1 = "0x" + DynamicChirpConfigurationParam.Chirp10R1.ToString();
                                GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlDynChirpCfgs[j].rlDynChirpCfg_t.rlChirpRows[28].rlChirpRow_t.chirpNR1 = "0x" + DynamicChirpConfigurationParam.Chirp10R2.ToString();
                                GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlDynChirpCfgs[j].rlDynChirpCfg_t.rlChirpRows[29].rlChirpRow_t.chirpNR1 = "0x" + DynamicChirpConfigurationParam.Chirp10R3.ToString();
                                GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlDynChirpCfgs[j].rlDynChirpCfg_t.rlChirpRows[30].rlChirpRow_t.chirpNR1 = "0x" + DynamicChirpConfigurationParam.Chirp11R1.ToString();
                                GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlDynChirpCfgs[j].rlDynChirpCfg_t.rlChirpRows[31].rlChirpRow_t.chirpNR1 = "0x" + DynamicChirpConfigurationParam.Chirp11R2.ToString();
                                GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlDynChirpCfgs[j].rlDynChirpCfg_t.rlChirpRows[32].rlChirpRow_t.chirpNR1 = "0x" + DynamicChirpConfigurationParam.Chirp11R3.ToString();
                                GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlDynChirpCfgs[j].rlDynChirpCfg_t.rlChirpRows[33].rlChirpRow_t.chirpNR1 = "0x" + DynamicChirpConfigurationParam.Chirp12R1.ToString();
                                GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlDynChirpCfgs[j].rlDynChirpCfg_t.rlChirpRows[34].rlChirpRow_t.chirpNR1 = "0x" + DynamicChirpConfigurationParam.Chirp12R2.ToString();
                                GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlDynChirpCfgs[j].rlDynChirpCfg_t.rlChirpRows[35].rlChirpRow_t.chirpNR1 = "0x" + DynamicChirpConfigurationParam.Chirp12R3.ToString();
                                GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlDynChirpCfgs[j].rlDynChirpCfg_t.rlChirpRows[36].rlChirpRow_t.chirpNR1 = "0x" + DynamicChirpConfigurationParam.Chirp13R1.ToString();
                                GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlDynChirpCfgs[j].rlDynChirpCfg_t.rlChirpRows[37].rlChirpRow_t.chirpNR1 = "0x" + DynamicChirpConfigurationParam.Chirp13R2.ToString();
                                GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlDynChirpCfgs[j].rlDynChirpCfg_t.rlChirpRows[38].rlChirpRow_t.chirpNR1 = "0x" + DynamicChirpConfigurationParam.Chirp13R3.ToString();
                                GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlDynChirpCfgs[j].rlDynChirpCfg_t.rlChirpRows[39].rlChirpRow_t.chirpNR1 = "0x" + DynamicChirpConfigurationParam.Chirp14R1.ToString();
                                GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlDynChirpCfgs[j].rlDynChirpCfg_t.rlChirpRows[40].rlChirpRow_t.chirpNR1 = "0x" + DynamicChirpConfigurationParam.Chirp14R2.ToString();
                                GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlDynChirpCfgs[j].rlDynChirpCfg_t.rlChirpRows[41].rlChirpRow_t.chirpNR1 = "0x" + DynamicChirpConfigurationParam.Chirp14R3.ToString();
                                GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlDynChirpCfgs[j].rlDynChirpCfg_t.rlChirpRows[42].rlChirpRow_t.chirpNR1 = "0x" + DynamicChirpConfigurationParam.Chirp15R1.ToString();
                                GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlDynChirpCfgs[j].rlDynChirpCfg_t.rlChirpRows[43].rlChirpRow_t.chirpNR1 = "0x" + DynamicChirpConfigurationParam.Chirp15R2.ToString();
                                GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlDynChirpCfgs[j].rlDynChirpCfg_t.rlChirpRows[44].rlChirpRow_t.chirpNR1 = "0x" + DynamicChirpConfigurationParam.Chirp15R3.ToString();
                                GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlDynChirpCfgs[j].rlDynChirpCfg_t.rlChirpRows[45].rlChirpRow_t.chirpNR1 = "0x" + DynamicChirpConfigurationParam.Chirp16R1.ToString();
                                GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlDynChirpCfgs[j].rlDynChirpCfg_t.rlChirpRows[46].rlChirpRow_t.chirpNR1 = "0x" + DynamicChirpConfigurationParam.Chirp16R2.ToString();
                                GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlDynChirpCfgs[j].rlDynChirpCfg_t.rlChirpRows[47].rlChirpRow_t.chirpNR1 = "0x" + DynamicChirpConfigurationParam.Chirp16R3.ToString();
                            }
                            else if (m_DynamicChirpConfigParams.ChirpRowSelect == 2)
                            {
                                GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlDynChirpCfgs.Add(new RlDynChirpCfgs());
                                GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlDynChirpCfgs[j].rlDynChirpCfg_t = new RlDynChirpCfgT();
                                GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlDynChirpCfgs[j].rlDynChirpCfg_t.rlChirpRows = new List<RlChirpRows>();
                                for (int m = 0; m < 48; m++)
                                {
                                    GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlDynChirpCfgs[j].rlDynChirpCfg_t.rlChirpRows.Add(new RlChirpRows());
                                    GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlDynChirpCfgs[j].rlDynChirpCfg_t.rlChirpRows[m].rlChirpRow_t = new RlChirpRowT();
                                }
                                GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlDynChirpCfgs[j].rlDynChirpCfg_t.chirpSegSel = (int)m_DynamicChirpConfigParams.ChirpSegmentSelect;
                                GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlDynChirpCfgs[j].rlDynChirpCfg_t.chirpRowSel = (int)m_DynamicChirpConfigParams.ChirpRowSelect;
                                GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlDynChirpCfgs[j].rlDynChirpCfg_t.rlChirpRows[0].rlChirpRow_t.chirpNR2 = "0x" + DynamicChirpConfigurationParam.Chirp1R1.ToString();
                                GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlDynChirpCfgs[j].rlDynChirpCfg_t.rlChirpRows[1].rlChirpRow_t.chirpNR2 = "0x" + DynamicChirpConfigurationParam.Chirp1R2.ToString();
                                GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlDynChirpCfgs[j].rlDynChirpCfg_t.rlChirpRows[2].rlChirpRow_t.chirpNR2 = "0x" + DynamicChirpConfigurationParam.Chirp1R3.ToString();
                                GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlDynChirpCfgs[j].rlDynChirpCfg_t.rlChirpRows[3].rlChirpRow_t.chirpNR2 = "0x" + DynamicChirpConfigurationParam.Chirp2R1.ToString();
                                GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlDynChirpCfgs[j].rlDynChirpCfg_t.rlChirpRows[4].rlChirpRow_t.chirpNR2 = "0x" + DynamicChirpConfigurationParam.Chirp2R2.ToString();
                                GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlDynChirpCfgs[j].rlDynChirpCfg_t.rlChirpRows[5].rlChirpRow_t.chirpNR2 = "0x" + DynamicChirpConfigurationParam.Chirp2R3.ToString();
                                GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlDynChirpCfgs[j].rlDynChirpCfg_t.rlChirpRows[6].rlChirpRow_t.chirpNR2 = "0x" + DynamicChirpConfigurationParam.Chirp3R1.ToString();
                                GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlDynChirpCfgs[j].rlDynChirpCfg_t.rlChirpRows[7].rlChirpRow_t.chirpNR2 = "0x" + DynamicChirpConfigurationParam.Chirp3R2.ToString();
                                GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlDynChirpCfgs[j].rlDynChirpCfg_t.rlChirpRows[8].rlChirpRow_t.chirpNR2 = "0x" + DynamicChirpConfigurationParam.Chirp3R3.ToString();
                                GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlDynChirpCfgs[j].rlDynChirpCfg_t.rlChirpRows[9].rlChirpRow_t.chirpNR2 = "0x" + DynamicChirpConfigurationParam.Chirp4R1.ToString();
                                GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlDynChirpCfgs[j].rlDynChirpCfg_t.rlChirpRows[10].rlChirpRow_t.chirpNR2 = "0x" + DynamicChirpConfigurationParam.Chirp4R2.ToString();
                                GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlDynChirpCfgs[j].rlDynChirpCfg_t.rlChirpRows[11].rlChirpRow_t.chirpNR2 = "0x" + DynamicChirpConfigurationParam.Chirp4R3.ToString();
                                GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlDynChirpCfgs[j].rlDynChirpCfg_t.rlChirpRows[12].rlChirpRow_t.chirpNR2 = "0x" + DynamicChirpConfigurationParam.Chirp5R1.ToString();
                                GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlDynChirpCfgs[j].rlDynChirpCfg_t.rlChirpRows[13].rlChirpRow_t.chirpNR2 = "0x" + DynamicChirpConfigurationParam.Chirp5R2.ToString();
                                GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlDynChirpCfgs[j].rlDynChirpCfg_t.rlChirpRows[14].rlChirpRow_t.chirpNR2 = "0x" + DynamicChirpConfigurationParam.Chirp5R3.ToString();
                                GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlDynChirpCfgs[j].rlDynChirpCfg_t.rlChirpRows[15].rlChirpRow_t.chirpNR2 = "0x" + DynamicChirpConfigurationParam.Chirp6R1.ToString();
                                GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlDynChirpCfgs[j].rlDynChirpCfg_t.rlChirpRows[16].rlChirpRow_t.chirpNR2 = "0x" + DynamicChirpConfigurationParam.Chirp6R2.ToString();
                                GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlDynChirpCfgs[j].rlDynChirpCfg_t.rlChirpRows[17].rlChirpRow_t.chirpNR2 = "0x" + DynamicChirpConfigurationParam.Chirp6R3.ToString();
                                GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlDynChirpCfgs[j].rlDynChirpCfg_t.rlChirpRows[18].rlChirpRow_t.chirpNR2 = "0x" + DynamicChirpConfigurationParam.Chirp7R1.ToString();
                                GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlDynChirpCfgs[j].rlDynChirpCfg_t.rlChirpRows[19].rlChirpRow_t.chirpNR2 = "0x" + DynamicChirpConfigurationParam.Chirp7R2.ToString();
                                GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlDynChirpCfgs[j].rlDynChirpCfg_t.rlChirpRows[20].rlChirpRow_t.chirpNR2 = "0x" + DynamicChirpConfigurationParam.Chirp7R3.ToString();
                                GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlDynChirpCfgs[j].rlDynChirpCfg_t.rlChirpRows[21].rlChirpRow_t.chirpNR2 = "0x" + DynamicChirpConfigurationParam.Chirp8R1.ToString();
                                GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlDynChirpCfgs[j].rlDynChirpCfg_t.rlChirpRows[22].rlChirpRow_t.chirpNR2 = "0x" + DynamicChirpConfigurationParam.Chirp8R2.ToString();
                                GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlDynChirpCfgs[j].rlDynChirpCfg_t.rlChirpRows[23].rlChirpRow_t.chirpNR2 = "0x" + DynamicChirpConfigurationParam.Chirp8R3.ToString();
                                GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlDynChirpCfgs[j].rlDynChirpCfg_t.rlChirpRows[24].rlChirpRow_t.chirpNR2 = "0x" + DynamicChirpConfigurationParam.Chirp9R1.ToString();
                                GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlDynChirpCfgs[j].rlDynChirpCfg_t.rlChirpRows[25].rlChirpRow_t.chirpNR2 = "0x" + DynamicChirpConfigurationParam.Chirp9R2.ToString();
                                GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlDynChirpCfgs[j].rlDynChirpCfg_t.rlChirpRows[26].rlChirpRow_t.chirpNR2 = "0x" + DynamicChirpConfigurationParam.Chirp9R3.ToString();
                                GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlDynChirpCfgs[j].rlDynChirpCfg_t.rlChirpRows[27].rlChirpRow_t.chirpNR2 = "0x" + DynamicChirpConfigurationParam.Chirp10R1.ToString();
                                GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlDynChirpCfgs[j].rlDynChirpCfg_t.rlChirpRows[28].rlChirpRow_t.chirpNR2 = "0x" + DynamicChirpConfigurationParam.Chirp10R2.ToString();
                                GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlDynChirpCfgs[j].rlDynChirpCfg_t.rlChirpRows[29].rlChirpRow_t.chirpNR2 = "0x" + DynamicChirpConfigurationParam.Chirp10R3.ToString();
                                GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlDynChirpCfgs[j].rlDynChirpCfg_t.rlChirpRows[30].rlChirpRow_t.chirpNR2 = "0x" + DynamicChirpConfigurationParam.Chirp11R1.ToString();
                                GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlDynChirpCfgs[j].rlDynChirpCfg_t.rlChirpRows[31].rlChirpRow_t.chirpNR2 = "0x" + DynamicChirpConfigurationParam.Chirp11R2.ToString();
                                GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlDynChirpCfgs[j].rlDynChirpCfg_t.rlChirpRows[32].rlChirpRow_t.chirpNR2 = "0x" + DynamicChirpConfigurationParam.Chirp11R3.ToString();
                                GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlDynChirpCfgs[j].rlDynChirpCfg_t.rlChirpRows[33].rlChirpRow_t.chirpNR2 = "0x" + DynamicChirpConfigurationParam.Chirp12R1.ToString();
                                GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlDynChirpCfgs[j].rlDynChirpCfg_t.rlChirpRows[34].rlChirpRow_t.chirpNR2 = "0x" + DynamicChirpConfigurationParam.Chirp12R2.ToString();
                                GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlDynChirpCfgs[j].rlDynChirpCfg_t.rlChirpRows[35].rlChirpRow_t.chirpNR2 = "0x" + DynamicChirpConfigurationParam.Chirp12R3.ToString();
                                GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlDynChirpCfgs[j].rlDynChirpCfg_t.rlChirpRows[36].rlChirpRow_t.chirpNR2 = "0x" + DynamicChirpConfigurationParam.Chirp13R1.ToString();
                                GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlDynChirpCfgs[j].rlDynChirpCfg_t.rlChirpRows[37].rlChirpRow_t.chirpNR2 = "0x" + DynamicChirpConfigurationParam.Chirp13R2.ToString();
                                GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlDynChirpCfgs[j].rlDynChirpCfg_t.rlChirpRows[38].rlChirpRow_t.chirpNR2 = "0x" + DynamicChirpConfigurationParam.Chirp13R3.ToString();
                                GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlDynChirpCfgs[j].rlDynChirpCfg_t.rlChirpRows[39].rlChirpRow_t.chirpNR2 = "0x" + DynamicChirpConfigurationParam.Chirp14R1.ToString();
                                GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlDynChirpCfgs[j].rlDynChirpCfg_t.rlChirpRows[40].rlChirpRow_t.chirpNR2 = "0x" + DynamicChirpConfigurationParam.Chirp14R2.ToString();
                                GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlDynChirpCfgs[j].rlDynChirpCfg_t.rlChirpRows[41].rlChirpRow_t.chirpNR2 = "0x" + DynamicChirpConfigurationParam.Chirp14R3.ToString();
                                GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlDynChirpCfgs[j].rlDynChirpCfg_t.rlChirpRows[42].rlChirpRow_t.chirpNR2 = "0x" + DynamicChirpConfigurationParam.Chirp15R1.ToString();
                                GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlDynChirpCfgs[j].rlDynChirpCfg_t.rlChirpRows[43].rlChirpRow_t.chirpNR2 = "0x" + DynamicChirpConfigurationParam.Chirp15R2.ToString();
                                GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlDynChirpCfgs[j].rlDynChirpCfg_t.rlChirpRows[44].rlChirpRow_t.chirpNR2 = "0x" + DynamicChirpConfigurationParam.Chirp15R3.ToString();
                                GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlDynChirpCfgs[j].rlDynChirpCfg_t.rlChirpRows[45].rlChirpRow_t.chirpNR2 = "0x" + DynamicChirpConfigurationParam.Chirp16R1.ToString();
                                GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlDynChirpCfgs[j].rlDynChirpCfg_t.rlChirpRows[46].rlChirpRow_t.chirpNR2 = "0x" + DynamicChirpConfigurationParam.Chirp16R2.ToString();
                                GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlDynChirpCfgs[j].rlDynChirpCfg_t.rlChirpRows[47].rlChirpRow_t.chirpNR2 = "0x" + DynamicChirpConfigurationParam.Chirp16R3.ToString();
                            }
                            else if (m_DynamicChirpConfigParams.ChirpRowSelect == 3)
                            {
                                GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlDynChirpCfgs.Add(new RlDynChirpCfgs());
                                GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlDynChirpCfgs[j].rlDynChirpCfg_t = new RlDynChirpCfgT();
                                GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlDynChirpCfgs[j].rlDynChirpCfg_t.rlChirpRows = new List<RlChirpRows>();
                                for (int n = 0; n < 48; n++)
                                {
                                    GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlDynChirpCfgs[j].rlDynChirpCfg_t.rlChirpRows.Add(new RlChirpRows());
                                    GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlDynChirpCfgs[j].rlDynChirpCfg_t.rlChirpRows[n].rlChirpRow_t = new RlChirpRowT();
                                }
                                GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlDynChirpCfgs[j].rlDynChirpCfg_t.chirpSegSel = (int)m_DynamicChirpConfigParams.ChirpSegmentSelect;
                                GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlDynChirpCfgs[j].rlDynChirpCfg_t.chirpRowSel = (int)m_DynamicChirpConfigParams.ChirpRowSelect;
                                GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlDynChirpCfgs[j].rlDynChirpCfg_t.rlChirpRows[0].rlChirpRow_t.chirpNR3 = "0x" + DynamicChirpConfigurationParam.Chirp1R1.ToString();
                                GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlDynChirpCfgs[j].rlDynChirpCfg_t.rlChirpRows[1].rlChirpRow_t.chirpNR3 = "0x" + DynamicChirpConfigurationParam.Chirp1R2.ToString();
                                GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlDynChirpCfgs[j].rlDynChirpCfg_t.rlChirpRows[2].rlChirpRow_t.chirpNR3 = "0x" + DynamicChirpConfigurationParam.Chirp1R3.ToString();
                                GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlDynChirpCfgs[j].rlDynChirpCfg_t.rlChirpRows[3].rlChirpRow_t.chirpNR3 = "0x" + DynamicChirpConfigurationParam.Chirp2R1.ToString();
                                GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlDynChirpCfgs[j].rlDynChirpCfg_t.rlChirpRows[4].rlChirpRow_t.chirpNR3 = "0x" + DynamicChirpConfigurationParam.Chirp2R2.ToString();
                                GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlDynChirpCfgs[j].rlDynChirpCfg_t.rlChirpRows[5].rlChirpRow_t.chirpNR3 = "0x" + DynamicChirpConfigurationParam.Chirp2R3.ToString();
                                GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlDynChirpCfgs[j].rlDynChirpCfg_t.rlChirpRows[6].rlChirpRow_t.chirpNR3 = "0x" + DynamicChirpConfigurationParam.Chirp3R1.ToString();
                                GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlDynChirpCfgs[j].rlDynChirpCfg_t.rlChirpRows[7].rlChirpRow_t.chirpNR3 = "0x" + DynamicChirpConfigurationParam.Chirp3R2.ToString();
                                GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlDynChirpCfgs[j].rlDynChirpCfg_t.rlChirpRows[8].rlChirpRow_t.chirpNR3 = "0x" + DynamicChirpConfigurationParam.Chirp3R3.ToString();
                                GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlDynChirpCfgs[j].rlDynChirpCfg_t.rlChirpRows[9].rlChirpRow_t.chirpNR3 = "0x" + DynamicChirpConfigurationParam.Chirp4R1.ToString();
                                GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlDynChirpCfgs[j].rlDynChirpCfg_t.rlChirpRows[10].rlChirpRow_t.chirpNR3 = "0x" + DynamicChirpConfigurationParam.Chirp4R2.ToString();
                                GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlDynChirpCfgs[j].rlDynChirpCfg_t.rlChirpRows[11].rlChirpRow_t.chirpNR3 = "0x" + DynamicChirpConfigurationParam.Chirp4R3.ToString();
                                GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlDynChirpCfgs[j].rlDynChirpCfg_t.rlChirpRows[12].rlChirpRow_t.chirpNR3 = "0x" + DynamicChirpConfigurationParam.Chirp5R1.ToString();
                                GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlDynChirpCfgs[j].rlDynChirpCfg_t.rlChirpRows[13].rlChirpRow_t.chirpNR3 = "0x" + DynamicChirpConfigurationParam.Chirp5R2.ToString();
                                GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlDynChirpCfgs[j].rlDynChirpCfg_t.rlChirpRows[14].rlChirpRow_t.chirpNR3 = "0x" + DynamicChirpConfigurationParam.Chirp5R3.ToString();
                                GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlDynChirpCfgs[j].rlDynChirpCfg_t.rlChirpRows[15].rlChirpRow_t.chirpNR3 = "0x" + DynamicChirpConfigurationParam.Chirp6R1.ToString();
                                GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlDynChirpCfgs[j].rlDynChirpCfg_t.rlChirpRows[16].rlChirpRow_t.chirpNR3 = "0x" + DynamicChirpConfigurationParam.Chirp6R2.ToString();
                                GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlDynChirpCfgs[j].rlDynChirpCfg_t.rlChirpRows[17].rlChirpRow_t.chirpNR3 = "0x" + DynamicChirpConfigurationParam.Chirp6R3.ToString();
                                GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlDynChirpCfgs[j].rlDynChirpCfg_t.rlChirpRows[18].rlChirpRow_t.chirpNR3 = "0x" + DynamicChirpConfigurationParam.Chirp7R1.ToString();
                                GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlDynChirpCfgs[j].rlDynChirpCfg_t.rlChirpRows[19].rlChirpRow_t.chirpNR3 = "0x" + DynamicChirpConfigurationParam.Chirp7R2.ToString();
                                GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlDynChirpCfgs[j].rlDynChirpCfg_t.rlChirpRows[20].rlChirpRow_t.chirpNR3 = "0x" + DynamicChirpConfigurationParam.Chirp7R3.ToString();
                                GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlDynChirpCfgs[j].rlDynChirpCfg_t.rlChirpRows[21].rlChirpRow_t.chirpNR3 = "0x" + DynamicChirpConfigurationParam.Chirp8R1.ToString();
                                GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlDynChirpCfgs[j].rlDynChirpCfg_t.rlChirpRows[22].rlChirpRow_t.chirpNR3 = "0x" + DynamicChirpConfigurationParam.Chirp8R2.ToString();
                                GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlDynChirpCfgs[j].rlDynChirpCfg_t.rlChirpRows[23].rlChirpRow_t.chirpNR3 = "0x" + DynamicChirpConfigurationParam.Chirp8R3.ToString();
                                GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlDynChirpCfgs[j].rlDynChirpCfg_t.rlChirpRows[24].rlChirpRow_t.chirpNR3 = "0x" + DynamicChirpConfigurationParam.Chirp9R1.ToString();
                                GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlDynChirpCfgs[j].rlDynChirpCfg_t.rlChirpRows[25].rlChirpRow_t.chirpNR3 = "0x" + DynamicChirpConfigurationParam.Chirp9R2.ToString();
                                GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlDynChirpCfgs[j].rlDynChirpCfg_t.rlChirpRows[26].rlChirpRow_t.chirpNR3 = "0x" + DynamicChirpConfigurationParam.Chirp9R3.ToString();
                                GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlDynChirpCfgs[j].rlDynChirpCfg_t.rlChirpRows[27].rlChirpRow_t.chirpNR3 = "0x" + DynamicChirpConfigurationParam.Chirp10R1.ToString();
                                GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlDynChirpCfgs[j].rlDynChirpCfg_t.rlChirpRows[28].rlChirpRow_t.chirpNR3 = "0x" + DynamicChirpConfigurationParam.Chirp10R2.ToString();
                                GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlDynChirpCfgs[j].rlDynChirpCfg_t.rlChirpRows[29].rlChirpRow_t.chirpNR3 = "0x" + DynamicChirpConfigurationParam.Chirp10R3.ToString();
                                GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlDynChirpCfgs[j].rlDynChirpCfg_t.rlChirpRows[30].rlChirpRow_t.chirpNR3 = "0x" + DynamicChirpConfigurationParam.Chirp11R1.ToString();
                                GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlDynChirpCfgs[j].rlDynChirpCfg_t.rlChirpRows[31].rlChirpRow_t.chirpNR3 = "0x" + DynamicChirpConfigurationParam.Chirp11R2.ToString();
                                GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlDynChirpCfgs[j].rlDynChirpCfg_t.rlChirpRows[32].rlChirpRow_t.chirpNR3 = "0x" + DynamicChirpConfigurationParam.Chirp11R3.ToString();
                                GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlDynChirpCfgs[j].rlDynChirpCfg_t.rlChirpRows[33].rlChirpRow_t.chirpNR3 = "0x" + DynamicChirpConfigurationParam.Chirp12R1.ToString();
                                GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlDynChirpCfgs[j].rlDynChirpCfg_t.rlChirpRows[34].rlChirpRow_t.chirpNR3 = "0x" + DynamicChirpConfigurationParam.Chirp12R2.ToString();
                                GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlDynChirpCfgs[j].rlDynChirpCfg_t.rlChirpRows[35].rlChirpRow_t.chirpNR3 = "0x" + DynamicChirpConfigurationParam.Chirp12R3.ToString();
                                GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlDynChirpCfgs[j].rlDynChirpCfg_t.rlChirpRows[36].rlChirpRow_t.chirpNR3 = "0x" + DynamicChirpConfigurationParam.Chirp13R1.ToString();
                                GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlDynChirpCfgs[j].rlDynChirpCfg_t.rlChirpRows[37].rlChirpRow_t.chirpNR3 = "0x" + DynamicChirpConfigurationParam.Chirp13R2.ToString();
                                GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlDynChirpCfgs[j].rlDynChirpCfg_t.rlChirpRows[38].rlChirpRow_t.chirpNR3 = "0x" + DynamicChirpConfigurationParam.Chirp13R3.ToString();
                                GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlDynChirpCfgs[j].rlDynChirpCfg_t.rlChirpRows[39].rlChirpRow_t.chirpNR3 = "0x" + DynamicChirpConfigurationParam.Chirp14R1.ToString();
                                GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlDynChirpCfgs[j].rlDynChirpCfg_t.rlChirpRows[40].rlChirpRow_t.chirpNR3 = "0x" + DynamicChirpConfigurationParam.Chirp14R2.ToString();
                                GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlDynChirpCfgs[j].rlDynChirpCfg_t.rlChirpRows[41].rlChirpRow_t.chirpNR3 = "0x" + DynamicChirpConfigurationParam.Chirp14R3.ToString();
                                GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlDynChirpCfgs[j].rlDynChirpCfg_t.rlChirpRows[42].rlChirpRow_t.chirpNR3 = "0x" + DynamicChirpConfigurationParam.Chirp15R1.ToString();
                                GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlDynChirpCfgs[j].rlDynChirpCfg_t.rlChirpRows[43].rlChirpRow_t.chirpNR3 = "0x" + DynamicChirpConfigurationParam.Chirp15R2.ToString();
                                GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlDynChirpCfgs[j].rlDynChirpCfg_t.rlChirpRows[44].rlChirpRow_t.chirpNR3 = "0x" + DynamicChirpConfigurationParam.Chirp15R3.ToString();
                                GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlDynChirpCfgs[j].rlDynChirpCfg_t.rlChirpRows[45].rlChirpRow_t.chirpNR3 = "0x" + DynamicChirpConfigurationParam.Chirp16R1.ToString();
                                GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlDynChirpCfgs[j].rlDynChirpCfg_t.rlChirpRows[46].rlChirpRow_t.chirpNR3 = "0x" + DynamicChirpConfigurationParam.Chirp16R2.ToString();
                                GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlDynChirpCfgs[j].rlDynChirpCfg_t.rlChirpRows[47].rlChirpRow_t.chirpNR3 = "0x" + DynamicChirpConfigurationParam.Chirp16R3.ToString();
                            }
                        }
                    }
                }
            }
            else
            {
                string msg = string.Format("Status: Failed, Error Type: {0}", new object[]
                {
                    GetErrorType(num)
                });
                GlobalRef.LuaWrapper.PrintError(msg);
            }
            if (GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
            {
                if (iRs232ConnectDisconnect_impl() == 0 && !GlobalRef.g_NtvRS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
                {
                    m_GuiManager.DllOps.iConnect(1U, 0U);
                    string full_command5 = string.Format("Debug Port Reconnected!", new object[0]);
                    m_GuiManager.RecordLog(9, full_command5);
                    ScriptOps.KeepTrying(2000, new Func<bool>(spare_read));
                }
            }
            else if (GlobalRef.g_CasCadeDeviceSpiConnect == 0U)
            {
                string full_command6 = string.Format("Error Occurred in Port open close", new object[0]);
                m_GuiManager.RecordLog(9, full_command6);
            }
            return num;
        }

        private int iDynamicPerChirpPhaseShifterChirpConfig_Impl(bool is_starting_op, bool is_ending_op)
        {
            DynamicPerChirpPhaseShifterConfigurationParam.Reserved = (m_DynamicPerChirpPhaseShiftConfigParams.Reserved = 0);
            DynamicPerChirpPhaseShifterConfigurationParam.ChirpSegmentSelect = m_DynamicPerChirpPhaseShiftConfigParams.ChirpSegmentSelect;
            DynamicPerChirpPhaseShifterConfigurationParam.Reserved2 = 0;
            DynamicPerChirpPhaseShifterConfigurationParam.Chirp1Tx1 = (byte)(m_DynamicPerChirpPhaseShiftConfigParams.Chirp1Tx1PhaseShifter << 2);
            DynamicPerChirpPhaseShifterConfigurationParam.Chirp1Tx2 = (byte)(m_DynamicPerChirpPhaseShiftConfigParams.Chirp1Tx2PhaseShifter << 2);
            DynamicPerChirpPhaseShifterConfigurationParam.Chirp1Tx3 = (byte)(m_DynamicPerChirpPhaseShiftConfigParams.Chirp1Tx3PhaseShifter << 2);
            DynamicPerChirpPhaseShifterConfigurationParam.Chirp2Tx1 = (byte)(m_DynamicPerChirpPhaseShiftConfigParams.Chirp2Tx1PhaseShifter << 2);
            DynamicPerChirpPhaseShifterConfigurationParam.Chirp2Tx2 = (byte)(m_DynamicPerChirpPhaseShiftConfigParams.Chirp2Tx2PhaseShifter << 2);
            DynamicPerChirpPhaseShifterConfigurationParam.Chirp2Tx3 = (byte)(m_DynamicPerChirpPhaseShiftConfigParams.Chirp2Tx3PhaseShifter << 2);
            DynamicPerChirpPhaseShifterConfigurationParam.Chirp3Tx1 = (byte)(m_DynamicPerChirpPhaseShiftConfigParams.Chirp3Tx1PhaseShifter << 2);
            DynamicPerChirpPhaseShifterConfigurationParam.Chirp3Tx2 = (byte)(m_DynamicPerChirpPhaseShiftConfigParams.Chirp3Tx2PhaseShifter << 2);
            DynamicPerChirpPhaseShifterConfigurationParam.Chirp3Tx3 = (byte)(m_DynamicPerChirpPhaseShiftConfigParams.Chirp3Tx3PhaseShifter << 2);
            DynamicPerChirpPhaseShifterConfigurationParam.Chirp4Tx1 = (byte)(m_DynamicPerChirpPhaseShiftConfigParams.Chirp4Tx1PhaseShifter << 2);
            DynamicPerChirpPhaseShifterConfigurationParam.Chirp4Tx2 = (byte)(m_DynamicPerChirpPhaseShiftConfigParams.Chirp4Tx2PhaseShifter << 2);
            DynamicPerChirpPhaseShifterConfigurationParam.Chirp4Tx3 = (byte)(m_DynamicPerChirpPhaseShiftConfigParams.Chirp4Tx3PhaseShifter << 2);
            DynamicPerChirpPhaseShifterConfigurationParam.Chirp5Tx1 = (byte)(m_DynamicPerChirpPhaseShiftConfigParams.Chirp5Tx1PhaseShifter << 2);
            DynamicPerChirpPhaseShifterConfigurationParam.Chirp5Tx2 = (byte)(m_DynamicPerChirpPhaseShiftConfigParams.Chirp5Tx2PhaseShifter << 2);
            DynamicPerChirpPhaseShifterConfigurationParam.Chirp5Tx3 = (byte)(m_DynamicPerChirpPhaseShiftConfigParams.Chirp5Tx3PhaseShifter << 2);
            DynamicPerChirpPhaseShifterConfigurationParam.Chirp6Tx1 = (byte)(m_DynamicPerChirpPhaseShiftConfigParams.Chirp6Tx1PhaseShifter << 2);
            DynamicPerChirpPhaseShifterConfigurationParam.Chirp6Tx2 = (byte)(m_DynamicPerChirpPhaseShiftConfigParams.Chirp6Tx2PhaseShifter << 2);
            DynamicPerChirpPhaseShifterConfigurationParam.Chirp6Tx3 = (byte)(m_DynamicPerChirpPhaseShiftConfigParams.Chirp6Tx3PhaseShifter << 2);
            DynamicPerChirpPhaseShifterConfigurationParam.Chirp7Tx1 = (byte)(m_DynamicPerChirpPhaseShiftConfigParams.Chirp7Tx1PhaseShifter << 2);
            DynamicPerChirpPhaseShifterConfigurationParam.Chirp7Tx2 = (byte)(m_DynamicPerChirpPhaseShiftConfigParams.Chirp7Tx2PhaseShifter << 2);
            DynamicPerChirpPhaseShifterConfigurationParam.Chirp7Tx3 = (byte)(m_DynamicPerChirpPhaseShiftConfigParams.Chirp7Tx3PhaseShifter << 2);
            DynamicPerChirpPhaseShifterConfigurationParam.Chirp8Tx1 = (byte)(m_DynamicPerChirpPhaseShiftConfigParams.Chirp8Tx1PhaseShifter << 2);
            DynamicPerChirpPhaseShifterConfigurationParam.Chirp8Tx2 = (byte)(m_DynamicPerChirpPhaseShiftConfigParams.Chirp8Tx2PhaseShifter << 2);
            DynamicPerChirpPhaseShifterConfigurationParam.Chirp8Tx3 = (byte)(m_DynamicPerChirpPhaseShiftConfigParams.Chirp8Tx3PhaseShifter << 2);
            DynamicPerChirpPhaseShifterConfigurationParam.Chirp9Tx1 = (byte)(m_DynamicPerChirpPhaseShiftConfigParams.Chirp9Tx1PhaseShifter << 2);
            DynamicPerChirpPhaseShifterConfigurationParam.Chirp9Tx2 = (byte)(m_DynamicPerChirpPhaseShiftConfigParams.Chirp9Tx2PhaseShifter << 2);
            DynamicPerChirpPhaseShifterConfigurationParam.Chirp9Tx3 = (byte)(m_DynamicPerChirpPhaseShiftConfigParams.Chirp9Tx3PhaseShifter << 2);
            DynamicPerChirpPhaseShifterConfigurationParam.Chirp10Tx1 = (byte)(m_DynamicPerChirpPhaseShiftConfigParams.Chirp10Tx1PhaseShifter << 2);
            DynamicPerChirpPhaseShifterConfigurationParam.Chirp10Tx2 = (byte)(m_DynamicPerChirpPhaseShiftConfigParams.Chirp10Tx2PhaseShifter << 2);
            DynamicPerChirpPhaseShifterConfigurationParam.Chirp10Tx3 = (byte)(m_DynamicPerChirpPhaseShiftConfigParams.Chirp10Tx3PhaseShifter << 2);
            DynamicPerChirpPhaseShifterConfigurationParam.Chirp11Tx1 = (byte)(m_DynamicPerChirpPhaseShiftConfigParams.Chirp11Tx1PhaseShifter << 2);
            DynamicPerChirpPhaseShifterConfigurationParam.Chirp11Tx2 = (byte)(m_DynamicPerChirpPhaseShiftConfigParams.Chirp11Tx2PhaseShifter << 2);
            DynamicPerChirpPhaseShifterConfigurationParam.Chirp11Tx3 = (byte)(m_DynamicPerChirpPhaseShiftConfigParams.Chirp11Tx3PhaseShifter << 2);
            DynamicPerChirpPhaseShifterConfigurationParam.Chirp12Tx1 = (byte)(m_DynamicPerChirpPhaseShiftConfigParams.Chirp12Tx1PhaseShifter << 2);
            DynamicPerChirpPhaseShifterConfigurationParam.Chirp12Tx2 = (byte)(m_DynamicPerChirpPhaseShiftConfigParams.Chirp12Tx2PhaseShifter << 2);
            DynamicPerChirpPhaseShifterConfigurationParam.Chirp12Tx3 = (byte)(m_DynamicPerChirpPhaseShiftConfigParams.Chirp12Tx3PhaseShifter << 2);
            DynamicPerChirpPhaseShifterConfigurationParam.Chirp13Tx1 = (byte)(m_DynamicPerChirpPhaseShiftConfigParams.Chirp13Tx1PhaseShifter << 2);
            DynamicPerChirpPhaseShifterConfigurationParam.Chirp13Tx2 = (byte)(m_DynamicPerChirpPhaseShiftConfigParams.Chirp13Tx2PhaseShifter << 2);
            DynamicPerChirpPhaseShifterConfigurationParam.Chirp13Tx3 = (byte)(m_DynamicPerChirpPhaseShiftConfigParams.Chirp13Tx3PhaseShifter << 2);
            DynamicPerChirpPhaseShifterConfigurationParam.Chirp14Tx1 = (byte)(m_DynamicPerChirpPhaseShiftConfigParams.Chirp14Tx1PhaseShifter << 2);
            DynamicPerChirpPhaseShifterConfigurationParam.Chirp14Tx2 = (byte)(m_DynamicPerChirpPhaseShiftConfigParams.Chirp14Tx2PhaseShifter << 2);
            DynamicPerChirpPhaseShifterConfigurationParam.Chirp14Tx3 = (byte)(m_DynamicPerChirpPhaseShiftConfigParams.Chirp14Tx3PhaseShifter << 2);
            DynamicPerChirpPhaseShifterConfigurationParam.Chirp15Tx1 = (byte)(m_DynamicPerChirpPhaseShiftConfigParams.Chirp15Tx1PhaseShifter << 2);
            DynamicPerChirpPhaseShifterConfigurationParam.Chirp15Tx2 = (byte)(m_DynamicPerChirpPhaseShiftConfigParams.Chirp15Tx2PhaseShifter << 2);
            DynamicPerChirpPhaseShifterConfigurationParam.Chirp15Tx3 = (byte)(m_DynamicPerChirpPhaseShiftConfigParams.Chirp15Tx3PhaseShifter << 2);
            DynamicPerChirpPhaseShifterConfigurationParam.Chirp16Tx1 = (byte)(m_DynamicPerChirpPhaseShiftConfigParams.Chirp16Tx1PhaseShifter << 2);
            DynamicPerChirpPhaseShifterConfigurationParam.Chirp16Tx2 = (byte)(m_DynamicPerChirpPhaseShiftConfigParams.Chirp16Tx2PhaseShifter << 2);
            DynamicPerChirpPhaseShifterConfigurationParam.Chirp16Tx3 = (byte)(m_DynamicPerChirpPhaseShiftConfigParams.Chirp16Tx3PhaseShifter << 2);
            IntPtr pDynamicPerChirpPhaseShifterCfgHandler = GCHandle.Alloc(DynamicPerChirpPhaseShifterConfigurationParam, GCHandleType.Pinned).AddrOfPinnedObject();
            DynamicPerChirpPhaseShifterCfgHandlerParam.pDynamicPerChirpPhaseShifterCfgHandler = pDynamicPerChirpPhaseShifterCfgHandler;
            IntPtr inData = GCHandle.Alloc(DynamicPerChirpPhaseShifterCfgHandlerParam, GCHandleType.Pinned).AddrOfPinnedObject();
            int num;
            if (GlobalRef.g_NtvRS232Connect[(int)GlobalRef.g_RadarDeviceIndex] && GlobalRef.g_CasCadeDeviceSpiConnect == 0U)
            {
                num = m_TsWrapper.Calling_WriteAddr_Single(4294959848U, 1U);
                if (m_GuiManager.DllOps.itempDisconnect(false) == 0)
                {
                    string full_command = string.Format("Debug Port Disconnected", new object[0]);
                    m_GuiManager.RecordLog(0, full_command);
                    if (!GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
                    {
                        iRs232ConnectDisconnect_impl();
                    }
                }
            }
            Thread.Sleep(200);
            if (m_RadarDeviceModeConfigParams.NumberOfRadarDevicesDetected <= 1)
            {
                string full_command2 = string.Format("ar1.DynPerChirpPhShifterCfgSet({0}, {1}, {2}, {3}, {4}, {5}, {6}, {7}, {8}, {9}, {10}, {11}, {12}, {13}, {14}, {15}, {16},{17}, {18}, {19}, {20}, {21}, {22}, {23}, {24}, {25}, {26}, {27}, {28}, {29}, {30}, {31}, {32},{33}, {34}, {35}, {36}, {37}, {38}, {39}, {40}, {41}, {42}, {43}, {44}, {45}, {46}, {47}, {48},{49}, {50})", new object[]
                {
                    m_DynamicPerChirpPhaseShiftConfigParams.Reserved,
                    m_DynamicPerChirpPhaseShiftConfigParams.ChirpSegmentSelect,
                    m_DynamicPerChirpPhaseShiftConfigParams.Chirp1Tx1PhaseShifter,
                    m_DynamicPerChirpPhaseShiftConfigParams.Chirp1Tx2PhaseShifter,
                    m_DynamicPerChirpPhaseShiftConfigParams.Chirp1Tx3PhaseShifter,
                    m_DynamicPerChirpPhaseShiftConfigParams.Chirp2Tx1PhaseShifter,
                    m_DynamicPerChirpPhaseShiftConfigParams.Chirp2Tx2PhaseShifter,
                    m_DynamicPerChirpPhaseShiftConfigParams.Chirp2Tx3PhaseShifter,
                    m_DynamicPerChirpPhaseShiftConfigParams.Chirp3Tx1PhaseShifter,
                    m_DynamicPerChirpPhaseShiftConfigParams.Chirp3Tx2PhaseShifter,
                    m_DynamicPerChirpPhaseShiftConfigParams.Chirp3Tx3PhaseShifter,
                    m_DynamicPerChirpPhaseShiftConfigParams.Chirp4Tx1PhaseShifter,
                    m_DynamicPerChirpPhaseShiftConfigParams.Chirp4Tx2PhaseShifter,
                    m_DynamicPerChirpPhaseShiftConfigParams.Chirp4Tx3PhaseShifter,
                    m_DynamicPerChirpPhaseShiftConfigParams.Chirp5Tx1PhaseShifter,
                    m_DynamicPerChirpPhaseShiftConfigParams.Chirp5Tx2PhaseShifter,
                    m_DynamicPerChirpPhaseShiftConfigParams.Chirp5Tx3PhaseShifter,
                    m_DynamicPerChirpPhaseShiftConfigParams.Chirp6Tx1PhaseShifter,
                    m_DynamicPerChirpPhaseShiftConfigParams.Chirp6Tx2PhaseShifter,
                    m_DynamicPerChirpPhaseShiftConfigParams.Chirp6Tx3PhaseShifter,
                    m_DynamicPerChirpPhaseShiftConfigParams.Chirp7Tx1PhaseShifter,
                    m_DynamicPerChirpPhaseShiftConfigParams.Chirp7Tx2PhaseShifter,
                    m_DynamicPerChirpPhaseShiftConfigParams.Chirp7Tx3PhaseShifter,
                    m_DynamicPerChirpPhaseShiftConfigParams.Chirp8Tx1PhaseShifter,
                    m_DynamicPerChirpPhaseShiftConfigParams.Chirp8Tx2PhaseShifter,
                    m_DynamicPerChirpPhaseShiftConfigParams.Chirp8Tx3PhaseShifter,
                    m_DynamicPerChirpPhaseShiftConfigParams.Chirp9Tx1PhaseShifter,
                    m_DynamicPerChirpPhaseShiftConfigParams.Chirp9Tx2PhaseShifter,
                    m_DynamicPerChirpPhaseShiftConfigParams.Chirp9Tx3PhaseShifter,
                    m_DynamicPerChirpPhaseShiftConfigParams.Chirp10Tx1PhaseShifter,
                    m_DynamicPerChirpPhaseShiftConfigParams.Chirp10Tx2PhaseShifter,
                    m_DynamicPerChirpPhaseShiftConfigParams.Chirp10Tx3PhaseShifter,
                    m_DynamicPerChirpPhaseShiftConfigParams.Chirp11Tx1PhaseShifter,
                    m_DynamicPerChirpPhaseShiftConfigParams.Chirp11Tx2PhaseShifter,
                    m_DynamicPerChirpPhaseShiftConfigParams.Chirp11Tx3PhaseShifter,
                    m_DynamicPerChirpPhaseShiftConfigParams.Chirp12Tx1PhaseShifter,
                    m_DynamicPerChirpPhaseShiftConfigParams.Chirp12Tx2PhaseShifter,
                    m_DynamicPerChirpPhaseShiftConfigParams.Chirp12Tx3PhaseShifter,
                    m_DynamicPerChirpPhaseShiftConfigParams.Chirp13Tx1PhaseShifter,
                    m_DynamicPerChirpPhaseShiftConfigParams.Chirp13Tx2PhaseShifter,
                    m_DynamicPerChirpPhaseShiftConfigParams.Chirp13Tx3PhaseShifter,
                    m_DynamicPerChirpPhaseShiftConfigParams.Chirp14Tx1PhaseShifter,
                    m_DynamicPerChirpPhaseShiftConfigParams.Chirp14Tx2PhaseShifter,
                    m_DynamicPerChirpPhaseShiftConfigParams.Chirp14Tx3PhaseShifter,
                    m_DynamicPerChirpPhaseShiftConfigParams.Chirp15Tx1PhaseShifter,
                    m_DynamicPerChirpPhaseShiftConfigParams.Chirp15Tx2PhaseShifter,
                    m_DynamicPerChirpPhaseShiftConfigParams.Chirp15Tx3PhaseShifter,
                    m_DynamicPerChirpPhaseShiftConfigParams.Chirp16Tx1PhaseShifter,
                    m_DynamicPerChirpPhaseShiftConfigParams.Chirp16Tx2PhaseShifter,
                    m_DynamicPerChirpPhaseShiftConfigParams.Chirp16Tx3PhaseShifter,
                    m_DynamicPerChirpPhaseShiftConfigParams.Reserved2
                });
                m_GuiManager.RecordLog(15, full_command2);
            }
            else
            {
                string full_command3 = string.Format("ar1.DynPerChirpPhShifterCfgSet_mult({0}, {1}, {2}, {3}, {4}, {5}, {6}, {7}, {8}, {9}, {10}, {11}, {12}, {13}, {14}, {15}, {16},{17}, {18}, {19}, {20}, {21}, {22}, {23}, {24}, {25}, {26}, {27}, {28}, {29}, {30}, {31}, {32},{33}, {34}, {35}, {36}, {37}, {38}, {39}, {40}, {41}, {42}, {43}, {44}, {45}, {46}, {47}, {48},{49}, {50}, {51})", new object[]
                {
                    GlobalRef.g_RadarDeviceId,
                    m_DynamicPerChirpPhaseShiftConfigParams.Reserved,
                    m_DynamicPerChirpPhaseShiftConfigParams.ChirpSegmentSelect,
                    m_DynamicPerChirpPhaseShiftConfigParams.Chirp1Tx1PhaseShifter,
                    m_DynamicPerChirpPhaseShiftConfigParams.Chirp1Tx2PhaseShifter,
                    m_DynamicPerChirpPhaseShiftConfigParams.Chirp1Tx3PhaseShifter,
                    m_DynamicPerChirpPhaseShiftConfigParams.Chirp2Tx1PhaseShifter,
                    m_DynamicPerChirpPhaseShiftConfigParams.Chirp2Tx2PhaseShifter,
                    m_DynamicPerChirpPhaseShiftConfigParams.Chirp2Tx3PhaseShifter,
                    m_DynamicPerChirpPhaseShiftConfigParams.Chirp3Tx1PhaseShifter,
                    m_DynamicPerChirpPhaseShiftConfigParams.Chirp3Tx2PhaseShifter,
                    m_DynamicPerChirpPhaseShiftConfigParams.Chirp3Tx3PhaseShifter,
                    m_DynamicPerChirpPhaseShiftConfigParams.Chirp4Tx1PhaseShifter,
                    m_DynamicPerChirpPhaseShiftConfigParams.Chirp4Tx2PhaseShifter,
                    m_DynamicPerChirpPhaseShiftConfigParams.Chirp4Tx3PhaseShifter,
                    m_DynamicPerChirpPhaseShiftConfigParams.Chirp5Tx1PhaseShifter,
                    m_DynamicPerChirpPhaseShiftConfigParams.Chirp5Tx2PhaseShifter,
                    m_DynamicPerChirpPhaseShiftConfigParams.Chirp5Tx3PhaseShifter,
                    m_DynamicPerChirpPhaseShiftConfigParams.Chirp6Tx1PhaseShifter,
                    m_DynamicPerChirpPhaseShiftConfigParams.Chirp6Tx2PhaseShifter,
                    m_DynamicPerChirpPhaseShiftConfigParams.Chirp6Tx3PhaseShifter,
                    m_DynamicPerChirpPhaseShiftConfigParams.Chirp7Tx1PhaseShifter,
                    m_DynamicPerChirpPhaseShiftConfigParams.Chirp7Tx2PhaseShifter,
                    m_DynamicPerChirpPhaseShiftConfigParams.Chirp7Tx3PhaseShifter,
                    m_DynamicPerChirpPhaseShiftConfigParams.Chirp8Tx1PhaseShifter,
                    m_DynamicPerChirpPhaseShiftConfigParams.Chirp8Tx2PhaseShifter,
                    m_DynamicPerChirpPhaseShiftConfigParams.Chirp8Tx3PhaseShifter,
                    m_DynamicPerChirpPhaseShiftConfigParams.Chirp9Tx1PhaseShifter,
                    m_DynamicPerChirpPhaseShiftConfigParams.Chirp9Tx2PhaseShifter,
                    m_DynamicPerChirpPhaseShiftConfigParams.Chirp9Tx3PhaseShifter,
                    m_DynamicPerChirpPhaseShiftConfigParams.Chirp10Tx1PhaseShifter,
                    m_DynamicPerChirpPhaseShiftConfigParams.Chirp10Tx2PhaseShifter,
                    m_DynamicPerChirpPhaseShiftConfigParams.Chirp10Tx3PhaseShifter,
                    m_DynamicPerChirpPhaseShiftConfigParams.Chirp11Tx1PhaseShifter,
                    m_DynamicPerChirpPhaseShiftConfigParams.Chirp11Tx2PhaseShifter,
                    m_DynamicPerChirpPhaseShiftConfigParams.Chirp11Tx3PhaseShifter,
                    m_DynamicPerChirpPhaseShiftConfigParams.Chirp12Tx1PhaseShifter,
                    m_DynamicPerChirpPhaseShiftConfigParams.Chirp12Tx2PhaseShifter,
                    m_DynamicPerChirpPhaseShiftConfigParams.Chirp12Tx3PhaseShifter,
                    m_DynamicPerChirpPhaseShiftConfigParams.Chirp13Tx1PhaseShifter,
                    m_DynamicPerChirpPhaseShiftConfigParams.Chirp13Tx2PhaseShifter,
                    m_DynamicPerChirpPhaseShiftConfigParams.Chirp13Tx3PhaseShifter,
                    m_DynamicPerChirpPhaseShiftConfigParams.Chirp14Tx1PhaseShifter,
                    m_DynamicPerChirpPhaseShiftConfigParams.Chirp14Tx2PhaseShifter,
                    m_DynamicPerChirpPhaseShiftConfigParams.Chirp14Tx3PhaseShifter,
                    m_DynamicPerChirpPhaseShiftConfigParams.Chirp15Tx1PhaseShifter,
                    m_DynamicPerChirpPhaseShiftConfigParams.Chirp15Tx2PhaseShifter,
                    m_DynamicPerChirpPhaseShiftConfigParams.Chirp15Tx3PhaseShifter,
                    m_DynamicPerChirpPhaseShiftConfigParams.Chirp16Tx1PhaseShifter,
                    m_DynamicPerChirpPhaseShiftConfigParams.Chirp16Tx2PhaseShifter,
                    m_DynamicPerChirpPhaseShiftConfigParams.Chirp16Tx3PhaseShifter,
                    m_DynamicPerChirpPhaseShiftConfigParams.Reserved2
                });
                m_GuiManager.RecordLog(15, full_command3);
            }
            uint g_RadarDeviceId = GlobalRef.g_RadarDeviceId;
            num = Imports.RadarLinkImpl_SetDynPerChirpPhShifterCfg((byte)GlobalRef.g_RadarDeviceId, 1, inData);
            if ((num == 0 && ((GlobalRef.g_CasCadeDeviceSpiConnect & 1U) == 1U || (GlobalRef.g_CasCadeDeviceSpiConnect & 2U) == 2U || (GlobalRef.g_CasCadeDeviceSpiConnect & 4U) == 4U || (GlobalRef.g_CasCadeDeviceSpiConnect & 8U) == 8U)) || GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
            {
                string full_command4 = string.Format("Status: Passed", new object[0]);
                m_GuiManager.RecordLog(8, full_command4);
                for (int i = 0; i < 4; i++)
                {
                    if (jsonConfigInProgress)
                    {
                        break;
                    }
                    if (((ulong)g_RadarDeviceId & (ulong)(1L << (i & 31))) != 0UL)
                    {
                        int mmwaveDevIndex = getMmwaveDevIndex(i);
                        int j;
                        for (j = 0; j < GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlDynPerChirpPhShftCfgs.Count; j++)
                        {
                            if ((int)m_DynamicPerChirpPhaseShiftConfigParams.ChirpSegmentSelect == GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlDynPerChirpPhShftCfgs[j].rlDynPerChirpPhShftCfg_t.chirpSegSel)
                            {
                                GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlDynPerChirpPhShftCfgs[j].rlDynPerChirpPhShftCfg_t.chirpSegSel = (int)m_DynamicPerChirpPhaseShiftConfigParams.ChirpSegmentSelect;
                                GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlDynPerChirpPhShftCfgs[j].rlDynPerChirpPhShftCfg_t.rlChirpPhShiftPerTxs[0].rlChirpPhShiftPerTx_t.chirpTx0PhaseShifter = (int)m_DynamicPerChirpPhaseShiftConfigParams.Chirp1Tx1PhaseShifter;
                                GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlDynPerChirpPhShftCfgs[j].rlDynPerChirpPhShftCfg_t.rlChirpPhShiftPerTxs[0].rlChirpPhShiftPerTx_t.chirpTx1PhaseShifter = (int)m_DynamicPerChirpPhaseShiftConfigParams.Chirp1Tx2PhaseShifter;
                                GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlDynPerChirpPhShftCfgs[j].rlDynPerChirpPhShftCfg_t.rlChirpPhShiftPerTxs[0].rlChirpPhShiftPerTx_t.chirpTx2PhaseShifter = (int)m_DynamicPerChirpPhaseShiftConfigParams.Chirp1Tx3PhaseShifter;
                                GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlDynPerChirpPhShftCfgs[j].rlDynPerChirpPhShftCfg_t.rlChirpPhShiftPerTxs[1].rlChirpPhShiftPerTx_t.chirpTx0PhaseShifter = (int)m_DynamicPerChirpPhaseShiftConfigParams.Chirp2Tx1PhaseShifter;
                                GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlDynPerChirpPhShftCfgs[j].rlDynPerChirpPhShftCfg_t.rlChirpPhShiftPerTxs[1].rlChirpPhShiftPerTx_t.chirpTx1PhaseShifter = (int)m_DynamicPerChirpPhaseShiftConfigParams.Chirp2Tx2PhaseShifter;
                                GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlDynPerChirpPhShftCfgs[j].rlDynPerChirpPhShftCfg_t.rlChirpPhShiftPerTxs[1].rlChirpPhShiftPerTx_t.chirpTx2PhaseShifter = (int)m_DynamicPerChirpPhaseShiftConfigParams.Chirp2Tx3PhaseShifter;
                                GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlDynPerChirpPhShftCfgs[j].rlDynPerChirpPhShftCfg_t.rlChirpPhShiftPerTxs[2].rlChirpPhShiftPerTx_t.chirpTx0PhaseShifter = (int)m_DynamicPerChirpPhaseShiftConfigParams.Chirp3Tx1PhaseShifter;
                                GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlDynPerChirpPhShftCfgs[j].rlDynPerChirpPhShftCfg_t.rlChirpPhShiftPerTxs[2].rlChirpPhShiftPerTx_t.chirpTx1PhaseShifter = (int)m_DynamicPerChirpPhaseShiftConfigParams.Chirp3Tx2PhaseShifter;
                                GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlDynPerChirpPhShftCfgs[j].rlDynPerChirpPhShftCfg_t.rlChirpPhShiftPerTxs[2].rlChirpPhShiftPerTx_t.chirpTx2PhaseShifter = (int)m_DynamicPerChirpPhaseShiftConfigParams.Chirp3Tx3PhaseShifter;
                                GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlDynPerChirpPhShftCfgs[j].rlDynPerChirpPhShftCfg_t.rlChirpPhShiftPerTxs[3].rlChirpPhShiftPerTx_t.chirpTx0PhaseShifter = (int)m_DynamicPerChirpPhaseShiftConfigParams.Chirp4Tx1PhaseShifter;
                                GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlDynPerChirpPhShftCfgs[j].rlDynPerChirpPhShftCfg_t.rlChirpPhShiftPerTxs[3].rlChirpPhShiftPerTx_t.chirpTx1PhaseShifter = (int)m_DynamicPerChirpPhaseShiftConfigParams.Chirp4Tx2PhaseShifter;
                                GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlDynPerChirpPhShftCfgs[j].rlDynPerChirpPhShftCfg_t.rlChirpPhShiftPerTxs[3].rlChirpPhShiftPerTx_t.chirpTx2PhaseShifter = (int)m_DynamicPerChirpPhaseShiftConfigParams.Chirp4Tx3PhaseShifter;
                                GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlDynPerChirpPhShftCfgs[j].rlDynPerChirpPhShftCfg_t.rlChirpPhShiftPerTxs[4].rlChirpPhShiftPerTx_t.chirpTx0PhaseShifter = (int)m_DynamicPerChirpPhaseShiftConfigParams.Chirp5Tx1PhaseShifter;
                                GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlDynPerChirpPhShftCfgs[j].rlDynPerChirpPhShftCfg_t.rlChirpPhShiftPerTxs[4].rlChirpPhShiftPerTx_t.chirpTx1PhaseShifter = (int)m_DynamicPerChirpPhaseShiftConfigParams.Chirp5Tx2PhaseShifter;
                                GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlDynPerChirpPhShftCfgs[j].rlDynPerChirpPhShftCfg_t.rlChirpPhShiftPerTxs[4].rlChirpPhShiftPerTx_t.chirpTx2PhaseShifter = (int)m_DynamicPerChirpPhaseShiftConfigParams.Chirp5Tx3PhaseShifter;
                                GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlDynPerChirpPhShftCfgs[j].rlDynPerChirpPhShftCfg_t.rlChirpPhShiftPerTxs[5].rlChirpPhShiftPerTx_t.chirpTx0PhaseShifter = (int)m_DynamicPerChirpPhaseShiftConfigParams.Chirp6Tx1PhaseShifter;
                                GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlDynPerChirpPhShftCfgs[j].rlDynPerChirpPhShftCfg_t.rlChirpPhShiftPerTxs[5].rlChirpPhShiftPerTx_t.chirpTx1PhaseShifter = (int)m_DynamicPerChirpPhaseShiftConfigParams.Chirp6Tx2PhaseShifter;
                                GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlDynPerChirpPhShftCfgs[j].rlDynPerChirpPhShftCfg_t.rlChirpPhShiftPerTxs[5].rlChirpPhShiftPerTx_t.chirpTx2PhaseShifter = (int)m_DynamicPerChirpPhaseShiftConfigParams.Chirp6Tx3PhaseShifter;
                                GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlDynPerChirpPhShftCfgs[j].rlDynPerChirpPhShftCfg_t.rlChirpPhShiftPerTxs[6].rlChirpPhShiftPerTx_t.chirpTx0PhaseShifter = (int)m_DynamicPerChirpPhaseShiftConfigParams.Chirp7Tx1PhaseShifter;
                                GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlDynPerChirpPhShftCfgs[j].rlDynPerChirpPhShftCfg_t.rlChirpPhShiftPerTxs[6].rlChirpPhShiftPerTx_t.chirpTx1PhaseShifter = (int)m_DynamicPerChirpPhaseShiftConfigParams.Chirp7Tx2PhaseShifter;
                                GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlDynPerChirpPhShftCfgs[j].rlDynPerChirpPhShftCfg_t.rlChirpPhShiftPerTxs[6].rlChirpPhShiftPerTx_t.chirpTx2PhaseShifter = (int)m_DynamicPerChirpPhaseShiftConfigParams.Chirp7Tx3PhaseShifter;
                                GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlDynPerChirpPhShftCfgs[j].rlDynPerChirpPhShftCfg_t.rlChirpPhShiftPerTxs[7].rlChirpPhShiftPerTx_t.chirpTx0PhaseShifter = (int)m_DynamicPerChirpPhaseShiftConfigParams.Chirp8Tx1PhaseShifter;
                                GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlDynPerChirpPhShftCfgs[j].rlDynPerChirpPhShftCfg_t.rlChirpPhShiftPerTxs[7].rlChirpPhShiftPerTx_t.chirpTx1PhaseShifter = (int)m_DynamicPerChirpPhaseShiftConfigParams.Chirp8Tx2PhaseShifter;
                                GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlDynPerChirpPhShftCfgs[j].rlDynPerChirpPhShftCfg_t.rlChirpPhShiftPerTxs[7].rlChirpPhShiftPerTx_t.chirpTx2PhaseShifter = (int)m_DynamicPerChirpPhaseShiftConfigParams.Chirp8Tx3PhaseShifter;
                                GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlDynPerChirpPhShftCfgs[j].rlDynPerChirpPhShftCfg_t.rlChirpPhShiftPerTxs[8].rlChirpPhShiftPerTx_t.chirpTx0PhaseShifter = (int)m_DynamicPerChirpPhaseShiftConfigParams.Chirp9Tx1PhaseShifter;
                                GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlDynPerChirpPhShftCfgs[j].rlDynPerChirpPhShftCfg_t.rlChirpPhShiftPerTxs[8].rlChirpPhShiftPerTx_t.chirpTx1PhaseShifter = (int)m_DynamicPerChirpPhaseShiftConfigParams.Chirp9Tx2PhaseShifter;
                                GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlDynPerChirpPhShftCfgs[j].rlDynPerChirpPhShftCfg_t.rlChirpPhShiftPerTxs[8].rlChirpPhShiftPerTx_t.chirpTx2PhaseShifter = (int)m_DynamicPerChirpPhaseShiftConfigParams.Chirp9Tx3PhaseShifter;
                                GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlDynPerChirpPhShftCfgs[j].rlDynPerChirpPhShftCfg_t.rlChirpPhShiftPerTxs[9].rlChirpPhShiftPerTx_t.chirpTx0PhaseShifter = (int)m_DynamicPerChirpPhaseShiftConfigParams.Chirp10Tx1PhaseShifter;
                                GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlDynPerChirpPhShftCfgs[j].rlDynPerChirpPhShftCfg_t.rlChirpPhShiftPerTxs[9].rlChirpPhShiftPerTx_t.chirpTx1PhaseShifter = (int)m_DynamicPerChirpPhaseShiftConfigParams.Chirp10Tx2PhaseShifter;
                                GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlDynPerChirpPhShftCfgs[j].rlDynPerChirpPhShftCfg_t.rlChirpPhShiftPerTxs[9].rlChirpPhShiftPerTx_t.chirpTx2PhaseShifter = (int)m_DynamicPerChirpPhaseShiftConfigParams.Chirp10Tx3PhaseShifter;
                                GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlDynPerChirpPhShftCfgs[j].rlDynPerChirpPhShftCfg_t.rlChirpPhShiftPerTxs[10].rlChirpPhShiftPerTx_t.chirpTx0PhaseShifter = (int)m_DynamicPerChirpPhaseShiftConfigParams.Chirp11Tx1PhaseShifter;
                                GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlDynPerChirpPhShftCfgs[j].rlDynPerChirpPhShftCfg_t.rlChirpPhShiftPerTxs[10].rlChirpPhShiftPerTx_t.chirpTx1PhaseShifter = (int)m_DynamicPerChirpPhaseShiftConfigParams.Chirp11Tx2PhaseShifter;
                                GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlDynPerChirpPhShftCfgs[j].rlDynPerChirpPhShftCfg_t.rlChirpPhShiftPerTxs[10].rlChirpPhShiftPerTx_t.chirpTx2PhaseShifter = (int)m_DynamicPerChirpPhaseShiftConfigParams.Chirp11Tx3PhaseShifter;
                                GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlDynPerChirpPhShftCfgs[j].rlDynPerChirpPhShftCfg_t.rlChirpPhShiftPerTxs[11].rlChirpPhShiftPerTx_t.chirpTx0PhaseShifter = (int)m_DynamicPerChirpPhaseShiftConfigParams.Chirp12Tx1PhaseShifter;
                                GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlDynPerChirpPhShftCfgs[j].rlDynPerChirpPhShftCfg_t.rlChirpPhShiftPerTxs[11].rlChirpPhShiftPerTx_t.chirpTx1PhaseShifter = (int)m_DynamicPerChirpPhaseShiftConfigParams.Chirp12Tx2PhaseShifter;
                                GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlDynPerChirpPhShftCfgs[j].rlDynPerChirpPhShftCfg_t.rlChirpPhShiftPerTxs[11].rlChirpPhShiftPerTx_t.chirpTx2PhaseShifter = (int)m_DynamicPerChirpPhaseShiftConfigParams.Chirp12Tx3PhaseShifter;
                                GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlDynPerChirpPhShftCfgs[j].rlDynPerChirpPhShftCfg_t.rlChirpPhShiftPerTxs[12].rlChirpPhShiftPerTx_t.chirpTx0PhaseShifter = (int)m_DynamicPerChirpPhaseShiftConfigParams.Chirp13Tx1PhaseShifter;
                                GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlDynPerChirpPhShftCfgs[j].rlDynPerChirpPhShftCfg_t.rlChirpPhShiftPerTxs[12].rlChirpPhShiftPerTx_t.chirpTx1PhaseShifter = (int)m_DynamicPerChirpPhaseShiftConfigParams.Chirp13Tx2PhaseShifter;
                                GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlDynPerChirpPhShftCfgs[j].rlDynPerChirpPhShftCfg_t.rlChirpPhShiftPerTxs[12].rlChirpPhShiftPerTx_t.chirpTx2PhaseShifter = (int)m_DynamicPerChirpPhaseShiftConfigParams.Chirp13Tx3PhaseShifter;
                                GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlDynPerChirpPhShftCfgs[j].rlDynPerChirpPhShftCfg_t.rlChirpPhShiftPerTxs[13].rlChirpPhShiftPerTx_t.chirpTx0PhaseShifter = (int)m_DynamicPerChirpPhaseShiftConfigParams.Chirp14Tx1PhaseShifter;
                                GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlDynPerChirpPhShftCfgs[j].rlDynPerChirpPhShftCfg_t.rlChirpPhShiftPerTxs[13].rlChirpPhShiftPerTx_t.chirpTx1PhaseShifter = (int)m_DynamicPerChirpPhaseShiftConfigParams.Chirp14Tx2PhaseShifter;
                                GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlDynPerChirpPhShftCfgs[j].rlDynPerChirpPhShftCfg_t.rlChirpPhShiftPerTxs[13].rlChirpPhShiftPerTx_t.chirpTx2PhaseShifter = (int)m_DynamicPerChirpPhaseShiftConfigParams.Chirp14Tx3PhaseShifter;
                                GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlDynPerChirpPhShftCfgs[j].rlDynPerChirpPhShftCfg_t.rlChirpPhShiftPerTxs[14].rlChirpPhShiftPerTx_t.chirpTx0PhaseShifter = (int)m_DynamicPerChirpPhaseShiftConfigParams.Chirp15Tx1PhaseShifter;
                                GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlDynPerChirpPhShftCfgs[j].rlDynPerChirpPhShftCfg_t.rlChirpPhShiftPerTxs[14].rlChirpPhShiftPerTx_t.chirpTx1PhaseShifter = (int)m_DynamicPerChirpPhaseShiftConfigParams.Chirp15Tx2PhaseShifter;
                                GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlDynPerChirpPhShftCfgs[j].rlDynPerChirpPhShftCfg_t.rlChirpPhShiftPerTxs[14].rlChirpPhShiftPerTx_t.chirpTx2PhaseShifter = (int)m_DynamicPerChirpPhaseShiftConfigParams.Chirp15Tx3PhaseShifter;
                                GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlDynPerChirpPhShftCfgs[j].rlDynPerChirpPhShftCfg_t.rlChirpPhShiftPerTxs[15].rlChirpPhShiftPerTx_t.chirpTx0PhaseShifter = (int)m_DynamicPerChirpPhaseShiftConfigParams.Chirp16Tx1PhaseShifter;
                                GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlDynPerChirpPhShftCfgs[j].rlDynPerChirpPhShftCfg_t.rlChirpPhShiftPerTxs[15].rlChirpPhShiftPerTx_t.chirpTx1PhaseShifter = (int)m_DynamicPerChirpPhaseShiftConfigParams.Chirp16Tx2PhaseShifter;
                                GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlDynPerChirpPhShftCfgs[j].rlDynPerChirpPhShftCfg_t.rlChirpPhShiftPerTxs[15].rlChirpPhShiftPerTx_t.chirpTx2PhaseShifter = (int)m_DynamicPerChirpPhaseShiftConfigParams.Chirp16Tx3PhaseShifter;
                                break;
                            }
                        }
                        if (j == GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlDynPerChirpPhShftCfgs.Count)
                        {
                            GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlDynPerChirpPhShftCfgs.Add(new RlDynPerChirpPhShftCfgs());
                            GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlDynPerChirpPhShftCfgs[j].rlDynPerChirpPhShftCfg_t = new RlDynPerChirpPhShftCfgT();
                            GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlDynPerChirpPhShftCfgs[j].rlDynPerChirpPhShftCfg_t.rlChirpPhShiftPerTxs = new List<RlChirpPhShiftPerTxs>();
                            for (int k = 0; k < 16; k++)
                            {
                                GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlDynPerChirpPhShftCfgs[j].rlDynPerChirpPhShftCfg_t.rlChirpPhShiftPerTxs.Add(new RlChirpPhShiftPerTxs());
                                GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlDynPerChirpPhShftCfgs[j].rlDynPerChirpPhShftCfg_t.rlChirpPhShiftPerTxs[k].rlChirpPhShiftPerTx_t = new RlChirpPhShiftPerTxT();
                            }
                            GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlDynPerChirpPhShftCfgs[j].rlDynPerChirpPhShftCfg_t.chirpSegSel = (int)m_DynamicPerChirpPhaseShiftConfigParams.ChirpSegmentSelect;
                            GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlDynPerChirpPhShftCfgs[j].rlDynPerChirpPhShftCfg_t.rlChirpPhShiftPerTxs[0].rlChirpPhShiftPerTx_t.chirpTx0PhaseShifter = (int)m_DynamicPerChirpPhaseShiftConfigParams.Chirp1Tx1PhaseShifter;
                            GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlDynPerChirpPhShftCfgs[j].rlDynPerChirpPhShftCfg_t.rlChirpPhShiftPerTxs[0].rlChirpPhShiftPerTx_t.chirpTx1PhaseShifter = (int)m_DynamicPerChirpPhaseShiftConfigParams.Chirp1Tx2PhaseShifter;
                            GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlDynPerChirpPhShftCfgs[j].rlDynPerChirpPhShftCfg_t.rlChirpPhShiftPerTxs[0].rlChirpPhShiftPerTx_t.chirpTx2PhaseShifter = (int)m_DynamicPerChirpPhaseShiftConfigParams.Chirp1Tx3PhaseShifter;
                            GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlDynPerChirpPhShftCfgs[j].rlDynPerChirpPhShftCfg_t.rlChirpPhShiftPerTxs[1].rlChirpPhShiftPerTx_t.chirpTx0PhaseShifter = (int)m_DynamicPerChirpPhaseShiftConfigParams.Chirp2Tx1PhaseShifter;
                            GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlDynPerChirpPhShftCfgs[j].rlDynPerChirpPhShftCfg_t.rlChirpPhShiftPerTxs[1].rlChirpPhShiftPerTx_t.chirpTx1PhaseShifter = (int)m_DynamicPerChirpPhaseShiftConfigParams.Chirp2Tx2PhaseShifter;
                            GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlDynPerChirpPhShftCfgs[j].rlDynPerChirpPhShftCfg_t.rlChirpPhShiftPerTxs[1].rlChirpPhShiftPerTx_t.chirpTx2PhaseShifter = (int)m_DynamicPerChirpPhaseShiftConfigParams.Chirp2Tx3PhaseShifter;
                            GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlDynPerChirpPhShftCfgs[j].rlDynPerChirpPhShftCfg_t.rlChirpPhShiftPerTxs[2].rlChirpPhShiftPerTx_t.chirpTx0PhaseShifter = (int)m_DynamicPerChirpPhaseShiftConfigParams.Chirp3Tx1PhaseShifter;
                            GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlDynPerChirpPhShftCfgs[j].rlDynPerChirpPhShftCfg_t.rlChirpPhShiftPerTxs[2].rlChirpPhShiftPerTx_t.chirpTx1PhaseShifter = (int)m_DynamicPerChirpPhaseShiftConfigParams.Chirp3Tx2PhaseShifter;
                            GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlDynPerChirpPhShftCfgs[j].rlDynPerChirpPhShftCfg_t.rlChirpPhShiftPerTxs[2].rlChirpPhShiftPerTx_t.chirpTx2PhaseShifter = (int)m_DynamicPerChirpPhaseShiftConfigParams.Chirp3Tx3PhaseShifter;
                            GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlDynPerChirpPhShftCfgs[j].rlDynPerChirpPhShftCfg_t.rlChirpPhShiftPerTxs[3].rlChirpPhShiftPerTx_t.chirpTx0PhaseShifter = (int)m_DynamicPerChirpPhaseShiftConfigParams.Chirp4Tx1PhaseShifter;
                            GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlDynPerChirpPhShftCfgs[j].rlDynPerChirpPhShftCfg_t.rlChirpPhShiftPerTxs[3].rlChirpPhShiftPerTx_t.chirpTx1PhaseShifter = (int)m_DynamicPerChirpPhaseShiftConfigParams.Chirp4Tx2PhaseShifter;
                            GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlDynPerChirpPhShftCfgs[j].rlDynPerChirpPhShftCfg_t.rlChirpPhShiftPerTxs[3].rlChirpPhShiftPerTx_t.chirpTx2PhaseShifter = (int)m_DynamicPerChirpPhaseShiftConfigParams.Chirp4Tx3PhaseShifter;
                            GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlDynPerChirpPhShftCfgs[j].rlDynPerChirpPhShftCfg_t.rlChirpPhShiftPerTxs[4].rlChirpPhShiftPerTx_t.chirpTx0PhaseShifter = (int)m_DynamicPerChirpPhaseShiftConfigParams.Chirp5Tx1PhaseShifter;
                            GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlDynPerChirpPhShftCfgs[j].rlDynPerChirpPhShftCfg_t.rlChirpPhShiftPerTxs[4].rlChirpPhShiftPerTx_t.chirpTx1PhaseShifter = (int)m_DynamicPerChirpPhaseShiftConfigParams.Chirp5Tx2PhaseShifter;
                            GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlDynPerChirpPhShftCfgs[j].rlDynPerChirpPhShftCfg_t.rlChirpPhShiftPerTxs[4].rlChirpPhShiftPerTx_t.chirpTx2PhaseShifter = (int)m_DynamicPerChirpPhaseShiftConfigParams.Chirp5Tx3PhaseShifter;
                            GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlDynPerChirpPhShftCfgs[j].rlDynPerChirpPhShftCfg_t.rlChirpPhShiftPerTxs[5].rlChirpPhShiftPerTx_t.chirpTx0PhaseShifter = (int)m_DynamicPerChirpPhaseShiftConfigParams.Chirp6Tx1PhaseShifter;
                            GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlDynPerChirpPhShftCfgs[j].rlDynPerChirpPhShftCfg_t.rlChirpPhShiftPerTxs[5].rlChirpPhShiftPerTx_t.chirpTx1PhaseShifter = (int)m_DynamicPerChirpPhaseShiftConfigParams.Chirp6Tx2PhaseShifter;
                            GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlDynPerChirpPhShftCfgs[j].rlDynPerChirpPhShftCfg_t.rlChirpPhShiftPerTxs[5].rlChirpPhShiftPerTx_t.chirpTx2PhaseShifter = (int)m_DynamicPerChirpPhaseShiftConfigParams.Chirp6Tx3PhaseShifter;
                            GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlDynPerChirpPhShftCfgs[j].rlDynPerChirpPhShftCfg_t.rlChirpPhShiftPerTxs[6].rlChirpPhShiftPerTx_t.chirpTx0PhaseShifter = (int)m_DynamicPerChirpPhaseShiftConfigParams.Chirp7Tx1PhaseShifter;
                            GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlDynPerChirpPhShftCfgs[j].rlDynPerChirpPhShftCfg_t.rlChirpPhShiftPerTxs[6].rlChirpPhShiftPerTx_t.chirpTx1PhaseShifter = (int)m_DynamicPerChirpPhaseShiftConfigParams.Chirp7Tx2PhaseShifter;
                            GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlDynPerChirpPhShftCfgs[j].rlDynPerChirpPhShftCfg_t.rlChirpPhShiftPerTxs[6].rlChirpPhShiftPerTx_t.chirpTx2PhaseShifter = (int)m_DynamicPerChirpPhaseShiftConfigParams.Chirp7Tx3PhaseShifter;
                            GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlDynPerChirpPhShftCfgs[j].rlDynPerChirpPhShftCfg_t.rlChirpPhShiftPerTxs[7].rlChirpPhShiftPerTx_t.chirpTx0PhaseShifter = (int)m_DynamicPerChirpPhaseShiftConfigParams.Chirp8Tx1PhaseShifter;
                            GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlDynPerChirpPhShftCfgs[j].rlDynPerChirpPhShftCfg_t.rlChirpPhShiftPerTxs[7].rlChirpPhShiftPerTx_t.chirpTx1PhaseShifter = (int)m_DynamicPerChirpPhaseShiftConfigParams.Chirp8Tx2PhaseShifter;
                            GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlDynPerChirpPhShftCfgs[j].rlDynPerChirpPhShftCfg_t.rlChirpPhShiftPerTxs[7].rlChirpPhShiftPerTx_t.chirpTx2PhaseShifter = (int)m_DynamicPerChirpPhaseShiftConfigParams.Chirp8Tx3PhaseShifter;
                            GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlDynPerChirpPhShftCfgs[j].rlDynPerChirpPhShftCfg_t.rlChirpPhShiftPerTxs[8].rlChirpPhShiftPerTx_t.chirpTx0PhaseShifter = (int)m_DynamicPerChirpPhaseShiftConfigParams.Chirp9Tx1PhaseShifter;
                            GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlDynPerChirpPhShftCfgs[j].rlDynPerChirpPhShftCfg_t.rlChirpPhShiftPerTxs[8].rlChirpPhShiftPerTx_t.chirpTx1PhaseShifter = (int)m_DynamicPerChirpPhaseShiftConfigParams.Chirp9Tx2PhaseShifter;
                            GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlDynPerChirpPhShftCfgs[j].rlDynPerChirpPhShftCfg_t.rlChirpPhShiftPerTxs[8].rlChirpPhShiftPerTx_t.chirpTx2PhaseShifter = (int)m_DynamicPerChirpPhaseShiftConfigParams.Chirp9Tx3PhaseShifter;
                            GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlDynPerChirpPhShftCfgs[j].rlDynPerChirpPhShftCfg_t.rlChirpPhShiftPerTxs[9].rlChirpPhShiftPerTx_t.chirpTx0PhaseShifter = (int)m_DynamicPerChirpPhaseShiftConfigParams.Chirp10Tx1PhaseShifter;
                            GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlDynPerChirpPhShftCfgs[j].rlDynPerChirpPhShftCfg_t.rlChirpPhShiftPerTxs[9].rlChirpPhShiftPerTx_t.chirpTx1PhaseShifter = (int)m_DynamicPerChirpPhaseShiftConfigParams.Chirp10Tx2PhaseShifter;
                            GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlDynPerChirpPhShftCfgs[j].rlDynPerChirpPhShftCfg_t.rlChirpPhShiftPerTxs[9].rlChirpPhShiftPerTx_t.chirpTx2PhaseShifter = (int)m_DynamicPerChirpPhaseShiftConfigParams.Chirp10Tx3PhaseShifter;
                            GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlDynPerChirpPhShftCfgs[j].rlDynPerChirpPhShftCfg_t.rlChirpPhShiftPerTxs[10].rlChirpPhShiftPerTx_t.chirpTx0PhaseShifter = (int)m_DynamicPerChirpPhaseShiftConfigParams.Chirp11Tx1PhaseShifter;
                            GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlDynPerChirpPhShftCfgs[j].rlDynPerChirpPhShftCfg_t.rlChirpPhShiftPerTxs[10].rlChirpPhShiftPerTx_t.chirpTx1PhaseShifter = (int)m_DynamicPerChirpPhaseShiftConfigParams.Chirp11Tx2PhaseShifter;
                            GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlDynPerChirpPhShftCfgs[j].rlDynPerChirpPhShftCfg_t.rlChirpPhShiftPerTxs[10].rlChirpPhShiftPerTx_t.chirpTx2PhaseShifter = (int)m_DynamicPerChirpPhaseShiftConfigParams.Chirp11Tx3PhaseShifter;
                            GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlDynPerChirpPhShftCfgs[j].rlDynPerChirpPhShftCfg_t.rlChirpPhShiftPerTxs[11].rlChirpPhShiftPerTx_t.chirpTx0PhaseShifter = (int)m_DynamicPerChirpPhaseShiftConfigParams.Chirp12Tx1PhaseShifter;
                            GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlDynPerChirpPhShftCfgs[j].rlDynPerChirpPhShftCfg_t.rlChirpPhShiftPerTxs[11].rlChirpPhShiftPerTx_t.chirpTx1PhaseShifter = (int)m_DynamicPerChirpPhaseShiftConfigParams.Chirp12Tx2PhaseShifter;
                            GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlDynPerChirpPhShftCfgs[j].rlDynPerChirpPhShftCfg_t.rlChirpPhShiftPerTxs[11].rlChirpPhShiftPerTx_t.chirpTx2PhaseShifter = (int)m_DynamicPerChirpPhaseShiftConfigParams.Chirp12Tx3PhaseShifter;
                            GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlDynPerChirpPhShftCfgs[j].rlDynPerChirpPhShftCfg_t.rlChirpPhShiftPerTxs[12].rlChirpPhShiftPerTx_t.chirpTx0PhaseShifter = (int)m_DynamicPerChirpPhaseShiftConfigParams.Chirp13Tx1PhaseShifter;
                            GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlDynPerChirpPhShftCfgs[j].rlDynPerChirpPhShftCfg_t.rlChirpPhShiftPerTxs[12].rlChirpPhShiftPerTx_t.chirpTx1PhaseShifter = (int)m_DynamicPerChirpPhaseShiftConfigParams.Chirp13Tx2PhaseShifter;
                            GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlDynPerChirpPhShftCfgs[j].rlDynPerChirpPhShftCfg_t.rlChirpPhShiftPerTxs[12].rlChirpPhShiftPerTx_t.chirpTx2PhaseShifter = (int)m_DynamicPerChirpPhaseShiftConfigParams.Chirp13Tx3PhaseShifter;
                            GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlDynPerChirpPhShftCfgs[j].rlDynPerChirpPhShftCfg_t.rlChirpPhShiftPerTxs[13].rlChirpPhShiftPerTx_t.chirpTx0PhaseShifter = (int)m_DynamicPerChirpPhaseShiftConfigParams.Chirp14Tx1PhaseShifter;
                            GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlDynPerChirpPhShftCfgs[j].rlDynPerChirpPhShftCfg_t.rlChirpPhShiftPerTxs[13].rlChirpPhShiftPerTx_t.chirpTx1PhaseShifter = (int)m_DynamicPerChirpPhaseShiftConfigParams.Chirp14Tx2PhaseShifter;
                            GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlDynPerChirpPhShftCfgs[j].rlDynPerChirpPhShftCfg_t.rlChirpPhShiftPerTxs[13].rlChirpPhShiftPerTx_t.chirpTx2PhaseShifter = (int)m_DynamicPerChirpPhaseShiftConfigParams.Chirp14Tx3PhaseShifter;
                            GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlDynPerChirpPhShftCfgs[j].rlDynPerChirpPhShftCfg_t.rlChirpPhShiftPerTxs[14].rlChirpPhShiftPerTx_t.chirpTx0PhaseShifter = (int)m_DynamicPerChirpPhaseShiftConfigParams.Chirp15Tx1PhaseShifter;
                            GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlDynPerChirpPhShftCfgs[j].rlDynPerChirpPhShftCfg_t.rlChirpPhShiftPerTxs[14].rlChirpPhShiftPerTx_t.chirpTx1PhaseShifter = (int)m_DynamicPerChirpPhaseShiftConfigParams.Chirp15Tx2PhaseShifter;
                            GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlDynPerChirpPhShftCfgs[j].rlDynPerChirpPhShftCfg_t.rlChirpPhShiftPerTxs[14].rlChirpPhShiftPerTx_t.chirpTx2PhaseShifter = (int)m_DynamicPerChirpPhaseShiftConfigParams.Chirp15Tx3PhaseShifter;
                            GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlDynPerChirpPhShftCfgs[j].rlDynPerChirpPhShftCfg_t.rlChirpPhShiftPerTxs[15].rlChirpPhShiftPerTx_t.chirpTx0PhaseShifter = (int)m_DynamicPerChirpPhaseShiftConfigParams.Chirp16Tx1PhaseShifter;
                            GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlDynPerChirpPhShftCfgs[j].rlDynPerChirpPhShftCfg_t.rlChirpPhShiftPerTxs[15].rlChirpPhShiftPerTx_t.chirpTx1PhaseShifter = (int)m_DynamicPerChirpPhaseShiftConfigParams.Chirp16Tx2PhaseShifter;
                            GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlDynPerChirpPhShftCfgs[j].rlDynPerChirpPhShftCfg_t.rlChirpPhShiftPerTxs[15].rlChirpPhShiftPerTx_t.chirpTx2PhaseShifter = (int)m_DynamicPerChirpPhaseShiftConfigParams.Chirp16Tx3PhaseShifter;
                        }
                    }
                }
            }
            else
            {
                string msg = string.Format("Status: Failed, Error Type: {0}", new object[]
                {
                    GetErrorType(num)
                });
                GlobalRef.LuaWrapper.PrintError(msg);
            }
            if (GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
            {
                if (iRs232ConnectDisconnect_impl() == 0 && !GlobalRef.g_NtvRS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
                {
                    m_GuiManager.DllOps.iConnect(1U, 0U);
                    string full_command5 = string.Format("Debug Port Reconnected!", new object[0]);
                    m_GuiManager.RecordLog(9, full_command5);
                    ScriptOps.KeepTrying(2000, new Func<bool>(spare_read));
                }
            }
            else if (GlobalRef.g_CasCadeDeviceSpiConnect == 0U)
            {
                string full_command6 = string.Format("Error Occurred in Port open close", new object[0]);
                m_GuiManager.RecordLog(9, full_command6);
            }
            return num;
        }

        private int iDynamicChirpEnableConfig_Impl(bool is_starting_op, bool is_ending_op)
        {
            DynamicChirpEnableConfigurationParam.Reserved = m_DynamicChirpEnableConfigParams.Reserved;
            IntPtr inData = GCHandle.Alloc(DynamicChirpEnableConfigurationParam, GCHandleType.Pinned).AddrOfPinnedObject();
            int num;
            if (GlobalRef.g_NtvRS232Connect[(int)GlobalRef.g_RadarDeviceIndex] && GlobalRef.g_CasCadeDeviceSpiConnect == 0U)
            {
                num = m_TsWrapper.Calling_WriteAddr_Single(4294959848U, 1U);
                if (m_GuiManager.DllOps.itempDisconnect(false) == 0)
                {
                    string full_command = string.Format("Debug Port Disconnected", new object[0]);
                    m_GuiManager.RecordLog(0, full_command);
                    if (!GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
                    {
                        iRs232ConnectDisconnect_impl();
                    }
                }
            }
            Thread.Sleep(200);
            if (m_RadarDeviceModeConfigParams.NumberOfRadarDevicesDetected <= 1)
            {
                string full_command2 = string.Format("ar1.DynamicChirpEnableCfgSet({0})", new object[]
                {
                    m_DynamicChirpEnableConfigParams.Reserved
                });
                m_GuiManager.RecordLog(15, full_command2);
            }
            else
            {
                string full_command3 = string.Format("ar1.DynamicChirpEnableCfgSet_mult({0}, {1}})", new object[]
                {
                    GlobalRef.g_RadarDeviceId,
                    m_DynamicChirpEnableConfigParams.Reserved
                });
                m_GuiManager.RecordLog(15, full_command3);
            }
            num = Imports.RadarLinkImpl_SetDynChirpEn((byte)GlobalRef.g_RadarDeviceId, inData);
            if ((num == 0 && ((GlobalRef.g_CasCadeDeviceSpiConnect & 1U) == 1U || (GlobalRef.g_CasCadeDeviceSpiConnect & 2U) == 2U || (GlobalRef.g_CasCadeDeviceSpiConnect & 4U) == 4U || (GlobalRef.g_CasCadeDeviceSpiConnect & 8U) == 8U)) || GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
            {
                string full_command4 = string.Format("Status: Passed", new object[0]);
                m_GuiManager.RecordLog(8, full_command4);
            }
            else
            {
                string msg = string.Format("Status: Failed, Error Type: {0}", new object[]
                {
                    GetErrorType(num)
                });
                GlobalRef.LuaWrapper.PrintError(msg);
            }
            if (GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
            {
                if (iRs232ConnectDisconnect_impl() == 0 && !GlobalRef.g_NtvRS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
                {
                    m_GuiManager.DllOps.iConnect(1U, 0U);
                    string full_command5 = string.Format("Debug Port Reconnected!", new object[0]);
                    m_GuiManager.RecordLog(9, full_command5);
                    ScriptOps.KeepTrying(2000, new Func<bool>(spare_read));
                }
            }
            else if (GlobalRef.g_CasCadeDeviceSpiConnect == 0U)
            {
                string full_command6 = string.Format("Error Occurred in Port open close", new object[0]);
                m_GuiManager.RecordLog(9, full_command6);
            }
            return num;
        }

        private int iRampTimingConfig_Impl(bool is_starting_op, bool is_ending_op)
        {
            int num = 0;
            double num2 = 0.0;
            double num3 = 0.0;
            double num4 = 0.0;
            uint num5 = (uint)Math.Ceiling((double)(m_RampTimingConfigParams.Slope * m_RampTimingConfigParams.ADCSamples / m_RampTimingConfigParams.SampleRate * 1000f));
            uint num6;
            if (m_RampTimingConfigParams.Slope <= 50f)
            {
                num6 = 1U;
            }
            else
            {
                num6 = 2U;
            }
            uint num7;
            if (1U == m_RampTimingConfigParams.DFEMode)
            {
                num7 = 3U;
            }
            else
            {
                num7 = 2U;
            }
            num7 -= m_RampTimingConfigParams.ProgFiltEnable;
            uint num8 = m_RampTimingConfigParams.SampleRate * (uint)Math.Pow(2.0, num7);
            uint num9 = (uint)Math.Pow(2.0, m_RampTimingConfigParams.ADCHalfRateEnable);
            double num10 = 1800U / (18U * num9);
            double num11 = 1000.0 / num8;
            uint dfenumOptDecimStages = (uint)Math.Ceiling(Math.Log(num10 * num11, 2.0));
            if (m_RampTimingConfigParams.ADCFullRateEnable == 1U)
            {
                string empty = string.Empty;
                string[] array = FindFullandHalfRateDataFromTpipe(m_RampTimingConfigParams.DFEMode, m_RampTimingConfigParams.ADCFullRateEnable, dfenumOptDecimStages).Split(new char[]
                {
                    ','
                });
                uint num12 = Convert.ToUInt32(array[0]);
                double num13 = Convert.ToDouble(array[1]);
                if (num12 == 0U && num13 == 0.0)
                {
                    MessageBox.Show("Number of decimation stages is 0 in full rate mode!", "Error", MessageBoxButtons.OK, MessageBoxIcon.Hand);
                    return num;
                }
                num2 = num13 + num12 / (m_RampTimingConfigParams.SampleRate * Math.Pow(2.0, m_RampTimingConfigParams.ProgFiltEnable));
            }
            if (m_RampTimingConfigParams.ADCHalfRateEnable == 1U)
            {
                string empty2 = string.Empty;
                string[] array2 = FindFullandHalfRateDataFromTpipe(m_RampTimingConfigParams.DFEMode, 2U, dfenumOptDecimStages).Split(new char[]
                {
                    ','
                });
                uint num12 = Convert.ToUInt32(array2[0]);
                double num13 = Convert.ToDouble(array2[1]);
                if (num12 == 0U && num13 == 0.0)
                {
                    MessageBox.Show(" Number of decimation stages is 0 in half rate mode!", "Error", MessageBoxButtons.OK, MessageBoxIcon.Hand);
                    return num;
                }
                num2 = num13 + num12 / (m_RampTimingConfigParams.SampleRate * Math.Pow(2.0, m_RampTimingConfigParams.ProgFiltEnable));
            }
            double num14;
            if (num2 <= 5.0)
            {
                num14 = num2;
            }
            else
            {
                num14 = 5.0;
            }
            if (m_RampTimingConfigParams.ADCFullRateEnable == 1U)
            {
                string empty3 = string.Empty;
                string[] array3 = FindFullandHalfRateDataFromDFETlag(m_RampTimingConfigParams.DFEMode, m_RampTimingConfigParams.ADCFullRateEnable, dfenumOptDecimStages).Split(new char[]
                {
                    ','
                });
                uint num15 = Convert.ToUInt32(array3[0]);
                double num16 = Convert.ToDouble(array3[1]);
                if (num15 == 0U && num16 == 0.0)
                {
                    MessageBox.Show(" Number of decimation stages is 0 in full rate mode!", "Error", MessageBoxButtons.OK, MessageBoxIcon.Hand);
                    return num;
                }
                num3 = num16 + num15 / (m_RampTimingConfigParams.SampleRate * Math.Pow(2.0, m_RampTimingConfigParams.ProgFiltEnable));
            }
            if (m_RampTimingConfigParams.ADCHalfRateEnable == 1U)
            {
                string empty4 = string.Empty;
                string[] array4 = FindFullandHalfRateDataFromDFETlag(m_RampTimingConfigParams.DFEMode, 2U, dfenumOptDecimStages).Split(new char[]
                {
                    ','
                });
                uint num15 = Convert.ToUInt32(array4[0]);
                double num16 = Convert.ToDouble(array4[1]);
                if (num15 == 0U && num16 == 0.0)
                {
                    MessageBox.Show(" Number of decimation stages is 0 in half rate mode!", "Error", MessageBoxButtons.OK, MessageBoxIcon.Hand);
                    return num;
                }
                num3 = num16 + num15 / (m_RampTimingConfigParams.SampleRate * Math.Pow(2.0, m_RampTimingConfigParams.ProgFiltEnable));
            }
            double num17 = Math.Round(num3 - num2, 2);
            if (m_RampTimingConfigParams.ADCFullRateEnable == 1U)
            {
                string empty5 = string.Empty;
                num4 = m00007a(m_RampTimingConfigParams.DFEMode, m_RampTimingConfigParams.ADCFullRateEnable, dfenumOptDecimStages, m_RampTimingConfigParams.SampleRate, m_RampTimingConfigParams.ProgFiltEnable);
                string[] array5 = empty5.Split(new char[]
                {
                    ','
                });
                uint num18 = Convert.ToUInt32(array5[0]);
                double num19 = Convert.ToDouble(array5[1]);
                if (num18 == 0U && num19 == 0.0)
                {
                    MessageBox.Show(" Number of decimation stages is 0 in full rate mode!", "Error", MessageBoxButtons.OK, MessageBoxIcon.Hand);
                    return num;
                }
            }
            if (m_RampTimingConfigParams.ADCHalfRateEnable == 1U)
            {
                string empty6 = string.Empty;
            }
            Math.Round(Math.Round(num4 - num2, 2) - num17, 2);
            m_RampTimingConfigParams.TxStartTime = num6;
            m_RampTimingConfigParams.ADCStartTime95 = num6 + num4 - num2 - num17;
            double num20 = m_RampTimingConfigParams.ADCSamples / m_RampTimingConfigParams.SampleRate * 1000.0;
            m_RampTimingConfigParams.RampEndTime = m_RampTimingConfigParams.ADCStartTime95 + num20 + num3 - num14;
            m_RampTimingConfigParams.RampEndTime = Math.Round(m_RampTimingConfigParams.RampEndTime, 2);
            uint num21 = (uint)((double)m_RampTimingConfigParams.Slope * m_RampTimingConfigParams.RampEndTime);
            double num22;
            if (num21 < 1000U)
            {
                num22 = 3.0;
            }
            else if (num21 < 2000U)
            {
                num22 = 5.0;
            }
            else if (num21 < 3000U)
            {
                num22 = 6.0;
            }
            else
            {
                num22 = 7.0;
            }
            if (num22 > num14)
            {
                m_RampTimingConfigParams.IdleTime = num22;
                m_RampTimingConfigParams.IdleTime = Math.Round(m_RampTimingConfigParams.IdleTime, 2);
            }
            else
            {
                m_RampTimingConfigParams.IdleTime = (uint)num14;
                m_RampTimingConfigParams.IdleTime = Math.Round(m_RampTimingConfigParams.IdleTime, 2);
            }
            ScriptOps.m_MainForm.RampTimingCfgTab.SetRampIdleTimeInGUI(Convert.ToString(m_RampTimingConfigParams.IdleTime));
            ScriptOps.m_MainForm.RampTimingCfgTab.SetTxStartTimeTimeInGUI(Convert.ToString(m_RampTimingConfigParams.TxStartTime));
            ScriptOps.m_MainForm.RampTimingCfgTab.m000073(Convert.ToString(m_RampTimingConfigParams.ADCStartTime95));
            ScriptOps.m_MainForm.RampTimingCfgTab.SetRampEndTimeInGUI(Convert.ToString(m_RampTimingConfigParams.RampEndTime));
            if (GlobalRef.g_NtvRS232Connect[(int)GlobalRef.g_RadarDeviceIndex] && !GlobalRef.g_SpiConnect[(int)GlobalRef.g_RadarDeviceIndex])
            {
                num = m_TsWrapper.Calling_WriteAddr_Single(4294959848U, 1U);
                if (m_GuiManager.DllOps.itempDisconnect(false) == 0)
                {
                    string full_command = string.Format("Debug Port Disconnected", new object[0]);
                    m_GuiManager.RecordLog(0, full_command);
                    if (!GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
                    {
                        iRs232ConnectDisconnect_impl();
                    }
                }
            }
            if ((num == 0 && GlobalRef.g_SpiConnect[(int)GlobalRef.g_RadarDeviceIndex]) || GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
            {
                string.Format("Status: Passed", new object[0]);
            }
            else
            {
                string msg = string.Format("Status: Failed, Error Type: {0}", new object[]
                {
                    GetErrorType(num)
                });
                GlobalRef.LuaWrapper.PrintError(msg);
            }
            if (GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
            {
                if (iRs232ConnectDisconnect_impl() == 0 && !GlobalRef.g_NtvRS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
                {
                    m_GuiManager.DllOps.iConnect(1U, 0U);
                    string full_command2 = string.Format("Debug Port Reconnected!", new object[0]);
                    m_GuiManager.RecordLog(9, full_command2);
                    ScriptOps.KeepTrying(2000, new Func<bool>(spare_read));
                }
            }
            else if (!GlobalRef.g_SpiConnect[(int)GlobalRef.g_RadarDeviceIndex])
            {
                string full_command3 = string.Format("Error Occurred in Port open close", new object[0]);
                m_GuiManager.RecordLog(9, full_command3);
            }
            return num;
        }

        private int iSetExternalFilterConfig_Impl(bool is_starting_op, bool is_ending_op)
        {
            ExternalProramFilterParm.ProfileIndex = (byte)m_ExternalFilterProgConfigParams.ProfileIndex;
            ExternalProramFilterParm.CoeffStartIndex = (byte)m_ExternalFilterProgConfigParams.PFFilterCoeffStartIndex;
            ExternalProramFilterParm.ProgFiterLength = (byte)m_ExternalFilterProgConfigParams.ProgFilterLength;
            int num = (int)(m_ExternalFilterProgConfigParams.FreqShiftFactor * 100.0);
            ExternalProramFilterParm.FreqShiftFactor = (byte)num;
            IntPtr data = GCHandle.Alloc(ExternalProramFilterParm, GCHandleType.Pinned).AddrOfPinnedObject();
            int num2;
            if (GlobalRef.g_NtvRS232Connect[(int)GlobalRef.g_RadarDeviceIndex] && GlobalRef.g_CasCadeDeviceSpiConnect == 0U)
            {
                num2 = m_TsWrapper.Calling_WriteAddr_Single(4294959848U, 1U);
                if (m_GuiManager.DllOps.itempDisconnect(false) == 0)
                {
                    string full_command = string.Format("Debug Port Disconnected", new object[0]);
                    m_GuiManager.RecordLog(0, full_command);
                    if (!GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
                    {
                        iRs232ConnectDisconnect_impl();
                    }
                }
            }
            if (m_RadarDeviceModeConfigParams.NumberOfRadarDevicesDetected <= 1)
            {
                string full_command2 = string.Format("ar1.SetProgFiltConfig({0}, {1}, {2},{3})", new object[]
                {
                    m_ExternalFilterProgConfigParams.ProfileIndex,
                    m_ExternalFilterProgConfigParams.PFFilterCoeffStartIndex,
                    m_ExternalFilterProgConfigParams.ProgFilterLength,
                    (decimal)m_ExternalFilterProgConfigParams.FreqShiftFactor
                });
                m_GuiManager.RecordLog(8, full_command2);
            }
            else
            {
                string full_command3 = string.Format("ar1.SetProgFiltConfig_mult({0}, {1}, {2}, {3},{4})", new object[]
                {
                    GlobalRef.g_RadarDeviceId,
                    m_ExternalFilterProgConfigParams.ProfileIndex,
                    m_ExternalFilterProgConfigParams.PFFilterCoeffStartIndex,
                    m_ExternalFilterProgConfigParams.ProgFilterLength,
                    (decimal)m_ExternalFilterProgConfigParams.FreqShiftFactor
                });
                m_GuiManager.RecordLog(8, full_command3);
            }
            uint g_RadarDeviceId = GlobalRef.g_RadarDeviceId;
            num2 = Imports.RadarLinkImpl_SetProgFiltConfig(GlobalRef.g_RadarDeviceId, data);
            if ((num2 == 0 && ((GlobalRef.g_CasCadeDeviceSpiConnect & 1U) == 1U || (GlobalRef.g_CasCadeDeviceSpiConnect & 2U) == 2U || (GlobalRef.g_CasCadeDeviceSpiConnect & 4U) == 4U || (GlobalRef.g_CasCadeDeviceSpiConnect & 8U) == 8U)) || GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
            {
                string full_command4 = string.Format("Status: Passed", new object[0]);
                m_GuiManager.RecordLog(8, full_command4);
                int num3 = 0;
                while (num3 < 4 && !jsonConfigInProgress)
                {
                    if (((ulong)g_RadarDeviceId & (ulong)(1L << (num3 & 31))) != 0UL)
                    {
                        int mmwaveDevIndex = getMmwaveDevIndex(num3);
                        int i;
                        for (i = 0; i < GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlRfProgFiltConfs.Count; i++)
                        {
                            if (GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlRfProgFiltConfs[i].rlRfProgFiltConf_t.profileId == (int)m_ExternalFilterProgConfigParams.ProfileIndex)
                            {
                                GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlRfProgFiltConfs[i].rlRfProgFiltConf_t.profileId = (int)m_ExternalFilterProgConfigParams.ProfileIndex;
                                GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlRfProgFiltConfs[i].rlRfProgFiltConf_t.coeffStartIdx = (int)m_ExternalFilterProgConfigParams.PFFilterCoeffStartIndex;
                                GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlRfProgFiltConfs[i].rlRfProgFiltConf_t.progFiltLen = (int)m_ExternalFilterProgConfigParams.ProgFilterLength;
                                GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlRfProgFiltConfs[i].rlRfProgFiltConf_t.progFiltFreqShift_Fs = m_ExternalFilterProgConfigParams.FreqShiftFactor;
                                break;
                            }
                        }
                        if (i == GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlRfProgFiltConfs.Count)
                        {
                            RlRfProgFiltConfT rlRfProgFiltConfT = new RlRfProgFiltConfT();
                            rlRfProgFiltConfT.rlRfProgFiltConf_t = new RlRfProgFiltConfT2();
                            rlRfProgFiltConfT.rlRfProgFiltConf_t.profileId = (int)m_ExternalFilterProgConfigParams.ProfileIndex;
                            rlRfProgFiltConfT.rlRfProgFiltConf_t.coeffStartIdx = (int)m_ExternalFilterProgConfigParams.PFFilterCoeffStartIndex;
                            rlRfProgFiltConfT.rlRfProgFiltConf_t.progFiltLen = (int)m_ExternalFilterProgConfigParams.ProgFilterLength;
                            rlRfProgFiltConfT.rlRfProgFiltConf_t.progFiltFreqShift_Fs = m_ExternalFilterProgConfigParams.FreqShiftFactor;
                            GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlRfProgFiltConfs.Add(rlRfProgFiltConfT);
                        }
                    }
                    num3++;
                }
                MatlabPostProcGuiInstance.MatlabPostProcImpl_SetProgFiltConfig((double)ExternalProramFilterParm.ProfileIndex, (double)ExternalProramFilterParm.CoeffStartIndex, (double)ExternalProramFilterParm.ProgFiterLength, (double)ExternalProramFilterParm.FreqShiftFactor);
            }
            else
            {
                string msg = string.Format("Status: Failed, Error Type: {0}", new object[]
                {
                    GetErrorType(num2)
                });
                GlobalRef.LuaWrapper.PrintError(msg);
            }
            if (GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
            {
                if (iRs232ConnectDisconnect_impl() == 0 && !GlobalRef.g_NtvRS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
                {
                    m_GuiManager.DllOps.iConnect(1U, 0U);
                    string full_command5 = string.Format("Debug Port Reconnected!", new object[0]);
                    m_GuiManager.RecordLog(9, full_command5);
                    ScriptOps.KeepTrying(2000, new Func<bool>(spare_read));
                }
            }
            else if (GlobalRef.g_CasCadeDeviceSpiConnect == 0U)
            {
                string full_command6 = string.Format("Error Occurred in Port open close", new object[0]);
                m_GuiManager.RecordLog(9, full_command6);
            }
            return num2;
        }

        private int iSetProgFilterCoeffRAMConfig_Impl(bool is_starting_op, bool is_ending_op)
        {
            IntPtr data = GCHandle.Alloc(GlobalRef.CoeffRAM, GCHandleType.Pinned).AddrOfPinnedObject();
            int num;
            if (GlobalRef.g_NtvRS232Connect[(int)GlobalRef.g_RadarDeviceIndex] && GlobalRef.g_CasCadeDeviceSpiConnect == 0U)
            {
                num = m_TsWrapper.Calling_WriteAddr_Single(4294959848U, 1U);
                if (m_GuiManager.DllOps.itempDisconnect(false) == 0)
                {
                    string full_command = string.Format("Debug Port Disconnected", new object[0]);
                    m_GuiManager.RecordLog(0, full_command);
                    if (!GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
                    {
                        iRs232ConnectDisconnect_impl();
                    }
                }
            }
            if (m_RadarDeviceModeConfigParams.NumberOfRadarDevicesDetected <= 1)
            {
                string full_command2 = string.Format("ar1.SetProgFiltCoeffRam1to10({0}, {1}, {2}, {3}, {4}, {5}, {6}, {7}, {8}, {9})", new object[]
                {
                    GlobalRef.CoeffRAM[0],
                    GlobalRef.CoeffRAM[1],
                    GlobalRef.CoeffRAM[2],
                    GlobalRef.CoeffRAM[3],
                    GlobalRef.CoeffRAM[4],
                    GlobalRef.CoeffRAM[5],
                    GlobalRef.CoeffRAM[6],
                    GlobalRef.CoeffRAM[7],
                    GlobalRef.CoeffRAM[8],
                    GlobalRef.CoeffRAM[9]
                });
                m_GuiManager.RecordLog(8, full_command2);
                string full_command3 = string.Format("ar1.SetProgFiltCoeffRam11to20({0}, {1}, {2}, {3}, {4}, {5}, {6}, {7}, {8}, {9})", new object[]
                {
                    GlobalRef.CoeffRAM[10],
                    GlobalRef.CoeffRAM[11],
                    GlobalRef.CoeffRAM[12],
                    GlobalRef.CoeffRAM[13],
                    GlobalRef.CoeffRAM[14],
                    GlobalRef.CoeffRAM[15],
                    GlobalRef.CoeffRAM[16],
                    GlobalRef.CoeffRAM[17],
                    GlobalRef.CoeffRAM[18],
                    GlobalRef.CoeffRAM[19]
                });
                m_GuiManager.RecordLog(8, full_command3);
                string full_command4 = string.Format("ar1.SetProgFiltCoeffRam21to30({0}, {1}, {2}, {3}, {4}, {5}, {6}, {7}, {8}, {9})", new object[]
                {
                    GlobalRef.CoeffRAM[20],
                    GlobalRef.CoeffRAM[21],
                    GlobalRef.CoeffRAM[22],
                    GlobalRef.CoeffRAM[23],
                    GlobalRef.CoeffRAM[24],
                    GlobalRef.CoeffRAM[25],
                    GlobalRef.CoeffRAM[26],
                    GlobalRef.CoeffRAM[27],
                    GlobalRef.CoeffRAM[28],
                    GlobalRef.CoeffRAM[29]
                });
                m_GuiManager.RecordLog(8, full_command4);
                string full_command5 = string.Format("ar1.SetProgFiltCoeffRam31to40({0}, {1}, {2}, {3}, {4}, {5}, {6}, {7}, {8}, {9})", new object[]
                {
                    GlobalRef.CoeffRAM[30],
                    GlobalRef.CoeffRAM[31],
                    GlobalRef.CoeffRAM[32],
                    GlobalRef.CoeffRAM[33],
                    GlobalRef.CoeffRAM[34],
                    GlobalRef.CoeffRAM[35],
                    GlobalRef.CoeffRAM[36],
                    GlobalRef.CoeffRAM[37],
                    GlobalRef.CoeffRAM[38],
                    GlobalRef.CoeffRAM[39]
                });
                m_GuiManager.RecordLog(8, full_command5);
                string full_command6 = string.Format("ar1.SetProgFiltCoeffRam41to50({0}, {1}, {2}, {3}, {4}, {5}, {6}, {7}, {8}, {9})", new object[]
                {
                    GlobalRef.CoeffRAM[40],
                    GlobalRef.CoeffRAM[41],
                    GlobalRef.CoeffRAM[42],
                    GlobalRef.CoeffRAM[43],
                    GlobalRef.CoeffRAM[44],
                    GlobalRef.CoeffRAM[45],
                    GlobalRef.CoeffRAM[46],
                    GlobalRef.CoeffRAM[47],
                    GlobalRef.CoeffRAM[48],
                    GlobalRef.CoeffRAM[49]
                });
                m_GuiManager.RecordLog(8, full_command6);
                string full_command7 = string.Format("ar1.SetProgFiltCoeffRam51to60({0}, {1}, {2}, {3}, {4}, {5}, {6}, {7}, {8}, {9})", new object[]
                {
                    GlobalRef.CoeffRAM[50],
                    GlobalRef.CoeffRAM[51],
                    GlobalRef.CoeffRAM[52],
                    GlobalRef.CoeffRAM[53],
                    GlobalRef.CoeffRAM[54],
                    GlobalRef.CoeffRAM[55],
                    GlobalRef.CoeffRAM[56],
                    GlobalRef.CoeffRAM[57],
                    GlobalRef.CoeffRAM[58],
                    GlobalRef.CoeffRAM[59]
                });
                m_GuiManager.RecordLog(8, full_command7);
                string full_command8 = string.Format("ar1.SetProgFiltCoeffRam61to70({0}, {1}, {2}, {3}, {4}, {5}, {6}, {7}, {8}, {9})", new object[]
                {
                    GlobalRef.CoeffRAM[60],
                    GlobalRef.CoeffRAM[61],
                    GlobalRef.CoeffRAM[62],
                    GlobalRef.CoeffRAM[63],
                    GlobalRef.CoeffRAM[64],
                    GlobalRef.CoeffRAM[65],
                    GlobalRef.CoeffRAM[66],
                    GlobalRef.CoeffRAM[67],
                    GlobalRef.CoeffRAM[68],
                    GlobalRef.CoeffRAM[69]
                });
                m_GuiManager.RecordLog(8, full_command8);
                string full_command9 = string.Format("ar1.SetProgFiltCoeffRam71to80({0}, {1}, {2}, {3}, {4}, {5}, {6}, {7}, {8}, {9})", new object[]
                {
                    GlobalRef.CoeffRAM[70],
                    GlobalRef.CoeffRAM[71],
                    GlobalRef.CoeffRAM[72],
                    GlobalRef.CoeffRAM[73],
                    GlobalRef.CoeffRAM[74],
                    GlobalRef.CoeffRAM[75],
                    GlobalRef.CoeffRAM[76],
                    GlobalRef.CoeffRAM[77],
                    GlobalRef.CoeffRAM[78],
                    GlobalRef.CoeffRAM[79]
                });
                m_GuiManager.RecordLog(8, full_command9);
                string full_command10 = string.Format("ar1.SetProgFiltCoeffRam81to90({0}, {1}, {2}, {3}, {4}, {5}, {6}, {7}, {8}, {9})", new object[]
                {
                    GlobalRef.CoeffRAM[80],
                    GlobalRef.CoeffRAM[81],
                    GlobalRef.CoeffRAM[82],
                    GlobalRef.CoeffRAM[83],
                    GlobalRef.CoeffRAM[84],
                    GlobalRef.CoeffRAM[85],
                    GlobalRef.CoeffRAM[86],
                    GlobalRef.CoeffRAM[87],
                    GlobalRef.CoeffRAM[88],
                    GlobalRef.CoeffRAM[89]
                });
                m_GuiManager.RecordLog(8, full_command10);
                string full_command11 = string.Format("ar1.SetProgFiltCoeffRam91to100({0}, {1}, {2}, {3}, {4}, {5}, {6}, {7}, {8}, {9})", new object[]
                {
                    GlobalRef.CoeffRAM[90],
                    GlobalRef.CoeffRAM[91],
                    GlobalRef.CoeffRAM[92],
                    GlobalRef.CoeffRAM[93],
                    GlobalRef.CoeffRAM[94],
                    GlobalRef.CoeffRAM[95],
                    GlobalRef.CoeffRAM[96],
                    GlobalRef.CoeffRAM[97],
                    GlobalRef.CoeffRAM[98],
                    GlobalRef.CoeffRAM[99]
                });
                m_GuiManager.RecordLog(8, full_command11);
                string full_command12 = string.Format("ar1.SetProgFiltCoeffRam101to104({0}, {1}, {2}, {3})", new object[]
                {
                    GlobalRef.CoeffRAM[100],
                    GlobalRef.CoeffRAM[101],
                    GlobalRef.CoeffRAM[102],
                    GlobalRef.CoeffRAM[103]
                });
                m_GuiManager.RecordLog(8, full_command12);
                string full_command13 = string.Format("ar1.SetProgFiltCoeffRamApply()", new object[0]);
                m_GuiManager.RecordLog(8, full_command13);
            }
            else
            {
                string full_command14 = string.Format("ar1.SetProgFiltCoeffRam1to10_mult({0}, {1}, {2}, {3}, {4}, {5}, {6}, {7}, {8}, {9}, {10})", new object[]
                {
                    GlobalRef.g_RadarDeviceId,
                    GlobalRef.CoeffRAM[0],
                    GlobalRef.CoeffRAM[1],
                    GlobalRef.CoeffRAM[2],
                    GlobalRef.CoeffRAM[3],
                    GlobalRef.CoeffRAM[4],
                    GlobalRef.CoeffRAM[5],
                    GlobalRef.CoeffRAM[6],
                    GlobalRef.CoeffRAM[7],
                    GlobalRef.CoeffRAM[8],
                    GlobalRef.CoeffRAM[9]
                });
                m_GuiManager.RecordLog(8, full_command14);
                string full_command15 = string.Format("ar1.SetProgFiltCoeffRam11to20_mult({0}, {1}, {2}, {3}, {4}, {5}, {6}, {7}, {8}, {9}, {10})", new object[]
                {
                    GlobalRef.g_RadarDeviceId,
                    GlobalRef.CoeffRAM[10],
                    GlobalRef.CoeffRAM[11],
                    GlobalRef.CoeffRAM[12],
                    GlobalRef.CoeffRAM[13],
                    GlobalRef.CoeffRAM[14],
                    GlobalRef.CoeffRAM[15],
                    GlobalRef.CoeffRAM[16],
                    GlobalRef.CoeffRAM[17],
                    GlobalRef.CoeffRAM[18],
                    GlobalRef.CoeffRAM[19]
                });
                m_GuiManager.RecordLog(8, full_command15);
                string full_command16 = string.Format("ar1.SetProgFiltCoeffRam21to30_mult({0}, {1}, {2}, {3}, {4}, {5}, {6}, {7}, {8}, {9}, {10})", new object[]
                {
                    GlobalRef.g_RadarDeviceId,
                    GlobalRef.CoeffRAM[20],
                    GlobalRef.CoeffRAM[21],
                    GlobalRef.CoeffRAM[22],
                    GlobalRef.CoeffRAM[23],
                    GlobalRef.CoeffRAM[24],
                    GlobalRef.CoeffRAM[25],
                    GlobalRef.CoeffRAM[26],
                    GlobalRef.CoeffRAM[27],
                    GlobalRef.CoeffRAM[28],
                    GlobalRef.CoeffRAM[29]
                });
                m_GuiManager.RecordLog(8, full_command16);
                string full_command17 = string.Format("ar1.SetProgFiltCoeffRam31to40_mult({0}, {1}, {2}, {3}, {4}, {5}, {6}, {7}, {8}, {9}, {10})", new object[]
                {
                    GlobalRef.g_RadarDeviceId,
                    GlobalRef.CoeffRAM[30],
                    GlobalRef.CoeffRAM[31],
                    GlobalRef.CoeffRAM[32],
                    GlobalRef.CoeffRAM[33],
                    GlobalRef.CoeffRAM[34],
                    GlobalRef.CoeffRAM[35],
                    GlobalRef.CoeffRAM[36],
                    GlobalRef.CoeffRAM[37],
                    GlobalRef.CoeffRAM[38],
                    GlobalRef.CoeffRAM[39]
                });
                m_GuiManager.RecordLog(8, full_command17);
                string full_command18 = string.Format("ar1.SetProgFiltCoeffRam41to50_mult({0}, {1}, {2}, {3}, {4}, {5}, {6}, {7}, {8}, {9}, {10})", new object[]
                {
                    GlobalRef.g_RadarDeviceId,
                    GlobalRef.CoeffRAM[40],
                    GlobalRef.CoeffRAM[41],
                    GlobalRef.CoeffRAM[42],
                    GlobalRef.CoeffRAM[43],
                    GlobalRef.CoeffRAM[44],
                    GlobalRef.CoeffRAM[45],
                    GlobalRef.CoeffRAM[46],
                    GlobalRef.CoeffRAM[47],
                    GlobalRef.CoeffRAM[48],
                    GlobalRef.CoeffRAM[49]
                });
                m_GuiManager.RecordLog(8, full_command18);
                string full_command19 = string.Format("ar1.SetProgFiltCoeffRam51to60_mult({0}, {1}, {2}, {3}, {4}, {5}, {6}, {7}, {8}, {9}, {10})", new object[]
                {
                    GlobalRef.g_RadarDeviceId,
                    GlobalRef.CoeffRAM[50],
                    GlobalRef.CoeffRAM[51],
                    GlobalRef.CoeffRAM[52],
                    GlobalRef.CoeffRAM[53],
                    GlobalRef.CoeffRAM[54],
                    GlobalRef.CoeffRAM[55],
                    GlobalRef.CoeffRAM[56],
                    GlobalRef.CoeffRAM[57],
                    GlobalRef.CoeffRAM[58],
                    GlobalRef.CoeffRAM[59]
                });
                m_GuiManager.RecordLog(8, full_command19);
                string full_command20 = string.Format("ar1.SetProgFiltCoeffRam61to70_mult({0}, {1}, {2}, {3}, {4}, {5}, {6}, {7}, {8}, {9}, {10})", new object[]
                {
                    GlobalRef.g_RadarDeviceId,
                    GlobalRef.CoeffRAM[60],
                    GlobalRef.CoeffRAM[61],
                    GlobalRef.CoeffRAM[62],
                    GlobalRef.CoeffRAM[63],
                    GlobalRef.CoeffRAM[64],
                    GlobalRef.CoeffRAM[65],
                    GlobalRef.CoeffRAM[66],
                    GlobalRef.CoeffRAM[67],
                    GlobalRef.CoeffRAM[68],
                    GlobalRef.CoeffRAM[69]
                });
                m_GuiManager.RecordLog(8, full_command20);
                string full_command21 = string.Format("ar1.SetProgFiltCoeffRam71to80_mult({0}, {1}, {2}, {3}, {4}, {5}, {6}, {7}, {8}, {9}, {10})", new object[]
                {
                    GlobalRef.g_RadarDeviceId,
                    GlobalRef.CoeffRAM[70],
                    GlobalRef.CoeffRAM[71],
                    GlobalRef.CoeffRAM[72],
                    GlobalRef.CoeffRAM[73],
                    GlobalRef.CoeffRAM[74],
                    GlobalRef.CoeffRAM[75],
                    GlobalRef.CoeffRAM[76],
                    GlobalRef.CoeffRAM[77],
                    GlobalRef.CoeffRAM[78],
                    GlobalRef.CoeffRAM[79]
                });
                m_GuiManager.RecordLog(8, full_command21);
                string full_command22 = string.Format("ar1.SetProgFiltCoeffRam81to90_mult({0}, {1}, {2}, {3}, {4}, {5}, {6}, {7}, {8}, {9}, {10})", new object[]
                {
                    GlobalRef.g_RadarDeviceId,
                    GlobalRef.CoeffRAM[80],
                    GlobalRef.CoeffRAM[81],
                    GlobalRef.CoeffRAM[82],
                    GlobalRef.CoeffRAM[83],
                    GlobalRef.CoeffRAM[84],
                    GlobalRef.CoeffRAM[85],
                    GlobalRef.CoeffRAM[86],
                    GlobalRef.CoeffRAM[87],
                    GlobalRef.CoeffRAM[88],
                    GlobalRef.CoeffRAM[89]
                });
                m_GuiManager.RecordLog(8, full_command22);
                string full_command23 = string.Format("ar1.SetProgFiltCoeffRam91to100_mult({0}, {1}, {2}, {3}, {4}, {5}, {6}, {7}, {8}, {9}, {10})", new object[]
                {
                    GlobalRef.g_RadarDeviceId,
                    GlobalRef.CoeffRAM[90],
                    GlobalRef.CoeffRAM[91],
                    GlobalRef.CoeffRAM[92],
                    GlobalRef.CoeffRAM[93],
                    GlobalRef.CoeffRAM[94],
                    GlobalRef.CoeffRAM[95],
                    GlobalRef.CoeffRAM[96],
                    GlobalRef.CoeffRAM[97],
                    GlobalRef.CoeffRAM[98],
                    GlobalRef.CoeffRAM[99]
                });
                m_GuiManager.RecordLog(8, full_command23);
                string full_command24 = string.Format("ar1.SetProgFiltCoeffRam101to104_mult({0}, {1}, {2}, {3}, {4})", new object[]
                {
                    GlobalRef.g_RadarDeviceId,
                    GlobalRef.CoeffRAM[100],
                    GlobalRef.CoeffRAM[101],
                    GlobalRef.CoeffRAM[102],
                    GlobalRef.CoeffRAM[103]
                });
                m_GuiManager.RecordLog(8, full_command24);
                string full_command25 = string.Format("ar1.SetProgFiltCoeffRamApply_mult({0})", new object[]
                {
                    GlobalRef.g_RadarDeviceId
                });
                m_GuiManager.RecordLog(8, full_command25);
            }
            num = Imports.RadarLinkImpl_SetProgFiltCoeffRam(GlobalRef.g_RadarDeviceId, data);
            if ((num == 0 && ((GlobalRef.g_CasCadeDeviceSpiConnect & 1U) == 1U || (GlobalRef.g_CasCadeDeviceSpiConnect & 2U) == 2U || (GlobalRef.g_CasCadeDeviceSpiConnect & 4U) == 4U || (GlobalRef.g_CasCadeDeviceSpiConnect & 8U) == 8U)) || GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
            {
                string full_command26 = string.Format("Status: Passed", new object[0]);
                m_GuiManager.RecordLog(8, full_command26);
            }
            else
            {
                string msg = string.Format("Status: Failed, Error Type: {0}", new object[]
                {
                    GetErrorType(num)
                });
                GlobalRef.LuaWrapper.PrintError(msg);
            }
            if (GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
            {
                if (iRs232ConnectDisconnect_impl() == 0 && !GlobalRef.g_NtvRS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
                {
                    m_GuiManager.DllOps.iConnect(1U, 0U);
                    string full_command27 = string.Format("Debug Port Reconnected!", new object[0]);
                    m_GuiManager.RecordLog(9, full_command27);
                    ScriptOps.KeepTrying(2000, new Func<bool>(spare_read));
                }
            }
            else if (GlobalRef.g_CasCadeDeviceSpiConnect == 0U)
            {
                string full_command28 = string.Format("Error Occurred in Port open close", new object[0]);
                m_GuiManager.RecordLog(9, full_command28);
            }
            return num;
        }

        private int iSetRFPALoopBackConfig_Impl(bool is_starting_op, bool is_ending_op)
        {
            RFPALoopBackParam.paLoopBackFreq = (ushort)(100 / m_RFPALoopBackConfigParams.LoopBackFreq);
            RFPALoopBackParam.paLoopBackEnable = (byte)m_RFPALoopBackConfigParams.LoopBackEnable;
            RFPALoopBackParam.Reserved = 0;
            IntPtr data = GCHandle.Alloc(RFPALoopBackParam, GCHandleType.Pinned).AddrOfPinnedObject();
            int num;
            if (GlobalRef.g_NtvRS232Connect[(int)GlobalRef.g_RadarDeviceIndex] && GlobalRef.g_CasCadeDeviceSpiConnect == 0U)
            {
                num = m_TsWrapper.Calling_WriteAddr_Single(4294959848U, 1U);
                if (m_GuiManager.DllOps.itempDisconnect(false) == 0)
                {
                    string full_command = string.Format("Debug Port Disconnected", new object[0]);
                    m_GuiManager.RecordLog(0, full_command);
                    if (!GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
                    {
                        iRs232ConnectDisconnect_impl();
                    }
                }
            }
            if (m_RadarDeviceModeConfigParams.NumberOfRadarDevicesDetected <= 1)
            {
                string full_command2 = string.Format("ar1.SetRFPALoopbackConfig({0}, {1})", new object[]
                {
                    m_RFPALoopBackConfigParams.LoopBackFreq,
                    m_RFPALoopBackConfigParams.LoopBackEnable
                });
                m_GuiManager.RecordLog(8, full_command2);
            }
            else
            {
                string full_command3 = string.Format("ar1.SetRFPALoopbackConfig_mult({0}, {1}, {2})", new object[]
                {
                    GlobalRef.g_RadarDeviceId,
                    m_RFPALoopBackConfigParams.LoopBackFreq,
                    m_RFPALoopBackConfigParams.LoopBackEnable
                });
                m_GuiManager.RecordLog(8, full_command3);
            }
            uint g_RadarDeviceId = GlobalRef.g_RadarDeviceId;
            num = Imports.RadarLinkImpl_SetPALoopbackConfig(GlobalRef.g_RadarDeviceId, data);
            if ((num == 0 && ((GlobalRef.g_CasCadeDeviceSpiConnect & 1U) == 1U || (GlobalRef.g_CasCadeDeviceSpiConnect & 2U) == 2U || (GlobalRef.g_CasCadeDeviceSpiConnect & 4U) == 4U || (GlobalRef.g_CasCadeDeviceSpiConnect & 8U) == 8U)) || GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
            {
                string full_command4 = string.Format("Status: Passed", new object[0]);
                m_GuiManager.RecordLog(8, full_command4);
                for (int i = 0; i < 4; i++)
                {
                    if (jsonConfigInProgress)
                    {
                        break;
                    }
                    if (((ulong)g_RadarDeviceId & (ulong)(1L << (i & 31))) != 0UL)
                    {
                        int mmwaveDevIndex = getMmwaveDevIndex(i);
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlRfPALoopbackCfg_t.paLoopbackFreq_MHz = (int)m_RFPALoopBackConfigParams.LoopBackFreq;
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlRfPALoopbackCfg_t.p00000c = (int)RFPALoopBackParam.paLoopBackEnable;
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlRfPALoopbackCfg_t.isConfigured = 1;
                    }
                }
            }
            else
            {
                string msg = string.Format("Status: Failed, Error Type: {0}", new object[]
                {
                    GetErrorType(num)
                });
                GlobalRef.LuaWrapper.PrintError(msg);
            }
            if (GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
            {
                if (iRs232ConnectDisconnect_impl() == 0 && !GlobalRef.g_NtvRS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
                {
                    m_GuiManager.DllOps.iConnect(1U, 0U);
                    string full_command5 = string.Format("Debug Port Reconnected!", new object[0]);
                    m_GuiManager.RecordLog(9, full_command5);
                    ScriptOps.KeepTrying(2000, new Func<bool>(spare_read));
                }
            }
            else if (GlobalRef.g_CasCadeDeviceSpiConnect == 0U)
            {
                string full_command6 = string.Format("Error Occurred in Port open close", new object[0]);
                m_GuiManager.RecordLog(9, full_command6);
            }
            return num;
        }

        private int iSetRFPSLoopBackConfig_Impl(bool is_starting_op, bool is_ending_op)
        {
            RFPSLoopBackParam.psLoopBackFreq = m_RFPSLoopBackConfigParams.LoopBackFreq;
            RFPSLoopBackParam.psReserved0 = 0;
            RFPSLoopBackParam.psLoopBackEnable = (byte)m_RFPSLoopBackConfigParams.LoopBackEnable;
            RFPSLoopBackParam.psLoopBackTxId = (byte)(m_RFPSLoopBackConfigParams.LoopBackTXIdTx0 | m_RFPSLoopBackConfigParams.LoopBackTXIdTx1 << 1);
            RFPSLoopBackParam.psPgaGainIndex = (byte)m_RFPSLoopBackConfigParams.PGAGainIndex;
            RFPSLoopBackParam.psReserved1 = 0;
            IntPtr data = GCHandle.Alloc(RFPSLoopBackParam, GCHandleType.Pinned).AddrOfPinnedObject();
            int num;
            if (GlobalRef.g_NtvRS232Connect[(int)GlobalRef.g_RadarDeviceIndex] && GlobalRef.g_CasCadeDeviceSpiConnect == 0U)
            {
                num = m_TsWrapper.Calling_WriteAddr_Single(4294959848U, 1U);
                if (m_GuiManager.DllOps.itempDisconnect(false) == 0)
                {
                    string full_command = string.Format("Debug Port Disconnected", new object[0]);
                    m_GuiManager.RecordLog(0, full_command);
                    if (!GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
                    {
                        iRs232ConnectDisconnect_impl();
                    }
                }
            }
            if (m_RadarDeviceModeConfigParams.NumberOfRadarDevicesDetected <= 1)
            {
                string full_command2 = string.Format("ar1.SetRFPSLoopbackConfig({0}, {1}, {2}, {3},{4})", new object[]
                {
                    m_RFPSLoopBackConfigParams.LoopBackFreq,
                    m_RFPSLoopBackConfigParams.LoopBackEnable,
                    m_RFPSLoopBackConfigParams.LoopBackTXIdTx0,
                    m_RFPSLoopBackConfigParams.LoopBackTXIdTx1,
                    m_RFPSLoopBackConfigParams.PGAGainIndex
                });
                m_GuiManager.RecordLog(8, full_command2);
            }
            else
            {
                string full_command3 = string.Format("ar1.SetRFPSLoopbackConfig_mult({0}, {1}, {2}, {3}, {4},{5})", new object[]
                {
                    GlobalRef.g_RadarDeviceId,
                    m_RFPSLoopBackConfigParams.LoopBackFreq,
                    m_RFPSLoopBackConfigParams.LoopBackEnable,
                    m_RFPSLoopBackConfigParams.LoopBackTXIdTx0,
                    m_RFPSLoopBackConfigParams.LoopBackTXIdTx1,
                    m_RFPSLoopBackConfigParams.PGAGainIndex
                });
                m_GuiManager.RecordLog(8, full_command3);
            }
            uint g_RadarDeviceId = GlobalRef.g_RadarDeviceId;
            num = Imports.RadarLinkImpl_SetPSLoopbackConfig(GlobalRef.g_RadarDeviceId, data);
            if ((num == 0 && ((GlobalRef.g_CasCadeDeviceSpiConnect & 1U) == 1U || (GlobalRef.g_CasCadeDeviceSpiConnect & 2U) == 2U || (GlobalRef.g_CasCadeDeviceSpiConnect & 4U) == 4U || (GlobalRef.g_CasCadeDeviceSpiConnect & 8U) == 8U)) || GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
            {
                string full_command4 = string.Format("Status: Passed", new object[0]);
                m_GuiManager.RecordLog(8, full_command4);
                for (int i = 0; i < 4; i++)
                {
                    if (jsonConfigInProgress)
                    {
                        break;
                    }
                    if (((ulong)g_RadarDeviceId & (ulong)(1L << (i & 31))) != 0UL)
                    {
                        int mmwaveDevIndex = getMmwaveDevIndex(i);
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlRfPSLoopbackCfg_t.psLoopbackFreq_KHz = (int)RFPSLoopBackParam.psLoopBackFreq;
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlRfPSLoopbackCfg_t.p00000d = (int)RFPSLoopBackParam.psLoopBackEnable;
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlRfPSLoopbackCfg_t.psLoopbackTxId = "0x" + RFPSLoopBackParam.psLoopBackTxId.ToString("X");
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlRfPSLoopbackCfg_t.pgaGainIndex = (int)RFPSLoopBackParam.psPgaGainIndex;
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlRfPSLoopbackCfg_t.isConfigured = 1;
                    }
                }
            }
            else
            {
                string msg = string.Format("Status: Failed, Error Type: {0}", new object[]
                {
                    GetErrorType(num)
                });
                GlobalRef.LuaWrapper.PrintError(msg);
            }
            if (GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
            {
                if (iRs232ConnectDisconnect_impl() == 0 && !GlobalRef.g_NtvRS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
                {
                    m_GuiManager.DllOps.iConnect(1U, 0U);
                    string full_command5 = string.Format("Debug Port Reconnected!", new object[0]);
                    m_GuiManager.RecordLog(9, full_command5);
                    ScriptOps.KeepTrying(2000, new Func<bool>(spare_read));
                }
            }
            else if (GlobalRef.g_CasCadeDeviceSpiConnect == 0U)
            {
                string full_command6 = string.Format("Error Occurred in Port open close", new object[0]);
                m_GuiManager.RecordLog(9, full_command6);
            }
            return num;
        }

        private int iSetRFIFLoopBackConfig_Impl(bool is_starting_op, bool is_ending_op)
        {
            RFIFLoopBackParam.ifLoopBackFreq = m_RFIFLoopBackConfigParams.LoopBackFreq;
            RFIFLoopBackParam.ifLoopBackEnable = (byte)m_RFIFLoopBackConfigParams.LoopBackEnable;
            RFIFLoopBackParam.ifReserved0 = 0;
            IntPtr data = GCHandle.Alloc(RFIFLoopBackParam, GCHandleType.Pinned).AddrOfPinnedObject();
            int num;
            if (GlobalRef.g_NtvRS232Connect[(int)GlobalRef.g_RadarDeviceIndex] && GlobalRef.g_CasCadeDeviceSpiConnect == 0U)
            {
                num = m_TsWrapper.Calling_WriteAddr_Single(4294959848U, 1U);
                if (m_GuiManager.DllOps.itempDisconnect(false) == 0)
                {
                    string full_command = string.Format("Debug Port Disconnected", new object[0]);
                    m_GuiManager.RecordLog(0, full_command);
                    if (!GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
                    {
                        iRs232ConnectDisconnect_impl();
                    }
                }
            }
            if (m_RadarDeviceModeConfigParams.NumberOfRadarDevicesDetected <= 1)
            {
                string full_command2 = string.Format("ar1.SetRFIFLoopbackConfig({0}, {1})", new object[]
                {
                    m_RFIFLoopBackConfigParams.LoopBackFreq,
                    m_RFIFLoopBackConfigParams.LoopBackEnable
                });
                m_GuiManager.RecordLog(8, full_command2);
            }
            else
            {
                string full_command3 = string.Format("ar1.SetRFIFLoopbackConfig_mult({0}, {1}, {2})", new object[]
                {
                    GlobalRef.g_RadarDeviceId,
                    m_RFIFLoopBackConfigParams.LoopBackFreq,
                    m_RFIFLoopBackConfigParams.LoopBackEnable
                });
                m_GuiManager.RecordLog(8, full_command3);
            }
            uint g_RadarDeviceId = GlobalRef.g_RadarDeviceId;
            num = Imports.RadarLinkImpl_SetIFLoopbackConfig(GlobalRef.g_RadarDeviceId, data);
            if ((num == 0 && ((GlobalRef.g_CasCadeDeviceSpiConnect & 1U) == 1U || (GlobalRef.g_CasCadeDeviceSpiConnect & 2U) == 2U || (GlobalRef.g_CasCadeDeviceSpiConnect & 4U) == 4U || (GlobalRef.g_CasCadeDeviceSpiConnect & 8U) == 8U)) || GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
            {
                string full_command4 = string.Format("Status: Passed", new object[0]);
                m_GuiManager.RecordLog(8, full_command4);
                for (int i = 0; i < 4; i++)
                {
                    if (jsonConfigInProgress)
                    {
                        break;
                    }
                    if (((ulong)g_RadarDeviceId & (ulong)(1L << (i & 31))) != 0UL)
                    {
                        int mmwaveDevIndex = getMmwaveDevIndex(i);
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlRfIFLoopbackCfg_t.ifLoopbackFreq = (int)RFIFLoopBackParam.ifLoopBackFreq;
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlRfIFLoopbackCfg_t.ifLoopbackEn = (int)RFIFLoopBackParam.ifLoopBackEnable;
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlRfIFLoopbackCfg_t.isConfigured = 1;
                    }
                }
            }
            else
            {
                string msg = string.Format("Status: Failed, Error Type: {0}", new object[]
                {
                    GetErrorType(num)
                });
                GlobalRef.LuaWrapper.PrintError(msg);
            }
            if (GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
            {
                if (iRs232ConnectDisconnect_impl() == 0 && !GlobalRef.g_NtvRS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
                {
                    m_GuiManager.DllOps.iConnect(1U, 0U);
                    string full_command5 = string.Format("Debug Port Reconnected!", new object[0]);
                    m_GuiManager.RecordLog(9, full_command5);
                    ScriptOps.KeepTrying(2000, new Func<bool>(spare_read));
                }
            }
            else if (GlobalRef.g_CasCadeDeviceSpiConnect == 0U)
            {
                string full_command6 = string.Format("Error Occurred in Port open close", new object[0]);
                m_GuiManager.RecordLog(9, full_command6);
            }
            return num;
        }

        private int iSetContStrConfig_Impl(bool is_starting_op, bool is_ending_op)
        {
            double num = Math.Round(m_ContStreamParams.startFreqConst, 7);
            uint num2 = m_ContStreamParams.tx3OutPowerBackoffCode << 16 | m_ContStreamParams.tx2OutPowerBackoffCode << 8 | m_ContStreamParams.tx1OutPowerBackoffCode;
            uint num3 = (uint)(Math.Round(m_ContStreamParams.tx1PhaseShifter * 256.0) / 360.0);
            uint num4 = (uint)(Math.Round(m_ContStreamParams.tx2PhaseShifter * 256.0) / 360.0);
            uint num5 = (uint)(Math.Round(m_ContStreamParams.tx3PhaseShifter * 256.0) / 360.0);
            if (num3 >= 256U)
            {
                num3 = 255U;
            }
            if (num4 >= 256U)
            {
                num4 = 255U;
            }
            if (num5 >= 256U)
            {
                num5 = 255U;
            }
            uint num6 = num5 << 16 | num4 << 8 | num3;
            ushort digOutSampleRate = m_ContStreamParams.digOutSampleRate;
            char hpfCornerFreq = m_ContStreamParams.hpfCornerFreq1;
            char hpfCornerFreq2 = m_ContStreamParams.hpfCornerFreq2;
            char c = (char)((int)m_ContStreamParams.rxGain | (int)m_ContStreamParams.RFGainTarget << 6);
            uint num7;
            if (GlobalRef.g_ARDeviceOperateFreq60GHz)
            {
                num7 = (uint)Math.Round(num * 67108864.0 / 2.7);
            }
            else
            {
                num7 = (uint)Math.Round(num * 67108864.0 / 3.6);
            }
            ContStreamConfigurationParam.FreqStartConst = num7;
            ContStreamConfigurationParam.TxOutputPowerBackoff = num2;
            ContStreamConfigurationParam.TxPhaseShifter = num6;
            ContStreamConfigurationParam.DigOutputSampleRate = digOutSampleRate;
            ContStreamConfigurationParam.HPF1CornerFreq = (byte)hpfCornerFreq;
            ContStreamConfigurationParam.HPF2CornerFreq = (byte)hpfCornerFreq2;
            ContStreamConfigurationParam.RxGain = (byte)c;
            ContStreamConfigurationParam.TxEnable = 0;
            ContStreamConfigurationParam.VCOSelect = (byte)((int)m_ContStreamParams.ForceVCOSelect | (int)m_ContStreamParams.VCOSelect << 1);
            ContStreamConfigurationParam.MisControls = 0;
            IntPtr data = GCHandle.Alloc(ContStreamConfigurationParam, GCHandleType.Pinned).AddrOfPinnedObject();
            int num8;
            if (GlobalRef.g_NtvRS232Connect[(int)GlobalRef.g_RadarDeviceIndex] && GlobalRef.g_CasCadeDeviceSpiConnect == 0U)
            {
                num8 = m_TsWrapper.Calling_WriteAddr_Single(4294959848U, 1U);
                if (m_GuiManager.DllOps.itempDisconnect(false) == 0)
                {
                    string full_command = string.Format("Debug Port Disconnected", new object[0]);
                    m_GuiManager.RecordLog(0, full_command);
                    if (!GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
                    {
                        iRs232ConnectDisconnect_impl();
                    }
                }
            }
            if (m_RadarDeviceModeConfigParams.NumberOfRadarDevicesDetected <= 1)
            {
                string full_command2 = string.Format("ar1.ContStrConfig({0}, {1}, {2}, {3}, {4}, {5}, {6}, {7}, {8}, {9}, {10})", new object[]
                {
                    Math.Round(m_ContStreamParams.startFreqConst, 7),
                    m_ContStreamParams.digOutSampleRate,
                    (int)m_ContStreamParams.rxGain | (int)m_ContStreamParams.RFGainTarget << 6,
                    m_ContStreamParams.hpfCornerFreq1,
                    m_ContStreamParams.hpfCornerFreq2,
                    m_ContStreamParams.tx1OutPowerBackoffCode,
                    m_ContStreamParams.tx2OutPowerBackoffCode,
                    m_ContStreamParams.tx3OutPowerBackoffCode,
                    (decimal)Math.Round(m_ContStreamParams.tx1PhaseShifter, 2),
                    (decimal)Math.Round(m_ContStreamParams.tx2PhaseShifter, 2),
                    (int)((ushort)Math.Round(m_ContStreamParams.tx3PhaseShifter, 1)) | (int)ContStreamConfigurationParam.VCOSelect << 16
                });
                m_GuiManager.RecordLog(8, full_command2);
            }
            else
            {
                string full_command3 = string.Format("ar1.ContStrConfig_mult({0}, {1}, {2}, {3}, {4}, {5}, {6}, {7}, {8}, {9}, {10},{11})", new object[]
                {
                    GlobalRef.g_RadarDeviceId,
                    Math.Round(m_ContStreamParams.startFreqConst, 7),
                    m_ContStreamParams.digOutSampleRate,
                    (int)m_ContStreamParams.rxGain | (int)m_ContStreamParams.RFGainTarget << 6,
                    m_ContStreamParams.hpfCornerFreq1,
                    m_ContStreamParams.hpfCornerFreq2,
                    m_ContStreamParams.tx1OutPowerBackoffCode,
                    m_ContStreamParams.tx2OutPowerBackoffCode,
                    m_ContStreamParams.tx3OutPowerBackoffCode,
                    (decimal)Math.Round(m_ContStreamParams.tx1PhaseShifter, 2),
                    (decimal)Math.Round(m_ContStreamParams.tx2PhaseShifter, 2),
                    (int)((ushort)Math.Round(m_ContStreamParams.tx3PhaseShifter, 1)) | (int)ContStreamConfigurationParam.VCOSelect << 16
                });
                m_GuiManager.RecordLog(8, full_command3);
            }
            uint g_RadarDeviceId = GlobalRef.g_RadarDeviceId;
            num8 = Imports.RadarLinkImpl_ContModeConfig((byte)GlobalRef.g_RadarDeviceId, data);
            if ((num8 == 0 && ((GlobalRef.g_CasCadeDeviceSpiConnect & 1U) == 1U || (GlobalRef.g_CasCadeDeviceSpiConnect & 2U) == 2U || (GlobalRef.g_CasCadeDeviceSpiConnect & 4U) == 4U || (GlobalRef.g_CasCadeDeviceSpiConnect & 8U) == 8U)) || GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
            {
                string full_command4 = string.Format("Status: Passed", new object[0]);
                m_GuiManager.RecordLog(8, full_command4);
                int num9 = 0;
                while (num9 < 4 && !jsonConfigInProgress)
                {
                    if (((ulong)g_RadarDeviceId & (ulong)(1L << (num9 & 31))) != 0UL)
                    {
                        int mmwaveDevIndex = getMmwaveDevIndex(num9);
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlContModeCfg_t.startFreqConst_GHz = m_ContStreamParams.startFreqConst;
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlContModeCfg_t.digOutSampleRate = (double)m_ContStreamParams.digOutSampleRate;
                        RlContModeCfgT rlContModeCfg_t = GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlContModeCfg_t;
                        string str = "0x";
                        int rxGain = (int)ContStreamConfigurationParam.RxGain;
                        rlContModeCfg_t.rxGain_dB = str + rxGain.ToString("X");
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlContModeCfg_t.hpfCornerFreq1 = (int)ContStreamConfigurationParam.HPF1CornerFreq;
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlContModeCfg_t.hpfCornerFreq2 = (int)ContStreamConfigurationParam.HPF2CornerFreq;
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlContModeCfg_t.txOutPowerBackoffCode = "0x" + ContStreamConfigurationParam.TxOutputPowerBackoff.ToString("X");
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlContModeCfg_t.txPhaseShifter = "0x" + ContStreamConfigurationParam.TxPhaseShifter.ToString("X");
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlContModeCfg_t.vcoSelect = "0x" + ContStreamConfigurationParam.VCOSelect.ToString("X");
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlContModeCfg_t.isConfigured = 1;
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.waveformType = "continuousWave";
                    }
                    num9++;
                }
                MatlabPostProcGuiInstance.MatlabPostProcImpl_ContModeConfig(num7, num2, num6, (double)digOutSampleRate, (double)hpfCornerFreq, (double)hpfCornerFreq2, (double)c);
            }
            else
            {
                string msg = string.Format("Status: Failed, Error Type: {0}", new object[]
                {
                    GetErrorType(num8)
                });
                GlobalRef.LuaWrapper.PrintError(msg);
            }
            if (GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
            {
                if (iRs232ConnectDisconnect_impl() == 0 && !GlobalRef.g_NtvRS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
                {
                    m_GuiManager.DllOps.iConnect(1U, 0U);
                    string full_command5 = string.Format("Debug Port Reconnected!", new object[0]);
                    m_GuiManager.RecordLog(9, full_command5);
                    ScriptOps.KeepTrying(2000, new Func<bool>(spare_read));
                }
            }
            else if (GlobalRef.g_CasCadeDeviceSpiConnect == 0U)
            {
                string full_command6 = string.Format("Error Occurred in Port open close", new object[0]);
                m_GuiManager.RecordLog(9, full_command6);
            }
            return num8;
        }

        private int iSetBasicConfigurationForAnalysisConfig_Impl(bool is_starting_op, bool is_ending_op)
        {
            int num = -2;
            if (GlobalRef.g_NtvRS232Connect[(int)GlobalRef.g_RadarDeviceIndex] && GlobalRef.g_CasCadeDeviceSpiConnect == 0U)
            {
                num = m_TsWrapper.Calling_WriteAddr_Single(4294959848U, 1U);
                if (m_GuiManager.DllOps.itempDisconnect(false) == 0)
                {
                    string full_command = string.Format("Debug Port Disconnected", new object[0]);
                    m_GuiManager.RecordLog(0, full_command);
                    if (!GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
                    {
                        iRs232ConnectDisconnect_impl();
                    }
                }
            }

            if (m_RadarDeviceModeConfigParams.NumberOfRadarDevicesDetected > 1)
            {
                string full_command6 = string.Format("ar1.BasicConfigurationForAnalysis({0}, {1}, {2}, {3}, {4}, {5}, {6})", new object[]
                {
                m_BasicConfigurationForAnalysisParams.NumberOfSamples,
                m_BasicConfigurationForAnalysisParams.FFTSize,
                m_BasicConfigurationForAnalysisParams.NumberOFAverages,
                m_BasicConfigurationForAnalysisParams.WindowSelection,
                m_BasicConfigurationForAnalysisParams.RemoveDCEnable,
                m_BasicConfigurationForAnalysisParams.EnableTirggerCapture,
                m_BasicConfigurationForAnalysisParams.WindowCopensation
                });
                m_GuiManager.RecordLog(8, full_command6);

                try
                {
                    MatlabPostProcGuiInstance.Basic_configuration_for_analysis_tool(m_BasicConfigurationForAnalysisParams.NumberOfSamples, m_BasicConfigurationForAnalysisParams.FFTSize, m_BasicConfigurationForAnalysisParams.NumberOFAverages, (double)m_BasicConfigurationForAnalysisParams.WindowSelection, (double)m_BasicConfigurationForAnalysisParams.RemoveDCEnable, (double)m_BasicConfigurationForAnalysisParams.EnableTirggerCapture, (double)m_BasicConfigurationForAnalysisParams.WindowCopensation);
                    if ((GlobalRef.g_CasCadeDeviceSpiConnect & 1U) == 1U || (GlobalRef.g_CasCadeDeviceSpiConnect & 2U) == 2U || (GlobalRef.g_CasCadeDeviceSpiConnect & 4U) == 4U || (GlobalRef.g_CasCadeDeviceSpiConnect & 8U) == 8U || GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
                    {
                        string full_command3 = string.Format("Status: Passed", new object[0]);
                        m_GuiManager.RecordLog(8, full_command3);
                    }
                    else
                    {
                        string msg = string.Format("Status: Failed, Error Type: {0}", new object[]
                        {
                        GetErrorType(num)
                        });
                        GlobalRef.LuaWrapper.PrintError(msg);
                    }
                    if (GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
                    {
                        if (iRs232ConnectDisconnect_impl() == 0 && !GlobalRef.g_NtvRS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
                        {
                            m_GuiManager.DllOps.iConnect(1U, 0U);
                            string full_command4 = string.Format("Debug Port Reconnected!", new object[0]);
                            m_GuiManager.RecordLog(9, full_command4);
                            ScriptOps.KeepTrying(2000, new Func<bool>(spare_read));
                        }
                    }
                    else if (GlobalRef.g_CasCadeDeviceSpiConnect == 0U)
                    {
                        string full_command5 = string.Format("Error Occurred in Port open close", new object[0]);
                        m_GuiManager.RecordLog(9, full_command5);
                    }
                    return num;
                }
                catch (Exception ex2)
                {
                    m_GuiManager.Error(ex2.Message, ex2.StackTrace);
                    return num;
                }
            }

            string full_command2 = string.Format("ar1.BasicConfigurationForAnalysis({0}, {1}, {2}, {3}, {4}, {5}, {6})", new object[]
            {
                m_BasicConfigurationForAnalysisParams.NumberOfSamples,
                m_BasicConfigurationForAnalysisParams.FFTSize,
                m_BasicConfigurationForAnalysisParams.NumberOFAverages,
                m_BasicConfigurationForAnalysisParams.WindowSelection,
                m_BasicConfigurationForAnalysisParams.RemoveDCEnable,
                m_BasicConfigurationForAnalysisParams.EnableTirggerCapture,
                m_BasicConfigurationForAnalysisParams.WindowCopensation
            });

            m_GuiManager.RecordLog(8, full_command2);

            try
            {
                MatlabPostProcGuiInstance.Basic_configuration_for_analysis_tool(m_BasicConfigurationForAnalysisParams.NumberOfSamples, m_BasicConfigurationForAnalysisParams.FFTSize, m_BasicConfigurationForAnalysisParams.NumberOFAverages, (double)m_BasicConfigurationForAnalysisParams.WindowSelection, (double)m_BasicConfigurationForAnalysisParams.RemoveDCEnable, (double)m_BasicConfigurationForAnalysisParams.EnableTirggerCapture, (double)m_BasicConfigurationForAnalysisParams.WindowCopensation);

                if ((GlobalRef.g_CasCadeDeviceSpiConnect & 1U) == 1U || (GlobalRef.g_CasCadeDeviceSpiConnect & 2U) == 2U || (GlobalRef.g_CasCadeDeviceSpiConnect & 4U) == 4U || (GlobalRef.g_CasCadeDeviceSpiConnect & 8U) == 8U || GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
                {
                    string full_command3 = string.Format("Status: Passed", new object[0]);
                    m_GuiManager.RecordLog(8, full_command3);
                }
                else
                {
                    string msg = string.Format("Status: Failed, Error Type: {0}", new object[]
                    {
                        GetErrorType(num)
                    });
                    GlobalRef.LuaWrapper.PrintError(msg);
                }
                if (GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
                {
                    if (iRs232ConnectDisconnect_impl() == 0 && !GlobalRef.g_NtvRS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
                    {
                        m_GuiManager.DllOps.iConnect(1U, 0U);
                        string full_command4 = string.Format("Debug Port Reconnected!", new object[0]);
                        m_GuiManager.RecordLog(9, full_command4);
                        ScriptOps.KeepTrying(2000, new Func<bool>(spare_read));
                    }
                }
                else if (GlobalRef.g_CasCadeDeviceSpiConnect == 0U)
                {
                    string full_command5 = string.Format("Error Occurred in Port open close", new object[0]);
                    m_GuiManager.RecordLog(9, full_command5);
                }
                return num;
            }
            catch (Exception ex)
            {
                m_GuiManager.Error(ex.Message, ex.StackTrace);
                return num;
            }
        }

        private int iSetMeasureTheTxPowerConfig_Impl(bool is_starting_op, bool is_ending_op)
        {
            MeasureTxPowerConfigurationParam.NumberOfAccumulations = (byte)m_MeasureTxPowerParams.NumberOfAccumulations;
            MeasureTxPowerConfigurationParam.NumberOfSamples = (byte)m_MeasureTxPowerParams.NumberOfAccumulations;
            MeasureTxPowerConfigurationParam.Reserved = 0;
            IntPtr inData = GCHandle.Alloc(MeasureTxPowerConfigurationParam, GCHandleType.Pinned).AddrOfPinnedObject();
            int num;
            if (GlobalRef.g_NtvRS232Connect[(int)GlobalRef.g_RadarDeviceIndex] && GlobalRef.g_CasCadeDeviceSpiConnect == 0U)
            {
                num = m_TsWrapper.Calling_WriteAddr_Single(4294959848U, 1U);
                if (m_GuiManager.DllOps.itempDisconnect(false) == 0)
                {
                    string full_command = string.Format("Debug Port Disconnected", new object[0]);
                    m_GuiManager.RecordLog(0, full_command);
                    if (!GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
                    {
                        iRs232ConnectDisconnect_impl();
                    }
                }
            }
            if (m_RadarDeviceModeConfigParams.NumberOfRadarDevicesDetected <= 1)
            {
                string full_command2 = string.Format("ar1.MeasureTheTxPowerConfig({0}, {1})", new object[]
                {
                    m_MeasureTxPowerParams.NumberOfAccumulations,
                    m_MeasureTxPowerParams.NumberOfSamples
                });
                m_GuiManager.RecordLog(8, full_command2);
            }
            else
            {
                string full_command3 = string.Format("ar1.MeasureTheTxPowerConfig_mult({0}, {1}, {2})", new object[]
                {
                    GlobalRef.g_RadarDeviceId,
                    m_MeasureTxPowerParams.NumberOfAccumulations,
                    m_MeasureTxPowerParams.NumberOfSamples
                });
                m_GuiManager.RecordLog(8, full_command3);
            }
            num = Imports.RadarLinkImpl_RfSetMeasTxPowerConfig(GlobalRef.g_RadarDeviceId, inData);
            if ((num == 0 && ((GlobalRef.g_CasCadeDeviceSpiConnect & 1U) == 1U || (GlobalRef.g_CasCadeDeviceSpiConnect & 2U) == 2U || (GlobalRef.g_CasCadeDeviceSpiConnect & 4U) == 4U || (GlobalRef.g_CasCadeDeviceSpiConnect & 8U) == 8U)) || GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
            {
                string full_command4 = string.Format("Status: Passed", new object[0]);
                m_GuiManager.RecordLog(8, full_command4);
            }
            else
            {
                string msg = string.Format("Status: Failed, Error Type: {0}", new object[]
                {
                    GetErrorType(num)
                });
                GlobalRef.LuaWrapper.PrintError(msg);
            }
            if (GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
            {
                if (iRs232ConnectDisconnect_impl() == 0 && !GlobalRef.g_NtvRS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
                {
                    m_GuiManager.DllOps.iConnect(1U, 0U);
                    string full_command5 = string.Format("Debug Port Reconnected!", new object[0]);
                    m_GuiManager.RecordLog(9, full_command5);
                    ScriptOps.KeepTrying(2000, new Func<bool>(spare_read));
                }
            }
            else if (GlobalRef.g_CasCadeDeviceSpiConnect == 0U)
            {
                string full_command6 = string.Format("Error Occurred in Port open close", new object[0]);
                m_GuiManager.RecordLog(9, full_command6);
            }
            return num;
        }

        private int iSetProfileConfig_Impl(bool is_starting_op, bool is_ending_op)
        {
            ushort pprofileId = m_ChirpConfigParams.pprofileId;
            double num = Math.Round(m_ChirpConfigParams.startFreqConst, 7);
            double num2 = (double)((decimal)m_ChirpConfigParams.idleTimeConst);
            double num3 = (double)((decimal)m_ChirpConfigParams.adcStartTimeConst);
            double num4 = (double)((decimal)m_ChirpConfigParams.rampEndTime);
            uint num5 = m_ChirpConfigParams.tx3OutPowerBackoffCode << 16 | m_ChirpConfigParams.tx2OutPowerBackoffCode << 8 | m_ChirpConfigParams.tx1OutPowerBackoffCode;
            uint num6 = (uint)(Math.Round(m_ChirpConfigParams.tx1PhaseShifter * 64.0) / 360.0);
            uint num7 = (uint)(Math.Round(m_ChirpConfigParams.tx2PhaseShifter * 64.0) / 360.0);
            uint num8 = (uint)(Math.Round(m_ChirpConfigParams.tx3PhaseShifter * 64.0) / 360.0);
            if (num6 >= 256U)
            {
                num6 = 255U;
            }
            if (num7 >= 256U)
            {
                num7 = 255U;
            }
            if (num8 >= 256U)
            {
                num8 = 255U;
            }
            uint num9 = num8 << 18 | num7 << 10 | num6 << 2;
            double num10 = (double)((decimal)m_ChirpConfigParams.freqSlopeConst);
            double num11 = (double)((decimal)m_ChirpConfigParams.txStartTime);
            ushort pnumAdcSamples = m_ChirpConfigParams.pnumAdcSamples;
            ushort digOutSampleRate = m_ChirpConfigParams.digOutSampleRate;
            char hpfCornerFreq = m_ChirpConfigParams.hpfCornerFreq1;
            char hpfCornerFreq2 = m_ChirpConfigParams.hpfCornerFreq2;
            char c = (char)((int)m_ChirpConfigParams.rxGain | (int)((byte)m_ChirpConfigParams.RFGainTarget) << 6);
            ProfileConfigurationParam.Reserved = 0;
            if (m_StaticParams.EnableTx1 == 1 && m_StaticParams.EnableTx2 == 0 && m_StaticParams.EnableTx3 == 0)
            {
                if (m_ChirpConfigParams.TX0CalibTx0 == 0 && m_ChirpConfigParams.TX0CalibTx1 == 0 && m_ChirpConfigParams.TX0CalibTx2 == 0)
                {
                    ProfileConfigurationParam.Reserved = 0;
                }
                else if (m_ChirpConfigParams.TX0CalibTx0 == 1 && m_ChirpConfigParams.TX0CalibTx1 == 0 && m_ChirpConfigParams.TX0CalibTx2 == 0)
                {
                    ProfileConfigurationParam.Reserved = 0;
                }
                else
                {
                    ProfileConfigurationParam.Reserved = (ushort)((int)m_ChirpConfigParams.TX0CalibTx0 | (int)m_ChirpConfigParams.TX0CalibTx1 << 1 | (int)m_ChirpConfigParams.TX0CalibTx2 << 2);
                    ProfileConfigurationParam.Reserved = (ushort)(ProfileConfigurationParam.Reserved | 32768);
                }
            }
            else if (m_StaticParams.EnableTx1 == 0 && m_StaticParams.EnableTx2 == 1 && m_StaticParams.EnableTx3 == 0)
            {
                if (m_ChirpConfigParams.TX1CalibTx0 == 0 && m_ChirpConfigParams.TX1CalibTx1 == 0 && m_ChirpConfigParams.TX1CalibTx2 == 0)
                {
                    ProfileConfigurationParam.Reserved = 0;
                }
                else if (m_ChirpConfigParams.TX1CalibTx0 == 0 && m_ChirpConfigParams.TX1CalibTx1 == 1 && m_ChirpConfigParams.TX1CalibTx2 == 0)
                {
                    ProfileConfigurationParam.Reserved = 0;
                }
                else
                {
                    ProfileConfigurationParam.Reserved = (ushort)((int)m_ChirpConfigParams.TX1CalibTx0 << 3 | (int)m_ChirpConfigParams.TX1CalibTx1 << 4 | (int)m_ChirpConfigParams.TX1CalibTx2 << 5);
                    ProfileConfigurationParam.Reserved = (ushort)(ProfileConfigurationParam.Reserved | 32768);
                }
            }
            else if (m_StaticParams.EnableTx1 == 0 && m_StaticParams.EnableTx2 == 0 && m_StaticParams.EnableTx3 == 0)
            {
                if (m_ChirpConfigParams.TX2CalibTx0 == 0 && m_ChirpConfigParams.TX2CalibTx1 == 0 && m_ChirpConfigParams.TX2CalibTx2 == 0)
                {
                    ProfileConfigurationParam.Reserved = 0;
                }
                else if (m_ChirpConfigParams.TX2CalibTx0 == 0 && m_ChirpConfigParams.TX2CalibTx1 == 0 && m_ChirpConfigParams.TX2CalibTx2 == 1)
                {
                    ProfileConfigurationParam.Reserved = 0;
                }
                else
                {
                    ProfileConfigurationParam.Reserved = (ushort)((int)m_ChirpConfigParams.TX2CalibTx0 << 6 | (int)m_ChirpConfigParams.TX2CalibTx1 << 7 | (int)m_ChirpConfigParams.TX2CalibTx2 << 8);
                    ProfileConfigurationParam.Reserved = (ushort)(ProfileConfigurationParam.Reserved | 32768);
                }
            }
            else if (m_StaticParams.EnableTx1 == 1 && m_StaticParams.EnableTx2 == 1 && m_StaticParams.EnableTx3 == 0)
            {
                if (m_ChirpConfigParams.TX0CalibTx0 == 0 && m_ChirpConfigParams.TX0CalibTx1 == 0 && m_ChirpConfigParams.TX0CalibTx2 == 0 && m_ChirpConfigParams.TX1CalibTx0 == 0 && m_ChirpConfigParams.TX1CalibTx1 == 0 && m_ChirpConfigParams.TX1CalibTx2 == 0)
                {
                    ProfileConfigurationParam.Reserved = 0;
                }
                else if (m_ChirpConfigParams.TX0CalibTx0 == 1 && m_ChirpConfigParams.TX0CalibTx1 == 0 && m_ChirpConfigParams.TX0CalibTx2 == 0 && m_ChirpConfigParams.TX1CalibTx0 == 0 && m_ChirpConfigParams.TX1CalibTx1 == 1 && m_ChirpConfigParams.TX1CalibTx2 == 0)
                {
                    ProfileConfigurationParam.Reserved = 0;
                }
                else
                {
                    ProfileConfigurationParam.Reserved = (ushort)((int)m_ChirpConfigParams.TX0CalibTx0 | (int)m_ChirpConfigParams.TX0CalibTx1 << 1 | (int)m_ChirpConfigParams.TX0CalibTx2 << 2);
                    ProfileConfigurationParam.Reserved = (ushort)((int)ProfileConfigurationParam.Reserved | ((int)m_ChirpConfigParams.TX1CalibTx0 << 3 | (int)m_ChirpConfigParams.TX1CalibTx1 << 4 | (int)m_ChirpConfigParams.TX1CalibTx2 << 5));
                    ProfileConfigurationParam.Reserved = (ushort)(ProfileConfigurationParam.Reserved | 32768);
                }
            }
            else if (m_StaticParams.EnableTx1 == 1 && m_StaticParams.EnableTx2 == 0 && m_StaticParams.EnableTx3 == 1)
            {
                if (m_ChirpConfigParams.TX0CalibTx0 == 0 && m_ChirpConfigParams.TX0CalibTx1 == 0 && m_ChirpConfigParams.TX0CalibTx2 == 0 && m_ChirpConfigParams.TX2CalibTx0 == 0 && m_ChirpConfigParams.TX2CalibTx1 == 0 && m_ChirpConfigParams.TX2CalibTx2 == 0)
                {
                    ProfileConfigurationParam.Reserved = 0;
                }
                else if (m_ChirpConfigParams.TX0CalibTx0 == 1 && m_ChirpConfigParams.TX0CalibTx1 == 0 && m_ChirpConfigParams.TX0CalibTx2 == 0 && m_ChirpConfigParams.TX2CalibTx0 == 0 && m_ChirpConfigParams.TX2CalibTx1 == 0 && m_ChirpConfigParams.TX2CalibTx2 == 1)
                {
                    ProfileConfigurationParam.Reserved = 0;
                }
                else
                {
                    ProfileConfigurationParam.Reserved = (ushort)((int)m_ChirpConfigParams.TX0CalibTx0 | (int)m_ChirpConfigParams.TX0CalibTx1 << 1 | (int)m_ChirpConfigParams.TX0CalibTx2 << 2);
                    ProfileConfigurationParam.Reserved = (ushort)((int)ProfileConfigurationParam.Reserved | ((int)m_ChirpConfigParams.TX2CalibTx0 << 6 | (int)m_ChirpConfigParams.TX2CalibTx1 << 7 | (int)m_ChirpConfigParams.TX2CalibTx2 << 8));
                    ProfileConfigurationParam.Reserved = (ushort)(ProfileConfigurationParam.Reserved | 32768);
                }
            }
            else if (m_StaticParams.EnableTx1 == 0 && m_StaticParams.EnableTx2 == 1 && m_StaticParams.EnableTx3 == 1)
            {
                if (m_ChirpConfigParams.TX1CalibTx0 == 0 && m_ChirpConfigParams.TX1CalibTx1 == 0 && m_ChirpConfigParams.TX1CalibTx2 == 0 && m_ChirpConfigParams.TX2CalibTx0 == 0 && m_ChirpConfigParams.TX2CalibTx1 == 0 && m_ChirpConfigParams.TX2CalibTx2 == 0)
                {
                    ProfileConfigurationParam.Reserved = 0;
                }
                else if (m_ChirpConfigParams.TX1CalibTx0 == 0 && m_ChirpConfigParams.TX1CalibTx1 == 1 && m_ChirpConfigParams.TX1CalibTx2 == 0 && m_ChirpConfigParams.TX2CalibTx0 == 0 && m_ChirpConfigParams.TX2CalibTx1 == 0 && m_ChirpConfigParams.TX2CalibTx2 == 1)
                {
                    ProfileConfigurationParam.Reserved = 0;
                }
                else
                {
                    ProfileConfigurationParam.Reserved = (ushort)((int)m_ChirpConfigParams.TX1CalibTx0 << 3 | (int)m_ChirpConfigParams.TX1CalibTx1 << 4 | (int)m_ChirpConfigParams.TX1CalibTx2 << 5);
                    ProfileConfigurationParam.Reserved = (ushort)((int)ProfileConfigurationParam.Reserved | ((int)m_ChirpConfigParams.TX2CalibTx0 << 6 | (int)m_ChirpConfigParams.TX2CalibTx1 << 7 | (int)m_ChirpConfigParams.TX2CalibTx2 << 8));
                    ProfileConfigurationParam.Reserved = (ushort)(ProfileConfigurationParam.Reserved | 32768);
                }
            }
            else if (m_StaticParams.EnableTx1 == 1 && m_StaticParams.EnableTx2 == 1 && m_StaticParams.EnableTx3 == 1)
            {
                if (m_ChirpConfigParams.TX0CalibTx0 == 0 && m_ChirpConfigParams.TX0CalibTx1 == 0 && m_ChirpConfigParams.TX0CalibTx2 == 0 && m_ChirpConfigParams.TX1CalibTx0 == 0 && m_ChirpConfigParams.TX1CalibTx1 == 0 && m_ChirpConfigParams.TX1CalibTx2 == 0 && m_ChirpConfigParams.TX2CalibTx0 == 0 && m_ChirpConfigParams.TX2CalibTx1 == 0 && m_ChirpConfigParams.TX2CalibTx2 == 0)
                {
                    ProfileConfigurationParam.Reserved = 0;
                }
                else if (m_ChirpConfigParams.TX0CalibTx0 == 1 && m_ChirpConfigParams.TX0CalibTx1 == 0 && m_ChirpConfigParams.TX0CalibTx2 == 0 && m_ChirpConfigParams.TX1CalibTx0 == 0 && m_ChirpConfigParams.TX1CalibTx1 == 1 && m_ChirpConfigParams.TX1CalibTx2 == 0 && m_ChirpConfigParams.TX2CalibTx0 == 0 && m_ChirpConfigParams.TX2CalibTx1 == 0 && m_ChirpConfigParams.TX2CalibTx2 == 1)
                {
                    ProfileConfigurationParam.Reserved = 0;
                }
                else
                {
                    ProfileConfigurationParam.Reserved = (ushort)((int)m_ChirpConfigParams.TX0CalibTx0 | (int)m_ChirpConfigParams.TX0CalibTx1 << 1 | (int)m_ChirpConfigParams.TX0CalibTx2 << 2);
                    ProfileConfigurationParam.Reserved = (ushort)((int)ProfileConfigurationParam.Reserved | (int)m_ChirpConfigParams.TX1CalibTx0 << 3 | (int)m_ChirpConfigParams.TX1CalibTx1 << 4 | (int)m_ChirpConfigParams.TX1CalibTx2 << 5);
                    ProfileConfigurationParam.Reserved = (ushort)((int)ProfileConfigurationParam.Reserved | ((int)m_ChirpConfigParams.TX2CalibTx0 << 6 | (int)m_ChirpConfigParams.TX2CalibTx1 << 7 | (int)m_ChirpConfigParams.TX2CalibTx2 << 8));
                    ProfileConfigurationParam.Reserved = (ushort)(ProfileConfigurationParam.Reserved | 32768);
                }
            }
            uint num12;
            ushort num13;
            if (GlobalRef.g_ARDeviceOperateFreq60GHz)
            {
                num12 = (uint)Math.Round(num * 67108864.0 / 2.7);
                num13 = (ushort)Math.Round(num10 * 27.61681646090535);
            }
            else
            {
                num12 = (uint)Math.Round(num / 3.6 * 67108864.0);
                num13 = (ushort)Math.Round(num10 * 20.712612345679013);
            }
            uint num14 = (uint)Math.Round(num2 * 100.0);
            uint num15 = (uint)Math.Round(num3 * 100.0);
            uint num16 = (uint)Math.Round(num4 * 100.0);
            short num17 = (short)Math.Round(num11 * 100.0);
            ushort fchirpStartIdx = m_ChirpConfigParams.fchirpStartIdx;
            ushort fchirpEndIdx = m_ChirpConfigParams.fchirpEndIdx;
            ushort loopCount = m_ChirpConfigParams.loopCount;
            IntializeTheProfileSpecificData(pprofileId, num12, num14, num15, num16, m_ChirpConfigParams.tx1OutPowerBackoffCode, m_ChirpConfigParams.tx2OutPowerBackoffCode, m_ChirpConfigParams.tx3OutPowerBackoffCode, num6, num7, num8, num13, num17, pnumAdcSamples, digOutSampleRate, hpfCornerFreq, hpfCornerFreq2, c);
            float num18 = CalculateFrameOnTimeForFrame(fchirpStartIdx, fchirpEndIdx, (uint)loopCount);
            float num19 = CalculateRampOnTimeForFrame(fchirpStartIdx, fchirpEndIdx, (uint)loopCount);
            ScriptOps.m_MainForm.ChirpConfigTab.UpdateFrameDutyCycle(Convert.ToString(Math.Round((double)(num18 / m_ChirpConfigParams.periodicity * 100f), 1)));
            ScriptOps.m_MainForm.ChirpConfigTab.UpdateFrameActiveRampDutyCycle(Convert.ToString(Math.Round((double)(num19 / m_ChirpConfigParams.periodicity * 100f), 1)));
            ProfileConfigurationParam.ProfileIndex = pprofileId;
            ProfileConfigurationParam.VCOSelect = (byte)((int)m_ChirpConfigParams.ForceVCOSelect | (int)m_ChirpConfigParams.VCOSelect << 1);
            ProfileConfigurationParam.CalibLUTUpdate = (byte)((int)m_ChirpConfigParams.RetainTxCalLUT | (int)m_ChirpConfigParams.RetainRxCalLUT << 1);
            ProfileConfigurationParam.FreqStartConst = num12;
            ProfileConfigurationParam.IdleTimeConst = num14;
            ProfileConfigurationParam.ADCStartTimeConst = num15;
            ProfileConfigurationParam.RampEndTimeConst = num16;
            ProfileConfigurationParam.TxOutputPowerBackoff = num5;
            ProfileConfigurationParam.TxPhaseShifter = num9;
            ProfileConfigurationParam.FreqSlopeConst = num13;
            ProfileConfigurationParam.TxStartTime = (ushort)num17;
            ProfileConfigurationParam.ADCSamples = pnumAdcSamples;
            ProfileConfigurationParam.DigOutputSampleRate = digOutSampleRate;
            ProfileConfigurationParam.HPF1CornerFreq = (byte)hpfCornerFreq;
            ProfileConfigurationParam.HPF2CornerFreq = (byte)hpfCornerFreq2;
            ProfileConfigurationParam.RxGain = (ushort)c;
            ProfileConfigurationParam.Reserved2 = 0;
            IntPtr data = GCHandle.Alloc(ProfileConfigurationParam, GCHandleType.Pinned).AddrOfPinnedObject();
            int num20;
            if (GlobalRef.g_NtvRS232Connect[(int)GlobalRef.g_RadarDeviceIndex] && GlobalRef.g_CasCadeDeviceSpiConnect == 0U)
            {
                num20 = m_TsWrapper.Calling_WriteAddr_Single(4294959848U, 1U);
                if (m_GuiManager.DllOps.itempDisconnect(false) == 0)
                {
                    string full_command = string.Format("Debug Port Disconnected", new object[0]);
                    m_GuiManager.RecordLog(0, full_command);
                    if (!GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
                    {
                        iRs232ConnectDisconnect_impl();
                    }
                }
            }
            if (m_RadarDeviceModeConfigParams.NumberOfRadarDevicesDetected <= 1)
            {
                string full_command2 = string.Format("ar1.ProfileConfig({0}, {1}, {2}, {3}, {4}, {5}, {6}, {7}, {8}, {9}, {10}, {11}, {12}, {13}, {14}, {15}, {16}, {17})", new object[]
                {
                    m_ChirpConfigParams.pprofileId,
                    Math.Round(m_ChirpConfigParams.startFreqConst, 7),
                    (decimal)m_ChirpConfigParams.idleTimeConst,
                    (decimal)m_ChirpConfigParams.adcStartTimeConst,
                    (decimal)m_ChirpConfigParams.rampEndTime,
                    m_ChirpConfigParams.tx1OutPowerBackoffCode,
                    m_ChirpConfigParams.tx2OutPowerBackoffCode,
                    m_ChirpConfigParams.tx3OutPowerBackoffCode,
                    (decimal)Math.Round(m_ChirpConfigParams.tx1PhaseShifter, 3),
                    (decimal)Math.Round(m_ChirpConfigParams.tx2PhaseShifter, 3),
                    (decimal)Math.Round(m_ChirpConfigParams.tx3PhaseShifter, 3),
                    (decimal)m_ChirpConfigParams.freqSlopeConst,
                    (decimal)m_ChirpConfigParams.txStartTime,
                    m_ChirpConfigParams.pnumAdcSamples,
                    m_ChirpConfigParams.digOutSampleRate,
                    (uint)((int)m_ChirpConfigParams.hpfCornerFreq1 | (int)ProfileConfigurationParam.Reserved << 16),
                    (int)m_ChirpConfigParams.hpfCornerFreq2 | (int)ProfileConfigurationParam.VCOSelect << 16 | (int)ProfileConfigurationParam.CalibLUTUpdate << 24,
                    c
                });
                m_GuiManager.RecordLog(8, full_command2);
            }
            else
            {
                string full_command3 = string.Format("ar1.ProfileConfig_mult({0}, {1}, {2}, {3}, {4}, {5}, {6}, {7}, {8}, {9}, {10}, {11}, {12}, {13}, {14}, {15}, {16}, {17}, {18})", new object[]
                {
                    GlobalRef.g_RadarDeviceId,
                    m_ChirpConfigParams.pprofileId,
                    Math.Round(m_ChirpConfigParams.startFreqConst, 7),
                    (decimal)m_ChirpConfigParams.idleTimeConst,
                    (decimal)m_ChirpConfigParams.adcStartTimeConst,
                    (decimal)m_ChirpConfigParams.rampEndTime,
                    m_ChirpConfigParams.tx1OutPowerBackoffCode,
                    m_ChirpConfigParams.tx2OutPowerBackoffCode,
                    m_ChirpConfigParams.tx3OutPowerBackoffCode,
                    (decimal)Math.Round(m_ChirpConfigParams.tx1PhaseShifter, 3),
                    (decimal)Math.Round(m_ChirpConfigParams.tx2PhaseShifter, 3),
                    (decimal)Math.Round(m_ChirpConfigParams.tx3PhaseShifter, 3),
                    (decimal)m_ChirpConfigParams.freqSlopeConst,
                    (decimal)m_ChirpConfigParams.txStartTime,
                    m_ChirpConfigParams.pnumAdcSamples,
                    m_ChirpConfigParams.digOutSampleRate,
                    (uint)((int)m_ChirpConfigParams.hpfCornerFreq1 | (int)ProfileConfigurationParam.Reserved << 16),
                    (int)m_ChirpConfigParams.hpfCornerFreq2 | (int)ProfileConfigurationParam.VCOSelect << 16 | (int)ProfileConfigurationParam.CalibLUTUpdate << 24,
                    c
                });
                m_GuiManager.RecordLog(8, full_command3);
            }
            uint g_RadarDeviceId = GlobalRef.g_RadarDeviceId;
            num20 = Imports.RadarLinkImpl_ProfileConfig((byte)GlobalRef.g_RadarDeviceId, data);
            if ((num20 == 0 && ((GlobalRef.g_CasCadeDeviceSpiConnect & 1U) == 1U || (GlobalRef.g_CasCadeDeviceSpiConnect & 2U) == 2U || (GlobalRef.g_CasCadeDeviceSpiConnect & 4U) == 4U || (GlobalRef.g_CasCadeDeviceSpiConnect & 8U) == 8U)) || GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
            {
                string full_command4 = string.Format("Status: Passed", new object[0]);
                m_GuiManager.RecordLog(8, full_command4);
                int num21 = 0;
                while (num21 < 4 && !jsonConfigInProgress)
                {
                    if (((ulong)g_RadarDeviceId & (ulong)(1L << (num21 & 31))) != 0UL)
                    {
                        int mmwaveDevIndex = getMmwaveDevIndex(num21);
                        int i;
                        for (i = 0; i < GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlProfiles.Count; i++)
                        {
                            if (GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlProfiles[i].rlProfileCfg_t.profileId == (int)pprofileId)
                            {
                                GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlProfiles[i].rlProfileCfg_t.profileId = (int)pprofileId;
                                GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlProfiles[i].rlProfileCfg_t.pfVcoSelect = "0x" + ProfileConfigurationParam.VCOSelect.ToString("X");
                                GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlProfiles[i].rlProfileCfg_t.pfCalLutUpdate = "0x" + ProfileConfigurationParam.CalibLUTUpdate.ToString("X");
                                GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlProfiles[i].rlProfileCfg_t.startFreqConst_GHz = m_ChirpConfigParams.startFreqConst;
                                GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlProfiles[i].rlProfileCfg_t.idleTimeConst_usec = (double)m_ChirpConfigParams.idleTimeConst;
                                GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlProfiles[i].rlProfileCfg_t.adcStartTimeConst_usec = (double)m_ChirpConfigParams.adcStartTimeConst;
                                GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlProfiles[i].rlProfileCfg_t.rampEndTime_usec = (double)m_ChirpConfigParams.rampEndTime;
                                GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlProfiles[i].rlProfileCfg_t.txOutPowerBackoffCode = "0x" + num5.ToString("X");
                                GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlProfiles[i].rlProfileCfg_t.txPhaseShifter = "0x" + num9.ToString("X");
                                GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlProfiles[i].rlProfileCfg_t.freqSlopeConst_MHz_usec = (double)m_ChirpConfigParams.freqSlopeConst;
                                GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlProfiles[i].rlProfileCfg_t.txStartTime_usec = (double)m_ChirpConfigParams.txStartTime;
                                GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlProfiles[i].rlProfileCfg_t.numAdcSamples = (int)pnumAdcSamples;
                                GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlProfiles[i].rlProfileCfg_t.digOutSampleRate = (int)digOutSampleRate;
                                GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlProfiles[i].rlProfileCfg_t.hpfCornerFreq1 = (int)ProfileConfigurationParam.HPF1CornerFreq;
                                GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlProfiles[i].rlProfileCfg_t.hpfCornerFreq2 = (int)ProfileConfigurationParam.HPF2CornerFreq;
                                RlProfileCfgT rlProfileCfg_t = GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlProfiles[i].rlProfileCfg_t;
                                string str = "0x";
                                int num22 = (int)c;
                                rlProfileCfg_t.rxGain_dB = str + num22.ToString("X");
                                break;
                            }
                        }
                        if (i == GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlProfiles.Count)
                        {
                            RlProfiles rlProfiles = new RlProfiles();
                            rlProfiles.rlProfileCfg_t = new RlProfileCfgT();
                            rlProfiles.rlProfileCfg_t.profileId = (int)pprofileId;
                            rlProfiles.rlProfileCfg_t.pfVcoSelect = "0x" + ProfileConfigurationParam.VCOSelect.ToString("X");
                            rlProfiles.rlProfileCfg_t.pfCalLutUpdate = "0x" + ProfileConfigurationParam.CalibLUTUpdate.ToString("X");
                            rlProfiles.rlProfileCfg_t.startFreqConst_GHz = m_ChirpConfigParams.startFreqConst;
                            rlProfiles.rlProfileCfg_t.idleTimeConst_usec = (double)m_ChirpConfigParams.idleTimeConst;
                            rlProfiles.rlProfileCfg_t.adcStartTimeConst_usec = (double)m_ChirpConfigParams.adcStartTimeConst;
                            rlProfiles.rlProfileCfg_t.rampEndTime_usec = (double)m_ChirpConfigParams.rampEndTime;
                            rlProfiles.rlProfileCfg_t.txOutPowerBackoffCode = "0x" + num5.ToString("X");
                            rlProfiles.rlProfileCfg_t.txPhaseShifter = "0x" + num9.ToString("X");
                            rlProfiles.rlProfileCfg_t.freqSlopeConst_MHz_usec = (double)m_ChirpConfigParams.freqSlopeConst;
                            rlProfiles.rlProfileCfg_t.txStartTime_usec = (double)m_ChirpConfigParams.txStartTime;
                            rlProfiles.rlProfileCfg_t.numAdcSamples = (int)pnumAdcSamples;
                            rlProfiles.rlProfileCfg_t.digOutSampleRate = (int)digOutSampleRate;
                            rlProfiles.rlProfileCfg_t.hpfCornerFreq1 = (int)ProfileConfigurationParam.HPF1CornerFreq;
                            rlProfiles.rlProfileCfg_t.hpfCornerFreq2 = (int)ProfileConfigurationParam.HPF2CornerFreq;
                            RlProfileCfgT rlProfileCfg_t2 = rlProfiles.rlProfileCfg_t;
                            string str2 = "0x";
                            int num22 = (int)c;
                            rlProfileCfg_t2.rxGain_dB = str2 + num22.ToString("X");
                            GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlProfiles.Add(rlProfiles);
                        }
                    }
                    num21++;
                }
                MatlabPostProcGuiInstance.MatlabPostProcImpl_ProfileConfig((double)pprofileId, num12, num14, num15, num16, num5, num9, (double)num13, (double)num17, (double)pnumAdcSamples, (double)digOutSampleRate, (double)hpfCornerFreq, (double)hpfCornerFreq2, (double)c);
            }
            else
            {
                string msg = string.Format("Status: Failed, Error Type: {0}", new object[]
                {
                    GetErrorType(num20)
                });
                GlobalRef.LuaWrapper.PrintError(msg);
            }
            if (GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
            {
                if (iRs232ConnectDisconnect_impl() == 0 && !GlobalRef.g_NtvRS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
                {
                    m_GuiManager.DllOps.iConnect(1U, 0U);
                    string full_command5 = string.Format("Debug Port Reconnected!", new object[0]);
                    m_GuiManager.RecordLog(9, full_command5);
                    ScriptOps.KeepTrying(2000, new Func<bool>(spare_read));
                }
            }
            else if (GlobalRef.g_CasCadeDeviceSpiConnect == 0U)
            {
                string full_command6 = string.Format("Error Occurred in Port open close", new object[0]);
                m_GuiManager.RecordLog(9, full_command6);
            }
            return num20;
        }

        private int iEnbContStrConfig_Impl(bool is_starting_op, bool is_ending_op)
        {
            int num = -1;
            if (m_StaticParams.EnableTx1 == 1 && m_StaticParams.EnableTx2 == 1)
            {
                int enableTx = m_StaticParams.EnableTx3;
            }
            if (GlobalRef.g_NtvRS232Connect[(int)GlobalRef.g_RadarDeviceIndex] && GlobalRef.g_CasCadeDeviceSpiConnect == 0U)
            {
                num = m_TsWrapper.Calling_WriteAddr_Single(4294959848U, 1U);
                if (m_GuiManager.DllOps.itempDisconnect(false) == 0)
                {
                    string full_command = string.Format("Debug Port Disconnected", new object[0]);
                    m_GuiManager.RecordLog(0, full_command);
                    if (!GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
                    {
                        iRs232ConnectDisconnect_impl();
                    }
                }
            }
            if (ScriptOps.m_MainForm.ContStreamingTab.iGetContStrBtnText() == "Enable (2)")
            {
                int contModeEn = 1;
                uint g_RadarDeviceId = GlobalRef.g_RadarDeviceId;
                num = Imports.RadarLinkImpl_ContStreamingModeConfig(GlobalRef.g_RadarDeviceId, 1, 0);
                Thread.Sleep(300);
                num = Imports.RadarLinkImpl_ContModeEnable(GlobalRef.g_RadarDeviceId, 1);
                if (m_RadarDeviceModeConfigParams.NumberOfRadarDevicesDetected <= 1)
                {
                    string full_command2 = string.Format("ar1.ContStrModEnable()", new object[0]);
                    m_GuiManager.RecordLog(13, full_command2);
                }
                else
                {
                    string full_command3 = string.Format("ar1.ContStrModEnable_mult({0})", new object[]
                    {
                        GlobalRef.g_RadarDeviceId
                    });
                    m_GuiManager.RecordLog(13, full_command3);
                }
                if ((num == 0 && ((GlobalRef.g_CasCadeDeviceSpiConnect & 1U) == 1U || (GlobalRef.g_CasCadeDeviceSpiConnect & 2U) == 2U || (GlobalRef.g_CasCadeDeviceSpiConnect & 4U) == 4U || (GlobalRef.g_CasCadeDeviceSpiConnect & 8U) == 8U)) || GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
                {
                    string full_command4 = string.Format("Status: Passed", new object[0]);
                    m_GuiManager.RecordLog(8, full_command4);
                    int num2 = 0;
                    while (num2 < 4 && !jsonConfigInProgress)
                    {
                        if (((ulong)g_RadarDeviceId & (ulong)(1L << (num2 & 31))) != 0UL)
                        {
                            int mmwaveDevIndex = getMmwaveDevIndex(num2);
                            GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlContModeEn_t.contModeEn = contModeEn;
                            GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlContModeEn_t.isConfigured = 1;
                            GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.waveformType = "continuousWave";
                        }
                        num2++;
                    }
                    ScriptOps.m_MainForm.ContStreamingTab.iSetContStrBtnText("Disable (2)");
                    MatlabPostProcGuiInstance.MatlabPostProcImpl_ContModeEnable(1.0);
                }
                else
                {
                    string msg = string.Format("Status: Failed, Error Type: {0}", new object[]
                    {
                        GetErrorType(num)
                    });
                    GlobalRef.LuaWrapper.PrintError(msg);
                }
            }
            else if (ScriptOps.m_MainForm.ContStreamingTab.iGetContStrBtnText() == "Disable (2)")
            {
                int contModeEn2 = 0;
                uint g_RadarDeviceId2 = GlobalRef.g_RadarDeviceId;
                num = Imports.RadarLinkImpl_ContStreamingModeConfig(GlobalRef.g_RadarDeviceId, 0, 0);
                Thread.Sleep(300);
                num = Imports.RadarLinkImpl_ContModeEnable(GlobalRef.g_RadarDeviceId, 0);
                if (m_RadarDeviceModeConfigParams.NumberOfRadarDevicesDetected <= 1)
                {
                    string full_command5 = string.Format("ar1.ContStrModDisable()", new object[0]);
                    m_GuiManager.RecordLog(13, full_command5);
                }
                else
                {
                    string full_command6 = string.Format("ar1.ContStrModDisable_mult({0})", new object[]
                    {
                        GlobalRef.g_RadarDeviceId
                    });
                    m_GuiManager.RecordLog(13, full_command6);
                }
                if ((num == 0 && ((GlobalRef.g_CasCadeDeviceSpiConnect & 1U) == 1U || (GlobalRef.g_CasCadeDeviceSpiConnect & 2U) == 2U || (GlobalRef.g_CasCadeDeviceSpiConnect & 4U) == 4U || (GlobalRef.g_CasCadeDeviceSpiConnect & 8U) == 8U)) || GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
                {
                    string full_command7 = string.Format("Status: Passed", new object[0]);
                    m_GuiManager.RecordLog(8, full_command7);
                    ScriptOps.m_MainForm.ContStreamingTab.iSetContStrBtnText("Enable (2)");
                    int num3 = 0;
                    while (num3 < 4 && !jsonConfigInProgress)
                    {
                        if (((ulong)g_RadarDeviceId2 & (ulong)(1L << (num3 & 31))) != 0UL)
                        {
                            int mmwaveDevIndex2 = getMmwaveDevIndex(num3);
                            GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex2].rfConfig.rlContModeEn_t.contModeEn = contModeEn2;
                            GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex2].rfConfig.rlContModeEn_t.isConfigured = 1;
                        }
                        num3++;
                    }
                    MatlabPostProcGuiInstance.MatlabPostProcImpl_ContModeEnable(0.0);
                }
                else
                {
                    string msg2 = string.Format("Status: Failed, Error Type: {0}", new object[]
                    {
                        GetErrorType(num)
                    });
                    GlobalRef.LuaWrapper.PrintError(msg2);
                }
            }
            if (GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
            {
                if (iRs232ConnectDisconnect_impl() == 0 && !GlobalRef.g_NtvRS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
                {
                    m_GuiManager.DllOps.iConnect(1U, 0U);
                    string full_command8 = string.Format("Debug Port Reconnected!", new object[0]);
                    m_GuiManager.RecordLog(9, full_command8);
                    ScriptOps.KeepTrying(2000, new Func<bool>(spare_read));
                }
            }
            else if (GlobalRef.g_CasCadeDeviceSpiConnect == 0U)
            {
                string full_command9 = string.Format("Error Occurred in Port open close", new object[0]);
                m_GuiManager.RecordLog(9, full_command9);
            }
            return num;
        }

        private int iStartMtlbFrContProcessingForADCCapture(bool is_starting_op, bool is_ending_op)
        {
            string text = string.Empty;
            int result = -1;
            string msg = string.Format("Started Continuous streaming ADC Data Capture", new object[0]);
            m_GuiManager.Log(msg);
            ScriptOps.m_MainForm.ContStreamingTab.UpdateMtLbContStrData();
            string text2 = null;
            Path.GetDirectoryName(Application.ExecutablePath);
            if (!string.IsNullOrEmpty(m_ContStreamParams.mtlbAdcPath))
            {
                text2 = m_ContStreamParams.mtlbAdcPath;
            }
            else
            {
                string msg2 = string.Format("Please select a file to save ADC data", new object[0]);
                m_GuiManager.Log(msg2);
            }
            try
            {
                string full_command = string.Format("ar1.CaptureContStreamADCData(\"{0}\", {1})", new object[]
                {
                    text2,
                    m_BasicConfigurationForAnalysisParams.NumberOfSamples
                });
                m_GuiManager.RecordLog(103, full_command);
                int configInvalid = Convert.ToInt32(((double[])((MWNumericArray)MatlabPostProcGuiInstance.setup_for_triggered_capture_in_continuous_streaming(text2, m_BasicConfigurationForAnalysisParams.NumberOfSamples)).ToVector(MWArrayComponent.Real))[0]);
                text = InterpretConfigInvalidData(configInvalid);
                if (text.Replace('\t'.ToString(), "").Replace("\"", "") == "No Error")
                {
                    string.Format("MatlabProc Status: {0}", new object[]
                    {
                        text
                    });
                }
                else
                {
                    string full_command2 = string.Format("MatlabProc Status: Error Type: {0}", new object[]
                    {
                        text
                    });
                    m_GuiManager.RecordLog(8, full_command2);
                }
                string msg3 = string.Format("Status: Passed", new object[0]);
                m_GuiManager.Log(msg3);
                result = 0;
            }
            catch (Exception ex)
            {
                m_GuiManager.Error(ex.Message, ex.StackTrace);
                return result;
            }
            return 0;
        }

        public string GetFileBasePath(string filename)
        {
            string[] array = filename.Split(new char[]
            {
                '\\'
            });
            int num = array.Length;
            string text = "";
            for (int i = 0; i < num - 1; i++)
            {
                if (i != num - 2)
                {
                    text = text + array[i] + "\\";
                }
                else if (i == num - 2)
                {
                    text += array[i];
                }
            }
            return text;
        }

        public string GetRawFileName(string filename)
        {
            string[] array = filename.Split(new char[]
            {
                '\\'
            });
            int num = array.Length;
            return Path.GetFileNameWithoutExtension(array[num - 1]);
        }

        private int iStartMatlabForContProcessingForADCCaptureFromCaptureCard(bool is_starting_op, bool is_ending_op)
        {
            string empty = string.Empty;
            string text = Path.GetDirectoryName(Application.StartupPath) + "\\PostProc";
            string text2 = "cf.json";
            string path = text + "\\cf.json";
            string text3 = "DCA1000EVM_CLI_Record.exe";
            if (!GlobalRef.g_ContStreamCaptureStartStopStatus)
            {
                Path.GetDirectoryName(Application.ExecutablePath);
                if (string.IsNullOrEmpty(m_GuiManager.MainTsForm.ContStreamingTab.iGetMtLbPostProcPathForDataCapture()))
                {
                    string msg = string.Format("Please select a file to save Data Capture Raw ADC data for Post Processing", new object[0]);
                    m_GuiManager.Log(msg);
                    return 0;
                }
                string text4 = m_GuiManager.MainTsForm.ContStreamingTab.iGetMtLbPostProcPathForDataCapture();
                int num = GlobalRef.g_CapturePktSequenceEnaDisable ? 1 : 0;
                if (GlobalRef.g_RadarDeviceId == 1U)
                {
                    string full_command = string.Format("ar1.CaptureCardConfig_StartRecord_ContinuousStreamData(\"{0}\", {1})", new object[]
                    {
                        text4,
                        num
                    });
                    m_GuiManager.RecordLog(2, full_command);
                }
                GlobalRef.g_ContStreamCaptureStartStopStatus = true;
                m_GuiManager.MainTsForm.ContStreamingTab.ChangeStatusFromStartCaptureToStopCaptureInContStream(true);
                string[] array = text4.Split(new char[]
                {
                    '\\'
                });
                int num2 = array.Length;
                string text5 = "";
                for (int i = 0; i < num2 - 1; i++)
                {
                    if (i != num2 - 2)
                    {
                        text5 = text5 + array[i] + "\\";
                    }
                    else if (i == num2 - 2)
                    {
                        text5 += array[i];
                    }
                }
                string arg = text5;
                string fileNameWithoutExtension = Path.GetFileNameWithoutExtension(array[num2 - 1]);
                object obj = JsonConvert.DeserializeObject(File.ReadAllText(path));
                if (ScriptOps.c0002aa.f0001ae == null)
                {
                    ScriptOps.c0002aa.f0001ae = CallSite<Func<CallSite, object, string, string, object>>.Create(Binder.SetIndex(CSharpBinderFlags.None, typeof(ScriptOps), new CSharpArgumentInfo[]
                    {
                        CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.None, null),
                        CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.UseCompileTimeType | CSharpArgumentInfoFlags.Constant, null),
                        CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.UseCompileTimeType, null)
                    }));
                }
                Func<CallSite, object, string, string, object> target = ScriptOps.c0002aa.f0001ae.Target;
                CallSite f0001ae = ScriptOps.c0002aa.f0001ae;
                if (ScriptOps.c0002aa.f0001ad == null)
                {
                    ScriptOps.c0002aa.f0001ad = CallSite<Func<CallSite, object, string, object>>.Create(Binder.GetIndex(CSharpBinderFlags.None, typeof(ScriptOps), new CSharpArgumentInfo[]
                    {
                        CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.None, null),
                        CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.UseCompileTimeType | CSharpArgumentInfoFlags.Constant, null)
                    }));
                }
                Func<CallSite, object, string, object> target2 = ScriptOps.c0002aa.f0001ad.Target;
                CallSite f0001ad = ScriptOps.c0002aa.f0001ad;
                if (ScriptOps.c0002aa.f0001ac == null)
                {
                    ScriptOps.c0002aa.f0001ac = CallSite<Func<CallSite, object, string, object>>.Create(Binder.GetIndex(CSharpBinderFlags.None, typeof(ScriptOps), new CSharpArgumentInfo[]
                    {
                        CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.None, null),
                        CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.UseCompileTimeType | CSharpArgumentInfoFlags.Constant, null)
                    }));
                }
                target(f0001ae, target2(f0001ad, ScriptOps.c0002aa.f0001ac.Target(ScriptOps.c0002aa.f0001ac, obj, "DCA1000Config"), "captureConfig"), "fileBasePath", arg);
                if (ScriptOps.c0002aa.f0001b1 == null)
                {
                    ScriptOps.c0002aa.f0001b1 = CallSite<Func<CallSite, object, string, string, object>>.Create(Binder.SetIndex(CSharpBinderFlags.None, typeof(ScriptOps), new CSharpArgumentInfo[]
                    {
                        CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.None, null),
                        CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.UseCompileTimeType | CSharpArgumentInfoFlags.Constant, null),
                        CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.UseCompileTimeType, null)
                    }));
                }
                Func<CallSite, object, string, string, object> target3 = ScriptOps.c0002aa.f0001b1.Target;
                CallSite f0001b = ScriptOps.c0002aa.f0001b1;
                if (ScriptOps.c0002aa.f0001b0 == null)
                {
                    ScriptOps.c0002aa.f0001b0 = CallSite<Func<CallSite, object, string, object>>.Create(Binder.GetIndex(CSharpBinderFlags.None, typeof(ScriptOps), new CSharpArgumentInfo[]
                    {
                        CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.None, null),
                        CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.UseCompileTimeType | CSharpArgumentInfoFlags.Constant, null)
                    }));
                }
                Func<CallSite, object, string, object> target4 = ScriptOps.c0002aa.f0001b0.Target;
                CallSite f0001b2 = ScriptOps.c0002aa.f0001b0;
                if (ScriptOps.c0002aa.f0001af == null)
                {
                    ScriptOps.c0002aa.f0001af = CallSite<Func<CallSite, object, string, object>>.Create(Binder.GetIndex(CSharpBinderFlags.None, typeof(ScriptOps), new CSharpArgumentInfo[]
                    {
                        CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.None, null),
                        CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.UseCompileTimeType | CSharpArgumentInfoFlags.Constant, null)
                    }));
                }
                target3(f0001b, target4(f0001b2, ScriptOps.c0002aa.f0001af.Target(ScriptOps.c0002aa.f0001af, obj, "DCA1000Config"), "captureConfig"), "filePrefix", fileNameWithoutExtension);
                if (ScriptOps.c0002aa.f0001b4 == null)
                {
                    ScriptOps.c0002aa.f0001b4 = CallSite<Func<CallSite, object, string, int, object>>.Create(Binder.SetIndex(CSharpBinderFlags.None, typeof(ScriptOps), new CSharpArgumentInfo[]
                    {
                        CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.None, null),
                        CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.UseCompileTimeType | CSharpArgumentInfoFlags.Constant, null),
                        CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.UseCompileTimeType, null)
                    }));
                }
                Func<CallSite, object, string, int, object> target5 = ScriptOps.c0002aa.f0001b4.Target;
                CallSite f0001b3 = ScriptOps.c0002aa.f0001b4;
                if (ScriptOps.c0002aa.f0001b3 == null)
                {
                    ScriptOps.c0002aa.f0001b3 = CallSite<Func<CallSite, object, string, object>>.Create(Binder.GetIndex(CSharpBinderFlags.None, typeof(ScriptOps), new CSharpArgumentInfo[]
                    {
                        CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.None, null),
                        CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.UseCompileTimeType | CSharpArgumentInfoFlags.Constant, null)
                    }));
                }
                Func<CallSite, object, string, object> target6 = ScriptOps.c0002aa.f0001b3.Target;
                CallSite f0001b4 = ScriptOps.c0002aa.f0001b3;
                if (ScriptOps.c0002aa.f0001b2 == null)
                {
                    ScriptOps.c0002aa.f0001b2 = CallSite<Func<CallSite, object, string, object>>.Create(Binder.GetIndex(CSharpBinderFlags.None, typeof(ScriptOps), new CSharpArgumentInfo[]
                    {
                        CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.None, null),
                        CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.UseCompileTimeType | CSharpArgumentInfoFlags.Constant, null)
                    }));
                }
                target5(f0001b3, target6(f0001b4, ScriptOps.c0002aa.f0001b2.Target(ScriptOps.c0002aa.f0001b2, obj, "DCA1000Config"), "captureConfig"), "sequenceNumberEnable", num);
                if (ScriptOps.c0002aa.f0001b6 == null)
                {
                    ScriptOps.c0002aa.f0001b6 = CallSite<Func<CallSite, object, string>>.Create(Binder.Convert(CSharpBinderFlags.None, typeof(string), typeof(ScriptOps)));
                }
                Func<CallSite, object, string> target7 = ScriptOps.c0002aa.f0001b6.Target;
                CallSite f0001b5 = ScriptOps.c0002aa.f0001b6;
                if (ScriptOps.c0002aa.f0001b5 == null)
                {
                    ScriptOps.c0002aa.f0001b5 = CallSite<Func<CallSite, Type, object, Newtonsoft.Json.Formatting, object>>.Create(Binder.InvokeMember(CSharpBinderFlags.None, "SerializeObject", null, typeof(ScriptOps), new CSharpArgumentInfo[]
                    {
                        CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.UseCompileTimeType | CSharpArgumentInfoFlags.IsStaticType, null),
                        CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.None, null),
                        CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.UseCompileTimeType | CSharpArgumentInfoFlags.Constant, null)
                    }));
                }
                string contents = target7(f0001b5, ScriptOps.c0002aa.f0001b5.Target(ScriptOps.c0002aa.f0001b5, typeof(JsonConvert), obj, Newtonsoft.Json.Formatting.Indented));
                File.WriteAllText(path, contents);
                string text6 = "start_record";
                string arguments = string.Concat(new string[]
                {
                    "/C ",
                    text3,
                    " ",
                    text6,
                    " ",
                    text2
                });
                GlobalRef.g_processLua = Process.Start(new ProcessStartInfo
                {
                    FileName = "CMD.EXE",
                    WorkingDirectory = text,
                    Arguments = arguments,
                    UseShellExecute = false,
                    RedirectStandardOutput = true,
                    RedirectStandardError = true,
                    RedirectStandardInput = true,
                    CreateNoWindow = true
                });
                string full_command2 = string.Format("Sending {0} command to DCA1000", text6);
                m_GuiManager.RecordLog(0, full_command2);
                if (GlobalRef.g_processLua != null && !GlobalRef.g_processLua.HasExited)
                {
                    GlobalRef.g_processLua.WaitForExit();
                    string full_command3 = GlobalRef.g_processLua.StandardOutput.ReadToEnd();
                    m_GuiManager.RecordLog(0, full_command3);
                }
                CopyMatlabLogFileForDCA1000ForAnalysis(text4);
                Thread.Sleep(100);
            }
            else if (GlobalRef.g_ContStreamCaptureStartStopStatus)
            {
                text2 = "cf.json";
                path = text + "\\cf.json";
                text3 = "DCA1000EVM_CLI_Record.exe";
                if (m_RadarDeviceModeConfigParams.NumberOfRadarDevicesDetected <= 1)
                {
                    string full_command4 = string.Format("ar1.CaptureCardConfig_StopRecord_ContinuousStreamData()", new object[0]);
                    m_GuiManager.RecordLog(2, full_command4);
                }
                string text7 = "stop_record";
                string arguments2 = string.Concat(new string[]
                {
                    "/C ",
                    text3,
                    " ",
                    text7,
                    " ",
                    text2
                });
                GlobalRef.g_processLua = Process.Start(new ProcessStartInfo
                {
                    FileName = "CMD.EXE",
                    WorkingDirectory = text,
                    Arguments = arguments2,
                    UseShellExecute = false,
                    RedirectStandardOutput = true,
                    RedirectStandardError = true,
                    RedirectStandardInput = true,
                    CreateNoWindow = true
                });
                string full_command5 = string.Format("Sending {0} command to DCA1000", text7);
                m_GuiManager.RecordLog(0, full_command5);
                if (GlobalRef.g_processLua != null && !GlobalRef.g_processLua.HasExited)
                {
                    GlobalRef.g_processLua.WaitForExit();
                    string full_command6 = GlobalRef.g_processLua.StandardOutput.ReadToEnd();
                    m_GuiManager.RecordLog(0, full_command6);
                }
                GlobalRef.g_ContStreamCaptureStartStopStatus = false;
                m_GuiManager.MainTsForm.ContStreamingTab.ChangeStatusFromStartCaptureToStopCaptureInContStream(false);
            }
            return 0;
        }

        private int iStartMeasureGainandNF(bool is_starting_op, bool is_ending_op)
        {
            string empty = string.Empty;
            m_ContStreamParams.ContStremForceContStreamMode = 1;
            string msg = string.Format("Started Gain and NF script", new object[0]);
            m_GuiManager.Log(msg);
            string directoryName = Path.GetDirectoryName(Application.StartupPath);
            string file_name = string.Concat(new string[]
            {
                directoryName + "\\Scripts\\Meas_Gain_and_NF_in_ContStreamMode.lua"
            });
            GlobalRef.LuaWrapper.DoFile(file_name);
            ScriptOps.m_MainForm.ContStreamingTab.UpdateMtLbContStrData();
            string.Concat(new string[]
            {
                m_ContStreamParams.mtlbAdcPath
            });
            string lua_str = "MeasGainNF([[" + m_ContStreamParams.mtlbAdcPath + "]])";
            GlobalRef.LuaWrapper.DoString(lua_str);
            return 0;
        }

        private int iStartMeasureGain(bool is_starting_op, bool is_ending_op)
        {
            string empty = string.Empty;
            m_ContStreamParams.ContStremForceContStreamMode = 1;
            string msg = string.Format("Started Gain script", new object[0]);
            m_GuiManager.Log(msg);
            string directoryName = Path.GetDirectoryName(Application.StartupPath);
            string file_name = string.Concat(new string[]
            {
                directoryName + "\\Scripts\\Meas_Gain.lua"
            });
            GlobalRef.LuaWrapper.DoFile(file_name);
            ScriptOps.m_MainForm.ContStreamingTab.UpdateMtLbContStrData();
            string full_command = string.Format("ar1.MeasureGain(\"{0}\", {1},{2},{3})", new object[]
            {
                m_ContStreamParams.mtlbAdcPath,
                m_ContStreamParams.GainNFRxChain,
                m_ContStreamParams.GainNFToneFreq,
                m_ContStreamParams.GainNFInputPower
            });
            m_GuiManager.RecordLog(103, full_command);
            string.Concat(new string[]
            {
                m_ContStreamParams.mtlbAdcPath
            });
            string lua_str = string.Concat(new object[]
            {
                "Meas_Gain([[",
                m_ContStreamParams.mtlbAdcPath,
                "]],",
                m_ContStreamParams.GainNFRxChain,
                ",",
                m_ContStreamParams.GainNFToneFreq,
                ",",
                m_ContStreamParams.GainNFInputPower,
                ")"
            });
            GlobalRef.LuaWrapper.DoString(lua_str);
            return 0;
        }

        private int iStartMeasureNF(bool is_starting_op, bool is_ending_op)
        {
            string empty = string.Empty;
            m_ContStreamParams.ContStremForceContStreamMode = 1;
            string msg = string.Format("Started NF script", new object[0]);
            m_GuiManager.Log(msg);
            string directoryName = Path.GetDirectoryName(Application.StartupPath);
            string file_name = string.Concat(new string[]
            {
                directoryName + "\\Scripts\\Meas_NF.lua"
            });
            GlobalRef.LuaWrapper.DoFile(file_name);
            ScriptOps.m_MainForm.ContStreamingTab.UpdateMtLbContStrData();
            string.Concat(new string[]
            {
                m_ContStreamParams.mtlbAdcPath
            });
            string full_command = string.Format("ar1.MeasureNF(\"{0}\", {1},{2})", m_ContStreamParams.mtlbAdcPath, m_ContStreamParams.GainNFRxChain, m_ContStreamParams.GainNFToneFreq);
            m_GuiManager.RecordLog(103, full_command);
            string lua_str = string.Concat(new object[]
            {
                "Meas_NF([[",
                m_ContStreamParams.mtlbAdcPath,
                "]],",
                m_ContStreamParams.GainNFRxChain,
                ",",
                m_ContStreamParams.GainNFToneFreq,
                ")"
            });
            GlobalRef.LuaWrapper.DoString(lua_str);
            return 0;
        }

        private int iStartCaptureCardMtlbFrContProcessingForADCDataProcessingANdDisplay(bool is_starting_op, bool is_ending_op)
        {
            string empty = string.Empty;
            int result = -1;
            m_ContStreamParams.ContStremForceContStreamMode = 1;
            string msg = string.Format("Capture Card Started Continuous Streaming ADC Data Processing and Display", new object[0]);
            m_GuiManager.Log(msg);
            ScriptOps.m_MainForm.ContStreamingTab.UpdateMtLbContStrData();
            string text = null;
            Path.GetDirectoryName(Application.ExecutablePath);
            if (!string.IsNullOrEmpty(m_ContStreamParams.mtlbAdcPath))
            {
                text = m_ContStreamParams.mtlbAdcPath;
            }
            else
            {
                string msg2 = string.Format("Please select a file to save ADC data", new object[0]);
                m_GuiManager.Log(msg2);
            }
            try
            {
                string full_command = string.Format("ar1.ProcessContStreamADCData(\"{0}\")", text);
                m_GuiManager.RecordLog(103, full_command);
                string empty2 = string.Empty;
                long num2;
                if (GlobalRef.g_4ChipCascade || GlobalRef.g_2ChipCascade)
                {
                    string[] array = text.Split(new char[]
                    {
                        '\\'
                    });
                    int num = array.Length;
                    string fileNameWithoutExtension = Path.GetFileNameWithoutExtension(array[num - 1]);
                    string directoryName = Path.GetDirectoryName(Application.StartupPath);
                    text = string.Concat(new string[]
                    {
                        directoryName + "\\PostProc\\" + fileNameWithoutExtension + ".bin"
                    });
                    num2 = (long)new DirectoryInfo(string.Concat(new string[]
                    {
                        directoryName + "\\PostProc\\" + fileNameWithoutExtension
                    })).GetFiles("*_data.bin").Length;
                }
                else
                {
                    num2 = (long)m_GuiManager.MainTsForm.ChirpConfigTab.GetNumOfFilesCaptured(text);
                }
                full_command = string.Format("No of files Captured: {0}", num2);
                m_GuiManager.RecordLog(0, full_command);
                if (num2 != 0L)
                {
                    MatlabPostProcGuiInstance.process_adc_data(text, (double)m_ContStreamParams.ContStremForceContStreamMode);
                    string msg3 = string.Format("Status: Passed", new object[0]);
                    m_GuiManager.Log(msg3);
                }
                else
                {
                    GlobalRef.LuaWrapper.PrintError("Error : The number of files captured is zero!");
                }
            }
            catch (Exception ex)
            {
                m_GuiManager.Error(ex.Message, ex.StackTrace, false, false);
                return result;
            }
            return 0;
        }

        private int iStartMtlbFrContProcessingForADCDataProcessingANdDisplay(bool is_starting_op, bool is_ending_op)
        {
            string empty = string.Empty;
            int result = -1;
            m_ContStreamParams.ContStremForceContStreamMode = 1;
            string msg = string.Format("Started Continuous Streaming ADC Data Processing and Display", new object[0]);
            m_GuiManager.Log(msg);
            ScriptOps.m_MainForm.ContStreamingTab.UpdateMtLbContStrData();
            string text = null;
            Path.GetDirectoryName(Application.ExecutablePath);
            if (!string.IsNullOrEmpty(m_ContStreamParams.mtlbAdcPath))
            {
                text = m_ContStreamParams.mtlbAdcPath;
            }
            else
            {
                string msg2 = string.Format("Please select a file to save ADC data", new object[0]);
                m_GuiManager.Log(msg2);
            }
            try
            {
                string full_command = string.Format("ar1.ProcessContStreamADCData(\"{0}\")", text);
                m_GuiManager.RecordLog(103, full_command);
                MatlabPostProcGuiInstance.process_adc_data(text, (double)m_ContStreamParams.ContStremForceContStreamMode);
                string msg3 = string.Format("Status: Passed", new object[0]);
                m_GuiManager.Log(msg3);
                result = 0;
            }
            catch (Exception ex)
            {
                m_GuiManager.Error(ex.Message, ex.StackTrace, false, false);
                return result;
            }
            return 0;
        }

        private int iStartMtlbFrContProcessing(bool is_starting_op, bool is_ending_op)
        {
            string text = string.Empty;
            int result = -1;
            string msg = string.Format("Entered iStartMtlbFrContProcessing()", new object[0]);
            m_GuiManager.Log(msg);
            ScriptOps.m_MainForm.ContStreamingTab.UpdateMtLbContStrData();
            string text2 = null;
            Path.GetDirectoryName(Application.ExecutablePath);
            if (!string.IsNullOrEmpty(m_ContStreamParams.mtlbAdcPath))
            {
                text2 = m_ContStreamParams.mtlbAdcPath;
            }
            else
            {
                string msg2 = string.Format("Please select a file to save ADC data", new object[0]);
                m_GuiManager.Log(msg2);
            }
            try
            {
                int configInvalid = Convert.ToInt32(((double[])((MWNumericArray)MatlabPostProcGuiInstance.setup_for_triggered_capture_in_continuous_streaming(text2, (double)m_ContStreamParams.noOfAdcSamples)).ToVector(MWArrayComponent.Real))[0]);
                text = InterpretConfigInvalidData(configInvalid);
                string full_command = string.Format("Status: Error Type: {0}", new object[]
                {
                    text
                });
                m_GuiManager.RecordLog(8, full_command);
                string msg3 = string.Format("ar1.setUpContMode(\"{0}\", {1})", new object[]
                {
                    text2,
                    m_ContStreamParams.noOfAdcSamples
                });
                m_GuiManager.Log(msg3);
                MatlabPostProcGuiInstance.process_adc_data(text2, 1.0);
                string msg4 = string.Format("Status: Passed", new object[0]);
                m_GuiManager.Log(msg4);
                result = 0;
            }
            catch (Exception ex)
            {
                m_GuiManager.Error(ex.Message, ex.StackTrace);
                return result;
            }
            return 0;
        }

        public int iStartMtlbFrContProcessing(string filename, int NoOfSamples)
        {
            string text = null;
            Path.GetDirectoryName(Application.ExecutablePath);
            if (!string.IsNullOrEmpty(filename))
            {
                text = filename;
            }
            else
            {
                string msg = string.Format("Please select a file to save ADC data", new object[0]);
                m_GuiManager.Log(msg);
            }
            MatlabPostProcGuiInstance.setup_for_triggered_capture_in_continuous_streaming(text, (double)m_ContStreamParams.noOfAdcSamples);
            MatlabPostProcGuiInstance.process_adc_data(text);
            string msg2 = string.Format("process_adc_data({0})", new object[]
            {
                text
            });
            m_GuiManager.Log(msg2);
            string msg3 = string.Format("Status: Passed", new object[0]);
            m_GuiManager.Log(msg3);
            return 0;
        }

        public int SavePostProcPicture(string ADCFileName)
        {
            int num = -1;
            int result;
            try
            {
                string msg = string.Format("ar1.SavePostProcPicture(\"{0}\")", new object[]
                {
                    ADCFileName
                });
                m_GuiManager.Log(msg);
                MatlabPostProcGuiInstance.save_a_picture(ADCFileName);
                string msg2 = string.Format("Status: Passed", new object[0]);
                m_GuiManager.Log(msg2);
                num = 0;
                result = num;
            }
            catch (Exception ex)
            {
                m_GuiManager.Error(ex.Message, ex.StackTrace);
                result = num;
            }
            return result;
        }

        public int SelectChipVersion(string chipName)
        {
            int num = -1;
            int result;
            try
            {
                if (chipName == "XWR1243" || chipName == "XWR1443" || chipName == "XWR2243")
                {
                    chipName = "AR1243";
                }
                else if (chipName == "XWR1642")
                {
                    chipName = "AR1642";
                }
                else if (chipName == "XWR1843")
                {
                    chipName = "AR1642";
                }
                else if (chipName == "IWR6843")
                {
                    chipName = "IWR6843";
                }
                if (chipName == "AR1443")
                {
                    chipName = "AR1243";
                }
                MatlabPostProcGuiInstance.select_chip_version(chipName);
                num = 0;
                string full_command = string.Format("ar1.SelectChipVersion(\"{0}\")", new object[]
                {
                    chipName
                });
                m_GuiManager.RecordLog(13, full_command);
                string full_command2 = string.Format("Status: Passed", new object[0]);
                m_GuiManager.RecordLog(8, full_command2);
                result = num;
            }
            catch (Exception ex)
            {
                m_GuiManager.Error(ex.Message, ex.StackTrace);
                result = num;
            }
            return result;
        }

        public int MeasureOfDCVoltage(string ADCfilename, uint Rxchain, uint I_or_Q, out double DCVoltageI, out double DCVoltageQ)
        {
            int result = -1;
            DCVoltageI = 0.0;
            DCVoltageQ = 0.0;
            try
            {
                double[] array = (double[])((MWNumericArray)MatlabPostProcGuiInstance.measure_dc(ADCfilename, Rxchain, I_or_Q)).ToVector(MWArrayComponent.Real);
                if (I_or_Q == 0U)
                {
                    DCVoltageI = Convert.ToDouble(array[0]);
                    DCVoltageQ = Convert.ToDouble(array[1]);
                }
                else if (I_or_Q == 1U)
                {
                    DCVoltageI = Convert.ToDouble(array[0]);
                    DCVoltageQ = 0.0;
                }
                else if (I_or_Q == 2U)
                {
                    DCVoltageI = 0.0;
                    DCVoltageQ = Convert.ToDouble(array[0]);
                }
                result = 0;
            }
            catch (Exception ex)
            {
                m_GuiManager.Error(ex.Message, ex.StackTrace, false, false);
                return result;
            }
            return result;
        }

        public int ConvertFromNonnterleavedTointerleave(string input_file_name, string output_file_name, uint file_type)
        {
            int num = -1;
            int result;
            try
            {
                MatlabPostProcGuiInstance.convert_from_non_interleaved_to_interleaved(input_file_name, output_file_name, file_type);
                num = 0;
                result = num;
            }
            catch (Exception ex)
            {
                m_GuiManager.Error(ex.Message, ex.StackTrace, false, false);
                result = num;
            }
            return result;
        }

        public int CreateHistogramFFTOutput(string output_file_name, string input_file_name, uint MinLimit, uint MaxLimit, uint NumBins, uint TypeOfData, uint RxChain, uint I_OR_Q)
        {
            int num = -1;
            int result;
            try
            {
                MatlabPostProcGuiInstance.create_histogram(output_file_name, input_file_name, MinLimit, MaxLimit, NumBins, TypeOfData, RxChain, I_OR_Q);
                num = 0;
                result = num;
            }
            catch (Exception ex)
            {
                m_GuiManager.Error(ex.Message, ex.StackTrace, false, false);
                result = num;
            }
            return result;
        }

        public int MeasureTheFundPower(string ADCfilename, double p1, uint Rxchain, uint I_or_Q, out double Power_dBFs, out double freq_Hz, out double phase_rad)
        {
            int num = -1;
            Power_dBFs = 0.0;
            freq_Hz = 0.0;
            phase_rad = 0.0;
            int result;
            try
            {
                float[] array = (float[])((MWNumericArray)MatlabPostProcGuiInstance.measure_fund_power(ADCfilename, p1, Rxchain, I_or_Q)).ToVector(MWArrayComponent.Real);
                Power_dBFs = (double)array[0];
                freq_Hz = (double)array[1];
                phase_rad = (double)array[2];
                num = 0;
                result = num;
            }
            catch (Exception ex)
            {
                m_GuiManager.Error(ex.Message, ex.StackTrace, false, false);
                result = num;
            }
            return result;
        }

        public int MeasureTheSecondHarmonicCharacsteristics(string ADCfilename, double fund_freq_hz, double p2, uint Rxchain, uint I_or_Q, out double Power_dBFs, out double freq_Hz, out double phase_rad)
        {
            int num = -1;
            Power_dBFs = 0.0;
            freq_Hz = 0.0;
            phase_rad = 0.0;
            int result;
            try
            {
                float[] array = (float[])((MWNumericArray)MatlabPostProcGuiInstance.measure_second_harmonic_characteristics(ADCfilename, fund_freq_hz, p2, Rxchain, I_or_Q)).ToVector(MWArrayComponent.Real);
                Power_dBFs = Convert.ToDouble(array[0]);
                freq_Hz = Convert.ToDouble(array[1]);
                phase_rad = Convert.ToDouble(array[2]);
                num = 0;
                result = num;
            }
            catch (Exception ex)
            {
                m_GuiManager.Error(ex.Message, ex.StackTrace, false, false);
                result = num;
            }
            return result;
        }

        public int MeasureTheThirdHarmonicCharacsteristics(string ADCfilename, double fund_freq_hz, double p2, uint Rxchain, uint I_or_Q, out double Power_dBFs, out double freq_Hz, out double phase_rad)
        {
            int num = -1;
            Power_dBFs = 0.0;
            freq_Hz = 0.0;
            phase_rad = 0.0;
            int result;
            try
            {
                float[] array = (float[])((MWNumericArray)MatlabPostProcGuiInstance.measure_third_harmonic_characteristics(ADCfilename, fund_freq_hz, p2, Rxchain, I_or_Q)).ToVector(MWArrayComponent.Real);
                Power_dBFs = Convert.ToDouble(array[0]);
                freq_Hz = Convert.ToDouble(array[1]);
                phase_rad = Convert.ToDouble(array[2]);
                num = 0;
                result = num;
            }
            catch (Exception ex)
            {
                m_GuiManager.Error(ex.Message, ex.StackTrace, false, false);
                result = num;
            }
            return result;
        }

        public int MeasureThePowerSpectralDensity(string ADCfilename, double freq_Start_in_hz, double Bandwidth_in_hz, uint Rxchain, uint I_or_Q, out double Power_dBFs)
        {
            int num = -1;
            Power_dBFs = 0.0;
            int result;
            try
            {
                float[] array = (float[])((MWNumericArray)MatlabPostProcGuiInstance.measure_power_spectral_density(ADCfilename, freq_Start_in_hz, Bandwidth_in_hz, Rxchain, I_or_Q)).ToVector(MWArrayComponent.Real);
                Power_dBFs = Convert.ToDouble(array[0]);
                num = 0;
                result = num;
            }
            catch (Exception ex)
            {
                m_GuiManager.Error(ex.Message, ex.StackTrace, false, false);
                result = num;
            }
            return result;
        }

        public int MeasureThePeakInBandwidth(string ADCfilename, double freq_Start_in_hz, double Bandwidth_in_hz, double p3, uint Rxchain, uint I_or_Q, out double Power_dBFs, out double freq_Hz, out double phase_rad)
        {
            int num = -1;
            Power_dBFs = 0.0;
            freq_Hz = 0.0;
            phase_rad = 0.0;
            int result;
            try
            {
                float[] array = (float[])((MWNumericArray)MatlabPostProcGuiInstance.measure_peak_in_bandwidth(ADCfilename, freq_Start_in_hz, Bandwidth_in_hz, p3, Rxchain, I_or_Q)).ToVector(MWArrayComponent.Real);
                Power_dBFs = (double)array[0];
                freq_Hz = (double)array[1];
                phase_rad = (double)array[2];
                num = 0;
                result = num;
            }
            catch (Exception ex)
            {
                m_GuiManager.Error(ex.Message, ex.StackTrace, false, false);
                result = num;
            }
            return result;
        }

        public int BasicConfigurationForAnalysisTool(uint NumberOfSamplesPerFFT, uint FFTSize, uint NumNonCohAverages, uint WindowSelect, uint RemoveDc, uint EnableTriggeredCapture)
        {
            int num = -1;
            int result;
            try
            {
                MatlabPostProcGuiInstance.Basic_configuration_for_analysis_tool(NumberOfSamplesPerFFT, FFTSize, NumNonCohAverages, WindowSelect, RemoveDc, EnableTriggeredCapture);
                num = 0;
                result = num;
            }
            catch (Exception ex)
            {
                m_GuiManager.Error(ex.Message, ex.StackTrace, false, false);
                result = num;
            }
            return result;
        }

        public int UpdateNMeasureTehTxPowerConfigData(ushort RadarDeviceId, char NumberOfAccumulations, char NumberOfSamples)
        {
            int result = 0;
            GlobalRef.g_RadarDeviceId = (uint)RadarDeviceId;
            ScriptOps.m_MainForm.ContStreamingTab.UpdateMeasureTheTxPowerData();
            m_MeasureTxPowerParams.NumberOfAccumulations = NumberOfAccumulations;
            m_MeasureTxPowerParams.NumberOfSamples = NumberOfSamples;
            ScriptOps.m_MainForm.ContStreamingTab.UpdateMeasureTheTxPowerConfigDataFromLuaCmd();
            return result;
        }

        public int UpdateNMeasureThePDPowerConfigData_cmd(out string SumRFOn, out string SumRFOff, out string DeltaSum, out string p3, out string PDPower, out string PDMeasureStatus)
        {
            DeltaSum = string.Empty;
            p3 = string.Empty;
            PDPower = string.Empty;
            PDMeasureStatus = string.Empty;
            SumRFOn = string.Empty;
            SumRFOff = string.Empty;
            ScriptOps.m_MainForm.RFStatusTab.UpdateMeasurePDPowerConfigData();
            return iMeasurePDPowerConfig_ImplViaLuaCommand(out SumRFOn, out SumRFOff, out DeltaSum, out p3, out PDPower, out PDMeasureStatus);
        }

        private int iMeasurePDPowerConfig_ImplViaLuaCommand(out string SumRFOn, out string SumRFOff, out string DeltaSum, out string p3, out string PDPower, out string PDMeasureStatus)
        {
            DeltaSum = string.Empty;
            p3 = string.Empty;
            PDPower = string.Empty;
            PDMeasureStatus = string.Empty;
            SumRFOn = string.Empty;
            SumRFOff = string.Empty;
            MeasurePDPowerParam.PDId = (byte)m_MeasurePDPowerConfigParams.PDId;
            MeasurePDPowerParam.PDLnaGainIndex = (byte)m_MeasurePDPowerConfigParams.PDLnaGainIndex;
            MeasurePDPowerParam.PDType = m_MeasurePDPowerConfigParams.PDType;
            MeasurePDPowerParam.pdSel = m_MeasurePDPowerConfigParams.pdSel;
            MeasurePDPowerParam.pdDacVal = m_MeasurePDPowerConfigParams.pdDacVal;
            MeasurePDPowerParam.paramVal = m_MeasurePDPowerConfigParams.paramVal;
            MeasurePDPowerParam.NumAccumulations = (byte)m_MeasurePDPowerConfigParams.NumOfAccumulations;
            MeasurePDPowerParam.NumSamples = (byte)m_MeasurePDPowerConfigParams.NumOfSamples;
            MeasurePDPowerParam.Reserved = 0U;
            IntPtr inData = GCHandle.Alloc(MeasurePDPowerParam, GCHandleType.Pinned).AddrOfPinnedObject();
            int num;
            if (GlobalRef.g_NtvRS232Connect[(int)GlobalRef.g_RadarDeviceIndex] && GlobalRef.g_CasCadeDeviceSpiConnect == 0U)
            {
                num = m_TsWrapper.Calling_WriteAddr_Single(4294959848U, 1U);
                if (m_GuiManager.DllOps.itempDisconnect(false) == 0)
                {
                    string full_command = string.Format("Debug Port Disconnected", new object[0]);
                    m_GuiManager.RecordLog(0, full_command);
                    if (!GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
                    {
                        iRs232ConnectDisconnect_impl();
                    }
                }
            }
            Thread.Sleep(200);
            if (m_RadarDeviceModeConfigParams.NumberOfRadarDevicesDetected <= 1)
            {
                string full_command2 = string.Format("ar1.SetMeasPdPowerConfig({0}, {1}, {2}, {3}, {4}, {5}, {6}, {7}, {8} )", new object[]
                {
                    m_MeasurePDPowerConfigParams.PDId,
                    m_MeasurePDPowerConfigParams.PDLnaGainIndex,
                    m_MeasurePDPowerConfigParams.NumOfAccumulations,
                    m_MeasurePDPowerConfigParams.NumOfSamples,
                    m_MeasurePDPowerConfigParams.PDType,
                    m_MeasurePDPowerConfigParams.pdSel,
                    m_MeasurePDPowerConfigParams.pdDacVal,
                    m_MeasurePDPowerConfigParams.paramVal,
                    m_MeasurePDPowerConfigParams.Reserved
                });
                m_GuiManager.RecordLog(15, full_command2);
            }
            else
            {
                string full_command3 = string.Format("ar1.SetMeasPdPowerConfig_mult({0}, {1}, {2}, {3}, {4}, {5}, {6}, {7}, {8}, {9})", new object[]
                {
                    GlobalRef.g_RadarDeviceId,
                    m_MeasurePDPowerConfigParams.PDId,
                    m_MeasurePDPowerConfigParams.PDLnaGainIndex,
                    m_MeasurePDPowerConfigParams.NumOfAccumulations,
                    m_MeasurePDPowerConfigParams.NumOfSamples,
                    m_MeasurePDPowerConfigParams.PDType,
                    m_MeasurePDPowerConfigParams.pdSel,
                    m_MeasurePDPowerConfigParams.pdDacVal,
                    m_MeasurePDPowerConfigParams.paramVal,
                    m_MeasurePDPowerConfigParams.Reserved
                });
                m_GuiManager.RecordLog(15, full_command3);
            }
            GlobalRef.g_PDPowerStatus = 0U;
            num = Imports.RadarLinkImpl_RfSetMeasPdPowerConfig(GlobalRef.g_RadarDeviceId, inData);
            while (GlobalRef.g_PDPowerStatus == 0U)
            {
                Thread.Sleep(100);
            }
            if (num == 0)
            {
                if (GlobalRef.g_RadarDeviceId == 1U)
                {
                    if (m_MeasurePDPowerConfigParams.PDLnaGainIndex == '\u0001')
                    {
                        double num2 = 0.01733;
                        DeltaSum = Convert.ToString(Math.Round((double)ScriptOps.PDPowerConfigParam.DeltaSum * num2, 2));
                    }
                    else if (m_MeasurePDPowerConfigParams.PDLnaGainIndex == '\u0002')
                    {
                        double num2 = 0.010934;
                        DeltaSum = Convert.ToString(Math.Round((double)ScriptOps.PDPowerConfigParam.DeltaSum * num2, 2));
                    }
                    else if (m_MeasurePDPowerConfigParams.PDLnaGainIndex == '\u0003')
                    {
                        double num2 = 0.006899;
                        DeltaSum = Convert.ToString(Math.Round((double)ScriptOps.PDPowerConfigParam.DeltaSum * num2, 2));
                    }
                    else if (m_MeasurePDPowerConfigParams.PDLnaGainIndex == '\u0004')
                    {
                        double num2 = 0.004353;
                        DeltaSum = Convert.ToString(Math.Round((double)ScriptOps.PDPowerConfigParam.DeltaSum * num2, 2));
                    }
                    else if (m_MeasurePDPowerConfigParams.PDLnaGainIndex == '\u0005')
                    {
                        double num2 = 0.002747;
                        DeltaSum = Convert.ToString(Math.Round((double)ScriptOps.PDPowerConfigParam.DeltaSum * num2, 2));
                    }
                    else if (m_MeasurePDPowerConfigParams.PDLnaGainIndex == '\u0006')
                    {
                        double num2 = 0.001733;
                        DeltaSum = Convert.ToString(Math.Round((double)ScriptOps.PDPowerConfigParam.DeltaSum * num2, 2));
                    }
                    else if (m_MeasurePDPowerConfigParams.PDLnaGainIndex == '\a')
                    {
                        double num2 = 0.001093;
                        DeltaSum = Convert.ToString(Math.Round((double)ScriptOps.PDPowerConfigParam.DeltaSum * num2, 2));
                    }
                    else if (m_MeasurePDPowerConfigParams.PDLnaGainIndex == '\b')
                    {
                        double num2 = 0.00069;
                        DeltaSum = Convert.ToString(Math.Round((double)ScriptOps.PDPowerConfigParam.DeltaSum * num2, 2));
                    }
                    else if (m_MeasurePDPowerConfigParams.PDLnaGainIndex == '\t')
                    {
                        double num2 = 0.000435;
                        DeltaSum = Convert.ToString(Math.Round((double)ScriptOps.PDPowerConfigParam.DeltaSum * num2, 2));
                    }
                    p3 = Convert.ToString((int)(ScriptOps.PDPowerConfigParam.f00000f / 32));
                    if (ScriptOps.PDPowerConfigParam.PDPower > 32767)
                    {
                        short num3 = (short)((int)ScriptOps.PDPowerConfigParam.PDPower - 65536);
                        PDPower = Convert.ToString((double)num3 / 10.0);
                    }
                    else
                    {
                        PDPower = Convert.ToString((double)ScriptOps.PDPowerConfigParam.PDPower / 10.0);
                    }
                    if (ScriptOps.PDPowerConfigParam.PDMeasureStatus == 1)
                    {
                        PDMeasureStatus = "PASS";
                    }
                    else
                    {
                        PDMeasureStatus = "FAIL";
                    }
                    SumRFOn = Convert.ToString(ScriptOps.PDPowerConfigParam.SumRFOn);
                    SumRFOff = Convert.ToString(ScriptOps.PDPowerConfigParam.SumRFOff);
                }
                else if (GlobalRef.g_RadarDeviceId == 2U)
                {
                    DeltaSum = Convert.ToString(ScriptOps.PDPowerConfigParam.DeltaSum);
                    p3 = Convert.ToString((int)(ScriptOps.PDPowerConfigParam.f00000f / 32));
                    PDPower = Convert.ToString((double)ScriptOps.PDPowerConfigParam.PDPower / 10.0);
                    if (ScriptOps.PDPowerConfigParam.PDMeasureStatus == 1)
                    {
                        PDMeasureStatus = "PASS";
                    }
                    else
                    {
                        PDMeasureStatus = "FAIL";
                    }
                }
                else if (GlobalRef.g_RadarDeviceId == 4U)
                {
                    DeltaSum = Convert.ToString(ScriptOps.PDPowerConfigParam.DeltaSum);
                    p3 = Convert.ToString((int)(ScriptOps.PDPowerConfigParam.f00000f / 32));
                    PDPower = Convert.ToString((double)ScriptOps.PDPowerConfigParam.PDPower / 10.0);
                    if (ScriptOps.PDPowerConfigParam.PDMeasureStatus == 1)
                    {
                        PDMeasureStatus = "PASS";
                    }
                    else
                    {
                        PDMeasureStatus = "FAIL";
                    }
                }
                else if (GlobalRef.g_RadarDeviceId == 8U)
                {
                    DeltaSum = Convert.ToString(ScriptOps.PDPowerConfigParam.DeltaSum);
                    p3 = Convert.ToString((int)(ScriptOps.PDPowerConfigParam.f00000f / 32));
                    PDPower = Convert.ToString((double)ScriptOps.PDPowerConfigParam.PDPower / 10.0);
                    if (ScriptOps.PDPowerConfigParam.PDMeasureStatus == 1)
                    {
                        PDMeasureStatus = "PASS";
                    }
                    else
                    {
                        PDMeasureStatus = "FAIL";
                    }
                }
            }
            if ((num == 0 && ((GlobalRef.g_CasCadeDeviceSpiConnect & 1U) == 1U || (GlobalRef.g_CasCadeDeviceSpiConnect & 2U) == 2U || (GlobalRef.g_CasCadeDeviceSpiConnect & 4U) == 4U || (GlobalRef.g_CasCadeDeviceSpiConnect & 8U) == 8U)) || GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
            {
                string full_command4 = string.Format("Status: Passed", new object[0]);
                m_GuiManager.RecordLog(8, full_command4);
            }
            else
            {
                string msg = string.Format("Status: Failed, Error Type: {0}", new object[]
                {
                    GetErrorType(num)
                });
                GlobalRef.LuaWrapper.PrintError(msg);
            }
            if (GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
            {
                if (iRs232ConnectDisconnect_impl() == 0 && !GlobalRef.g_NtvRS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
                {
                    m_GuiManager.DllOps.iConnect(1U, 0U);
                    string full_command5 = string.Format("Debug Port Reconnected!", new object[0]);
                    m_GuiManager.RecordLog(9, full_command5);
                    ScriptOps.KeepTrying(2000, new Func<bool>(spare_read));
                }
            }
            else if (GlobalRef.g_CasCadeDeviceSpiConnect == 0U)
            {
                string full_command6 = string.Format("Error Occurred in Port open close", new object[0]);
                m_GuiManager.RecordLog(9, full_command6);
            }
            return num;
        }

        public int UpdateNMeasureTehTxPowerConfigData_cmd(out string TxOutputPower, out string ReflectedPower, out string IncidentVoltage, out string ReflectedVoltage, out string Tx2TxOutputPower, out string Tx2ReflectedPower, out string Tx2IncidentVoltage, out string Tx2ReflectedVoltage, out string Tx3TxOutputPower, out string Tx3ReflectedPower, out string Tx3IncidentVoltage, out string Tx3ReflectedVoltage)
        {
            TxOutputPower = string.Empty;
            ReflectedPower = string.Empty;
            IncidentVoltage = string.Empty;
            ReflectedVoltage = string.Empty;
            Tx2TxOutputPower = string.Empty;
            Tx2ReflectedPower = string.Empty;
            Tx2IncidentVoltage = string.Empty;
            Tx2ReflectedVoltage = string.Empty;
            Tx3TxOutputPower = string.Empty;
            Tx3ReflectedPower = string.Empty;
            Tx3IncidentVoltage = string.Empty;
            Tx3ReflectedVoltage = string.Empty;
            ScriptOps.m_MainForm.ContStreamingTab.UpdateMeasureTheTxPowerData();
            return iSetMeasureTheTxPowerConfig_ImplViaCommand(out TxOutputPower, out ReflectedPower, out IncidentVoltage, out ReflectedVoltage, out Tx2TxOutputPower, out Tx2ReflectedPower, out Tx2IncidentVoltage, out Tx2ReflectedVoltage, out Tx3TxOutputPower, out Tx3ReflectedPower, out Tx3IncidentVoltage, out Tx3ReflectedVoltage);
        }

        private int iSetMeasureTheTxPowerConfig_ImplViaCommand(out string TxOutputPower, out string ReflectedPower, out string IncidentVoltage, out string ReflectedVoltage, out string Tx2TxOutputPower, out string Tx2ReflectedPower, out string Tx2IncidentVoltage, out string Tx2ReflectedVoltage, out string Tx3TxOutputPower, out string Tx3ReflectedPower, out string Tx3IncidentVoltage, out string Tx3ReflectedVoltage)
        {
            TxOutputPower = string.Empty;
            ReflectedPower = string.Empty;
            IncidentVoltage = string.Empty;
            ReflectedVoltage = string.Empty;
            Tx2TxOutputPower = string.Empty;
            Tx2ReflectedPower = string.Empty;
            Tx2IncidentVoltage = string.Empty;
            Tx2ReflectedVoltage = string.Empty;
            Tx3TxOutputPower = string.Empty;
            Tx3ReflectedPower = string.Empty;
            Tx3IncidentVoltage = string.Empty;
            Tx3ReflectedVoltage = string.Empty;
            MeasureTxPowerConfigurationParam.NumberOfAccumulations = (byte)m_MeasureTxPowerParams.NumberOfAccumulations;
            MeasureTxPowerConfigurationParam.NumberOfSamples = (byte)m_MeasureTxPowerParams.NumberOfAccumulations;
            MeasureTxPowerConfigurationParam.Reserved = 0;
            IntPtr inData = GCHandle.Alloc(MeasureTxPowerConfigurationParam, GCHandleType.Pinned).AddrOfPinnedObject();
            int num;
            if (GlobalRef.g_NtvRS232Connect[(int)GlobalRef.g_RadarDeviceIndex] && GlobalRef.g_CasCadeDeviceSpiConnect == 0U)
            {
                num = m_TsWrapper.Calling_WriteAddr_Single(4294959848U, 1U);
                if (m_GuiManager.DllOps.itempDisconnect(false) == 0)
                {
                    string full_command = string.Format("Debug Port Disconnected", new object[0]);
                    m_GuiManager.RecordLog(0, full_command);
                    if (!GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
                    {
                        iRs232ConnectDisconnect_impl();
                    }
                }
            }
            if (m_RadarDeviceModeConfigParams.NumberOfRadarDevicesDetected <= 1)
            {
                string full_command2 = string.Format("ar1.MeasureTheTxPowerConfig({0}, {1})", new object[]
                {
                    m_MeasureTxPowerParams.NumberOfAccumulations,
                    m_MeasureTxPowerParams.NumberOfSamples
                });
                m_GuiManager.RecordLog(8, full_command2);
            }
            else
            {
                string full_command3 = string.Format("ar1.MeasureTheTxPowerConfig_mult({0}, {1}, {2})", new object[]
                {
                    GlobalRef.g_RadarDeviceId,
                    m_MeasureTxPowerParams.NumberOfAccumulations,
                    m_MeasureTxPowerParams.NumberOfSamples
                });
                m_GuiManager.RecordLog(8, full_command3);
            }
            GlobalRef.g_TXPowerStatus = 0U;
            num = Imports.RadarLinkImpl_RfSetMeasTxPowerConfig(GlobalRef.g_RadarDeviceId, inData);
            while (GlobalRef.g_TXPowerStatus == 0U)
            {
                Thread.Sleep(100);
            }
            if (num == 0)
            {
                if (GlobalRef.g_RadarDeviceId == 1U)
                {
                    int num2 = (int)ScriptOps.MeasureTxPowerParam.TxOutputPower;
                    int num3 = (int)ScriptOps.MeasureTxPowerParam.ReflectedPower;
                    int incidentVoltage = (int)ScriptOps.MeasureTxPowerParam.IncidentVoltage;
                    int reflectedVoltage = (int)ScriptOps.MeasureTxPowerParam.ReflectedVoltage;
                    if (num2 > 32767)
                    {
                        num2 -= 65536;
                        TxOutputPower = Convert.ToString((double)num2 / 10.0);
                    }
                    else
                    {
                        TxOutputPower = Convert.ToString((double)num2 / 10.0);
                    }
                    if (num3 > 32767)
                    {
                        num3 -= 65536;
                        ReflectedPower = Convert.ToString((double)num3 / 10.0);
                    }
                    else
                    {
                        ReflectedPower = Convert.ToString((double)num3 / 10.0);
                    }
                    IncidentVoltage = Convert.ToString(incidentVoltage / 32);
                    ReflectedVoltage = Convert.ToString(reflectedVoltage / 32);
                    int num4 = (int)ScriptOps.MeasureTxPowerParam.Tx2TxOutputPower;
                    int num5 = (int)ScriptOps.MeasureTxPowerParam.Tx2ReflectedPower;
                    int tx2IncidentVoltage = (int)ScriptOps.MeasureTxPowerParam.Tx2IncidentVoltage;
                    int tx2ReflectedVoltage = (int)ScriptOps.MeasureTxPowerParam.Tx2ReflectedVoltage;
                    if (num4 > 32767)
                    {
                        num4 -= 65536;
                        Tx2TxOutputPower = Convert.ToString((double)num4 / 10.0);
                    }
                    else
                    {
                        Tx2TxOutputPower = Convert.ToString((double)num4 / 10.0);
                    }
                    if (ScriptOps.MeasureTxPowerParam.Tx2ReflectedPower > 32767)
                    {
                        num5 -= 65536;
                        Tx2ReflectedPower = Convert.ToString((double)num5 / 10.0);
                    }
                    else
                    {
                        Tx2ReflectedPower = Convert.ToString((double)num5 / 10.0);
                    }
                    Tx2IncidentVoltage = Convert.ToString(tx2IncidentVoltage / 32);
                    Tx2ReflectedVoltage = Convert.ToString(tx2ReflectedVoltage / 32);
                    int num6 = (int)ScriptOps.MeasureTxPowerParam.Tx3TxOutputPower;
                    int num7 = (int)ScriptOps.MeasureTxPowerParam.Tx3ReflectedPower;
                    int tx3IncidentVoltage = (int)ScriptOps.MeasureTxPowerParam.Tx3IncidentVoltage;
                    int tx3ReflectedVoltage = (int)ScriptOps.MeasureTxPowerParam.Tx3ReflectedVoltage;
                    if (num6 > 32767)
                    {
                        num6 -= 65536;
                        Tx3TxOutputPower = Convert.ToString((double)num6 / 10.0);
                    }
                    else
                    {
                        Tx3TxOutputPower = Convert.ToString((double)num6 / 10.0);
                    }
                    if (ScriptOps.MeasureTxPowerParam.Tx3ReflectedPower > 32767)
                    {
                        num7 -= 65536;
                        Tx3ReflectedPower = Convert.ToString((double)num7 / 10.0);
                    }
                    else
                    {
                        Tx3ReflectedPower = Convert.ToString((double)num7 / 10.0);
                    }
                    Tx3IncidentVoltage = Convert.ToString(tx3IncidentVoltage / 32);
                    Tx3ReflectedVoltage = Convert.ToString(tx3ReflectedVoltage / 32);
                }
                else if (GlobalRef.g_RadarDeviceId == 2U)
                {
                    int num8 = (int)ScriptOps.MeasureTxPowerParam.TxOutputPower;
                    int num9 = (int)ScriptOps.MeasureTxPowerParam.ReflectedPower;
                    int incidentVoltage2 = (int)ScriptOps.MeasureTxPowerParam.IncidentVoltage;
                    int reflectedVoltage2 = (int)ScriptOps.MeasureTxPowerParam.ReflectedVoltage;
                    if (num8 > 32767)
                    {
                        num8 -= 65536;
                        TxOutputPower = Convert.ToString((double)num8 / 10.0);
                    }
                    else
                    {
                        TxOutputPower = Convert.ToString((double)num8 / 10.0);
                    }
                    if (num9 > 32767)
                    {
                        num9 -= 65536;
                        ReflectedPower = Convert.ToString((double)num9 / 10.0);
                    }
                    else
                    {
                        ReflectedPower = Convert.ToString((double)num9 / 10.0);
                    }
                    IncidentVoltage = Convert.ToString(incidentVoltage2 / 32);
                    ReflectedVoltage = Convert.ToString(reflectedVoltage2 / 32);
                    int num10 = (int)ScriptOps.MeasureTxPowerParam.Tx2TxOutputPower;
                    int num11 = (int)ScriptOps.MeasureTxPowerParam.Tx2ReflectedPower;
                    int tx2IncidentVoltage2 = (int)ScriptOps.MeasureTxPowerParam.Tx2IncidentVoltage;
                    int tx2ReflectedVoltage2 = (int)ScriptOps.MeasureTxPowerParam.Tx2ReflectedVoltage;
                    if (num10 > 32767)
                    {
                        num10 -= 65536;
                        Tx2TxOutputPower = Convert.ToString((double)num10 / 10.0);
                    }
                    else
                    {
                        Tx2TxOutputPower = Convert.ToString((double)num10 / 10.0);
                    }
                    if (ScriptOps.MeasureTxPowerParam.Tx2ReflectedPower > 32767)
                    {
                        num11 -= 65536;
                        Tx2ReflectedPower = Convert.ToString((double)num11 / 10.0);
                    }
                    else
                    {
                        Tx2ReflectedPower = Convert.ToString((double)num11 / 10.0);
                    }
                    Tx2IncidentVoltage = Convert.ToString(tx2IncidentVoltage2 / 32);
                    Tx2ReflectedVoltage = Convert.ToString(tx2ReflectedVoltage2 / 32);
                    int num12 = (int)ScriptOps.MeasureTxPowerParam.Tx3TxOutputPower;
                    int num13 = (int)ScriptOps.MeasureTxPowerParam.Tx3ReflectedPower;
                    int tx3IncidentVoltage2 = (int)ScriptOps.MeasureTxPowerParam.Tx3IncidentVoltage;
                    int tx3ReflectedVoltage2 = (int)ScriptOps.MeasureTxPowerParam.Tx3ReflectedVoltage;
                    if (num12 > 32767)
                    {
                        num12 -= 65536;
                        Tx3TxOutputPower = Convert.ToString((double)num12 / 10.0);
                    }
                    else
                    {
                        Tx3TxOutputPower = Convert.ToString((double)num12 / 10.0);
                    }
                    if (ScriptOps.MeasureTxPowerParam.Tx3ReflectedPower > 32767)
                    {
                        num13 -= 65536;
                        Tx3ReflectedPower = Convert.ToString((double)num13 / 10.0);
                    }
                    else
                    {
                        Tx3ReflectedPower = Convert.ToString((double)num13 / 10.0);
                    }
                    Tx3IncidentVoltage = Convert.ToString(tx3IncidentVoltage2 / 32);
                    Tx3ReflectedVoltage = Convert.ToString(tx3ReflectedVoltage2 / 32);
                }
                else if (GlobalRef.g_RadarDeviceId == 4U)
                {
                    int num14 = (int)ScriptOps.MeasureTxPowerParam.TxOutputPower;
                    int num15 = (int)ScriptOps.MeasureTxPowerParam.ReflectedPower;
                    int incidentVoltage3 = (int)ScriptOps.MeasureTxPowerParam.IncidentVoltage;
                    int reflectedVoltage3 = (int)ScriptOps.MeasureTxPowerParam.ReflectedVoltage;
                    if (num14 > 32767)
                    {
                        num14 -= 65536;
                        TxOutputPower = Convert.ToString((double)num14 / 10.0);
                    }
                    else
                    {
                        TxOutputPower = Convert.ToString((double)num14 / 10.0);
                    }
                    if (num15 > 32767)
                    {
                        num15 -= 65536;
                        ReflectedPower = Convert.ToString((double)num15 / 10.0);
                    }
                    else
                    {
                        ReflectedPower = Convert.ToString((double)num15 / 10.0);
                    }
                    IncidentVoltage = Convert.ToString(incidentVoltage3 / 32);
                    ReflectedVoltage = Convert.ToString(reflectedVoltage3 / 32);
                    int num16 = (int)ScriptOps.MeasureTxPowerParam.Tx2TxOutputPower;
                    int num17 = (int)ScriptOps.MeasureTxPowerParam.Tx2ReflectedPower;
                    int tx2IncidentVoltage3 = (int)ScriptOps.MeasureTxPowerParam.Tx2IncidentVoltage;
                    int tx2ReflectedVoltage3 = (int)ScriptOps.MeasureTxPowerParam.Tx2ReflectedVoltage;
                    if (num16 > 32767)
                    {
                        num16 -= 65536;
                        Tx2TxOutputPower = Convert.ToString((double)num16 / 10.0);
                    }
                    else
                    {
                        Tx2TxOutputPower = Convert.ToString((double)num16 / 10.0);
                    }
                    if (ScriptOps.MeasureTxPowerParam.Tx2ReflectedPower > 32767)
                    {
                        num17 -= 65536;
                        Tx2ReflectedPower = Convert.ToString((double)num17 / 10.0);
                    }
                    else
                    {
                        Tx2ReflectedPower = Convert.ToString((double)num17 / 10.0);
                    }
                    Tx2IncidentVoltage = Convert.ToString(tx2IncidentVoltage3 / 32);
                    Tx2ReflectedVoltage = Convert.ToString(tx2ReflectedVoltage3 / 32);
                    int num18 = (int)ScriptOps.MeasureTxPowerParam.Tx3TxOutputPower;
                    int num19 = (int)ScriptOps.MeasureTxPowerParam.Tx3ReflectedPower;
                    int tx3IncidentVoltage3 = (int)ScriptOps.MeasureTxPowerParam.Tx3IncidentVoltage;
                    int tx3ReflectedVoltage3 = (int)ScriptOps.MeasureTxPowerParam.Tx3ReflectedVoltage;
                    if (num18 > 32767)
                    {
                        num18 -= 65536;
                        Tx3TxOutputPower = Convert.ToString((double)num18 / 10.0);
                    }
                    else
                    {
                        Tx3TxOutputPower = Convert.ToString((double)num18 / 10.0);
                    }
                    if (ScriptOps.MeasureTxPowerParam.Tx3ReflectedPower > 32767)
                    {
                        num19 -= 65536;
                        Tx3ReflectedPower = Convert.ToString((double)num19 / 10.0);
                    }
                    else
                    {
                        Tx3ReflectedPower = Convert.ToString((double)num19 / 10.0);
                    }
                    Tx3IncidentVoltage = Convert.ToString(tx3IncidentVoltage3 / 32);
                    Tx3ReflectedVoltage = Convert.ToString(tx3ReflectedVoltage3 / 32);
                }
                else if (GlobalRef.g_RadarDeviceId == 8U)
                {
                    int num20 = (int)ScriptOps.MeasureTxPowerParam.TxOutputPower;
                    int num21 = (int)ScriptOps.MeasureTxPowerParam.ReflectedPower;
                    int incidentVoltage4 = (int)ScriptOps.MeasureTxPowerParam.IncidentVoltage;
                    int reflectedVoltage4 = (int)ScriptOps.MeasureTxPowerParam.ReflectedVoltage;
                    if (num20 > 32767)
                    {
                        num20 -= 65536;
                        TxOutputPower = Convert.ToString((double)num20 / 10.0);
                    }
                    else
                    {
                        TxOutputPower = Convert.ToString((double)num20 / 10.0);
                    }
                    if (num21 > 32767)
                    {
                        num21 -= 65536;
                        ReflectedPower = Convert.ToString((double)num21 / 10.0);
                    }
                    else
                    {
                        ReflectedPower = Convert.ToString((double)num21 / 10.0);
                    }
                    IncidentVoltage = Convert.ToString(incidentVoltage4 / 32);
                    ReflectedVoltage = Convert.ToString(reflectedVoltage4 / 32);
                    int num22 = (int)ScriptOps.MeasureTxPowerParam.Tx2TxOutputPower;
                    int num23 = (int)ScriptOps.MeasureTxPowerParam.Tx2ReflectedPower;
                    int tx2IncidentVoltage4 = (int)ScriptOps.MeasureTxPowerParam.Tx2IncidentVoltage;
                    int tx2ReflectedVoltage4 = (int)ScriptOps.MeasureTxPowerParam.Tx2ReflectedVoltage;
                    if (num22 > 32767)
                    {
                        num22 -= 65536;
                        Tx2TxOutputPower = Convert.ToString((double)num22 / 10.0);
                    }
                    else
                    {
                        Tx2TxOutputPower = Convert.ToString((double)num22 / 10.0);
                    }
                    if (ScriptOps.MeasureTxPowerParam.Tx2ReflectedPower > 32767)
                    {
                        num23 -= 65536;
                        Tx2ReflectedPower = Convert.ToString((double)num23 / 10.0);
                    }
                    else
                    {
                        Tx2ReflectedPower = Convert.ToString((double)num23 / 10.0);
                    }
                    Tx2IncidentVoltage = Convert.ToString(tx2IncidentVoltage4 / 32);
                    Tx2ReflectedVoltage = Convert.ToString(tx2ReflectedVoltage4 / 32);
                    int num24 = (int)ScriptOps.MeasureTxPowerParam.Tx3TxOutputPower;
                    int num25 = (int)ScriptOps.MeasureTxPowerParam.Tx3ReflectedPower;
                    int tx3IncidentVoltage4 = (int)ScriptOps.MeasureTxPowerParam.Tx3IncidentVoltage;
                    int tx3ReflectedVoltage4 = (int)ScriptOps.MeasureTxPowerParam.Tx3ReflectedVoltage;
                    if (num24 > 32767)
                    {
                        num24 -= 65536;
                        Tx3TxOutputPower = Convert.ToString((double)num24 / 10.0);
                    }
                    else
                    {
                        Tx3TxOutputPower = Convert.ToString((double)num24 / 10.0);
                    }
                    if (ScriptOps.MeasureTxPowerParam.Tx3ReflectedPower > 32767)
                    {
                        num25 -= 65536;
                        Tx3ReflectedPower = Convert.ToString((double)num25 / 10.0);
                    }
                    else
                    {
                        Tx3ReflectedPower = Convert.ToString((double)num25 / 10.0);
                    }
                    Tx3IncidentVoltage = Convert.ToString(tx3IncidentVoltage4 / 32);
                    Tx3ReflectedVoltage = Convert.ToString(tx3ReflectedVoltage4 / 32);
                }
            }
            if ((num == 0 && ((GlobalRef.g_CasCadeDeviceSpiConnect & 1U) == 1U || (GlobalRef.g_CasCadeDeviceSpiConnect & 2U) == 2U || (GlobalRef.g_CasCadeDeviceSpiConnect & 4U) == 4U || (GlobalRef.g_CasCadeDeviceSpiConnect & 8U) == 8U)) || GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
            {
                string full_command4 = string.Format("Status: Passed", new object[0]);
                m_GuiManager.RecordLog(8, full_command4);
            }
            else
            {
                string msg = string.Format("Status: Failed, Error Type: {0}", new object[]
                {
                    GetErrorType(num)
                });
                GlobalRef.LuaWrapper.PrintError(msg);
            }
            if (GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
            {
                if (iRs232ConnectDisconnect_impl() == 0 && !GlobalRef.g_NtvRS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
                {
                    m_GuiManager.DllOps.iConnect(1U, 0U);
                    string full_command5 = string.Format("Debug Port Reconnected!", new object[0]);
                    m_GuiManager.RecordLog(9, full_command5);
                    ScriptOps.KeepTrying(2000, new Func<bool>(spare_read));
                }
            }
            else if (GlobalRef.g_CasCadeDeviceSpiConnect == 0U)
            {
                string full_command6 = string.Format("Error Occurred in Port open close", new object[0]);
                m_GuiManager.RecordLog(9, full_command6);
            }
            return num;
        }

        public int ConfigureDetection(double cfar_method, double use_log_cfar, double cfar_guard_window_size, double cfar_window_size, double cfar_threshold_dB, double detect_only_local_maxima_in_range, double detect_only_local_maxima_in_doppler, double do_cfar_in_range, double do_cfar_in_doppler)
        {
            int result = -1;
            try
            {
                MatlabPostProcGuiInstance.configure_detection(cfar_method, use_log_cfar, cfar_guard_window_size, cfar_window_size, cfar_threshold_dB, detect_only_local_maxima_in_range, detect_only_local_maxima_in_doppler, do_cfar_in_range, do_cfar_in_doppler);
                result = 0;
                return result;
            }
            catch (Exception ex)
            {
                m_GuiManager.Error(ex.Message, ex.StackTrace, false, false);
            }
            return result;
        }

        public int selectBurst(double frameslider_val, double subframeslider_val, double burstslider_val, double burstloopslider_val, double chirpTypeslider_val, double chirpSlider_val)
        {
            int result = -1;
            try
            {
                MatlabPostProcGuiInstance.select_burst(frameslider_val, subframeslider_val, burstslider_val, burstloopslider_val, chirpTypeslider_val, chirpSlider_val);
                result = 0;
                return result;
            }
            catch (Exception ex)
            {
                m_GuiManager.Error(ex.Message, ex.StackTrace, false, false);
            }
            return result;
        }

        public int saveCQDataInFile(string FileName, uint CQDataType)
        {
            int num = -1;
            int result;
            try
            {
                MatlabPostProcGuiInstance.save_cq_data(FileName, CQDataType);
                num = 0;
                result = num;
            }
            catch (Exception ex)
            {
                m_GuiManager.Error(ex.Message, ex.StackTrace, false, false);
                result = num;
            }
            return result;
        }

        public int AdditionalConfigurationForAnalysisTool(uint SamplesStartindex, uint NumberOfSamplesPerFFT, uint ChirpsStartIndex, uint NumOfChiprsPerFrame, uint FrameStartIndex, uint NumFrames)
        {
            int num = -1;
            int result;
            try
            {
                num = 0;
                result = num;
            }
            catch (Exception ex)
            {
                m_GuiManager.Error(ex.Message, ex.StackTrace);
                result = num;
            }
            return result;
        }

        public int MatlabPreConfigure_Plots(uint top_left_plot, uint top_left_channel, uint top_right_plot, uint top_right_channel, uint bottom_left_plot, uint bottom_left_channel, uint bottom_right_plot, uint bottom_right_channel)
        {
            int num = -1;
            int result;
            try
            {
                MatlabPostProcGuiInstance.preconfigure_plots(top_left_plot, top_left_channel, top_right_plot, top_right_channel, bottom_left_plot, bottom_left_channel, bottom_right_plot, bottom_right_channel);
                num = 0;
                result = num;
            }
            catch (Exception ex)
            {
                m_GuiManager.Error(ex.Message, ex.StackTrace);
                result = num;
            }
            return result;
        }

        public string getMatlabPostProcVersion()
        {
            string result;
            try
            {
                string[] array = Convert.ToDouble(((double[])((MWNumericArray)MatlabPostProcGuiInstance.postProcVersion()).ToVector(MWArrayComponent.Real))[0]).ToString("0.00").Split(new char[]
                {
                    '.'
                });
                result = "0" + array[0] + "." + array[1];
            }
            catch (Exception ex)
            {
                m_GuiManager.Error(ex.Message, ex.StackTrace);
                result = Convert.ToString("00.00.00.00");
            }
            return result;
        }

        public int EnableAndDisableBSSCharData(ushort numberOfRadarDevicesDetected)
        {
            int result = 0;
            ScriptOps.m_MainForm.RFStatusTab.EnableDisbleBSSBootUpDataWithRespectiveRadarDevices(numberOfRadarDevicesDetected);
            return result;
        }

        public int TemperatureSensorConfigure()
        {
            int datasize = 2;
            byte regAddress = 1;
            byte regAddress2 = 2;
            byte regAddress3 = 3;
            byte[] array = new byte[4];
            IntPtr msbData = GCHandle.Alloc(array, GCHandleType.Pinned).AddrOfPinnedObject();
            byte[] array2 = new byte[4];
            IntPtr lsbData = GCHandle.Alloc(array2, GCHandleType.Pinned).AddrOfPinnedObject();
            Imports.RadarLinkImpl_OpenI2cIrqIf(1U);
            for (byte b = 72; b <= 75; b += 1)
            {
                byte msbData2 = 114;
                byte lsbData2 = 224;
                Imports.RadarLinkImpl_I2CWrite(1U, (char)b, (char)regAddress, msbData2, lsbData2, datasize);
                array[0] = 0;
                array[1] = 0;
                array[2] = 0;
                array[3] = 0;
                array2[0] = 0;
                array2[1] = 0;
                array2[2] = 0;
                array2[3] = 0;
                Imports.RadarLinkImpl_I2CRead(1U, (char)b, (char)regAddress, msbData, lsbData, datasize);
                msbData2 = 216;
                lsbData2 = 0;
                Imports.RadarLinkImpl_I2CWrite(1U, (char)b, (char)regAddress2, msbData2, lsbData2, datasize);
                array[0] = 0;
                array[1] = 0;
                array[2] = 0;
                array[3] = 0;
                array2[0] = 0;
                array2[1] = 0;
                array2[2] = 0;
                array2[3] = 0;
                Imports.RadarLinkImpl_I2CRead(1U, (char)b, (char)regAddress2, msbData, lsbData, datasize);
                msbData2 = 125;
                lsbData2 = 112;
                Imports.RadarLinkImpl_I2CWrite(1U, (char)b, (char)regAddress3, msbData2, lsbData2, datasize);
                array[0] = 0;
                array[1] = 0;
                array[2] = 0;
                array[3] = 0;
                array2[0] = 0;
                array2[1] = 0;
                array2[2] = 0;
                array2[3] = 0;
                Imports.RadarLinkImpl_I2CRead(1U, (char)b, (char)regAddress3, msbData, lsbData, datasize);
            }
            return Imports.RadarLinkImpl_CloseI2cIrqIf(1U);
        }

        public int m000088(out string Version)
        {
            if (m_RadarDeviceModeConfigParams.NumberOfRadarDevicesDetected <= 1)
            {
                string full_command = string.Format("ar1.GetCaptureCardDllVersion()", new object[0]);
                m_GuiManager.RecordLog(6, full_command);
            }
            string text = Path.GetDirectoryName(Application.StartupPath) + "\\PostProc";
            string text2 = "cf.json";
            string text3 = "DCA1000EVM_CLI_Control.exe";
            string text4 = "dll_version";
            string arguments = string.Concat(new string[]
            {
                "/C ",
                text3,
                " ",
                text4,
                " ",
                text2
            });
            Process process = Process.Start(new ProcessStartInfo
            {
                FileName = "CMD.EXE",
                WorkingDirectory = text,
                Arguments = arguments,
                UseShellExecute = false,
                RedirectStandardOutput = true,
                RedirectStandardError = true,
                RedirectStandardInput = true,
                CreateNoWindow = true
            });
            string full_command2 = string.Format("Sending {0} command to DCA1000", text4);
            m_GuiManager.RecordLog(0, full_command2);
            if (process != null && !process.HasExited)
            {
                process.WaitForExit();
            }
            string text5 = process.StandardOutput.ReadToEnd();
            m_GuiManager.RecordLog(0, text5);
            if (text5 != string.Empty)
            {
                Version = text5.Substring(16, 3);
            }
            else
            {
                m_GuiManager.GuiError("No response obtained from DCA1000!");
                Version = string.Empty;
            }
            return 0;
        }

        public int getRadarLinkVersion(out string Version)
        {
            int result = -1;
            byte[] array = new byte[30];
            IntPtr masterVer = GCHandle.Alloc(array, GCHandleType.Pinned).AddrOfPinnedObject();
            try
            {
                result = Imports.RadarLinkImpl_GetRadarLinkVersion(masterVer);
                Version = string.Format("{0:d2}.{1:d2}.{2:d2}.{3:d2} ({4:d2}/{5:d2}/{6:d2})", new object[]
                {
                    int.Parse(array[0].ToString("X"), NumberStyles.HexNumber),
                    int.Parse(array[1].ToString("X"), NumberStyles.HexNumber),
                    int.Parse(array[2].ToString("X"), NumberStyles.HexNumber),
                    int.Parse(array[3].ToString("X"), NumberStyles.HexNumber),
                    int.Parse(array[6].ToString("X"), NumberStyles.HexNumber),
                    int.Parse(array[5].ToString("X"), NumberStyles.HexNumber),
                    int.Parse(array[4].ToString("X"), NumberStyles.HexNumber)
                });
            }
            catch (Exception ex)
            {
                m_GuiManager.Error(ex.Message, ex.StackTrace);
                Version = "00.00.00.00";
                return result;
            }
            return result;
        }

        public int m000089(out string Version)
        {
            if (m_RadarDeviceModeConfigParams.NumberOfRadarDevicesDetected <= 1)
            {
                string full_command = string.Format("ar1.GetCaptureCardFPGAVersion()", new object[0]);
                m_GuiManager.RecordLog(6, full_command);
            }
            string text = Path.GetDirectoryName(Application.StartupPath) + "\\PostProc";
            string text2 = "cf.json";
            string text3 = "DCA1000EVM_CLI_Control.exe";
            string text4 = "fpga_version";
            string arguments = string.Concat(new string[]
            {
                "/C ",
                text3,
                " ",
                text4,
                " ",
                text2
            });
            Process process = Process.Start(new ProcessStartInfo
            {
                FileName = "CMD.EXE",
                WorkingDirectory = text,
                Arguments = arguments,
                UseShellExecute = false,
                RedirectStandardOutput = true,
                RedirectStandardError = true,
                RedirectStandardInput = true,
                CreateNoWindow = true
            });
            string full_command2 = string.Format("Sending {0} command to DCA1000", text4);
            m_GuiManager.RecordLog(0, full_command2);
            if (process != null && !process.HasExited)
            {
                process.WaitForExit();
            }
            string text5 = process.StandardOutput.ReadToEnd();
            m_GuiManager.RecordLog(0, text5);
            GlobalRef.f0002d3 = text5.Substring(19, 12);
            ScriptOps.m_MainForm.m_RFDataCaptureCard.m00006e(GlobalRef.f0002d3);
            Version = GlobalRef.f0002d3;
            return 0;
        }

        public int GetRadarDevicesDetected(out uint RadarDev)
        {
            int result = -1;
            byte[] array = new byte[4];
            IntPtr radarDevices = GCHandle.Alloc(array, GCHandleType.Pinned).AddrOfPinnedObject();
            try
            {
                result = Imports.rlsGetNumofDevices(radarDevices);
                RadarDev = (uint)((int)array[3] << 24 | (int)array[2] << 16 | (int)array[1] << 8 | (int)array[0]);
                ScriptOps.m_MainForm.ConnectTab.FindTheNumberOfRadarDevicesViaSop((int)RadarDev);
            }
            catch (Exception ex)
            {
                m_GuiManager.Error(ex.Message, ex.StackTrace);
                RadarDev = 0U;
                return result;
            }
            return result;
        }

        public int iSetTrigFrame_Impl(int callType)
        {
            int num = -1;
            if (GlobalRef.g_NtvRS232Connect[(int)GlobalRef.g_RadarDeviceIndex] && GlobalRef.g_CasCadeDeviceSpiConnect == 0U)
            {
                num = m_TsWrapper.Calling_WriteAddr_Single(4294959848U, 1U);
                if (m_GuiManager.DllOps.itempDisconnect(false) == 0)
                {
                    string full_command = string.Format("Debug Port Disconnected", new object[0]);
                    m_GuiManager.RecordLog(0, full_command);
                    if (!GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
                    {
                        iRs232ConnectDisconnect_impl();
                    }
                }
            }
            if (!GlobalRef.g_FrameTriggered)
            {
                float num2 = CalculateFrameOnTimeForFrame(m_ChirpConfigParams.fchirpStartIdx, m_ChirpConfigParams.fchirpEndIdx, (uint)m_ChirpConfigParams.loopCount);
                if (num2 > m_ChirpConfigParams.periodicity)
                {
                    string str = string.Format("Frame duration needed is {0} ms\n", new object[]
                    {
                        num2
                    });
                    string str2 = string.Format("Frame duration programmed is {0} ms \n", new object[]
                    {
                        m_ChirpConfigParams.periodicity
                    });
                    string str3 = string.Format("ERROR:Frame duration programmed is less than what is actually needed!", new object[0]);
                    MessageBox.Show(str2 + str + str3);
                    return num;
                }
                if (m_RadarDeviceModeConfigParams.NumberOfRadarDevicesDetected <= 1)
                {
                    string full_command2 = string.Format("ar1.StartFrame()", new object[0]);
                    m_GuiManager.RecordLog(13, full_command2);
                }
                else
                {
                    string full_command3 = string.Format("ar1.StartFrame_mult({0})", new object[]
                    {
                        GlobalRef.g_RadarDeviceId
                    });
                    m_GuiManager.RecordLog(13, full_command3);
                }
                num = Imports.RadarLinkImpl_SensorStart(GlobalRef.g_RadarDeviceId);
                if ((num == 0 && ((GlobalRef.g_CasCadeDeviceSpiConnect & 1U) == 1U || (GlobalRef.g_CasCadeDeviceSpiConnect & 2U) == 2U || (GlobalRef.g_CasCadeDeviceSpiConnect & 4U) == 4U || (GlobalRef.g_CasCadeDeviceSpiConnect & 8U) == 8U)) || GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
                {
                    if (GlobalRef.g_AdvancedFrame)
                    {
                        if (m_AdvancedFrameConfigParams.NumOfFrames != 0)
                        {
                            if (m_AdvancedFrameConfigParams.NumOfSubFrames == 1)
                            {
                                int num3 = (int)m_AdvancedFrameConfigParams.SubFramePeriodicity;
                                num3 *= (int)m_AdvancedFrameConfigParams.NumOfFrames;
                                ScriptOps.m_MainForm.ChirpConfigTab.SetTrigFrameCoutTimerPeriodicity(num3);
                            }
                            else if (m_AdvancedFrameConfigParams.NumOfSubFrames == 2)
                            {
                                int num3 = (int)(m_AdvancedFrameConfigParams.SubFramePeriodicity + m_AdvancedFrameConfigParams.SubFramePeriodicity2);
                                num3 *= (int)m_AdvancedFrameConfigParams.NumOfFrames;
                                ScriptOps.m_MainForm.ChirpConfigTab.SetTrigFrameCoutTimerPeriodicity(num3);
                            }
                            else if (m_AdvancedFrameConfigParams.NumOfSubFrames == 3)
                            {
                                int num3 = (int)(m_AdvancedFrameConfigParams.SubFramePeriodicity + m_AdvancedFrameConfigParams.SubFramePeriodicity2 + m_AdvancedFrameConfigParams.SubFramePeriodicity3);
                                num3 *= (int)m_AdvancedFrameConfigParams.NumOfFrames;
                                ScriptOps.m_MainForm.ChirpConfigTab.SetTrigFrameCoutTimerPeriodicity(num3);
                            }
                            else if (m_AdvancedFrameConfigParams.NumOfSubFrames == 4)
                            {
                                int num3 = (int)(m_AdvancedFrameConfigParams.SubFramePeriodicity + m_AdvancedFrameConfigParams.SubFramePeriodicity2 + m_AdvancedFrameConfigParams.SubFramePeriodicity3 + m_AdvancedFrameConfigParams.SubFramePeriodicity4);
                                num3 *= (int)m_AdvancedFrameConfigParams.NumOfFrames;
                                ScriptOps.m_MainForm.ChirpConfigTab.SetTrigFrameCoutTimerPeriodicity(num3);
                            }
                            if (GlobalRef.f0002d1)
                            {
                                string full_command4 = string.Format("Status: Hardware select :GlobalRef.g_TriggerSelectSW_HW value: {0}", new object[]
                                {
                                    GlobalRef.f0002d1
                                });
                                m_GuiManager.RecordLog(13, full_command4);
                            }
                            else
                            {
                                ScriptOps.m_MainForm.ChirpConfigTab.SetTrigFrameCoutTimer(true);
                                string full_command5 = string.Format("Status: Hardware select :GlobalRef.g_TriggerSelectSW_HW value: {0}", new object[]
                                {
                                    GlobalRef.f0002d1
                                });
                                m_GuiManager.RecordLog(13, full_command5);
                            }
                        }
                        string full_command6 = string.Format("Status: Passed", new object[0]);
                        m_GuiManager.RecordLog(13, full_command6);
                        MatlabPostProcGuiInstance.MatlabPostProcImpl_SensorStart();
                    }
                    else
                    {
                        if (m_ChirpConfigParams.frameCount != 0)
                        {
                            ScriptOps.m_MainForm.ChirpConfigTab.SetTrigFrameCoutTimerPeriodicity((int)((float)m_ChirpConfigParams.frameCount * m_ChirpConfigParams.periodicity));
                            ScriptOps.m_MainForm.ChirpConfigTab.SetTrigFrameCoutTimer(true);
                        }
                        if (GlobalRef.f0002d0 && m_ChirpConfigParams.frameCount == 0)
                        {
                            ScriptOps.m_MainForm.ChirpConfigTab.DisableAndEnablePostProcButtonInInfiniteFrameMode(true);
                        }
                        string full_command7 = string.Format("Status: Passed", new object[0]);
                        m_GuiManager.RecordLog(13, full_command7);
                        MatlabPostProcGuiInstance.MatlabPostProcImpl_SensorStart();
                    }
                }
                else if (num != 5)
                {
                    string msg = string.Format("Status: Failed, Error Type: {0}", new object[]
                    {
                        GetErrorType(num)
                    });
                    GlobalRef.LuaWrapper.PrintError(msg);
                }
                else
                {
                    string full_command8 = string.Format("Status: Failed, Error Type: Frame is Already running", new object[0]);
                    m_GuiManager.RecordLog(13, full_command8);
                }
            }
            else
            {
                GlobalRef.LuaWrapper.PrintError("Frames are already triggered for the device");
            }
            if (GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex] && iRs232ConnectDisconnect_impl() == 0 && !GlobalRef.g_NtvRS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
            {
                m_GuiManager.DllOps.iConnect(1U, 0U);
                string full_command9 = string.Format("Debug Port Reconnected!", new object[0]);
                m_GuiManager.RecordLog(9, full_command9);
                ScriptOps.KeepTrying(2000, new Func<bool>(spare_read));
            }
            return num;
        }

        public int iSetStopFrame_Impl(int callType)
        {
            int num;
            if (GlobalRef.g_NtvRS232Connect[(int)GlobalRef.g_RadarDeviceIndex] && GlobalRef.g_CasCadeDeviceSpiConnect == 0U)
            {
                num = m_TsWrapper.Calling_WriteAddr_Single(4294959848U, 1U);
                if (m_GuiManager.DllOps.itempDisconnect(false) == 0)
                {
                    string full_command = string.Format("Debug Port Disconnected", new object[0]);
                    m_GuiManager.RecordLog(0, full_command);
                    if (!GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
                    {
                        iRs232ConnectDisconnect_impl();
                    }
                }
            }
            if (GlobalRef.g_AdvancedFrame)
            {
                if (m_AdvancedFrameConfigParams.NumOfFrames == 0)
                {
                    if (m_RadarDeviceModeConfigParams.NumberOfRadarDevicesDetected <= 1)
                    {
                        string full_command2 = string.Format("ar1.StopFrame()", new object[0]);
                        m_GuiManager.RecordLog(13, full_command2);
                    }
                    else
                    {
                        string full_command3 = string.Format("ar1.StopFrame_mult({0})", new object[]
                        {
                            GlobalRef.g_RadarDeviceId
                        });
                        m_GuiManager.RecordLog(13, full_command3);
                    }
                    num = Imports.RadarLinkImpl_SensorStop(GlobalRef.g_RadarDeviceId);
                }
                else
                {
                    ScriptOps.m_MainForm.ChirpConfigTab.SetTrigFrameCoutTimer(false);
                    if (callType == 0)
                    {
                        if (m_RadarDeviceModeConfigParams.NumberOfRadarDevicesDetected <= 1)
                        {
                            string full_command4 = string.Format("ar1.StopFrame()", new object[0]);
                            m_GuiManager.RecordLog(13, full_command4);
                        }
                        else
                        {
                            string full_command5 = string.Format("ar1.StopFrame_mult({0})", new object[]
                            {
                                GlobalRef.g_RadarDeviceId
                            });
                            m_GuiManager.RecordLog(13, full_command5);
                        }
                        num = Imports.RadarLinkImpl_SensorStop(GlobalRef.g_RadarDeviceId);
                    }
                    else
                    {
                        string full_command6 = string.Format("Frame Ended", new object[0]);
                        m_GuiManager.RecordLog(13, full_command6);
                        num = 255;
                    }
                }
            }
            else if (m_ChirpConfigParams.frameCount == 0)
            {
                if (m_RadarDeviceModeConfigParams.NumberOfRadarDevicesDetected <= 1)
                {
                    string full_command7 = string.Format("ar1.StopFrame()", new object[0]);
                    m_GuiManager.RecordLog(13, full_command7);
                }
                else
                {
                    string full_command8 = string.Format("ar1.StopFrame_mult({0})", new object[]
                    {
                        GlobalRef.g_RadarDeviceId
                    });
                    m_GuiManager.RecordLog(13, full_command8);
                }
                num = Imports.RadarLinkImpl_SensorStop(GlobalRef.g_RadarDeviceId);
            }
            else
            {
                ScriptOps.m_MainForm.ChirpConfigTab.SetTrigFrameCoutTimer(false);
                if (callType == 0)
                {
                    if (m_RadarDeviceModeConfigParams.NumberOfRadarDevicesDetected <= 1)
                    {
                        string full_command9 = string.Format("ar1.StopFrame()", new object[0]);
                        m_GuiManager.RecordLog(13, full_command9);
                    }
                    else
                    {
                        string full_command10 = string.Format("ar1.StopFrame_mult({0})", new object[]
                        {
                            GlobalRef.g_RadarDeviceId
                        });
                        m_GuiManager.RecordLog(13, full_command10);
                    }
                    num = Imports.RadarLinkImpl_SensorStop(GlobalRef.g_RadarDeviceId);
                }
                else
                {
                    string full_command11 = string.Format("Frame Ended", new object[0]);
                    m_GuiManager.RecordLog(13, full_command11);
                    num = 255;
                }
            }
            if (GlobalRef.f0002d0)
            {
                if (GlobalRef.g_processLua != null && !GlobalRef.g_processLua.HasExited)
                {
                    GlobalRef.g_processLua.WaitForExit();
                    string full_command12 = GlobalRef.g_processLua.StandardOutput.ReadToEnd();
                    m_GuiManager.RecordLog(0, full_command12);
                }
                string text = m_GuiManager.MainTsForm.ChirpConfigTab.iGetMtLbPostProcPath();
                m_GuiManager.MainTsForm.ChirpConfigTab.iSetRawDCCaptureMtLbPostProcPath(text);
                m_GuiManager.MainTsForm.ChirpConfigTab.DisableAndEnableTheStartCaptureButtonTillStopCaptureFinish(false);
                ScriptOps.m_MainForm.ChirpConfigTab.DisableAndEnablePostProcButtonInInfiniteFrameMode(false);
            }
            if ((num == 0 && ((GlobalRef.g_CasCadeDeviceSpiConnect & 1U) == 1U || (GlobalRef.g_CasCadeDeviceSpiConnect & 2U) == 2U || (GlobalRef.g_CasCadeDeviceSpiConnect & 4U) == 4U || (GlobalRef.g_CasCadeDeviceSpiConnect & 8U) == 8U)) || GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
            {
                string full_command13 = string.Format("Status: Passed", new object[0]);
                m_GuiManager.RecordLog(13, full_command13);
                MatlabPostProcGuiInstance.MatlabPostProcImpl_SensorStop();
            }
            else if (num == 5)
            {
                string full_command14 = string.Format("Status: Failed, Error Type: Frame is Already Stopped", new object[0]);
                m_GuiManager.RecordLog(13, full_command14);
            }
            else if (num != 255)
            {
                string msg = string.Format("Status: Failed, Error Type: {0}", new object[]
                {
                    GetErrorType(num)
                });
                GlobalRef.LuaWrapper.PrintError(msg);
            }
            if (GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex] && iRs232ConnectDisconnect_impl() == 0 && !GlobalRef.g_NtvRS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
            {
                m_GuiManager.DllOps.iConnect(1U, 0U);
                string full_command15 = string.Format("Debug Port Reconnected!", new object[0]);
                m_GuiManager.RecordLog(9, full_command15);
                ScriptOps.KeepTrying(2000, new Func<bool>(spare_read));
            }
            return num;
        }

        private int iSetTestSource_Impl(bool is_starting_op, bool is_ending_op)
        {
            ushort mode = m_TestSourceParams.mode;
            short num = (short)(m_TestSourceParams.obj1PosX * 100f);
            short num2 = (short)(m_TestSourceParams.obj1PosY * 100f);
            short num3 = (short)(m_TestSourceParams.obj1PosZ * 100f);
            short num4 = (short)(m_TestSourceParams.obj1VelX * 100f);
            short num5 = (short)(m_TestSourceParams.obj1VelY * 100f);
            short num6 = (short)(m_TestSourceParams.obj1VelZ * 100f);
            short num7 = (short)(m_TestSourceParams.obj1BMinX * 100f);
            short num8 = (short)(m_TestSourceParams.obj1BMinY * 100f);
            short num9 = (short)(m_TestSourceParams.obj1BMinZ * 100f);
            short num10 = (short)(m_TestSourceParams.obj1BMaxX * 100f);
            short num11 = (short)(m_TestSourceParams.obj1BMaxY * 100f);
            short num12 = (short)(m_TestSourceParams.obj1BMaxZ * 100f);
            short num13 = (short)((double)m_TestSourceParams.obj1Sig * -10.0);
            short num14 = (short)(m_TestSourceParams.obj2PosX * 100f);
            short num15 = (short)(m_TestSourceParams.obj2PosY * 100f);
            short num16 = (short)(m_TestSourceParams.obj2PosZ * 100f);
            short num17 = (short)(m_TestSourceParams.obj2VelX * 100f);
            short num18 = (short)(m_TestSourceParams.obj2VelY * 100f);
            short num19 = (short)(m_TestSourceParams.obj2VelZ * 100f);
            short num20 = (short)(m_TestSourceParams.obj2BMinX * 100f);
            short num21 = (short)(m_TestSourceParams.obj2BMinY * 100f);
            short num22 = (short)(m_TestSourceParams.obj2BMinZ * 100f);
            short num23 = (short)(m_TestSourceParams.obj2BMaxX * 100f);
            short num24 = (short)(m_TestSourceParams.obj2BMaxY * 100f);
            short num25 = (short)(m_TestSourceParams.obj2BMaxZ * 100f);
            short num26 = (short)((double)m_TestSourceParams.obj2Sig * -10.0);
            float num27 = m_TestSourceParams.obj1AntPosRx1X * 8f;
            float num28 = m_TestSourceParams.obj1AntPosRx1Z * 8f;
            float num29 = m_TestSourceParams.obj1AntPosRx2X * 8f;
            float num30 = m_TestSourceParams.obj1AntPosRx2Z * 8f;
            float num31 = m_TestSourceParams.obj1AntPosRx3X * 8f;
            float num32 = m_TestSourceParams.obj1AntPosRx3Z * 8f;
            float num33 = m_TestSourceParams.obj1AntPosRx4X * 8f;
            float num34 = m_TestSourceParams.obj1AntPosRx4Z * 8f;
            float num35 = m_TestSourceParams.obj1AntPosTx1X * 8f;
            float num36 = m_TestSourceParams.obj1AntPosTx1Z * 8f;
            float num37 = m_TestSourceParams.obj1AntPosTx2X * 8f;
            float num38 = m_TestSourceParams.obj1AntPosTx2Z * 8f;
            float num39 = m_TestSourceParams.obj1AntPosTx3X * 8f;
            float num40 = m_TestSourceParams.obj1AntPosTx3Z * 8f;
            int num41;
            if (GlobalRef.g_NtvRS232Connect[(int)GlobalRef.g_RadarDeviceIndex] && GlobalRef.g_CasCadeDeviceSpiConnect == 0U)
            {
                num41 = m_TsWrapper.Calling_WriteAddr_Single(4294959848U, 1U);
                if (m_GuiManager.DllOps.itempDisconnect(false) == 0)
                {
                    string full_command = string.Format("Debug Port Disconnected", new object[0]);
                    m_GuiManager.RecordLog(0, full_command);
                    if (!GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
                    {
                        iRs232ConnectDisconnect_impl();
                    }
                }
            }
            if (m_RadarDeviceModeConfigParams.NumberOfRadarDevicesDetected <= 1)
            {
                string full_command2 = string.Format("ar1.SetTestSource({0}, {1}, {2}, {3}, {4}, {5}, {6}, {7}, {8}, {9}, {10}, {11}, {12}, {13}, {14}, {15}, {16}, {17}, {18}, {19}, {20}, {21}, {22}, {23}, {24}, {25}, {26}, {27}, {28}, {29}, {30}, {31}, {32}, {33}, {34}, {35}, {36}, {37}, {38}, {39})", new object[]
                {
                    (decimal)m_TestSourceParams.obj1PosX,
                    (decimal)m_TestSourceParams.obj1PosY,
                    (decimal)m_TestSourceParams.obj1PosZ,
                    (decimal)m_TestSourceParams.obj1VelX,
                    (decimal)m_TestSourceParams.obj1VelY,
                    (short)m_TestSourceParams.obj1VelZ,
                    (short)m_TestSourceParams.obj1BMinX,
                    (short)m_TestSourceParams.obj1BMinY,
                    (short)m_TestSourceParams.obj1BMinZ,
                    (short)m_TestSourceParams.obj1BMaxX,
                    (decimal)m_TestSourceParams.obj1BMaxY,
                    (decimal)m_TestSourceParams.obj1BMaxZ,
                    (decimal)m_TestSourceParams.obj1Sig,
                    (decimal)m_TestSourceParams.obj2PosX,
                    (decimal)m_TestSourceParams.obj2PosY,
                    (decimal)m_TestSourceParams.obj2PosZ,
                    (decimal)m_TestSourceParams.obj2VelX,
                    (decimal)m_TestSourceParams.obj2VelY,
                    (decimal)m_TestSourceParams.obj2VelZ,
                    (decimal)m_TestSourceParams.obj2BMinX,
                    (decimal)m_TestSourceParams.obj2BMinY,
                    (decimal)m_TestSourceParams.obj2BMinZ,
                    (decimal)m_TestSourceParams.obj2BMaxX,
                    (decimal)m_TestSourceParams.obj2BMaxY,
                    (decimal)m_TestSourceParams.obj2BMaxZ,
                    (decimal)m_TestSourceParams.obj2Sig,
                    (decimal)m_TestSourceParams.obj1AntPosRx1X,
                    (decimal)m_TestSourceParams.obj1AntPosRx1Z,
                    Math.Round((double)m_TestSourceParams.obj1AntPosRx2X, 3),
                    (decimal)m_TestSourceParams.obj1AntPosRx2Z,
                    (decimal)m_TestSourceParams.obj1AntPosRx3X,
                    (decimal)m_TestSourceParams.obj1AntPosRx3Z,
                    (decimal)m_TestSourceParams.obj1AntPosRx4X,
                    (decimal)m_TestSourceParams.obj1AntPosRx4Z,
                    (decimal)m_TestSourceParams.obj1AntPosTx1X,
                    (decimal)m_TestSourceParams.obj1AntPosTx1Z,
                    (decimal)m_TestSourceParams.obj1AntPosTx2X,
                    (decimal)m_TestSourceParams.obj1AntPosTx2Z,
                    (decimal)m_TestSourceParams.obj1AntPosTx3X,
                    (decimal)m_TestSourceParams.obj1AntPosTx3Z
                });
                m_GuiManager.RecordLog(8, full_command2);
            }
            else
            {
                string full_command3 = string.Format("ar1.SetTestSource_mult({0}, {1}, {2}, {3}, {4}, {5}, {6}, {7}, {8}, {9}, {10}, {11}, {12}, {13}, {14}, {15}, {16}, {17}, {18}, {19}, {20}, {21}, {22}, {23}, {24}, {25}, {26}, {27}, {28}, {29}, {30}, {31}, {32}, {33}, {34}, {35}, {36}, {37}, {38}, {39},{40})", new object[]
                {
                    GlobalRef.g_RadarDeviceId,
                    (decimal)m_TestSourceParams.obj1PosX,
                    (decimal)m_TestSourceParams.obj1PosY,
                    (decimal)m_TestSourceParams.obj1PosZ,
                    (decimal)m_TestSourceParams.obj1VelX,
                    (decimal)m_TestSourceParams.obj1VelY,
                    (short)m_TestSourceParams.obj1VelZ,
                    (short)m_TestSourceParams.obj1BMinX,
                    (short)m_TestSourceParams.obj1BMinY,
                    (short)m_TestSourceParams.obj1BMinZ,
                    (short)m_TestSourceParams.obj1BMaxX,
                    (decimal)m_TestSourceParams.obj1BMaxY,
                    (decimal)m_TestSourceParams.obj1BMaxZ,
                    (decimal)m_TestSourceParams.obj1Sig,
                    (decimal)m_TestSourceParams.obj2PosX,
                    (decimal)m_TestSourceParams.obj2PosY,
                    (decimal)m_TestSourceParams.obj2PosZ,
                    (decimal)m_TestSourceParams.obj2VelX,
                    (decimal)m_TestSourceParams.obj2VelY,
                    (decimal)m_TestSourceParams.obj2VelZ,
                    (decimal)m_TestSourceParams.obj2BMinX,
                    (decimal)m_TestSourceParams.obj2BMinY,
                    (decimal)m_TestSourceParams.obj2BMinZ,
                    (decimal)m_TestSourceParams.obj2BMaxX,
                    (decimal)m_TestSourceParams.obj2BMaxY,
                    (decimal)m_TestSourceParams.obj2BMaxZ,
                    (decimal)m_TestSourceParams.obj2Sig,
                    (decimal)m_TestSourceParams.obj1AntPosRx1X,
                    (decimal)m_TestSourceParams.obj1AntPosRx1Z,
                    Math.Round((double)m_TestSourceParams.obj1AntPosRx2X, 3),
                    (decimal)m_TestSourceParams.obj1AntPosRx2Z,
                    (decimal)m_TestSourceParams.obj1AntPosRx3X,
                    (decimal)m_TestSourceParams.obj1AntPosRx3Z,
                    (decimal)m_TestSourceParams.obj1AntPosRx4X,
                    (decimal)m_TestSourceParams.obj1AntPosRx4Z,
                    (decimal)m_TestSourceParams.obj1AntPosTx1X,
                    (decimal)m_TestSourceParams.obj1AntPosTx1Z,
                    (decimal)m_TestSourceParams.obj1AntPosTx2X,
                    (decimal)m_TestSourceParams.obj1AntPosTx2Z,
                    (decimal)m_TestSourceParams.obj1AntPosTx3X,
                    (decimal)m_TestSourceParams.obj1AntPosTx3Z
                });
                m_GuiManager.RecordLog(8, full_command3);
            }
            uint g_RadarDeviceId = GlobalRef.g_RadarDeviceId;
            num41 = Imports.RadarLinkImpl_SetTestSource(GlobalRef.g_RadarDeviceId, num, num2, num3, num4, num5, num6, num7, num8, num9, num10, num11, num12, num13, num14, num15, num16, num17, num18, num19, num20, num21, num22, num23, num24, num25, num26, (char)num27, (char)num28, (char)num29, (char)num30, (char)num31, (char)num32, (char)num33, (char)num34, (char)num35, (char)num36, (char)num37, (char)num38, (char)num39, (char)num40);
            if ((num41 == 0 && ((GlobalRef.g_CasCadeDeviceSpiConnect & 1U) == 1U || (GlobalRef.g_CasCadeDeviceSpiConnect & 2U) == 2U || (GlobalRef.g_CasCadeDeviceSpiConnect & 4U) == 4U || (GlobalRef.g_CasCadeDeviceSpiConnect & 8U) == 8U)) || GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
            {
                string full_command4 = string.Format("Status: Passed", new object[0]);
                m_GuiManager.RecordLog(8, full_command4);
                int num42 = 0;
                while (num42 < 4 && !jsonConfigInProgress)
                {
                    if (((ulong)g_RadarDeviceId & (ulong)(1L << (num42 & 31))) != 0UL)
                    {
                        int mmwaveDevIndex = getMmwaveDevIndex(num42);
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlTestSource_t.rlTestSourceObjects[0].rlTestSourceObject_t.posX_m = (double)m_TestSourceParams.obj1PosX;
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlTestSource_t.rlTestSourceObjects[0].rlTestSourceObject_t.posY_m = (double)m_TestSourceParams.obj1PosY;
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlTestSource_t.rlTestSourceObjects[0].rlTestSourceObject_t.posZ_m = (double)m_TestSourceParams.obj1PosZ;
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlTestSource_t.rlTestSourceObjects[0].rlTestSourceObject_t.velX_m_sec = (double)m_TestSourceParams.obj1VelX;
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlTestSource_t.rlTestSourceObjects[0].rlTestSourceObject_t.velY_m_sec = (double)m_TestSourceParams.obj1VelY;
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlTestSource_t.rlTestSourceObjects[0].rlTestSourceObject_t.velZ_m_sec = (double)m_TestSourceParams.obj1VelZ;
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlTestSource_t.rlTestSourceObjects[0].rlTestSourceObject_t.posXMin_m = (double)m_TestSourceParams.obj1BMinX;
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlTestSource_t.rlTestSourceObjects[0].rlTestSourceObject_t.posYMin_m = (double)m_TestSourceParams.obj1BMinY;
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlTestSource_t.rlTestSourceObjects[0].rlTestSourceObject_t.posZMin_m = (double)m_TestSourceParams.obj1BMinZ;
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlTestSource_t.rlTestSourceObjects[0].rlTestSourceObject_t.posXMax_m = (double)m_TestSourceParams.obj1BMaxX;
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlTestSource_t.rlTestSourceObjects[0].rlTestSourceObject_t.posYMax_m = (double)m_TestSourceParams.obj1BMaxY;
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlTestSource_t.rlTestSourceObjects[0].rlTestSourceObject_t.posZMax_m = (double)m_TestSourceParams.obj1BMaxZ;
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlTestSource_t.rlTestSourceObjects[0].rlTestSourceObject_t.sigLvl_dBFS = (double)m_TestSourceParams.obj1Sig;
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlTestSource_t.rlTestSourceObjects[1].rlTestSourceObject_t.posX_m = (double)m_TestSourceParams.obj2PosX;
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlTestSource_t.rlTestSourceObjects[1].rlTestSourceObject_t.posY_m = (double)m_TestSourceParams.obj2PosY;
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlTestSource_t.rlTestSourceObjects[1].rlTestSourceObject_t.posZ_m = (double)m_TestSourceParams.obj2PosZ;
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlTestSource_t.rlTestSourceObjects[1].rlTestSourceObject_t.velX_m_sec = (double)m_TestSourceParams.obj2VelX;
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlTestSource_t.rlTestSourceObjects[1].rlTestSourceObject_t.velY_m_sec = (double)m_TestSourceParams.obj2VelY;
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlTestSource_t.rlTestSourceObjects[1].rlTestSourceObject_t.velZ_m_sec = (double)m_TestSourceParams.obj2VelZ;
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlTestSource_t.rlTestSourceObjects[1].rlTestSourceObject_t.posXMin_m = (double)m_TestSourceParams.obj2BMinX;
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlTestSource_t.rlTestSourceObjects[1].rlTestSourceObject_t.posYMin_m = (double)m_TestSourceParams.obj2BMinY;
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlTestSource_t.rlTestSourceObjects[1].rlTestSourceObject_t.posZMin_m = (double)m_TestSourceParams.obj2BMinZ;
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlTestSource_t.rlTestSourceObjects[1].rlTestSourceObject_t.posXMax_m = (double)m_TestSourceParams.obj2BMaxX;
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlTestSource_t.rlTestSourceObjects[1].rlTestSourceObject_t.posYMax_m = (double)m_TestSourceParams.obj2BMaxY;
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlTestSource_t.rlTestSourceObjects[1].rlTestSourceObject_t.posZMax_m = (double)m_TestSourceParams.obj2BMaxZ;
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlTestSource_t.rlTestSourceObjects[1].rlTestSourceObject_t.sigLvl_dBFS = (double)m_TestSourceParams.obj2Sig;
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlTestSource_t.rlTestSourceRxAntPos[0].rlTestSourceAntPos_t.antPosX = (double)m_TestSourceParams.obj1AntPosRx1X;
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlTestSource_t.rlTestSourceRxAntPos[0].rlTestSourceAntPos_t.antPosZ = (double)m_TestSourceParams.obj1AntPosRx1Z;
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlTestSource_t.rlTestSourceRxAntPos[1].rlTestSourceAntPos_t.antPosX = (double)m_TestSourceParams.obj1AntPosRx2X;
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlTestSource_t.rlTestSourceRxAntPos[1].rlTestSourceAntPos_t.antPosZ = (double)m_TestSourceParams.obj1AntPosRx2Z;
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlTestSource_t.rlTestSourceRxAntPos[2].rlTestSourceAntPos_t.antPosX = (double)m_TestSourceParams.obj1AntPosRx3X;
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlTestSource_t.rlTestSourceRxAntPos[2].rlTestSourceAntPos_t.antPosZ = (double)m_TestSourceParams.obj1AntPosRx3Z;
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlTestSource_t.rlTestSourceRxAntPos[3].rlTestSourceAntPos_t.antPosX = (double)m_TestSourceParams.obj1AntPosRx4X;
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlTestSource_t.rlTestSourceRxAntPos[3].rlTestSourceAntPos_t.antPosZ = (double)m_TestSourceParams.obj1AntPosRx4Z;
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlTestSource_t.rlTestSourceTxAntPos[0].rlTestSourceAntPos_t.antPosX = (double)m_TestSourceParams.obj1AntPosTx1X;
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlTestSource_t.rlTestSourceTxAntPos[0].rlTestSourceAntPos_t.antPosZ = (double)m_TestSourceParams.obj1AntPosTx1Z;
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlTestSource_t.rlTestSourceTxAntPos[1].rlTestSourceAntPos_t.antPosX = (double)m_TestSourceParams.obj1AntPosTx2X;
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlTestSource_t.rlTestSourceTxAntPos[1].rlTestSourceAntPos_t.antPosZ = (double)m_TestSourceParams.obj1AntPosTx2Z;
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlTestSource_t.rlTestSourceTxAntPos[2].rlTestSourceAntPos_t.antPosX = (double)m_TestSourceParams.obj1AntPosTx3X;
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlTestSource_t.rlTestSourceTxAntPos[2].rlTestSourceAntPos_t.antPosZ = (double)m_TestSourceParams.obj1AntPosTx3Z;
                        GlobalRef.jobject.mmWaveDevices[mmwaveDevIndex].rfConfig.rlTestSource_t.isConfigured = 1;
                    }
                    num42++;
                }
                MatlabPostProcGuiInstance.MatlabPostProcImpl_SetTestSource((double)num, (double)num2, (double)num3, (double)num4, (double)num5, (double)num6, (double)num7, (double)num8, (double)num9, (double)num10, (double)num11, (double)num12, (double)num13, (double)num14, (double)num15, (double)num16, (double)num17, (double)num18, (double)num19, (double)num20, (double)num21, (double)num22, (double)num23, (double)num24, (double)num25, (double)num26, (double)num27, (double)num28, (double)num29, (double)num30, (double)num31, (double)num32, (double)num33, (double)num34, (double)num35, (double)num36, (double)num37, (double)num38, (double)num39, (double)num40);
            }
            else
            {
                string msg = string.Format("Status: Failed, Error Type: {0}", new object[]
                {
                    GetErrorType(num41)
                });
                GlobalRef.LuaWrapper.PrintError(msg);
            }
            return num41;
        }

        public int iDownldBssFwCmdLine_Impl(ushort RadarDeviceId, string path)
        {
            GlobalRef.g_BSSFwDl = true;
            GlobalRef.g_MSSFwDl = false;
            GlobalRef.g_RadarDeviceId = (uint)RadarDeviceId;
            return ScriptOps.m_MainForm.ConnectTab.DownloadFw(false, path);
        }

        public int iDownldMssFwCmdLine_Impl(ushort RadarDeviceId, string path)
        {
            GlobalRef.g_BSSFwDl = false;
            GlobalRef.g_MSSFwDl = true;
            GlobalRef.g_RadarDeviceId = (uint)RadarDeviceId;
            return ScriptOps.m_MainForm.ConnectTab.DownloadFw(false, path);
        }

        private int iSetOutputPower(bool is_starting_op, bool is_ending_op)
        {
            int result;
            try
            {
                int num = -1;
                int dbm = m_TxParams.Dbm;
                double power = m_TxParams.Power;
                int soc = m_TxParams.Soc;
                int analogSetting = m_TxParams.AnalogSetting;
                int antSelect = m_TxParams.AntSelect;
                int chanLimit = m_TxParams.ChanLimit;
                int femLimit = m_TxParams.FemLimit;
                double num2 = m_TxParams.PostDpd;
                object[] res_arr = m_GuiManager.p000002.Execute(GuiOp.SetOutputPower, new object[]
                {
                    dbm,
                    power,
                    soc,
                    analogSetting,
                    antSelect,
                    chanLimit,
                    femLimit,
                    num2
                }, false, is_starting_op, is_ending_op);
                if (!m_GuiManager.p000002.GetSingleIntRes(GuiOp.SetOutputPower, res_arr, out num))
                {
                    result = -1;
                }
                else if (num != 0)
                {
                    m_GuiManager.Error(string.Format("{0} failed with error code: {1}", m_GuiManager.p000002.LuaFormatDict[GuiOp.SetOutputPower].Name, num));
                    result = -1;
                }
                else
                {
                    result = num;
                }
            }
            catch (Exception ex)
            {
                m_GuiManager.Error(ex.Message, ex.StackTrace);
                result = -1;
            }
            return result;
        }

        private void iEnableDpd()
        {
            try
            {
                m_GuiManager.p000002.Execute(GuiOp.EnableDpd, new object[]
                {
                    m_TxParams.EnableDpd
                }, false);
            }
            catch (Exception ex)
            {
                m_GuiManager.Error(ex.Message, ex.StackTrace);
            }
        }

        private int iChannelTune(out int calib_res, bool is_starting_op, bool is_ending_op)
        {
            int num = -1;
            calib_res = -1;
            int result;
            try
            {
                object[] res_arr = m_GuiManager.p000002.Execute(GuiOp.ChannelTune, new object[]
                {
                    (int)m_MainParams.Channel.Band,
                    m_MainParams.Channel.PrimIdx
                }, false, is_starting_op, is_ending_op);
                m_GuiManager.p000002.GetTwoIntRes(GuiOp.ChannelTune, res_arr, out num, out calib_res);
                if (num == 0)
                {
                    ScriptOps.m_MainForm.UpdateCalibrationStatus(calib_res, true);
                }
                else
                {
                    m_GuiManager.Error(string.Format("{0} failed with error code: {1}", m_GuiManager.p000002.LuaFormatDict[GuiOp.ChannelTune].Name, num));
                }
                result = num;
            }
            catch (Exception ex)
            {
                m_GuiManager.Error(ex.Message, ex.StackTrace);
                result = -1;
            }
            return result;
        }

        private int iCalibrate()
        {
            int result;
            try
            {
                int num = -1;
                object[] res_arr = m_GuiManager.p000002.Execute(GuiOp.Calibrate, null, false);
                m_GuiManager.p000002.GetSingleIntRes(GuiOp.Calibrate, res_arr, out num);
                result = num;
            }
            catch (Exception ex)
            {
                m_GuiManager.Error(ex.Message, ex.StackTrace);
                result = -1;
            }
            return result;
        }

        private int iRunCalibration(string calib_name)
        {
            int result;
            try
            {
                int num = -1;
                object[] res_arr = m_GuiManager.p000002.Execute(GuiOp.RunCalibration, new object[]
                {
                    calib_name
                }, false);
                m_GuiManager.p000002.GetSingleIntRes(GuiOp.Calibrate, res_arr, out num);
                result = num;
            }
            catch (Exception ex)
            {
                m_GuiManager.Error(ex.Message, ex.StackTrace);
                result = -1;
            }
            return result;
        }

        private int iGoToElp()
        {
            int result;
            try
            {
                int num = -1;
                object[] res_arr = m_GuiManager.p000002.Execute(GuiOp.GoToElp, null, false);
                if (!m_GuiManager.p000002.GetSingleIntRes(GuiOp.GoToElp, res_arr, out num))
                {
                    result = num;
                }
                else
                {
                    if (num == 0)
                    {
                        ScriptOps.m_MainForm.GoToElpEnd(num);
                    }
                    result = num;
                }
            }
            catch (Exception ex)
            {
                m_GuiManager.Error(ex.Message, ex.StackTrace);
                result = -1;
            }
            return result;
        }

        private int iRxLowPower(out int calib_res)
        {
            int num = -1;
            calib_res = -1;
            int result;
            try
            {
                object[] res_arr = m_GuiManager.p000002.Execute(GuiOp.RxLowPower, new object[]
                {
                    m_MainParams.RxLowPower + m_MainParams.PowerState
                }, false);
                if (!m_GuiManager.p000002.GetTwoIntRes(GuiOp.RxLowPower, res_arr, out num, out calib_res))
                {
                    result = -1;
                }
                else
                {
                    if (num == 0)
                    {
                        ScriptOps.m_MainForm.UpdateCalibrationStatus(calib_res, true);
                    }
                    result = num;
                }
            }
            catch (Exception ex)
            {
                m_GuiManager.Error(ex.Message, ex.StackTrace);
                result = -1;
            }
            return result;
        }

        private int iRxBoost(out int calib_res)
        {
            int num = -1;
            calib_res = -1;
            int result;
            try
            {
                object[] res_arr = m_GuiManager.p000002.Execute(GuiOp.RxBoost, new object[]
                {
                    m_MainParams.RxBoost
                }, false);
                if (!m_GuiManager.p000002.GetTwoIntRes(GuiOp.RxBoost, res_arr, out num, out calib_res))
                {
                    result = -1;
                }
                else
                {
                    if (num == 0)
                    {
                        ScriptOps.m_MainForm.UpdateCalibrationStatus(calib_res, true);
                    }
                    result = num;
                }
            }
            catch (Exception ex)
            {
                m_GuiManager.Error(ex.Message, ex.StackTrace);
                result = -1;
            }
            return result;
        }

        private int iStartRxStats(bool is_starting_op, bool is_ending_op)
        {
            int result;
            try
            {
                int num = -1;
                int issueAck = (int)m_RxParams.IssueAck;
                int incMode = m_RxParams.IncMode;
                int rxData = m_RxParams.RxData;
                object[] res_arr = m_GuiManager.p000002.Execute(GuiOp.StartRxStats, new object[]
                {
                    issueAck,
                    incMode,
                    rxData
                }, false, is_starting_op, is_ending_op);
                if (!m_GuiManager.p000002.GetSingleIntRes(GuiOp.StartRxStats, res_arr, out num))
                {
                    result = -1;
                }
                else
                {
                    result = num;
                }
            }
            catch (Exception ex)
            {
                m_GuiManager.Error(ex.Message, ex.StackTrace);
                result = -1;
            }
            return result;
        }

        private int iRstRxStats(bool is_starting_op, bool is_ending_op)
        {
            int result;
            try
            {
                int num = -1;
                object[] res_arr = m_GuiManager.p000002.Execute(GuiOp.f0002b0, null, false, is_starting_op, is_ending_op);
                if (!m_GuiManager.p000002.GetSingleIntRes(GuiOp.f0002b0, res_arr, out num))
                {
                    result = -1;
                }
                else
                {
                    result = num;
                }
            }
            catch (Exception ex)
            {
                m_GuiManager.Error(ex.Message, ex.StackTrace);
                result = -1;
            }
            return result;
        }

        private int iStopRxStats(bool is_starting_op, bool is_ending_op)
        {
            int result;
            try
            {
                int num = -1;
                object[] res_arr = m_GuiManager.p000002.Execute(GuiOp.StopRxStats, null, false, is_starting_op, is_ending_op);
                if (!m_GuiManager.p000002.GetSingleIntRes(GuiOp.StopRxStats, res_arr, out num))
                {
                    result = -1;
                }
                else
                {
                    result = num;
                }
            }
            catch (Exception ex)
            {
                m_GuiManager.Error(ex.Message, ex.StackTrace);
                result = -1;
            }
            return result;
        }

        public int iSetBasicConfig_Gui(bool is_starting_op, bool is_ending_op)
        {
            ScriptOps.m_MainForm.StaticConfigTab.UpdateBasicConfData();
            iDisableTabButtons();
            ScriptOps.m_MainForm.SetOvBtEnblTimer(true);
            int result = iSetBasicConfig_Impl(is_starting_op, is_ending_op);
            iEnableTabButtons();
            ScriptOps.m_MainForm.SetOvBtEnblTimer(false);
            return result;
        }

        public void iDisableTabButtons()
        {
            ScriptOps.m_MainForm.StaticConfigTab.iDisableStaticConfTabBtn();
            ScriptOps.m_MainForm.DataConfigTab.iDisableDataCfgTabBtns();
            ScriptOps.m_MainForm.ChirpConfigTab.iDisableChirpCfgTabBtns();
            ScriptOps.m_MainForm.TestSourceTab.iDisableTstSrcTabBtns();
            ScriptOps.m_MainForm.ProtocolTab.iDisableProtoTabBtns();
            ScriptOps.m_MainForm.RegOpeTab.iDisableRegOpeTabBtns();
        }

        public void iEnableTabButtons()
        {
            ScriptOps.m_MainForm.StaticConfigTab.iEnableStaticConfTabBtn();
            ScriptOps.m_MainForm.DataConfigTab.iEnableDataCfgTabBtns();
            ScriptOps.m_MainForm.ChirpConfigTab.iEnableChirpCfgTabBtns();
            ScriptOps.m_MainForm.TestSourceTab.iEnableTstSrcTabBtns();
            ScriptOps.m_MainForm.ProtocolTab.iEnableProtoTabBtns();
            ScriptOps.m_MainForm.RegOpeTab.iEnableRegOpeTabBtns();
        }

        public int iConfigProfileStartFreMinAndMax_Gui()
        {
            int result = 0;
            ScriptOps.m_MainForm.ChirpConfigTab.StartFreqMinAndMaxSet_Gui();
            ScriptOps.m_MainForm.ContStreamingTab.StartFreqMinAndMaxSetInContStream_Gui();
            ScriptOps.m_MainForm.AdvanceFrameConfigTab.StartFreqMinAndMaxSetInLoopBackBurst_Gui();
            ScriptOps.m_MainForm.StaticConfigTab.SetStartAndEndFreqMinAndMaxLimitInFreqLimitConfig_Gui();
            ScriptOps.m_MainForm.StaticConfigTab.SetStartAndEndFreqMinAndMaxLimitInCalMonFreqTxPowerLimitConfig_Gui();
            if (GlobalRef.g_ARDeviceOperateFreq60GHz)
            {
                string full_command = string.Format("ar1.frequencyBandSelection(\"{0}\")", new object[]
                {
                    "60G"
                });
                m_GuiManager.RecordLog(13, full_command);
            }
            else
            {
                string full_command2 = string.Format("ar1.frequencyBandSelection(\"{0}\")", new object[]
                {
                    "77G"
                });
                m_GuiManager.RecordLog(13, full_command2);
            }
            return result;
        }

        public int iSPIConnectDisconnect_Gui(bool is_starting_op, bool is_ending_op)
        {
            ScriptOps.m_MainForm.ConnectTab.UpdateSPIData();
            ScriptOps.m_MainForm.ConnectTab.iDisableConnectTabBtn();
            ScriptOps.m_MainForm.SetOvBtEnblTimer(true);
            int result = iSPIConnectDisconnect_impl();
            ScriptOps.m_MainForm.ConnectTab.iEnableConnectTabBtn();
            ScriptOps.m_MainForm.SetOvBtEnblTimer(false);
            return result;
        }

        public int iRadarDevice2SPIConnectDisconnect_Gui(bool is_starting_op, bool is_ending_op)
        {
            ScriptOps.m_MainForm.ConnectTab.UpdateSPIData();
            ScriptOps.m_MainForm.ConnectTab.iDisableConnectTabBtn();
            ScriptOps.m_MainForm.SetOvBtEnblTimer(true);
            int result = iRadarDevice2SPIConnectDisconnect_impl();
            ScriptOps.m_MainForm.ConnectTab.iEnableConnectTabBtn();
            ScriptOps.m_MainForm.SetOvBtEnblTimer(false);
            return result;
        }

        public int iRadarDevice3SPIConnectDisconnect_Gui(bool is_starting_op, bool is_ending_op)
        {
            ScriptOps.m_MainForm.ConnectTab.UpdateSPIData();
            ScriptOps.m_MainForm.ConnectTab.iDisableConnectTabBtn();
            ScriptOps.m_MainForm.SetOvBtEnblTimer(true);
            int result = iRadarDevice3SPIConnectDisconnect_impl();
            ScriptOps.m_MainForm.ConnectTab.iEnableConnectTabBtn();
            ScriptOps.m_MainForm.SetOvBtEnblTimer(false);
            return result;
        }

        public int iRadarDevice4SPIConnectDisconnect_Gui(bool is_starting_op, bool is_ending_op)
        {
            ScriptOps.m_MainForm.ConnectTab.UpdateSPIData();
            ScriptOps.m_MainForm.ConnectTab.iDisableConnectTabBtn();
            ScriptOps.m_MainForm.SetOvBtEnblTimer(true);
            int result = iRadarDevice4SPIConnectDisconnect_impl();
            ScriptOps.m_MainForm.ConnectTab.iEnableConnectTabBtn();
            ScriptOps.m_MainForm.SetOvBtEnblTimer(false);
            return result;
        }

        public int iRs232ConnectDisconnect_Gui(bool is_starting_op, bool is_ending_op)
        {
            ScriptOps.m_MainForm.ConnectTab.UpdateGuiFrRs232();
            ScriptOps.m_MainForm.ConnectTab.UpdateSPIData();
            ScriptOps.m_MainForm.ConnectTab.UpdateData();
            return iRs232ConnectDisconnect_impl();
        }

        public int iSPIEnableRf_Gui(bool is_starting_op, bool is_ending_op)
        {
            ScriptOps.m_MainForm.ConnectTab.iDisableConnectTabBtn();
            ScriptOps.m_MainForm.SetOvBtEnblTimer(true);
            int result = iSPIEnableRf_Impl();
            ScriptOps.m_MainForm.ConnectTab.iEnableConnectTabBtn();
            ScriptOps.m_MainForm.SetOvBtEnblTimer(false);
            return result;
        }

        public int iSPIEnableRfDevice2_Gui(bool is_starting_op, bool is_ending_op)
        {
            ScriptOps.m_MainForm.ConnectTab.iDisableConnectTabBtn();
            ScriptOps.m_MainForm.SetOvBtEnblTimer(true);
            int result = iSPIEnableRf_Impl();
            ScriptOps.m_MainForm.ConnectTab.iEnableConnectTabBtn();
            ScriptOps.m_MainForm.SetOvBtEnblTimer(false);
            return result;
        }

        public int iSPIEnableRfDevice3_Gui(bool is_starting_op, bool is_ending_op)
        {
            ScriptOps.m_MainForm.ConnectTab.iDisableConnectTabBtn();
            ScriptOps.m_MainForm.SetOvBtEnblTimer(true);
            int result = iSPIEnableRf_Impl();
            ScriptOps.m_MainForm.ConnectTab.iEnableConnectTabBtn();
            ScriptOps.m_MainForm.SetOvBtEnblTimer(false);
            return result;
        }

        public int iSPIEnableRfDevice4_Gui(bool is_starting_op, bool is_ending_op)
        {
            ScriptOps.m_MainForm.ConnectTab.iDisableConnectTabBtn();
            ScriptOps.m_MainForm.SetOvBtEnblTimer(true);
            int result = iSPIEnableRf_Impl();
            ScriptOps.m_MainForm.ConnectTab.iEnableConnectTabBtn();
            ScriptOps.m_MainForm.SetOvBtEnblTimer(false);
            return result;
        }

        public int iTemperatureSensorData_Gui(bool is_starting_op, bool is_ending_op)
        {
            iDisableTabButtons();
            ScriptOps.m_MainForm.SetOvBtEnblTimer(true);
            int result = iReadTemperatureSensorData_Impl(is_starting_op, is_ending_op);
            iEnableTabButtons();
            ScriptOps.m_MainForm.SetOvBtEnblTimer(false);
            return result;
        }

        public int iEnableTestSource_Gui(bool is_starting_op, bool is_ending_op)
        {
            return iEnableTestSource_Impl();
        }

        public int iWarmReset_Impl()
        {
            int num;
            string full_command;
            if (1 == Imports.RadarLinkImpl_IsConnected())
            {
                num = Imports.RadarLinkImpl_WarmReset(0);
                full_command = string.Format("ar1.WarmReset({0})", new object[]
                {
                    0m
                });
            }
            else
            {
                num = Imports.RadarLinkImpl_WarmReset(1);
                full_command = string.Format("ar1.WarmReset({0})", new object[]
                {
                    1m
                });
            }
            m_GuiManager.RecordLog(99, full_command);
            if (num == 0)
            {
                string full_command2 = string.Format("Status: Passed", new object[0]);
                m_GuiManager.RecordLog(99, full_command2);
            }
            else
            {
                string msg = string.Format("Status: Failed, Error Type: {0}", new object[]
                {
                    GetErrorType(num)
                });
                GlobalRef.LuaWrapper.PrintError(msg);
            }
            return num;
        }

        public int iFullReset_Impl()
        {
            int num = -1;
            ScriptOps.m_MainForm.ConnectTab.iDisableConnectTabBtn();
            ScriptOps.m_MainForm.SetOvBtEnblTimer(true);
            if (GlobalRef.g_NtvRS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
            {
                if (m_RadarDeviceModeConfigParams.NumberOfRadarDevicesDetected <= 1)
                {
                    ScriptOps.m_MainForm.ConnectTab.iConnectDisconnect();
                }
                else if ((GlobalRef.g_RadarDeviceId & 1U) == 1U)
                {
                    ScriptOps.m_MainForm.ConnectTab.iConnectDisconnect();
                }
                else if ((GlobalRef.g_RadarDeviceId & 2U) == 2U)
                {
                    ScriptOps.m_MainForm.ConnectTab.iConnectDisconnectRadarDevice2();
                }
                else if ((GlobalRef.g_RadarDeviceId & 4U) == 4U)
                {
                    ScriptOps.m_MainForm.ConnectTab.iConnectDisconnectRadarDevice2();
                }
                else if ((GlobalRef.g_RadarDeviceId & 8U) == 8U)
                {
                    ScriptOps.m_MainForm.ConnectTab.iConnectDisconnectRadarDevice2();
                }
            }
            if (m_RadarDeviceModeConfigParams.NumberOfRadarDevicesDetected <= 1)
            {
                if (!GlobalRef.g_OpnBrdCtrl)
                {
                    iBoardCtrl_Impl();
                }
                Thread.Sleep(500);
                num = Imports.RadarLinkImpl_FullReset(GlobalRef.g_RadarDeviceId & 1U, 0);
            }
            else if ((GlobalRef.g_RadarDeviceId & 1U) == 1U)
            {
                num = Imports.RadarLinkImpl_FullReset(GlobalRef.g_RadarDeviceId & 1U, 0);
            }
            else if ((GlobalRef.g_RadarDeviceId & 2U) == 2U)
            {
                num = Imports.RadarLinkImpl_FullReset(GlobalRef.g_RadarDeviceId & 2U, 0);
            }
            else if ((GlobalRef.g_RadarDeviceId & 4U) == 4U)
            {
                num = Imports.RadarLinkImpl_FullReset(GlobalRef.g_RadarDeviceId & 4U, 0);
            }
            else if ((GlobalRef.g_RadarDeviceId & 8U) == 8U)
            {
                num = Imports.RadarLinkImpl_FullReset(GlobalRef.g_RadarDeviceId & 8U, 0);
            }
            Thread.Sleep(500);
            if (m_RadarDeviceModeConfigParams.NumberOfRadarDevicesDetected <= 1)
            {
                num = Imports.RadarLinkImpl_FullReset(GlobalRef.g_RadarDeviceId & 1U, 1);
            }
            string full_command;
            if (m_RadarDeviceModeConfigParams.NumberOfRadarDevicesDetected <= 1)
            {
                full_command = string.Format("ar1.FullReset()", new object[0]);
            }
            else
            {
                full_command = string.Format("ar1.FullReset({0})", new object[]
                {
                    GlobalRef.g_RadarDeviceId
                });
            }
            m_GuiManager.RecordLog(99, full_command);
            if (num == 0)
            {
                GlobalRef.g_I2COpenCloseHandler = 0U;
                string full_command2 = string.Format("Status: Passed", new object[0]);
                m_GuiManager.RecordLog(99, full_command2);
                ScriptOps.m_MainForm.iSetConnectionTimer(true);
                iResetAllComponents();
            }
            else
            {
                string full_command3 = string.Format("Status: Failed To give full reset, Error Value: {0}", new object[]
                {
                    num
                });
                m_GuiManager.RecordLog(99, full_command3);
            }
            if (m_RadarDeviceModeConfigParams.NumberOfRadarDevicesDetected <= 1)
            {
                Thread.Sleep(500);
                if (GlobalRef.g_OpnBrdCtrl)
                {
                    iBoardCtrl_Impl();
                }
            }
            ScriptOps.m_MainForm.ConnectTab.iEnableConnectTabBtn();
            ScriptOps.m_MainForm.SetOvBtEnblTimer(false);
            return num;
        }

        public int iDCA1000_FullReset_Impl()
        {
            int num = -1;
            ScriptOps.m_MainForm.ConnectTab.iDisableConnectTabBtn();
            ScriptOps.m_MainForm.SetOvBtEnblTimer(true);
            if (GlobalRef.g_NtvRS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
            {
                if (m_RadarDeviceModeConfigParams.NumberOfRadarDevicesDetected <= 1)
                {
                    ScriptOps.m_MainForm.ConnectTab.iConnectDisconnect();
                }
                else if ((GlobalRef.g_RadarDeviceId & 1U) == 1U)
                {
                    ScriptOps.m_MainForm.ConnectTab.iConnectDisconnect();
                }
                else if ((GlobalRef.g_RadarDeviceId & 2U) == 2U)
                {
                    ScriptOps.m_MainForm.ConnectTab.iConnectDisconnectRadarDevice2();
                }
                else if ((GlobalRef.g_RadarDeviceId & 4U) == 4U)
                {
                    ScriptOps.m_MainForm.ConnectTab.iConnectDisconnectRadarDevice2();
                }
                else if ((GlobalRef.g_RadarDeviceId & 8U) == 8U)
                {
                    ScriptOps.m_MainForm.ConnectTab.iConnectDisconnectRadarDevice2();
                }
            }
            if (!GlobalRef.g_OpnBrdCtrl)
            {
                iBoardCtrl_Impl();
            }
            Thread.Sleep(500);
            if (m_RadarDeviceModeConfigParams.NumberOfRadarDevicesDetected <= 1)
            {
                num = Imports.RadarLinkImpl_FullReset(GlobalRef.g_RadarDeviceId & 1U, 0);
            }
            else if ((GlobalRef.g_RadarDeviceId & 1U) == 1U)
            {
                num = Imports.RadarLinkImpl_FullReset(GlobalRef.g_RadarDeviceId & 1U, 0);
            }
            else if ((GlobalRef.g_RadarDeviceId & 2U) == 2U)
            {
                num = Imports.RadarLinkImpl_FullReset(GlobalRef.g_RadarDeviceId & 2U, 0);
            }
            else if ((GlobalRef.g_RadarDeviceId & 4U) == 4U)
            {
                num = Imports.RadarLinkImpl_FullReset(GlobalRef.g_RadarDeviceId & 4U, 0);
            }
            else if ((GlobalRef.g_RadarDeviceId & 8U) == 8U)
            {
                num = Imports.RadarLinkImpl_FullReset(GlobalRef.g_RadarDeviceId & 8U, 0);
            }
            Thread.Sleep(500);
            if (m_RadarDeviceModeConfigParams.NumberOfRadarDevicesDetected <= 1)
            {
                num = Imports.RadarLinkImpl_FullReset(GlobalRef.g_RadarDeviceId & 1U, 1);
            }
            else if ((GlobalRef.g_RadarDeviceId & 1U) == 1U)
            {
                num = Imports.RadarLinkImpl_FullReset(GlobalRef.g_RadarDeviceId & 1U, 1);
            }
            else if ((GlobalRef.g_RadarDeviceId & 2U) == 2U)
            {
                num = Imports.RadarLinkImpl_FullReset(GlobalRef.g_RadarDeviceId & 2U, 1);
            }
            else if ((GlobalRef.g_RadarDeviceId & 4U) == 4U)
            {
                num = Imports.RadarLinkImpl_FullReset(GlobalRef.g_RadarDeviceId & 4U, 1);
            }
            else if ((GlobalRef.g_RadarDeviceId & 8U) == 8U)
            {
                num = Imports.RadarLinkImpl_FullReset(GlobalRef.g_RadarDeviceId & 8U, 1);
            }
            string full_command;
            if (m_RadarDeviceModeConfigParams.NumberOfRadarDevicesDetected <= 1)
            {
                full_command = string.Format("ar1.FullReset()", new object[0]);
            }
            else
            {
                full_command = string.Format("ar1.FullReset({0})", new object[]
                {
                    GlobalRef.g_RadarDeviceId
                });
            }
            m_GuiManager.RecordLog(99, full_command);
            if (num == 0)
            {
                GlobalRef.g_I2COpenCloseHandler = 0U;
                string full_command2 = string.Format("Status: Passed", new object[0]);
                m_GuiManager.RecordLog(99, full_command2);
                ScriptOps.m_MainForm.iSetConnectionTimer(true);
                iResetAllComponents();
            }
            else
            {
                string full_command3 = string.Format("Status: Failed To give full reset, Error Value: {0}", new object[]
                {
                    num
                });
                m_GuiManager.RecordLog(99, full_command3);
            }
            Thread.Sleep(500);
            if (GlobalRef.g_OpnBrdCtrl)
            {
                iBoardCtrl_Impl();
            }
            ScriptOps.m_MainForm.ConnectTab.iEnableConnectTabBtn();
            ScriptOps.m_MainForm.SetOvBtEnblTimer(false);
            return num;
        }

        public void iResetAllComponents()
        {
            GlobalRef.g_FrameTriggered = false;
            GlobalRef.g_FrameTriggered_Cascade[0] = false;
            GlobalRef.g_FrameTriggered_Cascade[1] = false;
            GlobalRef.g_FrameTriggered_Cascade[2] = false;
            GlobalRef.g_FrameTriggered_Cascade[3] = false;
            if (ScriptOps.m_MainForm.TestSourceTab.iGetEnableBtnText() == "Disable")
            {
                ScriptOps.m_MainForm.TestSourceTab.iSetEnableBtnText("Enable");
                m_TestSourceParams.TestSourceEnabled = false;
            }
            if (ScriptOps.m_MainForm.ChirpConfigTab.iGetFrameBtnText() == "Stop Frame")
            {
                iSetTrigFrame_Gui((ushort)GlobalRef.g_RadarDeviceId, true, false);
            }
            if (ScriptOps.m_MainForm.ContStreamingTab.iGetContStrBtnText() == "Disable")
            {
                ScriptOps.m_MainForm.ContStreamingTab.iSetContStrBtnText("Enable");
            }
            if (ScriptOps.m_MainForm.ChirpConfigTab.iGetRealTimeBtnText() == "Stop")
            {
                ScriptOps.m_MainForm.ChirpConfigTab.iSetRealTimeBtnText("Real Time");
                GlobalRef.g_RealTimeTrigVar = false;
            }
            if ((GlobalRef.g_RadarDeviceId & 1U) == 1U)
            {
                ScriptOps.m_MainForm.ConnectTab.clrMssFwVersion();
                ScriptOps.m_MainForm.ConnectTab.m00001c();
                ScriptOps.m_MainForm.ConnectTab.clrRadarDevice1Status();
                ScriptOps.m_MainForm.ConnectTab.clrAllStatusofConnectTab();
                ScriptOps.m_MainForm.CalibConfig.ResetTheTimeUnitReportOfRadarDevice1Status();
                ScriptOps.m_MainForm.CalibConfig.ResetTheRunTimeReportOfRadarDevice1Status();
                ScriptOps.m_MainForm.CalibConfig.ResetTheRFInitCalibReportOfRadarDevice1Status();
                ScriptOps.m_MainForm.ContStreamingTab.ResetMeasureTxPowerReportOfRadarDevice1Status();
                ScriptOps.m_MainForm.RFStatusTab.ResetMeasurePDPowerReportOfRadarDevice1Status();
            }
            else if ((GlobalRef.g_RadarDeviceId & 2U) == 2U)
            {
                ScriptOps.m_MainForm.ConnectTab.clrMssDev2FwVersion();
                ScriptOps.m_MainForm.ConnectTab.m00001d();
                ScriptOps.m_MainForm.ConnectTab.clrRadarDevice2Status();
                ScriptOps.m_MainForm.CalibConfig.ResetTheTimeUnitReportOfRadarDevice2Status();
                ScriptOps.m_MainForm.CalibConfig.ResetTheRunTimeReportOfRadarDevice2Status();
                ScriptOps.m_MainForm.CalibConfig.ResetTheRFInitCalibReportOfRadarDevice2Status();
                ScriptOps.m_MainForm.ContStreamingTab.ResetMeasureTxPowerReportOfRadarDevice2Status();
                ScriptOps.m_MainForm.RFStatusTab.ResetMeasurePDPowerReportOfRadarDevice2Status();
            }
            else if ((GlobalRef.g_RadarDeviceId & 4U) == 4U)
            {
                ScriptOps.m_MainForm.ConnectTab.clrMssDev3FwVersion();
                ScriptOps.m_MainForm.ConnectTab.m00001e();
                ScriptOps.m_MainForm.ConnectTab.clrRadarDevice3Status();
                ScriptOps.m_MainForm.CalibConfig.ResetTheTimeUnitReportOfRadarDevice3Status();
                ScriptOps.m_MainForm.CalibConfig.ResetTheRunTimeReportOfRadarDevice3Status();
                ScriptOps.m_MainForm.CalibConfig.ResetTheRFInitCalibReportOfRadarDevice3Status();
                ScriptOps.m_MainForm.ContStreamingTab.ResetMeasureTxPowerReportOfRadarDevice3Status();
                ScriptOps.m_MainForm.RFStatusTab.ResetMeasurePDPowerReportOfRadarDevice3Status();
            }
            else if ((GlobalRef.g_RadarDeviceId & 8U) == 8U)
            {
                ScriptOps.m_MainForm.ConnectTab.clrMssDev4FwVersion();
                ScriptOps.m_MainForm.ConnectTab.m00001f();
                ScriptOps.m_MainForm.ConnectTab.clrRadarDevice4Status();
                ScriptOps.m_MainForm.CalibConfig.ResetTheTimeUnitReportOfRadarDevice4Status();
                ScriptOps.m_MainForm.CalibConfig.ResetTheRunTimeReportOfRadarDevice4Status();
                ScriptOps.m_MainForm.CalibConfig.ResetTheRFInitCalibReportOfRadarDevice4Status();
                ScriptOps.m_MainForm.ContStreamingTab.ResetMeasureTxPowerReportOfRadarDevice4Status();
                ScriptOps.m_MainForm.RFStatusTab.ResetMeasurePDPowerReportOfRadarDevice4Status();
            }
            ScriptOps.m_MainForm.RFStatusTab.m000064();
            ScriptOps.m_MainForm.RFStatusTab.clrCharReportConfigData();
            ScriptOps.m_MainForm.RFStatusTab.clrCalibDisConfigData();
            ScriptOps.m_MainForm.RFStatusTab.clrCalibMonData();
            ScriptOps.m_MainForm.StaticConfigTab.clrRFInitDoneStatus();
            ScriptOps.m_MainForm.ChirpConfigTab.iResetTriggerBtnText();
            ScriptOps.m_MainForm.PMICTab.clrPMIConfigurationAfterReset();
            ScriptOps.m_MainForm.MonitoringConfig.clrRFDigitalSystemLatentFaultReport();
            ScriptOps.m_MainForm.MonitoringConfig.m00003d();
            ScriptOps.m_MainForm.MonitoringConfig.m00003f();
            if (GlobalRef.g_NumOfRadarDevicesDetected == 1U)
            {
                ScriptOps.m_MainForm.StaticConfigTab.DisabletheCascadeMode();
                ScriptOps.m_MainForm.ChirpConfigTab.DisabletheTriggerSelect();
            }
            else
            {
                ScriptOps.m_MainForm.StaticConfigTab.EnabletheCascadeMode();
                ScriptOps.m_MainForm.ChirpConfigTab.EnabletheTriggerSelect();
            }
            if (GlobalRef.g_NtvRS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
            {
                GlobalRef.g_NtvRS232Connect[(int)GlobalRef.g_RadarDeviceIndex] = false;
                ScriptOps.m_MainForm.HandleBoardStatusChange(false);
            }
            if (GlobalRef.g_SpiConnect[(int)GlobalRef.g_RadarDeviceIndex])
            {
                GlobalRef.g_SpiConnect[(int)GlobalRef.g_RadarDeviceIndex] = false;
                ScriptOps.m_MainForm.ConnectTab.iSetSPIConnectBtnText(GlobalRef.g_RadarDeviceId, "SPI Connect");
                ScriptOps.m_MainForm.ConnectTab.iSetSPIConnectBtnTextColor(Color.Red);
                ScriptOps.m_MainForm.ConnectTab.iSetSPIRfEnblBtnText(GlobalRef.g_RadarDeviceId, "RF Power-up");
            }
            GlobalRef.g_BpmCmnConfig = false;
            ScriptOps.m_MainForm.RegOpeTab.m000061();
        }

        public void iResetComponentsAtSpiDiscnt(uint p0)
        {
            if (ScriptOps.m_MainForm.TestSourceTab.iGetEnableBtnText() == "Disable")
            {
                ScriptOps.m_MainForm.TestSourceTab.iSetEnableBtnText("Enable");
                m_TestSourceParams.TestSourceEnabled = false;
            }
            if (ScriptOps.m_MainForm.ChirpConfigTab.iGetFrameBtnText() == "Stop Frame")
            {
                iSetTrigFrame_Gui((ushort)GlobalRef.g_RadarDeviceId, true, false);
            }
            if (ScriptOps.m_MainForm.ContStreamingTab.iGetContStrBtnText() == "Disable")
            {
                ScriptOps.m_MainForm.ContStreamingTab.iSetContStrBtnText("Enable");
            }
            if (ScriptOps.m_MainForm.ChirpConfigTab.iGetRealTimeBtnText() == "Stop")
            {
                ScriptOps.m_MainForm.ChirpConfigTab.iSetRealTimeBtnText("Real Time");
                GlobalRef.g_RealTimeTrigVar = false;
            }
            if (p0 == 1U)
            {
                ScriptOps.m_MainForm.ConnectTab.clrMssFwVersion();
                ScriptOps.m_MainForm.ConnectTab.m00001c();
                ScriptOps.m_MainForm.ConnectTab.clrRadarDevice1Status();
                ScriptOps.m_MainForm.ConnectTab.clrAllStatusofConnectTab();
                ScriptOps.m_MainForm.CalibConfig.ResetTheTimeUnitReportOfRadarDevice1Status();
                ScriptOps.m_MainForm.CalibConfig.ResetTheRunTimeReportOfRadarDevice1Status();
                ScriptOps.m_MainForm.CalibConfig.ResetTheRFInitCalibReportOfRadarDevice1Status();
                ScriptOps.m_MainForm.ContStreamingTab.ResetMeasureTxPowerReportOfRadarDevice1Status();
                ScriptOps.m_MainForm.RFStatusTab.ResetMeasurePDPowerReportOfRadarDevice1Status();
            }
            else if (p0 == 2U)
            {
                ScriptOps.m_MainForm.ConnectTab.clrMssDev2FwVersion();
                ScriptOps.m_MainForm.ConnectTab.m00001d();
                ScriptOps.m_MainForm.ConnectTab.clrRadarDevice2Status();
                ScriptOps.m_MainForm.CalibConfig.ResetTheTimeUnitReportOfRadarDevice2Status();
                ScriptOps.m_MainForm.CalibConfig.ResetTheRunTimeReportOfRadarDevice2Status();
                ScriptOps.m_MainForm.CalibConfig.ResetTheRFInitCalibReportOfRadarDevice2Status();
                ScriptOps.m_MainForm.ContStreamingTab.ResetMeasureTxPowerReportOfRadarDevice2Status();
                ScriptOps.m_MainForm.RFStatusTab.ResetMeasurePDPowerReportOfRadarDevice2Status();
            }
            else if (p0 == 4U)
            {
                ScriptOps.m_MainForm.ConnectTab.clrMssDev3FwVersion();
                ScriptOps.m_MainForm.ConnectTab.m00001e();
                ScriptOps.m_MainForm.ConnectTab.clrRadarDevice3Status();
                ScriptOps.m_MainForm.CalibConfig.ResetTheTimeUnitReportOfRadarDevice3Status();
                ScriptOps.m_MainForm.CalibConfig.ResetTheRunTimeReportOfRadarDevice3Status();
                ScriptOps.m_MainForm.CalibConfig.ResetTheRFInitCalibReportOfRadarDevice3Status();
                ScriptOps.m_MainForm.ContStreamingTab.ResetMeasureTxPowerReportOfRadarDevice3Status();
                ScriptOps.m_MainForm.RFStatusTab.ResetMeasurePDPowerReportOfRadarDevice3Status();
            }
            else if (p0 == 8U)
            {
                ScriptOps.m_MainForm.ConnectTab.clrMssDev4FwVersion();
                ScriptOps.m_MainForm.ConnectTab.m00001f();
                ScriptOps.m_MainForm.ConnectTab.clrRadarDevice4Status();
                ScriptOps.m_MainForm.CalibConfig.ResetTheTimeUnitReportOfRadarDevice4Status();
                ScriptOps.m_MainForm.CalibConfig.ResetTheRunTimeReportOfRadarDevice4Status();
                ScriptOps.m_MainForm.CalibConfig.ResetTheRFInitCalibReportOfRadarDevice4Status();
                ScriptOps.m_MainForm.ContStreamingTab.ResetMeasureTxPowerReportOfRadarDevice4Status();
                ScriptOps.m_MainForm.RFStatusTab.ResetMeasurePDPowerReportOfRadarDevice4Status();
            }
            ScriptOps.m_MainForm.RFStatusTab.m000064();
            ScriptOps.m_MainForm.RFStatusTab.clrCharReportConfigData();
            ScriptOps.m_MainForm.RFStatusTab.clrCalibDisConfigData();
            ScriptOps.m_MainForm.RFStatusTab.clrCalibMonData();
            ScriptOps.m_MainForm.StaticConfigTab.clrRFInitDoneStatus();
            ScriptOps.m_MainForm.ChirpConfigTab.iResetTriggerBtnText();
            ScriptOps.m_MainForm.PMICTab.clrPMIConfigurationAfterReset();
            ScriptOps.m_MainForm.MonitoringConfig.clrRFDigitalSystemLatentFaultReport();
            ScriptOps.m_MainForm.MonitoringConfig.m00003d();
            ScriptOps.m_MainForm.MonitoringConfig.m00003f();
            if (!GlobalRef.g_NtvRS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
            {
                ScriptOps.m_MainForm.RegOpeTab.m000061();
            }
            GlobalRef.g_BpmCmnConfig = false;
        }

        public int iDbgSignal_Impl(int SelectedValue)
        {
            int num = -1;
            string full_command = "";
            string full_command2 = string.Format("ar1.DebugSignal({0})", new object[]
            {
                SelectedValue
            });
            m_GuiManager.RecordLog(99, full_command2);
            switch (SelectedValue)
            {
                case 0:
                    num = m_TsWrapper.WriteRegister(1126175756U, 16, 26, 0U);
                    if (num == 0)
                    {
                        full_command = string.Format("NO MUX : Passed", new object[0]);
                    }
                    else
                    {
                        full_command = string.Format("NO MUX : Failed", new object[0]);
                    }
                    break;
                case 1:
                    num = m_TsWrapper.WriteRegister(1126175824U, 22, 22, 0U);
                    num = m_TsWrapper.WriteRegister(1126175756U, 16, 26, 19U);
                    if (num == 0)
                    {
                        full_command = string.Format("APLL OUT : Passed", new object[0]);
                    }
                    else
                    {
                        full_command = string.Format("APLL OUT : Failed", new object[0]);
                    }
                    break;
                case 2:
                    num = m_TsWrapper.WriteRegister(1126175824U, 22, 22, 1U);
                    num = m_TsWrapper.WriteRegister(1126175756U, 16, 26, 35U);
                    if (num == 0)
                    {
                        full_command = string.Format("SYNTH OUT(2.5G) : Passed", new object[0]);
                    }
                    else
                    {
                        full_command = string.Format("SYNTH OUT(2.5G) : Failed", new object[0]);
                    }
                    break;
                case 3:
                    num = m_TsWrapper.WriteRegister(1126175824U, 22, 22, 1U);
                    num = m_TsWrapper.WriteRegister(1126175756U, 16, 26, 67U);
                    if (num == 0)
                    {
                        full_command = string.Format("SYNTH OUT(5G) : Passed", new object[0]);
                    }
                    else
                    {
                        full_command = string.Format("SYNTH OUT(5G) : Failed", new object[0]);
                    }
                    break;
            }
            m_GuiManager.RecordLog(99, full_command);
            return num;
        }

        public int m00008a(int SelectedValue)
        {
            int num = -1;
            if (SelectedValue != 0)
            {
                if (SelectedValue == 1)
                {
                    num = m_TsWrapper.WriteRegister(4294962168U, 0, 31, 2212956947U);
                    num = m_TsWrapper.WriteRegister(4294962172U, 0, 31, 2510615008U);
                    num = m_TsWrapper.WriteRegister(4294959712U, 0, 31, 24833U);
                    num = m_TsWrapper.WriteRegister(4294959728U, 0, 31, 48U);
                    num = m_TsWrapper.WriteRegister(4294961668U, 0, 31, 68U);
                    num = m_TsWrapper.WriteRegister(4294962168U, 0, 31, 0U);
                    num = m_TsWrapper.WriteRegister(4294962172U, 0, 31, 0U);
                }
            }
            else
            {
                num = m_TsWrapper.WriteRegister(4294962168U, 0, 31, 2212956947U);
                num = m_TsWrapper.WriteRegister(4294962172U, 0, 31, 2510615008U);
                num = m_TsWrapper.WriteRegister(4294961668U, 0, 31, 129U);
                num = m_TsWrapper.WriteRegister(4294959728U, 0, 31, 0U);
                num = m_TsWrapper.WriteRegister(4294959712U, 0, 31, 0U);
                num = m_TsWrapper.WriteRegister(4294962168U, 0, 31, 0U);
                num = m_TsWrapper.WriteRegister(4294962172U, 0, 31, 0U);
            }
            string full_command;
            if (num == 0)
            {
                full_command = string.Format("Passed", new object[0]);
            }
            else
            {
                full_command = string.Format("Failed", new object[0]);
            }
            m_GuiManager.RecordLog(99, full_command);
            return num;
        }

        public void UpdateDevicesDetected(int numDevices)
        {
            m_RadarDeviceModeConfigParams.NumberOfRadarDevicesDetected = (ushort)numDevices;
            GlobalRef.g_NumOfRadarDevicesDetected = (uint)numDevices;
            ScriptOps.m_MainForm.ConnectTab.FindTheNumberOfRadarDevicesViaSop(numDevices);
        }

        public int iChangeSop_Impl()
        {
            int num = -1;
            if (m_RadarDeviceModeConfigParams.NumberOfRadarDevicesDetected <= 1)
            {
                ScriptOps.m_MainForm.ConnectTab.UpdateData();
                ScriptOps.m_MainForm.ConnectTab.SetConnectRadar1ReadyState();
                ScriptOps.m_MainForm.ConnectTab.SetSOPReadyState();
                GlobalRef.g_RadarDeviceId = 1U;
                Imports.RadarLinkImpl_setSystemType(1);
            }
            else
            {
                if ((GlobalRef.g_4ChipCascade || GlobalRef.g_2ChipCascade) && !GlobalRef.g_TDACaptureCardConnectStatus)
                {
                    MessageBox.Show("Please connect to the TDA first!");
                    return -1;
                }
                if ((GlobalRef.g_RadarDeviceId & 1U) == 1U)
                {
                    ScriptOps.m_MainForm.ConnectTab.UpdateData();
                }
                else if ((GlobalRef.g_RadarDeviceId & 2U) == 2U || (GlobalRef.g_RadarDeviceId & 4U) == 4U || (GlobalRef.g_RadarDeviceId & 8U) == 8U)
                {
                    ScriptOps.m_MainForm.ConnectTab.UpdateDataRadarDevice2();
                }
                else
                {
                    if (GlobalRef.g_RadarDeviceId == 0U)
                    {
                        MessageBox.Show("Radar devices not selected!", "Error", MessageBoxButtons.OK, MessageBoxIcon.Hand);
                        return num;
                    }
                    MessageBox.Show("Please select single Radar device at time!", "Error", MessageBoxButtons.OK, MessageBoxIcon.Hand);
                    return num;
                }
            }
            if (m_RadarDeviceModeConfigParams.NumberOfRadarDevicesDetected <= 1)
            {
                if ((GlobalRef.g_CasCadeDeviceSpiConnect & 1U) == 1U)
                {
                    ScriptOps.m_MainForm.ConnectTab.iSPIConnectDisconnect();
                }
            }
            else if ((GlobalRef.g_RadarDeviceId & 1U) == 1U)
            {
                if ((GlobalRef.g_CasCadeDeviceSpiConnect & 1U) == 1U)
                {
                    ScriptOps.m_MainForm.ConnectTab.iSPIConnectDisconnect();
                }
            }
            else if ((GlobalRef.g_RadarDeviceId & 2U) == 2U)
            {
                if ((GlobalRef.g_CasCadeDeviceSpiConnect & 2U) == 2U)
                {
                    ScriptOps.m_MainForm.ConnectTab.iRadarDevice2SPIConnectDisconnect();
                }
            }
            else if ((GlobalRef.g_RadarDeviceId & 4U) == 4U)
            {
                if ((GlobalRef.g_CasCadeDeviceSpiConnect & 4U) == 4U)
                {
                    ScriptOps.m_MainForm.ConnectTab.iRadarDevice3SPIConnectDisconnect();
                }
            }
            else if ((GlobalRef.g_RadarDeviceId & 8U) == 8U && (GlobalRef.g_CasCadeDeviceSpiConnect & 8U) == 8U)
            {
                ScriptOps.m_MainForm.ConnectTab.iRadarDevice4SPIConnectDisconnect();
            }
            ScriptOps.m_MainForm.ConnectTab.iDisableConnectTabBtn();
            ScriptOps.m_MainForm.SetOvBtEnblTimer(true);
            if (m_RadarDeviceModeConfigParams.NumberOfRadarDevicesDetected <= 1)
            {
                if (!GlobalRef.g_OpnGpioCtrl)
                {
                    iGpioCtrl_Impl();
                }
                num = Imports.RadarLinkImpl_SOPControl(GlobalRef.g_RadarDeviceId & 1U, m_ConnectParams.SopMod);
            }
            else if ((GlobalRef.g_RadarDeviceId & 1U) == 1U)
            {
                num = Imports.RadarLinkImpl_SOPControl(GlobalRef.g_RadarDeviceId & 1U, m_ConnectParams.SopMod);
            }
            else if ((GlobalRef.g_RadarDeviceId & 2U) == 2U)
            {
                num = Imports.RadarLinkImpl_SOPControl(GlobalRef.g_RadarDeviceId & 2U, m_ConnectParams.SopMod);
            }
            else if ((GlobalRef.g_RadarDeviceId & 4U) == 4U)
            {
                num = Imports.RadarLinkImpl_SOPControl(GlobalRef.g_RadarDeviceId & 4U, m_ConnectParams.SopMod);
            }
            else if ((GlobalRef.g_RadarDeviceId & 8U) == 8U)
            {
                num = Imports.RadarLinkImpl_SOPControl(GlobalRef.g_RadarDeviceId & 8U, m_ConnectParams.SopMod);
            }
            Thread.Sleep(300);
            iFullReset_Impl();
            string full_command;
            if (m_RadarDeviceModeConfigParams.NumberOfRadarDevicesDetected <= 1)
            {
                full_command = string.Format("ar1.SOPControl({0})", new object[]
                {
                    m_ConnectParams.SopMod
                });
                if (GlobalRef.g_OpnGpioCtrl)
                {
                    iGpioCtrl_Impl();
                }
            }
            else
            {
                full_command = string.Format("ar1.SOPControl_mult({0},{1})", new object[]
                {
                    GlobalRef.g_RadarDeviceId,
                    m_ConnectParams.SopMod
                });
            }
            m_GuiManager.RecordLog(99, full_command);
            if (num == 0)
            {
                string full_command2 = string.Format("Status: Passed", new object[0]);
                m_GuiManager.RecordLog(99, full_command2);
                ScriptOps.m_MainForm.ConnectTab.ChangeControlsFrSop(m_ConnectParams.SopMod);
            }
            else
            {
                string msg = string.Format("Status: Failed, Error Type: {0}", new object[]
                {
                    GetErrorType(num)
                });
                GlobalRef.LuaWrapper.PrintError(msg);
            }
            ScriptOps.m_MainForm.ConnectTab.iEnableConnectTabBtn();
            ScriptOps.m_MainForm.SetOvBtEnblTimer(false);
            return num;
        }

        public int iDCA1000_ChangeSop_Impl()
        {
            int result = -1;
            if (m_RadarDeviceModeConfigParams.NumberOfRadarDevicesDetected <= 1)
            {
                ScriptOps.m_MainForm.ConnectTab.UpdateData();
                ScriptOps.m_MainForm.ConnectTab.SetConnectRadar1ReadyState();
                ScriptOps.m_MainForm.ConnectTab.SetSOPReadyState();
                GlobalRef.g_RadarDeviceId = 1U;
            }
            else
            {
                if (GlobalRef.g_RadarDeviceId == 3U || GlobalRef.g_RadarDeviceId == 7U || GlobalRef.g_RadarDeviceId == 15U)
                {
                    MessageBox.Show("Please select single Radar device at time!", "Error", MessageBoxButtons.OK, MessageBoxIcon.Hand);
                    return result;
                }
                if ((GlobalRef.g_RadarDeviceId & 1U) == 1U)
                {
                    ScriptOps.m_MainForm.ConnectTab.UpdateData();
                }
                else if ((GlobalRef.g_RadarDeviceId & 2U) == 2U)
                {
                    ScriptOps.m_MainForm.ConnectTab.UpdateDataRadarDevice2();
                }
                else if ((GlobalRef.g_RadarDeviceId & 4U) == 4U)
                {
                    ScriptOps.m_MainForm.ConnectTab.UpdateDataRadarDevice2();
                }
                else if ((GlobalRef.g_RadarDeviceId & 8U) == 8U)
                {
                    ScriptOps.m_MainForm.ConnectTab.UpdateDataRadarDevice2();
                }
                if (GlobalRef.g_RadarDeviceId == 0U)
                {
                    MessageBox.Show("Radar devices not selected!", "Error", MessageBoxButtons.OK, MessageBoxIcon.Hand);
                    return result;
                }
            }
            if (m_RadarDeviceModeConfigParams.NumberOfRadarDevicesDetected <= 1)
            {
                if (GlobalRef.g_SpiConnect[0])
                {
                    ScriptOps.m_MainForm.ConnectTab.iSPIConnectDisconnect();
                }
            }
            else if (GlobalRef.g_SpiConnect[(int)GlobalRef.g_RadarDeviceIndex])
            {
                if ((GlobalRef.g_RadarDeviceId & 1U) == 1U)
                {
                    ScriptOps.m_MainForm.ConnectTab.iSPIConnectDisconnect();
                }
                else if ((GlobalRef.g_RadarDeviceId & 2U) == 2U || (GlobalRef.g_RadarDeviceId & 4U) == 4U || (GlobalRef.g_RadarDeviceId & 8U) == 8U)
                {
                }
            }
            ScriptOps.m_MainForm.ConnectTab.iDisableConnectTabBtn();
            ScriptOps.m_MainForm.SetOvBtEnblTimer(true);
            if (!GlobalRef.g_OpnGpioCtrl)
            {
                iGpioCtrl_Impl();
            }
            iDCA1000_FullReset_Impl();
            Thread.Sleep(300);
            if (GlobalRef.g_OpnGpioCtrl)
            {
                result = iGpioCtrl_Impl();
            }
            ScriptOps.m_MainForm.ConnectTab.iEnableConnectTabBtn();
            ScriptOps.m_MainForm.SetOvBtEnblTimer(false);
            return result;
        }

        public int iSetNError_Impl()
        {
            int num = -1;
            ScriptOps.m_MainForm.ConnectTab.UpdateData();
            string full_command;
            if (1 == Imports.RadarLinkImpl_IsConnected())
            {
                full_command = string.Format("ar1.WriteNErrIn({0})", new object[]
                {
                    0m
                });
                m_GuiManager.RecordLog(99, full_command);
                if (num == 0)
                {
                    string full_command2 = string.Format("Status: Passed", new object[0]);
                    m_GuiManager.RecordLog(99, full_command2);
                }
                else
                {
                    string msg = string.Format("Status: Failed, Error Type: {0}", new object[]
                    {
                        GetErrorType(num)
                    });
                    GlobalRef.LuaWrapper.PrintError(msg);
                }
                return num;
            }
            full_command = string.Format("Device Not Connected", new object[0]);
            m_GuiManager.RecordLog(99, full_command);
            return -1;
        }

        public int iBoardCtrl_Impl()
        {
            int num = -1;
            if (m_RadarDeviceModeConfigParams.NumberOfRadarDevicesDetected <= 1)
            {
                ScriptOps.m_MainForm.ConnectTab.UpdateData();
            }
            else if ((GlobalRef.g_RadarDeviceId & 1U) == 1U)
            {
                ScriptOps.m_MainForm.ConnectTab.UpdateData();
            }
            else if ((GlobalRef.g_RadarDeviceId & 2U) == 2U)
            {
                ScriptOps.m_MainForm.ConnectTab.UpdateDataRadarDevice2();
            }
            else if ((GlobalRef.g_RadarDeviceId & 4U) == 4U)
            {
                ScriptOps.m_MainForm.ConnectTab.UpdateDataRadarDevice3();
            }
            else if ((GlobalRef.g_RadarDeviceId & 8U) == 8U)
            {
                ScriptOps.m_MainForm.ConnectTab.UpdateDataRadarDevice4();
            }
            string full_command;
            if (!GlobalRef.g_OpnBrdCtrl)
            {
                if (m_RadarDeviceModeConfigParams.NumberOfRadarDevicesDetected <= 1)
                {
                    num = Imports.RadarLinkImpl_OpenBoardControlIf(GlobalRef.g_RadarDeviceId & 1U);
                }
                else if ((GlobalRef.g_RadarDeviceId & 1U) == 1U)
                {
                    num = Imports.RadarLinkImpl_OpenBoardControlIf(GlobalRef.g_RadarDeviceId & 1U);
                }
                else if ((GlobalRef.g_RadarDeviceId & 2U) == 2U)
                {
                    num = Imports.RadarLinkImpl_OpenBoardControlIf(GlobalRef.g_RadarDeviceId & 2U);
                }
                else if ((GlobalRef.g_RadarDeviceId & 4U) == 4U)
                {
                    num = Imports.RadarLinkImpl_OpenBoardControlIf(GlobalRef.g_RadarDeviceId & 4U);
                }
                else if ((GlobalRef.g_RadarDeviceId & 8U) == 8U)
                {
                    num = Imports.RadarLinkImpl_OpenBoardControlIf(GlobalRef.g_RadarDeviceId & 8U);
                }
                if (m_RadarDeviceModeConfigParams.NumberOfRadarDevicesDetected <= 1)
                {
                    full_command = string.Format("Opening Board Control Port()", new object[0]);
                }
                else
                {
                    full_command = string.Format("Opening Board Control Port({0})", new object[]
                    {
                        GlobalRef.g_RadarDeviceId
                    });
                }
                if (num == 0)
                {
                    GlobalRef.g_OpnBrdCtrl = true;
                }
            }
            else
            {
                if (m_RadarDeviceModeConfigParams.NumberOfRadarDevicesDetected <= 1)
                {
                    num = Imports.RadarLinkImpl_CloseBoardControlIf(GlobalRef.g_RadarDeviceId & 1U);
                }
                else if ((GlobalRef.g_RadarDeviceId & 1U) == 1U)
                {
                    num = Imports.RadarLinkImpl_CloseBoardControlIf(GlobalRef.g_RadarDeviceId & 1U);
                }
                else if ((GlobalRef.g_RadarDeviceId & 2U) == 2U)
                {
                    num = Imports.RadarLinkImpl_CloseBoardControlIf(GlobalRef.g_RadarDeviceId & 2U);
                }
                else if ((GlobalRef.g_RadarDeviceId & 4U) == 4U)
                {
                    num = Imports.RadarLinkImpl_CloseBoardControlIf(GlobalRef.g_RadarDeviceId & 4U);
                }
                else if ((GlobalRef.g_RadarDeviceId & 8U) == 8U)
                {
                    num = Imports.RadarLinkImpl_CloseBoardControlIf(GlobalRef.g_RadarDeviceId & 8U);
                }
                if (m_RadarDeviceModeConfigParams.NumberOfRadarDevicesDetected <= 1)
                {
                    full_command = string.Format("Closing Board Control Port()", new object[0]);
                }
                else
                {
                    full_command = string.Format("Closing Board Control Port({0})", new object[]
                    {
                        GlobalRef.g_RadarDeviceId
                    });
                }
                if (num == 0)
                {
                    GlobalRef.g_OpnBrdCtrl = false;
                }
            }
            m_GuiManager.RecordLog(99, full_command);
            if (num == 0)
            {
                string full_command2 = string.Format("Status: Passed", new object[0]);
                m_GuiManager.RecordLog(99, full_command2);
            }
            else
            {
                string full_command3 = string.Format("Status: Failed to open/close BoardControl, Error value: {0}", new object[]
                {
                    num
                });
                m_GuiManager.RecordLog(99, full_command3);
            }
            return num;
        }

        public int iGpioCtrl_Impl()
        {
            int num = -1;
            if (m_RadarDeviceModeConfigParams.NumberOfRadarDevicesDetected <= 1)
            {
                ScriptOps.m_MainForm.ConnectTab.UpdateData();
            }
            else if ((GlobalRef.g_RadarDeviceId & 1U) == 1U)
            {
                ScriptOps.m_MainForm.ConnectTab.UpdateData();
            }
            else if ((GlobalRef.g_RadarDeviceId & 2U) == 2U)
            {
                ScriptOps.m_MainForm.ConnectTab.UpdateDataRadarDevice2();
            }
            else if ((GlobalRef.g_RadarDeviceId & 4U) == 4U)
            {
                ScriptOps.m_MainForm.ConnectTab.UpdateDataRadarDevice3();
            }
            else if ((GlobalRef.g_RadarDeviceId & 8U) == 8U)
            {
                ScriptOps.m_MainForm.ConnectTab.UpdateDataRadarDevice4();
            }
            string full_command;
            if (!GlobalRef.g_OpnGpioCtrl)
            {
                if (m_RadarDeviceModeConfigParams.NumberOfRadarDevicesDetected <= 1)
                {
                    num = Imports.RadarLinkImpl_OpenGenericGpioIf(GlobalRef.g_RadarDeviceId & 1U);
                }
                else if ((GlobalRef.g_RadarDeviceId & 1U) == 1U)
                {
                    num = Imports.RadarLinkImpl_OpenGenericGpioIf(GlobalRef.g_RadarDeviceId & 1U);
                }
                else if ((GlobalRef.g_RadarDeviceId & 2U) == 2U)
                {
                    num = Imports.RadarLinkImpl_OpenGenericGpioIf(GlobalRef.g_RadarDeviceId & 2U);
                }
                else if ((GlobalRef.g_RadarDeviceId & 4U) == 4U)
                {
                    num = Imports.RadarLinkImpl_OpenGenericGpioIf(GlobalRef.g_RadarDeviceId & 4U);
                }
                else if ((GlobalRef.g_RadarDeviceId & 8U) == 8U)
                {
                    num = Imports.RadarLinkImpl_OpenGenericGpioIf(GlobalRef.g_RadarDeviceId & 8U);
                }
                if (m_RadarDeviceModeConfigParams.NumberOfRadarDevicesDetected <= 1)
                {
                    full_command = string.Format("Opening Gpio Control Port()", new object[0]);
                }
                else
                {
                    full_command = string.Format("Opening Gpio Control Port({0})", new object[]
                    {
                        GlobalRef.g_RadarDeviceId
                    });
                }
                if (num == 0)
                {
                    GlobalRef.g_OpnGpioCtrl = true;
                }
            }
            else
            {
                if (m_RadarDeviceModeConfigParams.NumberOfRadarDevicesDetected <= 1)
                {
                    num = Imports.RadarLinkImpl_CloseGenericGpioIf(GlobalRef.g_RadarDeviceId & 1U);
                }
                else if ((GlobalRef.g_RadarDeviceId & 1U) == 1U)
                {
                    num = Imports.RadarLinkImpl_CloseGenericGpioIf(GlobalRef.g_RadarDeviceId & 1U);
                }
                else if ((GlobalRef.g_RadarDeviceId & 2U) == 2U)
                {
                    num = Imports.RadarLinkImpl_CloseGenericGpioIf(GlobalRef.g_RadarDeviceId & 2U);
                }
                else if ((GlobalRef.g_RadarDeviceId & 4U) == 4U)
                {
                    num = Imports.RadarLinkImpl_CloseGenericGpioIf(GlobalRef.g_RadarDeviceId & 4U);
                }
                else if ((GlobalRef.g_RadarDeviceId & 8U) == 8U)
                {
                    num = Imports.RadarLinkImpl_CloseGenericGpioIf(GlobalRef.g_RadarDeviceId & 8U);
                }
                if (m_RadarDeviceModeConfigParams.NumberOfRadarDevicesDetected <= 1)
                {
                    full_command = string.Format("Closing Gpio Control Port()", new object[0]);
                }
                else
                {
                    full_command = string.Format("Closing Gpio Control Port({0})", new object[]
                    {
                        GlobalRef.g_RadarDeviceId
                    });
                }
                if (num == 0)
                {
                    GlobalRef.g_OpnGpioCtrl = false;
                }
            }
            m_GuiManager.RecordLog(99, full_command);
            if (num == 0)
            {
                string full_command2 = string.Format("Status: Passed", new object[0]);
                m_GuiManager.RecordLog(99, full_command2);
            }
            else
            {
                string msg = string.Format("Status: Failed to open/close GpioControl, Error Type: {0}", new object[]
                {
                    GetErrorType(num)
                });
                GlobalRef.LuaWrapper.PrintError(msg);
            }
            return num;
        }

        public static bool KeepTrying(int timeout, Func<bool> operation)
        {
            bool flag = false;
            int i = 0;
            while (i < timeout)
            {
                Thread.Sleep(1000);
                i += 1000;
                flag = operation();
                if (flag)
                {
                    break;
                }
            }
            return flag;
        }

        public bool spare_read()
        {
            uint num;
            m_TsWrapper.Calling_ReadAddr_Single(4294959848U, out num);
            return num == 0U;
        }

        private int iSPIEnableRf_Impl()
        {
            byte[] array = new byte[10];
            IntPtr inData = GCHandle.Alloc(array, GCHandleType.Pinned).AddrOfPinnedObject();
            int num = 0;
            ScriptOps.asyncEvent.bssPowerUpDone = (ScriptOps.asyncEvent.bssPowerUpDone & ~GlobalRef.g_RadarDeviceId);
            uint g_RadarDeviceId = GlobalRef.g_RadarDeviceId;
            ScriptOps.m_MainForm.ConnectTab.m00001a();
            GlobalRef.g_RadarDeviceId = g_RadarDeviceId;
            if (GlobalRef.g_AR2243Device && GlobalRef.g_SOPMode4Set == 1U && GlobalRef.g_2243SwapReset)
            {
                num = Imports.RadarLinkImpl_SwapResetAndPowerOn(GlobalRef.g_RadarDeviceId);
                if (num == 0)
                {
                    string full_command = string.Format("Device Restarted, Power On Async Event received", new object[0]);
                    m_GuiManager.RecordLog(1, full_command);
                }
                else
                {
                    string full_command2 = string.Format("Device Restart failed", new object[0]);
                    m_GuiManager.RecordLog(1, full_command2);
                }
            }
            if ((GlobalRef.g_CasCadeDeviceSpiConnect & 1U) == 1U || (GlobalRef.g_CasCadeDeviceSpiConnect & 2U) == 2U || (GlobalRef.g_CasCadeDeviceSpiConnect & 4U) == 4U || (GlobalRef.g_CasCadeDeviceSpiConnect & 8U) == 8U || GlobalRef.g_NtvRS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
            {
                if (m_RadarDeviceModeConfigParams.NumberOfRadarDevicesDetected <= 1)
                {
                    string full_command3 = string.Format("ar1.RfEnable()", new object[0]);
                    m_GuiManager.RecordLog(1, full_command3);
                }
                else
                {
                    string full_command4 = string.Format("ar1.RfEnable_mult({0})", new object[]
                    {
                        GlobalRef.g_RadarDeviceId
                    });
                    m_GuiManager.RecordLog(1, full_command4);
                }
                num = Imports.RadarLinkImpl_RfEnable(GlobalRef.g_RadarDeviceId);
                if (num == 0)
                {
                    if ((GlobalRef.g_RadarDeviceId & 1U) == 1U)
                    {
                        ScriptOps.m_MainForm.ConnectTab.iSetSPIRfEnblBtnText(1U, "RF Powered-up (6)");
                        RFPowerUp[0] = 1;
                    }
                    if ((GlobalRef.g_RadarDeviceId & 2U) == 2U)
                    {
                        ScriptOps.m_MainForm.ConnectTab.iSetSPIRfEnblBtnText(2U, "RF Powered-up (2)");
                        RFPowerUp[1] = 1;
                    }
                    if ((GlobalRef.g_RadarDeviceId & 4U) == 4U)
                    {
                        ScriptOps.m_MainForm.ConnectTab.iSetSPIRfEnblBtnText(4U, "RF Powered-up (3)");
                        RFPowerUp[2] = 1;
                    }
                    if ((GlobalRef.g_RadarDeviceId & 8U) == 8U)
                    {
                        ScriptOps.m_MainForm.ConnectTab.iSetSPIRfEnblBtnText(8U, "RF Powered-up (4)");
                        RFPowerUp[3] = 1;
                    }
                    string full_command5 = string.Format("Status: Passed", new object[0]);
                    m_GuiManager.RecordLog(1, full_command5);
                }
                else
                {
                    string msg = string.Format("Status: Failed, Error Type: {0}", new object[]
                    {
                        GetErrorType(num)
                    });
                    GlobalRef.LuaWrapper.PrintError(msg);
                }
                if (GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex] && iRs232ConnectDisconnect_impl() == 0 && !GlobalRef.g_NtvRS232Connect[(int)GlobalRef.g_RadarDeviceIndex] && m_GuiManager.DllOps.iConnect(1U, 0U) == 0)
                {
                    string full_command6 = string.Format("Debug Port Reconnected!", new object[0]);
                    m_GuiManager.RecordLog(9, full_command6);
                    ScriptOps.KeepTrying(2000, new Func<bool>(spare_read));
                    ScriptOps.KeepTrying(3000, new Func<bool>(spare_read));
                }
                int num2 = 0;
                while ((ScriptOps.asyncEvent.bssPowerUpDone & GlobalRef.g_RadarDeviceId) != GlobalRef.g_RadarDeviceId)
                {
                    Thread.Sleep(100);
                    num2++;
                    if (num2 > 40)
                    {
                        string msg2 = string.Format("BSS Power Up async event was not received!", new object[0]);
                        GlobalRef.LuaWrapper.PrintError(msg2);
                        return -1;
                    }
                }
                if ((GlobalRef.g_CasCadeDeviceSpiConnect & 1U) == 1U || (GlobalRef.g_CasCadeDeviceSpiConnect & 2U) == 2U || (GlobalRef.g_CasCadeDeviceSpiConnect & 4U) == 4U || (GlobalRef.g_CasCadeDeviceSpiConnect & 8U) == 8U || GlobalRef.g_NtvRS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
                {
                    ScriptOps.m_MainForm.ConnectTab.iSetFwVerInvoke();
                }
            }
            else
            {
                ScriptOps.m_MainForm.ConnectTab.ShowMessage("Not Connected.", "Warning");
            }
            if ((num == 0 && ((GlobalRef.g_CasCadeDeviceSpiConnect & 1U) == 1U || (GlobalRef.g_CasCadeDeviceSpiConnect & 2U) == 2U || (GlobalRef.g_CasCadeDeviceSpiConnect & 4U) == 4U || (GlobalRef.g_CasCadeDeviceSpiConnect & 8U) == 8U)) || GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
            {
                num = Imports.RadarLinkImpl_GetStaticCharData(GlobalRef.g_RadarDeviceId, inData);
                if ((num == 0 && ((GlobalRef.g_CasCadeDeviceSpiConnect & 1U) == 1U || (GlobalRef.g_CasCadeDeviceSpiConnect & 2U) == 2U || (GlobalRef.g_CasCadeDeviceSpiConnect & 4U) == 4U || (GlobalRef.g_CasCadeDeviceSpiConnect & 8U) == 8U)) || GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
                {
                    string.Format("Status: Passed", new object[0]);
                }
                else
                {
                    string msg3 = string.Format("Status: Failed, Error Type: {0}", new object[]
                    {
                        GetErrorType(num)
                    });
                    GlobalRef.LuaWrapper.PrintError(msg3);
                }
                ushort num3 = (ushort)((int)array[1] << 8 | (int)array[0]);
                ushort value = (ushort)((int)array[3] << 8 | (int)array[2]);
                double num4 = (double)((ushort)((int)array[9] << 8 | (int)array[8]));
                ushort num5 = (ushort)((int)array[5] << 8 | (int)array[4]);
                float value2 = (float)(num4 / 10.0);
                if (num3 == 0)
                {
                    ScriptOps.m_MainForm.RFStatusTab.SetStaticDataprocessTypeinGUI("WEAK");
                }
                else if (num3 == 1)
                {
                    ScriptOps.m_MainForm.RFStatusTab.SetStaticDataprocessTypeinGUI("NOMINAL");
                }
                else if (num3 == 2)
                {
                    ScriptOps.m_MainForm.RFStatusTab.SetStaticDataprocessTypeinGUI("STRONG");
                }
                else
                {
                    ScriptOps.m_MainForm.RFStatusTab.SetStaticDataprocessTypeinGUI("ERROR");
                }
                ScriptOps.m_MainForm.RFStatusTab.SetTStaticDataRefClkFreqinGUI(Convert.ToString(value) + " MHz");
                if (num5 == 1)
                {
                    ScriptOps.m_MainForm.RFStatusTab.SetStaticDataapllCalStatusinGUI("SUCCESS");
                }
                else if (num5 == 0)
                {
                    ScriptOps.m_MainForm.RFStatusTab.SetStaticDataapllCalStatusinGUI("FAIL");
                }
                else
                {
                    ScriptOps.m_MainForm.RFStatusTab.SetStaticDataapllCalStatusinGUI("ERROR");
                }
                ScriptOps.m_MainForm.RFStatusTab.SetStaticDataapllClkFreqinGUI(Convert.ToString(value2) + " MHz");
            }
            ScriptOps.m_MainForm.RFStatusTab.EnableDisbleBSSBootUpDataWithRespectiveRadarDevices(m_RadarDeviceModeConfigParams.NumberOfRadarDevicesDetected);
            ScriptOps.m_MainForm.RFStatusTab.EnableDisbleGPADCDataWithRespectiveRadarDevices(m_RadarDeviceModeConfigParams.NumberOfRadarDevicesDetected);
            ScriptOps.m_MainForm.RFStatusTab.EnableDisbleRFTempertureReportWithRespectiveRadarDevices(m_RadarDeviceModeConfigParams.NumberOfRadarDevicesDetected);
            ScriptOps.m_MainForm.CalibConfig.EnableDisbleRFInitCalibStatusWithRespectiveRadarDevices(m_RadarDeviceModeConfigParams.NumberOfRadarDevicesDetected);
            ScriptOps.m_MainForm.CalibConfig.EnableDisbleRunTimeCalibStatusWithRespectiveRadarDevices(m_RadarDeviceModeConfigParams.NumberOfRadarDevicesDetected);
            ScriptOps.m_MainForm.CalibConfig.EnableDisbleTimeUnitStatusReportWithRespectiveRadarDevices(m_RadarDeviceModeConfigParams.NumberOfRadarDevicesDetected);
            ScriptOps.m_MainForm.ClibTab.EnableDisbleRFTemperatureDataWithRespectiveRadarDevices(m_RadarDeviceModeConfigParams.NumberOfRadarDevicesDetected);
            ScriptOps.m_MainForm.ContStreamingTab.EnableDisbleMeasureTxPowerStatusWithRespectiveRadarDevices(m_RadarDeviceModeConfigParams.NumberOfRadarDevicesDetected);
            ScriptOps.m_MainForm.RFStatusTab.EnableDisbleMeasurePDPowerStatusWithRespectiveRadarDevices(m_RadarDeviceModeConfigParams.NumberOfRadarDevicesDetected);
            ScriptOps.m_MainForm.BpmConfigTab.DisablePerChirpPhaseShifterFor14XXARDevice();
            ScriptOps.m_MainForm.AdvanceFrameConfigTab.EnableDisableSubFramesBasedOnRadarDeviceType();
            return num;
        }

        public void SpiSetBSSPatchVersion()
        {
            int num = 0;
            int num2 = (int)GlobalRef.g_RadarDeviceId;
            do
            {
                if ((num2 & 1 << num) != 0)
                {
                    bool flag = Imports.RadarLinkImpl_DeviceGetRfVersion(1U << num, out f0002d9) != 0;
                    Thread.Sleep(200);
                    if (!flag)
                    {
                        string empty = string.Empty;
                        string bssPatchVer = string.Empty;
                        string.Concat(new string[]
                        {
                            Convert.ToString(f0002d9.BSSFwVersionMajor),
                            ".",
                            Convert.ToString(f0002d9.BSSFwVersionMinor),
                            ".",
                            Convert.ToString(f0002d9.BSSFwVersioBuild),
                            ".",
                            Convert.ToString(f0002d9.BSSFwVersionDebug),
                            " (",
                            Convert.ToString(f0002d9.BSSFwVersionDay),
                            "/",
                            Convert.ToString(f0002d9.BSSFwVersionMonth),
                            "/",
                            Convert.ToString(f0002d9.BSSFwVersionYear),
                            ")"
                        });
                        if (f0002d9.BSSFwVersionPatchMajor == 0 && f0002d9.BSSFwVersionPatchMinor == 0 && (f0002d9.BSSFwPatchBuildDebugVersion & 240) == 0 && (f0002d9.BSSFwPatchBuildDebugVersion & 15) == 0 && f0002d9.BSSFwVersionPatchDay == 0 && f0002d9.BSSFwVersionPatchMonth == 0 && f0002d9.BSSFwVersionPatchYear == 0)
                        {
                            ScriptOps.m_MainForm.ConnectTab.setBssPatchFwVersion(1U << num, "NA");
                        }
                        else
                        {
                            bssPatchVer = string.Concat(new string[]
                            {
                                Convert.ToString(f0002d9.BSSFwVersionPatchMajor),
                                ".",
                                Convert.ToString(f0002d9.BSSFwVersionPatchMinor),
                                ".",
                                Convert.ToString(f0002d9.BSSFwPatchBuildDebugVersion >> 4 & 15),
                                ".",
                                Convert.ToString((int)(f0002d9.BSSFwPatchBuildDebugVersion & 15)),
                                " (",
                                Convert.ToString(f0002d9.BSSFwVersionPatchDay),
                                "/",
                                Convert.ToString(f0002d9.BSSFwVersionPatchMonth),
                                "/",
                                Convert.ToString(f0002d9.BSSFwVersionPatchYear),
                                ")"
                            });
                            ScriptOps.m_MainForm.ConnectTab.setBssPatchFwVersion(1U << num, bssPatchVer);
                        }
                    }
                    num2 &= ~(1 << num);
                }
                num++;
            }
            while (num2 != 0);
        }

        public void SpiSetMSSPatchVersion()
        {
            int num = 0;
            int num2 = (int)GlobalRef.g_RadarDeviceId;
            do
            {
                if ((num2 & 1 << num) != 0)
                {
                    bool flag = Imports.RadarLinkImpl_DeviceGetMssVersion(1U << num, out MSSFwVersionParam) != 0;
                    Thread.Sleep(200);
                    if (!flag)
                    {
                        string empty = string.Empty;
                        string mssPatchVer = string.Empty;
                        string.Concat(new string[]
                        {
                            Convert.ToString(MSSFwVersionParam.MSSFwVersionMajor),
                            ".",
                            Convert.ToString(MSSFwVersionParam.MSSFwVersionMinor),
                            ".",
                            Convert.ToString(MSSFwVersionParam.MSSFwVersioBuild),
                            ".",
                            Convert.ToString(MSSFwVersionParam.MSSFwVersionDebug),
                            " (",
                            Convert.ToString(MSSFwVersionParam.MSSFwVersionDay),
                            "/",
                            Convert.ToString(MSSFwVersionParam.MSSFwVersionMonth),
                            "/",
                            Convert.ToString(MSSFwVersionParam.MSSFwVersionYear),
                            ")"
                        });
                        if (MSSFwVersionParam.MSSFwVersionPatchMajor == 0 && MSSFwVersionParam.MSSFwVersionPatchMinor == 0 && (MSSFwVersionParam.MSSFwPatchBuildDebugVersion & 240) == 0 && (MSSFwVersionParam.MSSFwPatchBuildDebugVersion & 15) == 0 && MSSFwVersionParam.MSSFwVersionPatchDay == 0 && MSSFwVersionParam.MSSFwVersionPatchMonth == 0 && MSSFwVersionParam.MSSFwVersionPatchYear == 0)
                        {
                            mssPatchVer = string.Concat(new string[]
                            {
                                Convert.ToString(MSSFwVersionParam.MSSFwVersionPatchMajor),
                                ".",
                                Convert.ToString(MSSFwVersionParam.MSSFwVersionPatchMinor),
                                ".",
                                Convert.ToString(MSSFwVersionParam.MSSFwPatchBuildDebugVersion >> 4 & 15),
                                ".",
                                Convert.ToString((int)(MSSFwVersionParam.MSSFwPatchBuildDebugVersion & 15)),
                                "(",
                                Convert.ToString(MSSFwVersionParam.MSSFwVersionPatchDay),
                                "/",
                                Convert.ToString(MSSFwVersionParam.MSSFwVersionPatchMonth),
                                "/",
                                Convert.ToString(MSSFwVersionParam.MSSFwVersionPatchYear),
                                ")"
                            });
                            ScriptOps.m_MainForm.ConnectTab.setMssPatchFwVersion(1U << num, "NA");
                        }
                        else
                        {
                            mssPatchVer = string.Concat(new string[]
                            {
                                Convert.ToString(MSSFwVersionParam.MSSFwVersionPatchMajor),
                                ".",
                                Convert.ToString(MSSFwVersionParam.MSSFwVersionPatchMinor),
                                ".",
                                Convert.ToString(MSSFwVersionParam.MSSFwPatchBuildDebugVersion >> 4 & 15),
                                ".",
                                Convert.ToString((int)(MSSFwVersionParam.MSSFwPatchBuildDebugVersion & 15)),
                                " (",
                                Convert.ToString(MSSFwVersionParam.MSSFwVersionPatchDay),
                                "/",
                                Convert.ToString(MSSFwVersionParam.MSSFwVersionPatchMonth),
                                "/",
                                Convert.ToString(MSSFwVersionParam.MSSFwVersionPatchYear),
                                ")"
                            });
                            if (GlobalRef.g_AR2243Device)
                            {
                                ScriptOps.m_MainForm.ConnectTab.setMssPatchFwVersion(1U << num, "NA");
                            }
                            else
                            {
                                ScriptOps.m_MainForm.ConnectTab.setMssPatchFwVersion(1U << num, mssPatchVer);
                            }
                        }
                    }
                    num2 &= ~(1 << num);
                }
                num++;
            }
            while (num2 != 0);
        }

        public int iEnableTestSource_Impl()
        {
            iDisableTabButtons();
            ScriptOps.m_MainForm.SetOvBtEnblTimer(true);
            ScriptOps.m_MainForm.TestSourceTab.UpdateTestSourceData();
            int num;
            if (GlobalRef.g_TestSource == 1U && m_TestSourceParams.mode == 1)
            {
                if (GlobalRef.g_NtvRS232Connect[(int)GlobalRef.g_RadarDeviceIndex] && GlobalRef.g_CasCadeDeviceSpiConnect == 0U)
                {
                    num = m_TsWrapper.Calling_WriteAddr_Single(4294959848U, 1U);
                    if (m_GuiManager.DllOps.itempDisconnect(false) == 0)
                    {
                        string full_command = string.Format("Debug Port Disconnected", new object[0]);
                        m_GuiManager.RecordLog(0, full_command);
                        if (!GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
                        {
                            iRs232ConnectDisconnect_impl();
                        }
                    }
                }
                if (m_RadarDeviceModeConfigParams.NumberOfRadarDevicesDetected <= 1)
                {
                    string full_command2 = string.Format("ar1.EnableTestSource({0})", new object[]
                    {
                        m_TestSourceParams.mode
                    });
                    m_GuiManager.RecordLog(11, full_command2);
                }
                else
                {
                    string full_command3 = string.Format("ar1.EnableTestSource_mult({0},{1})", new object[]
                    {
                        GlobalRef.g_RadarDeviceId,
                        m_TestSourceParams.mode
                    });
                    m_GuiManager.RecordLog(11, full_command3);
                }
                num = Imports.RadarLinkImpl_EnableTestSource(GlobalRef.g_RadarDeviceId, 1, m_TestSourceParams.mode);
                if ((num == 0 && ((GlobalRef.g_CasCadeDeviceSpiConnect & 1U) == 1U || (GlobalRef.g_CasCadeDeviceSpiConnect & 2U) == 2U || (GlobalRef.g_CasCadeDeviceSpiConnect & 4U) == 4U || (GlobalRef.g_CasCadeDeviceSpiConnect & 8U) == 8U)) || GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
                {
                    m_TestSourceParams.TestSourceEnabled = true;
                    ScriptOps.m_MainForm.TestSourceTab.iSetEnableBtnText("Disable");
                    string full_command4 = string.Format("Status: Passed", new object[0]);
                    m_GuiManager.RecordLog(11, full_command4);
                    MatlabPostProcGuiInstance.MatlabPostProcImpl_EnableTestSource((double)m_TestSourceParams.mode, 1.0);
                    GlobalRef.g_TestSource = 1U;
                }
                else
                {
                    string msg = string.Format("Status: Failed, Error Type: {0}", new object[]
                    {
                        GetErrorType(num)
                    });
                    GlobalRef.LuaWrapper.PrintError(msg);
                }
            }
            else
            {
                if (m_RadarDeviceModeConfigParams.NumberOfRadarDevicesDetected <= 1)
                {
                    string full_command5 = string.Format("ar1.DisableTestSource({0})", new object[]
                    {
                        m_TestSourceParams.mode
                    });
                    m_GuiManager.RecordLog(11, full_command5);
                }
                else
                {
                    string full_command6 = string.Format("ar1.DisableTestSource_mult({0},{1})", new object[]
                    {
                        GlobalRef.g_RadarDeviceId,
                        m_TestSourceParams.mode
                    });
                    m_GuiManager.RecordLog(11, full_command6);
                }
                num = Imports.RadarLinkImpl_EnableTestSource(GlobalRef.g_RadarDeviceId, 0, m_TestSourceParams.mode);
                if ((num == 0 && ((GlobalRef.g_CasCadeDeviceSpiConnect & 1U) == 1U || (GlobalRef.g_CasCadeDeviceSpiConnect & 2U) == 2U || (GlobalRef.g_CasCadeDeviceSpiConnect & 4U) == 4U || (GlobalRef.g_CasCadeDeviceSpiConnect & 8U) == 8U)) || GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
                {
                    m_TestSourceParams.TestSourceEnabled = false;
                    ScriptOps.m_MainForm.TestSourceTab.iSetEnableBtnText("Enable");
                    string full_command7 = string.Format("Status: Passed", new object[0]);
                    m_GuiManager.RecordLog(11, full_command7);
                    MatlabPostProcGuiInstance.MatlabPostProcImpl_EnableTestSource((double)m_TestSourceParams.mode, 0.0);
                    GlobalRef.g_TestSource = 0U;
                }
                else
                {
                    string msg2 = string.Format("Status: Failed, Error Type: {0}", new object[]
                    {
                        GetErrorType(num)
                    });
                    GlobalRef.LuaWrapper.PrintError(msg2);
                }
            }
            if (GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex] && iRs232ConnectDisconnect_impl() == 0 && !GlobalRef.g_NtvRS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
            {
                m_GuiManager.DllOps.iConnect(1U, 0U);
                string full_command8 = string.Format("Debug Port Reconnected!", new object[0]);
                m_GuiManager.RecordLog(9, full_command8);
                ScriptOps.KeepTrying(2000, new Func<bool>(spare_read));
            }
            iEnableTabButtons();
            ScriptOps.m_MainForm.SetOvBtEnblTimer(false);
            return num;
        }

        public static short getOneComplement(int data, short signed_val)
        {
            short result = 0;
            if (signed_val == 32767)
            {
                if (data > 32767)
                {
                    return (short)(data - 65536);
                }
                return (short)data;
            }
            else
            {
                if (signed_val != 127)
                {
                    return result;
                }
                if (data > 127)
                {
                    return (short)((sbyte)(data - 255));
                }
                return (short)((sbyte)data);
            }
        }

        public static void WriteReportToXML(uint DeviceMap, IntPtr data, int numBytes, string reportName)
        {
            try
            {
                byte[] array = new byte[numBytes + 4];
                Marshal.Copy(data, array, 0, array.Length - 4);
                string path = string.Empty;
                string directoryName = Path.GetDirectoryName(Application.StartupPath);
                XmlNodeList xmlNodeList;
                if (!ScriptOps.monReportXmlMap.TryGetValue(reportName, out xmlNodeList))
                {
                    XmlDocument xmlDocument = new XmlDocument();
                    string filename = string.Concat(new string[]
                    {
                        directoryName + "\\PostProc\\Monitoring_Data_Format.xml"
                    });
                    xmlDocument.Load(filename);
                    string xpath = "./MonReportFormat/MonReport[name = '" + reportName + "']/field";
                    xmlNodeList = xmlDocument.SelectNodes(xpath);
                    if (xmlNodeList != null)
                    {
                        ScriptOps.monReportXmlMap.Add(reportName, xmlNodeList);
                    }
                }
                if (reportName == "RFInitCalibStatus" || reportName == "RunTimeCalibReport")
                {
                    if (GlobalRef.g_2ChipCascade || GlobalRef.g_4ChipCascade)
                    {
                        path = string.Concat(new string[]
                        {
                            directoryName + "\\PostProc\\CalibrationReport_" + DeviceMap.ToString() + ".txt"
                        });
                    }
                    else
                    {
                        path = string.Concat(new string[]
                        {
                            directoryName + "\\PostProc\\CalibrationReport.txt"
                        });
                    }
                }
                else if (reportName == "BSSCPUFaultStatus" || reportName == "BSSESMFaultStatus" || reportName == "RFGPADCMeasurementData" || reportName == "RFTemperatureData" || reportName == "RFGPADCReport" || reportName == "MeasuredTxPower" || reportName == "MeasuredPDPower" || reportName == "AnalogFaultReport" || reportName == "CalMonTimingFailReport")
                {
                    if (GlobalRef.g_2ChipCascade || GlobalRef.g_4ChipCascade)
                    {
                        path = string.Concat(new string[]
                        {
                            directoryName + "\\PostProc\\BSSEvents_" + DeviceMap.ToString() + ".txt"
                        });
                    }
                    else
                    {
                        path = string.Concat(new string[]
                        {
                            directoryName + "\\PostProc\\BSSEvents.txt"
                        });
                    }
                }
                else if (reportName == "MSSPowerUpDoneAsyncReport" || reportName == "BSSRFPowerUpDoneAsyncReport" || reportName == "MSSCPUFaultStatus" || reportName == "MSSESMFaultStatus" || reportName == "MSSBootErrorStatus" || reportName == "MSSLatentFaultMonitoring" || reportName == "MSSPeriodicTestMonitoring" || reportName == "MSSRFErrorStatus" || reportName == "MSSVolMonErrorStatusReport")
                {
                    if (GlobalRef.g_2ChipCascade || GlobalRef.g_4ChipCascade)
                    {
                        path = string.Concat(new string[]
                        {
                            directoryName + "\\PostProc\\MSSEvents_" + DeviceMap.ToString() + ".txt"
                        });
                    }
                    else
                    {
                        path = string.Concat(new string[]
                        {
                            directoryName + "\\PostProc\\MSSEvents.txt"
                        });
                    }
                }
                else if (GlobalRef.g_2ChipCascade || GlobalRef.g_4ChipCascade)
                {
                    path = string.Concat(new string[]
                    {
                        directoryName + "\\PostProc\\MonitoringReport_" + DeviceMap.ToString() + ".txt"
                    });
                }
                else
                {
                    path = string.Concat(new string[]
                    {
                        directoryName + "\\PostProc\\MonitoringReport.txt"
                    });
                }
                using (StreamWriter streamWriter = new StreamWriter(path, true))
                {
                    string text = string.Empty;
                    text = string.Concat(new object[]
                    {
                        " [",
                        DateTime.Now.ToString("dd/MM/yyyy HH:mm:ss"),
                        "] DeviceId [",
                        DeviceMap,
                        "] ",
                        reportName,
                        ":"
                    });
                    for (int i = 0; i < xmlNodeList.Count; i++)
                    {
                        XmlNodeList childNodes = xmlNodeList.Item(i).ChildNodes;
                        int num = Convert.ToInt32(childNodes.Item(1).InnerText);
                        uint num2 = Convert.ToUInt32(childNodes.Item(2).InnerText);
                        if (childNodes.Item(3).InnerText == "0")
                        {
                            int num3 = (int)((1L << (int)(num2 * 8U)) - 1L);
                            int num4 = BitConverter.ToInt32(array, num);
                            num4 &= num3;
                            if (childNodes.Count > 4)
                            {
                                if (childNodes.Count > 5)
                                {
                                    short signed_val = Convert.ToInt16(childNodes.Item(5).InnerText);
                                    num4 = (int)ScriptOps.getOneComplement(num4, signed_val);
                                }
                                decimal d = Convert.ToDecimal(childNodes.Item(4).InnerText);
                                decimal num5 = Math.Round(num4 * d, 2);
                                text = text + " " + num5;
                            }
                            else
                            {
                                text = text + " " + num4;
                            }
                            if (i != xmlNodeList.Count - 1)
                            {
                                text += ",";
                            }
                        }
                        else
                        {
                            for (int j = 4; j < childNodes.Count; j++)
                            {
                                int num6 = Convert.ToInt32(childNodes.Item(j).ChildNodes.Item(1).InnerText);
                                int num7 = num6 / 32;
                                num6 -= num7 * 32;
                                int num8 = Convert.ToInt32(childNodes.Item(j).ChildNodes.Item(2).InnerText);
                                int num9 = (1 << num8) - 1;
                                int num10 = BitConverter.ToInt32(array, num + num7 * 4);
                                num10 = (num10 >> num6 & num9);
                                if (childNodes.Item(j).ChildNodes.Count > 3)
                                {
                                    if (childNodes.Item(j).ChildNodes.Count > 4)
                                    {
                                        short signed_val2 = Convert.ToInt16(childNodes.Item(j).ChildNodes.Item(4).InnerText);
                                        num10 = (int)ScriptOps.getOneComplement(num10, signed_val2);
                                    }
                                    decimal d2 = Convert.ToDecimal(childNodes.Item(j).ChildNodes.Item(3).InnerText);
                                    decimal num11 = Math.Round(num10 * d2, 2);
                                    text = text + " " + num11;
                                }
                                else
                                {
                                    text = text + " " + num10;
                                }
                                if (i != childNodes.Count - 1)
                                {
                                    text += ",";
                                }
                            }
                        }
                    }
                    streamWriter.WriteLine(text);
                    streamWriter.Close();
                    streamWriter.Dispose();
                }
            }
            catch (Exception ex)
            {
                GlobalRef.LuaWrapper.PrintError(ex.Message);
            }
        }

        public void DisplayADCData(struct0b evtData)
        {
            double value = Math.Round((double)evtData.maxMeas * 1.7578125);
            double value2 = Math.Round((double)evtData.minMeas * 1.7578125);
            double value3 = Math.Round((double)evtData.avgMeas * 1.7578125);
            ScriptOps.m_MainForm.RFStatusTab.SetGPADCAvgDataResponseInGui(Convert.ToString(value3) + " mV (0x" + Convert.ToString(evtData.avgMeas) + ")");
            ScriptOps.m_MainForm.RFStatusTab.SetGPADCMaxDataResponseInGui(Convert.ToString(value) + " mV (0x" + Convert.ToString(evtData.maxMeas) + ")");
            ScriptOps.m_MainForm.RFStatusTab.SetGPADCMinDataResponseInGui(Convert.ToString(value2) + " mV (0x" + Convert.ToString(evtData.minMeas) + ")");
        }

        private void callBack(ushort u16Cmd, ushort u16Status)
        {
            string full_command = string.Format("Call back called :  Async event recieved({0})", new object[]
            {
                u16Status
            });
            GlobalRef.GuiManager.RecordLog(0, full_command);
        }

        public int iSPIConnectDisconnect_impl()
        {
            int num = -1;
            if ((GlobalRef.g_CasCadeDeviceSpiConnect & 1U) == 0U)
            {
                ScriptOps.asyncEvent.mssPowerUpDone = (ScriptOps.asyncEvent.mssPowerUpDone & ~GlobalRef.g_RadarDeviceId);
                if (GlobalRef.g_RadarDeviceId != 1U && GlobalRef.g_RadarDeviceId != 2U && GlobalRef.g_RadarDeviceId != 4U && GlobalRef.g_RadarDeviceId != 8U)
                {
                    MessageBox.Show(" Power on one Device at a time !", "Error", MessageBoxButtons.OK, MessageBoxIcon.Hand);
                    return num;
                }
                num = Imports.RadarLinkImpl_PowerOn(GlobalRef.g_RadarDeviceId, (char)m_SPIConnectParams.crcType, (uint)m_SPIConnectParams.ackTimeout, m_SPIConnectParams.trasportType, m_SPIConnectParams.portNum, callback);
                if (m_RadarDeviceModeConfigParams.NumberOfRadarDevicesDetected <= 1)
                {
                    string full_command = string.Format("ar1.PowerOn({0}, {1}, {2}, {3})", new object[]
                    {
                        (ushort)m_SPIConnectParams.crcType,
                        (ushort)m_SPIConnectParams.ackTimeout,
                        m_SPIConnectParams.trasportType,
                        m_SPIConnectParams.portNum
                    });
                    m_GuiManager.RecordLog(0, full_command);
                }
                else
                {
                    string full_command2 = string.Format("ar1.PowerOn_mult({0}, {1}, {2}, {3},{4})", new object[]
                    {
                        GlobalRef.g_RadarDeviceId,
                        (ushort)m_SPIConnectParams.crcType,
                        (ushort)m_SPIConnectParams.ackTimeout,
                        m_SPIConnectParams.trasportType,
                        m_SPIConnectParams.portNum
                    });
                    m_GuiManager.RecordLog(0, full_command2);
                }
                if (num == 0)
                {
                    GlobalRef.g_I2COpenCloseHandler = 1U;
                    ScriptOps.m_MainForm.ConnectTab.iSetSPIConnectBtnText(1U, "SPI Disconnect (5)");
                    ScriptOps.m_MainForm.ConnectTab.iSetSPIConnectBtnTextColor(Color.Blue);
                    string full_command3 = string.Format("Status: Passed", new object[0]);
                    m_GuiManager.RecordLog(0, full_command3);
                    GlobalRef.g_CasCadeDeviceSpiConnect |= 1U;
                    ScriptOps.m_MainForm.RegOpeTab.m000060();
                    ScriptOps.m_MainForm.HandleMainStatusChange(false);
                    ScriptOps.m_MainForm.RegOpeTab.m000060();
                }
                else
                {
                    string msg = string.Format("Status: Failed, Error Type: {0}", new object[]
                    {
                        GetErrorType(num)
                    });
                    GlobalRef.LuaWrapper.PrintError(msg);
                }
                int num2 = 0;
                while ((ScriptOps.asyncEvent.mssPowerUpDone & GlobalRef.g_RadarDeviceId) != GlobalRef.g_RadarDeviceId)
                {
                    Thread.Sleep(100);
                    num2++;
                    if (num2 > 40)
                    {
                        string msg2 = string.Format("MSS Power Up async event was not received!", new object[0]);
                        GlobalRef.LuaWrapper.PrintError(msg2);
                        return -1;
                    }
                }
            }
            else if ((GlobalRef.g_CasCadeDeviceSpiConnect & 1U) == 1U)
            {
                if (m_RadarDeviceModeConfigParams.NumberOfRadarDevicesDetected <= 1)
                {
                    num = Imports.RadarLinkImpl_PowerOff();
                }
                else
                {
                    uint g_RadarDeviceId = GlobalRef.g_RadarDeviceId;
                    if ((GlobalRef.g_CasCadeDeviceSpiConnect & 8U) != 0U)
                    {
                        GlobalRef.g_RadarDeviceId = 8U;
                        iRadarDevice4SPIConnectDisconnect_impl();
                    }
                    if ((GlobalRef.g_CasCadeDeviceSpiConnect & 4U) != 0U)
                    {
                        GlobalRef.g_RadarDeviceId = 4U;
                        iRadarDevice3SPIConnectDisconnect_impl();
                    }
                    if ((GlobalRef.g_CasCadeDeviceSpiConnect & 2U) != 0U)
                    {
                        GlobalRef.g_RadarDeviceId = 2U;
                        iRadarDevice2SPIConnectDisconnect_impl();
                    }
                    GlobalRef.g_RadarDeviceId = 1U;
                    num = Imports.RadarLinkImpl_PowerOff();
                    GlobalRef.g_RadarDeviceId = g_RadarDeviceId;
                }
                if (m_RadarDeviceModeConfigParams.NumberOfRadarDevicesDetected <= 1)
                {
                    string full_command4 = string.Format("ar1.PowerOff()", new object[0]);
                    m_GuiManager.RecordLog(0, full_command4);
                }
                else
                {
                    string full_command5 = string.Format("ar1.PowerOff_mult()", new object[0]);
                    m_GuiManager.RecordLog(0, full_command5);
                }
                if (num == 0)
                {
                    string full_command6 = string.Format("Status: Passed", new object[0]);
                    m_GuiManager.RecordLog(0, full_command6);
                    GlobalRef.g_I2COpenCloseHandler = 0U;
                    ScriptOps.m_MainForm.ConnectTab.iSetSPIConnectBtnText(1U, "SPI Connect (5)");
                    ScriptOps.m_MainForm.ConnectTab.iSetSPIConnectBtnTextColor(Color.Red);
                    ScriptOps.m_MainForm.ConnectTab.iSetSPIRfEnblBtnText(1U, "RF Power-up");
                    GlobalRef.g_CasCadeDeviceSpiConnect &= 4294967294U;
                    iResetComponentsAtSpiDiscnt(1U);
                    ScriptOps.m_MainForm.HandleMainStatusChange(false);
                    MatlabPostProcGuiInstance.MatlabPostProcImpl_PowerOff();
                }
                else
                {
                    string msg3 = string.Format("Status: Failed, Error Type: {0}", new object[]
                    {
                        GetErrorType(num)
                    });
                    GlobalRef.LuaWrapper.PrintError(msg3);
                }
            }
            return num;
        }

        public int iRadarDevice2SPIConnectDisconnect_impl()
        {
            int num = -1;
            if ((GlobalRef.g_CasCadeDeviceSpiConnect & 2U) == 0U)
            {
                ScriptOps.asyncEvent.mssPowerUpDone = (ScriptOps.asyncEvent.mssPowerUpDone & ~GlobalRef.g_RadarDeviceId);
                if (GlobalRef.g_RadarDeviceId != 1U && GlobalRef.g_RadarDeviceId != 2U && GlobalRef.g_RadarDeviceId != 4U && GlobalRef.g_RadarDeviceId != 8U)
                {
                    MessageBox.Show(" Power on one Device at a time !", "Error", MessageBoxButtons.OK, MessageBoxIcon.Hand);
                    return num;
                }
                num = Imports.RadarLinkImpl_DeviceAddDevices(GlobalRef.g_RadarDeviceId);
                if (m_RadarDeviceModeConfigParams.NumberOfRadarDevicesDetected <= 1)
                {
                    string full_command = string.Format("ar1.AddDevice({0}, {1}, {2}, {3})", new object[]
                    {
                        (ushort)m_SPIConnectParams.crcType,
                        (ushort)m_SPIConnectParams.ackTimeout,
                        m_SPIConnectParams.trasportType,
                        m_SPIConnectParams.portNum
                    });
                    m_GuiManager.RecordLog(0, full_command);
                }
                else
                {
                    string full_command2 = string.Format("ar1.AddDevice({0})", new object[]
                    {
                        GlobalRef.g_RadarDeviceId
                    });
                    m_GuiManager.RecordLog(0, full_command2);
                }
                if (num == 0)
                {
                    ScriptOps.m_MainForm.ConnectTab.iSetSPIConnectBtnText(2U, "SPI Disconnect (2)");
                    ScriptOps.m_MainForm.ConnectTab.iSetSPIConnectBtnTextColor(Color.Blue);
                    string full_command3 = string.Format("Status: Passed", new object[0]);
                    m_GuiManager.RecordLog(0, full_command3);
                    if (GlobalRef.g_RadarDeviceId == 2U)
                    {
                        GlobalRef.g_CasCadeDeviceSpiConnect |= 2U;
                    }
                    else if (GlobalRef.g_RadarDeviceId == 4U)
                    {
                        GlobalRef.g_CasCadeDeviceSpiConnect |= 4U;
                    }
                    else if (GlobalRef.g_RadarDeviceId == 8U)
                    {
                        GlobalRef.g_CasCadeDeviceSpiConnect |= 8U;
                    }
                    ScriptOps.m_MainForm.RegOpeTab.m000060();
                    ScriptOps.m_MainForm.HandleMainStatusChange(false);
                    ScriptOps.m_MainForm.RegOpeTab.m000060();
                }
                else
                {
                    string msg = string.Format("Status: Failed, Error Type: {0}", new object[]
                    {
                        GetErrorType(num)
                    });
                    GlobalRef.LuaWrapper.PrintError(msg);
                }
                int num2 = 0;
                while ((ScriptOps.asyncEvent.mssPowerUpDone & GlobalRef.g_RadarDeviceId) != GlobalRef.g_RadarDeviceId)
                {
                    Thread.Sleep(100);
                    num2++;
                    if (num2 > 40)
                    {
                        string msg2 = string.Format("MSS Power Up async event was not received!", new object[0]);
                        GlobalRef.LuaWrapper.PrintError(msg2);
                        return -1;
                    }
                }
            }
            else if ((GlobalRef.g_CasCadeDeviceSpiConnect & 2U) == 2U)
            {
                num = Imports.RadarLinkImpl_RemoveDevices(GlobalRef.g_RadarDeviceId);
                if (m_RadarDeviceModeConfigParams.NumberOfRadarDevicesDetected <= 1)
                {
                    string full_command4 = string.Format("ar1.RemoveDevice_Slave1({0}, {1}, {2}, {3})", new object[]
                    {
                        (ushort)m_SPIConnectParams.crcType,
                        (ushort)m_SPIConnectParams.ackTimeout,
                        m_SPIConnectParams.trasportType,
                        m_SPIConnectParams.portNum
                    });
                    m_GuiManager.RecordLog(0, full_command4);
                }
                else
                {
                    string full_command5 = string.Format("ar1.RemoveDevice({0})", new object[]
                    {
                        GlobalRef.g_RadarDeviceId
                    });
                    m_GuiManager.RecordLog(0, full_command5);
                }
                if (num == 0)
                {
                    string full_command6 = string.Format("Status: Passed", new object[0]);
                    m_GuiManager.RecordLog(0, full_command6);
                    ScriptOps.m_MainForm.ConnectTab.iSetSPIConnectBtnText(2U, "SPI Connect (2)");
                    ScriptOps.m_MainForm.ConnectTab.iSetSPIConnectBtnTextColor(Color.Red);
                    ScriptOps.m_MainForm.ConnectTab.iSetSPIRfEnblBtnText(2U, "RF Power-up");
                    GlobalRef.g_CasCadeDeviceSpiConnect &= 4294967293U;
                    iResetComponentsAtSpiDiscnt(2U);
                    ScriptOps.m_MainForm.HandleMainStatusChange(false);
                    MatlabPostProcGuiInstance.MatlabPostProcImpl_PowerOff();
                }
                else
                {
                    string msg3 = string.Format("Status: Failed, Error Type: {0}", new object[]
                    {
                        GetErrorType(num)
                    });
                    GlobalRef.LuaWrapper.PrintError(msg3);
                }
            }
            return num;
        }

        public int iRadarDevice3SPIConnectDisconnect_impl()
        {
            int num = -1;
            if ((GlobalRef.g_CasCadeDeviceSpiConnect & 4U) == 0U)
            {
                ScriptOps.asyncEvent.mssPowerUpDone = (ScriptOps.asyncEvent.mssPowerUpDone & ~GlobalRef.g_RadarDeviceId);
                if (GlobalRef.g_RadarDeviceId != 1U && GlobalRef.g_RadarDeviceId != 2U && GlobalRef.g_RadarDeviceId != 4U && GlobalRef.g_RadarDeviceId != 8U)
                {
                    MessageBox.Show(" Power on one Device at a time !", "Error", MessageBoxButtons.OK, MessageBoxIcon.Hand);
                    return num;
                }
                num = Imports.RadarLinkImpl_DeviceAddDevices(GlobalRef.g_RadarDeviceId);
                if (m_RadarDeviceModeConfigParams.NumberOfRadarDevicesDetected <= 1)
                {
                    string full_command = string.Format("ar1.AddDevice({0}, {1}, {2}, {3})", new object[]
                    {
                        (ushort)m_SPIConnectParams.crcType,
                        (ushort)m_SPIConnectParams.ackTimeout,
                        m_SPIConnectParams.trasportType,
                        m_SPIConnectParams.portNum
                    });
                    m_GuiManager.RecordLog(0, full_command);
                }
                else
                {
                    string full_command2 = string.Format("ar1.AddDevice({0})", new object[]
                    {
                        GlobalRef.g_RadarDeviceId
                    });
                    m_GuiManager.RecordLog(0, full_command2);
                }
                if (num == 0)
                {
                    ScriptOps.m_MainForm.ConnectTab.iSetSPIConnectBtnText(4U, "SPI Disconnect (3)");
                    ScriptOps.m_MainForm.ConnectTab.iSetSPIConnectBtnTextColor(Color.Blue);
                    string full_command3 = string.Format("Status: Passed", new object[0]);
                    m_GuiManager.RecordLog(0, full_command3);
                    GlobalRef.g_CasCadeDeviceSpiConnect |= 4U;
                    ScriptOps.m_MainForm.RegOpeTab.m000060();
                    ScriptOps.m_MainForm.HandleMainStatusChange(false);
                    ScriptOps.m_MainForm.RegOpeTab.m000060();
                }
                else
                {
                    string msg = string.Format("Status: Failed, Error Type: {0}", new object[]
                    {
                        GetErrorType(num)
                    });
                    GlobalRef.LuaWrapper.PrintError(msg);
                }
                int num2 = 0;
                while ((ScriptOps.asyncEvent.mssPowerUpDone & GlobalRef.g_RadarDeviceId) != GlobalRef.g_RadarDeviceId)
                {
                    Thread.Sleep(100);
                    num2++;
                    if (num2 > 40)
                    {
                        string msg2 = string.Format("MSS Power Up async event was not received!", new object[0]);
                        GlobalRef.LuaWrapper.PrintError(msg2);
                        return -1;
                    }
                }
            }
            else if ((GlobalRef.g_CasCadeDeviceSpiConnect & 4U) == 4U)
            {
                num = Imports.RadarLinkImpl_RemoveDevices(GlobalRef.g_RadarDeviceId);
                if (m_RadarDeviceModeConfigParams.NumberOfRadarDevicesDetected <= 1)
                {
                    string full_command4 = string.Format("ar1.RemoveDevice_Slave2({0}, {1}, {2}, {3})", new object[]
                    {
                        (ushort)m_SPIConnectParams.crcType,
                        (ushort)m_SPIConnectParams.ackTimeout,
                        m_SPIConnectParams.trasportType,
                        m_SPIConnectParams.portNum
                    });
                    m_GuiManager.RecordLog(0, full_command4);
                }
                else
                {
                    string full_command5 = string.Format("ar1.RemoveDevice({0})", new object[]
                    {
                        GlobalRef.g_RadarDeviceId
                    });
                    m_GuiManager.RecordLog(0, full_command5);
                }
                if (num == 0)
                {
                    string full_command6 = string.Format("Status: Passed", new object[0]);
                    m_GuiManager.RecordLog(0, full_command6);
                    ScriptOps.m_MainForm.ConnectTab.iSetSPIConnectBtnText(4U, "SPI Connect (3)");
                    ScriptOps.m_MainForm.ConnectTab.iSetSPIConnectBtnTextColor(Color.Red);
                    ScriptOps.m_MainForm.ConnectTab.iSetSPIRfEnblBtnText(4U, "RF Power-up");
                    GlobalRef.g_CasCadeDeviceSpiConnect &= 4294967291U;
                    iResetComponentsAtSpiDiscnt(4U);
                    ScriptOps.m_MainForm.HandleMainStatusChange(false);
                    MatlabPostProcGuiInstance.MatlabPostProcImpl_PowerOff();
                }
                else
                {
                    string msg3 = string.Format("Status: Failed, Error Type: {0}", new object[]
                    {
                        GetErrorType(num)
                    });
                    GlobalRef.LuaWrapper.PrintError(msg3);
                }
            }
            return num;
        }

        public int iRadarDevice4SPIConnectDisconnect_impl()
        {
            int num = -1;
            if ((GlobalRef.g_CasCadeDeviceSpiConnect & 8U) == 0U)
            {
                ScriptOps.asyncEvent.mssPowerUpDone = (ScriptOps.asyncEvent.mssPowerUpDone & ~GlobalRef.g_RadarDeviceId);
                if (GlobalRef.g_RadarDeviceId != 1U && GlobalRef.g_RadarDeviceId != 2U && GlobalRef.g_RadarDeviceId != 4U && GlobalRef.g_RadarDeviceId != 8U)
                {
                    MessageBox.Show(" Power on one Device at a time !", "Error", MessageBoxButtons.OK, MessageBoxIcon.Hand);
                    return num;
                }
                num = Imports.RadarLinkImpl_DeviceAddDevices(GlobalRef.g_RadarDeviceId);
                if (m_RadarDeviceModeConfigParams.NumberOfRadarDevicesDetected <= 1)
                {
                    string full_command = string.Format("ar1.AddDevice({0}, {1}, {2}, {3})", new object[]
                    {
                        (ushort)m_SPIConnectParams.crcType,
                        (ushort)m_SPIConnectParams.ackTimeout,
                        m_SPIConnectParams.trasportType,
                        m_SPIConnectParams.portNum
                    });
                    m_GuiManager.RecordLog(0, full_command);
                }
                else
                {
                    string full_command2 = string.Format("ar1.AddDevice({0})", new object[]
                    {
                        GlobalRef.g_RadarDeviceId
                    });
                    m_GuiManager.RecordLog(0, full_command2);
                }
                if (num == 0)
                {
                    ScriptOps.m_MainForm.ConnectTab.iSetSPIConnectBtnText(8U, "SPI Disconnect (4)");
                    ScriptOps.m_MainForm.ConnectTab.iSetSPIConnectBtnTextColor(Color.Blue);
                    string full_command3 = string.Format("Status: Passed", new object[0]);
                    m_GuiManager.RecordLog(0, full_command3);
                    GlobalRef.g_CasCadeDeviceSpiConnect |= 8U;
                    ScriptOps.m_MainForm.RegOpeTab.m000060();
                    ScriptOps.m_MainForm.HandleMainStatusChange(false);
                    ScriptOps.m_MainForm.RegOpeTab.m000060();
                }
                else
                {
                    string msg = string.Format("Status: Failed, Error Type: {0}", new object[]
                    {
                        GetErrorType(num)
                    });
                    GlobalRef.LuaWrapper.PrintError(msg);
                }
                int num2 = 0;
                while ((ScriptOps.asyncEvent.mssPowerUpDone & GlobalRef.g_RadarDeviceId) != GlobalRef.g_RadarDeviceId)
                {
                    Thread.Sleep(100);
                    num2++;
                    if (num2 > 40)
                    {
                        string msg2 = string.Format("MSS Power Up async event was not received!", new object[0]);
                        GlobalRef.LuaWrapper.PrintError(msg2);
                        return -1;
                    }
                }
            }
            else if ((GlobalRef.g_CasCadeDeviceSpiConnect & 8U) == 8U)
            {
                num = Imports.RadarLinkImpl_RemoveDevices(GlobalRef.g_RadarDeviceId);
                if (m_RadarDeviceModeConfigParams.NumberOfRadarDevicesDetected <= 1)
                {
                    string full_command4 = string.Format("ar1.RemoveDevice_Slave2({0}, {1}, {2}, {3})", new object[]
                    {
                        (ushort)m_SPIConnectParams.crcType,
                        (ushort)m_SPIConnectParams.ackTimeout,
                        m_SPIConnectParams.trasportType,
                        m_SPIConnectParams.portNum
                    });
                    m_GuiManager.RecordLog(0, full_command4);
                }
                else
                {
                    string full_command5 = string.Format("ar1.RemoveDevice({0})", new object[]
                    {
                        GlobalRef.g_RadarDeviceId
                    });
                    m_GuiManager.RecordLog(0, full_command5);
                }
                if (num == 0)
                {
                    string full_command6 = string.Format("Status: Passed", new object[0]);
                    m_GuiManager.RecordLog(0, full_command6);
                    ScriptOps.m_MainForm.ConnectTab.iSetSPIConnectBtnText(8U, "SPI Connect (4)");
                    ScriptOps.m_MainForm.ConnectTab.iSetSPIConnectBtnTextColor(Color.Red);
                    ScriptOps.m_MainForm.ConnectTab.iSetSPIRfEnblBtnText(8U, "RF Power-up");
                    GlobalRef.g_CasCadeDeviceSpiConnect &= 4294967287U;
                    iResetComponentsAtSpiDiscnt(8U);
                    ScriptOps.m_MainForm.HandleMainStatusChange(false);
                    MatlabPostProcGuiInstance.MatlabPostProcImpl_PowerOff();
                }
                else
                {
                    string msg3 = string.Format("Status: Failed, Error Type: {0}", new object[]
                    {
                        GetErrorType(num)
                    });
                    GlobalRef.LuaWrapper.PrintError(msg3);
                }
            }
            return num;
        }

        public int iRs232ConnectDisconnect_impl()
        {
            int num = -1;
            if (!GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
            {
                string full_command = string.Format("ar1.PowerOn({0}, {1}, {2}, {3})", new object[]
                {
                    1,
                    (ushort)m_SPIConnectParams.crcType,
                    1,
                    (ushort)m_ConnectParams.ComPort
                });
                m_GuiManager.RecordLog(0, full_command);
                if (num == 0)
                {
                    GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex] = true;
                    string full_command2 = string.Format("Status: Passed", new object[0]);
                    m_GuiManager.RecordLog(0, full_command2);
                }
                else
                {
                    string msg = string.Format("Status: Failed, Error Type: {0}", new object[]
                    {
                        GetErrorType(num)
                    });
                    GlobalRef.LuaWrapper.PrintError(msg);
                }
            }
            else if (GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
            {
                num = Imports.RadarLinkImpl_PowerOff();
                if (num == 0)
                {
                    GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex] = false;
                    string full_command3 = string.Format("Status: Passed PowerOff()", new object[0]);
                    m_GuiManager.RecordLog(0, full_command3);
                    MatlabPostProcGuiInstance.MatlabPostProcImpl_PowerOff();
                }
            }
            GuiSettings.Default.Save();
            return num;
        }

        public int CustomCommand_Impl(ushort msgDir, ushort msgType, ushort msgID, ushort p3, ushort sbID, ushort sbLen, IntPtr sbData)
        {
            iDisableTabButtons();
            ScriptOps.m_MainForm.SetOvBtEnblTimer(true);
            int num;
            if (GlobalRef.g_NtvRS232Connect[(int)GlobalRef.g_RadarDeviceIndex] && GlobalRef.g_CasCadeDeviceSpiConnect == 0U)
            {
                num = m_TsWrapper.Calling_WriteAddr_Single(4294959848U, 1U);
                if (m_GuiManager.DllOps.itempDisconnect(false) == 0)
                {
                    string full_command = string.Format("Debug Port Disconnected", new object[0]);
                    m_GuiManager.RecordLog(0, full_command);
                    if (!GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
                    {
                        iRs232ConnectDisconnect_impl();
                    }
                }
            }
            if (m_RadarDeviceModeConfigParams.NumberOfRadarDevicesDetected <= 1)
            {
                string full_command2 = string.Format("ar1.CustomCommand({0}, {1}, {2}, {3}, {4}, {5},\"{6}\")", new object[]
                {
                    "0x" + msgDir.ToString("x"),
                    "0x" + msgType.ToString("x"),
                    "0x" + msgID.ToString("x"),
                    "0x" + p3.ToString("x"),
                    "0x" + sbID.ToString("x"),
                    "0x" + sbLen.ToString("x"),
                    ScriptOps.m_MainForm.ProtocolTab.iGetSbDataText()
                });
                m_GuiManager.RecordLog(0, full_command2);
            }
            else
            {
                string full_command3 = string.Format("ar1.CustomCommand_mult({0}, {1}, {2}, {3}, {4}, {5}, {6},\"{7}\")", new object[]
                {
                    GlobalRef.g_RadarDeviceId,
                    "0x" + msgDir.ToString("x"),
                    "0x" + msgType.ToString("x"),
                    "0x" + msgID.ToString("x"),
                    "0x" + p3.ToString("x"),
                    "0x" + sbID.ToString("x"),
                    "0x" + sbLen.ToString("x"),
                    ScriptOps.m_MainForm.ProtocolTab.iGetSbDataText()
                });
                m_GuiManager.RecordLog(0, full_command3);
            }
            num = Imports.RadarLinkImpl_CustomCommand(GlobalRef.g_RadarDeviceId, msgDir, msgType, msgID, p3, sbID, sbLen, sbData);
            if ((num == 0 && ((GlobalRef.g_CasCadeDeviceSpiConnect & 1U) == 1U || (GlobalRef.g_CasCadeDeviceSpiConnect & 2U) == 2U || (GlobalRef.g_CasCadeDeviceSpiConnect & 4U) == 4U || (GlobalRef.g_CasCadeDeviceSpiConnect & 8U) == 8U)) || GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
            {
                string full_command4 = string.Format("Status: Passed", new object[0]);
                m_GuiManager.RecordLog(0, full_command4);
            }
            else
            {
                string msg = string.Format("Status: Failed, Error Type: {0}", new object[]
                {
                    GetErrorType(num)
                });
                GlobalRef.LuaWrapper.PrintError(msg);
            }
            if (GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
            {
                if (iRs232ConnectDisconnect_impl() == 0 && !GlobalRef.g_NtvRS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
                {
                    m_GuiManager.DllOps.iConnect(1U, 0U);
                    string full_command5 = string.Format("Debug Port Reconnected!", new object[0]);
                    m_GuiManager.RecordLog(9, full_command5);
                    ScriptOps.KeepTrying(2000, new Func<bool>(spare_read));
                }
            }
            else if (GlobalRef.g_CasCadeDeviceSpiConnect == 0U)
            {
                string full_command6 = string.Format("Error Occurred in Port open close", new object[0]);
                m_GuiManager.RecordLog(9, full_command6);
            }
            iEnableTabButtons();
            ScriptOps.m_MainForm.SetOvBtEnblTimer(false);
            return num;
        }

        public static byte[] StringToByteArray(string hex)
        {
            ScriptOps.c0002ab c0002ab = new ScriptOps.c0002ab();
            c0002ab.hex = hex;
            return Enumerable.Range(0, c0002ab.hex.Length).Where(new Func<int, bool>(ScriptOps.c0002ac.f00019e.m0000a8)).Select(new Func<int, byte>(c0002ab.m00005b)).ToArray<byte>();
        }

        public int CmdLineCustomCommand_Impl(ushort RadarDeviceId, ushort msgDir, ushort msgType, ushort msgID, ushort p4, ushort sbID, ushort sbLen, string sbData)
        {
            GlobalRef.g_RadarDeviceId = (uint)RadarDeviceId;
            m_ProtocolConfigParams.MsgDir = msgDir;
            m_ProtocolConfigParams.MsgType = msgType;
            m_ProtocolConfigParams.MsgId = msgID;
            m_ProtocolConfigParams.f0004ec = p4;
            m_ProtocolConfigParams.SuBlockID = sbID;
            m_ProtocolConfigParams.SuBlockLen = sbLen;
            m_ProtocolConfigParams.SuBlockData = sbData;
            ScriptOps.m_MainForm.ProtocolTab.UpdateCustomCommandConfigDataFrmCmd();
            IntPtr sbData2 = GCHandle.Alloc(ScriptOps.StringToByteArray(sbData), GCHandleType.Pinned).AddrOfPinnedObject();
            return CustomCommand_Impl(msgDir, msgType, msgID, p4, sbID, sbLen, sbData2);
        }

        public byte[] HexToBytes(string input)
        {
            byte[] array = new byte[input.Length / 2];
            for (int i = 0; i < array.Length; i++)
            {
                array[i] = Convert.ToByte(input.Substring(2 * i, 2), 16);
            }
            return array;
        }

        public int PowOnCmd(ushort RadarDeviceId, ushort crcType, ushort ackTimeout, char trasportType, uint portNum, out uint powerUpTime, out string powerUpStatus, out string bootTestStatus)
        {
            GlobalRef.g_RadarDeviceId = (uint)RadarDeviceId;
            uint baud_rate = 115200U;
            uint timeout = 5000U;
            powerUpStatus = string.Empty;
            powerUpTime = 0U;
            bootTestStatus = string.Empty;
            m_SPIConnectParams.ackTimeout = (int)ackTimeout;
            m_SPIConnectParams.crcType = (int)crcType;
            m_SPIConnectParams.trasportType = trasportType;
            m_SPIConnectParams.portNum = portNum;
            int num;
            if (trasportType == '\u0001')
            {
                ScriptOps.m_MainForm.ConnectTab.UpdateSPIDataFrmCmdSrc();
                num = m_TsWrapper.Connect(m_SPIConnectParams.portNum, baud_rate, timeout);
            }
            else
            {
                ScriptOps.m_MainForm.ConnectTab.UpdateSPIDataFrmCmdSrc();
                num = iSPIConnectDisconnect_Gui(true, false);
            }
            do
            {
                if (num == 0)
                {
                    powerUpTime = ScriptOps.MSSPowerUpDoneAsyncReportParam.MSSPowerUpTime;
                    powerUpStatus = "0x" + ScriptOps.MSSPowerUpDoneAsyncReportParam.MSSPowerUpStatus1.ToString("X") + ScriptOps.MSSPowerUpDoneAsyncReportParam.MSSPowerUpStatus2.ToString("X");
                    bootTestStatus = "0x" + ScriptOps.MSSPowerUpDoneAsyncReportParam.BootTestStatus1.ToString("X") + ScriptOps.MSSPowerUpDoneAsyncReportParam.BootTestStatus2.ToString("X");
                }
            }
            while (ScriptOps.MSSPowerUpDoneAsyncReportParam.MSSPowerUpTime == 0U);
            return num;
        }

        public int AddDevicePowOnCmd(ushort RadarDeviceId)
        {
            int result = -1;
            GlobalRef.g_RadarDeviceId = (uint)RadarDeviceId;
            if (GlobalRef.g_RadarDeviceId == 2U)
            {
                result = iRadarDevice2SPIConnectDisconnect_Gui(true, false);
            }
            else if (GlobalRef.g_RadarDeviceId == 4U)
            {
                result = iRadarDevice3SPIConnectDisconnect_Gui(true, false);
            }
            else if (GlobalRef.g_RadarDeviceId == 8U)
            {
                result = iRadarDevice4SPIConnectDisconnect_Gui(true, false);
            }
            else
            {
                string msg = string.Format("SPI connect or disconnect use ONE DEVICE (one device id ) at time.....!!!", new object[0]);
                GlobalRef.LuaWrapper.PrintError(msg);
            }
            return result;
        }

        public int SetSopCmd(ushort RadarDeviceId, ushort sopMod)
        {
            GlobalRef.g_RadarDeviceId = (uint)RadarDeviceId;
            switch (sopMod)
            {
                case 2:
                    m_ConnectParams.SopMod = 0;
                    goto IL_6A;
                case 4:
                    m_ConnectParams.SopMod = 1;
                    goto IL_6A;
                case 5:
                    m_ConnectParams.SopMod = 2;
                    goto IL_6A;
                case 6:
                    m_ConnectParams.SopMod = 3;
                    goto IL_6A;
            }
            m_ConnectParams.SopMod = 2;
        IL_6A:
            ScriptOps.m_MainForm.ConnectTab.UpdateGuiFrSopCmd();
            return iChangeSop_Impl();
        }

        public int m00008b(ushort RadarDeviceId, out string powerUpStatus, out uint powerUpTime)
        {
            GlobalRef.g_RadarDeviceId = (uint)RadarDeviceId;
            powerUpTime = 0U;
            powerUpStatus = string.Empty;
            int num = iSPIEnableRf_Impl();
            if (num == 0)
            {
                powerUpStatus = "0x" + ScriptOps.BSSRFPowerUpDoneAsyncReportParam.RFPowerupBistStatusFlagsStatus.ToString("X");
                powerUpTime = ScriptOps.BSSRFPowerUpDoneAsyncReportParam.PowerUpTime;
            }
            return num;
        }

        public int GetStaticCharBootUpData(out string processType, out ushort refClkFreq, out string apllCalStatus, out float apllClkFreqMHz)
        {
            processType = string.Empty;
            refClkFreq = 0;
            apllCalStatus = string.Empty;
            apllClkFreqMHz = 0f;
            byte[] array = new byte[10];
            IntPtr inData = GCHandle.Alloc(array, GCHandleType.Pinned).AddrOfPinnedObject();
            int num;
            if (GlobalRef.g_NtvRS232Connect[(int)GlobalRef.g_RadarDeviceIndex] && !GlobalRef.g_SpiConnect[(int)GlobalRef.g_RadarDeviceIndex])
            {
                num = m_TsWrapper.Calling_WriteAddr_Single(4294959848U, 1U);
                if (m_GuiManager.DllOps.itempDisconnect(false) == 0)
                {
                    string full_command = string.Format("Debug Port Disconnected", new object[0]);
                    m_GuiManager.RecordLog(0, full_command);
                    if (!GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
                    {
                        iRs232ConnectDisconnect_impl();
                    }
                }
            }
            num = Imports.RadarLinkImpl_GetStaticCharData(GlobalRef.g_RadarDeviceId, inData);
            string full_command2 = string.Format("ar1.GetStaticCharData()", new object[0]);
            m_GuiManager.RecordLog(1, full_command2);
            if ((num == 0 && GlobalRef.g_SpiConnect[(int)GlobalRef.g_RadarDeviceIndex]) || GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
            {
                string full_command3 = string.Format("Status: Passed", new object[0]);
                m_GuiManager.RecordLog(1, full_command3);
                ushort num2 = (ushort)((int)array[1] << 8 | (int)array[0]);
                ushort num3 = (ushort)((int)array[3] << 8 | (int)array[2]);
                double num4 = (double)((ushort)((int)array[9] << 8 | (int)array[8]));
                ushort num5 = (ushort)((int)array[5] << 8 | (int)array[4]);
                float num6 = (float)(num4 / 10.0);
                if (num2 == 0)
                {
                    processType = "WEAK";
                }
                else if (num2 == 1)
                {
                    processType = "NOMINAL";
                }
                else if (num2 == 2)
                {
                    processType = "STRONG";
                }
                else
                {
                    processType = "ERROR";
                }
                refClkFreq = num3;
                if (num5 == 0)
                {
                    apllCalStatus = "SUCCESS";
                }
                else if (num5 == 1)
                {
                    apllCalStatus = "FAIL";
                }
                else
                {
                    apllCalStatus = "ERROR";
                }
                apllClkFreqMHz = num6;
                apllClkFreqMHz = Convert.ToSingle(num6);
            }
            else
            {
                string msg = string.Format("Status: Failed, Error Type: {0}", new object[]
                {
                    GetErrorType(num)
                });
                GlobalRef.LuaWrapper.PrintError(msg);
            }
            return num;
        }

        public int TestSrcEnblCmd(ushort RadarDeviceId, ushort mode)
        {
            GlobalRef.g_RadarDeviceId = (uint)RadarDeviceId;
            ScriptOps.m_MainForm.TestSourceTab.UpdateTestSourceData();
            m_TestSourceParams.mode = mode;
            ScriptOps.m_MainForm.TestSourceTab.UdateEnbTstSrcData();
            ScriptOps.m_MainForm.ChirpConfigTab.UdateTestSourceStatus();
            return iEnableTestSource_Impl();
        }

        public int UpdateNSetChanNAdcConfData(ushort RadarDeviceId, ushort p1, ushort p2, ushort p3, ushort p4, ushort p5, ushort p6, uint p7, int BitsVal, uint FmtVal, uint IQSwap, ushort CascadeMode)
        {
            GlobalRef.g_RadarDeviceId = (uint)RadarDeviceId;
            ScriptOps.m_MainForm.StaticConfigTab.UpdateBasicConfData();
            m_StaticParams.EnableTx1 = (int)p1;
            m_StaticParams.EnableTx2 = (int)p2;
            m_StaticParams.EnableTx3 = (int)p3;
            m_StaticParams.EnableRx1 = (int)p4;
            m_StaticParams.EnableRx2 = (int)p5;
            m_StaticParams.EnableRx3 = (int)p6;
            m_StaticParams.EnableRx4 = (int)(p7 & 65535U);
            ushort num = (ushort)(p7 >> 16);
            m_StaticParams.ClkOutMasterDis = (byte)(num & 1);
            m_StaticParams.SynOutMasterDis = (byte)(num >> 1 & 1);
            m_StaticParams.ClkOutSlaveEna = (byte)(num >> 2 & 1);
            m_StaticParams.SynOutSlaveEna = (byte)(num >> 3 & 1);
            m_StaticParams.IntLOMasterEna = (byte)(num >> 4 & 1);
            m_StaticParams.OSCClkOutMasterDis = (byte)(num >> 5 & 1);
            m_StaticParams.BitsVal = BitsVal;
            m_StaticParams.FmtVal = (int)(FmtVal & 65535U);
            m_StaticParams.FullScaleReductionFactor = (byte)(FmtVal >> 16 & 65535U);
            m_StaticParams.IQSwap = (char)(IQSwap & 65535U);
            m_StaticParams.CascadeMode = CascadeMode;
            ScriptOps.m_MainForm.StaticConfigTab.UpdateChanAdcDataFrmCmdSrc();
            return iSetBasicConfig_Gui(true, false);
        }

        public int UpdateNSetPerChirpPhaseShifterEnableConfData(ushort RadarDeviceId, uint PerChirpPhaseShifterEnable)
        {
            GlobalRef.g_RadarDeviceId = (uint)RadarDeviceId;
            ScriptOps.m_MainForm.StaticConfigTab.UpdatePerChirpPhaseShifterEnableConfigData();
            m_RFMiscConfigParams.PerChirpPhaseShifterEnable = PerChirpPhaseShifterEnable;
            ScriptOps.m_MainForm.StaticConfigTab.UpdatePerChirpPhaseShifterEnableDataFrmCmdSrc();
            return iSetPerChirpPhaseShifterEnableConfig_Gui(true, false);
        }

        public int UpdateNSetFreqLimitConfData(ushort RadarDeviceId, double FreqLimitLow, double FreqLimitHigh)
        {
            GlobalRef.g_RadarDeviceId = (uint)RadarDeviceId;
            ScriptOps.m_MainForm.StaticConfigTab.UpdateFreqLimitConfigData();
            m_RFCalibFrequencyLimitConfigParameters.FreqLimitLow = FreqLimitLow;
            m_RFCalibFrequencyLimitConfigParameters.FreqLimitHigh = FreqLimitHigh;
            ScriptOps.m_MainForm.StaticConfigTab.UpdateFreqLimitConfigDataFrmCmdSrc();
            return iSetFreqLimitConfig_Gui(true, false);
        }

        public int UpdateNRFDeviceAEControlConfData(ushort RadarDeviceId, uint RFAEDirection, byte AEControl, ushort Reserved, byte BSSDigitalControl, byte AsyncEventCRCConfig, byte Reserved2, ushort Reserved3)
        {
            GlobalRef.g_RadarDeviceId = (uint)RadarDeviceId;
            ScriptOps.m_MainForm.StaticConfigTab.UpdateRFDeviceAEControlConfigData();
            m_RFDeviceAEControlConfigParameters.f0002fd = (RFAEDirection & 3U);
            m_RFDeviceAEControlConfigParameters.RFMonAEDirection = RFAEDirection >> 2;
            m_RFDeviceAEControlConfigParameters.AEFrameStartControl = (byte)(AEControl & 1);
            m_RFDeviceAEControlConfigParameters.AEFrameStopControl = (byte)(AEControl >> 1);
            m_RFDeviceAEControlConfigParameters.Reserved = Reserved;
            m_RFDeviceAEControlConfigParameters.BSSDigitalControl = BSSDigitalControl;
            m_RFDeviceAEControlConfigParameters.AsyncEventCRCConfig = AsyncEventCRCConfig;
            ScriptOps.m_MainForm.StaticConfigTab.UpdateRFDeviceAEControlConfigDataFrmCmdSrc();
            return iSetRFDeviceAEControlConfig_Gui(true, false);
        }

        public int UpdateNSetCalMonFreqTxPowLimitConfData(ushort RadarDeviceId, double FreqLimitLowTx1, double FreqLimitLowTx2, double FreqLimitLowTx3, double FreqLimitHighTx1, double FreqLimitHighTx2, double FreqLimitHighTx3, double Tx1PowerBackoff, double Tx2PowerBackoff, double Tx3PowerBackoff)
        {
            GlobalRef.g_RadarDeviceId = (uint)RadarDeviceId;
            ScriptOps.m_MainForm.StaticConfigTab.UpdateCalMonFreqTxPowerLimitConfigData();
            m_CalMonFrequencyTxPowerLimitConfigParameters.FreqLimitLowTx1 = FreqLimitLowTx1;
            m_CalMonFrequencyTxPowerLimitConfigParameters.FreqLimitLowTx2 = FreqLimitLowTx2;
            m_CalMonFrequencyTxPowerLimitConfigParameters.FreqLimitLowTx3 = FreqLimitLowTx3;
            m_CalMonFrequencyTxPowerLimitConfigParameters.FreqLimitHighTx1 = FreqLimitHighTx1;
            m_CalMonFrequencyTxPowerLimitConfigParameters.FreqLimitHighTx2 = FreqLimitHighTx2;
            m_CalMonFrequencyTxPowerLimitConfigParameters.FreqLimitHighTx3 = FreqLimitHighTx3;
            m_CalMonFrequencyTxPowerLimitConfigParameters.Tx1PowerBackoff = Tx1PowerBackoff;
            m_CalMonFrequencyTxPowerLimitConfigParameters.Tx2PowerBackoff = Tx2PowerBackoff;
            m_CalMonFrequencyTxPowerLimitConfigParameters.Tx3PowerBackoff = Tx3PowerBackoff;
            ScriptOps.m_MainForm.StaticConfigTab.UpdateCalMonFreqTxPowerLimitConfigDataFrmCmdSrc();
            return iSetCalMonFreqTxPowerLimitConfig_Gui(true, false);
        }

        public int UpdateNSetRxSignalAndImgageBandEnergyMonConfData(ushort RadarDeviceId, char ProfileIndex, short SigImGMonPriTimeSliceNumSamples, char SigImGMonNumSlices)
        {
            GlobalRef.g_RadarDeviceId = (uint)RadarDeviceId;
            ScriptOps.m_MainForm.AnalogMon2Config.UpdateSignalandImageMonConfigData();
            m_MonSignalAndImageConfigParameters.ProfileIndex = ProfileIndex;
            m_MonSignalAndImageConfigParameters.SigImGMonPriTimeSliceNumSamples = SigImGMonPriTimeSliceNumSamples;
            m_MonSignalAndImageConfigParameters.SigImGMonNumSlices = SigImGMonNumSlices;
            ScriptOps.m_MainForm.AnalogMon2Config.UpdateSignalandImageMonConfigDataFrmCmdSrc();
            return iSetSignalandImageMonConfig_Gui(true, false);
        }

        public int UpdateNSetRxIfSatMonConfData(ushort RadarDeviceId, byte ProfileIndex, byte SatMonSelect, byte Reserved1, byte Reserved2, double SatMonPrimaryTimeSliceDuration, short SatMonNumSlices, byte SatMonRxChannelMask, byte Reserved3, byte Reserved4, byte Reserved5, uint Reserved6, uint Reserved7)
        {
            GlobalRef.g_RadarDeviceId = (uint)RadarDeviceId;
            ScriptOps.m_MainForm.AnalogMon2Config.UpdateRXSaturationDetectorMonConfigData();
            m_MonRxSaturationDetectorConfigParameters.ProfileIndex = ProfileIndex;
            m_MonRxSaturationDetectorConfigParameters.SatMonSelect = SatMonSelect;
            m_MonRxSaturationDetectorConfigParameters.Reserved1 = Reserved1;
            m_MonRxSaturationDetectorConfigParameters.Reserved2 = Reserved2;
            m_MonRxSaturationDetectorConfigParameters.SatMonPrimaryTimeSliceDuration = SatMonPrimaryTimeSliceDuration;
            m_MonRxSaturationDetectorConfigParameters.SatMonNumSlices = SatMonNumSlices;
            m_MonRxSaturationDetectorConfigParameters.SatMonRxChannelMask = SatMonRxChannelMask;
            m_MonRxSaturationDetectorConfigParameters.Reserved3 = Reserved3;
            m_MonRxSaturationDetectorConfigParameters.Reserved4 = Reserved4;
            m_MonRxSaturationDetectorConfigParameters.Reserved5 = Reserved5;
            m_MonRxSaturationDetectorConfigParameters.Reserved6 = Reserved6;
            m_MonRxSaturationDetectorConfigParameters.Reserved7 = Reserved7;
            ScriptOps.m_MainForm.AnalogMon2Config.UpdateRXSaturationDetectorMonConfigDataFrmCmdSrc();
            return iSetRXSaturationDetectorMonConfig_Gui(true, false);
        }

        public int UpdateNTxGainTempLUTSetConfData(ushort RadarDeviceId, char ProfileIndex, char Tx1GainCodeTempLessThanNeg30, char Tx1GainCodeTempNeg30ToNeg20, char Tx1GainCodeTempNeg20ToNeg10, char Tx1GainCodeTempNeg10To0, char Tx1GainCodeTemp0To10, char Tx1GainCodeTemp10To20, char Tx1GainCodeTemp20To30, char Tx1GainCodeTemp30To40, char Tx1GainCodeTemp40To50, char Tx1GainCodeTemp50To60, char Tx1GainCodeTemp60To70, char Tx1GainCodeTemp70To80, char Tx1GainCodeTemp80To90, char Tx1GainCodeTemp90To100, char Tx1GainCodeTemp100To110, char Tx1GainCodeTemp110To120, char Tx1GainCodeTemp120To130, char Tx1GainCodeTemp130To140, char Tx1GainCodeTempMoreThan140, char Tx2GainCodeTempLessThanNeg30, char Tx2GainCodeTempNeg30ToNeg20, char Tx2GainCodeTempNeg20ToNeg10, char Tx2GainCodeTempNeg10To0, char Tx2GainCodeTemp0To10, char Tx2GainCodeTemp10To20, char Tx2GainCodeTemp20To30, char Tx2GainCodeTemp30To40, char Tx2GainCodeTemp40To50, char Tx2GainCodeTemp50To60, char Tx2GainCodeTemp60To70, char Tx2GainCodeTemp70To80, char Tx2GainCodeTemp80To90, char Tx2GainCodeTemp90To100, char Tx2GainCodeTemp100To110, char Tx2GainCodeTemp110To120, char Tx2GainCodeTemp120To130, char Tx2GainCodeTemp130To140, char Tx2GainCodeTempMoreThan140, char Tx3GainCodeTempLessThanNeg30, char Tx3GainCodeTempNeg30ToNeg20, char Tx3GainCodeTempNeg20ToNeg10, char Tx3GainCodeTempNeg10To0, char Tx3GainCodeTemp0To10, char Tx3GainCodeTemp10To20, char Tx3GainCodeTemp20To30, char Tx3GainCodeTemp30To40, char Tx3GainCodeTemp40To50, char Tx3GainCodeTemp50To60, char Tx3GainCodeTemp60To70, char Tx3GainCodeTemp70To80, char Tx3GainCodeTemp80To90, char Tx3GainCodeTemp90To100, char Tx3GainCodeTemp100To110, char Tx3GainCodeTemp110To120, char Tx3GainCodeTemp120To130, char Tx3GainCodeTemp130To140, char Tx3GainCodeTempMoreThan140)
        {
            GlobalRef.g_RadarDeviceId = (uint)RadarDeviceId;
            ScriptOps.m_MainForm.TxRxGainTempLUTCfg.UpdateTxGainTempLUTConfigData();
            m_TxGainTempLUTConfigParameters.ProfileIndex = ProfileIndex;
            m_TxGainTempLUTConfigParameters.Tx1GainCodeTempLessThanNeg30 = Tx1GainCodeTempLessThanNeg30;
            m_TxGainTempLUTConfigParameters.Tx1GainCodeTempNeg30ToNeg20 = Tx1GainCodeTempNeg30ToNeg20;
            m_TxGainTempLUTConfigParameters.Tx1GainCodeTempNeg20ToNeg10 = Tx1GainCodeTempNeg20ToNeg10;
            m_TxGainTempLUTConfigParameters.Tx1GainCodeTempNeg10To0 = Tx1GainCodeTempNeg10To0;
            m_TxGainTempLUTConfigParameters.Tx1GainCodeTemp0To10 = Tx1GainCodeTemp0To10;
            m_TxGainTempLUTConfigParameters.Tx1GainCodeTemp10To20 = Tx1GainCodeTemp10To20;
            m_TxGainTempLUTConfigParameters.Tx1GainCodeTemp20To30 = Tx1GainCodeTemp20To30;
            m_TxGainTempLUTConfigParameters.Tx1GainCodeTemp30To40 = Tx1GainCodeTemp30To40;
            m_TxGainTempLUTConfigParameters.Tx1GainCodeTemp40To50 = Tx1GainCodeTemp40To50;
            m_TxGainTempLUTConfigParameters.Tx1GainCodeTemp50To60 = Tx1GainCodeTemp50To60;
            m_TxGainTempLUTConfigParameters.Tx1GainCodeTemp60To70 = Tx1GainCodeTemp60To70;
            m_TxGainTempLUTConfigParameters.Tx1GainCodeTemp70To80 = Tx1GainCodeTemp70To80;
            m_TxGainTempLUTConfigParameters.Tx1GainCodeTemp80To90 = Tx1GainCodeTemp80To90;
            m_TxGainTempLUTConfigParameters.Tx1GainCodeTemp90To100 = Tx1GainCodeTemp90To100;
            m_TxGainTempLUTConfigParameters.Tx1GainCodeTemp100To110 = Tx1GainCodeTemp100To110;
            m_TxGainTempLUTConfigParameters.Tx1GainCodeTemp110To120 = Tx1GainCodeTemp110To120;
            m_TxGainTempLUTConfigParameters.Tx1GainCodeTemp120To130 = Tx1GainCodeTemp120To130;
            m_TxGainTempLUTConfigParameters.Tx1GainCodeTemp130To140 = Tx1GainCodeTemp130To140;
            m_TxGainTempLUTConfigParameters.Tx1GainCodeTempMoreThan140 = Tx1GainCodeTempMoreThan140;
            m_TxGainTempLUTConfigParameters.Tx2GainCodeTempLessThanNeg30 = Tx2GainCodeTempLessThanNeg30;
            m_TxGainTempLUTConfigParameters.Tx2GainCodeTempNeg30ToNeg20 = Tx2GainCodeTempNeg30ToNeg20;
            m_TxGainTempLUTConfigParameters.Tx2GainCodeTempNeg20ToNeg10 = Tx2GainCodeTempNeg20ToNeg10;
            m_TxGainTempLUTConfigParameters.Tx2GainCodeTempNeg10To0 = Tx2GainCodeTempNeg10To0;
            m_TxGainTempLUTConfigParameters.Tx2GainCodeTemp0To10 = Tx2GainCodeTemp0To10;
            m_TxGainTempLUTConfigParameters.Tx2GainCodeTemp10To20 = Tx2GainCodeTemp10To20;
            m_TxGainTempLUTConfigParameters.Tx2GainCodeTemp20To30 = Tx2GainCodeTemp20To30;
            m_TxGainTempLUTConfigParameters.Tx2GainCodeTemp30To40 = Tx2GainCodeTemp30To40;
            m_TxGainTempLUTConfigParameters.Tx2GainCodeTemp40To50 = Tx2GainCodeTemp40To50;
            m_TxGainTempLUTConfigParameters.Tx2GainCodeTemp50To60 = Tx2GainCodeTemp50To60;
            m_TxGainTempLUTConfigParameters.Tx2GainCodeTemp60To70 = Tx2GainCodeTemp60To70;
            m_TxGainTempLUTConfigParameters.Tx2GainCodeTemp70To80 = Tx2GainCodeTemp70To80;
            m_TxGainTempLUTConfigParameters.Tx2GainCodeTemp80To90 = Tx2GainCodeTemp80To90;
            m_TxGainTempLUTConfigParameters.Tx2GainCodeTemp90To100 = Tx2GainCodeTemp90To100;
            m_TxGainTempLUTConfigParameters.Tx2GainCodeTemp100To110 = Tx2GainCodeTemp100To110;
            m_TxGainTempLUTConfigParameters.Tx2GainCodeTemp110To120 = Tx2GainCodeTemp110To120;
            m_TxGainTempLUTConfigParameters.Tx2GainCodeTemp120To130 = Tx2GainCodeTemp120To130;
            m_TxGainTempLUTConfigParameters.Tx2GainCodeTemp130To140 = Tx2GainCodeTemp130To140;
            m_TxGainTempLUTConfigParameters.Tx2GainCodeTempMoreThan140 = Tx2GainCodeTempMoreThan140;
            m_TxGainTempLUTConfigParameters.Tx3GainCodeTempLessThanNeg30 = Tx3GainCodeTempLessThanNeg30;
            m_TxGainTempLUTConfigParameters.Tx3GainCodeTempNeg30ToNeg20 = Tx3GainCodeTempNeg30ToNeg20;
            m_TxGainTempLUTConfigParameters.Tx3GainCodeTempNeg20ToNeg10 = Tx3GainCodeTempNeg20ToNeg10;
            m_TxGainTempLUTConfigParameters.Tx3GainCodeTempNeg10To0 = Tx3GainCodeTempNeg10To0;
            m_TxGainTempLUTConfigParameters.Tx3GainCodeTemp0To10 = Tx3GainCodeTemp0To10;
            m_TxGainTempLUTConfigParameters.Tx3GainCodeTemp10To20 = Tx3GainCodeTemp10To20;
            m_TxGainTempLUTConfigParameters.Tx3GainCodeTemp20To30 = Tx3GainCodeTemp20To30;
            m_TxGainTempLUTConfigParameters.Tx3GainCodeTemp30To40 = Tx3GainCodeTemp30To40;
            m_TxGainTempLUTConfigParameters.Tx3GainCodeTemp40To50 = Tx3GainCodeTemp40To50;
            m_TxGainTempLUTConfigParameters.Tx3GainCodeTemp50To60 = Tx3GainCodeTemp50To60;
            m_TxGainTempLUTConfigParameters.Tx3GainCodeTemp60To70 = Tx3GainCodeTemp60To70;
            m_TxGainTempLUTConfigParameters.Tx3GainCodeTemp70To80 = Tx3GainCodeTemp70To80;
            m_TxGainTempLUTConfigParameters.Tx3GainCodeTemp80To90 = Tx3GainCodeTemp80To90;
            m_TxGainTempLUTConfigParameters.Tx3GainCodeTemp90To100 = Tx3GainCodeTemp90To100;
            m_TxGainTempLUTConfigParameters.Tx3GainCodeTemp100To110 = Tx3GainCodeTemp100To110;
            m_TxGainTempLUTConfigParameters.Tx3GainCodeTemp110To120 = Tx3GainCodeTemp110To120;
            m_TxGainTempLUTConfigParameters.Tx3GainCodeTemp120To130 = Tx3GainCodeTemp120To130;
            m_TxGainTempLUTConfigParameters.Tx3GainCodeTemp130To140 = Tx3GainCodeTemp130To140;
            m_TxGainTempLUTConfigParameters.Tx3GainCodeTempMoreThan140 = Tx3GainCodeTempMoreThan140;
            ScriptOps.m_MainForm.TxRxGainTempLUTCfg.UpdateTxGainTempLUTConfigDataFrmCmdSrc();
            return iSetTxGainTempLUTConfig_Gui(true, false);
        }

        public int UpdateNTxGainTempLUTGetConfData(ushort RadarDeviceId, char ProfileIndex)
        {
            int result = -1;
            GlobalRef.g_RadarDeviceId = (uint)RadarDeviceId;
            ScriptOps.m_MainForm.TxRxGainTempLUTCfg.UpdateTxGainTempLUTGetConfigData();
            m_TxGainTempLUTGetConfigParameters.ProfileIndex = ProfileIndex;
            ScriptOps.m_MainForm.TxRxGainTempLUTCfg.UpdateTxGainTempLUTGetConfigDataFrmCmdSrc();
            return result;
        }

        public int UpdateNTxGainTempLUTGetConfData_cmd(out string profileIndex, out string Tx1GainCodeTempLessThanNeg30, out string Tx1GainCodeTempNeg30ToNeg20, out string Tx1GainCodeTempNeg20ToNeg10, out string Tx1GainCodeTempNeg10To0, out string Tx1GainCodeTemp0To10, out string Tx1GainCodeTemp10To20, out string Tx1GainCodeTemp20To30, out string Tx1GainCodeTemp30To40, out string Tx1GainCodeTemp40To50, out string Tx1GainCodeTemp50To60, out string Tx1GainCodeTemp60To70, out string Tx1GainCodeTemp70To80, out string Tx1GainCodeTemp80To90, out string Tx1GainCodeTemp90To100, out string Tx1GainCodeTemp100To110, out string Tx1GainCodeTemp110To120, out string Tx1GainCodeTemp120To130, out string Tx1GainCodeTemp130To140, out string Tx1GainCodeTempMoreThan140, out string Tx2GainCodeTempLessThanNeg30, out string Tx2GainCodeTempNeg30ToNeg20, out string Tx2GainCodeTempNeg20ToNeg10, out string Tx2GainCodeTempNeg10To0, out string Tx2GainCodeTemp0To10, out string Tx2GainCodeTemp10To20, out string Tx2GainCodeTemp20To30, out string Tx2GainCodeTemp30To40, out string Tx2GainCodeTemp40To50, out string Tx2GainCodeTemp50To60, out string Tx2GainCodeTemp60To70, out string Tx2GainCodeTemp70To80, out string Tx2GainCodeTemp80To90, out string Tx2GainCodeTemp90To100, out string Tx2GainCodeTemp100To110, out string Tx2GainCodeTemp110To120, out string Tx2GainCodeTemp120To130, out string Tx2GainCodeTemp130To140, out string Tx2GainCodeTempMoreThan140, out string Tx3GainCodeTempLessThanNeg30, out string Tx3GainCodeTempNeg30ToNeg20, out string Tx3GainCodeTempNeg20ToNeg10, out string Tx3GainCodeTempNeg10To0, out string Tx3GainCodeTemp0To10, out string Tx3GainCodeTemp10To20, out string Tx3GainCodeTemp20To30, out string Tx3GainCodeTemp30To40, out string Tx3GainCodeTemp40To50, out string Tx3GainCodeTemp50To60, out string Tx3GainCodeTemp60To70, out string Tx3GainCodeTemp70To80, out string Tx3GainCodeTemp80To90, out string Tx3GainCodeTemp90To100, out string Tx3GainCodeTemp100To110, out string Tx3GainCodeTemp110To120, out string Tx3GainCodeTemp120To130, out string Tx3GainCodeTemp130To140, out string Tx3GainCodeTempMoreThan140)
        {
            profileIndex = string.Empty;
            Tx1GainCodeTempLessThanNeg30 = string.Empty;
            Tx1GainCodeTempNeg30ToNeg20 = string.Empty;
            Tx1GainCodeTempNeg20ToNeg10 = string.Empty;
            Tx1GainCodeTempNeg10To0 = string.Empty;
            Tx1GainCodeTemp0To10 = string.Empty;
            Tx1GainCodeTemp10To20 = string.Empty;
            Tx1GainCodeTemp20To30 = string.Empty;
            Tx1GainCodeTemp30To40 = string.Empty;
            Tx1GainCodeTemp40To50 = string.Empty;
            Tx1GainCodeTemp50To60 = string.Empty;
            Tx1GainCodeTemp60To70 = string.Empty;
            Tx1GainCodeTemp70To80 = string.Empty;
            Tx1GainCodeTemp80To90 = string.Empty;
            Tx1GainCodeTemp90To100 = string.Empty;
            Tx1GainCodeTemp100To110 = string.Empty;
            Tx1GainCodeTemp110To120 = string.Empty;
            Tx1GainCodeTemp120To130 = string.Empty;
            Tx1GainCodeTemp130To140 = string.Empty;
            Tx1GainCodeTempMoreThan140 = string.Empty;
            Tx2GainCodeTempLessThanNeg30 = string.Empty;
            Tx2GainCodeTempNeg30ToNeg20 = string.Empty;
            Tx2GainCodeTempNeg20ToNeg10 = string.Empty;
            Tx2GainCodeTempNeg10To0 = string.Empty;
            Tx2GainCodeTemp0To10 = string.Empty;
            Tx2GainCodeTemp10To20 = string.Empty;
            Tx2GainCodeTemp20To30 = string.Empty;
            Tx2GainCodeTemp30To40 = string.Empty;
            Tx2GainCodeTemp40To50 = string.Empty;
            Tx2GainCodeTemp50To60 = string.Empty;
            Tx2GainCodeTemp60To70 = string.Empty;
            Tx2GainCodeTemp70To80 = string.Empty;
            Tx2GainCodeTemp80To90 = string.Empty;
            Tx2GainCodeTemp90To100 = string.Empty;
            Tx2GainCodeTemp100To110 = string.Empty;
            Tx2GainCodeTemp110To120 = string.Empty;
            Tx2GainCodeTemp120To130 = string.Empty;
            Tx2GainCodeTemp130To140 = string.Empty;
            Tx2GainCodeTempMoreThan140 = string.Empty;
            Tx3GainCodeTempLessThanNeg30 = string.Empty;
            Tx3GainCodeTempNeg30ToNeg20 = string.Empty;
            Tx3GainCodeTempNeg20ToNeg10 = string.Empty;
            Tx3GainCodeTempNeg10To0 = string.Empty;
            Tx3GainCodeTemp0To10 = string.Empty;
            Tx3GainCodeTemp10To20 = string.Empty;
            Tx3GainCodeTemp20To30 = string.Empty;
            Tx3GainCodeTemp30To40 = string.Empty;
            Tx3GainCodeTemp40To50 = string.Empty;
            Tx3GainCodeTemp50To60 = string.Empty;
            Tx3GainCodeTemp60To70 = string.Empty;
            Tx3GainCodeTemp70To80 = string.Empty;
            Tx3GainCodeTemp80To90 = string.Empty;
            Tx3GainCodeTemp90To100 = string.Empty;
            Tx3GainCodeTemp100To110 = string.Empty;
            Tx3GainCodeTemp110To120 = string.Empty;
            Tx3GainCodeTemp120To130 = string.Empty;
            Tx3GainCodeTemp130To140 = string.Empty;
            Tx3GainCodeTempMoreThan140 = string.Empty;
            ScriptOps.m_MainForm.TxRxGainTempLUTCfg.UpdateTxGainTempLUTGetConfigData();
            return iSetTxGainTempLUTGetConf_ImplForLuaCommand(out profileIndex, out Tx1GainCodeTempLessThanNeg30, out Tx1GainCodeTempNeg30ToNeg20, out Tx1GainCodeTempNeg20ToNeg10, out Tx1GainCodeTempNeg10To0, out Tx1GainCodeTemp0To10, out Tx1GainCodeTemp10To20, out Tx1GainCodeTemp20To30, out Tx1GainCodeTemp30To40, out Tx1GainCodeTemp40To50, out Tx1GainCodeTemp50To60, out Tx1GainCodeTemp60To70, out Tx1GainCodeTemp70To80, out Tx1GainCodeTemp80To90, out Tx1GainCodeTemp90To100, out Tx1GainCodeTemp100To110, out Tx1GainCodeTemp110To120, out Tx1GainCodeTemp120To130, out Tx1GainCodeTemp130To140, out Tx1GainCodeTempMoreThan140, out Tx2GainCodeTempLessThanNeg30, out Tx2GainCodeTempNeg30ToNeg20, out Tx2GainCodeTempNeg20ToNeg10, out Tx2GainCodeTempNeg10To0, out Tx2GainCodeTemp0To10, out Tx2GainCodeTemp10To20, out Tx2GainCodeTemp20To30, out Tx2GainCodeTemp30To40, out Tx2GainCodeTemp40To50, out Tx2GainCodeTemp50To60, out Tx2GainCodeTemp60To70, out Tx2GainCodeTemp70To80, out Tx2GainCodeTemp80To90, out Tx2GainCodeTemp90To100, out Tx2GainCodeTemp100To110, out Tx2GainCodeTemp110To120, out Tx2GainCodeTemp120To130, out Tx2GainCodeTemp130To140, out Tx2GainCodeTempMoreThan140, out Tx3GainCodeTempLessThanNeg30, out Tx3GainCodeTempNeg30ToNeg20, out Tx3GainCodeTempNeg20ToNeg10, out Tx3GainCodeTempNeg10To0, out Tx3GainCodeTemp0To10, out Tx3GainCodeTemp10To20, out Tx3GainCodeTemp20To30, out Tx3GainCodeTemp30To40, out Tx3GainCodeTemp40To50, out Tx3GainCodeTemp50To60, out Tx3GainCodeTemp60To70, out Tx3GainCodeTemp70To80, out Tx3GainCodeTemp80To90, out Tx3GainCodeTemp90To100, out Tx3GainCodeTemp100To110, out Tx3GainCodeTemp110To120, out Tx3GainCodeTemp120To130, out Tx3GainCodeTemp130To140, out Tx3GainCodeTempMoreThan140);
        }

        private int iSetTxGainTempLUTGetConf_ImplForLuaCommand(out string profileIndex, out string Tx1GainCodeTempLessThanNeg30, out string Tx1GainCodeTempNeg30ToNeg20, out string Tx1GainCodeTempNeg20ToNeg10, out string Tx1GainCodeTempNeg10To0, out string Tx1GainCodeTemp0To10, out string Tx1GainCodeTemp10To20, out string Tx1GainCodeTemp20To30, out string Tx1GainCodeTemp30To40, out string Tx1GainCodeTemp40To50, out string Tx1GainCodeTemp50To60, out string Tx1GainCodeTemp60To70, out string Tx1GainCodeTemp70To80, out string Tx1GainCodeTemp80To90, out string Tx1GainCodeTemp90To100, out string Tx1GainCodeTemp100To110, out string Tx1GainCodeTemp110To120, out string Tx1GainCodeTemp120To130, out string Tx1GainCodeTemp130To140, out string Tx1GainCodeTempMoreThan140, out string Tx2GainCodeTempLessThanNeg30, out string Tx2GainCodeTempNeg30ToNeg20, out string Tx2GainCodeTempNeg20ToNeg10, out string Tx2GainCodeTempNeg10To0, out string Tx2GainCodeTemp0To10, out string Tx2GainCodeTemp10To20, out string Tx2GainCodeTemp20To30, out string Tx2GainCodeTemp30To40, out string Tx2GainCodeTemp40To50, out string Tx2GainCodeTemp50To60, out string Tx2GainCodeTemp60To70, out string Tx2GainCodeTemp70To80, out string Tx2GainCodeTemp80To90, out string Tx2GainCodeTemp90To100, out string Tx2GainCodeTemp100To110, out string Tx2GainCodeTemp110To120, out string Tx2GainCodeTemp120To130, out string Tx2GainCodeTemp130To140, out string Tx2GainCodeTempMoreThan140, out string Tx3GainCodeTempLessThanNeg30, out string Tx3GainCodeTempNeg30ToNeg20, out string Tx3GainCodeTempNeg20ToNeg10, out string Tx3GainCodeTempNeg10To0, out string Tx3GainCodeTemp0To10, out string Tx3GainCodeTemp10To20, out string Tx3GainCodeTemp20To30, out string Tx3GainCodeTemp30To40, out string Tx3GainCodeTemp40To50, out string Tx3GainCodeTemp50To60, out string Tx3GainCodeTemp60To70, out string Tx3GainCodeTemp70To80, out string Tx3GainCodeTemp80To90, out string Tx3GainCodeTemp90To100, out string Tx3GainCodeTemp100To110, out string Tx3GainCodeTemp110To120, out string Tx3GainCodeTemp120To130, out string Tx3GainCodeTemp130To140, out string Tx3GainCodeTempMoreThan140)
        {
            profileIndex = string.Empty;
            Tx1GainCodeTempLessThanNeg30 = string.Empty;
            Tx1GainCodeTempNeg30ToNeg20 = string.Empty;
            Tx1GainCodeTempNeg20ToNeg10 = string.Empty;
            Tx1GainCodeTempNeg10To0 = string.Empty;
            Tx1GainCodeTemp0To10 = string.Empty;
            Tx1GainCodeTemp10To20 = string.Empty;
            Tx1GainCodeTemp20To30 = string.Empty;
            Tx1GainCodeTemp30To40 = string.Empty;
            Tx1GainCodeTemp40To50 = string.Empty;
            Tx1GainCodeTemp50To60 = string.Empty;
            Tx1GainCodeTemp60To70 = string.Empty;
            Tx1GainCodeTemp70To80 = string.Empty;
            Tx1GainCodeTemp80To90 = string.Empty;
            Tx1GainCodeTemp90To100 = string.Empty;
            Tx1GainCodeTemp100To110 = string.Empty;
            Tx1GainCodeTemp110To120 = string.Empty;
            Tx1GainCodeTemp120To130 = string.Empty;
            Tx1GainCodeTemp130To140 = string.Empty;
            Tx1GainCodeTempMoreThan140 = string.Empty;
            Tx2GainCodeTempLessThanNeg30 = string.Empty;
            Tx2GainCodeTempNeg30ToNeg20 = string.Empty;
            Tx2GainCodeTempNeg20ToNeg10 = string.Empty;
            Tx2GainCodeTempNeg10To0 = string.Empty;
            Tx2GainCodeTemp0To10 = string.Empty;
            Tx2GainCodeTemp10To20 = string.Empty;
            Tx2GainCodeTemp20To30 = string.Empty;
            Tx2GainCodeTemp30To40 = string.Empty;
            Tx2GainCodeTemp40To50 = string.Empty;
            Tx2GainCodeTemp50To60 = string.Empty;
            Tx2GainCodeTemp60To70 = string.Empty;
            Tx2GainCodeTemp70To80 = string.Empty;
            Tx2GainCodeTemp80To90 = string.Empty;
            Tx2GainCodeTemp90To100 = string.Empty;
            Tx2GainCodeTemp100To110 = string.Empty;
            Tx2GainCodeTemp110To120 = string.Empty;
            Tx2GainCodeTemp120To130 = string.Empty;
            Tx2GainCodeTemp130To140 = string.Empty;
            Tx2GainCodeTempMoreThan140 = string.Empty;
            Tx3GainCodeTempLessThanNeg30 = string.Empty;
            Tx3GainCodeTempNeg30ToNeg20 = string.Empty;
            Tx3GainCodeTempNeg20ToNeg10 = string.Empty;
            Tx3GainCodeTempNeg10To0 = string.Empty;
            Tx3GainCodeTemp0To10 = string.Empty;
            Tx3GainCodeTemp10To20 = string.Empty;
            Tx3GainCodeTemp20To30 = string.Empty;
            Tx3GainCodeTemp30To40 = string.Empty;
            Tx3GainCodeTemp40To50 = string.Empty;
            Tx3GainCodeTemp50To60 = string.Empty;
            Tx3GainCodeTemp60To70 = string.Empty;
            Tx3GainCodeTemp70To80 = string.Empty;
            Tx3GainCodeTemp80To90 = string.Empty;
            Tx3GainCodeTemp90To100 = string.Empty;
            Tx3GainCodeTemp100To110 = string.Empty;
            Tx3GainCodeTemp110To120 = string.Empty;
            Tx3GainCodeTemp120To130 = string.Empty;
            Tx3GainCodeTemp130To140 = string.Empty;
            Tx3GainCodeTempMoreThan140 = string.Empty;
            TxGainTempLutGetConfigurationParam.ProfileIndex = (byte)m_TxGainTempLUTGetConfigParameters.ProfileIndex;
            TxGainTempLutGetConfigurationParam.Reserved = 0;
            TxGainTempLutGetConfigurationParam.Reserved2 = 0;
            IntPtr data = GCHandle.Alloc(TxGainTempLutGetConfigurationParam, GCHandleType.Pinned).AddrOfPinnedObject();
            GCHandle.Alloc(TxGainTempLutReportDataParam, GCHandleType.Pinned).AddrOfPinnedObject();
            int num;
            if (GlobalRef.g_NtvRS232Connect[(int)GlobalRef.g_RadarDeviceIndex] && GlobalRef.g_CasCadeDeviceSpiConnect == 0U)
            {
                num = m_TsWrapper.Calling_WriteAddr_Single(4294959848U, 1U);
                if (m_GuiManager.DllOps.itempDisconnect(false) == 0)
                {
                    string full_command = string.Format("Debug Port Disconnected", new object[0]);
                    m_GuiManager.RecordLog(0, full_command);
                    if (!GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
                    {
                        iRs232ConnectDisconnect_impl();
                    }
                }
            }
            if (m_RadarDeviceModeConfigParams.NumberOfRadarDevicesDetected <= 1)
            {
                string full_command2 = string.Format("ar1.TxGainTempLutGet({0})", new object[]
                {
                    m_TxGainTempLUTGetConfigParameters.ProfileIndex
                });
                m_GuiManager.RecordLog(6, full_command2);
            }
            else
            {
                string full_command3 = string.Format("ar1.TxGainTempLutGet_mult({0}, {1})", new object[]
                {
                    GlobalRef.g_RadarDeviceId,
                    m_TxGainTempLUTGetConfigParameters.ProfileIndex
                });
                m_GuiManager.RecordLog(6, full_command3);
            }
            num = Imports.rlTxGainTempLutGet((byte)GlobalRef.g_RadarDeviceId, data, out TxGainTempLutReportDataParam);
            if (num == 0)
            {
                profileIndex = Convert.ToString(TxGainTempLutReportDataParam.ProfileIndex);
                Tx1GainCodeTempLessThanNeg30 = Convert.ToString(TxGainTempLutReportDataParam.Tx1GainCodeTempLessThanNeg30);
                Tx1GainCodeTempNeg30ToNeg20 = Convert.ToString(TxGainTempLutReportDataParam.Tx1GainCodeTempNeg30ToNeg20);
                Tx1GainCodeTempNeg20ToNeg10 = Convert.ToString(TxGainTempLutReportDataParam.Tx1GainCodeTempNeg20ToNeg10);
                Tx1GainCodeTempNeg10To0 = Convert.ToString(TxGainTempLutReportDataParam.Tx1GainCodeTempNeg10To0);
                Tx1GainCodeTemp0To10 = Convert.ToString(TxGainTempLutReportDataParam.Tx1GainCodeTemp0To10);
                Tx1GainCodeTemp10To20 = Convert.ToString(TxGainTempLutReportDataParam.Tx1GainCodeTemp10To20);
                Tx1GainCodeTemp20To30 = Convert.ToString(TxGainTempLutReportDataParam.Tx1GainCodeTemp20To30);
                Tx1GainCodeTemp30To40 = Convert.ToString(TxGainTempLutReportDataParam.Tx1GainCodeTemp30To40);
                Tx1GainCodeTemp40To50 = Convert.ToString(TxGainTempLutReportDataParam.Tx1GainCodeTemp40To50);
                Tx1GainCodeTemp50To60 = Convert.ToString(TxGainTempLutReportDataParam.Tx1GainCodeTemp50To60);
                Tx1GainCodeTemp60To70 = Convert.ToString(TxGainTempLutReportDataParam.Tx1GainCodeTemp60To70);
                Tx1GainCodeTemp70To80 = Convert.ToString(TxGainTempLutReportDataParam.Tx1GainCodeTemp70To80);
                Tx1GainCodeTemp80To90 = Convert.ToString(TxGainTempLutReportDataParam.Tx1GainCodeTemp80To90);
                Tx1GainCodeTemp90To100 = Convert.ToString(TxGainTempLutReportDataParam.Tx1GainCodeTemp90To100);
                Tx1GainCodeTemp100To110 = Convert.ToString(TxGainTempLutReportDataParam.Tx1GainCodeTemp100To110);
                Tx1GainCodeTemp110To120 = Convert.ToString(TxGainTempLutReportDataParam.Tx1GainCodeTemp110To120);
                Tx1GainCodeTemp120To130 = Convert.ToString(TxGainTempLutReportDataParam.Tx1GainCodeTemp120To130);
                Tx1GainCodeTemp130To140 = Convert.ToString(TxGainTempLutReportDataParam.Tx1GainCodeTemp130To140);
                Tx1GainCodeTempMoreThan140 = Convert.ToString(TxGainTempLutReportDataParam.Tx1GainCodeTempMoreThan140);
                Tx2GainCodeTempLessThanNeg30 = Convert.ToString(TxGainTempLutReportDataParam.Tx2GainCodeTempLessThanNeg30);
                Tx2GainCodeTempNeg30ToNeg20 = Convert.ToString(TxGainTempLutReportDataParam.Tx2GainCodeTempNeg30ToNeg20);
                Tx2GainCodeTempNeg20ToNeg10 = Convert.ToString(TxGainTempLutReportDataParam.Tx2GainCodeTempNeg20ToNeg10);
                Tx2GainCodeTempNeg10To0 = Convert.ToString(TxGainTempLutReportDataParam.Tx2GainCodeTempNeg10To0);
                Tx2GainCodeTemp0To10 = Convert.ToString(TxGainTempLutReportDataParam.Tx2GainCodeTemp0To10);
                Tx2GainCodeTemp10To20 = Convert.ToString(TxGainTempLutReportDataParam.Tx2GainCodeTemp10To20);
                Tx2GainCodeTemp20To30 = Convert.ToString(TxGainTempLutReportDataParam.Tx2GainCodeTemp20To30);
                Tx2GainCodeTemp30To40 = Convert.ToString(TxGainTempLutReportDataParam.Tx2GainCodeTemp30To40);
                Tx2GainCodeTemp40To50 = Convert.ToString(TxGainTempLutReportDataParam.Tx2GainCodeTemp40To50);
                Tx2GainCodeTemp50To60 = Convert.ToString(TxGainTempLutReportDataParam.Tx2GainCodeTemp50To60);
                Tx2GainCodeTemp60To70 = Convert.ToString(TxGainTempLutReportDataParam.Tx2GainCodeTemp60To70);
                Tx2GainCodeTemp70To80 = Convert.ToString(TxGainTempLutReportDataParam.Tx2GainCodeTemp70To80);
                Tx2GainCodeTemp80To90 = Convert.ToString(TxGainTempLutReportDataParam.Tx2GainCodeTemp80To90);
                Tx2GainCodeTemp90To100 = Convert.ToString(TxGainTempLutReportDataParam.Tx2GainCodeTemp90To100);
                Tx2GainCodeTemp100To110 = Convert.ToString(TxGainTempLutReportDataParam.Tx2GainCodeTemp100To110);
                Tx2GainCodeTemp110To120 = Convert.ToString(TxGainTempLutReportDataParam.Tx2GainCodeTemp110To120);
                Tx2GainCodeTemp120To130 = Convert.ToString(TxGainTempLutReportDataParam.Tx2GainCodeTemp120To130);
                Tx2GainCodeTemp130To140 = Convert.ToString(TxGainTempLutReportDataParam.Tx2GainCodeTemp130To140);
                Tx2GainCodeTempMoreThan140 = Convert.ToString(TxGainTempLutReportDataParam.Tx2GainCodeTempMoreThan140);
                Tx3GainCodeTempLessThanNeg30 = Convert.ToString(TxGainTempLutReportDataParam.Tx3GainCodeTempLessThanNeg30);
                Tx3GainCodeTempNeg30ToNeg20 = Convert.ToString(TxGainTempLutReportDataParam.Tx3GainCodeTempNeg30ToNeg20);
                Tx3GainCodeTempNeg20ToNeg10 = Convert.ToString(TxGainTempLutReportDataParam.Tx3GainCodeTempNeg20ToNeg10);
                Tx3GainCodeTempNeg10To0 = Convert.ToString(TxGainTempLutReportDataParam.Tx3GainCodeTempNeg10To0);
                Tx3GainCodeTemp0To10 = Convert.ToString(TxGainTempLutReportDataParam.Tx3GainCodeTemp0To10);
                Tx3GainCodeTemp10To20 = Convert.ToString(TxGainTempLutReportDataParam.Tx3GainCodeTemp10To20);
                Tx3GainCodeTemp20To30 = Convert.ToString(TxGainTempLutReportDataParam.Tx3GainCodeTemp20To30);
                Tx3GainCodeTemp30To40 = Convert.ToString(TxGainTempLutReportDataParam.Tx3GainCodeTemp30To40);
                Tx3GainCodeTemp40To50 = Convert.ToString(TxGainTempLutReportDataParam.Tx3GainCodeTemp40To50);
                Tx3GainCodeTemp50To60 = Convert.ToString(TxGainTempLutReportDataParam.Tx3GainCodeTemp50To60);
                Tx3GainCodeTemp60To70 = Convert.ToString(TxGainTempLutReportDataParam.Tx3GainCodeTemp60To70);
                Tx3GainCodeTemp70To80 = Convert.ToString(TxGainTempLutReportDataParam.Tx3GainCodeTemp70To80);
                Tx3GainCodeTemp80To90 = Convert.ToString(TxGainTempLutReportDataParam.Tx3GainCodeTemp80To90);
                Tx3GainCodeTemp90To100 = Convert.ToString(TxGainTempLutReportDataParam.Tx3GainCodeTemp90To100);
                Tx3GainCodeTemp100To110 = Convert.ToString(TxGainTempLutReportDataParam.Tx3GainCodeTemp100To110);
                Tx3GainCodeTemp110To120 = Convert.ToString(TxGainTempLutReportDataParam.Tx3GainCodeTemp110To120);
                Tx3GainCodeTemp120To130 = Convert.ToString(TxGainTempLutReportDataParam.Tx3GainCodeTemp120To130);
                Tx3GainCodeTemp130To140 = Convert.ToString(TxGainTempLutReportDataParam.Tx3GainCodeTemp130To140);
                Tx3GainCodeTempMoreThan140 = Convert.ToString(TxGainTempLutReportDataParam.Tx3GainCodeTempMoreThan140);
            }
            if ((num == 0 && ((GlobalRef.g_CasCadeDeviceSpiConnect & 1U) == 1U || (GlobalRef.g_CasCadeDeviceSpiConnect & 2U) == 2U || (GlobalRef.g_CasCadeDeviceSpiConnect & 4U) == 4U || (GlobalRef.g_CasCadeDeviceSpiConnect & 8U) == 8U)) || GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
            {
                string full_command4 = string.Format("Status: Passed", new object[0]);
                m_GuiManager.RecordLog(6, full_command4);
            }
            else
            {
                string msg = string.Format("Status: Failed, Error Type: {0}", new object[]
                {
                    GetErrorType(num)
                });
                GlobalRef.LuaWrapper.PrintError(msg);
            }
            if (GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
            {
                if (iRs232ConnectDisconnect_impl() == 0 && !GlobalRef.g_NtvRS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
                {
                    m_GuiManager.DllOps.iConnect(1U, 0U);
                    string full_command5 = string.Format("Debug Port Reconnected!", new object[0]);
                    m_GuiManager.RecordLog(9, full_command5);
                    ScriptOps.KeepTrying(2000, new Func<bool>(spare_read));
                }
            }
            else if (GlobalRef.g_CasCadeDeviceSpiConnect == 0U)
            {
                string full_command6 = string.Format("Error Occurred in Port open close", new object[0]);
                m_GuiManager.RecordLog(9, full_command6);
            }
            return num;
        }

        public int UpdateNRxGainTempLUTSetConfData(ushort RadarDeviceId, char ProfileIndex, char Rx1GainCodeTempLessThanNeg30, char Rx1GainCodeTempNeg30ToNeg20, char Rx1GainCodeTempNeg20ToNeg10, char Rx1GainCodeTempNeg10To0, char Rx1GainCodeTemp0To10, char Rx1GainCodeTemp10To20, char Rx1GainCodeTemp20To30, char Rx1GainCodeTemp30To40, char Rx1GainCodeTemp40To50, char Rx1GainCodeTemp50To60, char Rx1GainCodeTemp60To70, char Rx1GainCodeTemp70To80, char Rx1GainCodeTemp80To90, char Rx1GainCodeTemp90To100, char Rx1GainCodeTemp100To110, char Rx1GainCodeTemp110To120, char Rx1GainCodeTemp120To130, char Rx1GainCodeTemp130To140, char Rx1GainCodeTempMoreThan140)
        {
            GlobalRef.g_RadarDeviceId = (uint)RadarDeviceId;
            ScriptOps.m_MainForm.TxRxGainTempLUTCfg.UpdateRxGainTempLUTConfigData();
            m_RxGainTempLUTConfigParameters.ProfileIndex = ProfileIndex;
            m_RxGainTempLUTConfigParameters.Rx1GainCodeTempLessThanNeg30 = Rx1GainCodeTempLessThanNeg30;
            m_RxGainTempLUTConfigParameters.Rx1GainCodeTempNeg30ToNeg20 = Rx1GainCodeTempNeg30ToNeg20;
            m_RxGainTempLUTConfigParameters.Rx1GainCodeTempNeg20ToNeg10 = Rx1GainCodeTempNeg20ToNeg10;
            m_RxGainTempLUTConfigParameters.Rx1GainCodeTempNeg10To0 = Rx1GainCodeTempNeg10To0;
            m_RxGainTempLUTConfigParameters.Rx1GainCodeTemp0To10 = Rx1GainCodeTemp0To10;
            m_RxGainTempLUTConfigParameters.Rx1GainCodeTemp10To20 = Rx1GainCodeTemp10To20;
            m_RxGainTempLUTConfigParameters.Rx1GainCodeTemp20To30 = Rx1GainCodeTemp20To30;
            m_RxGainTempLUTConfigParameters.Rx1GainCodeTemp30To40 = Rx1GainCodeTemp30To40;
            m_RxGainTempLUTConfigParameters.Rx1GainCodeTemp40To50 = Rx1GainCodeTemp40To50;
            m_RxGainTempLUTConfigParameters.Rx1GainCodeTemp50To60 = Rx1GainCodeTemp50To60;
            m_RxGainTempLUTConfigParameters.Rx1GainCodeTemp60To70 = Rx1GainCodeTemp60To70;
            m_RxGainTempLUTConfigParameters.Rx1GainCodeTemp70To80 = Rx1GainCodeTemp70To80;
            m_RxGainTempLUTConfigParameters.Rx1GainCodeTemp80To90 = Rx1GainCodeTemp80To90;
            m_RxGainTempLUTConfigParameters.Rx1GainCodeTemp90To100 = Rx1GainCodeTemp90To100;
            m_RxGainTempLUTConfigParameters.Rx1GainCodeTemp100To110 = Rx1GainCodeTemp100To110;
            m_RxGainTempLUTConfigParameters.Rx1GainCodeTemp110To120 = Rx1GainCodeTemp110To120;
            m_RxGainTempLUTConfigParameters.Rx1GainCodeTemp120To130 = Rx1GainCodeTemp120To130;
            m_RxGainTempLUTConfigParameters.Rx1GainCodeTemp130To140 = Rx1GainCodeTemp130To140;
            m_RxGainTempLUTConfigParameters.Rx1GainCodeTempMoreThan140 = Rx1GainCodeTempMoreThan140;
            ScriptOps.m_MainForm.TxRxGainTempLUTCfg.UpdateRxGainTempLUTConfigDataFrmCmdSrc();
            return iSetRxGainTempLUTConfig_Gui(true, false);
        }

        public int UpdateNRxGainTempLUTGetConfData(ushort RadarDeviceId, char ProfileIndex)
        {
            int result = -1;
            GlobalRef.g_RadarDeviceId = (uint)RadarDeviceId;
            ScriptOps.m_MainForm.TxRxGainTempLUTCfg.UpdateRxGainTempLUTGetConfigData();
            m_RxGainTempLUTGetConfigParameters.ProfileIndex = ProfileIndex;
            ScriptOps.m_MainForm.TxRxGainTempLUTCfg.UpdateRxGainTempLUTGetConfigDataFrmCmdSrc();
            return result;
        }

        public int UpdateNRxGainTempLUTGetConfData_cmd(out string profileIndex, out string Rx1GainCodeTempLessThanNeg30, out string Rx1GainCodeTempNeg30ToNeg20, out string Rx1GainCodeTempNeg20ToNeg10, out string Rx1GainCodeTempNeg10To0, out string Rx1GainCodeTemp0To10, out string Rx1GainCodeTemp10To20, out string Rx1GainCodeTemp20To30, out string Rx1GainCodeTemp30To40, out string Rx1GainCodeTemp40To50, out string Rx1GainCodeTemp50To60, out string Rx1GainCodeTemp60To70, out string Rx1GainCodeTemp70To80, out string Rx1GainCodeTemp80To90, out string Rx1GainCodeTemp90To100, out string Rx1GainCodeTemp100To110, out string Rx1GainCodeTemp110To120, out string Rx1GainCodeTemp120To130, out string Rx1GainCodeTemp130To140, out string Rx1GainCodeTempMoreThan140)
        {
            profileIndex = string.Empty;
            Rx1GainCodeTempLessThanNeg30 = string.Empty;
            Rx1GainCodeTempNeg30ToNeg20 = string.Empty;
            Rx1GainCodeTempNeg20ToNeg10 = string.Empty;
            Rx1GainCodeTempNeg10To0 = string.Empty;
            Rx1GainCodeTemp0To10 = string.Empty;
            Rx1GainCodeTemp10To20 = string.Empty;
            Rx1GainCodeTemp20To30 = string.Empty;
            Rx1GainCodeTemp30To40 = string.Empty;
            Rx1GainCodeTemp40To50 = string.Empty;
            Rx1GainCodeTemp50To60 = string.Empty;
            Rx1GainCodeTemp60To70 = string.Empty;
            Rx1GainCodeTemp70To80 = string.Empty;
            Rx1GainCodeTemp80To90 = string.Empty;
            Rx1GainCodeTemp90To100 = string.Empty;
            Rx1GainCodeTemp100To110 = string.Empty;
            Rx1GainCodeTemp110To120 = string.Empty;
            Rx1GainCodeTemp120To130 = string.Empty;
            Rx1GainCodeTemp130To140 = string.Empty;
            Rx1GainCodeTempMoreThan140 = string.Empty;
            ScriptOps.m_MainForm.TxRxGainTempLUTCfg.UpdateRxGainTempLUTGetConfigData();
            return iSetRxGainTempLUTGetConf_ImplForLuaCommand(out profileIndex, out Rx1GainCodeTempLessThanNeg30, out Rx1GainCodeTempNeg30ToNeg20, out Rx1GainCodeTempNeg20ToNeg10, out Rx1GainCodeTempNeg10To0, out Rx1GainCodeTemp0To10, out Rx1GainCodeTemp10To20, out Rx1GainCodeTemp20To30, out Rx1GainCodeTemp30To40, out Rx1GainCodeTemp40To50, out Rx1GainCodeTemp50To60, out Rx1GainCodeTemp60To70, out Rx1GainCodeTemp70To80, out Rx1GainCodeTemp80To90, out Rx1GainCodeTemp90To100, out Rx1GainCodeTemp100To110, out Rx1GainCodeTemp110To120, out Rx1GainCodeTemp120To130, out Rx1GainCodeTemp130To140, out Rx1GainCodeTempMoreThan140);
        }

        private int iSetRxGainTempLUTGetConf_ImplForLuaCommand(out string profileIndex, out string Rx1GainCodeTempLessThanNeg30, out string Rx1GainCodeTempNeg30ToNeg20, out string Rx1GainCodeTempNeg20ToNeg10, out string Rx1GainCodeTempNeg10To0, out string Rx1GainCodeTemp0To10, out string Rx1GainCodeTemp10To20, out string Rx1GainCodeTemp20To30, out string Rx1GainCodeTemp30To40, out string Rx1GainCodeTemp40To50, out string Rx1GainCodeTemp50To60, out string Rx1GainCodeTemp60To70, out string Rx1GainCodeTemp70To80, out string Rx1GainCodeTemp80To90, out string Rx1GainCodeTemp90To100, out string Rx1GainCodeTemp100To110, out string Rx1GainCodeTemp110To120, out string Rx1GainCodeTemp120To130, out string Rx1GainCodeTemp130To140, out string Rx1GainCodeTempMoreThan140)
        {
            profileIndex = string.Empty;
            Rx1GainCodeTempLessThanNeg30 = string.Empty;
            Rx1GainCodeTempNeg30ToNeg20 = string.Empty;
            Rx1GainCodeTempNeg20ToNeg10 = string.Empty;
            Rx1GainCodeTempNeg10To0 = string.Empty;
            Rx1GainCodeTemp0To10 = string.Empty;
            Rx1GainCodeTemp10To20 = string.Empty;
            Rx1GainCodeTemp20To30 = string.Empty;
            Rx1GainCodeTemp30To40 = string.Empty;
            Rx1GainCodeTemp40To50 = string.Empty;
            Rx1GainCodeTemp50To60 = string.Empty;
            Rx1GainCodeTemp60To70 = string.Empty;
            Rx1GainCodeTemp70To80 = string.Empty;
            Rx1GainCodeTemp80To90 = string.Empty;
            Rx1GainCodeTemp90To100 = string.Empty;
            Rx1GainCodeTemp100To110 = string.Empty;
            Rx1GainCodeTemp110To120 = string.Empty;
            Rx1GainCodeTemp120To130 = string.Empty;
            Rx1GainCodeTemp130To140 = string.Empty;
            Rx1GainCodeTempMoreThan140 = string.Empty;
            RxGainTempLutGetConfigurationParam.ProfileIndex = (byte)m_RxGainTempLUTGetConfigParameters.ProfileIndex;
            RxGainTempLutGetConfigurationParam.Reserved = 0;
            RxGainTempLutGetConfigurationParam.Reserved2 = 0;
            IntPtr data = GCHandle.Alloc(RxGainTempLutGetConfigurationParam, GCHandleType.Pinned).AddrOfPinnedObject();
            GCHandle.Alloc(RxGainTempLutReportDataParam, GCHandleType.Pinned).AddrOfPinnedObject();
            int num;
            if (GlobalRef.g_NtvRS232Connect[(int)GlobalRef.g_RadarDeviceIndex] && GlobalRef.g_CasCadeDeviceSpiConnect == 0U)
            {
                num = m_TsWrapper.Calling_WriteAddr_Single(4294959848U, 1U);
                if (m_GuiManager.DllOps.itempDisconnect(false) == 0)
                {
                    string full_command = string.Format("Debug Port Disconnected", new object[0]);
                    m_GuiManager.RecordLog(0, full_command);
                    if (!GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
                    {
                        iRs232ConnectDisconnect_impl();
                    }
                }
            }
            if (m_RadarDeviceModeConfigParams.NumberOfRadarDevicesDetected <= 1)
            {
                string full_command2 = string.Format("ar1.RxGainTempLutGet({0})", new object[]
                {
                    m_RxGainTempLUTGetConfigParameters.ProfileIndex
                });
                m_GuiManager.RecordLog(6, full_command2);
            }
            else
            {
                string full_command3 = string.Format("ar1.RxGainTempLutGet_mult({0}, {1})", new object[]
                {
                    GlobalRef.g_RadarDeviceId,
                    m_RxGainTempLUTGetConfigParameters.ProfileIndex
                });
                m_GuiManager.RecordLog(6, full_command3);
            }
            num = Imports.rlRxGainTempLutGet((byte)GlobalRef.g_RadarDeviceId, data, out RxGainTempLutReportDataParam);
            if (num == 0)
            {
                profileIndex = Convert.ToString(RxGainTempLutReportDataParam.ProfileIndex);
                Rx1GainCodeTempLessThanNeg30 = Convert.ToString(RxGainTempLutReportDataParam.Rx1GainCodeTempLessThanNeg30);
                Rx1GainCodeTempNeg30ToNeg20 = Convert.ToString(RxGainTempLutReportDataParam.Rx1GainCodeTempNeg30ToNeg20);
                Rx1GainCodeTempNeg20ToNeg10 = Convert.ToString(RxGainTempLutReportDataParam.Rx1GainCodeTempNeg20ToNeg10);
                Rx1GainCodeTempNeg10To0 = Convert.ToString(RxGainTempLutReportDataParam.Rx1GainCodeTempNeg10To0);
                Rx1GainCodeTemp0To10 = Convert.ToString(RxGainTempLutReportDataParam.Rx1GainCodeTemp0To10);
                Rx1GainCodeTemp10To20 = Convert.ToString(RxGainTempLutReportDataParam.Rx1GainCodeTemp10To20);
                Rx1GainCodeTemp20To30 = Convert.ToString(RxGainTempLutReportDataParam.Rx1GainCodeTemp20To30);
                Rx1GainCodeTemp30To40 = Convert.ToString(RxGainTempLutReportDataParam.Rx1GainCodeTemp30To40);
                Rx1GainCodeTemp40To50 = Convert.ToString(RxGainTempLutReportDataParam.Rx1GainCodeTemp40To50);
                Rx1GainCodeTemp50To60 = Convert.ToString(RxGainTempLutReportDataParam.Rx1GainCodeTemp50To60);
                Rx1GainCodeTemp60To70 = Convert.ToString(RxGainTempLutReportDataParam.Rx1GainCodeTemp60To70);
                Rx1GainCodeTemp70To80 = Convert.ToString(RxGainTempLutReportDataParam.Rx1GainCodeTemp70To80);
                Rx1GainCodeTemp80To90 = Convert.ToString(RxGainTempLutReportDataParam.Rx1GainCodeTemp80To90);
                Rx1GainCodeTemp90To100 = Convert.ToString(RxGainTempLutReportDataParam.Rx1GainCodeTemp90To100);
                Rx1GainCodeTemp100To110 = Convert.ToString(RxGainTempLutReportDataParam.Rx1GainCodeTemp100To110);
                Rx1GainCodeTemp110To120 = Convert.ToString(RxGainTempLutReportDataParam.Rx1GainCodeTemp110To120);
                Rx1GainCodeTemp120To130 = Convert.ToString(RxGainTempLutReportDataParam.Rx1GainCodeTemp120To130);
                Rx1GainCodeTemp130To140 = Convert.ToString(RxGainTempLutReportDataParam.Rx1GainCodeTemp130To140);
                Rx1GainCodeTempMoreThan140 = Convert.ToString(RxGainTempLutReportDataParam.Rx1GainCodeTempMoreThan140);
            }
            if ((num == 0 && ((GlobalRef.g_CasCadeDeviceSpiConnect & 1U) == 1U || (GlobalRef.g_CasCadeDeviceSpiConnect & 2U) == 2U || (GlobalRef.g_CasCadeDeviceSpiConnect & 4U) == 4U || (GlobalRef.g_CasCadeDeviceSpiConnect & 8U) == 8U)) || GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
            {
                string full_command4 = string.Format("Status: Passed", new object[0]);
                m_GuiManager.RecordLog(6, full_command4);
            }
            else
            {
                string msg = string.Format("Status: Failed, Error Type: {0}", new object[]
                {
                    GetErrorType(num)
                });
                GlobalRef.LuaWrapper.PrintError(msg);
            }
            if (GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
            {
                if (iRs232ConnectDisconnect_impl() == 0 && !GlobalRef.g_NtvRS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
                {
                    m_GuiManager.DllOps.iConnect(1U, 0U);
                    string full_command5 = string.Format("Debug Port Reconnected!", new object[0]);
                    m_GuiManager.RecordLog(9, full_command5);
                    ScriptOps.KeepTrying(2000, new Func<bool>(spare_read));
                }
            }
            else if (GlobalRef.g_CasCadeDeviceSpiConnect == 0U)
            {
                string full_command6 = string.Format("Error Occurred in Port open close", new object[0]);
                m_GuiManager.RecordLog(9, full_command6);
            }
            return num;
        }

        public int UpdateNSetAnalogMonitoringEnablesConfData(ushort RadarDeviceId, uint AnaMonEnables, uint Reserved)
        {
            GlobalRef.g_RadarDeviceId = (uint)RadarDeviceId;
            ScriptOps.m_MainForm.AnalogMonConfig.UpdateMonitoringRFEnablesConfigData();
            m_MonRFEnablesConfigParameters.TemperatureMon = (char)(AnaMonEnables & 1U);
            m_MonRFEnablesConfigParameters.RxGainPhase = (char)(AnaMonEnables >> 1 & 1U);
            m_MonRFEnablesConfigParameters.RxNoise = (char)(AnaMonEnables >> 2 & 1U);
            m_MonRFEnablesConfigParameters.RxIFStage = (char)(AnaMonEnables >> 3 & 1U);
            m_MonRFEnablesConfigParameters.Tx1Power = (char)(AnaMonEnables >> 4 & 1U);
            m_MonRFEnablesConfigParameters.Tx2Power = (char)(AnaMonEnables >> 5 & 1U);
            m_MonRFEnablesConfigParameters.Tx3Power = (char)(AnaMonEnables >> 6 & 1U);
            m_MonRFEnablesConfigParameters.Tx1BallBreak = (char)(AnaMonEnables >> 7 & 1U);
            m_MonRFEnablesConfigParameters.Tx2BallBreak = (char)(AnaMonEnables >> 8 & 1U);
            m_MonRFEnablesConfigParameters.Tx3BallBreak = (char)(AnaMonEnables >> 9 & 1U);
            m_MonRFEnablesConfigParameters.TxGainPhase = (char)(AnaMonEnables >> 10 & 1U);
            m_MonRFEnablesConfigParameters.Tx1BPM = (char)(AnaMonEnables >> 11 & 1U);
            m_MonRFEnablesConfigParameters.Tx2BPM = (char)(AnaMonEnables >> 12 & 1U);
            m_MonRFEnablesConfigParameters.Tx3BPM = (char)(AnaMonEnables >> 13 & 1U);
            m_MonRFEnablesConfigParameters.SynthFrequency = (char)(AnaMonEnables >> 14 & 1U);
            m_MonRFEnablesConfigParameters.ExternalAnalogSignals = (char)(AnaMonEnables >> 15 & 1U);
            m_MonRFEnablesConfigParameters.InternalTX1Signals = (char)(AnaMonEnables >> 16 & 1U);
            m_MonRFEnablesConfigParameters.InternalTX2Signals = (char)(AnaMonEnables >> 17 & 1U);
            m_MonRFEnablesConfigParameters.InternalTX3Signals = (char)(AnaMonEnables >> 18 & 1U);
            m_MonRFEnablesConfigParameters.InternalRXSignal = (char)(AnaMonEnables >> 19 & 1U);
            m_MonRFEnablesConfigParameters.f0002fe = (char)(AnaMonEnables >> 20 & 1U);
            m_MonRFEnablesConfigParameters.f0002ff = (char)(AnaMonEnables >> 21 & 1U);
            m_MonRFEnablesConfigParameters.PLLControlVoltage = (char)(AnaMonEnables >> 22 & 1U);
            m_MonRFEnablesConfigParameters.DCCClockFreq = (char)(AnaMonEnables >> 23 & 1U);
            m_MonRFEnablesConfigParameters.f000300 = (char)(AnaMonEnables >> 24 & 1U);
            m_MonRFEnablesConfigParameters.RxSigImgBand = (char)(AnaMonEnables >> 25 & 1U);
            m_MonRFEnablesConfigParameters.RxMixerInputPower = (char)(AnaMonEnables >> 26 & 1U);
            m_MonRFEnablesConfigParameters.Reserved = (char)(AnaMonEnables >> 27 & 1U);
            m_MonRFEnablesConfigParameters.ApllLdoShortCircuit = (byte)(Reserved & 1U);
            m_MonRFEnablesConfigParameters.VCOLdoShortCircuit = (byte)(Reserved >> 1 & 1U);
            m_MonRFEnablesConfigParameters.PALdoShortCircuit = (byte)(Reserved >> 2 & 1U);
            ScriptOps.m_MainForm.AnalogMonConfig.UpdateMonitoringRFEnablesConfigDataFrmCmdSrc();
            return iSetMonitoringRFEnablesConfig_Gui(true, false);
        }

        public int UpdateNSetTxGainPhaseMismatchMonitoringConfData(ushort RadarDeviceId, char ProfileIndex, char RF1FreqBitMask, char RF2FreqBitMask, char RF3FreqBitMask, char Tx1Channel, char Tx2Channel, char Tx3Channel, char Rx0Channel, char Rx1Channel, char Rx2Channel, char Rx3Channel, char ReportingMode, char Reserved2, double TxGainMismatchThreshold, double TxPhaseMismatchThreshold, double RF1Tx1GainMismatchOffsetVal, double RF1Tx2GainMismatchOffsetVal, double RF1Tx3GainMismatchOffsetVal, double RF2Tx1GainMismatchOffsetVal, double RF2Tx2GainMismatchOffsetVal, double RF2Tx3GainMismatchOffsetVal, double RF3Tx1GainMismatchOffsetVal, double RF3Tx2GainMismatchOffsetVal, double RF3Tx3GainMismatchOffsetVal, double RF1Tx1PhaseMismatchOffsetVal, double RF1Tx2PhaseMismatchOffsetVal, double RF1Tx3PhaseMismatchOffsetVal, double RF2Tx1PhaseMismatchOffsetVal, double RF2Tx2PhaseMismatchOffsetVal, double RF2Tx3PhaseMismatchOffsetVal, double RF3Tx1PhaseMismatchOffsetVal, double RF3Tx2PhaseMismatchOffsetVal, double RF3Tx3PhaseMismatchOffsetVal, ushort Reserved3, uint Reserved4)
        {
            int result = -1;
            GlobalRef.g_RadarDeviceId = (uint)RadarDeviceId;
            ScriptOps.m_MainForm.AnalogMonConfig.UpdateTXGainPhaseMismatchMonConfigData();
            m_MonTxGainPhaseMismatchConfigParameters.ProfileIndex = ProfileIndex;
            m_MonTxGainPhaseMismatchConfigParameters.RF1FreqBitMask = RF1FreqBitMask;
            m_MonTxGainPhaseMismatchConfigParameters.RF2FreqBitMask = RF2FreqBitMask;
            m_MonTxGainPhaseMismatchConfigParameters.RF3FreqBitMask = RF3FreqBitMask;
            m_MonTxGainPhaseMismatchConfigParameters.Tx1Channel = Tx1Channel;
            m_MonTxGainPhaseMismatchConfigParameters.Tx2Channel = Tx2Channel;
            m_MonTxGainPhaseMismatchConfigParameters.Tx3Channel = Tx3Channel;
            m_MonTxGainPhaseMismatchConfigParameters.Rx0Channel = Rx0Channel;
            m_MonTxGainPhaseMismatchConfigParameters.Rx1Channel = Rx1Channel;
            m_MonTxGainPhaseMismatchConfigParameters.Rx2Channel = Rx2Channel;
            m_MonTxGainPhaseMismatchConfigParameters.Rx3Channel = Rx3Channel;
            m_MonTxGainPhaseMismatchConfigParameters.Reserved2 = '\0';
            m_MonTxGainPhaseMismatchConfigParameters.Reserved3 = 0;
            m_MonTxGainPhaseMismatchConfigParameters.Reserved4 = 0U;
            m_MonTxGainPhaseMismatchConfigParameters.ReportingMode = ReportingMode;
            m_MonTxGainPhaseMismatchConfigParameters.TxGainMismatchThreshold = TxGainMismatchThreshold;
            m_MonTxGainPhaseMismatchConfigParameters.TxPhaseMismatchThreshold = TxPhaseMismatchThreshold;
            m_MonTxGainPhaseMismatchConfigParameters.RF1Tx1GainMismatchOffsetVal = RF1Tx1GainMismatchOffsetVal;
            m_MonTxGainPhaseMismatchConfigParameters.RF1Tx2GainMismatchOffsetVal = RF1Tx2GainMismatchOffsetVal;
            m_MonTxGainPhaseMismatchConfigParameters.RF1Tx3GainMismatchOffsetVal = RF1Tx3GainMismatchOffsetVal;
            m_MonTxGainPhaseMismatchConfigParameters.RF2Tx1GainMismatchOffsetVal = RF2Tx1GainMismatchOffsetVal;
            m_MonTxGainPhaseMismatchConfigParameters.RF2Tx2GainMismatchOffsetVal = RF2Tx2GainMismatchOffsetVal;
            m_MonTxGainPhaseMismatchConfigParameters.RF2Tx3GainMismatchOffsetVal = RF2Tx3GainMismatchOffsetVal;
            m_MonTxGainPhaseMismatchConfigParameters.RF3Tx1GainMismatchOffsetVal = RF3Tx1GainMismatchOffsetVal;
            m_MonTxGainPhaseMismatchConfigParameters.RF3Tx2GainMismatchOffsetVal = RF3Tx2GainMismatchOffsetVal;
            m_MonTxGainPhaseMismatchConfigParameters.RF3Tx3GainMismatchOffsetVal = RF3Tx3GainMismatchOffsetVal;
            m_MonTxGainPhaseMismatchConfigParameters.RF1Tx1PhaseMismatchOffsetVal = RF1Tx1PhaseMismatchOffsetVal;
            m_MonTxGainPhaseMismatchConfigParameters.RF1Tx2PhaseMismatchOffsetVal = RF1Tx2PhaseMismatchOffsetVal;
            m_MonTxGainPhaseMismatchConfigParameters.RF1Tx3PhaseMismatchOffsetVal = RF1Tx3PhaseMismatchOffsetVal;
            m_MonTxGainPhaseMismatchConfigParameters.RF2Tx1PhaseMismatchOffsetVal = RF2Tx1PhaseMismatchOffsetVal;
            m_MonTxGainPhaseMismatchConfigParameters.RF2Tx2PhaseMismatchOffsetVal = RF2Tx2PhaseMismatchOffsetVal;
            m_MonTxGainPhaseMismatchConfigParameters.RF2Tx3PhaseMismatchOffsetVal = RF2Tx3PhaseMismatchOffsetVal;
            m_MonTxGainPhaseMismatchConfigParameters.RF3Tx1PhaseMismatchOffsetVal = RF3Tx1PhaseMismatchOffsetVal;
            m_MonTxGainPhaseMismatchConfigParameters.RF3Tx2PhaseMismatchOffsetVal = RF3Tx2PhaseMismatchOffsetVal;
            m_MonTxGainPhaseMismatchConfigParameters.RF3Tx3PhaseMismatchOffsetVal = RF3Tx3PhaseMismatchOffsetVal;
            ScriptOps.m_MainForm.AnalogMonConfig.UpdateTXGainPhaseMismatchMonConfigDataFrmCmdSrc();
            return result;
        }

        public int UpdateNTxGainPhaseMismatchMonitoringConfigurationData_cmd(out string StatusFlag, out string Errorcode, out string Profileindex, out string RF1Tx1GainReportValue, out string RF1Tx2GainReportValue, out string RF1Tx3GainReportValue, out string RF2Tx1GainReportValue, out string RF2Tx2GainReportValue, out string RF2Tx3GainReportValue, out string RF3Tx1GainReportValue, out string RF3Tx2GainReportValue, out string RF3Tx3GainReportValue, out string RF1Tx1PhaseReportValue, out string RF1Tx2PhaseReportValue, out string RF1Tx3PhaseReportValue, out string RF2Tx1PhaseReportValue, out string RF2Tx2PhaseReportValue, out string RF2Tx3PhaseReportValue, out string RF3Tx1PhaseReportValue, out string RF3Tx2PhaseReportValue, out string RF3Tx3PhaseReportValue, out string Timestamp)
        {
            StatusFlag = string.Empty;
            Errorcode = string.Empty;
            Profileindex = string.Empty;
            RF1Tx1GainReportValue = string.Empty;
            RF1Tx2GainReportValue = string.Empty;
            RF1Tx3GainReportValue = string.Empty;
            RF2Tx1GainReportValue = string.Empty;
            RF2Tx2GainReportValue = string.Empty;
            RF2Tx3GainReportValue = string.Empty;
            RF3Tx1GainReportValue = string.Empty;
            RF3Tx2GainReportValue = string.Empty;
            RF3Tx3GainReportValue = string.Empty;
            RF1Tx1PhaseReportValue = string.Empty;
            RF1Tx2PhaseReportValue = string.Empty;
            RF1Tx3PhaseReportValue = string.Empty;
            RF2Tx1PhaseReportValue = string.Empty;
            RF2Tx2PhaseReportValue = string.Empty;
            RF2Tx3PhaseReportValue = string.Empty;
            RF3Tx1PhaseReportValue = string.Empty;
            RF3Tx2PhaseReportValue = string.Empty;
            RF3Tx3PhaseReportValue = string.Empty;
            Timestamp = string.Empty;
            ScriptOps.m_MainForm.AnalogMonConfig.UpdateTXGainPhaseMismatchMonConfigData();
            return iSetTxGainPhaseMismatchMonConfig_ImplForLuaCommand(out StatusFlag, out Errorcode, out Profileindex, out RF1Tx1GainReportValue, out RF1Tx2GainReportValue, out RF1Tx3GainReportValue, out RF2Tx1GainReportValue, out RF2Tx2GainReportValue, out RF2Tx3GainReportValue, out RF3Tx1GainReportValue, out RF3Tx2GainReportValue, out RF3Tx3GainReportValue, out RF1Tx1PhaseReportValue, out RF1Tx2PhaseReportValue, out RF1Tx3PhaseReportValue, out RF2Tx1PhaseReportValue, out RF2Tx2PhaseReportValue, out RF2Tx3PhaseReportValue, out RF3Tx1PhaseReportValue, out RF3Tx2PhaseReportValue, out RF3Tx3PhaseReportValue, out Timestamp);
        }

        private int iSetTxGainPhaseMismatchMonConfig_ImplForLuaCommand(out string StatusFlag, out string Errorcode, out string Profileindex, out string RF1Tx1GainReportValue, out string RF1Tx2GainReportValue, out string RF1Tx3GainReportValue, out string RF2Tx1GainReportValue, out string RF2Tx2GainReportValue, out string RF2Tx3GainReportValue, out string RF3Tx1GainReportValue, out string RF3Tx2GainReportValue, out string RF3Tx3GainReportValue, out string RF1Tx1PhaseReportValue, out string RF1Tx2PhaseReportValue, out string RF1Tx3PhaseReportValue, out string RF2Tx1PhaseReportValue, out string RF2Tx2PhaseReportValue, out string RF2Tx3PhaseReportValue, out string RF3Tx1PhaseReportValue, out string RF3Tx2PhaseReportValue, out string RF3Tx3PhaseReportValue, out string Timestamp)
        {
            StatusFlag = string.Empty;
            Errorcode = string.Empty;
            Profileindex = string.Empty;
            RF1Tx1GainReportValue = string.Empty;
            RF1Tx2GainReportValue = string.Empty;
            RF1Tx3GainReportValue = string.Empty;
            RF2Tx1GainReportValue = string.Empty;
            RF2Tx2GainReportValue = string.Empty;
            RF2Tx3GainReportValue = string.Empty;
            RF3Tx1GainReportValue = string.Empty;
            RF3Tx2GainReportValue = string.Empty;
            RF3Tx3GainReportValue = string.Empty;
            RF1Tx1PhaseReportValue = string.Empty;
            RF1Tx2PhaseReportValue = string.Empty;
            RF1Tx3PhaseReportValue = string.Empty;
            RF2Tx1PhaseReportValue = string.Empty;
            RF2Tx2PhaseReportValue = string.Empty;
            RF2Tx3PhaseReportValue = string.Empty;
            RF3Tx1PhaseReportValue = string.Empty;
            RF3Tx2PhaseReportValue = string.Empty;
            RF3Tx3PhaseReportValue = string.Empty;
            Timestamp = string.Empty;
            TxGainPhaseMismatchMonitoringConfigurationParam.ProfileIndex = (byte)m_MonTxGainPhaseMismatchConfigParameters.ProfileIndex;
            TxGainPhaseMismatchMonitoringConfigurationParam.RFFreqBitMask = (byte)(m_MonTxGainPhaseMismatchConfigParameters.RF1FreqBitMask | m_MonTxGainPhaseMismatchConfigParameters.RF2FreqBitMask << 1 | m_MonTxGainPhaseMismatchConfigParameters.RF3FreqBitMask << 2);
            TxGainPhaseMismatchMonitoringConfigurationParam.TxChannel = (byte)(m_MonTxGainPhaseMismatchConfigParameters.Tx1Channel | m_MonTxGainPhaseMismatchConfigParameters.Tx2Channel << 1 | m_MonTxGainPhaseMismatchConfigParameters.Tx3Channel << 2);
            TxGainPhaseMismatchMonitoringConfigurationParam.RxChannel = (byte)(m_MonTxGainPhaseMismatchConfigParameters.Rx0Channel | m_MonTxGainPhaseMismatchConfigParameters.Rx1Channel << 1 | m_MonTxGainPhaseMismatchConfigParameters.Rx2Channel << 2 | m_MonTxGainPhaseMismatchConfigParameters.Rx3Channel << 3);
            TxGainPhaseMismatchMonitoringConfigurationParam.ReportingMode = (byte)m_MonTxGainPhaseMismatchConfigParameters.ReportingMode;
            TxGainPhaseMismatchMonitoringConfigurationParam.Reserved2 = 0;
            TxGainPhaseMismatchMonitoringConfigurationParam.TxGainMismatchThreshold = (short)(m_MonTxGainPhaseMismatchConfigParameters.TxGainMismatchThreshold * 10.0);
            TxGainPhaseMismatchMonitoringConfigurationParam.TxPhaseMismatchThreshold = (short)(m_MonTxGainPhaseMismatchConfigParameters.TxPhaseMismatchThreshold * 65536.0 / 360.0);
            TxGainPhaseMismatchMonitoringConfigurationParam.RF1TX1GainMismatchOffsetVal = (short)(m_MonTxGainPhaseMismatchConfigParameters.RF1Tx1GainMismatchOffsetVal * 10.0);
            TxGainPhaseMismatchMonitoringConfigurationParam.RF1TX2GainMismatchOffsetVal = (short)(m_MonTxGainPhaseMismatchConfigParameters.RF1Tx2GainMismatchOffsetVal * 10.0);
            TxGainPhaseMismatchMonitoringConfigurationParam.RF1TX3GainMismatchOffsetVal = (short)(m_MonTxGainPhaseMismatchConfigParameters.RF1Tx3GainMismatchOffsetVal * 10.0);
            TxGainPhaseMismatchMonitoringConfigurationParam.RF2TX1GainMismatchOffsetVal = (short)(m_MonTxGainPhaseMismatchConfigParameters.RF2Tx1GainMismatchOffsetVal * 10.0);
            TxGainPhaseMismatchMonitoringConfigurationParam.RF2TX2GainMismatchOffsetVal = (short)(m_MonTxGainPhaseMismatchConfigParameters.RF2Tx2GainMismatchOffsetVal * 10.0);
            TxGainPhaseMismatchMonitoringConfigurationParam.RF2TX3GainMismatchOffsetVal = (short)(m_MonTxGainPhaseMismatchConfigParameters.RF2Tx3GainMismatchOffsetVal * 10.0);
            TxGainPhaseMismatchMonitoringConfigurationParam.RF3TX1GainMismatchOffsetVal = (short)(m_MonTxGainPhaseMismatchConfigParameters.RF3Tx1GainMismatchOffsetVal * 10.0);
            TxGainPhaseMismatchMonitoringConfigurationParam.RF3TX2GainMismatchOffsetVal = (short)(m_MonTxGainPhaseMismatchConfigParameters.RF3Tx2GainMismatchOffsetVal * 10.0);
            TxGainPhaseMismatchMonitoringConfigurationParam.RF3TX3GainMismatchOffsetVal = (short)(m_MonTxGainPhaseMismatchConfigParameters.RF3Tx3GainMismatchOffsetVal * 10.0);
            TxGainPhaseMismatchMonitoringConfigurationParam.RF1TX1PhaseMismatchOffsetVal = (ushort)(m_MonTxGainPhaseMismatchConfigParameters.RF1Tx1PhaseMismatchOffsetVal * 65535.0 / 360.0);
            TxGainPhaseMismatchMonitoringConfigurationParam.RF1TX2PhaseMismatchOffsetVal = (ushort)(m_MonTxGainPhaseMismatchConfigParameters.RF1Tx2PhaseMismatchOffsetVal * 65535.0 / 360.0);
            TxGainPhaseMismatchMonitoringConfigurationParam.RF1TX3PhaseMismatchOffsetVal = (ushort)(m_MonTxGainPhaseMismatchConfigParameters.RF1Tx3PhaseMismatchOffsetVal * 65535.0 / 360.0);
            TxGainPhaseMismatchMonitoringConfigurationParam.RF2TX1PhaseMismatchOffsetVal = (ushort)(m_MonTxGainPhaseMismatchConfigParameters.RF2Tx1PhaseMismatchOffsetVal * 65535.0 / 360.0);
            TxGainPhaseMismatchMonitoringConfigurationParam.RF2TX2PhaseMismatchOffsetVal = (ushort)(m_MonTxGainPhaseMismatchConfigParameters.RF2Tx2PhaseMismatchOffsetVal * 65535.0 / 360.0);
            TxGainPhaseMismatchMonitoringConfigurationParam.RF2TX3PhaseMismatchOffsetVal = (ushort)(m_MonTxGainPhaseMismatchConfigParameters.RF2Tx3PhaseMismatchOffsetVal * 65535.0 / 360.0);
            TxGainPhaseMismatchMonitoringConfigurationParam.RF3TX1PhaseMismatchOffsetVal = (ushort)(m_MonTxGainPhaseMismatchConfigParameters.RF3Tx1PhaseMismatchOffsetVal * 65535.0 / 360.0);
            TxGainPhaseMismatchMonitoringConfigurationParam.RF3TX2PhaseMismatchOffsetVal = (ushort)(m_MonTxGainPhaseMismatchConfigParameters.RF3Tx2PhaseMismatchOffsetVal * 65535.0 / 360.0);
            TxGainPhaseMismatchMonitoringConfigurationParam.RF3TX3PhaseMismatchOffsetVal = (ushort)(m_MonTxGainPhaseMismatchConfigParameters.RF3Tx3PhaseMismatchOffsetVal * 65535.0 / 360.0);
            TxGainPhaseMismatchMonitoringConfigurationParam.Reserved3 = 0;
            TxGainPhaseMismatchMonitoringConfigurationParam.Reserved4 = 0U;
            IntPtr data = GCHandle.Alloc(TxGainPhaseMismatchMonitoringConfigurationParam, GCHandleType.Pinned).AddrOfPinnedObject();
            int num;
            if (GlobalRef.g_NtvRS232Connect[(int)GlobalRef.g_RadarDeviceIndex] && GlobalRef.g_CasCadeDeviceSpiConnect == 0U)
            {
                num = m_TsWrapper.Calling_WriteAddr_Single(4294959848U, 1U);
                if (m_GuiManager.DllOps.itempDisconnect(false) == 0)
                {
                    string full_command = string.Format("Debug Port Disconnected", new object[0]);
                    m_GuiManager.RecordLog(0, full_command);
                    if (!GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
                    {
                        iRs232ConnectDisconnect_impl();
                    }
                }
            }
            if (m_RadarDeviceModeConfigParams.NumberOfRadarDevicesDetected <= 1)
            {
                string full_command2 = string.Format("ar1.SetRfTxGainPhaseMismatchMonConfig({0}, {1}, {2}, {3}, {4}, {5}, {6}, {7}, {8}, {9}, {10}, {11}, {12}, {13}, {14}, {15}, {16}, {17}, {18}, {19}, {20}, {21}, {22}, {23}, {24}, {25}, {26}, {27}, {28}, {29}, {30}, {31}, {32}, {33}, {34})", new object[]
                {
                    m_MonTxGainPhaseMismatchConfigParameters.ProfileIndex,
                    m_MonTxGainPhaseMismatchConfigParameters.RF1FreqBitMask,
                    m_MonTxGainPhaseMismatchConfigParameters.RF2FreqBitMask,
                    m_MonTxGainPhaseMismatchConfigParameters.RF3FreqBitMask,
                    m_MonTxGainPhaseMismatchConfigParameters.Tx1Channel,
                    m_MonTxGainPhaseMismatchConfigParameters.Tx2Channel,
                    m_MonTxGainPhaseMismatchConfigParameters.Tx3Channel,
                    m_MonTxGainPhaseMismatchConfigParameters.Rx0Channel,
                    m_MonTxGainPhaseMismatchConfigParameters.Rx1Channel,
                    m_MonTxGainPhaseMismatchConfigParameters.Rx2Channel,
                    m_MonTxGainPhaseMismatchConfigParameters.Rx3Channel,
                    m_MonTxGainPhaseMismatchConfigParameters.ReportingMode,
                    m_MonTxGainPhaseMismatchConfigParameters.Reserved2,
                    (decimal)Math.Round(m_MonTxGainPhaseMismatchConfigParameters.TxGainMismatchThreshold, 1),
                    (decimal)Math.Round(m_MonTxGainPhaseMismatchConfigParameters.TxPhaseMismatchThreshold, 2),
                    (decimal)Math.Round(m_MonTxGainPhaseMismatchConfigParameters.RF1Tx1GainMismatchOffsetVal, 1),
                    (decimal)Math.Round(m_MonTxGainPhaseMismatchConfigParameters.RF1Tx2GainMismatchOffsetVal, 1),
                    (decimal)Math.Round(m_MonTxGainPhaseMismatchConfigParameters.RF1Tx3GainMismatchOffsetVal, 1),
                    (decimal)Math.Round(m_MonTxGainPhaseMismatchConfigParameters.RF2Tx1GainMismatchOffsetVal, 1),
                    (decimal)Math.Round(m_MonTxGainPhaseMismatchConfigParameters.RF2Tx2GainMismatchOffsetVal, 1),
                    (decimal)Math.Round(m_MonTxGainPhaseMismatchConfigParameters.RF2Tx3GainMismatchOffsetVal, 1),
                    (decimal)Math.Round(m_MonTxGainPhaseMismatchConfigParameters.RF3Tx1GainMismatchOffsetVal, 1),
                    (decimal)Math.Round(m_MonTxGainPhaseMismatchConfigParameters.RF3Tx2GainMismatchOffsetVal, 1),
                    (decimal)Math.Round(m_MonTxGainPhaseMismatchConfigParameters.RF3Tx3GainMismatchOffsetVal, 1),
                    (decimal)Math.Round(m_MonTxGainPhaseMismatchConfigParameters.RF1Tx1PhaseMismatchOffsetVal, 2),
                    (decimal)Math.Round(m_MonTxGainPhaseMismatchConfigParameters.RF1Tx2PhaseMismatchOffsetVal, 2),
                    (decimal)Math.Round(m_MonTxGainPhaseMismatchConfigParameters.RF1Tx3PhaseMismatchOffsetVal, 2),
                    (decimal)Math.Round(m_MonTxGainPhaseMismatchConfigParameters.RF2Tx1PhaseMismatchOffsetVal, 2),
                    (decimal)Math.Round(m_MonTxGainPhaseMismatchConfigParameters.RF2Tx2PhaseMismatchOffsetVal, 2),
                    (decimal)Math.Round(m_MonTxGainPhaseMismatchConfigParameters.RF2Tx3PhaseMismatchOffsetVal, 2),
                    (decimal)Math.Round(m_MonTxGainPhaseMismatchConfigParameters.RF3Tx1PhaseMismatchOffsetVal, 2),
                    (decimal)Math.Round(m_MonTxGainPhaseMismatchConfigParameters.RF3Tx2PhaseMismatchOffsetVal, 2),
                    (decimal)Math.Round(m_MonTxGainPhaseMismatchConfigParameters.RF3Tx3PhaseMismatchOffsetVal, 2),
                    m_MonTxGainPhaseMismatchConfigParameters.Reserved3,
                    m_MonTxGainPhaseMismatchConfigParameters.Reserved4
                });
                m_GuiManager.RecordLog(6, full_command2);
            }
            else
            {
                string full_command3 = string.Format("ar1.SetRfTxGainPhaseMismatchMonConfig_mult({0}, {1}, {2}, {3}, {4}, {5}, {6}, {7}, {8}, {9}, {10}, {11}, {12}, {13}, {14}, {15}, {16}, {17}, {18}, {19}, {20}, {21}, {22}, {23}, {24}, {25}, {26}, {27}, {28},{29}, {30}, {31}, {32}, {33}, {34},{35})", new object[]
                {
                    GlobalRef.g_RadarDeviceId,
                    m_MonTxGainPhaseMismatchConfigParameters.ProfileIndex,
                    m_MonTxGainPhaseMismatchConfigParameters.RF1FreqBitMask,
                    m_MonTxGainPhaseMismatchConfigParameters.RF2FreqBitMask,
                    m_MonTxGainPhaseMismatchConfigParameters.RF3FreqBitMask,
                    m_MonTxGainPhaseMismatchConfigParameters.Tx1Channel,
                    m_MonTxGainPhaseMismatchConfigParameters.Tx2Channel,
                    m_MonTxGainPhaseMismatchConfigParameters.Tx3Channel,
                    m_MonTxGainPhaseMismatchConfigParameters.Rx0Channel,
                    m_MonTxGainPhaseMismatchConfigParameters.Rx1Channel,
                    m_MonTxGainPhaseMismatchConfigParameters.Rx2Channel,
                    m_MonTxGainPhaseMismatchConfigParameters.Rx3Channel,
                    m_MonTxGainPhaseMismatchConfigParameters.ReportingMode,
                    m_MonTxGainPhaseMismatchConfigParameters.Reserved2,
                    (decimal)Math.Round(m_MonTxGainPhaseMismatchConfigParameters.TxGainMismatchThreshold, 1),
                    (decimal)Math.Round(m_MonTxGainPhaseMismatchConfigParameters.TxPhaseMismatchThreshold, 2),
                    (decimal)Math.Round(m_MonTxGainPhaseMismatchConfigParameters.RF1Tx1GainMismatchOffsetVal, 1),
                    (decimal)Math.Round(m_MonTxGainPhaseMismatchConfigParameters.RF1Tx2GainMismatchOffsetVal, 1),
                    (decimal)Math.Round(m_MonTxGainPhaseMismatchConfigParameters.RF1Tx3GainMismatchOffsetVal, 1),
                    (decimal)Math.Round(m_MonTxGainPhaseMismatchConfigParameters.RF2Tx1GainMismatchOffsetVal, 1),
                    (decimal)Math.Round(m_MonTxGainPhaseMismatchConfigParameters.RF2Tx2GainMismatchOffsetVal, 1),
                    (decimal)Math.Round(m_MonTxGainPhaseMismatchConfigParameters.RF2Tx3GainMismatchOffsetVal, 1),
                    (decimal)Math.Round(m_MonTxGainPhaseMismatchConfigParameters.RF3Tx1GainMismatchOffsetVal, 1),
                    (decimal)Math.Round(m_MonTxGainPhaseMismatchConfigParameters.RF3Tx2GainMismatchOffsetVal, 1),
                    (decimal)Math.Round(m_MonTxGainPhaseMismatchConfigParameters.RF3Tx3GainMismatchOffsetVal, 1),
                    (decimal)Math.Round(m_MonTxGainPhaseMismatchConfigParameters.RF1Tx1PhaseMismatchOffsetVal, 2),
                    (decimal)Math.Round(m_MonTxGainPhaseMismatchConfigParameters.RF1Tx2PhaseMismatchOffsetVal, 2),
                    (decimal)Math.Round(m_MonTxGainPhaseMismatchConfigParameters.RF1Tx3PhaseMismatchOffsetVal, 2),
                    (decimal)Math.Round(m_MonTxGainPhaseMismatchConfigParameters.RF2Tx1PhaseMismatchOffsetVal, 2),
                    (decimal)Math.Round(m_MonTxGainPhaseMismatchConfigParameters.RF2Tx2PhaseMismatchOffsetVal, 2),
                    (decimal)Math.Round(m_MonTxGainPhaseMismatchConfigParameters.RF2Tx3PhaseMismatchOffsetVal, 2),
                    (decimal)Math.Round(m_MonTxGainPhaseMismatchConfigParameters.RF3Tx1PhaseMismatchOffsetVal, 2),
                    (decimal)Math.Round(m_MonTxGainPhaseMismatchConfigParameters.RF3Tx2PhaseMismatchOffsetVal, 2),
                    (decimal)Math.Round(m_MonTxGainPhaseMismatchConfigParameters.RF3Tx3PhaseMismatchOffsetVal, 2),
                    m_MonTxGainPhaseMismatchConfigParameters.Reserved3,
                    m_MonTxGainPhaseMismatchConfigParameters.Reserved4
                });
                m_GuiManager.RecordLog(6, full_command3);
            }
            GlobalRef.g_TxGainPhaseMismatchMon = 1U;
            num = Imports.RadarLinkImpl_RfTxGainPhaseMismatchMonConfig(GlobalRef.g_RadarDeviceId, data);
            while (GlobalRef.g_TxGainPhaseMismatchMon == 0U)
            {
                Thread.Sleep(100);
            }
            if (num == 0)
            {
                StatusFlag = Convert.ToString(ScriptOps.TxGainPhaseMismatchAsyncReportParam.StatusFlags);
                Errorcode = Convert.ToString(ScriptOps.TxGainPhaseMismatchAsyncReportParam.ErrorCode);
                Profileindex = Convert.ToString(ScriptOps.TxGainPhaseMismatchAsyncReportParam.ProfileIndex);
                ushort num2 = (ushort)(ScriptOps.TxGainPhaseMismatchAsyncReportParam.RF1Tx1Tx2TxGainValue & 65535U);
                if (num2 > 32767)
                {
                    short num3 = (short)((int)num2 - 65536);
                    RF1Tx1GainReportValue = Convert.ToString((double)num3 / 10.0);
                }
                else
                {
                    RF1Tx1GainReportValue = Convert.ToString((double)num2 / 10.0);
                }
                ushort num4 = (ushort)(ScriptOps.TxGainPhaseMismatchAsyncReportParam.RF1Tx1Tx2TxGainValue >> 16);
                if (num4 > 32767)
                {
                    short num3 = (short)((int)num4 - 65536);
                    RF1Tx2GainReportValue = Convert.ToString((double)num3 / 10.0);
                }
                else
                {
                    RF1Tx2GainReportValue = Convert.ToString((double)num4 / 10.0);
                }
                ushort num5 = (ushort)(ScriptOps.TxGainPhaseMismatchAsyncReportParam.RF1Tx3RF2Tx1TxGainValue & 65535U);
                if (num5 > 32767)
                {
                    short num3 = (short)((int)num5 - 65536);
                    RF1Tx3GainReportValue = Convert.ToString((double)num3 / 10.0);
                }
                else
                {
                    RF1Tx3GainReportValue = Convert.ToString((double)num5 / 10.0);
                }
                ushort num6 = (ushort)(ScriptOps.TxGainPhaseMismatchAsyncReportParam.RF1Tx3RF2Tx1TxGainValue >> 16);
                if (num6 > 32767)
                {
                    short num3 = (short)((int)num6 - 65536);
                    RF2Tx1GainReportValue = Convert.ToString((double)num3 / 10.0);
                }
                else
                {
                    RF2Tx1GainReportValue = Convert.ToString((double)num6 / 10.0);
                }
                ushort num7 = (ushort)(ScriptOps.TxGainPhaseMismatchAsyncReportParam.RF2Tx2RF2Tx3TxGainValue & 65535U);
                if (num7 > 32767)
                {
                    short num3 = (short)((int)num7 - 65536);
                    RF2Tx2GainReportValue = Convert.ToString((double)num3 / 10.0);
                }
                else
                {
                    RF2Tx2GainReportValue = Convert.ToString((double)num7 / 10.0);
                }
                ushort num8 = (ushort)(ScriptOps.TxGainPhaseMismatchAsyncReportParam.RF2Tx2RF2Tx3TxGainValue >> 16);
                if (num8 > 32767)
                {
                    short num3 = (short)((int)num8 - 65536);
                    RF2Tx3GainReportValue = Convert.ToString((double)num3 / 10.0);
                }
                else
                {
                    RF2Tx3GainReportValue = Convert.ToString((double)num8 / 10.0);
                }
                ushort num9 = (ushort)(ScriptOps.TxGainPhaseMismatchAsyncReportParam.RF3Tx1RF3Tx2TxGainValue & 65535U);
                if (num9 > 32767)
                {
                    short num3 = (short)((int)num9 - 65536);
                    RF3Tx1GainReportValue = Convert.ToString((double)num3 / 10.0);
                }
                else
                {
                    RF3Tx1GainReportValue = Convert.ToString((double)num9 / 10.0);
                }
                ushort num10 = (ushort)(ScriptOps.TxGainPhaseMismatchAsyncReportParam.RF3Tx1RF3Tx2TxGainValue >> 16);
                if (num10 > 32767)
                {
                    short num3 = (short)((int)num10 - 65536);
                    RF3Tx2GainReportValue = Convert.ToString((double)num3 / 10.0);
                }
                else
                {
                    RF3Tx2GainReportValue = Convert.ToString((double)num10 / 10.0);
                }
                ushort num11 = (ushort)(ScriptOps.TxGainPhaseMismatchAsyncReportParam.RF3Tx3GainRF1Tx1PhaseValue & 65535U);
                if (num11 > 32767)
                {
                    short num3 = (short)((int)num11 - 65536);
                    RF3Tx3GainReportValue = Convert.ToString((double)num3 / 10.0);
                }
                else
                {
                    RF3Tx3GainReportValue = Convert.ToString((double)num11 / 10.0);
                }
                ushort num12 = (ushort)(ScriptOps.TxGainPhaseMismatchAsyncReportParam.RF3Tx3GainRF1Tx1PhaseValue >> 16);
                if (num12 > 32767)
                {
                    ushort num13 = (ushort)((int)num12 - 65536);
                    RF1Tx1PhaseReportValue = Convert.ToString(Math.Round((double)(num13 * 360) / 65536.0, 2));
                }
                else
                {
                    RF1Tx1PhaseReportValue = Convert.ToString(Math.Round((double)(num12 * 360) / 65536.0, 2));
                }
                ushort num14 = (ushort)(ScriptOps.TxGainPhaseMismatchAsyncReportParam.RF1Tx2Tx3TxPhaseValue & 65535U);
                if (num14 > 32767)
                {
                    ushort num13 = (ushort)((int)num14 - 65536);
                    RF1Tx2PhaseReportValue = Convert.ToString(Math.Round((double)(num13 * 360) / 65536.0, 2));
                }
                else
                {
                    RF1Tx2PhaseReportValue = Convert.ToString(Math.Round((double)(num14 * 360) / 65536.0, 2));
                }
                ushort num15 = (ushort)(ScriptOps.TxGainPhaseMismatchAsyncReportParam.RF1Tx2Tx3TxPhaseValue >> 16);
                if (num15 > 32767)
                {
                    ushort num13 = (ushort)((int)num15 - 65536);
                    RF1Tx3PhaseReportValue = Convert.ToString(Math.Round((double)(num13 * 360) / 65536.0, 2));
                }
                else
                {
                    RF1Tx3PhaseReportValue = Convert.ToString(Math.Round((double)(num15 * 360) / 65536.0, 2));
                }
                ushort num16 = (ushort)(ScriptOps.TxGainPhaseMismatchAsyncReportParam.RF2Tx1RF2Tx2TxPhaseValue & 65535U);
                if (num16 > 32767)
                {
                    ushort num13 = (ushort)((int)num16 - 65536);
                    RF2Tx1PhaseReportValue = Convert.ToString(Math.Round((double)(num13 * 360) / 65536.0, 2));
                }
                else
                {
                    RF2Tx1PhaseReportValue = Convert.ToString(Math.Round((double)(num16 * 360) / 65536.0, 2));
                }
                ushort num17 = (ushort)(ScriptOps.TxGainPhaseMismatchAsyncReportParam.RF2Tx1RF2Tx2TxPhaseValue >> 16);
                if (num17 > 32767)
                {
                    ushort num13 = (ushort)((int)num17 - 65536);
                    RF2Tx2PhaseReportValue = Convert.ToString(Math.Round((double)(num13 * 360) / 65536.0, 2));
                }
                else
                {
                    RF2Tx2PhaseReportValue = Convert.ToString(Math.Round((double)(num17 * 360) / 65536.0, 2));
                }
                ushort num18 = (ushort)(ScriptOps.TxGainPhaseMismatchAsyncReportParam.RF2Tx3RF3Tx1TxPhaseValue & 65535U);
                if (num18 > 32767)
                {
                    ushort num13 = (ushort)((int)num18 - 65536);
                    RF2Tx3PhaseReportValue = Convert.ToString(Math.Round((double)(num13 * 360) / 65536.0, 2));
                }
                else
                {
                    RF2Tx3PhaseReportValue = Convert.ToString(Math.Round((double)(num18 * 360) / 65536.0, 2));
                }
                ushort num19 = (ushort)(ScriptOps.TxGainPhaseMismatchAsyncReportParam.RF2Tx3RF3Tx1TxPhaseValue >> 16);
                if (num19 > 32767)
                {
                    ushort num13 = (ushort)((int)num19 - 65536);
                    RF3Tx1PhaseReportValue = Convert.ToString(Math.Round((double)(num13 * 360) / 65536.0, 2));
                }
                else
                {
                    RF3Tx1PhaseReportValue = Convert.ToString(Math.Round((double)(num19 * 360) / 65536.0, 2));
                }
                ushort num20 = (ushort)(ScriptOps.TxGainPhaseMismatchAsyncReportParam.RF3Tx2RF3Tx3TxPhaseValue & 65535U);
                if (num20 > 32767)
                {
                    ushort num13 = (ushort)((int)num20 - 65536);
                    RF3Tx2PhaseReportValue = Convert.ToString(Math.Round((double)(num13 * 360) / 65536.0, 2));
                }
                else
                {
                    RF3Tx2PhaseReportValue = Convert.ToString(Math.Round((double)(num20 * 360) / 65536.0, 2));
                }
                ushort num21 = (ushort)(ScriptOps.TxGainPhaseMismatchAsyncReportParam.RF3Tx2RF3Tx3TxPhaseValue >> 16);
                if (num21 > 32767)
                {
                    ushort num13 = (ushort)((int)num21 - 65536);
                    RF3Tx3PhaseReportValue = Convert.ToString(Math.Round((double)(num13 * 360) / 65536.0, 2));
                }
                else
                {
                    RF3Tx3PhaseReportValue = Convert.ToString(Math.Round((double)(num21 * 360) / 65536.0, 2));
                }
                Timestamp = Convert.ToString(ScriptOps.TxGainPhaseMismatchAsyncReportParam.TimeStamp);
            }
            if ((num == 0 && ((GlobalRef.g_CasCadeDeviceSpiConnect & 1U) == 1U || (GlobalRef.g_CasCadeDeviceSpiConnect & 2U) == 2U || (GlobalRef.g_CasCadeDeviceSpiConnect & 4U) == 4U || (GlobalRef.g_CasCadeDeviceSpiConnect & 8U) == 8U)) || GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
            {
                string full_command4 = string.Format("Status: Passed", new object[0]);
                m_GuiManager.RecordLog(6, full_command4);
            }
            else
            {
                string msg = string.Format("Status: Failed, Error Type: {0}", new object[]
                {
                    GetErrorType(num)
                });
                GlobalRef.LuaWrapper.PrintError(msg);
            }
            if (GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
            {
                if (iRs232ConnectDisconnect_impl() == 0 && !GlobalRef.g_NtvRS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
                {
                    m_GuiManager.DllOps.iConnect(1U, 0U);
                    string full_command5 = string.Format("Debug Port Reconnected!", new object[0]);
                    m_GuiManager.RecordLog(9, full_command5);
                    ScriptOps.KeepTrying(2000, new Func<bool>(spare_read));
                }
            }
            else if (GlobalRef.g_CasCadeDeviceSpiConnect == 0U)
            {
                string full_command6 = string.Format("Error Occurred in Port open close", new object[0]);
                m_GuiManager.RecordLog(9, full_command6);
            }
            return num;
        }

        public int UpdateNSetTimeUnitConfData(ushort RadarDeviceId, ushort CalibMonTimeUnit, char NumCascadeDevices, char DeviceId)
        {
            GlobalRef.g_RadarDeviceId = (uint)RadarDeviceId;
            ScriptOps.m_MainForm.CalibConfig.UpdateTimeUnitConfigData();
            m_TimeUnitConfigParameters.CalinMonTimeUnit = CalibMonTimeUnit;
            m_TimeUnitConfigParameters.NumOfCascadeDevices = NumCascadeDevices;
            m_TimeUnitConfigParameters.DevId = DeviceId;
            ScriptOps.m_MainForm.CalibConfig.UpdateTimeUnitConfigDataFrmCmdSrc();
            return iSetTimeUnitConfig_Gui(true, false);
        }

        public int UpdateNSetInternalTX3AnalogSignalMonitoringConfData(ushort RadarDeviceId, char ProfileIndex, char ReportingMode)
        {
            int result = -1;
            GlobalRef.g_RadarDeviceId = (uint)RadarDeviceId;
            ScriptOps.m_MainForm.p000001.UpdateTX3IntAnalogSigMonConfigData();
            m_MonInternalTx3AnalogSignalConfigParameters.ProfileIndex = ProfileIndex;
            m_MonInternalTx3AnalogSignalConfigParameters.ReportingMode = ReportingMode;
            ScriptOps.m_MainForm.p000001.UpdateTX3IntAnalogSigMonConfigDataFrmCmdSrc();
            return result;
        }

        public int UpdateNInternalTX3AnalogSignalMonitoringConfigurationData_cmd(out string StatusFlag, out string Errorcode, out string profileIndex, out string Timestamp)
        {
            StatusFlag = string.Empty;
            Errorcode = string.Empty;
            profileIndex = string.Empty;
            Timestamp = string.Empty;
            ScriptOps.m_MainForm.p000001.UpdateTX3IntAnalogSigMonConfigData();
            return iSetInternalTX3AnalogSignalMonConfig_ImplForLuaCommand(out StatusFlag, out Errorcode, out profileIndex, out Timestamp);
        }

        private int iSetInternalTX3AnalogSignalMonConfig_ImplForLuaCommand(out string StatusFlag, out string Errorcode, out string profileIndex, out string Timestamp)
        {
            StatusFlag = string.Empty;
            Errorcode = string.Empty;
            profileIndex = string.Empty;
            Timestamp = string.Empty;
            ScriptOps.IntTx1AnalogSigMonConfigurationParam.ProfileIndex = 0;
            ScriptOps.IntTx1AnalogSigMonConfigurationParam.ReportingMode = 0;
            ScriptOps.IntTx1AnalogSigMonConfigurationParam.Reserved = 0;
            ScriptOps.IntTx1AnalogSigMonConfigurationParam.Reserved2 = 0U;
            ScriptOps.IntTx2AnalogSigMonConfigurationParam.ProfileIndex = 0;
            ScriptOps.IntTx2AnalogSigMonConfigurationParam.ReportingMode = 0;
            ScriptOps.IntTx2AnalogSigMonConfigurationParam.Reserved = 0;
            ScriptOps.IntTx2AnalogSigMonConfigurationParam.Reserved2 = 0U;
            ScriptOps.IntTx3AnalogSigMonConfigurationParam.ProfileIndex = 0;
            ScriptOps.IntTx3AnalogSigMonConfigurationParam.ReportingMode = 0;
            ScriptOps.IntTx3AnalogSigMonConfigurationParam.Reserved = 0;
            ScriptOps.IntTx3AnalogSigMonConfigurationParam.Reserved2 = 0U;
            ScriptOps.IntTx3AnalogSigMonConfigurationParam.ProfileIndex = (byte)m_MonInternalTx3AnalogSignalConfigParameters.ProfileIndex;
            ScriptOps.IntTx3AnalogSigMonConfigurationParam.ReportingMode = (byte)m_MonInternalTx3AnalogSignalConfigParameters.ReportingMode;
            ScriptOps.IntTx3AnalogSigMonConfigurationParam.Reserved = 0;
            ScriptOps.IntTx3AnalogSigMonConfigurationParam.Reserved2 = 0U;
            GCHandle.Alloc(ScriptOps.IntTx1AnalogSigMonConfigurationParam, GCHandleType.Pinned).AddrOfPinnedObject();
            GCHandle.Alloc(ScriptOps.IntTx2AnalogSigMonConfigurationParam, GCHandleType.Pinned).AddrOfPinnedObject();
            IntPtr pTX3IntAnalogSigMonitoringConfigurationData = GCHandle.Alloc(ScriptOps.IntTx3AnalogSigMonConfigurationParam, GCHandleType.Pinned).AddrOfPinnedObject();
            ScriptOps.Tx1Tx2Tx3IntAnalogSigMonitoringConfigurationParam.pTX1IntAnalogSigMonitoringConfigurationData = IntPtr.Zero;
            ScriptOps.Tx1Tx2Tx3IntAnalogSigMonitoringConfigurationParam.pTX2IntAnalogSigMonitoringConfigurationData = IntPtr.Zero;
            ScriptOps.Tx1Tx2Tx3IntAnalogSigMonitoringConfigurationParam.pTX3IntAnalogSigMonitoringConfigurationData = pTX3IntAnalogSigMonitoringConfigurationData;
            IntPtr data = GCHandle.Alloc(ScriptOps.Tx1Tx2Tx3IntAnalogSigMonitoringConfigurationParam, GCHandleType.Pinned).AddrOfPinnedObject();
            int num;
            if (GlobalRef.g_NtvRS232Connect[(int)GlobalRef.g_RadarDeviceIndex] && GlobalRef.g_CasCadeDeviceSpiConnect == 0U)
            {
                num = m_TsWrapper.Calling_WriteAddr_Single(4294959848U, 1U);
                if (m_GuiManager.DllOps.itempDisconnect(false) == 0)
                {
                    string full_command = string.Format("Debug Port Disconnected", new object[0]);
                    m_GuiManager.RecordLog(0, full_command);
                    if (!GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
                    {
                        iRs232ConnectDisconnect_impl();
                    }
                }
            }
            if (m_RadarDeviceModeConfigParams.NumberOfRadarDevicesDetected <= 1)
            {
                string full_command2 = string.Format("ar1.SetRfTx2IntAnaSignalsMonConfig({0}, {1})", new object[]
                {
                    m_MonInternalTx1AnalogSignalConfigParameters.ProfileIndex,
                    m_MonInternalTx1AnalogSignalConfigParameters.ReportingMode
                });
                m_GuiManager.RecordLog(6, full_command2);
            }
            else
            {
                string full_command3 = string.Format("ar1.SetRfTx2IntAnaSignalsMonConfig_mult({0}, {1}, {2})", new object[]
                {
                    GlobalRef.g_RadarDeviceId,
                    m_MonInternalTx1AnalogSignalConfigParameters.ProfileIndex,
                    m_MonInternalTx1AnalogSignalConfigParameters.ReportingMode
                });
                m_GuiManager.RecordLog(6, full_command3);
            }
            GlobalRef.g_InternalTx3AnaSigMon = 1U;
            num = Imports.RadarLinkImpl_RfTxIntAnaSignalsMonConfig((byte)GlobalRef.g_RadarDeviceId, data);
            while (GlobalRef.g_InternalTx3AnaSigMon == 0U)
            {
                Thread.Sleep(100);
            }
            if (num == 0)
            {
                if (GlobalRef.g_RadarDeviceId == 1U)
                {
                    StatusFlag = Convert.ToString(ScriptOps.IntTx3AnalogSigMonAsyncReportParam.StatusFlags);
                    Errorcode = Convert.ToString(ScriptOps.IntTx3AnalogSigMonAsyncReportParam.ErrorCode);
                    profileIndex = Convert.ToString(ScriptOps.IntTx3AnalogSigMonAsyncReportParam.ProfileIndex);
                    Timestamp = Convert.ToString(ScriptOps.IntTx3AnalogSigMonAsyncReportParam.TimeStamp);
                }
                else if (GlobalRef.g_RadarDeviceId == 2U)
                {
                    StatusFlag = Convert.ToString(ScriptOps.IntTx3AnalogSigMonAsyncReportParam.StatusFlags);
                    Errorcode = Convert.ToString(ScriptOps.IntTx3AnalogSigMonAsyncReportParam.ErrorCode);
                    profileIndex = Convert.ToString(ScriptOps.IntTx3AnalogSigMonAsyncReportParam.ProfileIndex);
                    Timestamp = Convert.ToString(ScriptOps.IntTx3AnalogSigMonAsyncReportParam.TimeStamp);
                }
                else if (GlobalRef.g_RadarDeviceId == 4U)
                {
                    StatusFlag = Convert.ToString(ScriptOps.IntTx3AnalogSigMonAsyncReportParam.StatusFlags);
                    Errorcode = Convert.ToString(ScriptOps.IntTx3AnalogSigMonAsyncReportParam.ErrorCode);
                    profileIndex = Convert.ToString(ScriptOps.IntTx3AnalogSigMonAsyncReportParam.ProfileIndex);
                    Timestamp = Convert.ToString(ScriptOps.IntTx3AnalogSigMonAsyncReportParam.TimeStamp);
                }
                else if (GlobalRef.g_RadarDeviceId == 8U)
                {
                    StatusFlag = Convert.ToString(ScriptOps.IntTx3AnalogSigMonAsyncReportParam.StatusFlags);
                    Errorcode = Convert.ToString(ScriptOps.IntTx3AnalogSigMonAsyncReportParam.ErrorCode);
                    profileIndex = Convert.ToString(ScriptOps.IntTx3AnalogSigMonAsyncReportParam.ProfileIndex);
                    Timestamp = Convert.ToString(ScriptOps.IntTx3AnalogSigMonAsyncReportParam.TimeStamp);
                }
            }
            if ((num == 0 && ((GlobalRef.g_CasCadeDeviceSpiConnect & 1U) == 1U || (GlobalRef.g_CasCadeDeviceSpiConnect & 2U) == 2U || (GlobalRef.g_CasCadeDeviceSpiConnect & 4U) == 4U || (GlobalRef.g_CasCadeDeviceSpiConnect & 8U) == 8U)) || GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
            {
                string full_command4 = string.Format("Status: Passed", new object[0]);
                m_GuiManager.RecordLog(6, full_command4);
            }
            else
            {
                string msg = string.Format("Status: Failed, Error Type: {0}", new object[]
                {
                    GetErrorType(num)
                });
                GlobalRef.LuaWrapper.PrintError(msg);
            }
            if (GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
            {
                if (iRs232ConnectDisconnect_impl() == 0 && !GlobalRef.g_NtvRS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
                {
                    m_GuiManager.DllOps.iConnect(1U, 0U);
                    string full_command5 = string.Format("Debug Port Reconnected!", new object[0]);
                    m_GuiManager.RecordLog(9, full_command5);
                    ScriptOps.KeepTrying(2000, new Func<bool>(spare_read));
                }
            }
            else if (GlobalRef.g_CasCadeDeviceSpiConnect == 0U)
            {
                string full_command6 = string.Format("Error Occurred in Port open close", new object[0]);
                m_GuiManager.RecordLog(9, full_command6);
            }
            return num;
        }

        public int UpdateNSetInternalTX2AnalogSignalMonitoringConfData(ushort RadarDeviceId, char ProfileIndex, char ReportingMode)
        {
            int result = -1;
            GlobalRef.g_RadarDeviceId = (uint)RadarDeviceId;
            ScriptOps.m_MainForm.p000001.UpdateTX2IntAnalogSigMonConfigData();
            m_MonInternalTx2AnalogSignalConfigParameters.ProfileIndex = ProfileIndex;
            m_MonInternalTx2AnalogSignalConfigParameters.ReportingMode = ReportingMode;
            ScriptOps.m_MainForm.p000001.UpdateTX2IntAnalogSigMonConfigDataFrmCmdSrc();
            return result;
        }

        public int UpdateNInternalTX2AnalogSignalMonitoringConfigurationData_cmd(out string StatusFlag, out string Errorcode, out string profileIndex, out string Timestamp)
        {
            StatusFlag = string.Empty;
            Errorcode = string.Empty;
            profileIndex = string.Empty;
            Timestamp = string.Empty;
            ScriptOps.m_MainForm.p000001.UpdateTX2IntAnalogSigMonConfigData();
            return iSetInternalTX2AnalogSignalMonConfig_ImplForLuaCommand(out StatusFlag, out Errorcode, out profileIndex, out Timestamp);
        }

        private int iSetInternalTX2AnalogSignalMonConfig_ImplForLuaCommand(out string StatusFlag, out string Errorcode, out string profileIndex, out string Timestamp)
        {
            StatusFlag = string.Empty;
            Errorcode = string.Empty;
            profileIndex = string.Empty;
            Timestamp = string.Empty;
            ScriptOps.IntTx1AnalogSigMonConfigurationParam.ProfileIndex = 0;
            ScriptOps.IntTx1AnalogSigMonConfigurationParam.ReportingMode = 0;
            ScriptOps.IntTx1AnalogSigMonConfigurationParam.Reserved = 0;
            ScriptOps.IntTx1AnalogSigMonConfigurationParam.Reserved2 = 0U;
            ScriptOps.IntTx2AnalogSigMonConfigurationParam.ProfileIndex = 0;
            ScriptOps.IntTx2AnalogSigMonConfigurationParam.ReportingMode = 0;
            ScriptOps.IntTx2AnalogSigMonConfigurationParam.Reserved = 0;
            ScriptOps.IntTx2AnalogSigMonConfigurationParam.Reserved2 = 0U;
            ScriptOps.IntTx3AnalogSigMonConfigurationParam.ProfileIndex = 0;
            ScriptOps.IntTx3AnalogSigMonConfigurationParam.ReportingMode = 0;
            ScriptOps.IntTx3AnalogSigMonConfigurationParam.Reserved = 0;
            ScriptOps.IntTx3AnalogSigMonConfigurationParam.Reserved2 = 0U;
            ScriptOps.IntTx2AnalogSigMonConfigurationParam.ProfileIndex = (byte)m_MonInternalTx2AnalogSignalConfigParameters.ProfileIndex;
            ScriptOps.IntTx2AnalogSigMonConfigurationParam.ReportingMode = (byte)m_MonInternalTx2AnalogSignalConfigParameters.ReportingMode;
            ScriptOps.IntTx2AnalogSigMonConfigurationParam.Reserved = 0;
            ScriptOps.IntTx2AnalogSigMonConfigurationParam.Reserved2 = 0U;
            GCHandle.Alloc(ScriptOps.IntTx1AnalogSigMonConfigurationParam, GCHandleType.Pinned).AddrOfPinnedObject();
            IntPtr pTX2IntAnalogSigMonitoringConfigurationData = GCHandle.Alloc(ScriptOps.IntTx2AnalogSigMonConfigurationParam, GCHandleType.Pinned).AddrOfPinnedObject();
            GCHandle.Alloc(ScriptOps.IntTx3AnalogSigMonConfigurationParam, GCHandleType.Pinned).AddrOfPinnedObject();
            ScriptOps.Tx1Tx2Tx3IntAnalogSigMonitoringConfigurationParam.pTX1IntAnalogSigMonitoringConfigurationData = IntPtr.Zero;
            ScriptOps.Tx1Tx2Tx3IntAnalogSigMonitoringConfigurationParam.pTX2IntAnalogSigMonitoringConfigurationData = pTX2IntAnalogSigMonitoringConfigurationData;
            ScriptOps.Tx1Tx2Tx3IntAnalogSigMonitoringConfigurationParam.pTX3IntAnalogSigMonitoringConfigurationData = IntPtr.Zero;
            IntPtr data = GCHandle.Alloc(ScriptOps.Tx1Tx2Tx3IntAnalogSigMonitoringConfigurationParam, GCHandleType.Pinned).AddrOfPinnedObject();
            int num;
            if (GlobalRef.g_NtvRS232Connect[(int)GlobalRef.g_RadarDeviceIndex] && GlobalRef.g_CasCadeDeviceSpiConnect == 0U)
            {
                num = m_TsWrapper.Calling_WriteAddr_Single(4294959848U, 1U);
                if (m_GuiManager.DllOps.itempDisconnect(false) == 0)
                {
                    string full_command = string.Format("Debug Port Disconnected", new object[0]);
                    m_GuiManager.RecordLog(0, full_command);
                    if (!GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
                    {
                        iRs232ConnectDisconnect_impl();
                    }
                }
            }
            if (m_RadarDeviceModeConfigParams.NumberOfRadarDevicesDetected <= 1)
            {
                string full_command2 = string.Format("ar1.SetRfTx1IntAnaSignalsMonConfig({0}, {1})", new object[]
                {
                    m_MonInternalTx1AnalogSignalConfigParameters.ProfileIndex,
                    m_MonInternalTx1AnalogSignalConfigParameters.ReportingMode
                });
                m_GuiManager.RecordLog(6, full_command2);
            }
            else
            {
                string full_command3 = string.Format("ar1.SetRfTx1IntAnaSignalsMonConfig_mult({0}, {1}, {2})", new object[]
                {
                    GlobalRef.g_RadarDeviceId,
                    m_MonInternalTx1AnalogSignalConfigParameters.ProfileIndex,
                    m_MonInternalTx1AnalogSignalConfigParameters.ReportingMode
                });
                m_GuiManager.RecordLog(6, full_command3);
            }
            GlobalRef.g_InternalTx2AnaSigMon = 1U;
            num = Imports.RadarLinkImpl_RfTxIntAnaSignalsMonConfig((byte)GlobalRef.g_RadarDeviceId, data);
            while (GlobalRef.g_InternalTx2AnaSigMon == 0U)
            {
                Thread.Sleep(100);
            }
            if (num == 0)
            {
                if (GlobalRef.g_RadarDeviceId == 1U)
                {
                    StatusFlag = Convert.ToString(ScriptOps.IntTx2AnalogSigMonAsyncReportParam.StatusFlags);
                    Errorcode = Convert.ToString(ScriptOps.IntTx2AnalogSigMonAsyncReportParam.ErrorCode);
                    profileIndex = Convert.ToString(ScriptOps.IntTx2AnalogSigMonAsyncReportParam.ProfileIndex);
                    Timestamp = Convert.ToString(ScriptOps.IntTx2AnalogSigMonAsyncReportParam.TimeStamp);
                }
                else if (GlobalRef.g_RadarDeviceId == 2U)
                {
                    StatusFlag = Convert.ToString(ScriptOps.IntTx2AnalogSigMonAsyncReportParam.StatusFlags);
                    Errorcode = Convert.ToString(ScriptOps.IntTx2AnalogSigMonAsyncReportParam.ErrorCode);
                    profileIndex = Convert.ToString(ScriptOps.IntTx2AnalogSigMonAsyncReportParam.ProfileIndex);
                    Timestamp = Convert.ToString(ScriptOps.IntTx2AnalogSigMonAsyncReportParam.TimeStamp);
                }
                else if (GlobalRef.g_RadarDeviceId == 4U)
                {
                    StatusFlag = Convert.ToString(ScriptOps.IntTx2AnalogSigMonAsyncReportParam.StatusFlags);
                    Errorcode = Convert.ToString(ScriptOps.IntTx2AnalogSigMonAsyncReportParam.ErrorCode);
                    profileIndex = Convert.ToString(ScriptOps.IntTx2AnalogSigMonAsyncReportParam.ProfileIndex);
                    Timestamp = Convert.ToString(ScriptOps.IntTx2AnalogSigMonAsyncReportParam.TimeStamp);
                }
                else if (GlobalRef.g_RadarDeviceId == 8U)
                {
                    StatusFlag = Convert.ToString(ScriptOps.IntTx2AnalogSigMonAsyncReportParam.StatusFlags);
                    Errorcode = Convert.ToString(ScriptOps.IntTx2AnalogSigMonAsyncReportParam.ErrorCode);
                    profileIndex = Convert.ToString(ScriptOps.IntTx2AnalogSigMonAsyncReportParam.ProfileIndex);
                    Timestamp = Convert.ToString(ScriptOps.IntTx2AnalogSigMonAsyncReportParam.TimeStamp);
                }
            }
            if ((num == 0 && ((GlobalRef.g_CasCadeDeviceSpiConnect & 1U) == 1U || (GlobalRef.g_CasCadeDeviceSpiConnect & 2U) == 2U || (GlobalRef.g_CasCadeDeviceSpiConnect & 4U) == 4U || (GlobalRef.g_CasCadeDeviceSpiConnect & 8U) == 8U)) || GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
            {
                string full_command4 = string.Format("Status: Passed", new object[0]);
                m_GuiManager.RecordLog(6, full_command4);
            }
            else
            {
                string msg = string.Format("Status: Failed, Error Type: {0}", new object[]
                {
                    GetErrorType(num)
                });
                GlobalRef.LuaWrapper.PrintError(msg);
            }
            if (GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
            {
                if (iRs232ConnectDisconnect_impl() == 0 && !GlobalRef.g_NtvRS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
                {
                    m_GuiManager.DllOps.iConnect(1U, 0U);
                    string full_command5 = string.Format("Debug Port Reconnected!", new object[0]);
                    m_GuiManager.RecordLog(9, full_command5);
                    ScriptOps.KeepTrying(2000, new Func<bool>(spare_read));
                }
            }
            else if (GlobalRef.g_CasCadeDeviceSpiConnect == 0U)
            {
                string full_command6 = string.Format("Error Occurred in Port open close", new object[0]);
                m_GuiManager.RecordLog(9, full_command6);
            }
            return num;
        }

        public int UpdateNSetTemperatureMonitoringConfData(ushort RadarDeviceId, char ReportingMode, short AnaTempThreshMin, short AnaTempThreshMax, short DigTempThreshMin, short DigTempThreshMax, short TempDiffThresh)
        {
            int result = -1;
            GlobalRef.g_RadarDeviceId = (uint)RadarDeviceId;
            ScriptOps.m_MainForm.AnalogMon2Config.UpdateTemperatureMonConfigData();
            m_MonTemperatureConfigParameters.ReportingMode = ReportingMode;
            m_MonTemperatureConfigParameters.AnaTempThreshMin = AnaTempThreshMin;
            m_MonTemperatureConfigParameters.AnaTempThreshMax = AnaTempThreshMax;
            m_MonTemperatureConfigParameters.DigTempThreshMin = DigTempThreshMin;
            m_MonTemperatureConfigParameters.DigTempThreshMax = DigTempThreshMax;
            m_MonTemperatureConfigParameters.TempDiffThresh = TempDiffThresh;
            ScriptOps.m_MainForm.AnalogMon2Config.UpdateTemperatureMonConfigDataFrmCmdSrc();
            return result;
        }

        public int UpdateNTemperatureMonitoringConfigurationData_cmd(out string StatusFlag, out string Errorcode, out string Rx1TempVal, out string Rx2TempVal, out string Rx3TempVal, out string Rx4TempVal, out string Tx1TempVal, out string Tx2TempVal, out string Tx3TempVal, out string PMTempVal, out string Dig1TempVal, out string Dig2TempVal, out string Timestamp)
        {
            StatusFlag = string.Empty;
            Errorcode = string.Empty;
            Rx1TempVal = string.Empty;
            Rx2TempVal = string.Empty;
            Rx3TempVal = string.Empty;
            Rx4TempVal = string.Empty;
            Tx1TempVal = string.Empty;
            Tx2TempVal = string.Empty;
            Tx3TempVal = string.Empty;
            PMTempVal = string.Empty;
            Dig1TempVal = string.Empty;
            Dig2TempVal = string.Empty;
            Timestamp = string.Empty;
            ScriptOps.m_MainForm.AnalogMon2Config.UpdateTemperatureMonConfigData();
            return iSetTemperatureMonConfig_ImplForLuaCommand(out StatusFlag, out Errorcode, out Rx1TempVal, out Rx2TempVal, out Rx3TempVal, out Rx4TempVal, out Tx1TempVal, out Tx2TempVal, out Tx3TempVal, out PMTempVal, out Dig1TempVal, out Dig2TempVal, out Timestamp);
        }

        private int iSetTemperatureMonConfig_ImplForLuaCommand(out string StatusFlag, out string Errorcode, out string Rx1TempVal, out string Rx2TempVal, out string Rx3TempVal, out string Rx4TempVal, out string Tx1TempVal, out string Tx2TempVal, out string Tx3TempVal, out string PMTempVal, out string Dig1TempVal, out string Dig2TempVal, out string Timestamp)
        {
            StatusFlag = string.Empty;
            Errorcode = string.Empty;
            Rx1TempVal = string.Empty;
            Rx2TempVal = string.Empty;
            Rx3TempVal = string.Empty;
            Rx4TempVal = string.Empty;
            Tx1TempVal = string.Empty;
            Tx2TempVal = string.Empty;
            Tx3TempVal = string.Empty;
            PMTempVal = string.Empty;
            Dig1TempVal = string.Empty;
            Dig2TempVal = string.Empty;
            Timestamp = string.Empty;
            TemperatureMonConfigurationParam.ReportingMode = (byte)m_MonTemperatureConfigParameters.ReportingMode;
            TemperatureMonConfigurationParam.Reserved = 0;
            TemperatureMonConfigurationParam.AnaTempThreshMin = m_MonTemperatureConfigParameters.AnaTempThreshMin;
            TemperatureMonConfigurationParam.AnaTempThreshMax = m_MonTemperatureConfigParameters.AnaTempThreshMax;
            TemperatureMonConfigurationParam.DigTempThreshMin = m_MonTemperatureConfigParameters.DigTempThreshMin;
            TemperatureMonConfigurationParam.DigTempThreshMax = m_MonTemperatureConfigParameters.DigTempThreshMax;
            TemperatureMonConfigurationParam.TempDiffThresh = m_MonTemperatureConfigParameters.TempDiffThresh;
            TemperatureMonConfigurationParam.Reserved2 = 0U;
            TemperatureMonConfigurationParam.Reserved3 = 0U;
            IntPtr data = GCHandle.Alloc(TemperatureMonConfigurationParam, GCHandleType.Pinned).AddrOfPinnedObject();
            int num;
            if (GlobalRef.g_NtvRS232Connect[(int)GlobalRef.g_RadarDeviceIndex] && GlobalRef.g_CasCadeDeviceSpiConnect == 0U)
            {
                num = m_TsWrapper.Calling_WriteAddr_Single(4294959848U, 1U);
                if (m_GuiManager.DllOps.itempDisconnect(false) == 0)
                {
                    string full_command = string.Format("Debug Port Disconnected", new object[0]);
                    m_GuiManager.RecordLog(0, full_command);
                    if (!GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
                    {
                        iRs232ConnectDisconnect_impl();
                    }
                }
            }
            if (m_RadarDeviceModeConfigParams.NumberOfRadarDevicesDetected <= 1)
            {
                string full_command2 = string.Format("ar1.SetRfTempMonConfig({0}, {1}, {2}, {3}, {4}, {5})", new object[]
                {
                    m_MonTemperatureConfigParameters.ReportingMode,
                    m_MonTemperatureConfigParameters.AnaTempThreshMin,
                    m_MonTemperatureConfigParameters.AnaTempThreshMax,
                    m_MonTemperatureConfigParameters.DigTempThreshMin,
                    m_MonTemperatureConfigParameters.DigTempThreshMax,
                    m_MonTemperatureConfigParameters.TempDiffThresh
                });
                m_GuiManager.RecordLog(6, full_command2);
            }
            else
            {
                string full_command3 = string.Format("ar1.SetRfTempMonConfig_mult({0}, {1}, {2}, {3}, {4}, {5}, {6})", new object[]
                {
                    GlobalRef.g_RadarDeviceId,
                    m_MonTemperatureConfigParameters.ReportingMode,
                    m_MonTemperatureConfigParameters.AnaTempThreshMin,
                    m_MonTemperatureConfigParameters.AnaTempThreshMax,
                    m_MonTemperatureConfigParameters.DigTempThreshMin,
                    m_MonTemperatureConfigParameters.DigTempThreshMax,
                    m_MonTemperatureConfigParameters.TempDiffThresh
                });
                m_GuiManager.RecordLog(6, full_command3);
            }
            GlobalRef.g_TemperatureMon = 1U;
            num = Imports.RadarLinkImpl_RfTempMonConfig(GlobalRef.g_RadarDeviceId, data);
            while (GlobalRef.g_TemperatureMon == 0U)
            {
                Thread.Sleep(100);
            }
            if (num == 0)
            {
                if (GlobalRef.g_RadarDeviceId == 1U)
                {
                    StatusFlag = Convert.ToString(ScriptOps.TemperatureMonAsyncReportParam.StatusFlags);
                    Errorcode = Convert.ToString(ScriptOps.TemperatureMonAsyncReportParam.ErrorCode);
                    Rx1TempVal = Convert.ToString(ScriptOps.TemperatureMonAsyncReportParam.Rx1TempValue);
                    Rx2TempVal = Convert.ToString(ScriptOps.TemperatureMonAsyncReportParam.Rx2TempValue);
                    Rx3TempVal = Convert.ToString(ScriptOps.TemperatureMonAsyncReportParam.Rx3TempValue);
                    Rx4TempVal = Convert.ToString(ScriptOps.TemperatureMonAsyncReportParam.Rx4TempValue);
                    Tx1TempVal = Convert.ToString(ScriptOps.TemperatureMonAsyncReportParam.Tx1TempValue);
                    Tx2TempVal = Convert.ToString(ScriptOps.TemperatureMonAsyncReportParam.Tx2TempValue);
                    Tx3TempVal = Convert.ToString(ScriptOps.TemperatureMonAsyncReportParam.Tx3TempValue);
                    PMTempVal = Convert.ToString(ScriptOps.TemperatureMonAsyncReportParam.PMTempValue);
                    Dig1TempVal = Convert.ToString(ScriptOps.TemperatureMonAsyncReportParam.Dig1TempValue);
                    Dig2TempVal = Convert.ToString(ScriptOps.TemperatureMonAsyncReportParam.Dig2TempValue);
                    Timestamp = Convert.ToString(ScriptOps.TemperatureMonAsyncReportParam.TimeStamp);
                }
                else if (GlobalRef.g_RadarDeviceId == 2U)
                {
                    StatusFlag = Convert.ToString(ScriptOps.TemperatureMonAsyncReportParam.StatusFlags);
                    Errorcode = Convert.ToString(ScriptOps.TemperatureMonAsyncReportParam.ErrorCode);
                    Rx1TempVal = Convert.ToString(ScriptOps.TemperatureMonAsyncReportParam.Rx1TempValue);
                    Rx2TempVal = Convert.ToString(ScriptOps.TemperatureMonAsyncReportParam.Rx2TempValue);
                    Rx3TempVal = Convert.ToString(ScriptOps.TemperatureMonAsyncReportParam.Rx3TempValue);
                    Rx4TempVal = Convert.ToString(ScriptOps.TemperatureMonAsyncReportParam.Rx4TempValue);
                    Tx1TempVal = Convert.ToString(ScriptOps.TemperatureMonAsyncReportParam.Tx1TempValue);
                    Tx2TempVal = Convert.ToString(ScriptOps.TemperatureMonAsyncReportParam.Tx2TempValue);
                    Tx3TempVal = Convert.ToString(ScriptOps.TemperatureMonAsyncReportParam.Tx3TempValue);
                    PMTempVal = Convert.ToString(ScriptOps.TemperatureMonAsyncReportParam.PMTempValue);
                    Dig1TempVal = Convert.ToString(ScriptOps.TemperatureMonAsyncReportParam.Dig1TempValue);
                    Dig2TempVal = Convert.ToString(ScriptOps.TemperatureMonAsyncReportParam.Dig2TempValue);
                    Timestamp = Convert.ToString(ScriptOps.TemperatureMonAsyncReportParam.TimeStamp);
                }
                else if (GlobalRef.g_RadarDeviceId == 4U)
                {
                    StatusFlag = Convert.ToString(ScriptOps.TemperatureMonAsyncReportParam.StatusFlags);
                    Errorcode = Convert.ToString(ScriptOps.TemperatureMonAsyncReportParam.ErrorCode);
                    Rx1TempVal = Convert.ToString(ScriptOps.TemperatureMonAsyncReportParam.Rx1TempValue);
                    Rx2TempVal = Convert.ToString(ScriptOps.TemperatureMonAsyncReportParam.Rx2TempValue);
                    Rx3TempVal = Convert.ToString(ScriptOps.TemperatureMonAsyncReportParam.Rx3TempValue);
                    Rx4TempVal = Convert.ToString(ScriptOps.TemperatureMonAsyncReportParam.Rx4TempValue);
                    Tx1TempVal = Convert.ToString(ScriptOps.TemperatureMonAsyncReportParam.Tx1TempValue);
                    Tx2TempVal = Convert.ToString(ScriptOps.TemperatureMonAsyncReportParam.Tx2TempValue);
                    Tx3TempVal = Convert.ToString(ScriptOps.TemperatureMonAsyncReportParam.Tx3TempValue);
                    PMTempVal = Convert.ToString(ScriptOps.TemperatureMonAsyncReportParam.PMTempValue);
                    Dig1TempVal = Convert.ToString(ScriptOps.TemperatureMonAsyncReportParam.Dig1TempValue);
                    Dig2TempVal = Convert.ToString(ScriptOps.TemperatureMonAsyncReportParam.Dig2TempValue);
                    Timestamp = Convert.ToString(ScriptOps.TemperatureMonAsyncReportParam.TimeStamp);
                }
                else if (GlobalRef.g_RadarDeviceId == 8U)
                {
                    StatusFlag = Convert.ToString(ScriptOps.TemperatureMonAsyncReportParam.StatusFlags);
                    Errorcode = Convert.ToString(ScriptOps.TemperatureMonAsyncReportParam.ErrorCode);
                    Rx1TempVal = Convert.ToString(ScriptOps.TemperatureMonAsyncReportParam.Rx1TempValue);
                    Rx2TempVal = Convert.ToString(ScriptOps.TemperatureMonAsyncReportParam.Rx2TempValue);
                    Rx3TempVal = Convert.ToString(ScriptOps.TemperatureMonAsyncReportParam.Rx3TempValue);
                    Rx4TempVal = Convert.ToString(ScriptOps.TemperatureMonAsyncReportParam.Rx4TempValue);
                    Tx1TempVal = Convert.ToString(ScriptOps.TemperatureMonAsyncReportParam.Tx1TempValue);
                    Tx2TempVal = Convert.ToString(ScriptOps.TemperatureMonAsyncReportParam.Tx2TempValue);
                    Tx3TempVal = Convert.ToString(ScriptOps.TemperatureMonAsyncReportParam.Tx3TempValue);
                    PMTempVal = Convert.ToString(ScriptOps.TemperatureMonAsyncReportParam.PMTempValue);
                    Dig1TempVal = Convert.ToString(ScriptOps.TemperatureMonAsyncReportParam.Dig1TempValue);
                    Dig2TempVal = Convert.ToString(ScriptOps.TemperatureMonAsyncReportParam.Dig2TempValue);
                    Timestamp = Convert.ToString(ScriptOps.TemperatureMonAsyncReportParam.TimeStamp);
                }
            }
            if ((num == 0 && ((GlobalRef.g_CasCadeDeviceSpiConnect & 1U) == 1U || (GlobalRef.g_CasCadeDeviceSpiConnect & 2U) == 2U || (GlobalRef.g_CasCadeDeviceSpiConnect & 4U) == 4U || (GlobalRef.g_CasCadeDeviceSpiConnect & 8U) == 8U)) || GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
            {
                string full_command4 = string.Format("Status: Passed", new object[0]);
                m_GuiManager.RecordLog(6, full_command4);
            }
            else
            {
                string msg = string.Format("Status: Failed, Error Type: {0}", new object[]
                {
                    GetErrorType(num)
                });
                GlobalRef.LuaWrapper.PrintError(msg);
            }
            if (GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
            {
                if (iRs232ConnectDisconnect_impl() == 0 && !GlobalRef.g_NtvRS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
                {
                    m_GuiManager.DllOps.iConnect(1U, 0U);
                    string full_command5 = string.Format("Debug Port Reconnected!", new object[0]);
                    m_GuiManager.RecordLog(9, full_command5);
                    ScriptOps.KeepTrying(2000, new Func<bool>(spare_read));
                }
            }
            else if (GlobalRef.g_CasCadeDeviceSpiConnect == 0U)
            {
                string full_command6 = string.Format("Error Occurred in Port open close", new object[0]);
                m_GuiManager.RecordLog(9, full_command6);
            }
            return num;
        }

        public int UpdateNSetExternalAnalogSignalMonitoringConfData(ushort RadarDeviceId, char ReportingMode, char SigIpEnaAnalogTest1, char SigIpEnaAnalogTest2, char SigIpEnaAnalogTest3, char SigIpEnaAnalogTest4, char SigIpEnaAnalogMux, char SigIpEnaAnalogVSense, char SigBufEnaAnalogTest1, char SigBufEnaAnalogTest2, char SigBufEnaAnalogTest3, char SigBufEnaAnalogTest4, char SigBufEnaAnalogMux, double SigSettlingTimeAnalogTest1, double SigSettlingTimeAnalogTest2, double SigSettlingTimeAnalogTest3, double SigSettlingTimeAnalogTest4, double SigSettlingTimeAnalogMux, double SigSettlingTimeAnalogVSense, double SigMinThresholdAnalogTest1, double SigMinThresholdAnalogTest2, double SigMinThresholdAnalogTest3, double SigMinThresholdAnalogTest4, double SigMinThresholdAnalogMux, double SigMinThresholdAnalogVSense, double SigMaxThresholdAnalogTest1, double SigMaxThresholdAnalogTest2, double SigMaxThresholdAnalogTest3, double SigMaxThresholdAnalogTest4, double SigMaxThresholdAnalogMux, double SigMaxThresholdAnalogVSense)
        {
            int result = -1;
            GlobalRef.g_RadarDeviceId = (uint)RadarDeviceId;
            ScriptOps.m_MainForm.p000001.UpdateExternalAnalogSignalsMonConfigData();
            m_MonExternalAnalogSignalConfigParameters.ReportingMode = ReportingMode;
            m_MonExternalAnalogSignalConfigParameters.SigIpEnaAnalogTest1 = SigIpEnaAnalogTest1;
            m_MonExternalAnalogSignalConfigParameters.SigIpEnaAnalogTest2 = SigIpEnaAnalogTest2;
            m_MonExternalAnalogSignalConfigParameters.SigIpEnaAnalogTest3 = SigIpEnaAnalogTest3;
            m_MonExternalAnalogSignalConfigParameters.SigIpEnaAnalogTest4 = SigIpEnaAnalogTest4;
            m_MonExternalAnalogSignalConfigParameters.SigIpEnaAnalogMux = SigIpEnaAnalogMux;
            m_MonExternalAnalogSignalConfigParameters.SigIpEnaAnalogVSense = SigIpEnaAnalogVSense;
            m_MonExternalAnalogSignalConfigParameters.SigBufEnaAnalogTest1 = SigBufEnaAnalogTest1;
            m_MonExternalAnalogSignalConfigParameters.SigBufEnaAnalogTest2 = SigBufEnaAnalogTest2;
            m_MonExternalAnalogSignalConfigParameters.SigBufEnaAnalogTest3 = SigBufEnaAnalogTest3;
            m_MonExternalAnalogSignalConfigParameters.SigBufEnaAnalogTest4 = SigBufEnaAnalogTest4;
            m_MonExternalAnalogSignalConfigParameters.SigBufEnaAnalogMux = SigBufEnaAnalogMux;
            m_MonExternalAnalogSignalConfigParameters.SigSettlingTimeAnalogTest1 = SigSettlingTimeAnalogTest1;
            m_MonExternalAnalogSignalConfigParameters.SigSettlingTimeAnalogTest2 = SigSettlingTimeAnalogTest2;
            m_MonExternalAnalogSignalConfigParameters.SigSettlingTimeAnalogTest3 = SigSettlingTimeAnalogTest3;
            m_MonExternalAnalogSignalConfigParameters.SigSettlingTimeAnalogTest4 = SigSettlingTimeAnalogTest4;
            m_MonExternalAnalogSignalConfigParameters.SigSettlingTimeAnalogMux = SigSettlingTimeAnalogMux;
            m_MonExternalAnalogSignalConfigParameters.SigSettlingTimeAnalogVSense = SigSettlingTimeAnalogVSense;
            m_MonExternalAnalogSignalConfigParameters.SigMinThresholdAnalogTest1 = SigMinThresholdAnalogTest1;
            m_MonExternalAnalogSignalConfigParameters.SigMinThresholdAnalogTest2 = SigMinThresholdAnalogTest2;
            m_MonExternalAnalogSignalConfigParameters.SigMinThresholdAnalogTest3 = SigMinThresholdAnalogTest3;
            m_MonExternalAnalogSignalConfigParameters.SigMinThresholdAnalogTest4 = SigMinThresholdAnalogTest4;
            m_MonExternalAnalogSignalConfigParameters.SigMinThresholdAnalogMux = SigMinThresholdAnalogMux;
            m_MonExternalAnalogSignalConfigParameters.SigMinThresholdAnalogVSense = SigMinThresholdAnalogVSense;
            m_MonExternalAnalogSignalConfigParameters.SigMaxThresholdAnalogTest1 = SigMaxThresholdAnalogTest1;
            m_MonExternalAnalogSignalConfigParameters.SigMaxThresholdAnalogTest2 = SigMaxThresholdAnalogTest2;
            m_MonExternalAnalogSignalConfigParameters.SigMaxThresholdAnalogTest3 = SigMaxThresholdAnalogTest3;
            m_MonExternalAnalogSignalConfigParameters.SigMaxThresholdAnalogTest4 = SigMaxThresholdAnalogTest4;
            m_MonExternalAnalogSignalConfigParameters.SigMaxThresholdAnalogMux = SigMaxThresholdAnalogMux;
            m_MonExternalAnalogSignalConfigParameters.SigMaxThresholdAnalogVSense = SigMaxThresholdAnalogVSense;
            ScriptOps.m_MainForm.p000001.UpdateExternalAnalogSignalsMonConfigDataFrmCmdSrc();
            return result;
        }

        public int UpdateNExternalAnalogSignalMonitoringConfigurationData_cmd(out string StatusFlag, out string Errorcode, out string ExtAnalogSigtest1Val, out string ExtAnalogSigtest2Val, out string ExtAnalogSigtest3Val, out string ExtAnalogSigtest4Val, out string ExtAnalogSigmuxVal, out string ExtAnalogSigvsenseVal, out string Timestamp)
        {
            StatusFlag = string.Empty;
            Errorcode = string.Empty;
            ExtAnalogSigtest1Val = string.Empty;
            ExtAnalogSigtest2Val = string.Empty;
            ExtAnalogSigtest3Val = string.Empty;
            ExtAnalogSigtest4Val = string.Empty;
            ExtAnalogSigmuxVal = string.Empty;
            ExtAnalogSigvsenseVal = string.Empty;
            Timestamp = string.Empty;
            ScriptOps.m_MainForm.p000001.UpdateExternalAnalogSignalsMonConfigData();
            return iSetExternalAnalogSignalMonConfig_ImplForLuaCommand(out StatusFlag, out Errorcode, out ExtAnalogSigtest1Val, out ExtAnalogSigtest2Val, out ExtAnalogSigtest3Val, out ExtAnalogSigtest4Val, out ExtAnalogSigmuxVal, out ExtAnalogSigvsenseVal, out Timestamp);
        }

        private int iSetExternalAnalogSignalMonConfig_ImplForLuaCommand(out string StatusFlag, out string Errorcode, out string ExtAnalogSigtest1Val, out string ExtAnalogSigtest2Val, out string ExtAnalogSigtest3Val, out string ExtAnalogSigtest4Val, out string ExtAnalogSigmuxVal, out string ExtAnalogSigvsenseVal, out string Timestamp)
        {
            StatusFlag = string.Empty;
            Errorcode = string.Empty;
            ExtAnalogSigtest1Val = string.Empty;
            ExtAnalogSigtest2Val = string.Empty;
            ExtAnalogSigtest3Val = string.Empty;
            ExtAnalogSigtest4Val = string.Empty;
            ExtAnalogSigmuxVal = string.Empty;
            ExtAnalogSigvsenseVal = string.Empty;
            Timestamp = string.Empty;
            ExtAnalogSigMonConfigurationParam.ReportingMode = (byte)m_MonExternalAnalogSignalConfigParameters.ReportingMode;
            ExtAnalogSigMonConfigurationParam.Reserved = 0;
            ExtAnalogSigMonConfigurationParam.SignalInputEnables = (byte)(m_MonExternalAnalogSignalConfigParameters.SigIpEnaAnalogTest1 | m_MonExternalAnalogSignalConfigParameters.SigIpEnaAnalogTest2 << 1 | m_MonExternalAnalogSignalConfigParameters.SigIpEnaAnalogTest3 << 2 | m_MonExternalAnalogSignalConfigParameters.SigIpEnaAnalogTest4 << 3 | m_MonExternalAnalogSignalConfigParameters.SigIpEnaAnalogMux << 4 | m_MonExternalAnalogSignalConfigParameters.SigIpEnaAnalogVSense << 5);
            ExtAnalogSigMonConfigurationParam.SignalBufferEnables = (byte)(m_MonExternalAnalogSignalConfigParameters.SigBufEnaAnalogTest1 | m_MonExternalAnalogSignalConfigParameters.SigBufEnaAnalogTest2 << 1 | m_MonExternalAnalogSignalConfigParameters.SigBufEnaAnalogTest3 << 2 | m_MonExternalAnalogSignalConfigParameters.SigBufEnaAnalogTest4 << 3 | m_MonExternalAnalogSignalConfigParameters.SigBufEnaAnalogMux << 4);
            ExtAnalogSigMonConfigurationParam.SignalSettlingTimeAnalogTest1AndTest2 = (ushort)((int)((byte)(m_MonExternalAnalogSignalConfigParameters.SigSettlingTimeAnalogTest1 / 0.8)) | (int)((byte)(m_MonExternalAnalogSignalConfigParameters.SigSettlingTimeAnalogTest2 / 0.8)) << 8);
            ExtAnalogSigMonConfigurationParam.SignalSettlingTimeAnalogTest3AndTest4 = (ushort)((int)((byte)(m_MonExternalAnalogSignalConfigParameters.SigSettlingTimeAnalogTest3 / 0.8)) | (int)((byte)(m_MonExternalAnalogSignalConfigParameters.SigSettlingTimeAnalogTest4 / 0.8)) << 8);
            ExtAnalogSigMonConfigurationParam.SignalSettlingTimeAnalogMuxAndVSense = (ushort)((int)((byte)(m_MonExternalAnalogSignalConfigParameters.SigSettlingTimeAnalogMux / 0.8)) | (int)((byte)(m_MonExternalAnalogSignalConfigParameters.SigSettlingTimeAnalogVSense / 0.8)) << 8);
            ExtAnalogSigMonConfigurationParam.SignalMinThresholdAnalogTest1AndTest2 = (ushort)((int)((byte)(m_MonExternalAnalogSignalConfigParameters.SigMinThresholdAnalogTest1 / 1800.0 * 256.0)) | (int)((byte)(m_MonExternalAnalogSignalConfigParameters.SigMinThresholdAnalogTest2 / 1800.0 * 256.0)) << 8);
            ExtAnalogSigMonConfigurationParam.SignalMinThresholdAnalogTest3AndTest4 = (ushort)((int)((byte)(m_MonExternalAnalogSignalConfigParameters.SigMinThresholdAnalogTest3 / 1800.0 * 256.0)) | (int)((byte)(m_MonExternalAnalogSignalConfigParameters.SigMinThresholdAnalogTest4 / 1800.0 * 256.0)) << 8);
            ExtAnalogSigMonConfigurationParam.SignalMinThresholdAnalogMuxAndVSense = (ushort)((int)((byte)(m_MonExternalAnalogSignalConfigParameters.SigMinThresholdAnalogMux / 1800.0 * 256.0)) | (int)((byte)(m_MonExternalAnalogSignalConfigParameters.SigMinThresholdAnalogVSense / 1800.0 * 256.0)) << 8);
            ExtAnalogSigMonConfigurationParam.SignalMaxThresholdAnalogTest1AndTest2 = (ushort)((int)((byte)(m_MonExternalAnalogSignalConfigParameters.SigMaxThresholdAnalogTest1 / 1800.0 * 256.0)) | (int)((byte)(m_MonExternalAnalogSignalConfigParameters.SigMaxThresholdAnalogTest2 / 1800.0 * 256.0)) << 8);
            ExtAnalogSigMonConfigurationParam.SignalMaxThresholdAnalogTest3AndTest4 = (ushort)((int)((byte)(m_MonExternalAnalogSignalConfigParameters.SigMaxThresholdAnalogTest3 / 1800.0 * 256.0)) | (int)((byte)(m_MonExternalAnalogSignalConfigParameters.SigMaxThresholdAnalogTest4 / 1800.0 * 256.0)) << 8);
            ExtAnalogSigMonConfigurationParam.SignalMaxThresholdAnalogMuxAndVSense = (ushort)((int)((byte)(m_MonExternalAnalogSignalConfigParameters.SigMaxThresholdAnalogMux / 1800.0 * 256.0)) | (int)((byte)(m_MonExternalAnalogSignalConfigParameters.SigMaxThresholdAnalogVSense / 1800.0 * 256.0)) << 8);
            ExtAnalogSigMonConfigurationParam.Reserved2 = 0;
            ExtAnalogSigMonConfigurationParam.Reserved3 = 0U;
            ExtAnalogSigMonConfigurationParam.Reserved4 = 0U;
            IntPtr data = GCHandle.Alloc(ExtAnalogSigMonConfigurationParam, GCHandleType.Pinned).AddrOfPinnedObject();
            int num;
            if (GlobalRef.g_NtvRS232Connect[(int)GlobalRef.g_RadarDeviceIndex] && GlobalRef.g_CasCadeDeviceSpiConnect == 0U)
            {
                num = m_TsWrapper.Calling_WriteAddr_Single(4294959848U, 1U);
                if (m_GuiManager.DllOps.itempDisconnect(false) == 0)
                {
                    string full_command = string.Format("Debug Port Disconnected", new object[0]);
                    m_GuiManager.RecordLog(0, full_command);
                    if (!GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
                    {
                        iRs232ConnectDisconnect_impl();
                    }
                }
            }
            if (m_RadarDeviceModeConfigParams.NumberOfRadarDevicesDetected <= 1)
            {
                string full_command2 = string.Format("ar1.SetRfExtAnaSignalsMonConfig({0}, {1}, {2}, {3}, {4} , {5}, {6}, {7}, {8}, {9}, {10}, {11}, {12}, {13}, {14}, {15}, {16}, {17}, {18}, {19}, {20}, {21}, {22}, {23}, {24}, {25}, {26}, {27}, {28}, {29})", new object[]
                {
                    m_MonExternalAnalogSignalConfigParameters.ReportingMode,
                    m_MonExternalAnalogSignalConfigParameters.SigIpEnaAnalogTest1,
                    m_MonExternalAnalogSignalConfigParameters.SigIpEnaAnalogTest2,
                    m_MonExternalAnalogSignalConfigParameters.SigIpEnaAnalogTest3,
                    m_MonExternalAnalogSignalConfigParameters.SigIpEnaAnalogTest4,
                    m_MonExternalAnalogSignalConfigParameters.SigIpEnaAnalogMux,
                    m_MonExternalAnalogSignalConfigParameters.SigIpEnaAnalogVSense,
                    m_MonExternalAnalogSignalConfigParameters.SigBufEnaAnalogTest1,
                    m_MonExternalAnalogSignalConfigParameters.SigBufEnaAnalogTest2,
                    m_MonExternalAnalogSignalConfigParameters.SigBufEnaAnalogTest3,
                    m_MonExternalAnalogSignalConfigParameters.SigBufEnaAnalogTest4,
                    m_MonExternalAnalogSignalConfigParameters.SigBufEnaAnalogMux,
                    (decimal)Math.Round(m_MonExternalAnalogSignalConfigParameters.SigSettlingTimeAnalogTest1, 1),
                    (decimal)Math.Round(m_MonExternalAnalogSignalConfigParameters.SigSettlingTimeAnalogTest2, 1),
                    (decimal)Math.Round(m_MonExternalAnalogSignalConfigParameters.SigSettlingTimeAnalogTest3, 1),
                    (decimal)Math.Round(m_MonExternalAnalogSignalConfigParameters.SigSettlingTimeAnalogTest4, 1),
                    (decimal)Math.Round(m_MonExternalAnalogSignalConfigParameters.SigSettlingTimeAnalogMux, 1),
                    (decimal)Math.Round(m_MonExternalAnalogSignalConfigParameters.SigSettlingTimeAnalogVSense, 1),
                    (decimal)m_MonExternalAnalogSignalConfigParameters.SigMinThresholdAnalogTest1,
                    (decimal)m_MonExternalAnalogSignalConfigParameters.SigMinThresholdAnalogTest2,
                    (decimal)m_MonExternalAnalogSignalConfigParameters.SigMinThresholdAnalogTest3,
                    (decimal)m_MonExternalAnalogSignalConfigParameters.SigMinThresholdAnalogTest4,
                    (decimal)m_MonExternalAnalogSignalConfigParameters.SigMinThresholdAnalogMux,
                    (decimal)m_MonExternalAnalogSignalConfigParameters.SigMinThresholdAnalogVSense,
                    (decimal)m_MonExternalAnalogSignalConfigParameters.SigMaxThresholdAnalogTest1,
                    (decimal)m_MonExternalAnalogSignalConfigParameters.SigMaxThresholdAnalogTest2,
                    (decimal)m_MonExternalAnalogSignalConfigParameters.SigMaxThresholdAnalogTest3,
                    (decimal)m_MonExternalAnalogSignalConfigParameters.SigMaxThresholdAnalogTest4,
                    (decimal)m_MonExternalAnalogSignalConfigParameters.SigMaxThresholdAnalogMux,
                    (decimal)m_MonExternalAnalogSignalConfigParameters.SigMaxThresholdAnalogVSense
                });
                m_GuiManager.RecordLog(6, full_command2);
            }
            else
            {
                string full_command3 = string.Format("ar1.SetRfExtAnaSignalsMonConfig_mult({0}, {1}, {2}, {3}, {4} , {5}, {6}, {7}, {8}, {9}, {10}, {11}, {12}, {13}, {14}, {15}, {16}, {17}, {18}, {19}, {20}, {21}, {22}, {23}, {24}, {25}, {26}, {27}, {28}, {29}, {30})", new object[]
                {
                    GlobalRef.g_RadarDeviceId,
                    m_MonExternalAnalogSignalConfigParameters.ReportingMode,
                    m_MonExternalAnalogSignalConfigParameters.SigIpEnaAnalogTest1,
                    m_MonExternalAnalogSignalConfigParameters.SigIpEnaAnalogTest2,
                    m_MonExternalAnalogSignalConfigParameters.SigIpEnaAnalogTest3,
                    m_MonExternalAnalogSignalConfigParameters.SigIpEnaAnalogTest4,
                    m_MonExternalAnalogSignalConfigParameters.SigIpEnaAnalogMux,
                    m_MonExternalAnalogSignalConfigParameters.SigIpEnaAnalogVSense,
                    m_MonExternalAnalogSignalConfigParameters.SigBufEnaAnalogTest1,
                    m_MonExternalAnalogSignalConfigParameters.SigBufEnaAnalogTest2,
                    m_MonExternalAnalogSignalConfigParameters.SigBufEnaAnalogTest3,
                    m_MonExternalAnalogSignalConfigParameters.SigBufEnaAnalogTest4,
                    m_MonExternalAnalogSignalConfigParameters.SigBufEnaAnalogMux,
                    (decimal)Math.Round(m_MonExternalAnalogSignalConfigParameters.SigSettlingTimeAnalogTest1, 1),
                    (decimal)Math.Round(m_MonExternalAnalogSignalConfigParameters.SigSettlingTimeAnalogTest2, 1),
                    (decimal)Math.Round(m_MonExternalAnalogSignalConfigParameters.SigSettlingTimeAnalogTest3, 1),
                    (decimal)Math.Round(m_MonExternalAnalogSignalConfigParameters.SigSettlingTimeAnalogTest4, 1),
                    (decimal)Math.Round(m_MonExternalAnalogSignalConfigParameters.SigSettlingTimeAnalogMux, 1),
                    (decimal)Math.Round(m_MonExternalAnalogSignalConfigParameters.SigSettlingTimeAnalogVSense, 1),
                    (decimal)m_MonExternalAnalogSignalConfigParameters.SigMinThresholdAnalogTest1,
                    (decimal)m_MonExternalAnalogSignalConfigParameters.SigMinThresholdAnalogTest2,
                    (decimal)m_MonExternalAnalogSignalConfigParameters.SigMinThresholdAnalogTest3,
                    (decimal)m_MonExternalAnalogSignalConfigParameters.SigMinThresholdAnalogTest4,
                    (decimal)m_MonExternalAnalogSignalConfigParameters.SigMinThresholdAnalogMux,
                    (decimal)m_MonExternalAnalogSignalConfigParameters.SigMinThresholdAnalogVSense,
                    (decimal)m_MonExternalAnalogSignalConfigParameters.SigMaxThresholdAnalogTest1,
                    (decimal)m_MonExternalAnalogSignalConfigParameters.SigMaxThresholdAnalogTest2,
                    (decimal)m_MonExternalAnalogSignalConfigParameters.SigMaxThresholdAnalogTest3,
                    (decimal)m_MonExternalAnalogSignalConfigParameters.SigMaxThresholdAnalogTest4,
                    (decimal)m_MonExternalAnalogSignalConfigParameters.SigMaxThresholdAnalogMux,
                    (decimal)m_MonExternalAnalogSignalConfigParameters.SigMaxThresholdAnalogVSense
                });
                m_GuiManager.RecordLog(6, full_command3);
            }
            GlobalRef.g_ExternalAnaSigMon = 1U;
            num = Imports.RadarLinkImpl_RfExtAnaSignalsMonConfig(GlobalRef.g_RadarDeviceId, data);
            while (GlobalRef.g_ExternalAnaSigMon == 0U)
            {
                Thread.Sleep(100);
            }
            if (num == 0)
            {
                if (GlobalRef.g_RadarDeviceId == 1U)
                {
                    StatusFlag = Convert.ToString(ScriptOps.ExtAnalogSigMonAsyncReportParam.StatusFlags);
                    Errorcode = Convert.ToString(ScriptOps.ExtAnalogSigMonAsyncReportParam.ErrorCode);
                    ExtAnalogSigtest1Val = Convert.ToString(Math.Round((double)ScriptOps.ExtAnalogSigMonAsyncReportParam.ExtAnalogSigTest1Val / 1024.0 * 1800.0, 2));
                    ExtAnalogSigtest2Val = Convert.ToString(Math.Round((double)ScriptOps.ExtAnalogSigMonAsyncReportParam.ExtAnalogSigTest2Val / 1024.0 * 1800.0, 2));
                    ExtAnalogSigtest3Val = Convert.ToString(Math.Round((double)ScriptOps.ExtAnalogSigMonAsyncReportParam.ExtAnalogSigTest3Val / 1024.0 * 1800.0, 2));
                    ExtAnalogSigtest4Val = Convert.ToString(Math.Round((double)ScriptOps.ExtAnalogSigMonAsyncReportParam.ExtAnalogSigTest4Val / 1024.0 * 1800.0, 2));
                    ExtAnalogSigmuxVal = Convert.ToString(Math.Round((double)ScriptOps.ExtAnalogSigMonAsyncReportParam.ExtAnalogSigMuxVal / 1024.0 * 1800.0, 2));
                    ExtAnalogSigvsenseVal = Convert.ToString(Math.Round((double)ScriptOps.ExtAnalogSigMonAsyncReportParam.ExtAnalogSigVSenseVal / 1024.0 * 1800.0, 2));
                    Timestamp = Convert.ToString(ScriptOps.ExtAnalogSigMonAsyncReportParam.TimeStamp);
                }
                else if (GlobalRef.g_RadarDeviceId == 2U)
                {
                    StatusFlag = Convert.ToString(ScriptOps.ExtAnalogSigMonAsyncReportParam.StatusFlags);
                    Errorcode = Convert.ToString(ScriptOps.ExtAnalogSigMonAsyncReportParam.ErrorCode);
                    ExtAnalogSigtest1Val = Convert.ToString(Math.Round((double)ScriptOps.ExtAnalogSigMonAsyncReportParam.ExtAnalogSigTest1Val / 1024.0 * 1800.0, 2));
                    ExtAnalogSigtest2Val = Convert.ToString(Math.Round((double)ScriptOps.ExtAnalogSigMonAsyncReportParam.ExtAnalogSigTest2Val / 1024.0 * 1800.0, 2));
                    ExtAnalogSigtest3Val = Convert.ToString(Math.Round((double)ScriptOps.ExtAnalogSigMonAsyncReportParam.ExtAnalogSigTest3Val / 1024.0 * 1800.0, 2));
                    ExtAnalogSigtest4Val = Convert.ToString(Math.Round((double)ScriptOps.ExtAnalogSigMonAsyncReportParam.ExtAnalogSigTest4Val / 1024.0 * 1800.0, 2));
                    ExtAnalogSigmuxVal = Convert.ToString(Math.Round((double)ScriptOps.ExtAnalogSigMonAsyncReportParam.ExtAnalogSigMuxVal / 1024.0 * 1800.0, 2));
                    ExtAnalogSigvsenseVal = Convert.ToString(Math.Round((double)ScriptOps.ExtAnalogSigMonAsyncReportParam.ExtAnalogSigVSenseVal / 1024.0 * 1800.0, 2));
                    Timestamp = Convert.ToString(ScriptOps.ExtAnalogSigMonAsyncReportParam.TimeStamp);
                }
                else if (GlobalRef.g_RadarDeviceId == 4U)
                {
                    StatusFlag = Convert.ToString(ScriptOps.ExtAnalogSigMonAsyncReportParam.StatusFlags);
                    Errorcode = Convert.ToString(ScriptOps.ExtAnalogSigMonAsyncReportParam.ErrorCode);
                    ExtAnalogSigtest1Val = Convert.ToString(Math.Round((double)ScriptOps.ExtAnalogSigMonAsyncReportParam.ExtAnalogSigTest1Val / 1024.0 * 1800.0, 2));
                    ExtAnalogSigtest2Val = Convert.ToString(Math.Round((double)ScriptOps.ExtAnalogSigMonAsyncReportParam.ExtAnalogSigTest2Val / 1024.0 * 1800.0, 2));
                    ExtAnalogSigtest3Val = Convert.ToString(Math.Round((double)ScriptOps.ExtAnalogSigMonAsyncReportParam.ExtAnalogSigTest3Val / 1024.0 * 1800.0, 2));
                    ExtAnalogSigtest4Val = Convert.ToString(Math.Round((double)ScriptOps.ExtAnalogSigMonAsyncReportParam.ExtAnalogSigTest4Val / 1024.0 * 1800.0, 2));
                    ExtAnalogSigmuxVal = Convert.ToString(Math.Round((double)ScriptOps.ExtAnalogSigMonAsyncReportParam.ExtAnalogSigMuxVal / 1024.0 * 1800.0, 2));
                    ExtAnalogSigvsenseVal = Convert.ToString(Math.Round((double)ScriptOps.ExtAnalogSigMonAsyncReportParam.ExtAnalogSigVSenseVal / 1024.0 * 1800.0, 2));
                    Timestamp = Convert.ToString(ScriptOps.ExtAnalogSigMonAsyncReportParam.TimeStamp);
                }
                else if (GlobalRef.g_RadarDeviceId == 8U)
                {
                    StatusFlag = Convert.ToString(ScriptOps.ExtAnalogSigMonAsyncReportParam.StatusFlags);
                    Errorcode = Convert.ToString(ScriptOps.ExtAnalogSigMonAsyncReportParam.ErrorCode);
                    ExtAnalogSigtest1Val = Convert.ToString(Math.Round((double)ScriptOps.ExtAnalogSigMonAsyncReportParam.ExtAnalogSigTest1Val / 1024.0 * 1800.0, 2));
                    ExtAnalogSigtest2Val = Convert.ToString(Math.Round((double)ScriptOps.ExtAnalogSigMonAsyncReportParam.ExtAnalogSigTest2Val / 1024.0 * 1800.0, 2));
                    ExtAnalogSigtest3Val = Convert.ToString(Math.Round((double)ScriptOps.ExtAnalogSigMonAsyncReportParam.ExtAnalogSigTest3Val / 1024.0 * 1800.0, 2));
                    ExtAnalogSigtest4Val = Convert.ToString(Math.Round((double)ScriptOps.ExtAnalogSigMonAsyncReportParam.ExtAnalogSigTest4Val / 1024.0 * 1800.0, 2));
                    ExtAnalogSigmuxVal = Convert.ToString(Math.Round((double)ScriptOps.ExtAnalogSigMonAsyncReportParam.ExtAnalogSigMuxVal / 1024.0 * 1800.0, 2));
                    ExtAnalogSigvsenseVal = Convert.ToString(Math.Round((double)ScriptOps.ExtAnalogSigMonAsyncReportParam.ExtAnalogSigVSenseVal / 1024.0 * 1800.0, 2));
                    Timestamp = Convert.ToString(ScriptOps.ExtAnalogSigMonAsyncReportParam.TimeStamp);
                }
            }
            if ((num == 0 && ((GlobalRef.g_CasCadeDeviceSpiConnect & 1U) == 1U || (GlobalRef.g_CasCadeDeviceSpiConnect & 2U) == 2U || (GlobalRef.g_CasCadeDeviceSpiConnect & 4U) == 4U || (GlobalRef.g_CasCadeDeviceSpiConnect & 8U) == 8U)) || GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
            {
                string full_command4 = string.Format("Status: Passed", new object[0]);
                m_GuiManager.RecordLog(6, full_command4);
            }
            else
            {
                string msg = string.Format("Status: Failed, Error Type: {0}", new object[]
                {
                    GetErrorType(num)
                });
                GlobalRef.LuaWrapper.PrintError(msg);
            }
            if (GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
            {
                if (iRs232ConnectDisconnect_impl() == 0 && !GlobalRef.g_NtvRS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
                {
                    m_GuiManager.DllOps.iConnect(1U, 0U);
                    string full_command5 = string.Format("Debug Port Reconnected!", new object[0]);
                    m_GuiManager.RecordLog(9, full_command5);
                    ScriptOps.KeepTrying(2000, new Func<bool>(spare_read));
                }
            }
            else if (GlobalRef.g_CasCadeDeviceSpiConnect == 0U)
            {
                string full_command6 = string.Format("Error Occurred in Port open close", new object[0]);
                m_GuiManager.RecordLog(9, full_command6);
            }
            return num;
        }

        public int UpdateNSetInternalGPADCAnalogSignalMonitoringConfData(ushort RadarDeviceId, char ReportingMode)
        {
            int result = -1;
            GlobalRef.g_RadarDeviceId = (uint)RadarDeviceId;
            ScriptOps.m_MainForm.p000001.UpdateGPADCIntAnalogSigMonConfigData();
            m_MonInternalGPADCAnalogSignalConfigParameters.ReportingMode = ReportingMode;
            ScriptOps.m_MainForm.p000001.UpdateGPADCIntAnalogSigMonConfigDataFrmCmdSrc();
            return result;
        }

        public int UpdateNInternalGPADCAnalogSignalMonitoringConfigurationData_cmd(out string StatusFlag, out string Errorcode, out string p2, out string p3, out string Timestamp)
        {
            StatusFlag = string.Empty;
            Errorcode = string.Empty;
            p2 = string.Empty;
            p3 = string.Empty;
            Timestamp = string.Empty;
            ScriptOps.m_MainForm.p000001.UpdateGPADCIntAnalogSigMonConfigData();
            return iSetInternalGPADCAnalogSignalMonConfig_ImplForLuaCommand(out StatusFlag, out Errorcode, out p2, out p3, out Timestamp);
        }

        private int iSetInternalGPADCAnalogSignalMonConfig_ImplForLuaCommand(out string StatusFlag, out string Errorcode, out string p2, out string p3, out string Timestamp)
        {
            StatusFlag = string.Empty;
            Errorcode = string.Empty;
            p2 = string.Empty;
            p3 = string.Empty;
            Timestamp = string.Empty;
            IntGPADCAnalogSigMonConfigurationParam.ReportingMode = (byte)m_MonInternalGPADCAnalogSignalConfigParameters.ReportingMode;
            IntGPADCAnalogSigMonConfigurationParam.Reserved = 0;
            IntGPADCAnalogSigMonConfigurationParam.Reserved2 = 0;
            IntGPADCAnalogSigMonConfigurationParam.Reserved3 = 0U;
            IntPtr data = GCHandle.Alloc(IntGPADCAnalogSigMonConfigurationParam, GCHandleType.Pinned).AddrOfPinnedObject();
            int num;
            if (GlobalRef.g_NtvRS232Connect[(int)GlobalRef.g_RadarDeviceIndex] && GlobalRef.g_CasCadeDeviceSpiConnect == 0U)
            {
                num = m_TsWrapper.Calling_WriteAddr_Single(4294959848U, 1U);
                if (m_GuiManager.DllOps.itempDisconnect(false) == 0)
                {
                    string full_command = string.Format("Debug Port Disconnected", new object[0]);
                    m_GuiManager.RecordLog(0, full_command);
                    if (!GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
                    {
                        iRs232ConnectDisconnect_impl();
                    }
                }
            }
            if (m_RadarDeviceModeConfigParams.NumberOfRadarDevicesDetected <= 1)
            {
                string full_command2 = string.Format("ar1.SetRfGpadcIntAnaSignalsMonConfig({0})", new object[]
                {
                    m_MonInternalGPADCAnalogSignalConfigParameters.ReportingMode
                });
                m_GuiManager.RecordLog(6, full_command2);
            }
            else
            {
                string full_command3 = string.Format("ar1.SetRfGpadcIntAnaSignalsMonConfig_mult({0}, {1})", new object[]
                {
                    GlobalRef.g_RadarDeviceId,
                    m_MonInternalGPADCAnalogSignalConfigParameters.ReportingMode
                });
                m_GuiManager.RecordLog(6, full_command3);
            }
            GlobalRef.f0002d4 = 1U;
            num = Imports.RadarLinkImpl_RfGpadcIntAnaSignalsMonConfig(GlobalRef.g_RadarDeviceId, data);
            while (GlobalRef.f0002d4 == 0U)
            {
                Thread.Sleep(100);
            }
            if (num == 0)
            {
                if (GlobalRef.g_RadarDeviceId == 1U)
                {
                    StatusFlag = Convert.ToString(ScriptOps.IntGPADCAnalogSigMonAsyncReportParam.StatusFlags);
                    Errorcode = Convert.ToString(ScriptOps.IntGPADCAnalogSigMonAsyncReportParam.ErrorCode);
                    p2 = Convert.ToString((int)(ScriptOps.IntGPADCAnalogSigMonAsyncReportParam.f00000c * 1800 / 1024));
                    p3 = Convert.ToString((int)(ScriptOps.IntGPADCAnalogSigMonAsyncReportParam.f00000d * 1800 / 1024));
                    Timestamp = Convert.ToString(ScriptOps.IntGPADCAnalogSigMonAsyncReportParam.TimeStamp);
                }
                else if (GlobalRef.g_RadarDeviceId == 2U)
                {
                    StatusFlag = Convert.ToString(ScriptOps.IntGPADCAnalogSigMonAsyncReportParam.StatusFlags);
                    Errorcode = Convert.ToString(ScriptOps.IntGPADCAnalogSigMonAsyncReportParam.ErrorCode);
                    p2 = Convert.ToString((int)(ScriptOps.IntGPADCAnalogSigMonAsyncReportParam.f00000c * 1800 / 1024));
                    p3 = Convert.ToString((int)(ScriptOps.IntGPADCAnalogSigMonAsyncReportParam.f00000d * 1800 / 1024));
                    Timestamp = Convert.ToString(ScriptOps.IntGPADCAnalogSigMonAsyncReportParam.TimeStamp);
                }
                else if (GlobalRef.g_RadarDeviceId == 4U)
                {
                    StatusFlag = Convert.ToString(ScriptOps.IntGPADCAnalogSigMonAsyncReportParam.StatusFlags);
                    Errorcode = Convert.ToString(ScriptOps.IntGPADCAnalogSigMonAsyncReportParam.ErrorCode);
                    p2 = Convert.ToString((int)(ScriptOps.IntGPADCAnalogSigMonAsyncReportParam.f00000c * 1800 / 1024));
                    p3 = Convert.ToString((int)(ScriptOps.IntGPADCAnalogSigMonAsyncReportParam.f00000d * 1800 / 1024));
                    Timestamp = Convert.ToString(ScriptOps.IntGPADCAnalogSigMonAsyncReportParam.TimeStamp);
                }
                else if (GlobalRef.g_RadarDeviceId == 8U)
                {
                    StatusFlag = Convert.ToString(ScriptOps.IntGPADCAnalogSigMonAsyncReportParam.StatusFlags);
                    Errorcode = Convert.ToString(ScriptOps.IntGPADCAnalogSigMonAsyncReportParam.ErrorCode);
                    p2 = Convert.ToString((int)(ScriptOps.IntGPADCAnalogSigMonAsyncReportParam.f00000c * 1800 / 1024));
                    p3 = Convert.ToString((int)(ScriptOps.IntGPADCAnalogSigMonAsyncReportParam.f00000d * 1800 / 1024));
                    Timestamp = Convert.ToString(ScriptOps.IntGPADCAnalogSigMonAsyncReportParam.TimeStamp);
                }
            }
            if ((num == 0 && ((GlobalRef.g_CasCadeDeviceSpiConnect & 1U) == 1U || (GlobalRef.g_CasCadeDeviceSpiConnect & 2U) == 2U || (GlobalRef.g_CasCadeDeviceSpiConnect & 4U) == 4U || (GlobalRef.g_CasCadeDeviceSpiConnect & 8U) == 8U)) || GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
            {
                string full_command4 = string.Format("Status: Passed", new object[0]);
                m_GuiManager.RecordLog(6, full_command4);
            }
            else
            {
                string msg = string.Format("Status: Failed, Error Type: {0}", new object[]
                {
                    GetErrorType(num)
                });
                GlobalRef.LuaWrapper.PrintError(msg);
            }
            if (GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
            {
                if (iRs232ConnectDisconnect_impl() == 0 && !GlobalRef.g_NtvRS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
                {
                    m_GuiManager.DllOps.iConnect(1U, 0U);
                    string full_command5 = string.Format("Debug Port Reconnected!", new object[0]);
                    m_GuiManager.RecordLog(9, full_command5);
                    ScriptOps.KeepTrying(2000, new Func<bool>(spare_read));
                }
            }
            else if (GlobalRef.g_CasCadeDeviceSpiConnect == 0U)
            {
                string full_command6 = string.Format("Error Occurred in Port open close", new object[0]);
                m_GuiManager.RecordLog(9, full_command6);
            }
            return num;
        }

        public int UpdateNSetInternalPMCLKLOAnalogSignalMonitoringConfData(ushort RadarDeviceId, int ProfileIndex, uint ReportingMode)
        {
            int result = -1;
            GlobalRef.g_RadarDeviceId = (uint)RadarDeviceId;
            ScriptOps.m_MainForm.p000001.UpdatePMCLKLOIntAnalogSigMonConfigData();
            m_MonInternalPMCLKLOAnalogSignalConfigParameters.ProfileIndex = (byte)(ProfileIndex & 255);
            m_MonInternalPMCLKLOAnalogSignalConfigParameters.ReportingMode = (byte)ReportingMode;
            m_MonInternalPMCLKLOAnalogSignalConfigParameters.Sync20GSigSelect = (byte)(ProfileIndex >> 8 & 255);
            m_MonInternalPMCLKLOAnalogSignalConfigParameters.Sync20GMinThreshold = (sbyte)(ProfileIndex >> 16 & 255);
            m_MonInternalPMCLKLOAnalogSignalConfigParameters.Sync20GMaxThreshold = (sbyte)(ReportingMode >> 8 & 255U);
            ScriptOps.m_MainForm.p000001.UpdatePMCLKLOIntAnalogSigMonConfigDataFrmCmdSrc();
            return result;
        }

        public int UpdateNInternalPMCLKLOAnalogSignalMonitoringConfigurationData_cmd(out string StatusFlag, out string Errorcode, out string profileIndex, out string Sync20GPower, out string Reserved, out string Timestamp)
        {
            StatusFlag = string.Empty;
            Errorcode = string.Empty;
            profileIndex = string.Empty;
            Timestamp = string.Empty;
            Sync20GPower = string.Empty;
            Reserved = string.Empty;
            ScriptOps.m_MainForm.p000001.UpdatePMCLKLOIntAnalogSigMonConfigData();
            return iSetInternalPMCLKLOAnalogSignalMonConfig_ImplForLuaCommand(out StatusFlag, out Errorcode, out profileIndex, out Sync20GPower, out Reserved, out Timestamp);
        }

        private int iSetInternalPMCLKLOAnalogSignalMonConfig_ImplForLuaCommand(out string StatusFlag, out string Errorcode, out string profileIndex, out string Sync20GPower, out string Reserved, out string Timestamp)
        {
            StatusFlag = string.Empty;
            Errorcode = string.Empty;
            profileIndex = string.Empty;
            Timestamp = string.Empty;
            Sync20GPower = string.Empty;
            Reserved = string.Empty;
            IntPMCLKLOAnalogSigMonConfigurationParam.ProfileIndex = m_MonInternalPMCLKLOAnalogSignalConfigParameters.ProfileIndex;
            IntPMCLKLOAnalogSigMonConfigurationParam.ReportingMode = m_MonInternalPMCLKLOAnalogSignalConfigParameters.ReportingMode;
            IntPMCLKLOAnalogSigMonConfigurationParam.Sync20GSigSelect = m_MonInternalPMCLKLOAnalogSignalConfigParameters.Sync20GSigSelect;
            IntPMCLKLOAnalogSigMonConfigurationParam.Sync20GMinThreshold = m_MonInternalPMCLKLOAnalogSignalConfigParameters.Sync20GMinThreshold;
            IntPMCLKLOAnalogSigMonConfigurationParam.Sync20GMaxThreshold = m_MonInternalPMCLKLOAnalogSignalConfigParameters.Sync20GMaxThreshold;
            IntPMCLKLOAnalogSigMonConfigurationParam.Reserved1 = 0;
            IntPMCLKLOAnalogSigMonConfigurationParam.Reserved2 = 0;
            IntPtr data = GCHandle.Alloc(IntPMCLKLOAnalogSigMonConfigurationParam, GCHandleType.Pinned).AddrOfPinnedObject();
            int num;
            if (GlobalRef.g_NtvRS232Connect[(int)GlobalRef.g_RadarDeviceIndex] && GlobalRef.g_CasCadeDeviceSpiConnect == 0U)
            {
                num = m_TsWrapper.Calling_WriteAddr_Single(4294959848U, 1U);
                if (m_GuiManager.DllOps.itempDisconnect(false) == 0)
                {
                    string full_command = string.Format("Debug Port Disconnected", new object[0]);
                    m_GuiManager.RecordLog(0, full_command);
                    if (!GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
                    {
                        iRs232ConnectDisconnect_impl();
                    }
                }
            }
            if (m_RadarDeviceModeConfigParams.NumberOfRadarDevicesDetected <= 1)
            {
                string full_command2 = string.Format("ar1.SetRfPmClkLoIntAnaSignalsMonConfig({0}, {1})", new object[]
                {
                    (int)m_MonInternalPMCLKLOAnalogSignalConfigParameters.ProfileIndex | (int)m_MonInternalPMCLKLOAnalogSignalConfigParameters.Sync20GSigSelect << 8 | (int)m_MonInternalPMCLKLOAnalogSignalConfigParameters.Sync20GMinThreshold << 16,
                    (int)m_MonInternalPMCLKLOAnalogSignalConfigParameters.ReportingMode | (int)m_MonInternalPMCLKLOAnalogSignalConfigParameters.Sync20GMaxThreshold << 8
                });
                m_GuiManager.RecordLog(6, full_command2);
            }
            else
            {
                string full_command3 = string.Format("ar1.SetRfPmClkLoIntAnaSignalsMonConfig_mult({0}, {1}, {2})", new object[]
                {
                    GlobalRef.g_RadarDeviceId,
                    (int)m_MonInternalPMCLKLOAnalogSignalConfigParameters.ProfileIndex | (int)m_MonInternalPMCLKLOAnalogSignalConfigParameters.Sync20GSigSelect << 8 | (int)m_MonInternalPMCLKLOAnalogSignalConfigParameters.Sync20GMinThreshold << 16,
                    (int)m_MonInternalPMCLKLOAnalogSignalConfigParameters.ReportingMode | (int)m_MonInternalPMCLKLOAnalogSignalConfigParameters.Sync20GMaxThreshold << 8
                });
                m_GuiManager.RecordLog(6, full_command3);
            }
            GlobalRef.g_InternalPmClkLoAnaSigMon = 1U;
            num = Imports.RadarLinkImpl_RfPmClkLoIntAnaSignalsMonConfig(GlobalRef.g_RadarDeviceId, data);
            while (GlobalRef.g_InternalPmClkLoAnaSigMon == 0U)
            {
                Thread.Sleep(100);
            }
            if (num == 0)
            {
                if (GlobalRef.g_RadarDeviceId == 1U)
                {
                    StatusFlag = Convert.ToString(ScriptOps.IntPMCLKLOAnalogSigMonAsyncReportParam.StatusFlags);
                    Errorcode = Convert.ToString(ScriptOps.IntPMCLKLOAnalogSigMonAsyncReportParam.ErrorCode);
                    profileIndex = Convert.ToString(ScriptOps.IntPMCLKLOAnalogSigMonAsyncReportParam.ProfileIndex);
                    Sync20GPower = Convert.ToString(Math.Round((double)ScriptOps.IntPMCLKLOAnalogSigMonAsyncReportParam.Sync20GPower / 2.0, 1));
                    Reserved = Convert.ToString(ScriptOps.IntPMCLKLOAnalogSigMonAsyncReportParam.Reserved2);
                    Timestamp = Convert.ToString(ScriptOps.IntPMCLKLOAnalogSigMonAsyncReportParam.TimeStamp);
                }
                else if (GlobalRef.g_RadarDeviceId == 2U)
                {
                    StatusFlag = Convert.ToString(ScriptOps.IntPMCLKLOAnalogSigMonAsyncReportParam.StatusFlags);
                    Errorcode = Convert.ToString(ScriptOps.IntPMCLKLOAnalogSigMonAsyncReportParam.ErrorCode);
                    profileIndex = Convert.ToString(ScriptOps.IntPMCLKLOAnalogSigMonAsyncReportParam.ProfileIndex);
                    Sync20GPower = Convert.ToString(Math.Round((double)ScriptOps.IntPMCLKLOAnalogSigMonAsyncReportParam.Sync20GPower / 2.0, 1));
                    Reserved = Convert.ToString(ScriptOps.IntPMCLKLOAnalogSigMonAsyncReportParam.Reserved2);
                    Timestamp = Convert.ToString(ScriptOps.IntPMCLKLOAnalogSigMonAsyncReportParam.TimeStamp);
                }
                else if (GlobalRef.g_RadarDeviceId == 4U)
                {
                    StatusFlag = Convert.ToString(ScriptOps.IntPMCLKLOAnalogSigMonAsyncReportParam.StatusFlags);
                    Errorcode = Convert.ToString(ScriptOps.IntPMCLKLOAnalogSigMonAsyncReportParam.ErrorCode);
                    profileIndex = Convert.ToString(ScriptOps.IntPMCLKLOAnalogSigMonAsyncReportParam.ProfileIndex);
                    Sync20GPower = Convert.ToString(Math.Round((double)ScriptOps.IntPMCLKLOAnalogSigMonAsyncReportParam.Sync20GPower / 2.0, 1));
                    Reserved = Convert.ToString(ScriptOps.IntPMCLKLOAnalogSigMonAsyncReportParam.Reserved2);
                    Timestamp = Convert.ToString(ScriptOps.IntPMCLKLOAnalogSigMonAsyncReportParam.TimeStamp);
                }
                else if (GlobalRef.g_RadarDeviceId == 8U)
                {
                    StatusFlag = Convert.ToString(ScriptOps.IntPMCLKLOAnalogSigMonAsyncReportParam.StatusFlags);
                    Errorcode = Convert.ToString(ScriptOps.IntPMCLKLOAnalogSigMonAsyncReportParam.ErrorCode);
                    profileIndex = Convert.ToString(ScriptOps.IntPMCLKLOAnalogSigMonAsyncReportParam.ProfileIndex);
                    Sync20GPower = Convert.ToString(Math.Round((double)ScriptOps.IntPMCLKLOAnalogSigMonAsyncReportParam.Sync20GPower / 2.0, 1));
                    Reserved = Convert.ToString(ScriptOps.IntPMCLKLOAnalogSigMonAsyncReportParam.Reserved2);
                    Timestamp = Convert.ToString(ScriptOps.IntPMCLKLOAnalogSigMonAsyncReportParam.TimeStamp);
                }
            }
            if ((num == 0 && ((GlobalRef.g_CasCadeDeviceSpiConnect & 1U) == 1U || (GlobalRef.g_CasCadeDeviceSpiConnect & 2U) == 2U || (GlobalRef.g_CasCadeDeviceSpiConnect & 4U) == 4U || (GlobalRef.g_CasCadeDeviceSpiConnect & 8U) == 8U)) || GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
            {
                string full_command4 = string.Format("Status: Passed", new object[0]);
                m_GuiManager.RecordLog(6, full_command4);
            }
            else
            {
                string msg = string.Format("Status: Failed, Error Type: {0}", new object[]
                {
                    GetErrorType(num)
                });
                GlobalRef.LuaWrapper.PrintError(msg);
            }
            if (GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex] && iRs232ConnectDisconnect_impl() == 0 && !GlobalRef.g_NtvRS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
            {
                m_GuiManager.DllOps.iConnect(1U, 0U);
                string full_command5 = string.Format("Debug Port Reconnected!", new object[0]);
                m_GuiManager.RecordLog(9, full_command5);
                ScriptOps.KeepTrying(2000, new Func<bool>(spare_read));
            }
            return num;
        }

        public int UpdateNSetInternalRXAnalogSignalMonitoringConfData(ushort RadarDeviceId, char ProfileIndex, char ReportingMode)
        {
            int result = -1;
            GlobalRef.g_RadarDeviceId = (uint)RadarDeviceId;
            ScriptOps.m_MainForm.p000001.UpdateRXIntAnalogSigMonConfigData();
            m_MonInternalRxAnalogSignalConfigParameters.ProfileIndex = ProfileIndex;
            m_MonInternalRxAnalogSignalConfigParameters.ReportingMode = ReportingMode;
            ScriptOps.m_MainForm.p000001.UpdateRXIntAnalogSigMonConfigDataFrmCmdSrc();
            return result;
        }

        public int UpdateNInternalRXAnalogSignalMonitoringConfigurationData_cmd(out string StatusFlag, out string Errorcode, out string profileIndex, out string Timestamp)
        {
            StatusFlag = string.Empty;
            Errorcode = string.Empty;
            profileIndex = string.Empty;
            Timestamp = string.Empty;
            ScriptOps.m_MainForm.p000001.UpdateRXIntAnalogSigMonConfigData();
            return iSetInternalRXAnalogSignalMonConfig_ImplForLuaCommand(out StatusFlag, out Errorcode, out profileIndex, out Timestamp);
        }

        private int iSetInternalRXAnalogSignalMonConfig_ImplForLuaCommand(out string StatusFlag, out string Errorcode, out string profileIndex, out string Timestamp)
        {
            StatusFlag = string.Empty;
            Errorcode = string.Empty;
            profileIndex = string.Empty;
            Timestamp = string.Empty;
            IntRxAnalogSigMonConfigurationParam.ProfileIndex = (byte)m_MonInternalRxAnalogSignalConfigParameters.ProfileIndex;
            IntRxAnalogSigMonConfigurationParam.ReportingMode = (byte)m_MonInternalRxAnalogSignalConfigParameters.ReportingMode;
            IntRxAnalogSigMonConfigurationParam.Reserved = 0;
            IntRxAnalogSigMonConfigurationParam.Reserved2 = 0U;
            IntPtr data = GCHandle.Alloc(IntRxAnalogSigMonConfigurationParam, GCHandleType.Pinned).AddrOfPinnedObject();
            int num;
            if (GlobalRef.g_NtvRS232Connect[(int)GlobalRef.g_RadarDeviceIndex] && GlobalRef.g_CasCadeDeviceSpiConnect == 0U)
            {
                num = m_TsWrapper.Calling_WriteAddr_Single(4294959848U, 1U);
                if (m_GuiManager.DllOps.itempDisconnect(false) == 0)
                {
                    string full_command = string.Format("Debug Port Disconnected", new object[0]);
                    m_GuiManager.RecordLog(0, full_command);
                    if (!GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
                    {
                        iRs232ConnectDisconnect_impl();
                    }
                }
            }
            if (m_RadarDeviceModeConfigParams.NumberOfRadarDevicesDetected <= 1)
            {
                string full_command2 = string.Format("ar1.SetRfRxIntAnaSignalsMonConfig({0}, {1})", new object[]
                {
                    m_MonInternalRxAnalogSignalConfigParameters.ProfileIndex,
                    m_MonInternalRxAnalogSignalConfigParameters.ReportingMode
                });
                m_GuiManager.RecordLog(6, full_command2);
            }
            else
            {
                string full_command3 = string.Format("ar1.SetRfRxIntAnaSignalsMonConfig_mult({0}, {1}, {2})", new object[]
                {
                    GlobalRef.g_RadarDeviceId,
                    m_MonInternalRxAnalogSignalConfigParameters.ProfileIndex,
                    m_MonInternalRxAnalogSignalConfigParameters.ReportingMode
                });
                m_GuiManager.RecordLog(6, full_command3);
            }
            GlobalRef.g_InternalRxAnaSigMon = 1U;
            num = Imports.RadarLinkImpl_RfRxIntAnaSignalsMonConfig(GlobalRef.g_RadarDeviceId, data);
            while (GlobalRef.g_InternalRxAnaSigMon == 0U)
            {
                Thread.Sleep(100);
            }
            if (num == 0)
            {
                if (GlobalRef.g_RadarDeviceId == 1U)
                {
                    StatusFlag = Convert.ToString(ScriptOps.IntRxAnalogSigMonAsyncReportParam.StatusFlags);
                    Errorcode = Convert.ToString(ScriptOps.IntRxAnalogSigMonAsyncReportParam.ErrorCode);
                    profileIndex = Convert.ToString(ScriptOps.IntRxAnalogSigMonAsyncReportParam.ProfileIndex);
                    Timestamp = Convert.ToString(ScriptOps.IntRxAnalogSigMonAsyncReportParam.TimeStamp);
                }
                else if (GlobalRef.g_RadarDeviceId == 2U)
                {
                    StatusFlag = Convert.ToString(ScriptOps.IntRxAnalogSigMonAsyncReportParam.StatusFlags);
                    Errorcode = Convert.ToString(ScriptOps.IntRxAnalogSigMonAsyncReportParam.ErrorCode);
                    profileIndex = Convert.ToString(ScriptOps.IntRxAnalogSigMonAsyncReportParam.ProfileIndex);
                    Timestamp = Convert.ToString(ScriptOps.IntRxAnalogSigMonAsyncReportParam.TimeStamp);
                }
                else if (GlobalRef.g_RadarDeviceId == 4U)
                {
                    StatusFlag = Convert.ToString(ScriptOps.IntRxAnalogSigMonAsyncReportParam.StatusFlags);
                    Errorcode = Convert.ToString(ScriptOps.IntRxAnalogSigMonAsyncReportParam.ErrorCode);
                    profileIndex = Convert.ToString(ScriptOps.IntRxAnalogSigMonAsyncReportParam.ProfileIndex);
                    Timestamp = Convert.ToString(ScriptOps.IntRxAnalogSigMonAsyncReportParam.TimeStamp);
                }
                else if (GlobalRef.g_RadarDeviceId == 8U)
                {
                    StatusFlag = Convert.ToString(ScriptOps.IntRxAnalogSigMonAsyncReportParam.StatusFlags);
                    Errorcode = Convert.ToString(ScriptOps.IntRxAnalogSigMonAsyncReportParam.ErrorCode);
                    profileIndex = Convert.ToString(ScriptOps.IntRxAnalogSigMonAsyncReportParam.ProfileIndex);
                    Timestamp = Convert.ToString(ScriptOps.IntRxAnalogSigMonAsyncReportParam.TimeStamp);
                }
            }
            if ((num == 0 && ((GlobalRef.g_CasCadeDeviceSpiConnect & 1U) == 1U || (GlobalRef.g_CasCadeDeviceSpiConnect & 2U) == 2U || (GlobalRef.g_CasCadeDeviceSpiConnect & 4U) == 4U || (GlobalRef.g_CasCadeDeviceSpiConnect & 8U) == 8U)) || GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
            {
                string full_command4 = string.Format("Status: Passed", new object[0]);
                m_GuiManager.RecordLog(6, full_command4);
            }
            else
            {
                string msg = string.Format("Status: Failed, Error Type: {0}", new object[]
                {
                    GetErrorType(num)
                });
                GlobalRef.LuaWrapper.PrintError(msg);
            }
            if (GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
            {
                if (iRs232ConnectDisconnect_impl() == 0 && !GlobalRef.g_NtvRS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
                {
                    m_GuiManager.DllOps.iConnect(1U, 0U);
                    string full_command5 = string.Format("Debug Port Reconnected!", new object[0]);
                    m_GuiManager.RecordLog(9, full_command5);
                    ScriptOps.KeepTrying(2000, new Func<bool>(spare_read));
                }
            }
            else if (GlobalRef.g_CasCadeDeviceSpiConnect == 0U)
            {
                string full_command6 = string.Format("Error Occurred in Port open close", new object[0]);
                m_GuiManager.RecordLog(9, full_command6);
            }
            return num;
        }

        public int UpdateNSetInternalTX1AnalogSignalMonitoringConfData(ushort RadarDeviceId, char ProfileIndex, char ReportingMode)
        {
            int result = -1;
            GlobalRef.g_RadarDeviceId = (uint)RadarDeviceId;
            ScriptOps.m_MainForm.p000001.UpdateTX1IntAnalogSigMonConfigData();
            m_MonInternalTx1AnalogSignalConfigParameters.ProfileIndex = ProfileIndex;
            m_MonInternalTx1AnalogSignalConfigParameters.ReportingMode = ReportingMode;
            ScriptOps.m_MainForm.p000001.UpdateTX1IntAnalogSigMonConfigDataFrmCmdSrc();
            return result;
        }

        public int UpdateNInternalTX1AnalogSignalMonitoringConfigurationData_cmd(out string StatusFlag, out string Errorcode, out string profileIndex, out string Timestamp)
        {
            StatusFlag = string.Empty;
            Errorcode = string.Empty;
            profileIndex = string.Empty;
            Timestamp = string.Empty;
            ScriptOps.m_MainForm.p000001.UpdateTX1IntAnalogSigMonConfigData();
            return iSetInternalTX1AnalogSignalMonConfig_ImplForLuaCommand(out StatusFlag, out Errorcode, out profileIndex, out Timestamp);
        }

        private int iSetInternalTX1AnalogSignalMonConfig_ImplForLuaCommand(out string StatusFlag, out string Errorcode, out string profileIndex, out string Timestamp)
        {
            StatusFlag = string.Empty;
            Errorcode = string.Empty;
            profileIndex = string.Empty;
            Timestamp = string.Empty;
            ScriptOps.IntTx1AnalogSigMonConfigurationParam.ProfileIndex = 0;
            ScriptOps.IntTx1AnalogSigMonConfigurationParam.ReportingMode = 0;
            ScriptOps.IntTx1AnalogSigMonConfigurationParam.Reserved = 0;
            ScriptOps.IntTx1AnalogSigMonConfigurationParam.Reserved2 = 0U;
            ScriptOps.IntTx2AnalogSigMonConfigurationParam.ProfileIndex = 0;
            ScriptOps.IntTx2AnalogSigMonConfigurationParam.ReportingMode = 0;
            ScriptOps.IntTx2AnalogSigMonConfigurationParam.Reserved = 0;
            ScriptOps.IntTx2AnalogSigMonConfigurationParam.Reserved2 = 0U;
            ScriptOps.IntTx3AnalogSigMonConfigurationParam.ProfileIndex = 0;
            ScriptOps.IntTx3AnalogSigMonConfigurationParam.ReportingMode = 0;
            ScriptOps.IntTx3AnalogSigMonConfigurationParam.Reserved = 0;
            ScriptOps.IntTx3AnalogSigMonConfigurationParam.Reserved2 = 0U;
            ScriptOps.IntTx1AnalogSigMonConfigurationParam.ProfileIndex = (byte)m_MonInternalTx1AnalogSignalConfigParameters.ProfileIndex;
            ScriptOps.IntTx1AnalogSigMonConfigurationParam.ReportingMode = (byte)m_MonInternalTx1AnalogSignalConfigParameters.ReportingMode;
            ScriptOps.IntTx1AnalogSigMonConfigurationParam.Reserved = 0;
            ScriptOps.IntTx1AnalogSigMonConfigurationParam.Reserved2 = 0U;
            IntPtr pTX1IntAnalogSigMonitoringConfigurationData = GCHandle.Alloc(ScriptOps.IntTx1AnalogSigMonConfigurationParam, GCHandleType.Pinned).AddrOfPinnedObject();
            GCHandle.Alloc(ScriptOps.IntTx2AnalogSigMonConfigurationParam, GCHandleType.Pinned).AddrOfPinnedObject();
            GCHandle.Alloc(ScriptOps.IntTx3AnalogSigMonConfigurationParam, GCHandleType.Pinned).AddrOfPinnedObject();
            ScriptOps.Tx1Tx2Tx3IntAnalogSigMonitoringConfigurationParam.pTX1IntAnalogSigMonitoringConfigurationData = pTX1IntAnalogSigMonitoringConfigurationData;
            ScriptOps.Tx1Tx2Tx3IntAnalogSigMonitoringConfigurationParam.pTX2IntAnalogSigMonitoringConfigurationData = IntPtr.Zero;
            ScriptOps.Tx1Tx2Tx3IntAnalogSigMonitoringConfigurationParam.pTX3IntAnalogSigMonitoringConfigurationData = IntPtr.Zero;
            IntPtr data = GCHandle.Alloc(ScriptOps.Tx1Tx2Tx3IntAnalogSigMonitoringConfigurationParam, GCHandleType.Pinned).AddrOfPinnedObject();
            int num;
            if (GlobalRef.g_NtvRS232Connect[(int)GlobalRef.g_RadarDeviceIndex] && GlobalRef.g_CasCadeDeviceSpiConnect == 0U)
            {
                num = m_TsWrapper.Calling_WriteAddr_Single(4294959848U, 1U);
                if (m_GuiManager.DllOps.itempDisconnect(false) == 0)
                {
                    string full_command = string.Format("Debug Port Disconnected", new object[0]);
                    m_GuiManager.RecordLog(0, full_command);
                    if (!GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
                    {
                        iRs232ConnectDisconnect_impl();
                    }
                }
            }
            if (m_RadarDeviceModeConfigParams.NumberOfRadarDevicesDetected <= 1)
            {
                string full_command2 = string.Format("ar1.SetRfTx0IntAnaSignalsMonConfig({0}, {1})", new object[]
                {
                    m_MonInternalTx1AnalogSignalConfigParameters.ProfileIndex,
                    m_MonInternalTx1AnalogSignalConfigParameters.ReportingMode
                });
                m_GuiManager.RecordLog(6, full_command2);
            }
            else
            {
                string full_command3 = string.Format("ar1.SetRfTx0IntAnaSignalsMonConfig_mult({0}, {1}, {2})", new object[]
                {
                    GlobalRef.g_RadarDeviceId,
                    m_MonInternalTx1AnalogSignalConfigParameters.ProfileIndex,
                    m_MonInternalTx1AnalogSignalConfigParameters.ReportingMode
                });
                m_GuiManager.RecordLog(6, full_command3);
            }
            GlobalRef.g_InternalTx1AnaSigMon = 1U;
            num = Imports.RadarLinkImpl_RfTxIntAnaSignalsMonConfig((byte)GlobalRef.g_RadarDeviceId, data);
            while (GlobalRef.g_InternalTx1AnaSigMon == 0U)
            {
                Thread.Sleep(100);
            }
            if (num == 0)
            {
                if (GlobalRef.g_RadarDeviceId == 1U)
                {
                    StatusFlag = Convert.ToString(ScriptOps.IntTx1AnalogSigMonAsyncReportParam.StatusFlags);
                    Errorcode = Convert.ToString(ScriptOps.IntTx1AnalogSigMonAsyncReportParam.ErrorCode);
                    profileIndex = Convert.ToString(ScriptOps.IntTx1AnalogSigMonAsyncReportParam.ProfileIndex);
                    Timestamp = Convert.ToString(ScriptOps.IntTx1AnalogSigMonAsyncReportParam.TimeStamp);
                }
                else if (GlobalRef.g_RadarDeviceId == 2U)
                {
                    StatusFlag = Convert.ToString(ScriptOps.IntTx1AnalogSigMonAsyncReportParam.StatusFlags);
                    Errorcode = Convert.ToString(ScriptOps.IntTx1AnalogSigMonAsyncReportParam.ErrorCode);
                    profileIndex = Convert.ToString(ScriptOps.IntTx1AnalogSigMonAsyncReportParam.ProfileIndex);
                    Timestamp = Convert.ToString(ScriptOps.IntTx1AnalogSigMonAsyncReportParam.TimeStamp);
                }
                else if (GlobalRef.g_RadarDeviceId == 4U)
                {
                    StatusFlag = Convert.ToString(ScriptOps.IntTx1AnalogSigMonAsyncReportParam.StatusFlags);
                    Errorcode = Convert.ToString(ScriptOps.IntTx1AnalogSigMonAsyncReportParam.ErrorCode);
                    profileIndex = Convert.ToString(ScriptOps.IntTx1AnalogSigMonAsyncReportParam.ProfileIndex);
                    Timestamp = Convert.ToString(ScriptOps.IntTx1AnalogSigMonAsyncReportParam.TimeStamp);
                }
                else if (GlobalRef.g_RadarDeviceId == 8U)
                {
                    StatusFlag = Convert.ToString(ScriptOps.IntTx1AnalogSigMonAsyncReportParam.StatusFlags);
                    Errorcode = Convert.ToString(ScriptOps.IntTx1AnalogSigMonAsyncReportParam.ErrorCode);
                    profileIndex = Convert.ToString(ScriptOps.IntTx1AnalogSigMonAsyncReportParam.ProfileIndex);
                    Timestamp = Convert.ToString(ScriptOps.IntTx1AnalogSigMonAsyncReportParam.TimeStamp);
                }
            }
            if ((num == 0 && ((GlobalRef.g_CasCadeDeviceSpiConnect & 1U) == 1U || (GlobalRef.g_CasCadeDeviceSpiConnect & 2U) == 2U || (GlobalRef.g_CasCadeDeviceSpiConnect & 4U) == 4U || (GlobalRef.g_CasCadeDeviceSpiConnect & 8U) == 8U)) || GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
            {
                string full_command4 = string.Format("Status: Passed", new object[0]);
                m_GuiManager.RecordLog(6, full_command4);
            }
            else
            {
                string msg = string.Format("Status: Failed, Error Type: {0}", new object[]
                {
                    GetErrorType(num)
                });
                GlobalRef.LuaWrapper.PrintError(msg);
            }
            if (GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
            {
                if (iRs232ConnectDisconnect_impl() == 0 && !GlobalRef.g_NtvRS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
                {
                    m_GuiManager.DllOps.iConnect(1U, 0U);
                    string full_command5 = string.Format("Debug Port Reconnected!", new object[0]);
                    m_GuiManager.RecordLog(9, full_command5);
                    ScriptOps.KeepTrying(2000, new Func<bool>(spare_read));
                }
            }
            else if (GlobalRef.g_CasCadeDeviceSpiConnect == 0U)
            {
                string full_command6 = string.Format("Error Occurred in Port open close", new object[0]);
                m_GuiManager.RecordLog(9, full_command6);
            }
            return num;
        }

        public int UpdateNSetDCCMonitoringConfData(ushort RadarDeviceId, char ReportingMode, char ClockPair0, char ClockPair1, char ClockPair2, char ClockPair3, char ClockPair4, char ClockPair5)
        {
            int result = -1;
            GlobalRef.g_RadarDeviceId = (uint)RadarDeviceId;
            ScriptOps.m_MainForm.p000001.UpdateDCCMonConfigData();
            m_MonDualClockCompConfigParameters.ReportingMode = ReportingMode;
            m_MonDualClockCompConfigParameters.ClockPair0 = ClockPair0;
            m_MonDualClockCompConfigParameters.ClockPair1 = ClockPair1;
            m_MonDualClockCompConfigParameters.ClockPair2 = ClockPair2;
            m_MonDualClockCompConfigParameters.ClockPair3 = ClockPair3;
            m_MonDualClockCompConfigParameters.ClockPair4 = ClockPair4;
            m_MonDualClockCompConfigParameters.ClockPair5 = ClockPair5;
            ScriptOps.m_MainForm.p000001.UpdateDCCMonConfigDataFrmCmdSrc();
            return result;
        }

        public int UpdateNDCCMonitoringConfigurationData_cmd(out string StatusFlag, out string Errorcode, out string FreqMeasclock0, out string FreqMeasclock1, out string FreqMeasclock2, out string FreqMeasclock3, out string FreqMeasclock4, out string FreqMeasclock5, out string Timestamp)
        {
            StatusFlag = string.Empty;
            Errorcode = string.Empty;
            FreqMeasclock0 = string.Empty;
            FreqMeasclock1 = string.Empty;
            FreqMeasclock2 = string.Empty;
            FreqMeasclock3 = string.Empty;
            FreqMeasclock4 = string.Empty;
            FreqMeasclock5 = string.Empty;
            Timestamp = string.Empty;
            ScriptOps.m_MainForm.p000001.UpdateDCCMonConfigData();
            return iSetDCCMonConfig_ImplForLuaCommand(out StatusFlag, out Errorcode, out FreqMeasclock0, out FreqMeasclock1, out FreqMeasclock2, out FreqMeasclock3, out FreqMeasclock4, out FreqMeasclock5, out Timestamp);
        }

        private int iSetDCCMonConfig_ImplForLuaCommand(out string StatusFlag, out string Errorcode, out string FreqMeasclock0, out string FreqMeasclock1, out string FreqMeasclock2, out string FreqMeasclock3, out string FreqMeasclock4, out string FreqMeasclock5, out string Timestamp)
        {
            StatusFlag = string.Empty;
            Errorcode = string.Empty;
            FreqMeasclock0 = string.Empty;
            FreqMeasclock1 = string.Empty;
            FreqMeasclock2 = string.Empty;
            FreqMeasclock3 = string.Empty;
            FreqMeasclock4 = string.Empty;
            FreqMeasclock5 = string.Empty;
            Timestamp = string.Empty;
            DualClockCompMonitoringConfigurationParam.ReportingMode = (byte)m_MonDualClockCompConfigParameters.ReportingMode;
            DualClockCompMonitoringConfigurationParam.Reserved = 0;
            DualClockCompMonitoringConfigurationParam.DCCPairEnables = (ushort)(m_MonDualClockCompConfigParameters.ClockPair0 | m_MonDualClockCompConfigParameters.ClockPair1 << 1 | m_MonDualClockCompConfigParameters.ClockPair2 << 2 | m_MonDualClockCompConfigParameters.ClockPair3 << 3 | m_MonDualClockCompConfigParameters.ClockPair4 << 4 | m_MonDualClockCompConfigParameters.ClockPair5 << 5);
            DualClockCompMonitoringConfigurationParam.Reserved2 = 0U;
            IntPtr data = GCHandle.Alloc(DualClockCompMonitoringConfigurationParam, GCHandleType.Pinned).AddrOfPinnedObject();
            int num;
            if (GlobalRef.g_NtvRS232Connect[(int)GlobalRef.g_RadarDeviceIndex] && GlobalRef.g_CasCadeDeviceSpiConnect == 0U)
            {
                num = m_TsWrapper.Calling_WriteAddr_Single(4294959848U, 1U);
                if (m_GuiManager.DllOps.itempDisconnect(false) == 0)
                {
                    string full_command = string.Format("Debug Port Disconnected", new object[0]);
                    m_GuiManager.RecordLog(0, full_command);
                    if (!GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
                    {
                        iRs232ConnectDisconnect_impl();
                    }
                }
            }
            if (m_RadarDeviceModeConfigParams.NumberOfRadarDevicesDetected <= 1)
            {
                string full_command2 = string.Format("ar1.SetRfDualClkCompMonConfig({0}, {1}, {2}, {3}, {4}, {5}, {6})", new object[]
                {
                    m_MonDualClockCompConfigParameters.ReportingMode,
                    m_MonDualClockCompConfigParameters.ClockPair0,
                    m_MonDualClockCompConfigParameters.ClockPair1,
                    m_MonDualClockCompConfigParameters.ClockPair2,
                    m_MonDualClockCompConfigParameters.ClockPair3,
                    m_MonDualClockCompConfigParameters.ClockPair4,
                    m_MonDualClockCompConfigParameters.ClockPair5
                });
                m_GuiManager.RecordLog(6, full_command2);
            }
            else
            {
                string full_command3 = string.Format("ar1.SetRfDualClkCompMonConfig_mult({0}, {1}, {2}, {3}, {4}, {5}, {6}, {7})", new object[]
                {
                    GlobalRef.g_RadarDeviceId,
                    m_MonDualClockCompConfigParameters.ReportingMode,
                    m_MonDualClockCompConfigParameters.ClockPair0,
                    m_MonDualClockCompConfigParameters.ClockPair1,
                    m_MonDualClockCompConfigParameters.ClockPair2,
                    m_MonDualClockCompConfigParameters.ClockPair3,
                    m_MonDualClockCompConfigParameters.ClockPair4,
                    m_MonDualClockCompConfigParameters.ClockPair5
                });
                m_GuiManager.RecordLog(6, full_command3);
            }
            GlobalRef.g_DCCMon = 1U;
            num = Imports.RadarLinkImpl_RfDualClkCompMonConfig(GlobalRef.g_RadarDeviceId, data);
            while (GlobalRef.g_DCCMon == 0U)
            {
                Thread.Sleep(100);
            }
            if (num == 0)
            {
                if (GlobalRef.g_RadarDeviceId == 1U)
                {
                    StatusFlag = Convert.ToString(ScriptOps.DCCMonAsyncReportParam.StatusFlags);
                    Errorcode = Convert.ToString(ScriptOps.DCCMonAsyncReportParam.ErrorCode);
                    FreqMeasclock0 = Convert.ToString(ScriptOps.DCCMonAsyncReportParam.FreqMeasClock0);
                    FreqMeasclock1 = Convert.ToString(ScriptOps.DCCMonAsyncReportParam.FreqMeasClock1);
                    FreqMeasclock2 = Convert.ToString(ScriptOps.DCCMonAsyncReportParam.FreqMeasClock2);
                    FreqMeasclock3 = Convert.ToString(ScriptOps.DCCMonAsyncReportParam.FreqMeasClock3);
                    FreqMeasclock4 = Convert.ToString(ScriptOps.DCCMonAsyncReportParam.FreqMeasClock4);
                    FreqMeasclock5 = Convert.ToString(ScriptOps.DCCMonAsyncReportParam.FreqMeasClock5);
                    Timestamp = Convert.ToString(ScriptOps.DCCMonAsyncReportParam.TimeStamp);
                }
                else if (GlobalRef.g_RadarDeviceId == 2U)
                {
                    StatusFlag = Convert.ToString(ScriptOps.DCCMonAsyncReportParam.StatusFlags);
                    Errorcode = Convert.ToString(ScriptOps.DCCMonAsyncReportParam.ErrorCode);
                    FreqMeasclock0 = Convert.ToString(ScriptOps.DCCMonAsyncReportParam.FreqMeasClock0);
                    FreqMeasclock1 = Convert.ToString(ScriptOps.DCCMonAsyncReportParam.FreqMeasClock1);
                    FreqMeasclock2 = Convert.ToString(ScriptOps.DCCMonAsyncReportParam.FreqMeasClock2);
                    FreqMeasclock3 = Convert.ToString(ScriptOps.DCCMonAsyncReportParam.FreqMeasClock3);
                    FreqMeasclock4 = Convert.ToString(ScriptOps.DCCMonAsyncReportParam.FreqMeasClock4);
                    FreqMeasclock5 = Convert.ToString(ScriptOps.DCCMonAsyncReportParam.FreqMeasClock5);
                    Timestamp = Convert.ToString(ScriptOps.DCCMonAsyncReportParam.TimeStamp);
                }
                else if (GlobalRef.g_RadarDeviceId == 4U)
                {
                    StatusFlag = Convert.ToString(ScriptOps.DCCMonAsyncReportParam.StatusFlags);
                    Errorcode = Convert.ToString(ScriptOps.DCCMonAsyncReportParam.ErrorCode);
                    FreqMeasclock0 = Convert.ToString(ScriptOps.DCCMonAsyncReportParam.FreqMeasClock0);
                    FreqMeasclock1 = Convert.ToString(ScriptOps.DCCMonAsyncReportParam.FreqMeasClock1);
                    FreqMeasclock2 = Convert.ToString(ScriptOps.DCCMonAsyncReportParam.FreqMeasClock2);
                    FreqMeasclock3 = Convert.ToString(ScriptOps.DCCMonAsyncReportParam.FreqMeasClock3);
                    FreqMeasclock4 = Convert.ToString(ScriptOps.DCCMonAsyncReportParam.FreqMeasClock4);
                    FreqMeasclock5 = Convert.ToString(ScriptOps.DCCMonAsyncReportParam.FreqMeasClock5);
                    Timestamp = Convert.ToString(ScriptOps.DCCMonAsyncReportParam.TimeStamp);
                }
                else if (GlobalRef.g_RadarDeviceId == 8U)
                {
                    StatusFlag = Convert.ToString(ScriptOps.DCCMonAsyncReportParam.StatusFlags);
                    Errorcode = Convert.ToString(ScriptOps.DCCMonAsyncReportParam.ErrorCode);
                    FreqMeasclock0 = Convert.ToString(ScriptOps.DCCMonAsyncReportParam.FreqMeasClock0);
                    FreqMeasclock1 = Convert.ToString(ScriptOps.DCCMonAsyncReportParam.FreqMeasClock1);
                    FreqMeasclock2 = Convert.ToString(ScriptOps.DCCMonAsyncReportParam.FreqMeasClock2);
                    FreqMeasclock3 = Convert.ToString(ScriptOps.DCCMonAsyncReportParam.FreqMeasClock3);
                    FreqMeasclock4 = Convert.ToString(ScriptOps.DCCMonAsyncReportParam.FreqMeasClock4);
                    FreqMeasclock5 = Convert.ToString(ScriptOps.DCCMonAsyncReportParam.FreqMeasClock5);
                    Timestamp = Convert.ToString(ScriptOps.DCCMonAsyncReportParam.TimeStamp);
                }
            }
            if ((num == 0 && ((GlobalRef.g_CasCadeDeviceSpiConnect & 1U) == 1U || (GlobalRef.g_CasCadeDeviceSpiConnect & 2U) == 2U || (GlobalRef.g_CasCadeDeviceSpiConnect & 4U) == 4U || (GlobalRef.g_CasCadeDeviceSpiConnect & 8U) == 8U)) || GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
            {
                string full_command4 = string.Format("Status: Passed", new object[0]);
                m_GuiManager.RecordLog(6, full_command4);
            }
            else
            {
                string msg = string.Format("Status: Failed, Error Type: {0}", new object[]
                {
                    GetErrorType(num)
                });
                GlobalRef.LuaWrapper.PrintError(msg);
            }
            if (GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
            {
                if (iRs232ConnectDisconnect_impl() == 0 && !GlobalRef.g_NtvRS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
                {
                    m_GuiManager.DllOps.iConnect(1U, 0U);
                    string full_command5 = string.Format("Debug Port Reconnected!", new object[0]);
                    m_GuiManager.RecordLog(9, full_command5);
                    ScriptOps.KeepTrying(2000, new Func<bool>(spare_read));
                }
            }
            else if (GlobalRef.g_CasCadeDeviceSpiConnect == 0U)
            {
                string full_command6 = string.Format("Error Occurred in Port open close", new object[0]);
                m_GuiManager.RecordLog(9, full_command6);
            }
            return num;
        }

        public int UpdateNSetPLLControlVolSignalsMonitoringConfData(ushort RadarDeviceId, char ReportingMode, char APLLVctl, char SynthVCO1VoltageControl, char SynthVCO2VoltageControl)
        {
            int result = -1;
            GlobalRef.g_RadarDeviceId = (uint)RadarDeviceId;
            ScriptOps.m_MainForm.p000001.UpdatePLLControlVolMonConfigData();
            m_MonPLLControlVoltageConfigParameters.ReportingMode = ReportingMode;
            m_MonPLLControlVoltageConfigParameters.APLLVctl = APLLVctl;
            m_MonPLLControlVoltageConfigParameters.SynthVCO1VoltageControl = SynthVCO1VoltageControl;
            m_MonPLLControlVoltageConfigParameters.SynthVCO2VoltageControl = SynthVCO2VoltageControl;
            ScriptOps.m_MainForm.p000001.UpdatePLLControlVolMonConfigDataFrmCmdSrc();
            return result;
        }

        public int UpdateNPLLControlVolSignalsMonitoringConfigurationData_cmd(out string StatusFlag, out string Errorcode, out string APLLvolCtl, out string p3, out string p4, out string SynthVCO1slope, out string p6, out string p7, out string SynthVCO2slope, out string Timestamp)
        {
            StatusFlag = string.Empty;
            Errorcode = string.Empty;
            APLLvolCtl = string.Empty;
            p3 = string.Empty;
            p4 = string.Empty;
            SynthVCO1slope = string.Empty;
            p6 = string.Empty;
            p7 = string.Empty;
            SynthVCO2slope = string.Empty;
            Timestamp = string.Empty;
            ScriptOps.m_MainForm.p000001.UpdatePLLControlVolMonConfigData();
            return iSetPLLControlVolSignalsMonConfig_ImplForLuaCommand(out StatusFlag, out Errorcode, out APLLvolCtl, out p3, out p4, out SynthVCO1slope, out p6, out p7, out SynthVCO2slope, out Timestamp);
        }

        private int iSetPLLControlVolSignalsMonConfig_ImplForLuaCommand(out string StatusFlag, out string Errorcode, out string APLLvolCtl, out string p3, out string p4, out string SynthVCO1slope, out string p6, out string p7, out string SynthVCO2slope, out string Timestamp)
        {
            StatusFlag = string.Empty;
            Errorcode = string.Empty;
            APLLvolCtl = string.Empty;
            p3 = string.Empty;
            p4 = string.Empty;
            SynthVCO1slope = string.Empty;
            p6 = string.Empty;
            p7 = string.Empty;
            SynthVCO2slope = string.Empty;
            Timestamp = string.Empty;
            PLLControlVolMonitoringConfigurationParam.ReportingMode = (byte)m_MonPLLControlVoltageConfigParameters.ReportingMode;
            PLLControlVolMonitoringConfigurationParam.Reserved = 0;
            PLLControlVolMonitoringConfigurationParam.SignalEnables = (ushort)(m_MonPLLControlVoltageConfigParameters.APLLVctl | m_MonPLLControlVoltageConfigParameters.SynthVCO1VoltageControl << 1 | m_MonPLLControlVoltageConfigParameters.SynthVCO2VoltageControl << 2);
            PLLControlVolMonitoringConfigurationParam.Reserved2 = 0;
            IntPtr data = GCHandle.Alloc(PLLControlVolMonitoringConfigurationParam, GCHandleType.Pinned).AddrOfPinnedObject();
            int num;
            if (GlobalRef.g_NtvRS232Connect[(int)GlobalRef.g_RadarDeviceIndex] && GlobalRef.g_CasCadeDeviceSpiConnect == 0U)
            {
                num = m_TsWrapper.Calling_WriteAddr_Single(4294959848U, 1U);
                if (m_GuiManager.DllOps.itempDisconnect(false) == 0)
                {
                    string full_command = string.Format("Debug Port Disconnected", new object[0]);
                    m_GuiManager.RecordLog(0, full_command);
                    if (!GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
                    {
                        iRs232ConnectDisconnect_impl();
                    }
                }
            }
            if (m_RadarDeviceModeConfigParams.NumberOfRadarDevicesDetected <= 1)
            {
                string full_command2 = string.Format("ar1.SetRfPllContrlVoltMonConfig({0}, {1}, {2}, {3})", new object[]
                {
                    m_MonPLLControlVoltageConfigParameters.ReportingMode,
                    m_MonPLLControlVoltageConfigParameters.APLLVctl,
                    m_MonPLLControlVoltageConfigParameters.SynthVCO1VoltageControl,
                    m_MonPLLControlVoltageConfigParameters.SynthVCO2VoltageControl
                });
                m_GuiManager.RecordLog(6, full_command2);
            }
            else
            {
                string full_command3 = string.Format("ar1.SetRfPllContrlVoltMonConfig_mult({0}, {1}, {2}, {3}, {4})", new object[]
                {
                    GlobalRef.g_RadarDeviceId,
                    m_MonPLLControlVoltageConfigParameters.ReportingMode,
                    m_MonPLLControlVoltageConfigParameters.APLLVctl,
                    m_MonPLLControlVoltageConfigParameters.SynthVCO1VoltageControl,
                    m_MonPLLControlVoltageConfigParameters.SynthVCO2VoltageControl
                });
                m_GuiManager.RecordLog(6, full_command3);
            }
            GlobalRef.g_PLLCtlVolSigMon = 1U;
            num = Imports.RadarLinkImpl_RfPllContrlVoltMonConfig(GlobalRef.g_RadarDeviceId, data);
            while (GlobalRef.g_PLLCtlVolSigMon == 0U)
            {
                Thread.Sleep(100);
            }
            if (num == 0)
            {
                if (GlobalRef.g_RadarDeviceId == 1U)
                {
                    StatusFlag = Convert.ToString(ScriptOps.PLLControlVoltageAsyncReportParam.StatusFlags);
                    Errorcode = Convert.ToString(ScriptOps.PLLControlVoltageAsyncReportParam.ErrorCode);
                    APLLvolCtl = Convert.ToString(ScriptOps.PLLControlVoltageAsyncReportParam.f00000e);
                    p3 = Convert.ToString(ScriptOps.PLLControlVoltageAsyncReportParam.SynthVCO1VctlMaxFreq);
                    p4 = Convert.ToString(ScriptOps.PLLControlVoltageAsyncReportParam.SynthVCO1VctlMinFreq);
                    SynthVCO1slope = Convert.ToString(ScriptOps.PLLControlVoltageAsyncReportParam.SynthVCO1Slope);
                    p6 = Convert.ToString(ScriptOps.PLLControlVoltageAsyncReportParam.SynthVCO2VctlMaxFreq);
                    p7 = Convert.ToString(ScriptOps.PLLControlVoltageAsyncReportParam.SynthVCO2VctlMinFreq);
                    SynthVCO2slope = Convert.ToString(ScriptOps.PLLControlVoltageAsyncReportParam.SynthVCO2Slope);
                    Timestamp = Convert.ToString(ScriptOps.PLLControlVoltageAsyncReportParam.TimeStamp);
                }
                else if (GlobalRef.g_RadarDeviceId == 2U)
                {
                    StatusFlag = Convert.ToString(ScriptOps.PLLControlVoltageAsyncReportParam.StatusFlags);
                    Errorcode = Convert.ToString(ScriptOps.PLLControlVoltageAsyncReportParam.ErrorCode);
                    APLLvolCtl = Convert.ToString(ScriptOps.PLLControlVoltageAsyncReportParam.f00000e);
                    p3 = Convert.ToString(ScriptOps.PLLControlVoltageAsyncReportParam.SynthVCO1VctlMaxFreq);
                    p4 = Convert.ToString(ScriptOps.PLLControlVoltageAsyncReportParam.SynthVCO1VctlMinFreq);
                    SynthVCO1slope = Convert.ToString(ScriptOps.PLLControlVoltageAsyncReportParam.SynthVCO1Slope);
                    p6 = Convert.ToString(ScriptOps.PLLControlVoltageAsyncReportParam.SynthVCO2VctlMaxFreq);
                    p7 = Convert.ToString(ScriptOps.PLLControlVoltageAsyncReportParam.SynthVCO2VctlMinFreq);
                    SynthVCO2slope = Convert.ToString(ScriptOps.PLLControlVoltageAsyncReportParam.SynthVCO2Slope);
                    Timestamp = Convert.ToString(ScriptOps.PLLControlVoltageAsyncReportParam.TimeStamp);
                }
                else if (GlobalRef.g_RadarDeviceId == 4U)
                {
                    StatusFlag = Convert.ToString(ScriptOps.PLLControlVoltageAsyncReportParam.StatusFlags);
                    Errorcode = Convert.ToString(ScriptOps.PLLControlVoltageAsyncReportParam.ErrorCode);
                    APLLvolCtl = Convert.ToString(ScriptOps.PLLControlVoltageAsyncReportParam.f00000e);
                    p3 = Convert.ToString(ScriptOps.PLLControlVoltageAsyncReportParam.SynthVCO1VctlMaxFreq);
                    p4 = Convert.ToString(ScriptOps.PLLControlVoltageAsyncReportParam.SynthVCO1VctlMinFreq);
                    SynthVCO1slope = Convert.ToString(ScriptOps.PLLControlVoltageAsyncReportParam.SynthVCO1Slope);
                    p6 = Convert.ToString(ScriptOps.PLLControlVoltageAsyncReportParam.SynthVCO2VctlMaxFreq);
                    p7 = Convert.ToString(ScriptOps.PLLControlVoltageAsyncReportParam.SynthVCO2VctlMinFreq);
                    SynthVCO2slope = Convert.ToString(ScriptOps.PLLControlVoltageAsyncReportParam.SynthVCO2Slope);
                    Timestamp = Convert.ToString(ScriptOps.PLLControlVoltageAsyncReportParam.TimeStamp);
                }
                else if (GlobalRef.g_RadarDeviceId == 8U)
                {
                    StatusFlag = Convert.ToString(ScriptOps.PLLControlVoltageAsyncReportParam.StatusFlags);
                    Errorcode = Convert.ToString(ScriptOps.PLLControlVoltageAsyncReportParam.ErrorCode);
                    APLLvolCtl = Convert.ToString(ScriptOps.PLLControlVoltageAsyncReportParam.f00000e);
                    p3 = Convert.ToString(ScriptOps.PLLControlVoltageAsyncReportParam.SynthVCO1VctlMaxFreq);
                    p4 = Convert.ToString(ScriptOps.PLLControlVoltageAsyncReportParam.SynthVCO1VctlMinFreq);
                    SynthVCO1slope = Convert.ToString(ScriptOps.PLLControlVoltageAsyncReportParam.SynthVCO1Slope);
                    p6 = Convert.ToString(ScriptOps.PLLControlVoltageAsyncReportParam.SynthVCO2VctlMaxFreq);
                    p7 = Convert.ToString(ScriptOps.PLLControlVoltageAsyncReportParam.SynthVCO2VctlMinFreq);
                    SynthVCO2slope = Convert.ToString(ScriptOps.PLLControlVoltageAsyncReportParam.SynthVCO2Slope);
                    Timestamp = Convert.ToString(ScriptOps.PLLControlVoltageAsyncReportParam.TimeStamp);
                }
            }
            if ((num == 0 && ((GlobalRef.g_CasCadeDeviceSpiConnect & 1U) == 1U || (GlobalRef.g_CasCadeDeviceSpiConnect & 2U) == 2U || (GlobalRef.g_CasCadeDeviceSpiConnect & 4U) == 4U || (GlobalRef.g_CasCadeDeviceSpiConnect & 8U) == 8U)) || GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
            {
                string full_command4 = string.Format("Status: Passed", new object[0]);
                m_GuiManager.RecordLog(6, full_command4);
            }
            else
            {
                string msg = string.Format("Status: Failed, Error Type: {0}", new object[]
                {
                    GetErrorType(num)
                });
                GlobalRef.LuaWrapper.PrintError(msg);
            }
            if (GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
            {
                if (iRs232ConnectDisconnect_impl() == 0 && !GlobalRef.g_NtvRS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
                {
                    m_GuiManager.DllOps.iConnect(1U, 0U);
                    string full_command5 = string.Format("Debug Port Reconnected!", new object[0]);
                    m_GuiManager.RecordLog(9, full_command5);
                    ScriptOps.KeepTrying(2000, new Func<bool>(spare_read));
                }
            }
            else if (GlobalRef.g_CasCadeDeviceSpiConnect == 0U)
            {
                string full_command6 = string.Format("Error Occurred in Port open close", new object[0]);
                m_GuiManager.RecordLog(9, full_command6);
            }
            return num;
        }

        public int UpdateNSetSynthFrequencyErrorMonitoringConfData(ushort RadarDeviceId, char ProfileIndex, char ReportingMode, ushort FreqErrorThreshold, double MonStartTime)
        {
            int result = -1;
            GlobalRef.g_RadarDeviceId = (uint)RadarDeviceId;
            ScriptOps.m_MainForm.AnalogMon2Config.UpdateSynthFrequencyMonConfigData();
            m_MonSynthFrequencyConfigParameters.ProfileIndex = ProfileIndex;
            m_MonSynthFrequencyConfigParameters.ReportingMode = ReportingMode;
            m_MonSynthFrequencyConfigParameters.FreqErrorThreshold = FreqErrorThreshold;
            m_MonSynthFrequencyConfigParameters.MonStartTime = MonStartTime;
            ScriptOps.m_MainForm.AnalogMon2Config.UpdateSynthFrequencyMonConfigDataFrmCmdSrc();
            return result;
        }

        public int UpdateNSynthFrequencyErrorMonitoringConfigurationData_cmd(out string StatusFlag, out string Errorcode, out string Profileindex, out string MaxFreqErrorVal, out string FrequencyFailureCount, out string Timestamp)
        {
            StatusFlag = string.Empty;
            Errorcode = string.Empty;
            Profileindex = string.Empty;
            MaxFreqErrorVal = string.Empty;
            FrequencyFailureCount = string.Empty;
            Timestamp = string.Empty;
            ScriptOps.m_MainForm.AnalogMon2Config.UpdateSynthFrequencyMonConfigData();
            return iSetSynthFrequencyErrorMonConfig_ImplForLuaCommand(out StatusFlag, out Errorcode, out Profileindex, out MaxFreqErrorVal, out FrequencyFailureCount, out Timestamp);
        }

        private int iSetSynthFrequencyErrorMonConfig_ImplForLuaCommand(out string StatusFlag, out string Errorcode, out string Profileindex, out string MaxFreqErrorVal, out string FrequencyFailureCount, out string Timestamp)
        {
            StatusFlag = string.Empty;
            Errorcode = string.Empty;
            Profileindex = string.Empty;
            MaxFreqErrorVal = string.Empty;
            FrequencyFailureCount = string.Empty;
            Timestamp = string.Empty;
            SynthFreqMonitoringConfigurationParam.ProfileIndex = (byte)m_MonSynthFrequencyConfigParameters.ProfileIndex;
            SynthFreqMonitoringConfigurationParam.ReportingMode = (byte)m_MonSynthFrequencyConfigParameters.ReportingMode;
            SynthFreqMonitoringConfigurationParam.FreqErrorThreshold = m_MonSynthFrequencyConfigParameters.FreqErrorThreshold;
            SynthFreqMonitoringConfigurationParam.MonStartTime = (sbyte)(m_MonSynthFrequencyConfigParameters.MonStartTime / 0.2);
            SynthFreqMonitoringConfigurationParam.Reserved2 = 0;
            SynthFreqMonitoringConfigurationParam.Reserved3 = 0;
            SynthFreqMonitoringConfigurationParam.Reserved4 = 0U;
            IntPtr data = GCHandle.Alloc(SynthFreqMonitoringConfigurationParam, GCHandleType.Pinned).AddrOfPinnedObject();
            int num;
            if (GlobalRef.g_NtvRS232Connect[(int)GlobalRef.g_RadarDeviceIndex] && GlobalRef.g_CasCadeDeviceSpiConnect == 0U)
            {
                num = m_TsWrapper.Calling_WriteAddr_Single(4294959848U, 1U);
                if (m_GuiManager.DllOps.itempDisconnect(false) == 0)
                {
                    string full_command = string.Format("Debug Port Disconnected", new object[0]);
                    m_GuiManager.RecordLog(0, full_command);
                    if (!GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
                    {
                        iRs232ConnectDisconnect_impl();
                    }
                }
            }
            if (m_RadarDeviceModeConfigParams.NumberOfRadarDevicesDetected <= 1)
            {
                string full_command2 = string.Format("ar1.SetRfSynthFreqMonConfig({0}, {1}, {2}, {3})", new object[]
                {
                    m_MonSynthFrequencyConfigParameters.ProfileIndex,
                    m_MonSynthFrequencyConfigParameters.ReportingMode,
                    m_MonSynthFrequencyConfigParameters.FreqErrorThreshold,
                    (decimal)Math.Round(m_MonSynthFrequencyConfigParameters.MonStartTime, 1)
                });
                m_GuiManager.RecordLog(6, full_command2);
            }
            else
            {
                string full_command3 = string.Format("ar1.SetRfSynthFreqMonConfig_mult({0}, {1}, {2}, {3}, {4})", new object[]
                {
                    GlobalRef.g_RadarDeviceId,
                    m_MonSynthFrequencyConfigParameters.ProfileIndex,
                    m_MonSynthFrequencyConfigParameters.ReportingMode,
                    m_MonSynthFrequencyConfigParameters.FreqErrorThreshold,
                    (decimal)Math.Round(m_MonSynthFrequencyConfigParameters.MonStartTime, 1)
                });
                m_GuiManager.RecordLog(6, full_command3);
            }
            GlobalRef.g_SynthFreqErrMon = 1U;
            num = Imports.RadarLinkImpl_RfSynthFreqMonConfig(GlobalRef.g_RadarDeviceId, data);
            while (GlobalRef.g_SynthFreqErrMon == 0U)
            {
                Thread.Sleep(100);
            }
            if (num == 0)
            {
                if (GlobalRef.g_RadarDeviceId == 1U)
                {
                    StatusFlag = Convert.ToString(ScriptOps.SynthFrequencyMonAsyncReportParam.StatusFlags);
                    Errorcode = Convert.ToString(ScriptOps.SynthFrequencyMonAsyncReportParam.ErrorCode);
                    Profileindex = Convert.ToString(ScriptOps.SynthFrequencyMonAsyncReportParam.ProfileIndex);
                    MaxFreqErrorVal = Convert.ToString(ScriptOps.SynthFrequencyMonAsyncReportParam.MaxFreqErrorValue);
                    FrequencyFailureCount = Convert.ToString(ScriptOps.SynthFrequencyMonAsyncReportParam.FreqFailureCount);
                    Timestamp = Convert.ToString(ScriptOps.SynthFrequencyMonAsyncReportParam.TimeStamp);
                }
                else if (GlobalRef.g_RadarDeviceId == 2U)
                {
                    StatusFlag = Convert.ToString(ScriptOps.SynthFrequencyMonAsyncReportParam.StatusFlags);
                    Errorcode = Convert.ToString(ScriptOps.SynthFrequencyMonAsyncReportParam.ErrorCode);
                    Profileindex = Convert.ToString(ScriptOps.SynthFrequencyMonAsyncReportParam.ProfileIndex);
                    MaxFreqErrorVal = Convert.ToString(ScriptOps.SynthFrequencyMonAsyncReportParam.MaxFreqErrorValue);
                    FrequencyFailureCount = Convert.ToString(ScriptOps.SynthFrequencyMonAsyncReportParam.FreqFailureCount);
                    Timestamp = Convert.ToString(ScriptOps.SynthFrequencyMonAsyncReportParam.TimeStamp);
                }
                else if (GlobalRef.g_RadarDeviceId == 4U)
                {
                    StatusFlag = Convert.ToString(ScriptOps.SynthFrequencyMonAsyncReportParam.StatusFlags);
                    Errorcode = Convert.ToString(ScriptOps.SynthFrequencyMonAsyncReportParam.ErrorCode);
                    Profileindex = Convert.ToString(ScriptOps.SynthFrequencyMonAsyncReportParam.ProfileIndex);
                    MaxFreqErrorVal = Convert.ToString(ScriptOps.SynthFrequencyMonAsyncReportParam.MaxFreqErrorValue);
                    FrequencyFailureCount = Convert.ToString(ScriptOps.SynthFrequencyMonAsyncReportParam.FreqFailureCount);
                    Timestamp = Convert.ToString(ScriptOps.SynthFrequencyMonAsyncReportParam.TimeStamp);
                }
                else if (GlobalRef.g_RadarDeviceId == 8U)
                {
                    StatusFlag = Convert.ToString(ScriptOps.SynthFrequencyMonAsyncReportParam.StatusFlags);
                    Errorcode = Convert.ToString(ScriptOps.SynthFrequencyMonAsyncReportParam.ErrorCode);
                    Profileindex = Convert.ToString(ScriptOps.SynthFrequencyMonAsyncReportParam.ProfileIndex);
                    MaxFreqErrorVal = Convert.ToString(ScriptOps.SynthFrequencyMonAsyncReportParam.MaxFreqErrorValue);
                    FrequencyFailureCount = Convert.ToString(ScriptOps.SynthFrequencyMonAsyncReportParam.FreqFailureCount);
                    Timestamp = Convert.ToString(ScriptOps.SynthFrequencyMonAsyncReportParam.TimeStamp);
                }
            }
            if ((num == 0 && ((GlobalRef.g_CasCadeDeviceSpiConnect & 1U) == 1U || (GlobalRef.g_CasCadeDeviceSpiConnect & 2U) == 2U || (GlobalRef.g_CasCadeDeviceSpiConnect & 4U) == 4U || (GlobalRef.g_CasCadeDeviceSpiConnect & 8U) == 8U)) || GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
            {
                string full_command4 = string.Format("Status: Passed", new object[0]);
                m_GuiManager.RecordLog(6, full_command4);
            }
            else
            {
                string msg = string.Format("Status: Failed, Error Type: {0}", new object[]
                {
                    GetErrorType(num)
                });
                GlobalRef.LuaWrapper.PrintError(msg);
            }
            if (GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
            {
                if (iRs232ConnectDisconnect_impl() == 0 && !GlobalRef.g_NtvRS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
                {
                    m_GuiManager.DllOps.iConnect(1U, 0U);
                    string full_command5 = string.Format("Debug Port Reconnected!", new object[0]);
                    m_GuiManager.RecordLog(9, full_command5);
                    ScriptOps.KeepTrying(2000, new Func<bool>(spare_read));
                }
            }
            else if (GlobalRef.g_CasCadeDeviceSpiConnect == 0U)
            {
                string full_command6 = string.Format("Error Occurred in Port open close", new object[0]);
                m_GuiManager.RecordLog(9, full_command6);
            }
            return num;
        }

        public int UpdateNSetTx1PowerMonitoringConfData(ushort RadarDeviceId, char ProfileIndex, char RF1FreqBitMask, char RF2FreqBitMask, char RF3FreqBitMask, char ReportingMode, double TxPowerAbsoluteErrorThreshold, double TxPowerFlatnessErrorThreshold)
        {
            int result = -1;
            GlobalRef.g_RadarDeviceId = (uint)RadarDeviceId;
            ScriptOps.m_MainForm.AnalogMonConfig.UpdateTX1PowerMonConfigData();
            m_MonTX1PowerConfigParameters.ProfileIndex = ProfileIndex;
            m_MonTX1PowerConfigParameters.RF1FreqBitMask = RF1FreqBitMask;
            m_MonTX1PowerConfigParameters.RF2FreqBitMask = RF2FreqBitMask;
            m_MonTX1PowerConfigParameters.RF3FreqBitMask = RF3FreqBitMask;
            m_MonTX1PowerConfigParameters.ReportingMode = ReportingMode;
            m_MonTX1PowerConfigParameters.TxPowerAbsoluteErrorThreshold = TxPowerAbsoluteErrorThreshold;
            m_MonTX1PowerConfigParameters.TxPowerFlatnessErrorThreshold = TxPowerFlatnessErrorThreshold;
            ScriptOps.m_MainForm.AnalogMonConfig.UpdateTX1PowerMonConfigDataFrmCmdSrc();
            return result;
        }

        public int UpdateNTx1PowerMonitoringConfigurationData_cmd(out string StatusFlags, out string ErrorCode, out string profileIndex, out string RF1TxPowerValue, out string RF2TxPowerValue, out string RF3TxPowerValue, out string TimeStamp)
        {
            StatusFlags = string.Empty;
            ErrorCode = string.Empty;
            profileIndex = string.Empty;
            RF1TxPowerValue = string.Empty;
            RF2TxPowerValue = string.Empty;
            RF3TxPowerValue = string.Empty;
            TimeStamp = string.Empty;
            ScriptOps.m_MainForm.AnalogMonConfig.UpdateTX1PowerMonConfigData();
            return iSetTX1PowerMonConfig_ImplForLuaCommand(out StatusFlags, out ErrorCode, out profileIndex, out RF1TxPowerValue, out RF2TxPowerValue, out RF3TxPowerValue, out TimeStamp);
        }

        private int iSetTX1PowerMonConfig_ImplForLuaCommand(out string StatusFlags, out string ErrorCode, out string profileIndex, out string RF1TxPowerValue, out string RF2TxPowerValue, out string RF3TxPowerValue, out string TimeStamp)
        {
            StatusFlags = string.Empty;
            ErrorCode = string.Empty;
            profileIndex = string.Empty;
            RF1TxPowerValue = string.Empty;
            RF2TxPowerValue = string.Empty;
            RF3TxPowerValue = string.Empty;
            TimeStamp = string.Empty;
            ScriptOps.Tx1Tx2Tx3PowerMonitoringConfiguration1Param.ProfileIndex = 0;
            ScriptOps.Tx1Tx2Tx3PowerMonitoringConfiguration1Param.RFFreqBitMask = 0;
            ScriptOps.Tx1Tx2Tx3PowerMonitoringConfiguration1Param.Reserved = 0;
            ScriptOps.Tx1Tx2Tx3PowerMonitoringConfiguration1Param.ReportingMode = 0;
            ScriptOps.Tx1Tx2Tx3PowerMonitoringConfiguration1Param.TxPowerAbsoluteErrorThreshold = 0;
            ScriptOps.Tx1Tx2Tx3PowerMonitoringConfiguration1Param.TxPowerFlatnessErrorThreshold = 0;
            ScriptOps.Tx1Tx2Tx3PowerMonitoringConfiguration1Param.Reserved2 = 0;
            ScriptOps.Tx1Tx2Tx3PowerMonitoringConfiguration1Param.Reserved3 = 0U;
            ScriptOps.Tx1Tx2Tx3PowerMonitoringConfiguration2Param.ProfileIndex = 0;
            ScriptOps.Tx1Tx2Tx3PowerMonitoringConfiguration2Param.RFFreqBitMask = 0;
            ScriptOps.Tx1Tx2Tx3PowerMonitoringConfiguration2Param.Reserved = 0;
            ScriptOps.Tx1Tx2Tx3PowerMonitoringConfiguration2Param.ReportingMode = 0;
            ScriptOps.Tx1Tx2Tx3PowerMonitoringConfiguration2Param.TxPowerAbsoluteErrorThreshold = 0;
            ScriptOps.Tx1Tx2Tx3PowerMonitoringConfiguration2Param.TxPowerFlatnessErrorThreshold = 0;
            ScriptOps.Tx1Tx2Tx3PowerMonitoringConfiguration2Param.Reserved2 = 0;
            ScriptOps.Tx1Tx2Tx3PowerMonitoringConfiguration2Param.Reserved3 = 0U;
            ScriptOps.Tx1Tx2Tx3PowerMonitoringConfiguration3Param.ProfileIndex = 0;
            ScriptOps.Tx1Tx2Tx3PowerMonitoringConfiguration3Param.RFFreqBitMask = 0;
            ScriptOps.Tx1Tx2Tx3PowerMonitoringConfiguration3Param.Reserved = 0;
            ScriptOps.Tx1Tx2Tx3PowerMonitoringConfiguration3Param.ReportingMode = 0;
            ScriptOps.Tx1Tx2Tx3PowerMonitoringConfiguration3Param.TxPowerAbsoluteErrorThreshold = 0;
            ScriptOps.Tx1Tx2Tx3PowerMonitoringConfiguration3Param.TxPowerFlatnessErrorThreshold = 0;
            ScriptOps.Tx1Tx2Tx3PowerMonitoringConfiguration3Param.Reserved2 = 0;
            ScriptOps.Tx1Tx2Tx3PowerMonitoringConfiguration3Param.Reserved3 = 0U;
            ScriptOps.Tx1Tx2Tx3PowerMonitoringConfiguration1Param.ProfileIndex = (byte)m_MonTX1PowerConfigParameters.ProfileIndex;
            ScriptOps.Tx1Tx2Tx3PowerMonitoringConfiguration1Param.RFFreqBitMask = (byte)(m_MonTX1PowerConfigParameters.RF1FreqBitMask | m_MonTX1PowerConfigParameters.RF2FreqBitMask << 1 | m_MonTX1PowerConfigParameters.RF3FreqBitMask << 2);
            ScriptOps.Tx1Tx2Tx3PowerMonitoringConfiguration1Param.Reserved = 0;
            ScriptOps.Tx1Tx2Tx3PowerMonitoringConfiguration1Param.ReportingMode = (byte)m_MonTX1PowerConfigParameters.ReportingMode;
            ScriptOps.Tx1Tx2Tx3PowerMonitoringConfiguration1Param.TxPowerAbsoluteErrorThreshold = (ushort)(m_MonTX1PowerConfigParameters.TxPowerAbsoluteErrorThreshold * 10.0);
            ScriptOps.Tx1Tx2Tx3PowerMonitoringConfiguration1Param.TxPowerFlatnessErrorThreshold = (ushort)(m_MonTX1PowerConfigParameters.TxPowerFlatnessErrorThreshold * 10.0);
            ScriptOps.Tx1Tx2Tx3PowerMonitoringConfiguration1Param.Reserved2 = 0;
            ScriptOps.Tx1Tx2Tx3PowerMonitoringConfiguration1Param.Reserved3 = 0U;
            IntPtr pTX1PowerMonitoringConfigurationData = GCHandle.Alloc(ScriptOps.Tx1Tx2Tx3PowerMonitoringConfiguration1Param, GCHandleType.Pinned).AddrOfPinnedObject();
            GCHandle.Alloc(ScriptOps.Tx1Tx2Tx3PowerMonitoringConfiguration2Param, GCHandleType.Pinned).AddrOfPinnedObject();
            GCHandle.Alloc(ScriptOps.Tx1Tx2Tx3PowerMonitoringConfiguration3Param, GCHandleType.Pinned).AddrOfPinnedObject();
            ScriptOps.Tx1Tx2Tx3PowerMonitoringConfiguration2NewParam.pTX1PowerMonitoringConfigurationData = pTX1PowerMonitoringConfigurationData;
            ScriptOps.Tx1Tx2Tx3PowerMonitoringConfiguration2NewParam.pTX2PowerMonitoringConfigurationData = IntPtr.Zero;
            ScriptOps.Tx1Tx2Tx3PowerMonitoringConfiguration2NewParam.pTX3PowerMonitoringConfigurationData = IntPtr.Zero;
            IntPtr data = GCHandle.Alloc(ScriptOps.Tx1Tx2Tx3PowerMonitoringConfiguration2NewParam, GCHandleType.Pinned).AddrOfPinnedObject();
            int num;
            if (GlobalRef.g_NtvRS232Connect[(int)GlobalRef.g_RadarDeviceIndex] && GlobalRef.g_CasCadeDeviceSpiConnect == 0U)
            {
                num = m_TsWrapper.Calling_WriteAddr_Single(4294959848U, 1U);
                if (m_GuiManager.DllOps.itempDisconnect(false) == 0)
                {
                    string full_command = string.Format("Debug Port Disconnected", new object[0]);
                    m_GuiManager.RecordLog(0, full_command);
                    if (!GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
                    {
                        iRs232ConnectDisconnect_impl();
                    }
                }
            }
            if (m_RadarDeviceModeConfigParams.NumberOfRadarDevicesDetected <= 1)
            {
                string full_command2 = string.Format("ar1.SetRfTx0PowMonConfig({0}, {1}, {2}, {3}, {4}, {5}, {6})", new object[]
                {
                    m_MonTX1PowerConfigParameters.ProfileIndex,
                    m_MonTX1PowerConfigParameters.RF1FreqBitMask,
                    m_MonTX1PowerConfigParameters.RF2FreqBitMask,
                    m_MonTX1PowerConfigParameters.RF3FreqBitMask,
                    m_MonTX1PowerConfigParameters.ReportingMode,
                    (decimal)Math.Round(m_MonTX1PowerConfigParameters.TxPowerAbsoluteErrorThreshold, 1),
                    (decimal)Math.Round(m_MonTX1PowerConfigParameters.TxPowerFlatnessErrorThreshold, 1)
                });
                m_GuiManager.RecordLog(6, full_command2);
            }
            else
            {
                string full_command3 = string.Format("ar1.SetRfTx0PowMonConfig_mult({0}, {1}, {2}, {3}, {4}, {5}, {6}, {7})", new object[]
                {
                    GlobalRef.g_RadarDeviceId,
                    m_MonTX1PowerConfigParameters.ProfileIndex,
                    m_MonTX1PowerConfigParameters.RF1FreqBitMask,
                    m_MonTX1PowerConfigParameters.RF2FreqBitMask,
                    m_MonTX1PowerConfigParameters.RF3FreqBitMask,
                    m_MonTX1PowerConfigParameters.ReportingMode,
                    (decimal)Math.Round(m_MonTX1PowerConfigParameters.TxPowerAbsoluteErrorThreshold, 1),
                    (decimal)Math.Round(m_MonTX1PowerConfigParameters.TxPowerFlatnessErrorThreshold, 1)
                });
                m_GuiManager.RecordLog(6, full_command3);
            }
            GlobalRef.g_Tx1PowerMon = 1U;
            num = Imports.RadarLinkImpl_RfTxPowrMonConfig((byte)GlobalRef.g_RadarDeviceId, data);
            while (GlobalRef.g_Tx1PowerMon == 0U)
            {
                Thread.Sleep(100);
            }
            if (num == 0)
            {
                if (GlobalRef.g_RadarDeviceId == 1U)
                {
                    if ((ScriptOps.Tx1PowerMonAsyncDataParam.StatusFlags & 1) == 1)
                    {
                        StatusFlags = Convert.ToString(ScriptOps.Tx1PowerMonAsyncDataParam.StatusFlags);
                    }
                    else
                    {
                        StatusFlags = Convert.ToString(ScriptOps.Tx1PowerMonAsyncDataParam.StatusFlags);
                    }
                    ErrorCode = Convert.ToString(ScriptOps.Tx1PowerMonAsyncDataParam.ErrorCode);
                    profileIndex = Convert.ToString(ScriptOps.Tx1PowerMonAsyncDataParam.ProfileIndex);
                    ushort num2 = (ushort)(ScriptOps.Tx1PowerMonAsyncDataParam.RF12TxPowerValue & 65535U);
                    if (num2 > 32767)
                    {
                        short num3 = (short)((int)num2 - 65536);
                        RF1TxPowerValue = Convert.ToString((double)num3 / 10.0);
                    }
                    else
                    {
                        RF1TxPowerValue = Convert.ToString((double)num2 / 10.0);
                    }
                    ushort num4 = (ushort)(ScriptOps.Tx1PowerMonAsyncDataParam.RF12TxPowerValue >> 16);
                    if (num4 > 32767)
                    {
                        short num3 = (short)((int)num4 - 65536);
                        RF2TxPowerValue = Convert.ToString((double)num3 / 10.0);
                    }
                    else
                    {
                        RF2TxPowerValue = Convert.ToString((double)num4 / 10.0);
                    }
                    ushort num5 = (ushort)(ScriptOps.Tx1PowerMonAsyncDataParam.RF3TxPowerValue & 65535U);
                    if (num5 > 32767)
                    {
                        short num3 = (short)((int)num5 - 65536);
                        RF3TxPowerValue = Convert.ToString((double)num3 / 10.0);
                    }
                    else
                    {
                        RF3TxPowerValue = Convert.ToString((double)num5 / 10.0);
                    }
                    TimeStamp = Convert.ToString(ScriptOps.Tx1PowerMonAsyncDataParam.TimeStamp);
                }
                else if (GlobalRef.g_RadarDeviceId == 2U)
                {
                    if ((ScriptOps.Tx1PowerMonAsyncDataParam.StatusFlags & 1) == 1)
                    {
                        StatusFlags = Convert.ToString(ScriptOps.Tx1PowerMonAsyncDataParam.StatusFlags);
                    }
                    else
                    {
                        StatusFlags = Convert.ToString(ScriptOps.Tx1PowerMonAsyncDataParam.StatusFlags);
                    }
                    ErrorCode = Convert.ToString(ScriptOps.Tx1PowerMonAsyncDataParam.ErrorCode);
                    profileIndex = Convert.ToString(ScriptOps.Tx1PowerMonAsyncDataParam.ProfileIndex);
                    ushort num6 = (ushort)(ScriptOps.Tx1PowerMonAsyncDataParam.RF12TxPowerValue & 65535U);
                    if (num6 > 32767)
                    {
                        short num7 = (short)((int)num6 - 65536);
                        RF1TxPowerValue = Convert.ToString((double)num7 / 10.0);
                    }
                    else
                    {
                        RF1TxPowerValue = Convert.ToString((double)num6 / 10.0);
                    }
                    ushort num8 = (ushort)(ScriptOps.Tx1PowerMonAsyncDataParam.RF12TxPowerValue >> 16);
                    if (num8 > 32767)
                    {
                        short num7 = (short)((int)num8 - 65536);
                        RF2TxPowerValue = Convert.ToString((double)num7 / 10.0);
                    }
                    else
                    {
                        RF2TxPowerValue = Convert.ToString((double)num8 / 10.0);
                    }
                    ushort num9 = (ushort)(ScriptOps.Tx1PowerMonAsyncDataParam.RF3TxPowerValue & 65535U);
                    if (num9 > 32767)
                    {
                        short num7 = (short)((int)num9 - 65536);
                        RF3TxPowerValue = Convert.ToString((double)num7 / 10.0);
                    }
                    else
                    {
                        RF3TxPowerValue = Convert.ToString((double)num9 / 10.0);
                    }
                    TimeStamp = Convert.ToString(ScriptOps.Tx1PowerMonAsyncDataParam.TimeStamp);
                }
                else if (GlobalRef.g_RadarDeviceId == 4U)
                {
                    if ((ScriptOps.Tx1PowerMonAsyncDataParam.StatusFlags & 1) == 1)
                    {
                        StatusFlags = Convert.ToString(ScriptOps.Tx1PowerMonAsyncDataParam.StatusFlags);
                    }
                    else
                    {
                        StatusFlags = Convert.ToString(ScriptOps.Tx1PowerMonAsyncDataParam.StatusFlags);
                    }
                    ErrorCode = Convert.ToString(ScriptOps.Tx1PowerMonAsyncDataParam.ErrorCode);
                    profileIndex = Convert.ToString(ScriptOps.Tx1PowerMonAsyncDataParam.ProfileIndex);
                    ushort num10 = (ushort)(ScriptOps.Tx1PowerMonAsyncDataParam.RF12TxPowerValue & 65535U);
                    if (num10 > 32767)
                    {
                        short num11 = (short)((int)num10 - 65536);
                        RF1TxPowerValue = Convert.ToString((double)num11 / 10.0);
                    }
                    else
                    {
                        RF1TxPowerValue = Convert.ToString((double)num10 / 10.0);
                    }
                    ushort num12 = (ushort)(ScriptOps.Tx1PowerMonAsyncDataParam.RF12TxPowerValue >> 16);
                    if (num12 > 32767)
                    {
                        short num11 = (short)((int)num12 - 65536);
                        RF2TxPowerValue = Convert.ToString((double)num11 / 10.0);
                    }
                    else
                    {
                        RF2TxPowerValue = Convert.ToString((double)num12 / 10.0);
                    }
                    ushort num13 = (ushort)(ScriptOps.Tx1PowerMonAsyncDataParam.RF3TxPowerValue & 65535U);
                    if (num13 > 32767)
                    {
                        short num11 = (short)((int)num13 - 65536);
                        RF3TxPowerValue = Convert.ToString((double)num11 / 10.0);
                    }
                    else
                    {
                        RF3TxPowerValue = Convert.ToString((double)num13 / 10.0);
                    }
                    TimeStamp = Convert.ToString(ScriptOps.Tx1PowerMonAsyncDataParam.TimeStamp);
                }
                else if (GlobalRef.g_RadarDeviceId == 8U)
                {
                    if ((ScriptOps.Tx1PowerMonAsyncDataParam.StatusFlags & 1) == 1)
                    {
                        StatusFlags = Convert.ToString(ScriptOps.Tx1PowerMonAsyncDataParam.StatusFlags);
                    }
                    else
                    {
                        StatusFlags = Convert.ToString(ScriptOps.Tx1PowerMonAsyncDataParam.StatusFlags);
                    }
                    ErrorCode = Convert.ToString(ScriptOps.Tx1PowerMonAsyncDataParam.ErrorCode);
                    profileIndex = Convert.ToString(ScriptOps.Tx1PowerMonAsyncDataParam.ProfileIndex);
                    ushort num14 = (ushort)(ScriptOps.Tx1PowerMonAsyncDataParam.RF12TxPowerValue & 65535U);
                    if (num14 > 32767)
                    {
                        short num15 = (short)((int)num14 - 65536);
                        RF1TxPowerValue = Convert.ToString((double)num15 / 10.0);
                    }
                    else
                    {
                        RF1TxPowerValue = Convert.ToString((double)num14 / 10.0);
                    }
                    ushort num16 = (ushort)(ScriptOps.Tx1PowerMonAsyncDataParam.RF12TxPowerValue >> 16);
                    if (num16 > 32767)
                    {
                        short num15 = (short)((int)num16 - 65536);
                        RF2TxPowerValue = Convert.ToString((double)num15 / 10.0);
                    }
                    else
                    {
                        RF2TxPowerValue = Convert.ToString((double)num16 / 10.0);
                    }
                    ushort num17 = (ushort)(ScriptOps.Tx1PowerMonAsyncDataParam.RF3TxPowerValue & 65535U);
                    if (num17 > 32767)
                    {
                        short num15 = (short)((int)num17 - 65536);
                        RF3TxPowerValue = Convert.ToString((double)num15 / 10.0);
                    }
                    else
                    {
                        RF3TxPowerValue = Convert.ToString((double)num17 / 10.0);
                    }
                    TimeStamp = Convert.ToString(ScriptOps.Tx1PowerMonAsyncDataParam.TimeStamp);
                }
            }
            if ((num == 0 && ((GlobalRef.g_CasCadeDeviceSpiConnect & 1U) == 1U || (GlobalRef.g_CasCadeDeviceSpiConnect & 2U) == 2U || (GlobalRef.g_CasCadeDeviceSpiConnect & 4U) == 4U || (GlobalRef.g_CasCadeDeviceSpiConnect & 8U) == 8U)) || GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
            {
                string full_command4 = string.Format("Status: Passed", new object[0]);
                m_GuiManager.RecordLog(6, full_command4);
            }
            else
            {
                string msg = string.Format("Status: Failed, Error Type: {0}", new object[]
                {
                    GetErrorType(num)
                });
                GlobalRef.LuaWrapper.PrintError(msg);
            }
            if (GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
            {
                if (iRs232ConnectDisconnect_impl() == 0 && !GlobalRef.g_NtvRS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
                {
                    m_GuiManager.DllOps.iConnect(1U, 0U);
                    string full_command5 = string.Format("Debug Port Reconnected!", new object[0]);
                    m_GuiManager.RecordLog(9, full_command5);
                    ScriptOps.KeepTrying(2000, new Func<bool>(spare_read));
                }
            }
            else if (GlobalRef.g_CasCadeDeviceSpiConnect == 0U)
            {
                string full_command6 = string.Format("Error Occurred in Port open close", new object[0]);
                m_GuiManager.RecordLog(9, full_command6);
            }
            return num;
        }

        public int UpdateNSetTx2PowerMonitoringConfData(ushort RadarDeviceId, char ProfileIndex, char RF1FreqBitMask, char RF2FreqBitMask, char RF3FreqBitMask, char ReportingMode, double TxPowerAbsoluteErrorThreshold, double TxPowerFlatnessErrorThreshold)
        {
            int result = -1;
            GlobalRef.g_RadarDeviceId = (uint)RadarDeviceId;
            ScriptOps.m_MainForm.AnalogMonConfig.UpdateTX2PowerMonConfigData();
            m_MonTX2PowerConfigParameters.ProfileIndex = ProfileIndex;
            m_MonTX2PowerConfigParameters.RF1FreqBitMask = RF1FreqBitMask;
            m_MonTX2PowerConfigParameters.RF2FreqBitMask = RF2FreqBitMask;
            m_MonTX2PowerConfigParameters.RF3FreqBitMask = RF3FreqBitMask;
            m_MonTX2PowerConfigParameters.ReportingMode = ReportingMode;
            m_MonTX2PowerConfigParameters.TxPowerAbsoluteErrorThreshold = TxPowerAbsoluteErrorThreshold;
            m_MonTX2PowerConfigParameters.TxPowerFlatnessErrorThreshold = TxPowerFlatnessErrorThreshold;
            ScriptOps.m_MainForm.AnalogMonConfig.UpdateTX2PowerMonConfigDataFrmCmdSrc();
            return result;
        }

        public int UpdateNTx2PowerMonitoringConfigurationData_cmd(out string StatusFlags, out string ErrorCode, out string profileIndex, out string RF1TxPowerValue, out string RF2TxPowerValue, out string RF3TxPowerValue, out string TimeStamp)
        {
            StatusFlags = string.Empty;
            ErrorCode = string.Empty;
            profileIndex = string.Empty;
            RF1TxPowerValue = string.Empty;
            RF2TxPowerValue = string.Empty;
            RF3TxPowerValue = string.Empty;
            TimeStamp = string.Empty;
            ScriptOps.m_MainForm.AnalogMonConfig.UpdateTX2PowerMonConfigData();
            return iSetTX2PowerMonConfig_ImplForLuaCommand(out StatusFlags, out ErrorCode, out profileIndex, out RF1TxPowerValue, out RF2TxPowerValue, out RF3TxPowerValue, out TimeStamp);
        }

        private int iSetTX2PowerMonConfig_ImplForLuaCommand(out string StatusFlags, out string ErrorCode, out string profileIndex, out string RF1TxPowerValue, out string RF2TxPowerValue, out string RF3TxPowerValue, out string TimeStamp)
        {
            StatusFlags = string.Empty;
            ErrorCode = string.Empty;
            profileIndex = string.Empty;
            RF1TxPowerValue = string.Empty;
            RF2TxPowerValue = string.Empty;
            RF3TxPowerValue = string.Empty;
            TimeStamp = string.Empty;
            ScriptOps.Tx1Tx2Tx3PowerMonitoringConfiguration1Param.ProfileIndex = 0;
            ScriptOps.Tx1Tx2Tx3PowerMonitoringConfiguration1Param.RFFreqBitMask = 0;
            ScriptOps.Tx1Tx2Tx3PowerMonitoringConfiguration1Param.Reserved = 0;
            ScriptOps.Tx1Tx2Tx3PowerMonitoringConfiguration1Param.ReportingMode = 0;
            ScriptOps.Tx1Tx2Tx3PowerMonitoringConfiguration1Param.TxPowerAbsoluteErrorThreshold = 0;
            ScriptOps.Tx1Tx2Tx3PowerMonitoringConfiguration1Param.TxPowerFlatnessErrorThreshold = 0;
            ScriptOps.Tx1Tx2Tx3PowerMonitoringConfiguration1Param.Reserved2 = 0;
            ScriptOps.Tx1Tx2Tx3PowerMonitoringConfiguration1Param.Reserved3 = 0U;
            ScriptOps.Tx1Tx2Tx3PowerMonitoringConfiguration2Param.ProfileIndex = 0;
            ScriptOps.Tx1Tx2Tx3PowerMonitoringConfiguration2Param.RFFreqBitMask = 0;
            ScriptOps.Tx1Tx2Tx3PowerMonitoringConfiguration2Param.Reserved = 0;
            ScriptOps.Tx1Tx2Tx3PowerMonitoringConfiguration2Param.ReportingMode = 0;
            ScriptOps.Tx1Tx2Tx3PowerMonitoringConfiguration2Param.TxPowerAbsoluteErrorThreshold = 0;
            ScriptOps.Tx1Tx2Tx3PowerMonitoringConfiguration2Param.TxPowerFlatnessErrorThreshold = 0;
            ScriptOps.Tx1Tx2Tx3PowerMonitoringConfiguration2Param.Reserved2 = 0;
            ScriptOps.Tx1Tx2Tx3PowerMonitoringConfiguration2Param.Reserved3 = 0U;
            ScriptOps.Tx1Tx2Tx3PowerMonitoringConfiguration3Param.ProfileIndex = 0;
            ScriptOps.Tx1Tx2Tx3PowerMonitoringConfiguration3Param.RFFreqBitMask = 0;
            ScriptOps.Tx1Tx2Tx3PowerMonitoringConfiguration3Param.Reserved = 0;
            ScriptOps.Tx1Tx2Tx3PowerMonitoringConfiguration3Param.ReportingMode = 0;
            ScriptOps.Tx1Tx2Tx3PowerMonitoringConfiguration3Param.TxPowerAbsoluteErrorThreshold = 0;
            ScriptOps.Tx1Tx2Tx3PowerMonitoringConfiguration3Param.TxPowerFlatnessErrorThreshold = 0;
            ScriptOps.Tx1Tx2Tx3PowerMonitoringConfiguration3Param.Reserved2 = 0;
            ScriptOps.Tx1Tx2Tx3PowerMonitoringConfiguration3Param.Reserved3 = 0U;
            ScriptOps.Tx1Tx2Tx3PowerMonitoringConfiguration2Param.ProfileIndex = (byte)m_MonTX2PowerConfigParameters.ProfileIndex;
            ScriptOps.Tx1Tx2Tx3PowerMonitoringConfiguration2Param.RFFreqBitMask = (byte)(m_MonTX2PowerConfigParameters.RF1FreqBitMask | m_MonTX2PowerConfigParameters.RF2FreqBitMask << 1 | m_MonTX2PowerConfigParameters.RF3FreqBitMask << 2);
            ScriptOps.Tx1Tx2Tx3PowerMonitoringConfiguration2Param.Reserved = 0;
            ScriptOps.Tx1Tx2Tx3PowerMonitoringConfiguration2Param.ReportingMode = (byte)m_MonTX2PowerConfigParameters.ReportingMode;
            ScriptOps.Tx1Tx2Tx3PowerMonitoringConfiguration2Param.TxPowerAbsoluteErrorThreshold = (ushort)(m_MonTX2PowerConfigParameters.TxPowerAbsoluteErrorThreshold * 10.0);
            ScriptOps.Tx1Tx2Tx3PowerMonitoringConfiguration2Param.TxPowerFlatnessErrorThreshold = (ushort)(m_MonTX2PowerConfigParameters.TxPowerFlatnessErrorThreshold * 10.0);
            ScriptOps.Tx1Tx2Tx3PowerMonitoringConfiguration2Param.Reserved2 = 0;
            ScriptOps.Tx1Tx2Tx3PowerMonitoringConfiguration2Param.Reserved3 = 0U;
            GCHandle.Alloc(ScriptOps.Tx1Tx2Tx3PowerMonitoringConfiguration1Param, GCHandleType.Pinned).AddrOfPinnedObject();
            IntPtr pTX2PowerMonitoringConfigurationData = GCHandle.Alloc(ScriptOps.Tx1Tx2Tx3PowerMonitoringConfiguration2Param, GCHandleType.Pinned).AddrOfPinnedObject();
            GCHandle.Alloc(ScriptOps.Tx1Tx2Tx3PowerMonitoringConfiguration3Param, GCHandleType.Pinned).AddrOfPinnedObject();
            ScriptOps.Tx1Tx2Tx3PowerMonitoringConfiguration2NewParam.pTX1PowerMonitoringConfigurationData = IntPtr.Zero;
            ScriptOps.Tx1Tx2Tx3PowerMonitoringConfiguration2NewParam.pTX2PowerMonitoringConfigurationData = pTX2PowerMonitoringConfigurationData;
            ScriptOps.Tx1Tx2Tx3PowerMonitoringConfiguration2NewParam.pTX3PowerMonitoringConfigurationData = IntPtr.Zero;
            IntPtr data = GCHandle.Alloc(ScriptOps.Tx1Tx2Tx3PowerMonitoringConfiguration2NewParam, GCHandleType.Pinned).AddrOfPinnedObject();
            int num;
            if (GlobalRef.g_NtvRS232Connect[(int)GlobalRef.g_RadarDeviceIndex] && GlobalRef.g_CasCadeDeviceSpiConnect == 0U)
            {
                num = m_TsWrapper.Calling_WriteAddr_Single(4294959848U, 1U);
                if (m_GuiManager.DllOps.itempDisconnect(false) == 0)
                {
                    string full_command = string.Format("Debug Port Disconnected", new object[0]);
                    m_GuiManager.RecordLog(0, full_command);
                    if (!GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
                    {
                        iRs232ConnectDisconnect_impl();
                    }
                }
            }
            if (m_RadarDeviceModeConfigParams.NumberOfRadarDevicesDetected <= 1)
            {
                string full_command2 = string.Format("ar1.SetRfTx1PowMonConfig({0}, {1}, {2}, {3}, {4}, {5}, {6})", new object[]
                {
                    m_MonTX2PowerConfigParameters.ProfileIndex,
                    m_MonTX2PowerConfigParameters.RF1FreqBitMask,
                    m_MonTX2PowerConfigParameters.RF2FreqBitMask,
                    m_MonTX2PowerConfigParameters.RF3FreqBitMask,
                    m_MonTX2PowerConfigParameters.ReportingMode,
                    (decimal)Math.Round(m_MonTX2PowerConfigParameters.TxPowerAbsoluteErrorThreshold, 1),
                    (decimal)Math.Round(m_MonTX2PowerConfigParameters.TxPowerFlatnessErrorThreshold, 1)
                });
                m_GuiManager.RecordLog(6, full_command2);
            }
            else
            {
                string full_command3 = string.Format("ar1.SetRfTx1PowMonConfig_mult({0}, {1}, {2}, {3}, {4}, {5}, {6}, {7})", new object[]
                {
                    GlobalRef.g_RadarDeviceId,
                    m_MonTX2PowerConfigParameters.ProfileIndex,
                    m_MonTX2PowerConfigParameters.RF1FreqBitMask,
                    m_MonTX2PowerConfigParameters.RF2FreqBitMask,
                    m_MonTX2PowerConfigParameters.RF3FreqBitMask,
                    m_MonTX2PowerConfigParameters.ReportingMode,
                    (decimal)Math.Round(m_MonTX2PowerConfigParameters.TxPowerAbsoluteErrorThreshold, 1),
                    (decimal)Math.Round(m_MonTX2PowerConfigParameters.TxPowerFlatnessErrorThreshold, 1)
                });
                m_GuiManager.RecordLog(6, full_command3);
            }
            GlobalRef.g_Tx2PowerMon = 1U;
            num = Imports.RadarLinkImpl_RfTxPowrMonConfig((byte)GlobalRef.g_RadarDeviceId, data);
            while (GlobalRef.g_Tx2PowerMon == 0U)
            {
                Thread.Sleep(100);
            }
            if (num == 0)
            {
                if (GlobalRef.g_RadarDeviceId == 1U)
                {
                    if ((ScriptOps.Tx2PowerMonAsyncDataParam.StatusFlags & 1) == 1)
                    {
                        StatusFlags = Convert.ToString(ScriptOps.Tx2PowerMonAsyncDataParam.StatusFlags);
                    }
                    else
                    {
                        StatusFlags = Convert.ToString(ScriptOps.Tx2PowerMonAsyncDataParam.StatusFlags);
                    }
                    ErrorCode = Convert.ToString(ScriptOps.Tx2PowerMonAsyncDataParam.ErrorCode);
                    profileIndex = Convert.ToString(ScriptOps.Tx2PowerMonAsyncDataParam.ProfileIndex);
                    ushort num2 = (ushort)(ScriptOps.Tx2PowerMonAsyncDataParam.RF12TxPowerValue & 65535U);
                    if (num2 > 32767)
                    {
                        short num3 = (short)((int)num2 - 65536);
                        RF1TxPowerValue = Convert.ToString((double)num3 / 10.0);
                    }
                    else
                    {
                        RF1TxPowerValue = Convert.ToString((double)num2 / 10.0);
                    }
                    ushort num4 = (ushort)(ScriptOps.Tx2PowerMonAsyncDataParam.RF12TxPowerValue >> 16);
                    if (num4 > 32767)
                    {
                        short num3 = (short)((int)num4 - 65536);
                        RF2TxPowerValue = Convert.ToString((double)num3 / 10.0);
                    }
                    else
                    {
                        RF2TxPowerValue = Convert.ToString((double)num4 / 10.0);
                    }
                    ushort num5 = (ushort)(ScriptOps.Tx2PowerMonAsyncDataParam.RF3TxPowerValue & 65535U);
                    if (num5 > 32767)
                    {
                        short num3 = (short)((int)num5 - 65536);
                        RF3TxPowerValue = Convert.ToString((double)num3 / 10.0);
                    }
                    else
                    {
                        RF3TxPowerValue = Convert.ToString((double)num5 / 10.0);
                    }
                    TimeStamp = Convert.ToString(ScriptOps.Tx2PowerMonAsyncDataParam.TimeStamp);
                }
                else if (GlobalRef.g_RadarDeviceId == 2U)
                {
                    if ((ScriptOps.Tx2PowerMonAsyncDataParam.StatusFlags & 1) == 1)
                    {
                        StatusFlags = Convert.ToString(ScriptOps.Tx2PowerMonAsyncDataParam.StatusFlags);
                    }
                    else
                    {
                        StatusFlags = Convert.ToString(ScriptOps.Tx2PowerMonAsyncDataParam.StatusFlags);
                    }
                    ErrorCode = Convert.ToString(ScriptOps.Tx2PowerMonAsyncDataParam.ErrorCode);
                    profileIndex = Convert.ToString(ScriptOps.Tx2PowerMonAsyncDataParam.ProfileIndex);
                    ushort num6 = (ushort)(ScriptOps.Tx2PowerMonAsyncDataParam.RF12TxPowerValue & 65535U);
                    if (num6 > 32767)
                    {
                        short num3 = (short)((int)num6 - 65536);
                        RF1TxPowerValue = Convert.ToString((double)num3 / 10.0);
                    }
                    else
                    {
                        RF1TxPowerValue = Convert.ToString((double)num6 / 10.0);
                    }
                    ushort num7 = (ushort)(ScriptOps.Tx2PowerMonAsyncDataParam.RF12TxPowerValue >> 16);
                    if (num7 > 32767)
                    {
                        short num3 = (short)((int)num7 - 65536);
                        RF2TxPowerValue = Convert.ToString((double)num3 / 10.0);
                    }
                    else
                    {
                        RF2TxPowerValue = Convert.ToString((double)num7 / 10.0);
                    }
                    ushort num8 = (ushort)(ScriptOps.Tx2PowerMonAsyncDataParam.RF3TxPowerValue & 65535U);
                    if (num8 > 32767)
                    {
                        short num3 = (short)((int)num8 - 65536);
                        RF3TxPowerValue = Convert.ToString((double)num3 / 10.0);
                    }
                    else
                    {
                        RF3TxPowerValue = Convert.ToString((double)num8 / 10.0);
                    }
                    TimeStamp = Convert.ToString(ScriptOps.Tx2PowerMonAsyncDataParam.TimeStamp);
                }
                else if (GlobalRef.g_RadarDeviceId == 4U)
                {
                    if ((ScriptOps.Tx2PowerMonAsyncDataParam.StatusFlags & 1) == 1)
                    {
                        StatusFlags = Convert.ToString(ScriptOps.Tx2PowerMonAsyncDataParam.StatusFlags);
                    }
                    else
                    {
                        StatusFlags = Convert.ToString(ScriptOps.Tx2PowerMonAsyncDataParam.StatusFlags);
                    }
                    ErrorCode = Convert.ToString(ScriptOps.Tx2PowerMonAsyncDataParam.ErrorCode);
                    profileIndex = Convert.ToString(ScriptOps.Tx2PowerMonAsyncDataParam.ProfileIndex);
                    ushort num9 = (ushort)(ScriptOps.Tx2PowerMonAsyncDataParam.RF12TxPowerValue & 65535U);
                    if (num9 > 32767)
                    {
                        short num3 = (short)((int)num9 - 65536);
                        RF1TxPowerValue = Convert.ToString((double)num3 / 10.0);
                    }
                    else
                    {
                        RF1TxPowerValue = Convert.ToString((double)num9 / 10.0);
                    }
                    ushort num10 = (ushort)(ScriptOps.Tx2PowerMonAsyncDataParam.RF12TxPowerValue >> 16);
                    if (num10 > 32767)
                    {
                        short num3 = (short)((int)num10 - 65536);
                        RF2TxPowerValue = Convert.ToString((double)num3 / 10.0);
                    }
                    else
                    {
                        RF2TxPowerValue = Convert.ToString((double)num10 / 10.0);
                    }
                    ushort num11 = (ushort)(ScriptOps.Tx2PowerMonAsyncDataParam.RF3TxPowerValue & 65535U);
                    if (num11 > 32767)
                    {
                        short num3 = (short)((int)num11 - 65536);
                        RF3TxPowerValue = Convert.ToString((double)num3 / 10.0);
                    }
                    else
                    {
                        RF3TxPowerValue = Convert.ToString((double)num11 / 10.0);
                    }
                    TimeStamp = Convert.ToString(ScriptOps.Tx2PowerMonAsyncDataParam.TimeStamp);
                }
                else if (GlobalRef.g_RadarDeviceId == 8U)
                {
                    if ((ScriptOps.Tx2PowerMonAsyncDataParam.StatusFlags & 1) == 1)
                    {
                        StatusFlags = Convert.ToString(ScriptOps.Tx2PowerMonAsyncDataParam.StatusFlags);
                    }
                    else
                    {
                        StatusFlags = Convert.ToString(ScriptOps.Tx2PowerMonAsyncDataParam.StatusFlags);
                    }
                    ErrorCode = Convert.ToString(ScriptOps.Tx2PowerMonAsyncDataParam.ErrorCode);
                    profileIndex = Convert.ToString(ScriptOps.Tx2PowerMonAsyncDataParam.ProfileIndex);
                    ushort num12 = (ushort)(ScriptOps.Tx2PowerMonAsyncDataParam.RF12TxPowerValue & 65535U);
                    if (num12 > 32767)
                    {
                        short num3 = (short)((int)num12 - 65536);
                        RF1TxPowerValue = Convert.ToString((double)num3 / 10.0);
                    }
                    else
                    {
                        RF1TxPowerValue = Convert.ToString((double)num12 / 10.0);
                    }
                    ushort num13 = (ushort)(ScriptOps.Tx2PowerMonAsyncDataParam.RF12TxPowerValue >> 16);
                    if (num13 > 32767)
                    {
                        short num3 = (short)((int)num13 - 65536);
                        RF2TxPowerValue = Convert.ToString((double)num3 / 10.0);
                    }
                    else
                    {
                        RF2TxPowerValue = Convert.ToString((double)num13 / 10.0);
                    }
                    ushort num14 = (ushort)(ScriptOps.Tx2PowerMonAsyncDataParam.RF3TxPowerValue & 65535U);
                    if (num14 > 32767)
                    {
                        short num3 = (short)((int)num14 - 65536);
                        RF3TxPowerValue = Convert.ToString((double)num3 / 10.0);
                    }
                    else
                    {
                        RF3TxPowerValue = Convert.ToString((double)num14 / 10.0);
                    }
                    TimeStamp = Convert.ToString(ScriptOps.Tx2PowerMonAsyncDataParam.TimeStamp);
                }
            }
            if ((num == 0 && ((GlobalRef.g_CasCadeDeviceSpiConnect & 1U) == 1U || (GlobalRef.g_CasCadeDeviceSpiConnect & 2U) == 2U || (GlobalRef.g_CasCadeDeviceSpiConnect & 4U) == 4U || (GlobalRef.g_CasCadeDeviceSpiConnect & 8U) == 8U)) || GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
            {
                string full_command4 = string.Format("Status: Passed", new object[0]);
                m_GuiManager.RecordLog(6, full_command4);
            }
            else
            {
                string msg = string.Format("Status: Failed, Error Type: {0}", new object[]
                {
                    GetErrorType(num)
                });
                GlobalRef.LuaWrapper.PrintError(msg);
            }
            if (GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
            {
                if (iRs232ConnectDisconnect_impl() == 0 && !GlobalRef.g_NtvRS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
                {
                    m_GuiManager.DllOps.iConnect(1U, 0U);
                    string full_command5 = string.Format("Debug Port Reconnected!", new object[0]);
                    m_GuiManager.RecordLog(9, full_command5);
                    ScriptOps.KeepTrying(2000, new Func<bool>(spare_read));
                }
            }
            else if (GlobalRef.g_CasCadeDeviceSpiConnect == 0U)
            {
                string full_command6 = string.Format("Error Occurred in Port open close", new object[0]);
                m_GuiManager.RecordLog(9, full_command6);
            }
            return num;
        }

        public int UpdateNSetTx3PowerMonitoringConfData(ushort RadarDeviceId, char ProfileIndex, char RF1FreqBitMask, char RF2FreqBitMask, char RF3FreqBitMask, char ReportingMode, double TxPowerAbsoluteErrorThreshold, double TxPowerFlatnessErrorThreshold)
        {
            int result = -1;
            GlobalRef.g_RadarDeviceId = (uint)RadarDeviceId;
            ScriptOps.m_MainForm.AnalogMonConfig.UpdateTX3PowerMonConfigData();
            m_MonTX3PowerConfigParameters.ProfileIndex = ProfileIndex;
            m_MonTX3PowerConfigParameters.RF1FreqBitMask = RF1FreqBitMask;
            m_MonTX3PowerConfigParameters.RF2FreqBitMask = RF2FreqBitMask;
            m_MonTX3PowerConfigParameters.RF3FreqBitMask = RF3FreqBitMask;
            m_MonTX3PowerConfigParameters.ReportingMode = ReportingMode;
            m_MonTX3PowerConfigParameters.TxPowerAbsoluteErrorThreshold = TxPowerAbsoluteErrorThreshold;
            m_MonTX3PowerConfigParameters.TxPowerFlatnessErrorThreshold = TxPowerFlatnessErrorThreshold;
            ScriptOps.m_MainForm.AnalogMonConfig.UpdateTX3PowerMonConfigDataFrmCmdSrc();
            return result;
        }

        public int UpdateNTx3PowerMonitoringConfigurationData_cmd(out string StatusFlags, out string ErrorCode, out string profileIndex, out string RF1TxPowerValue, out string RF2TxPowerValue, out string RF3TxPowerValue, out string TimeStamp)
        {
            StatusFlags = string.Empty;
            ErrorCode = string.Empty;
            profileIndex = string.Empty;
            RF1TxPowerValue = string.Empty;
            RF2TxPowerValue = string.Empty;
            RF3TxPowerValue = string.Empty;
            TimeStamp = string.Empty;
            ScriptOps.m_MainForm.AnalogMonConfig.UpdateTX3PowerMonConfigData();
            return iSetTX3PowerMonConfig_ImplForLuaCommand(out StatusFlags, out ErrorCode, out profileIndex, out RF1TxPowerValue, out RF2TxPowerValue, out RF3TxPowerValue, out TimeStamp);
        }

        private int iSetTX3PowerMonConfig_ImplForLuaCommand(out string StatusFlags, out string ErrorCode, out string profileIndex, out string RF1TxPowerValue, out string RF2TxPowerValue, out string RF3TxPowerValue, out string TimeStamp)
        {
            StatusFlags = string.Empty;
            ErrorCode = string.Empty;
            profileIndex = string.Empty;
            RF1TxPowerValue = string.Empty;
            RF2TxPowerValue = string.Empty;
            RF3TxPowerValue = string.Empty;
            TimeStamp = string.Empty;
            ScriptOps.Tx1Tx2Tx3PowerMonitoringConfiguration1Param.ProfileIndex = 0;
            ScriptOps.Tx1Tx2Tx3PowerMonitoringConfiguration1Param.RFFreqBitMask = 0;
            ScriptOps.Tx1Tx2Tx3PowerMonitoringConfiguration1Param.Reserved = 0;
            ScriptOps.Tx1Tx2Tx3PowerMonitoringConfiguration1Param.ReportingMode = 0;
            ScriptOps.Tx1Tx2Tx3PowerMonitoringConfiguration1Param.TxPowerAbsoluteErrorThreshold = 0;
            ScriptOps.Tx1Tx2Tx3PowerMonitoringConfiguration1Param.TxPowerFlatnessErrorThreshold = 0;
            ScriptOps.Tx1Tx2Tx3PowerMonitoringConfiguration1Param.Reserved2 = 0;
            ScriptOps.Tx1Tx2Tx3PowerMonitoringConfiguration1Param.Reserved3 = 0U;
            ScriptOps.Tx1Tx2Tx3PowerMonitoringConfiguration2Param.ProfileIndex = 0;
            ScriptOps.Tx1Tx2Tx3PowerMonitoringConfiguration2Param.RFFreqBitMask = 0;
            ScriptOps.Tx1Tx2Tx3PowerMonitoringConfiguration2Param.Reserved = 0;
            ScriptOps.Tx1Tx2Tx3PowerMonitoringConfiguration2Param.ReportingMode = 0;
            ScriptOps.Tx1Tx2Tx3PowerMonitoringConfiguration2Param.TxPowerAbsoluteErrorThreshold = 0;
            ScriptOps.Tx1Tx2Tx3PowerMonitoringConfiguration2Param.TxPowerFlatnessErrorThreshold = 0;
            ScriptOps.Tx1Tx2Tx3PowerMonitoringConfiguration2Param.Reserved2 = 0;
            ScriptOps.Tx1Tx2Tx3PowerMonitoringConfiguration2Param.Reserved3 = 0U;
            ScriptOps.Tx1Tx2Tx3PowerMonitoringConfiguration3Param.ProfileIndex = 0;
            ScriptOps.Tx1Tx2Tx3PowerMonitoringConfiguration3Param.RFFreqBitMask = 0;
            ScriptOps.Tx1Tx2Tx3PowerMonitoringConfiguration3Param.Reserved = 0;
            ScriptOps.Tx1Tx2Tx3PowerMonitoringConfiguration3Param.ReportingMode = 0;
            ScriptOps.Tx1Tx2Tx3PowerMonitoringConfiguration3Param.TxPowerAbsoluteErrorThreshold = 0;
            ScriptOps.Tx1Tx2Tx3PowerMonitoringConfiguration3Param.TxPowerFlatnessErrorThreshold = 0;
            ScriptOps.Tx1Tx2Tx3PowerMonitoringConfiguration3Param.Reserved2 = 0;
            ScriptOps.Tx1Tx2Tx3PowerMonitoringConfiguration3Param.Reserved3 = 0U;
            ScriptOps.Tx1Tx2Tx3PowerMonitoringConfiguration3Param.ProfileIndex = (byte)m_MonTX3PowerConfigParameters.ProfileIndex;
            ScriptOps.Tx1Tx2Tx3PowerMonitoringConfiguration3Param.RFFreqBitMask = (byte)(m_MonTX3PowerConfigParameters.RF1FreqBitMask | m_MonTX3PowerConfigParameters.RF2FreqBitMask << 1 | m_MonTX3PowerConfigParameters.RF3FreqBitMask << 2);
            ScriptOps.Tx1Tx2Tx3PowerMonitoringConfiguration3Param.Reserved = 0;
            ScriptOps.Tx1Tx2Tx3PowerMonitoringConfiguration3Param.ReportingMode = (byte)m_MonTX3PowerConfigParameters.ReportingMode;
            ScriptOps.Tx1Tx2Tx3PowerMonitoringConfiguration3Param.TxPowerAbsoluteErrorThreshold = (ushort)(m_MonTX3PowerConfigParameters.TxPowerAbsoluteErrorThreshold * 10.0);
            ScriptOps.Tx1Tx2Tx3PowerMonitoringConfiguration3Param.TxPowerFlatnessErrorThreshold = (ushort)(m_MonTX3PowerConfigParameters.TxPowerFlatnessErrorThreshold * 10.0);
            ScriptOps.Tx1Tx2Tx3PowerMonitoringConfiguration3Param.Reserved2 = 0;
            ScriptOps.Tx1Tx2Tx3PowerMonitoringConfiguration3Param.Reserved3 = 0U;
            GCHandle.Alloc(ScriptOps.Tx1Tx2Tx3PowerMonitoringConfiguration1Param, GCHandleType.Pinned).AddrOfPinnedObject();
            GCHandle.Alloc(ScriptOps.Tx1Tx2Tx3PowerMonitoringConfiguration2Param, GCHandleType.Pinned).AddrOfPinnedObject();
            IntPtr pTX3PowerMonitoringConfigurationData = GCHandle.Alloc(ScriptOps.Tx1Tx2Tx3PowerMonitoringConfiguration3Param, GCHandleType.Pinned).AddrOfPinnedObject();
            ScriptOps.Tx1Tx2Tx3PowerMonitoringConfiguration2NewParam.pTX1PowerMonitoringConfigurationData = IntPtr.Zero;
            ScriptOps.Tx1Tx2Tx3PowerMonitoringConfiguration2NewParam.pTX2PowerMonitoringConfigurationData = IntPtr.Zero;
            ScriptOps.Tx1Tx2Tx3PowerMonitoringConfiguration2NewParam.pTX3PowerMonitoringConfigurationData = pTX3PowerMonitoringConfigurationData;
            IntPtr data = GCHandle.Alloc(ScriptOps.Tx1Tx2Tx3PowerMonitoringConfiguration2NewParam, GCHandleType.Pinned).AddrOfPinnedObject();
            int num;
            if (GlobalRef.g_NtvRS232Connect[(int)GlobalRef.g_RadarDeviceIndex] && GlobalRef.g_CasCadeDeviceSpiConnect == 0U)
            {
                num = m_TsWrapper.Calling_WriteAddr_Single(4294959848U, 1U);
                if (m_GuiManager.DllOps.itempDisconnect(false) == 0)
                {
                    string full_command = string.Format("Debug Port Disconnected", new object[0]);
                    m_GuiManager.RecordLog(0, full_command);
                    if (!GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
                    {
                        iRs232ConnectDisconnect_impl();
                    }
                }
            }
            if (m_RadarDeviceModeConfigParams.NumberOfRadarDevicesDetected <= 1)
            {
                string full_command2 = string.Format("ar1.SetRfTx2PowMonConfig({0}, {1}, {2}, {3}, {4}, {5}, {6})", new object[]
                {
                    m_MonTX3PowerConfigParameters.ProfileIndex,
                    m_MonTX3PowerConfigParameters.RF1FreqBitMask,
                    m_MonTX3PowerConfigParameters.RF2FreqBitMask,
                    m_MonTX3PowerConfigParameters.RF3FreqBitMask,
                    m_MonTX3PowerConfigParameters.ReportingMode,
                    (decimal)Math.Round(m_MonTX3PowerConfigParameters.TxPowerAbsoluteErrorThreshold, 1),
                    (decimal)Math.Round(m_MonTX3PowerConfigParameters.TxPowerFlatnessErrorThreshold, 1)
                });
                m_GuiManager.RecordLog(6, full_command2);
            }
            else
            {
                string full_command3 = string.Format("ar1.SetRfTx2PowMonConfig_mult({0}, {1}, {2}, {3}, {4}, {5}, {6}, {7})", new object[]
                {
                    GlobalRef.g_RadarDeviceId,
                    m_MonTX3PowerConfigParameters.ProfileIndex,
                    m_MonTX3PowerConfigParameters.RF1FreqBitMask,
                    m_MonTX3PowerConfigParameters.RF2FreqBitMask,
                    m_MonTX3PowerConfigParameters.RF3FreqBitMask,
                    m_MonTX3PowerConfigParameters.ReportingMode,
                    (decimal)Math.Round(m_MonTX3PowerConfigParameters.TxPowerAbsoluteErrorThreshold, 1),
                    (decimal)Math.Round(m_MonTX3PowerConfigParameters.TxPowerFlatnessErrorThreshold, 1)
                });
                m_GuiManager.RecordLog(6, full_command3);
            }
            GlobalRef.g_Tx3PowerMon = 1U;
            num = Imports.RadarLinkImpl_RfTxPowrMonConfig((byte)GlobalRef.g_RadarDeviceId, data);
            while (GlobalRef.g_Tx3PowerMon == 0U)
            {
                Thread.Sleep(100);
            }
            if (num == 0)
            {
                if (GlobalRef.g_RadarDeviceId == 1U)
                {
                    if ((ScriptOps.Tx3PowerMonAsyncDataParam.StatusFlags & 1) == 1)
                    {
                        StatusFlags = Convert.ToString(ScriptOps.Tx3PowerMonAsyncDataParam.StatusFlags);
                    }
                    else
                    {
                        StatusFlags = Convert.ToString(ScriptOps.Tx3PowerMonAsyncDataParam.StatusFlags);
                    }
                    ErrorCode = Convert.ToString(ScriptOps.Tx3PowerMonAsyncDataParam.ErrorCode);
                    profileIndex = Convert.ToString(ScriptOps.Tx3PowerMonAsyncDataParam.ProfileIndex);
                    ushort num2 = (ushort)(ScriptOps.Tx3PowerMonAsyncDataParam.RF12TxPowerValue & 65535U);
                    if (num2 > 32767)
                    {
                        short num3 = (short)((int)num2 - 65536);
                        RF1TxPowerValue = Convert.ToString((double)num3 / 10.0);
                    }
                    else
                    {
                        RF1TxPowerValue = Convert.ToString((double)num2 / 10.0);
                    }
                    ushort num4 = (ushort)(ScriptOps.Tx3PowerMonAsyncDataParam.RF12TxPowerValue >> 16);
                    if (num4 > 32767)
                    {
                        short num3 = (short)((int)num4 - 65536);
                        RF2TxPowerValue = Convert.ToString((double)num3 / 10.0);
                    }
                    else
                    {
                        RF2TxPowerValue = Convert.ToString((double)num4 / 10.0);
                    }
                    ushort num5 = (ushort)(ScriptOps.Tx3PowerMonAsyncDataParam.RF3TxPowerValue & 65535U);
                    if (num5 > 32767)
                    {
                        short num3 = (short)((int)num5 - 65536);
                        RF3TxPowerValue = Convert.ToString((double)num3 / 10.0);
                    }
                    else
                    {
                        RF3TxPowerValue = Convert.ToString((double)num5 / 10.0);
                    }
                    TimeStamp = Convert.ToString(ScriptOps.Tx3PowerMonAsyncDataParam.TimeStamp);
                }
                else if (GlobalRef.g_RadarDeviceId == 2U)
                {
                    if ((ScriptOps.Tx3PowerMonAsyncDataParam.StatusFlags & 1) == 1)
                    {
                        StatusFlags = Convert.ToString(ScriptOps.Tx3PowerMonAsyncDataParam.StatusFlags);
                    }
                    else
                    {
                        StatusFlags = Convert.ToString(ScriptOps.Tx3PowerMonAsyncDataParam.StatusFlags);
                    }
                    ErrorCode = Convert.ToString(ScriptOps.Tx3PowerMonAsyncDataParam.ErrorCode);
                    profileIndex = Convert.ToString(ScriptOps.Tx3PowerMonAsyncDataParam.ProfileIndex);
                    ushort num6 = (ushort)(ScriptOps.Tx3PowerMonAsyncDataParam.RF12TxPowerValue & 65535U);
                    if (num6 > 32767)
                    {
                        short num3 = (short)((int)num6 - 65536);
                        RF1TxPowerValue = Convert.ToString((double)num3 / 10.0);
                    }
                    else
                    {
                        RF1TxPowerValue = Convert.ToString((double)num6 / 10.0);
                    }
                    ushort num7 = (ushort)(ScriptOps.Tx3PowerMonAsyncDataParam.RF12TxPowerValue >> 16);
                    if (num7 > 32767)
                    {
                        short num3 = (short)((int)num7 - 65536);
                        RF2TxPowerValue = Convert.ToString((double)num3 / 10.0);
                    }
                    else
                    {
                        RF2TxPowerValue = Convert.ToString((double)num7 / 10.0);
                    }
                    ushort num8 = (ushort)(ScriptOps.Tx3PowerMonAsyncDataParam.RF3TxPowerValue & 65535U);
                    if (num8 > 32767)
                    {
                        short num3 = (short)((int)num8 - 65536);
                        RF3TxPowerValue = Convert.ToString((double)num3 / 10.0);
                    }
                    else
                    {
                        RF3TxPowerValue = Convert.ToString((double)num8 / 10.0);
                    }
                    TimeStamp = Convert.ToString(ScriptOps.Tx3PowerMonAsyncDataParam.TimeStamp);
                }
                else if (GlobalRef.g_RadarDeviceId == 4U)
                {
                    if ((ScriptOps.Tx3PowerMonAsyncDataParam.StatusFlags & 1) == 1)
                    {
                        StatusFlags = Convert.ToString(ScriptOps.Tx3PowerMonAsyncDataParam.StatusFlags);
                    }
                    else
                    {
                        StatusFlags = Convert.ToString(ScriptOps.Tx3PowerMonAsyncDataParam.StatusFlags);
                    }
                    ErrorCode = Convert.ToString(ScriptOps.Tx3PowerMonAsyncDataParam.ErrorCode);
                    profileIndex = Convert.ToString(ScriptOps.Tx3PowerMonAsyncDataParam.ProfileIndex);
                    ushort num9 = (ushort)(ScriptOps.Tx3PowerMonAsyncDataParam.RF12TxPowerValue & 65535U);
                    if (num9 > 32767)
                    {
                        short num3 = (short)((int)num9 - 65536);
                        RF1TxPowerValue = Convert.ToString((double)num3 / 10.0);
                    }
                    else
                    {
                        RF1TxPowerValue = Convert.ToString((double)num9 / 10.0);
                    }
                    ushort num10 = (ushort)(ScriptOps.Tx3PowerMonAsyncDataParam.RF12TxPowerValue >> 16);
                    if (num10 > 32767)
                    {
                        short num3 = (short)((int)num10 - 65536);
                        RF2TxPowerValue = Convert.ToString((double)num3 / 10.0);
                    }
                    else
                    {
                        RF2TxPowerValue = Convert.ToString((double)num10 / 10.0);
                    }
                    ushort num11 = (ushort)(ScriptOps.Tx3PowerMonAsyncDataParam.RF3TxPowerValue & 65535U);
                    if (num11 > 32767)
                    {
                        short num3 = (short)((int)num11 - 65536);
                        RF3TxPowerValue = Convert.ToString((double)num3 / 10.0);
                    }
                    else
                    {
                        RF3TxPowerValue = Convert.ToString((double)num11 / 10.0);
                    }
                    TimeStamp = Convert.ToString(ScriptOps.Tx3PowerMonAsyncDataParam.TimeStamp);
                }
                else if (GlobalRef.g_RadarDeviceId == 8U)
                {
                    if ((ScriptOps.Tx3PowerMonAsyncDataParam.StatusFlags & 1) == 1)
                    {
                        StatusFlags = Convert.ToString(ScriptOps.Tx3PowerMonAsyncDataParam.StatusFlags);
                    }
                    else
                    {
                        StatusFlags = Convert.ToString(ScriptOps.Tx3PowerMonAsyncDataParam.StatusFlags);
                    }
                    ErrorCode = Convert.ToString(ScriptOps.Tx3PowerMonAsyncDataParam.ErrorCode);
                    profileIndex = Convert.ToString(ScriptOps.Tx3PowerMonAsyncDataParam.ProfileIndex);
                    ushort num12 = (ushort)(ScriptOps.Tx3PowerMonAsyncDataParam.RF12TxPowerValue & 65535U);
                    if (num12 > 32767)
                    {
                        short num3 = (short)((int)num12 - 65536);
                        RF1TxPowerValue = Convert.ToString((double)num3 / 10.0);
                    }
                    else
                    {
                        RF1TxPowerValue = Convert.ToString((double)num12 / 10.0);
                    }
                    ushort num13 = (ushort)(ScriptOps.Tx3PowerMonAsyncDataParam.RF12TxPowerValue >> 16);
                    if (num13 > 32767)
                    {
                        short num3 = (short)((int)num13 - 65536);
                        RF2TxPowerValue = Convert.ToString((double)num3 / 10.0);
                    }
                    else
                    {
                        RF2TxPowerValue = Convert.ToString((double)num13 / 10.0);
                    }
                    ushort num14 = (ushort)(ScriptOps.Tx3PowerMonAsyncDataParam.RF3TxPowerValue & 65535U);
                    if (num14 > 32767)
                    {
                        short num3 = (short)((int)num14 - 65536);
                        RF3TxPowerValue = Convert.ToString((double)num3 / 10.0);
                    }
                    else
                    {
                        RF3TxPowerValue = Convert.ToString((double)num14 / 10.0);
                    }
                    TimeStamp = Convert.ToString(ScriptOps.Tx3PowerMonAsyncDataParam.TimeStamp);
                }
            }
            if ((num == 0 && ((GlobalRef.g_CasCadeDeviceSpiConnect & 1U) == 1U || (GlobalRef.g_CasCadeDeviceSpiConnect & 2U) == 2U || (GlobalRef.g_CasCadeDeviceSpiConnect & 4U) == 4U || (GlobalRef.g_CasCadeDeviceSpiConnect & 8U) == 8U)) || GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
            {
                string full_command4 = string.Format("Status: Passed", new object[0]);
                m_GuiManager.RecordLog(6, full_command4);
            }
            else
            {
                string msg = string.Format("Status: Failed, Error Type: {0}", new object[]
                {
                    GetErrorType(num)
                });
                GlobalRef.LuaWrapper.PrintError(msg);
            }
            if (GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
            {
                if (iRs232ConnectDisconnect_impl() == 0 && !GlobalRef.g_NtvRS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
                {
                    m_GuiManager.DllOps.iConnect(1U, 0U);
                    string full_command5 = string.Format("Debug Port Reconnected!", new object[0]);
                    m_GuiManager.RecordLog(9, full_command5);
                    ScriptOps.KeepTrying(2000, new Func<bool>(spare_read));
                }
            }
            else if (GlobalRef.g_CasCadeDeviceSpiConnect == 0U)
            {
                string full_command6 = string.Format("Error Occurred in Port open close", new object[0]);
                m_GuiManager.RecordLog(9, full_command6);
            }
            return num;
        }

        public int UpdateNSetMSSLatentFaultTestMonitoringConfData(ushort RadarDeviceId, uint TestEna1, uint TestEna2, char ReportingMode, char TestMode, ushort Reserved)
        {
            int result = -1;
            GlobalRef.g_RadarDeviceId = (uint)RadarDeviceId;
            ScriptOps.m_MainForm.MSSMonitoring.UpdateMonitoringMSSRFDigitalSysLatentFaultConfigData();
            m_MSSLatentFaultTestConfigParameters.f000322 = (char)(TestEna1 & 1U);
            m_MSSLatentFaultTestConfigParameters.DMAMOn = (char)(TestEna1 >> 1 & 1U);
            m_MSSLatentFaultTestConfigParameters.RTIMOn = (char)(TestEna1 >> 3 & 1U);
            m_MSSLatentFaultTestConfigParameters.ESMMOn = (char)(TestEna1 >> 4 & 1U);
            m_MSSLatentFaultTestConfigParameters.f000323 = (char)(TestEna1 >> 5 & 1U);
            m_MSSLatentFaultTestConfigParameters.CRCMOn = (char)(TestEna1 >> 6 & 1U);
            m_MSSLatentFaultTestConfigParameters.VIMMon = (char)(TestEna1 >> 7 & 1U);
            m_MSSLatentFaultTestConfigParameters.MailBoxMon = (char)(TestEna1 >> 9 & 1U);
            m_MSSLatentFaultTestConfigParameters.LVDSPatternGenMon = (char)(TestEna1 >> 10 & 1U);
            m_MSSLatentFaultTestConfigParameters.CSI2PatternGenMon = (char)(TestEna1 >> 11 & 1U);
            m_MSSLatentFaultTestConfigParameters.GenNErrorMon = (char)(TestEna1 >> 12 & 1U);
            m_MSSLatentFaultTestConfigParameters.MibSPISingleBitErrorMon = (char)(TestEna1 >> 13 & 1U);
            m_MSSLatentFaultTestConfigParameters.MibSPIDoubleBitErrorMon = (char)(TestEna1 >> 14 & 1U);
            m_MSSLatentFaultTestConfigParameters.DMAParityError = (char)(TestEna1 >> 15 & 1U);
            m_MSSLatentFaultTestConfigParameters.TCMARamSingleBitErrorMon = (char)(TestEna1 >> 16 & 1U);
            m_MSSLatentFaultTestConfigParameters.TCMBRamSingleBitErrorMon = (char)(TestEna1 >> 17 & 1U);
            m_MSSLatentFaultTestConfigParameters.TCMARamDoubleBitErrorMon = (char)(TestEna1 >> 18 & 1U);
            m_MSSLatentFaultTestConfigParameters.TCMBRamDoubleBitErrorMon = (char)(TestEna1 >> 19 & 1U);
            m_MSSLatentFaultTestConfigParameters.TCMARamParityErrorMon = (char)(TestEna1 >> 20 & 1U);
            m_MSSLatentFaultTestConfigParameters.TCMBRamParityErrorMon = (char)(TestEna1 >> 21 & 1U);
            m_MSSLatentFaultTestConfigParameters.f000324 = (char)(TestEna1 >> 24 & 1U);
            m_MSSLatentFaultTestConfigParameters.MSSMailBoxSingleBitErrorMon = (char)(TestEna1 >> 25 & 1U);
            m_MSSLatentFaultTestConfigParameters.MSSMailBoxDoubleBitErrorMon = (char)(TestEna1 >> 26 & 1U);
            m_MSSLatentFaultTestConfigParameters.BSSMailBoxSingleBitErrorMon = (char)(TestEna1 >> 27 & 1U);
            m_MSSLatentFaultTestConfigParameters.BSSMailBoxDoubleBitErrorMon = (char)(TestEna1 >> 28 & 1U);
            m_MSSLatentFaultTestConfigParameters.f000325 = (char)(TestEna1 >> 29 & 1U);
            m_MSSLatentFaultTestConfigParameters.EDMAParityMon = (char)(TestEna1 >> 30 & 1U);
            m_MSSLatentFaultTestConfigParameters.CSI2ParityMon = (char)(TestEna1 >> 31 & 1U);
            m_MSSLatentFaultTestConfigParameters.DCCSelfTest = (char)(TestEna2 & 1U);
            m_MSSLatentFaultTestConfigParameters.DCCFaultInsertion = (char)(TestEna2 >> 1 & 1U);
            m_MSSLatentFaultTestConfigParameters.PCRFaultGenTest = (char)(TestEna2 >> 2 & 1U);
            m_MSSLatentFaultTestConfigParameters.VIMRamParity = (char)(TestEna2 >> 3 & 1U);
            m_MSSLatentFaultTestConfigParameters.SCI = (char)(TestEna2 >> 4 & 1U);
            m_MSSLatentFaultTestConfigParameters.ReportingMode = ReportingMode;
            m_MSSLatentFaultTestConfigParameters.TestMode = TestMode;
            m_MSSLatentFaultTestConfigParameters.Reserved = Reserved;
            ScriptOps.m_MainForm.MSSMonitoring.UpdateMonitoringMSSRFDigitalSysLatentFaultConfigDataFrmCmdSrc();
            return result;
        }

        public int UpdateNMSSLatentFaultMonitoringConfigurationData_cmd(out string TestStatusFlag1, out string TestStatusFlag2, out string Reserved)
        {
            TestStatusFlag1 = string.Empty;
            TestStatusFlag2 = string.Empty;
            Reserved = string.Empty;
            ScriptOps.m_MainForm.MSSMonitoring.UpdateMonitoringMSSRFDigitalSysLatentFaultConfigData();
            return iSetMSSLatentFaultMonConfig_ImplForLuaCommand(out TestStatusFlag1, out TestStatusFlag2, out Reserved);
        }

        private int iSetMSSLatentFaultMonConfig_ImplForLuaCommand(out string TestStatusFlag1, out string TestStatusFlag2, out string Reserved)
        {
            TestStatusFlag1 = string.Empty;
            TestStatusFlag2 = string.Empty;
            Reserved = string.Empty;
            MSSLatentFaultConfigParam.TestEna1 = (uint)(m_MSSLatentFaultTestConfigParameters.f000322 | (uint)m_MSSLatentFaultTestConfigParameters.DMAMOn << 1 | (uint)m_MSSLatentFaultTestConfigParameters.RTIMOn << 3 | (uint)m_MSSLatentFaultTestConfigParameters.ESMMOn << 4 | (uint)m_MSSLatentFaultTestConfigParameters.f000323 << 5 | (uint)m_MSSLatentFaultTestConfigParameters.CRCMOn << 6 | (uint)m_MSSLatentFaultTestConfigParameters.VIMMon << 7 | (uint)m_MSSLatentFaultTestConfigParameters.MailBoxMon << 9 | (uint)m_MSSLatentFaultTestConfigParameters.LVDSPatternGenMon << 10 | (uint)m_MSSLatentFaultTestConfigParameters.CSI2PatternGenMon << 11 | (uint)m_MSSLatentFaultTestConfigParameters.GenNErrorMon << 12 | (uint)m_MSSLatentFaultTestConfigParameters.MibSPISingleBitErrorMon << 13 | (uint)m_MSSLatentFaultTestConfigParameters.MibSPIDoubleBitErrorMon << 14 | (uint)m_MSSLatentFaultTestConfigParameters.DMAParityError << 15 | (uint)m_MSSLatentFaultTestConfigParameters.TCMARamSingleBitErrorMon << 16 | (uint)m_MSSLatentFaultTestConfigParameters.TCMBRamSingleBitErrorMon << 17 | (uint)m_MSSLatentFaultTestConfigParameters.TCMARamDoubleBitErrorMon << 18 | (uint)m_MSSLatentFaultTestConfigParameters.TCMBRamDoubleBitErrorMon << 19 | (uint)m_MSSLatentFaultTestConfigParameters.TCMARamParityErrorMon << 20 | (uint)m_MSSLatentFaultTestConfigParameters.TCMBRamParityErrorMon << 21 | (uint)m_MSSLatentFaultTestConfigParameters.f000324 << 24 | (uint)m_MSSLatentFaultTestConfigParameters.MSSMailBoxSingleBitErrorMon << 25 | (uint)m_MSSLatentFaultTestConfigParameters.MSSMailBoxDoubleBitErrorMon << 26 | (uint)m_MSSLatentFaultTestConfigParameters.BSSMailBoxSingleBitErrorMon << 27 | (uint)m_MSSLatentFaultTestConfigParameters.BSSMailBoxDoubleBitErrorMon << 28 | (uint)m_MSSLatentFaultTestConfigParameters.f000325 << 29 | (uint)m_MSSLatentFaultTestConfigParameters.EDMAParityMon << 30 | (uint)m_MSSLatentFaultTestConfigParameters.CSI2ParityMon << 31);
            MSSLatentFaultConfigParam.TestEna2 = (uint)(m_MSSLatentFaultTestConfigParameters.DCCSelfTest | (uint)m_MSSLatentFaultTestConfigParameters.DCCFaultInsertion << 1 | (uint)m_MSSLatentFaultTestConfigParameters.PCRFaultGenTest << 2 | (uint)m_MSSLatentFaultTestConfigParameters.VIMRamParity << 3 | (uint)m_MSSLatentFaultTestConfigParameters.SCI << 4);
            MSSLatentFaultConfigParam.ReportingMode = (byte)m_MSSLatentFaultTestConfigParameters.ReportingMode;
            MSSLatentFaultConfigParam.TestMode = (byte)m_MSSLatentFaultTestConfigParameters.TestMode;
            MSSLatentFaultConfigParam.Reserved = 0;
            IntPtr data = GCHandle.Alloc(MSSLatentFaultConfigParam, GCHandleType.Pinned).AddrOfPinnedObject();
            int num;
            if (GlobalRef.g_NtvRS232Connect[(int)GlobalRef.g_RadarDeviceIndex] && GlobalRef.g_CasCadeDeviceSpiConnect == 0U)
            {
                num = m_TsWrapper.Calling_WriteAddr_Single(4294959848U, 1U);
                if (m_GuiManager.DllOps.itempDisconnect(false) == 0)
                {
                    string full_command = string.Format("Debug Port Disconnected", new object[0]);
                    m_GuiManager.RecordLog(0, full_command);
                    if (!GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
                    {
                        iRs232ConnectDisconnect_impl();
                    }
                }
            }
            if (m_RadarDeviceModeConfigParams.NumberOfRadarDevicesDetected <= 1)
            {
                string full_command2 = string.Format("ar1.DeviceLatentFaultConfig(0x{0}, 0x{1}, {2}, {3}, {4})", new object[]
                {
                    MSSLatentFaultConfigParam.TestEna1.ToString("X"),
                    MSSLatentFaultConfigParam.TestEna2.ToString("X"),
                    MSSLatentFaultConfigParam.ReportingMode,
                    MSSLatentFaultConfigParam.TestMode,
                    MSSLatentFaultConfigParam.Reserved
                });
                m_GuiManager.RecordLog(6, full_command2);
            }
            else
            {
                string full_command3 = string.Format("ar1.DeviceLatentFaultConfig_mult({0}, 0x{1}, 0x{2}, {3}, {4}, {5})", new object[]
                {
                    GlobalRef.g_RadarDeviceId,
                    MSSLatentFaultConfigParam.TestEna1.ToString("X"),
                    MSSLatentFaultConfigParam.TestEna2.ToString("X"),
                    MSSLatentFaultConfigParam.ReportingMode,
                    MSSLatentFaultConfigParam.TestMode,
                    MSSLatentFaultConfigParam.Reserved
                });
                m_GuiManager.RecordLog(6, full_command3);
            }
            GlobalRef.g_MSSLatentFaultMon = 0U;
            num = Imports.RadarLinkImpl_DeviceLatentFaultTests(GlobalRef.g_RadarDeviceId, data);
            if (MSSLatentFaultConfigParam.ReportingMode == 0)
            {
                while (GlobalRef.g_MSSLatentFaultMon == 0U)
                {
                    Thread.Sleep(100);
                }
            }
            if (num == 0)
            {
                if (GlobalRef.g_RadarDeviceId == 1U)
                {
                    TestStatusFlag1 = "0x" + ScriptOps.MSSLatentFaultMonReportParam.TestStatusFlag1.ToString("X");
                    TestStatusFlag2 = "0x" + ScriptOps.MSSLatentFaultMonReportParam.TestStatusFlag2.ToString("X");
                    Reserved = Convert.ToString(ScriptOps.MSSLatentFaultMonReportParam.Reserved);
                }
                else if (GlobalRef.g_RadarDeviceId == 2U)
                {
                    TestStatusFlag1 = "0x" + ScriptOps.MSSLatentFaultMonReportParam.TestStatusFlag1.ToString("X");
                    TestStatusFlag2 = "0x" + ScriptOps.MSSLatentFaultMonReportParam.TestStatusFlag2.ToString("X");
                    Reserved = Convert.ToString(ScriptOps.MSSLatentFaultMonReportParam.Reserved);
                }
                else if (GlobalRef.g_RadarDeviceId == 4U)
                {
                    TestStatusFlag1 = "0x" + ScriptOps.MSSLatentFaultMonReportParam.TestStatusFlag1.ToString("X");
                    TestStatusFlag2 = "0x" + ScriptOps.MSSLatentFaultMonReportParam.TestStatusFlag2.ToString("X");
                    Reserved = Convert.ToString(ScriptOps.MSSLatentFaultMonReportParam.Reserved);
                }
                else if (GlobalRef.g_RadarDeviceId == 8U)
                {
                    TestStatusFlag1 = "0x" + ScriptOps.MSSLatentFaultMonReportParam.TestStatusFlag1.ToString("X");
                    TestStatusFlag2 = "0x" + ScriptOps.MSSLatentFaultMonReportParam.TestStatusFlag2.ToString("X");
                    Reserved = Convert.ToString(ScriptOps.MSSLatentFaultMonReportParam.Reserved);
                }
            }
            if ((num == 0 && ((GlobalRef.g_CasCadeDeviceSpiConnect & 1U) == 1U || (GlobalRef.g_CasCadeDeviceSpiConnect & 2U) == 2U || (GlobalRef.g_CasCadeDeviceSpiConnect & 4U) == 4U || (GlobalRef.g_CasCadeDeviceSpiConnect & 8U) == 8U)) || GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
            {
                string full_command4 = string.Format("Status: Passed", new object[0]);
                m_GuiManager.RecordLog(6, full_command4);
            }
            else
            {
                string msg = string.Format("Status: Failed, Error Type: {0}", new object[]
                {
                    GetErrorType(num)
                });
                GlobalRef.LuaWrapper.PrintError(msg);
            }
            if (GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
            {
                if (iRs232ConnectDisconnect_impl() == 0 && !GlobalRef.g_NtvRS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
                {
                    m_GuiManager.DllOps.iConnect(1U, 0U);
                    string full_command5 = string.Format("Debug Port Reconnected!", new object[0]);
                    m_GuiManager.RecordLog(9, full_command5);
                    ScriptOps.KeepTrying(2000, new Func<bool>(spare_read));
                }
            }
            else if (GlobalRef.g_CasCadeDeviceSpiConnect == 0U)
            {
                string full_command6 = string.Format("Error Occurred in Port open close", new object[0]);
                m_GuiManager.RecordLog(9, full_command6);
            }
            return num;
        }

        public int UpdateNSetMSSPeriodicTestMonitoringConfData(ushort RadarDeviceId, uint Periodicity, uint TestEna, char ReportingMode, ushort Reserved)
        {
            int result = -1;
            GlobalRef.g_RadarDeviceId = (uint)RadarDeviceId;
            ScriptOps.m_MainForm.MSSMonitoring.UpdateMonitoringMSSPeriodicTestConfigData();
            m_MSSPeriodicTestConfigParameters.Periodicity = Periodicity;
            m_MSSPeriodicTestConfigParameters.PeriodicConfigRegReadEna = (byte)(TestEna & 1U);
            m_MSSPeriodicTestConfigParameters.ESMMonEna = (byte)(TestEna >> 1 & 1U);
            m_MSSPeriodicTestConfigParameters.ReportingMode = (byte)ReportingMode;
            m_MSSPeriodicTestConfigParameters.Reserved = (byte)Reserved;
            ScriptOps.m_MainForm.MSSMonitoring.UpdateMonitoringMSSPeriodicTestConfigDataFrmCmdSrc();
            return result;
        }

        public int UpdateNMSSPeriodicMonitoringConfigurationData_cmd(out string TestStatusFlag)
        {
            TestStatusFlag = string.Empty;
            ScriptOps.m_MainForm.MSSMonitoring.UpdateMonitoringMSSPeriodicTestConfigData();
            return iSetMSSPeriodicMonConfig_ImplForLuaCommand(out TestStatusFlag);
        }

        private int iSetMSSPeriodicMonConfig_ImplForLuaCommand(out string TestStatusFlag)
        {
            TestStatusFlag = string.Empty;
            MSSPeriodicTestConfigurationParam.Periodicity = m_MSSPeriodicTestConfigParameters.Periodicity;
            MSSPeriodicTestConfigurationParam.TestEnable = (uint)((int)m_MSSPeriodicTestConfigParameters.PeriodicConfigRegReadEna | (int)m_MSSPeriodicTestConfigParameters.ESMMonEna << 1);
            MSSPeriodicTestConfigurationParam.ReportingMode = m_MSSPeriodicTestConfigParameters.ReportingMode;
            MSSPeriodicTestConfigurationParam.Reserved = 0;
            MSSPeriodicTestConfigurationParam.Reserved2 = 0;
            IntPtr data = GCHandle.Alloc(MSSPeriodicTestConfigurationParam, GCHandleType.Pinned).AddrOfPinnedObject();
            int num;
            if (GlobalRef.g_NtvRS232Connect[(int)GlobalRef.g_RadarDeviceIndex] && GlobalRef.g_CasCadeDeviceSpiConnect == 0U)
            {
                num = m_TsWrapper.Calling_WriteAddr_Single(4294959848U, 1U);
                if (m_GuiManager.DllOps.itempDisconnect(false) == 0)
                {
                    string full_command = string.Format("Debug Port Disconnected", new object[0]);
                    m_GuiManager.RecordLog(0, full_command);
                    if (!GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
                    {
                        iRs232ConnectDisconnect_impl();
                    }
                }
            }
            if (m_RadarDeviceModeConfigParams.NumberOfRadarDevicesDetected <= 1)
            {
                string full_command2 = string.Format("ar1.DevicePeriodicTestsConfig({0}, {1}, {2}, {3})", new object[]
                {
                    MSSPeriodicTestConfigurationParam.Periodicity,
                    MSSPeriodicTestConfigurationParam.TestEnable,
                    MSSPeriodicTestConfigurationParam.ReportingMode,
                    MSSPeriodicTestConfigurationParam.Reserved
                });
                m_GuiManager.RecordLog(6, full_command2);
            }
            else
            {
                string full_command3 = string.Format("ar1.DevicePeriodicTestsConfig_mult({0}, {1}, {2}, {3}, {4})", new object[]
                {
                    GlobalRef.g_RadarDeviceId,
                    MSSPeriodicTestConfigurationParam.Periodicity,
                    MSSPeriodicTestConfigurationParam.TestEnable,
                    MSSPeriodicTestConfigurationParam.ReportingMode,
                    MSSPeriodicTestConfigurationParam.Reserved
                });
                m_GuiManager.RecordLog(6, full_command3);
            }
            GlobalRef.g_MSSPeriodicTestMon = 1U;
            num = Imports.RadarLinkImpl_DeviceEnablePeriodicTests(GlobalRef.g_RadarDeviceId, data);
            while (GlobalRef.g_MSSPeriodicTestMon == 0U)
            {
                Thread.Sleep(100);
            }
            if (num == 0)
            {
                if (GlobalRef.g_RadarDeviceId == 1U)
                {
                    TestStatusFlag = Convert.ToString(ScriptOps.MSSPeriodicTestMonReportParam.TestStatusFlag);
                }
                else if (GlobalRef.g_RadarDeviceId == 2U)
                {
                    TestStatusFlag = Convert.ToString(ScriptOps.MSSPeriodicTestMonReportParam.TestStatusFlag);
                }
                else if (GlobalRef.g_RadarDeviceId == 4U)
                {
                    TestStatusFlag = Convert.ToString(ScriptOps.MSSPeriodicTestMonReportParam.TestStatusFlag);
                }
                else if (GlobalRef.g_RadarDeviceId == 8U)
                {
                    TestStatusFlag = Convert.ToString(ScriptOps.MSSPeriodicTestMonReportParam.TestStatusFlag);
                }
            }
            if ((num == 0 && ((GlobalRef.g_CasCadeDeviceSpiConnect & 1U) == 1U || (GlobalRef.g_CasCadeDeviceSpiConnect & 2U) == 2U || (GlobalRef.g_CasCadeDeviceSpiConnect & 4U) == 4U || (GlobalRef.g_CasCadeDeviceSpiConnect & 8U) == 8U)) || GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
            {
                string full_command4 = string.Format("Status: Passed", new object[0]);
                m_GuiManager.RecordLog(6, full_command4);
            }
            else
            {
                string msg = string.Format("Status: Failed, Error Type: {0}", new object[]
                {
                    GetErrorType(num)
                });
                GlobalRef.LuaWrapper.PrintError(msg);
            }
            if (GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
            {
                if (iRs232ConnectDisconnect_impl() == 0 && !GlobalRef.g_NtvRS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
                {
                    m_GuiManager.DllOps.iConnect(1U, 0U);
                    string full_command5 = string.Format("Debug Port Reconnected!", new object[0]);
                    m_GuiManager.RecordLog(9, full_command5);
                    ScriptOps.KeepTrying(2000, new Func<bool>(spare_read));
                }
            }
            else if (GlobalRef.g_CasCadeDeviceSpiConnect == 0U)
            {
                string full_command6 = string.Format("Error Occurred in Port open close", new object[0]);
                m_GuiManager.RecordLog(9, full_command6);
            }
            return num;
        }

        public int UpdateNSetRxNoisefigureMonitoringConfData(ushort RadarDeviceId, char ProfileIndex, char RF1FreqBitMask, char RF2FreqBitMask, char RF3FreqBitMask, char ReportingMode, double RXNoiseFigureThreshold)
        {
            int result = -1;
            GlobalRef.g_RadarDeviceId = (uint)RadarDeviceId;
            ScriptOps.m_MainForm.AnalogMon2Config.UpdateRXNoiseFigureMonConfigData();
            m_MonRXNoiseFigureConfigParameters.ProfileIndex = ProfileIndex;
            m_MonRXNoiseFigureConfigParameters.RF1FreqBitMask = RF1FreqBitMask;
            m_MonRXNoiseFigureConfigParameters.RF2FreqBitMask = RF2FreqBitMask;
            m_MonRXNoiseFigureConfigParameters.RF3FreqBitMask = RF3FreqBitMask;
            m_MonRXNoiseFigureConfigParameters.ReportingMode = ReportingMode;
            m_MonRXNoiseFigureConfigParameters.RXNoiseFigureThreshold = RXNoiseFigureThreshold;
            ScriptOps.m_MainForm.AnalogMon2Config.UpdateRXNoiseFigureMonConfigDataFrmCmdSrc();
            return result;
        }

        public int UpdateNRxNoisefigureMonitoringConfigurationData_cmd(out string StatusFlag, out string Errorcode, out string Profileindex, out string p3, out string p4, out string p5, out string p6, out string p7, out string p8, out string p9, out string p10, out string p11, out string p12, out string p13, out string p14, out string Timestamp)
        {
            StatusFlag = string.Empty;
            Errorcode = string.Empty;
            Profileindex = string.Empty;
            p3 = string.Empty;
            p4 = string.Empty;
            p5 = string.Empty;
            p6 = string.Empty;
            p7 = string.Empty;
            p8 = string.Empty;
            p9 = string.Empty;
            p10 = string.Empty;
            p11 = string.Empty;
            p12 = string.Empty;
            p13 = string.Empty;
            p14 = string.Empty;
            Timestamp = string.Empty;
            ScriptOps.m_MainForm.AnalogMon2Config.UpdateRXNoiseFigureMonConfigData();
            return iSetRxNoisefigureMonConfig_ImplForLuaCommand(out StatusFlag, out Errorcode, out Profileindex, out p3, out p4, out p5, out p6, out p7, out p8, out p9, out p10, out p11, out p12, out p13, out p14, out Timestamp);
        }

        private int iSetRxNoisefigureMonConfig_ImplForLuaCommand(out string StatusFlag, out string Errorcode, out string Profileindex, out string p3, out string p4, out string p5, out string p6, out string p7, out string p8, out string p9, out string p10, out string p11, out string p12, out string p13, out string p14, out string Timestamp)
        {
            StatusFlag = string.Empty;
            Errorcode = string.Empty;
            Profileindex = string.Empty;
            p3 = string.Empty;
            p4 = string.Empty;
            p5 = string.Empty;
            p6 = string.Empty;
            p7 = string.Empty;
            p8 = string.Empty;
            p9 = string.Empty;
            p10 = string.Empty;
            p11 = string.Empty;
            p12 = string.Empty;
            p13 = string.Empty;
            p14 = string.Empty;
            Timestamp = string.Empty;
            RXNoiserMonitoringConfigurationParam.ProfileIndex = (byte)m_MonRXNoiseFigureConfigParameters.ProfileIndex;
            RXNoiserMonitoringConfigurationParam.RFFreqBitMask = (byte)(m_MonRXNoiseFigureConfigParameters.RF1FreqBitMask | m_MonRXNoiseFigureConfigParameters.RF2FreqBitMask << 1 | m_MonRXNoiseFigureConfigParameters.RF3FreqBitMask << 2);
            RXNoiserMonitoringConfigurationParam.Reserved = 0;
            RXNoiserMonitoringConfigurationParam.ReportingMode = (byte)m_MonRXNoiseFigureConfigParameters.ReportingMode;
            RXNoiserMonitoringConfigurationParam.Reserved2 = 0;
            RXNoiserMonitoringConfigurationParam.RXNoiseFigureThreshold = (ushort)(m_MonRXNoiseFigureConfigParameters.RXNoiseFigureThreshold * 10.0);
            RXNoiserMonitoringConfigurationParam.Reserved3 = 0U;
            IntPtr data = GCHandle.Alloc(RXNoiserMonitoringConfigurationParam, GCHandleType.Pinned).AddrOfPinnedObject();
            int num;
            if (GlobalRef.g_NtvRS232Connect[(int)GlobalRef.g_RadarDeviceIndex] && GlobalRef.g_CasCadeDeviceSpiConnect == 0U)
            {
                num = m_TsWrapper.Calling_WriteAddr_Single(4294959848U, 1U);
                if (m_GuiManager.DllOps.itempDisconnect(false) == 0)
                {
                    string full_command = string.Format("Debug Port Disconnected", new object[0]);
                    m_GuiManager.RecordLog(0, full_command);
                    if (!GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
                    {
                        iRs232ConnectDisconnect_impl();
                    }
                }
            }
            if (m_RadarDeviceModeConfigParams.NumberOfRadarDevicesDetected <= 1)
            {
                string full_command2 = string.Format("ar1.SetRfRxNoiseMonConfig({0}, {1}, {2}, {3}, {4}, {5})", new object[]
                {
                    m_MonRXNoiseFigureConfigParameters.ProfileIndex,
                    m_MonRXNoiseFigureConfigParameters.RF1FreqBitMask,
                    m_MonRXNoiseFigureConfigParameters.RF2FreqBitMask,
                    m_MonRXNoiseFigureConfigParameters.RF3FreqBitMask,
                    m_MonRXNoiseFigureConfigParameters.ReportingMode,
                    (decimal)Math.Round(m_MonRXNoiseFigureConfigParameters.RXNoiseFigureThreshold, 1)
                });
                m_GuiManager.RecordLog(6, full_command2);
            }
            else
            {
                string full_command3 = string.Format("ar1.SetRfRxNoiseMonConfig_mult({0}, {1}, {2}, {3}, {4}, {5}, {6})", new object[]
                {
                    GlobalRef.g_RadarDeviceId,
                    m_MonRXNoiseFigureConfigParameters.ProfileIndex,
                    m_MonRXNoiseFigureConfigParameters.RF1FreqBitMask,
                    m_MonRXNoiseFigureConfigParameters.RF2FreqBitMask,
                    m_MonRXNoiseFigureConfigParameters.RF3FreqBitMask,
                    m_MonRXNoiseFigureConfigParameters.ReportingMode,
                    (decimal)Math.Round(m_MonRXNoiseFigureConfigParameters.RXNoiseFigureThreshold, 1)
                });
                m_GuiManager.RecordLog(6, full_command3);
            }
            GlobalRef.g_RxNoiseFigureMon = 1U;
            num = Imports.RadarLinkImpl_RfRxNoiseMonConfig(GlobalRef.g_RadarDeviceId, data);
            while (GlobalRef.g_RxNoiseFigureMon == 0U)
            {
                Thread.Sleep(100);
            }
            if (num == 0)
            {
                if (GlobalRef.g_RadarDeviceId == 1U)
                {
                    StatusFlag = Convert.ToString(ScriptOps.RxNoiseFigureAsyncDataParam.StatusFlags);
                    Errorcode = Convert.ToString(ScriptOps.RxNoiseFigureAsyncDataParam.ErrorCode);
                    Profileindex = Convert.ToString(ScriptOps.RxNoiseFigureAsyncDataParam.ProfileIndex);
                    ushort num2 = (ushort)(ScriptOps.RxNoiseFigureAsyncDataParam.RF1Rx1Rx2PowerValue & 65535U);
                    if (num2 > 32767)
                    {
                        short num3 = (short)((int)num2 - 65536);
                        p3 = Convert.ToString((double)num3 / 10.0);
                    }
                    else
                    {
                        p3 = Convert.ToString((double)num2 / 10.0);
                    }
                    ushort num4 = (ushort)(ScriptOps.RxNoiseFigureAsyncDataParam.RF1Rx1Rx2PowerValue >> 16);
                    if (num4 > 32767)
                    {
                        short num3 = (short)((int)num4 - 65536);
                        p4 = Convert.ToString((double)num3 / 10.0);
                    }
                    else
                    {
                        p4 = Convert.ToString((double)num4 / 10.0);
                    }
                    ushort num5 = (ushort)(ScriptOps.RxNoiseFigureAsyncDataParam.RF1Rx3Rx4PowerValue & 65535U);
                    if (num5 > 32767)
                    {
                        short num3 = (short)((int)num5 - 65536);
                        p5 = Convert.ToString((double)num3 / 10.0);
                    }
                    else
                    {
                        p5 = Convert.ToString((double)num5 / 10.0);
                    }
                    ushort num6 = (ushort)(ScriptOps.RxNoiseFigureAsyncDataParam.RF1Rx3Rx4PowerValue >> 16);
                    if (num6 > 32767)
                    {
                        short num3 = (short)((int)num6 - 65536);
                        p6 = Convert.ToString((double)num3 / 10.0);
                    }
                    else
                    {
                        p6 = Convert.ToString((double)num6 / 10.0);
                    }
                    ushort num7 = (ushort)(ScriptOps.RxNoiseFigureAsyncDataParam.RF2Rx1Rx2PowerValue & 65535U);
                    if (num7 > 32767)
                    {
                        short num3 = (short)((int)num7 - 65536);
                        p7 = Convert.ToString((double)num3 / 10.0);
                    }
                    else
                    {
                        p7 = Convert.ToString((double)num7 / 10.0);
                    }
                    ushort num8 = (ushort)(ScriptOps.RxNoiseFigureAsyncDataParam.RF2Rx1Rx2PowerValue >> 16);
                    if (num8 > 32767)
                    {
                        short num3 = (short)((int)num8 - 65536);
                        p8 = Convert.ToString((double)num3 / 10.0);
                    }
                    else
                    {
                        p8 = Convert.ToString((double)num8 / 10.0);
                    }
                    ushort num9 = (ushort)(ScriptOps.RxNoiseFigureAsyncDataParam.RF2Rx3Rx4PowerValue & 65535U);
                    if (num9 > 32767)
                    {
                        short num3 = (short)((int)num9 - 65536);
                        p9 = Convert.ToString((double)num3 / 10.0);
                    }
                    else
                    {
                        p9 = Convert.ToString((double)num9 / 10.0);
                    }
                    ushort num10 = (ushort)(ScriptOps.RxNoiseFigureAsyncDataParam.RF2Rx3Rx4PowerValue >> 16);
                    if (num10 > 32767)
                    {
                        short num3 = (short)((int)num10 - 65536);
                        p10 = Convert.ToString((double)num3 / 10.0);
                    }
                    else
                    {
                        p10 = Convert.ToString((double)num10 / 10.0);
                    }
                    ushort num11 = (ushort)(ScriptOps.RxNoiseFigureAsyncDataParam.RF3Rx1Rx2PowerValue & 65535U);
                    if (num11 > 32767)
                    {
                        short num3 = (short)((int)num11 - 65536);
                        p11 = Convert.ToString((double)num3 / 10.0);
                    }
                    else
                    {
                        p11 = Convert.ToString((double)num11 / 10.0);
                    }
                    ushort num12 = (ushort)(ScriptOps.RxNoiseFigureAsyncDataParam.RF3Rx1Rx2PowerValue >> 16);
                    if (num12 > 32767)
                    {
                        short num3 = (short)((int)num12 - 65536);
                        p12 = Convert.ToString((double)num3 / 10.0);
                    }
                    else
                    {
                        p12 = Convert.ToString((double)num12 / 10.0);
                    }
                    ushort num13 = (ushort)(ScriptOps.RxNoiseFigureAsyncDataParam.RF3Rx3Rx4PowerValue & 65535U);
                    if (num13 > 32767)
                    {
                        short num3 = (short)((int)num13 - 65536);
                        p13 = Convert.ToString((double)num3 / 10.0);
                    }
                    else
                    {
                        p13 = Convert.ToString((double)num13 / 10.0);
                    }
                    ushort num14 = (ushort)(ScriptOps.RxNoiseFigureAsyncDataParam.RF3Rx3Rx4PowerValue >> 16);
                    if (num14 > 32767)
                    {
                        short num3 = (short)((int)num14 - 65536);
                        p14 = Convert.ToString((double)num3 / 10.0);
                    }
                    else
                    {
                        p14 = Convert.ToString((double)num14 / 10.0);
                    }
                    Timestamp = Convert.ToString(ScriptOps.RxNoiseFigureAsyncDataParam.TimeStamp);
                }
                else if (GlobalRef.g_RadarDeviceId == 2U)
                {
                    StatusFlag = Convert.ToString(ScriptOps.RxNoiseFigureAsyncDataParam.StatusFlags);
                    Errorcode = Convert.ToString(ScriptOps.RxNoiseFigureAsyncDataParam.ErrorCode);
                    Profileindex = Convert.ToString(ScriptOps.RxNoiseFigureAsyncDataParam.ProfileIndex);
                    ushort num15 = (ushort)(ScriptOps.RxNoiseFigureAsyncDataParam.RF1Rx1Rx2PowerValue & 65535U);
                    if (num15 > 32767)
                    {
                        short num3 = (short)((int)num15 - 65536);
                        p3 = Convert.ToString((double)num3 / 10.0);
                    }
                    else
                    {
                        p3 = Convert.ToString((double)num15 / 10.0);
                    }
                    ushort num16 = (ushort)(ScriptOps.RxNoiseFigureAsyncDataParam.RF1Rx1Rx2PowerValue >> 16);
                    if (num16 > 32767)
                    {
                        short num3 = (short)((int)num16 - 65536);
                        p4 = Convert.ToString((double)num3 / 10.0);
                    }
                    else
                    {
                        p4 = Convert.ToString((double)num16 / 10.0);
                    }
                    ushort num17 = (ushort)(ScriptOps.RxNoiseFigureAsyncDataParam.RF1Rx3Rx4PowerValue & 65535U);
                    if (num17 > 32767)
                    {
                        short num3 = (short)((int)num17 - 65536);
                        p5 = Convert.ToString((double)num3 / 10.0);
                    }
                    else
                    {
                        p5 = Convert.ToString((double)num17 / 10.0);
                    }
                    ushort num18 = (ushort)(ScriptOps.RxNoiseFigureAsyncDataParam.RF1Rx3Rx4PowerValue >> 16);
                    if (num18 > 32767)
                    {
                        short num3 = (short)((int)num18 - 65536);
                        p6 = Convert.ToString((double)num3 / 10.0);
                    }
                    else
                    {
                        p6 = Convert.ToString((double)num18 / 10.0);
                    }
                    ushort num19 = (ushort)(ScriptOps.RxNoiseFigureAsyncDataParam.RF2Rx1Rx2PowerValue & 65535U);
                    if (num19 > 32767)
                    {
                        short num3 = (short)((int)num19 - 65536);
                        p7 = Convert.ToString((double)num3 / 10.0);
                    }
                    else
                    {
                        p7 = Convert.ToString((double)num19 / 10.0);
                    }
                    ushort num20 = (ushort)(ScriptOps.RxNoiseFigureAsyncDataParam.RF2Rx1Rx2PowerValue >> 16);
                    if (num20 > 32767)
                    {
                        short num3 = (short)((int)num20 - 65536);
                        p8 = Convert.ToString((double)num3 / 10.0);
                    }
                    else
                    {
                        p8 = Convert.ToString((double)num20 / 10.0);
                    }
                    ushort num21 = (ushort)(ScriptOps.RxNoiseFigureAsyncDataParam.RF2Rx3Rx4PowerValue & 65535U);
                    if (num21 > 32767)
                    {
                        short num3 = (short)((int)num21 - 65536);
                        p9 = Convert.ToString((double)num3 / 10.0);
                    }
                    else
                    {
                        p9 = Convert.ToString((double)num21 / 10.0);
                    }
                    ushort num22 = (ushort)(ScriptOps.RxNoiseFigureAsyncDataParam.RF2Rx3Rx4PowerValue >> 16);
                    if (num22 > 32767)
                    {
                        short num3 = (short)((int)num22 - 65536);
                        p10 = Convert.ToString((double)num3 / 10.0);
                    }
                    else
                    {
                        p10 = Convert.ToString((double)num22 / 10.0);
                    }
                    ushort num23 = (ushort)(ScriptOps.RxNoiseFigureAsyncDataParam.RF3Rx1Rx2PowerValue & 65535U);
                    if (num23 > 32767)
                    {
                        short num3 = (short)((int)num23 - 65536);
                        p11 = Convert.ToString((double)num3 / 10.0);
                    }
                    else
                    {
                        p11 = Convert.ToString((double)num23 / 10.0);
                    }
                    ushort num24 = (ushort)(ScriptOps.RxNoiseFigureAsyncDataParam.RF3Rx1Rx2PowerValue >> 16);
                    if (num24 > 32767)
                    {
                        short num3 = (short)((int)num24 - 65536);
                        p12 = Convert.ToString((double)num3 / 10.0);
                    }
                    else
                    {
                        p12 = Convert.ToString((double)num24 / 10.0);
                    }
                    ushort num25 = (ushort)(ScriptOps.RxNoiseFigureAsyncDataParam.RF3Rx3Rx4PowerValue & 65535U);
                    if (num25 > 32767)
                    {
                        short num3 = (short)((int)num25 - 65536);
                        p13 = Convert.ToString((double)num3 / 10.0);
                    }
                    else
                    {
                        p13 = Convert.ToString((double)num25 / 10.0);
                    }
                    ushort num26 = (ushort)(ScriptOps.RxNoiseFigureAsyncDataParam.RF3Rx3Rx4PowerValue >> 16);
                    if (num26 > 32767)
                    {
                        short num3 = (short)((int)num26 - 65536);
                        p14 = Convert.ToString((double)num3 / 10.0);
                    }
                    else
                    {
                        p14 = Convert.ToString((double)num26 / 10.0);
                    }
                    Timestamp = Convert.ToString(ScriptOps.RxNoiseFigureAsyncDataParam.TimeStamp);
                }
                else if (GlobalRef.g_RadarDeviceId == 4U)
                {
                    StatusFlag = Convert.ToString(ScriptOps.RxNoiseFigureAsyncDataParam.StatusFlags);
                    Errorcode = Convert.ToString(ScriptOps.RxNoiseFigureAsyncDataParam.ErrorCode);
                    Profileindex = Convert.ToString(ScriptOps.RxNoiseFigureAsyncDataParam.ProfileIndex);
                    ushort num27 = (ushort)(ScriptOps.RxNoiseFigureAsyncDataParam.RF1Rx1Rx2PowerValue & 65535U);
                    if (num27 > 32767)
                    {
                        short num3 = (short)((int)num27 - 65536);
                        p3 = Convert.ToString((double)num3 / 10.0);
                    }
                    else
                    {
                        p3 = Convert.ToString((double)num27 / 10.0);
                    }
                    ushort num28 = (ushort)(ScriptOps.RxNoiseFigureAsyncDataParam.RF1Rx1Rx2PowerValue >> 16);
                    if (num28 > 32767)
                    {
                        short num3 = (short)((int)num28 - 65536);
                        p4 = Convert.ToString((double)num3 / 10.0);
                    }
                    else
                    {
                        p4 = Convert.ToString((double)num28 / 10.0);
                    }
                    ushort num29 = (ushort)(ScriptOps.RxNoiseFigureAsyncDataParam.RF1Rx3Rx4PowerValue & 65535U);
                    if (num29 > 32767)
                    {
                        short num3 = (short)((int)num29 - 65536);
                        p5 = Convert.ToString((double)num3 / 10.0);
                    }
                    else
                    {
                        p5 = Convert.ToString((double)num29 / 10.0);
                    }
                    ushort num30 = (ushort)(ScriptOps.RxNoiseFigureAsyncDataParam.RF1Rx3Rx4PowerValue >> 16);
                    if (num30 > 32767)
                    {
                        short num3 = (short)((int)num30 - 65536);
                        p6 = Convert.ToString((double)num3 / 10.0);
                    }
                    else
                    {
                        p6 = Convert.ToString((double)num30 / 10.0);
                    }
                    ushort num31 = (ushort)(ScriptOps.RxNoiseFigureAsyncDataParam.RF2Rx1Rx2PowerValue & 65535U);
                    if (num31 > 32767)
                    {
                        short num3 = (short)((int)num31 - 65536);
                        p7 = Convert.ToString((double)num3 / 10.0);
                    }
                    else
                    {
                        p7 = Convert.ToString((double)num31 / 10.0);
                    }
                    ushort num32 = (ushort)(ScriptOps.RxNoiseFigureAsyncDataParam.RF2Rx1Rx2PowerValue >> 16);
                    if (num32 > 32767)
                    {
                        short num3 = (short)((int)num32 - 65536);
                        p8 = Convert.ToString((double)num3 / 10.0);
                    }
                    else
                    {
                        p8 = Convert.ToString((double)num32 / 10.0);
                    }
                    ushort num33 = (ushort)(ScriptOps.RxNoiseFigureAsyncDataParam.RF2Rx3Rx4PowerValue & 65535U);
                    if (num33 > 32767)
                    {
                        short num3 = (short)((int)num33 - 65536);
                        p9 = Convert.ToString((double)num3 / 10.0);
                    }
                    else
                    {
                        p9 = Convert.ToString((double)num33 / 10.0);
                    }
                    ushort num34 = (ushort)(ScriptOps.RxNoiseFigureAsyncDataParam.RF2Rx3Rx4PowerValue >> 16);
                    if (num34 > 32767)
                    {
                        short num3 = (short)((int)num34 - 65536);
                        p10 = Convert.ToString((double)num3 / 10.0);
                    }
                    else
                    {
                        p10 = Convert.ToString((double)num34 / 10.0);
                    }
                    ushort num35 = (ushort)(ScriptOps.RxNoiseFigureAsyncDataParam.RF3Rx1Rx2PowerValue & 65535U);
                    if (num35 > 32767)
                    {
                        short num3 = (short)((int)num35 - 65536);
                        p11 = Convert.ToString((double)num3 / 10.0);
                    }
                    else
                    {
                        p11 = Convert.ToString((double)num35 / 10.0);
                    }
                    ushort num36 = (ushort)(ScriptOps.RxNoiseFigureAsyncDataParam.RF3Rx1Rx2PowerValue >> 16);
                    if (num36 > 32767)
                    {
                        short num3 = (short)((int)num36 - 65536);
                        p12 = Convert.ToString((double)num3 / 10.0);
                    }
                    else
                    {
                        p12 = Convert.ToString((double)num36 / 10.0);
                    }
                    ushort num37 = (ushort)(ScriptOps.RxNoiseFigureAsyncDataParam.RF3Rx3Rx4PowerValue & 65535U);
                    if (num37 > 32767)
                    {
                        short num3 = (short)((int)num37 - 65536);
                        p13 = Convert.ToString((double)num3 / 10.0);
                    }
                    else
                    {
                        p13 = Convert.ToString((double)num37 / 10.0);
                    }
                    ushort num38 = (ushort)(ScriptOps.RxNoiseFigureAsyncDataParam.RF3Rx3Rx4PowerValue >> 16);
                    if (num38 > 32767)
                    {
                        short num3 = (short)((int)num38 - 65536);
                        p14 = Convert.ToString((double)num3 / 10.0);
                    }
                    else
                    {
                        p14 = Convert.ToString((double)num38 / 10.0);
                    }
                    Timestamp = Convert.ToString(ScriptOps.RxNoiseFigureAsyncDataParam.TimeStamp);
                }
                else if (GlobalRef.g_RadarDeviceId == 8U)
                {
                    StatusFlag = Convert.ToString(ScriptOps.RxNoiseFigureAsyncDataParam.StatusFlags);
                    Errorcode = Convert.ToString(ScriptOps.RxNoiseFigureAsyncDataParam.ErrorCode);
                    Profileindex = Convert.ToString(ScriptOps.RxNoiseFigureAsyncDataParam.ProfileIndex);
                    ushort num39 = (ushort)(ScriptOps.RxNoiseFigureAsyncDataParam.RF1Rx1Rx2PowerValue & 65535U);
                    if (num39 > 32767)
                    {
                        short num3 = (short)((int)num39 - 65536);
                        p3 = Convert.ToString((double)num3 / 10.0);
                    }
                    else
                    {
                        p3 = Convert.ToString((double)num39 / 10.0);
                    }
                    ushort num40 = (ushort)(ScriptOps.RxNoiseFigureAsyncDataParam.RF1Rx1Rx2PowerValue >> 16);
                    if (num40 > 32767)
                    {
                        short num3 = (short)((int)num40 - 65536);
                        p4 = Convert.ToString((double)num3 / 10.0);
                    }
                    else
                    {
                        p4 = Convert.ToString((double)num40 / 10.0);
                    }
                    ushort num41 = (ushort)(ScriptOps.RxNoiseFigureAsyncDataParam.RF1Rx3Rx4PowerValue & 65535U);
                    if (num41 > 32767)
                    {
                        short num3 = (short)((int)num41 - 65536);
                        p5 = Convert.ToString((double)num3 / 10.0);
                    }
                    else
                    {
                        p5 = Convert.ToString((double)num41 / 10.0);
                    }
                    ushort num42 = (ushort)(ScriptOps.RxNoiseFigureAsyncDataParam.RF1Rx3Rx4PowerValue >> 16);
                    if (num42 > 32767)
                    {
                        short num3 = (short)((int)num42 - 65536);
                        p6 = Convert.ToString((double)num3 / 10.0);
                    }
                    else
                    {
                        p6 = Convert.ToString((double)num42 / 10.0);
                    }
                    ushort num43 = (ushort)(ScriptOps.RxNoiseFigureAsyncDataParam.RF2Rx1Rx2PowerValue & 65535U);
                    if (num43 > 32767)
                    {
                        short num3 = (short)((int)num43 - 65536);
                        p7 = Convert.ToString((double)num3 / 10.0);
                    }
                    else
                    {
                        p7 = Convert.ToString((double)num43 / 10.0);
                    }
                    ushort num44 = (ushort)(ScriptOps.RxNoiseFigureAsyncDataParam.RF2Rx1Rx2PowerValue >> 16);
                    if (num44 > 32767)
                    {
                        short num3 = (short)((int)num44 - 65536);
                        p8 = Convert.ToString((double)num3 / 10.0);
                    }
                    else
                    {
                        p8 = Convert.ToString((double)num44 / 10.0);
                    }
                    ushort num45 = (ushort)(ScriptOps.RxNoiseFigureAsyncDataParam.RF2Rx3Rx4PowerValue & 65535U);
                    if (num45 > 32767)
                    {
                        short num3 = (short)((int)num45 - 65536);
                        p9 = Convert.ToString((double)num3 / 10.0);
                    }
                    else
                    {
                        p9 = Convert.ToString((double)num45 / 10.0);
                    }
                    ushort num46 = (ushort)(ScriptOps.RxNoiseFigureAsyncDataParam.RF2Rx3Rx4PowerValue >> 16);
                    if (num46 > 32767)
                    {
                        short num3 = (short)((int)num46 - 65536);
                        p10 = Convert.ToString((double)num3 / 10.0);
                    }
                    else
                    {
                        p10 = Convert.ToString((double)num46 / 10.0);
                    }
                    ushort num47 = (ushort)(ScriptOps.RxNoiseFigureAsyncDataParam.RF3Rx1Rx2PowerValue & 65535U);
                    if (num47 > 32767)
                    {
                        short num3 = (short)((int)num47 - 65536);
                        p11 = Convert.ToString((double)num3 / 10.0);
                    }
                    else
                    {
                        p11 = Convert.ToString((double)num47 / 10.0);
                    }
                    ushort num48 = (ushort)(ScriptOps.RxNoiseFigureAsyncDataParam.RF3Rx1Rx2PowerValue >> 16);
                    if (num48 > 32767)
                    {
                        short num3 = (short)((int)num48 - 65536);
                        p12 = Convert.ToString((double)num3 / 10.0);
                    }
                    else
                    {
                        p12 = Convert.ToString((double)num48 / 10.0);
                    }
                    ushort num49 = (ushort)(ScriptOps.RxNoiseFigureAsyncDataParam.RF3Rx3Rx4PowerValue & 65535U);
                    if (num49 > 32767)
                    {
                        short num3 = (short)((int)num49 - 65536);
                        p13 = Convert.ToString((double)num3 / 10.0);
                    }
                    else
                    {
                        p13 = Convert.ToString((double)num49 / 10.0);
                    }
                    ushort num50 = (ushort)(ScriptOps.RxNoiseFigureAsyncDataParam.RF3Rx3Rx4PowerValue >> 16);
                    if (num50 > 32767)
                    {
                        short num3 = (short)((int)num50 - 65536);
                        p14 = Convert.ToString((double)num3 / 10.0);
                    }
                    else
                    {
                        p14 = Convert.ToString((double)num50 / 10.0);
                    }
                    Timestamp = Convert.ToString(ScriptOps.RxNoiseFigureAsyncDataParam.TimeStamp);
                }
            }
            if ((num == 0 && ((GlobalRef.g_CasCadeDeviceSpiConnect & 1U) == 1U || (GlobalRef.g_CasCadeDeviceSpiConnect & 2U) == 2U || (GlobalRef.g_CasCadeDeviceSpiConnect & 4U) == 4U || (GlobalRef.g_CasCadeDeviceSpiConnect & 8U) == 8U)) || GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
            {
                string full_command4 = string.Format("Status: Passed", new object[0]);
                m_GuiManager.RecordLog(6, full_command4);
            }
            else
            {
                string msg = string.Format("Status: Failed, Error Type: {0}", new object[]
                {
                    GetErrorType(num)
                });
                GlobalRef.LuaWrapper.PrintError(msg);
            }
            if (GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
            {
                if (iRs232ConnectDisconnect_impl() == 0 && !GlobalRef.g_NtvRS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
                {
                    m_GuiManager.DllOps.iConnect(1U, 0U);
                    string full_command5 = string.Format("Debug Port Reconnected!", new object[0]);
                    m_GuiManager.RecordLog(9, full_command5);
                    ScriptOps.KeepTrying(2000, new Func<bool>(spare_read));
                }
            }
            else if (GlobalRef.g_CasCadeDeviceSpiConnect == 0U)
            {
                string full_command6 = string.Format("Error Occurred in Port open close", new object[0]);
                m_GuiManager.RecordLog(9, full_command6);
            }
            return num;
        }

        public int UpdateNSetRxMixerInputPowerMonitroingConfData(ushort RadarDeviceId, char ReportingMode, char ProfileIndex, char Tx1Enable, char Tx2Enable, char Tx3Enable, uint Thresholds)
        {
            int result = -1;
            GlobalRef.g_RadarDeviceId = (uint)RadarDeviceId;
            ScriptOps.m_MainForm.AnalogMon2Config.UpdateRxMixerInputPowerMonConfigData();
            m_MonRxMixerInputPowerConfigParameters.ReportingMode = ReportingMode;
            m_MonRxMixerInputPowerConfigParameters.ProfileIndex = ProfileIndex;
            m_MonRxMixerInputPowerConfigParameters.Tx1Enable = Tx1Enable;
            m_MonRxMixerInputPowerConfigParameters.Tx2Enable = Tx2Enable;
            m_MonRxMixerInputPowerConfigParameters.Tx3Enable = Tx3Enable;
            m_MonRxMixerInputPowerConfigParameters.MinThresholds = (ushort)((byte)(Thresholds & 65535U));
            m_MonRxMixerInputPowerConfigParameters.MaxThresholds = (ushort)((byte)(Thresholds >> 16));
            ScriptOps.m_MainForm.AnalogMon2Config.UpdateRxMixerInputPowerMonConfigDataFrmCmdSrc();
            return result;
        }

        public int UpdateNRxMixerInputPowerMonitroingConfigurationData_cmd(out string StatusFlag, out string Errorcode, out string ProfileId, out string Rx1MixerInputVolVal, out string Rx2MixerInputVolVal, out string Rx3MixerInputVolVal, out string Rx4MixerInputVolVal, out string Timestamp)
        {
            StatusFlag = string.Empty;
            Errorcode = string.Empty;
            Rx1MixerInputVolVal = string.Empty;
            Rx2MixerInputVolVal = string.Empty;
            Rx3MixerInputVolVal = string.Empty;
            Rx4MixerInputVolVal = string.Empty;
            Timestamp = string.Empty;
            ProfileId = string.Empty;
            ScriptOps.m_MainForm.AnalogMon2Config.UpdateRxMixerInputPowerMonConfigData();
            return iSetRxMixerInputPowerMonitroingConfig_ImplForLuaCommand(out StatusFlag, out Errorcode, out ProfileId, out Rx1MixerInputVolVal, out Rx2MixerInputVolVal, out Rx3MixerInputVolVal, out Rx4MixerInputVolVal, out Timestamp);
        }

        private int iSetRxMixerInputPowerMonitroingConfig_ImplForLuaCommand(out string StatusFlag, out string Errorcode, out string ProfileId, out string Rx1MixerInputVolVal, out string Rx2MixerInputVolVal, out string Rx3MixerInputVolVal, out string Rx4MixerInputVolVal, out string Timestamp)
        {
            StatusFlag = string.Empty;
            Errorcode = string.Empty;
            Rx1MixerInputVolVal = string.Empty;
            Rx2MixerInputVolVal = string.Empty;
            Rx3MixerInputVolVal = string.Empty;
            Rx4MixerInputVolVal = string.Empty;
            Timestamp = string.Empty;
            ProfileId = string.Empty;
            RXMixerInputPowerMonitoringConfigurationParam.ReportingMode = (byte)m_MonRxMixerInputPowerConfigParameters.ReportingMode;
            RXMixerInputPowerMonitoringConfigurationParam.ProfileIndex = (byte)m_MonRxMixerInputPowerConfigParameters.ProfileIndex;
            RXMixerInputPowerMonitoringConfigurationParam.TxEnable = (byte)(m_MonRxMixerInputPowerConfigParameters.Tx1Enable | m_MonRxMixerInputPowerConfigParameters.Tx2Enable << 1 | m_MonRxMixerInputPowerConfigParameters.Tx3Enable << 2);
            RXMixerInputPowerMonitoringConfigurationParam.Reserved = 0;
            RXMixerInputPowerMonitoringConfigurationParam.Thresholds = (ushort)((int)(m_MonRxMixerInputPowerConfigParameters.MinThresholds * 256 / 1800) | (int)(m_MonRxMixerInputPowerConfigParameters.MaxThresholds * 256 / 1800) << 8);
            RXMixerInputPowerMonitoringConfigurationParam.Reserved2 = 0;
            RXMixerInputPowerMonitoringConfigurationParam.Reserved3 = 0U;
            IntPtr data = GCHandle.Alloc(RXMixerInputPowerMonitoringConfigurationParam, GCHandleType.Pinned).AddrOfPinnedObject();
            int num;
            if (GlobalRef.g_NtvRS232Connect[(int)GlobalRef.g_RadarDeviceIndex] && GlobalRef.g_CasCadeDeviceSpiConnect == 0U)
            {
                num = m_TsWrapper.Calling_WriteAddr_Single(4294959848U, 1U);
                if (m_GuiManager.DllOps.itempDisconnect(false) == 0)
                {
                    string full_command = string.Format("Debug Port Disconnected", new object[0]);
                    m_GuiManager.RecordLog(0, full_command);
                    if (!GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
                    {
                        iRs232ConnectDisconnect_impl();
                    }
                }
            }
            if (m_RadarDeviceModeConfigParams.NumberOfRadarDevicesDetected <= 1)
            {
                string full_command2 = string.Format("ar1.SetRfMixerInpPowMonConfig({0}, {1}, {2}, {3}, {4}, {5})", new object[]
                {
                    m_MonRxMixerInputPowerConfigParameters.ReportingMode,
                    m_MonRxMixerInputPowerConfigParameters.ProfileIndex,
                    m_MonRxMixerInputPowerConfigParameters.Tx1Enable,
                    m_MonRxMixerInputPowerConfigParameters.Tx2Enable,
                    m_MonRxMixerInputPowerConfigParameters.Tx3Enable,
                    (int)m_MonRxMixerInputPowerConfigParameters.MinThresholds | (int)m_MonRxMixerInputPowerConfigParameters.MaxThresholds << 16
                });
                m_GuiManager.RecordLog(6, full_command2);
            }
            else
            {
                string full_command3 = string.Format("ar1.SetRfMixerInpPowMonConfig_mult({0}, {1}, {2}, {3}, {4}, {5}, {6})", new object[]
                {
                    GlobalRef.g_RadarDeviceId,
                    m_MonRxMixerInputPowerConfigParameters.ReportingMode,
                    m_MonRxMixerInputPowerConfigParameters.ProfileIndex,
                    m_MonRxMixerInputPowerConfigParameters.Tx1Enable,
                    m_MonRxMixerInputPowerConfigParameters.Tx2Enable,
                    m_MonRxMixerInputPowerConfigParameters.Tx3Enable,
                    (int)m_MonRxMixerInputPowerConfigParameters.MinThresholds | (int)m_MonRxMixerInputPowerConfigParameters.MaxThresholds << 16
                });
                m_GuiManager.RecordLog(6, full_command3);
            }
            GlobalRef.g_RxMixPowerMon = 1U;
            num = Imports.RadarLinkImpl_RfRxMixerInPwrConfig(GlobalRef.g_RadarDeviceId, data);
            while (GlobalRef.g_RxMixPowerMon == 0U)
            {
                Thread.Sleep(100);
            }
            if (num == 0)
            {
                if (GlobalRef.g_RadarDeviceId == 1U)
                {
                    StatusFlag = Convert.ToString(ScriptOps.RxMixerInputPowerMonAsyncReportParam.StatusFlags);
                    Errorcode = Convert.ToString(ScriptOps.RxMixerInputPowerMonAsyncReportParam.ErrorCode);
                    Rx1MixerInputVolVal = Convert.ToString((ScriptOps.RxMixerInputPowerMonAsyncReportParam.RxMixerInVolVal & 255U) * 1800U / 256U);
                    Rx2MixerInputVolVal = Convert.ToString((ScriptOps.RxMixerInputPowerMonAsyncReportParam.RxMixerInVolVal >> 8 & 255U) * 1800U / 256U);
                    Rx3MixerInputVolVal = Convert.ToString((ScriptOps.RxMixerInputPowerMonAsyncReportParam.RxMixerInVolVal >> 16 & 255U) * 1800U / 256U);
                    Rx4MixerInputVolVal = Convert.ToString((ScriptOps.RxMixerInputPowerMonAsyncReportParam.RxMixerInVolVal >> 24 & 255U) * 1800U / 256U);
                    Timestamp = Convert.ToString(ScriptOps.RxMixerInputPowerMonAsyncReportParam.TimeStamp);
                    ProfileId = Convert.ToString(ScriptOps.RxMixerInputPowerMonAsyncReportParam.ProfileId);
                }
                else if (GlobalRef.g_RadarDeviceId == 2U)
                {
                    StatusFlag = Convert.ToString(ScriptOps.RxMixerInputPowerMonAsyncReportParam.StatusFlags);
                    Errorcode = Convert.ToString(ScriptOps.RxMixerInputPowerMonAsyncReportParam.ErrorCode);
                    Rx1MixerInputVolVal = Convert.ToString((ScriptOps.RxMixerInputPowerMonAsyncReportParam.RxMixerInVolVal & 255U) * 1800U / 256U);
                    Rx2MixerInputVolVal = Convert.ToString((ScriptOps.RxMixerInputPowerMonAsyncReportParam.RxMixerInVolVal >> 8 & 255U) * 1800U / 256U);
                    Rx3MixerInputVolVal = Convert.ToString((ScriptOps.RxMixerInputPowerMonAsyncReportParam.RxMixerInVolVal >> 16 & 255U) * 1800U / 256U);
                    Rx4MixerInputVolVal = Convert.ToString((ScriptOps.RxMixerInputPowerMonAsyncReportParam.RxMixerInVolVal >> 24 & 255U) * 1800U / 256U);
                    Timestamp = Convert.ToString(ScriptOps.RxMixerInputPowerMonAsyncReportParam.TimeStamp);
                    ProfileId = Convert.ToString(ScriptOps.RxMixerInputPowerMonAsyncReportParam.ProfileId);
                }
                else if (GlobalRef.g_RadarDeviceId == 4U)
                {
                    StatusFlag = Convert.ToString(ScriptOps.RxMixerInputPowerMonAsyncReportParam.StatusFlags);
                    Errorcode = Convert.ToString(ScriptOps.RxMixerInputPowerMonAsyncReportParam.ErrorCode);
                    Rx1MixerInputVolVal = Convert.ToString((ScriptOps.RxMixerInputPowerMonAsyncReportParam.RxMixerInVolVal & 255U) * 1800U / 256U);
                    Rx2MixerInputVolVal = Convert.ToString((ScriptOps.RxMixerInputPowerMonAsyncReportParam.RxMixerInVolVal >> 8 & 255U) * 1800U / 256U);
                    Rx3MixerInputVolVal = Convert.ToString((ScriptOps.RxMixerInputPowerMonAsyncReportParam.RxMixerInVolVal >> 16 & 255U) * 1800U / 256U);
                    Rx4MixerInputVolVal = Convert.ToString((ScriptOps.RxMixerInputPowerMonAsyncReportParam.RxMixerInVolVal >> 24 & 255U) * 1800U / 256U);
                    Timestamp = Convert.ToString(ScriptOps.RxMixerInputPowerMonAsyncReportParam.TimeStamp);
                    ProfileId = Convert.ToString(ScriptOps.RxMixerInputPowerMonAsyncReportParam.ProfileId);
                }
                else if (GlobalRef.g_RadarDeviceId == 8U)
                {
                    StatusFlag = Convert.ToString(ScriptOps.RxMixerInputPowerMonAsyncReportParam.StatusFlags);
                    Errorcode = Convert.ToString(ScriptOps.RxMixerInputPowerMonAsyncReportParam.ErrorCode);
                    Rx1MixerInputVolVal = Convert.ToString((ScriptOps.RxMixerInputPowerMonAsyncReportParam.RxMixerInVolVal & 255U) * 1800U / 256U);
                    Rx2MixerInputVolVal = Convert.ToString((ScriptOps.RxMixerInputPowerMonAsyncReportParam.RxMixerInVolVal >> 8 & 255U) * 1800U / 256U);
                    Rx3MixerInputVolVal = Convert.ToString((ScriptOps.RxMixerInputPowerMonAsyncReportParam.RxMixerInVolVal >> 16 & 255U) * 1800U / 256U);
                    Rx4MixerInputVolVal = Convert.ToString((ScriptOps.RxMixerInputPowerMonAsyncReportParam.RxMixerInVolVal >> 24 & 255U) * 1800U / 256U);
                    Timestamp = Convert.ToString(ScriptOps.RxMixerInputPowerMonAsyncReportParam.TimeStamp);
                    ProfileId = Convert.ToString(ScriptOps.RxMixerInputPowerMonAsyncReportParam.ProfileId);
                }
            }
            if ((num == 0 && ((GlobalRef.g_CasCadeDeviceSpiConnect & 1U) == 1U || (GlobalRef.g_CasCadeDeviceSpiConnect & 2U) == 2U || (GlobalRef.g_CasCadeDeviceSpiConnect & 4U) == 4U || (GlobalRef.g_CasCadeDeviceSpiConnect & 8U) == 8U)) || GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
            {
                string full_command4 = string.Format("Status: Passed", new object[0]);
                m_GuiManager.RecordLog(6, full_command4);
            }
            else
            {
                string msg = string.Format("Status: Failed, Error Type: {0}", new object[]
                {
                    GetErrorType(num)
                });
                GlobalRef.LuaWrapper.PrintError(msg);
            }
            if (GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
            {
                if (iRs232ConnectDisconnect_impl() == 0 && !GlobalRef.g_NtvRS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
                {
                    m_GuiManager.DllOps.iConnect(1U, 0U);
                    string full_command5 = string.Format("Debug Port Reconnected!", new object[0]);
                    m_GuiManager.RecordLog(9, full_command5);
                    ScriptOps.KeepTrying(2000, new Func<bool>(spare_read));
                }
            }
            else if (GlobalRef.g_CasCadeDeviceSpiConnect == 0U)
            {
                string full_command6 = string.Format("Error Occurred in Port open close", new object[0]);
                m_GuiManager.RecordLog(9, full_command6);
            }
            return num;
        }

        public int UpdateNSetInterRxGainPhaseFreqControlConfData(ushort RadarDeviceId, char ProfileIndex, double Rx1DigitalGain, double Rx2DigitalGain, double Rx3DigitalGain, double Rx4DigitalGain, double Rx1DigitalPhaseShift, double Rx2DigitalPhaseShift, double Rx3DigitalPhaseShift, double Rx4DigitalPhaseShift, double Rx1DigitalFreqShift, double Rx2DigitalFreqShift, double Rx3DigitalFreqShift, double Rx4DigitalFreqShift)
        {
            GlobalRef.g_RadarDeviceId = (uint)RadarDeviceId;
            ScriptOps.m_MainForm.ChirpConfigTab.UpdateInterRxGainPhaseFreqControlConfigData();
            m_InterRxGainPhaseFreqControlConfigParameters.ProfileIndex = ProfileIndex;
            m_InterRxGainPhaseFreqControlConfigParameters.Rx1DigitalGain = Rx1DigitalGain;
            m_InterRxGainPhaseFreqControlConfigParameters.Rx2DigitalGain = Rx2DigitalGain;
            m_InterRxGainPhaseFreqControlConfigParameters.Rx3DigitalGain = Rx3DigitalGain;
            m_InterRxGainPhaseFreqControlConfigParameters.Rx4DigitalGain = Rx4DigitalGain;
            m_InterRxGainPhaseFreqControlConfigParameters.Rx1DigitalPhaseShift = Rx1DigitalPhaseShift;
            m_InterRxGainPhaseFreqControlConfigParameters.Rx2DigitalPhaseShift = Rx2DigitalPhaseShift;
            m_InterRxGainPhaseFreqControlConfigParameters.Rx3DigitalPhaseShift = Rx3DigitalPhaseShift;
            m_InterRxGainPhaseFreqControlConfigParameters.Rx4DigitalPhaseShift = Rx4DigitalPhaseShift;
            m_InterRxGainPhaseFreqControlConfigParameters.Rx1DigitalFreqShift = Rx1DigitalFreqShift;
            m_InterRxGainPhaseFreqControlConfigParameters.Rx2DigitalFreqShift = Rx2DigitalFreqShift;
            m_InterRxGainPhaseFreqControlConfigParameters.Rx3DigitalFreqShift = Rx3DigitalFreqShift;
            m_InterRxGainPhaseFreqControlConfigParameters.Rx4DigitalFreqShift = Rx4DigitalFreqShift;
            ScriptOps.m_MainForm.ChirpConfigTab.UpdateInterRxGainPhaseFreqControlConfigDataFrmCmdSrc();
            return iSetInterRxGainPhaseFreqControlConfig_Gui(true, false);
        }

        public int UpdateNSetRxIFStageMonitoringConfData(ushort RadarDeviceId, char ProfileIndex, char ReportingMode, ushort HPFCutofFreqErrorThreshold, ushort LPFCutofFreqErrorThreshold, double IFAGainErrorThreshold)
        {
            int result = -1;
            GlobalRef.g_RadarDeviceId = (uint)RadarDeviceId;
            ScriptOps.m_MainForm.AnalogMon2Config.UpdateRXIFStageMonConfigData();
            m_MonRXIFStageConfigParameters.ProfileIndex = ProfileIndex;
            m_MonRXIFStageConfigParameters.ReportingMode = ReportingMode;
            m_MonRXIFStageConfigParameters.HPFCutofFreqErrorThreshold = HPFCutofFreqErrorThreshold;
            m_MonRXIFStageConfigParameters.LPFCutofFreqErrorThreshold = LPFCutofFreqErrorThreshold;
            m_MonRXIFStageConfigParameters.IFAGainErrorThreshold = IFAGainErrorThreshold;
            ScriptOps.m_MainForm.AnalogMon2Config.UpdateRXIFStageMonConfigDataFrmCmdSrc();
            return result;
        }

        public int UpdateNRxIFStageMonitoringConfigurationData_cmd(out string StatusFlag, out string Errorcode, out string Profileindex, out string Rx1IChHPFCutoffFreqErrVal, out string Rx2IChHPFCutoffFreqErrVal, out string Rx3IChHPFCutoffFreqErrVal, out string Rx4IChHPFCutoffFreqErrVal, out string Rx1QChHPFCutoffFreqErrVal, out string Rx2QChHPFCutoffFreqErrVal, out string Rx3QChHPFCutoffFreqErrVal, out string Rx4QChHPFCutoffFreqErrVal, out string Rx1IChLPFCutoffFreqErrVal, out string Rx2IChLPFCutoffFreqErrVal, out string Rx3IChLPFCutoffFreqErrVal, out string Rx4IChLPFCutoffFreqErrVal, out string Rx1QChLPFCutoffFreqErrVal, out string Rx2QChLPFCutoffFreqErrVal, out string Rx3QChLPFCutoffFreqErrVal, out string Rx4QChLPFCutoffFreqErrVal, out string Rx1IChRxIFAGainErrVal, out string Rx2IChRxIFAGainErrVal, out string Rx3IChRxIFAGainErrVal, out string Rx4IChRxIFAGainErrVal, out string Rx1QChRxIFAGainErrVal, out string Rx2QChRxIFAGainErrVal, out string Rx3QChRxIFAGainErrVal, out string Rx4QChRxIFAGainErrVal, out string ProgIFAGain, out string Timestamp)
        {
            StatusFlag = string.Empty;
            Errorcode = string.Empty;
            Profileindex = string.Empty;
            Rx1IChHPFCutoffFreqErrVal = string.Empty;
            Rx2IChHPFCutoffFreqErrVal = string.Empty;
            Rx3IChHPFCutoffFreqErrVal = string.Empty;
            Rx4IChHPFCutoffFreqErrVal = string.Empty;
            Rx1QChHPFCutoffFreqErrVal = string.Empty;
            Rx2QChHPFCutoffFreqErrVal = string.Empty;
            Rx3QChHPFCutoffFreqErrVal = string.Empty;
            Rx4QChHPFCutoffFreqErrVal = string.Empty;
            Rx1IChLPFCutoffFreqErrVal = string.Empty;
            Rx2IChLPFCutoffFreqErrVal = string.Empty;
            Rx3IChLPFCutoffFreqErrVal = string.Empty;
            Rx4IChLPFCutoffFreqErrVal = string.Empty;
            Rx1QChLPFCutoffFreqErrVal = string.Empty;
            Rx2QChLPFCutoffFreqErrVal = string.Empty;
            Rx3QChLPFCutoffFreqErrVal = string.Empty;
            Rx4QChLPFCutoffFreqErrVal = string.Empty;
            Rx1IChRxIFAGainErrVal = string.Empty;
            Rx2IChRxIFAGainErrVal = string.Empty;
            Rx3IChRxIFAGainErrVal = string.Empty;
            Rx4IChRxIFAGainErrVal = string.Empty;
            Rx1QChRxIFAGainErrVal = string.Empty;
            Rx2QChRxIFAGainErrVal = string.Empty;
            Rx3QChRxIFAGainErrVal = string.Empty;
            Rx4QChRxIFAGainErrVal = string.Empty;
            Timestamp = string.Empty;
            ProgIFAGain = string.Empty;
            ScriptOps.m_MainForm.AnalogMon2Config.UpdateRXIFStageMonConfigData();
            return iSetRxIFStageMonConfig_ImplForLuaCommand(out StatusFlag, out Errorcode, out Profileindex, out Rx1IChHPFCutoffFreqErrVal, out Rx2IChHPFCutoffFreqErrVal, out Rx3IChHPFCutoffFreqErrVal, out Rx4IChHPFCutoffFreqErrVal, out Rx1QChHPFCutoffFreqErrVal, out Rx2QChHPFCutoffFreqErrVal, out Rx3QChHPFCutoffFreqErrVal, out Rx4QChHPFCutoffFreqErrVal, out Rx1IChLPFCutoffFreqErrVal, out Rx2IChLPFCutoffFreqErrVal, out Rx3IChLPFCutoffFreqErrVal, out Rx4IChLPFCutoffFreqErrVal, out Rx1QChLPFCutoffFreqErrVal, out Rx2QChLPFCutoffFreqErrVal, out Rx3QChLPFCutoffFreqErrVal, out Rx4QChLPFCutoffFreqErrVal, out Rx1IChRxIFAGainErrVal, out Rx2IChRxIFAGainErrVal, out Rx3IChRxIFAGainErrVal, out Rx4IChRxIFAGainErrVal, out Rx1QChRxIFAGainErrVal, out Rx2QChRxIFAGainErrVal, out Rx3QChRxIFAGainErrVal, out Rx4QChRxIFAGainErrVal, out ProgIFAGain, out Timestamp);
        }

        private int iSetRxIFStageMonConfig_ImplForLuaCommand(out string StatusFlag, out string Errorcode, out string Profileindex, out string Rx1IChHPFCutoffFreqErrVal, out string Rx2IChHPFCutoffFreqErrVal, out string Rx3IChHPFCutoffFreqErrVal, out string Rx4IChHPFCutoffFreqErrVal, out string Rx1QChHPFCutoffFreqErrVal, out string Rx2QChHPFCutoffFreqErrVal, out string Rx3QChHPFCutoffFreqErrVal, out string Rx4QChHPFCutoffFreqErrVal, out string Rx1IChLPFCutoffFreqErrVal, out string Rx2IChLPFCutoffFreqErrVal, out string Rx3IChLPFCutoffFreqErrVal, out string Rx4IChLPFCutoffFreqErrVal, out string Rx1QChLPFCutoffFreqErrVal, out string Rx2QChLPFCutoffFreqErrVal, out string Rx3QChLPFCutoffFreqErrVal, out string Rx4QChLPFCutoffFreqErrVal, out string Rx1IChRxIFAGainErrVal, out string Rx2IChRxIFAGainErrVal, out string Rx3IChRxIFAGainErrVal, out string Rx4IChRxIFAGainErrVal, out string Rx1QChRxIFAGainErrVal, out string Rx2QChRxIFAGainErrVal, out string Rx3QChRxIFAGainErrVal, out string Rx4QChRxIFAGainErrVal, out string ProgIFAGain, out string Timestamp)
        {
            StatusFlag = string.Empty;
            Errorcode = string.Empty;
            Profileindex = string.Empty;
            Rx1IChHPFCutoffFreqErrVal = string.Empty;
            Rx2IChHPFCutoffFreqErrVal = string.Empty;
            Rx3IChHPFCutoffFreqErrVal = string.Empty;
            Rx4IChHPFCutoffFreqErrVal = string.Empty;
            Rx1QChHPFCutoffFreqErrVal = string.Empty;
            Rx2QChHPFCutoffFreqErrVal = string.Empty;
            Rx3QChHPFCutoffFreqErrVal = string.Empty;
            Rx4QChHPFCutoffFreqErrVal = string.Empty;
            Rx1IChLPFCutoffFreqErrVal = string.Empty;
            Rx2IChLPFCutoffFreqErrVal = string.Empty;
            Rx3IChLPFCutoffFreqErrVal = string.Empty;
            Rx4IChLPFCutoffFreqErrVal = string.Empty;
            Rx1QChLPFCutoffFreqErrVal = string.Empty;
            Rx2QChLPFCutoffFreqErrVal = string.Empty;
            Rx3QChLPFCutoffFreqErrVal = string.Empty;
            Rx4QChLPFCutoffFreqErrVal = string.Empty;
            Rx1IChRxIFAGainErrVal = string.Empty;
            Rx2IChRxIFAGainErrVal = string.Empty;
            Rx3IChRxIFAGainErrVal = string.Empty;
            Rx4IChRxIFAGainErrVal = string.Empty;
            Rx1QChRxIFAGainErrVal = string.Empty;
            Rx2QChRxIFAGainErrVal = string.Empty;
            Rx3QChRxIFAGainErrVal = string.Empty;
            Rx4QChRxIFAGainErrVal = string.Empty;
            Timestamp = string.Empty;
            ProgIFAGain = string.Empty;
            RxIFStageMonitoringConfigurationParam.ProfileIndex = (byte)m_MonRXIFStageConfigParameters.ProfileIndex;
            RxIFStageMonitoringConfigurationParam.Reserved = 0;
            RxIFStageMonitoringConfigurationParam.Reserved2 = 0;
            RxIFStageMonitoringConfigurationParam.ReportingMode = (byte)m_MonRXIFStageConfigParameters.ReportingMode;
            RxIFStageMonitoringConfigurationParam.HPFCuttoffFreqErrorThreshold = m_MonRXIFStageConfigParameters.HPFCutofFreqErrorThreshold;
            RxIFStageMonitoringConfigurationParam.LPFCuttoffFreqErrorThreshold = m_MonRXIFStageConfigParameters.LPFCutofFreqErrorThreshold;
            RxIFStageMonitoringConfigurationParam.IFAGainErrorThreshold = (ushort)(m_MonRXIFStageConfigParameters.IFAGainErrorThreshold * 10.0);
            RxIFStageMonitoringConfigurationParam.Reserved3 = 0U;
            IntPtr data = GCHandle.Alloc(RxIFStageMonitoringConfigurationParam, GCHandleType.Pinned).AddrOfPinnedObject();
            int num;
            if (GlobalRef.g_NtvRS232Connect[(int)GlobalRef.g_RadarDeviceIndex] && GlobalRef.g_CasCadeDeviceSpiConnect == 0U)
            {
                num = m_TsWrapper.Calling_WriteAddr_Single(4294959848U, 1U);
                if (m_GuiManager.DllOps.itempDisconnect(false) == 0)
                {
                    string full_command = string.Format("Debug Port Disconnected", new object[0]);
                    m_GuiManager.RecordLog(0, full_command);
                    if (!GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
                    {
                        iRs232ConnectDisconnect_impl();
                    }
                }
            }
            if (m_RadarDeviceModeConfigParams.NumberOfRadarDevicesDetected <= 1)
            {
                string full_command2 = string.Format("ar1.SetRfRxIfStageMonConfig({0}, {1}, {2}, {3}, {4} )", new object[]
                {
                    m_MonRXIFStageConfigParameters.ProfileIndex,
                    m_MonRXIFStageConfigParameters.ReportingMode,
                    m_MonRXIFStageConfigParameters.HPFCutofFreqErrorThreshold,
                    m_MonRXIFStageConfigParameters.LPFCutofFreqErrorThreshold,
                    (decimal)Math.Round(m_MonRXIFStageConfigParameters.IFAGainErrorThreshold, 1)
                });
                m_GuiManager.RecordLog(6, full_command2);
            }
            else
            {
                string full_command3 = string.Format("ar1.SetRfRxIfStageMonConfig_mult({0}, {1}, {2}, {3}, {4}, {5})", new object[]
                {
                    GlobalRef.g_RadarDeviceId,
                    m_MonRXIFStageConfigParameters.ProfileIndex,
                    m_MonRXIFStageConfigParameters.ReportingMode,
                    m_MonRXIFStageConfigParameters.HPFCutofFreqErrorThreshold,
                    m_MonRXIFStageConfigParameters.LPFCutofFreqErrorThreshold,
                    (decimal)Math.Round(m_MonRXIFStageConfigParameters.IFAGainErrorThreshold, 1)
                });
                m_GuiManager.RecordLog(6, full_command3);
            }
            GlobalRef.g_RxIFStageMon = 1U;
            num = Imports.RadarLinkImpl_RfRxIfStageMonConfig(GlobalRef.g_RadarDeviceId, data);
            while (GlobalRef.g_RxIFStageMon == 0U)
            {
                Thread.Sleep(100);
            }
            if (num == 0)
            {
                if (GlobalRef.g_RadarDeviceId == 1U)
                {
                    StatusFlag = Convert.ToString(ScriptOps.RxIFStageAsyncDataParam.StatusFlags);
                    Errorcode = Convert.ToString(ScriptOps.RxIFStageAsyncDataParam.ErrorCode);
                    Profileindex = Convert.ToString(ScriptOps.RxIFStageAsyncDataParam.ProfileIndex);
                    Rx1IChHPFCutoffFreqErrVal = Convert.ToString((sbyte)(ScriptOps.RxIFStageAsyncDataParam.Rx1Rx2Rx3Rx4IChannnelHPFCuttoffFreqErrorVal & 255));
                    Rx2IChHPFCutoffFreqErrVal = Convert.ToString((sbyte)(ScriptOps.RxIFStageAsyncDataParam.Rx1Rx2Rx3Rx4IChannnelHPFCuttoffFreqErrorVal >> 8 & 255));
                    Rx3IChHPFCutoffFreqErrVal = Convert.ToString((sbyte)(ScriptOps.RxIFStageAsyncDataParam.Rx1Rx2Rx3Rx4IChannnelHPFCuttoffFreqErrorVal >> 16 & 255));
                    Rx4IChHPFCutoffFreqErrVal = Convert.ToString((sbyte)(ScriptOps.RxIFStageAsyncDataParam.Rx1Rx2Rx3Rx4IChannnelHPFCuttoffFreqErrorVal >> 24 & 255));
                    Rx1QChHPFCutoffFreqErrVal = Convert.ToString((sbyte)(ScriptOps.RxIFStageAsyncDataParam.Rx1Rx2Rx3Rx4QChannnelHPFCuttoffFreqErrorVal & 255));
                    Rx2QChHPFCutoffFreqErrVal = Convert.ToString((sbyte)(ScriptOps.RxIFStageAsyncDataParam.Rx1Rx2Rx3Rx4QChannnelHPFCuttoffFreqErrorVal >> 8 & 255));
                    Rx3QChHPFCutoffFreqErrVal = Convert.ToString((sbyte)(ScriptOps.RxIFStageAsyncDataParam.Rx1Rx2Rx3Rx4QChannnelHPFCuttoffFreqErrorVal >> 16 & 255));
                    Rx4QChHPFCutoffFreqErrVal = Convert.ToString((sbyte)(ScriptOps.RxIFStageAsyncDataParam.Rx1Rx2Rx3Rx4QChannnelHPFCuttoffFreqErrorVal >> 24 & 255));
                    Rx1IChLPFCutoffFreqErrVal = Convert.ToString((sbyte)(ScriptOps.RxIFStageAsyncDataParam.Rx1Rx2Rx3Rx4IChannnelLPFCuttoffFreqErrorVal & 255));
                    Rx2IChLPFCutoffFreqErrVal = Convert.ToString((sbyte)(ScriptOps.RxIFStageAsyncDataParam.Rx1Rx2Rx3Rx4IChannnelLPFCuttoffFreqErrorVal >> 8 & 255));
                    Rx3IChLPFCutoffFreqErrVal = Convert.ToString((sbyte)(ScriptOps.RxIFStageAsyncDataParam.Rx1Rx2Rx3Rx4IChannnelLPFCuttoffFreqErrorVal >> 16 & 255));
                    Rx4IChLPFCutoffFreqErrVal = Convert.ToString((sbyte)(ScriptOps.RxIFStageAsyncDataParam.Rx1Rx2Rx3Rx4IChannnelLPFCuttoffFreqErrorVal >> 24 & 255));
                    Rx1QChLPFCutoffFreqErrVal = Convert.ToString((sbyte)(ScriptOps.RxIFStageAsyncDataParam.Rx1Rx2Rx3Rx4QChannnelLPFCuttoffFreqErrorVal & 255));
                    Rx2QChLPFCutoffFreqErrVal = Convert.ToString((sbyte)(ScriptOps.RxIFStageAsyncDataParam.Rx1Rx2Rx3Rx4QChannnelLPFCuttoffFreqErrorVal >> 8 & 255));
                    Rx3QChLPFCutoffFreqErrVal = Convert.ToString((sbyte)(ScriptOps.RxIFStageAsyncDataParam.Rx1Rx2Rx3Rx4QChannnelLPFCuttoffFreqErrorVal >> 16 & 255));
                    Rx4QChLPFCutoffFreqErrVal = Convert.ToString((sbyte)(ScriptOps.RxIFStageAsyncDataParam.Rx1Rx2Rx3Rx4QChannnelLPFCuttoffFreqErrorVal >> 24 & 255));
                    ushort num2 = (ushort)(ScriptOps.RxIFStageAsyncDataParam.Rx1Rx2Rx3Rx4IChannnelIFAGainErrorVal & 255);
                    if (num2 > 127)
                    {
                        sbyte b = (sbyte)(num2 - 255);
                        Rx1IChRxIFAGainErrVal = Convert.ToString((double)b / 10.0);
                    }
                    else
                    {
                        Rx1IChRxIFAGainErrVal = Convert.ToString((double)num2 / 10.0);
                    }
                    ushort num3 = (ushort)(ScriptOps.RxIFStageAsyncDataParam.Rx1Rx2Rx3Rx4IChannnelIFAGainErrorVal >> 8 & 255);
                    if (num3 > 127)
                    {
                        sbyte b = (sbyte)(num3 - 255);
                        Rx2IChRxIFAGainErrVal = Convert.ToString((double)b / 10.0);
                    }
                    else
                    {
                        Rx2IChRxIFAGainErrVal = Convert.ToString((double)num3 / 10.0);
                    }
                    ushort num4 = (ushort)(ScriptOps.RxIFStageAsyncDataParam.Rx1Rx2Rx3Rx4IChannnelIFAGainErrorVal >> 16 & 255);
                    if (num4 > 127)
                    {
                        sbyte b = (sbyte)(num4 - 255);
                        Rx3IChRxIFAGainErrVal = Convert.ToString((double)b / 10.0);
                    }
                    else
                    {
                        Rx3IChRxIFAGainErrVal = Convert.ToString((double)num4 / 10.0);
                    }
                    ushort num5 = (ushort)(ScriptOps.RxIFStageAsyncDataParam.Rx1Rx2Rx3Rx4IChannnelIFAGainErrorVal >> 24 & 255);
                    if (num5 > 127)
                    {
                        sbyte b = (sbyte)(num5 - 255);
                        Rx4IChRxIFAGainErrVal = Convert.ToString((double)b / 10.0);
                    }
                    else
                    {
                        Rx4IChRxIFAGainErrVal = Convert.ToString((double)num5 / 10.0);
                    }
                    ushort num6 = (ushort)(ScriptOps.RxIFStageAsyncDataParam.Rx1Rx2Rx3Rx4QChannnelIFAGainErrorVal & 255);
                    if (num6 > 127)
                    {
                        sbyte b = (sbyte)(num6 - 255);
                        Rx1QChRxIFAGainErrVal = Convert.ToString((double)b / 10.0);
                    }
                    else
                    {
                        Rx1QChRxIFAGainErrVal = Convert.ToString((double)num6 / 10.0);
                    }
                    ushort num7 = (ushort)(ScriptOps.RxIFStageAsyncDataParam.Rx1Rx2Rx3Rx4QChannnelIFAGainErrorVal >> 8 & 255);
                    if (num7 > 127)
                    {
                        sbyte b = (sbyte)(num7 - 255);
                        Rx2QChRxIFAGainErrVal = Convert.ToString((double)b / 10.0);
                    }
                    else
                    {
                        Rx2QChRxIFAGainErrVal = Convert.ToString((double)num7 / 10.0);
                    }
                    ushort num8 = (ushort)(ScriptOps.RxIFStageAsyncDataParam.Rx1Rx2Rx3Rx4QChannnelIFAGainErrorVal >> 16 & 255);
                    if (num8 > 127)
                    {
                        sbyte b = (sbyte)(num8 - 255);
                        Rx3QChRxIFAGainErrVal = Convert.ToString((double)b / 10.0);
                    }
                    else
                    {
                        Rx3QChRxIFAGainErrVal = Convert.ToString((double)num8 / 10.0);
                    }
                    ushort num9 = (ushort)(ScriptOps.RxIFStageAsyncDataParam.Rx1Rx2Rx3Rx4QChannnelIFAGainErrorVal >> 24 & 255);
                    if (num9 > 127)
                    {
                        sbyte b = (sbyte)(num9 - 255);
                        Rx4QChRxIFAGainErrVal = Convert.ToString((double)b / 10.0);
                    }
                    else
                    {
                        Rx4QChRxIFAGainErrVal = Convert.ToString((double)num9 / 10.0);
                    }
                    Timestamp = Convert.ToString(ScriptOps.RxIFStageAsyncDataParam.TimeStamp);
                    ushort num10 = (ushort)(ScriptOps.RxIFStageAsyncDataParam.Reserved3 & 255U);
                    if (num10 > 127)
                    {
                        sbyte b = (sbyte)(num10 - 255);
                        ProgIFAGain = Convert.ToString(b);
                    }
                    else
                    {
                        ProgIFAGain = Convert.ToString(num10);
                    }
                }
                else if (GlobalRef.g_RadarDeviceId == 2U)
                {
                    StatusFlag = Convert.ToString(ScriptOps.RxIFStageAsyncDataParam.StatusFlags);
                    Errorcode = Convert.ToString(ScriptOps.RxIFStageAsyncDataParam.ErrorCode);
                    Profileindex = Convert.ToString(ScriptOps.RxIFStageAsyncDataParam.ProfileIndex);
                    Rx1IChHPFCutoffFreqErrVal = Convert.ToString((sbyte)(ScriptOps.RxIFStageAsyncDataParam.Rx1Rx2Rx3Rx4IChannnelHPFCuttoffFreqErrorVal & 255));
                    Rx2IChHPFCutoffFreqErrVal = Convert.ToString((sbyte)(ScriptOps.RxIFStageAsyncDataParam.Rx1Rx2Rx3Rx4IChannnelHPFCuttoffFreqErrorVal >> 8 & 255));
                    Rx3IChHPFCutoffFreqErrVal = Convert.ToString((sbyte)(ScriptOps.RxIFStageAsyncDataParam.Rx1Rx2Rx3Rx4IChannnelHPFCuttoffFreqErrorVal >> 16 & 255));
                    Rx4IChHPFCutoffFreqErrVal = Convert.ToString((sbyte)(ScriptOps.RxIFStageAsyncDataParam.Rx1Rx2Rx3Rx4IChannnelHPFCuttoffFreqErrorVal >> 24 & 255));
                    Rx1QChHPFCutoffFreqErrVal = Convert.ToString((sbyte)(ScriptOps.RxIFStageAsyncDataParam.Rx1Rx2Rx3Rx4QChannnelHPFCuttoffFreqErrorVal & 255));
                    Rx2QChHPFCutoffFreqErrVal = Convert.ToString((sbyte)(ScriptOps.RxIFStageAsyncDataParam.Rx1Rx2Rx3Rx4QChannnelHPFCuttoffFreqErrorVal >> 8 & 255));
                    Rx3QChHPFCutoffFreqErrVal = Convert.ToString((sbyte)(ScriptOps.RxIFStageAsyncDataParam.Rx1Rx2Rx3Rx4QChannnelHPFCuttoffFreqErrorVal >> 16 & 255));
                    Rx4QChHPFCutoffFreqErrVal = Convert.ToString((sbyte)(ScriptOps.RxIFStageAsyncDataParam.Rx1Rx2Rx3Rx4QChannnelHPFCuttoffFreqErrorVal >> 24 & 255));
                    Rx1IChLPFCutoffFreqErrVal = Convert.ToString((sbyte)(ScriptOps.RxIFStageAsyncDataParam.Rx1Rx2Rx3Rx4IChannnelLPFCuttoffFreqErrorVal & 255));
                    Rx2IChLPFCutoffFreqErrVal = Convert.ToString((sbyte)(ScriptOps.RxIFStageAsyncDataParam.Rx1Rx2Rx3Rx4IChannnelLPFCuttoffFreqErrorVal >> 8 & 255));
                    Rx3IChLPFCutoffFreqErrVal = Convert.ToString((sbyte)(ScriptOps.RxIFStageAsyncDataParam.Rx1Rx2Rx3Rx4IChannnelLPFCuttoffFreqErrorVal >> 16 & 255));
                    Rx4IChLPFCutoffFreqErrVal = Convert.ToString((sbyte)(ScriptOps.RxIFStageAsyncDataParam.Rx1Rx2Rx3Rx4IChannnelLPFCuttoffFreqErrorVal >> 24 & 255));
                    Rx1QChLPFCutoffFreqErrVal = Convert.ToString((sbyte)(ScriptOps.RxIFStageAsyncDataParam.Rx1Rx2Rx3Rx4QChannnelLPFCuttoffFreqErrorVal & 255));
                    Rx2QChLPFCutoffFreqErrVal = Convert.ToString((sbyte)(ScriptOps.RxIFStageAsyncDataParam.Rx1Rx2Rx3Rx4QChannnelLPFCuttoffFreqErrorVal >> 8 & 255));
                    Rx3QChLPFCutoffFreqErrVal = Convert.ToString((sbyte)(ScriptOps.RxIFStageAsyncDataParam.Rx1Rx2Rx3Rx4QChannnelLPFCuttoffFreqErrorVal >> 16 & 255));
                    Rx4QChLPFCutoffFreqErrVal = Convert.ToString((sbyte)(ScriptOps.RxIFStageAsyncDataParam.Rx1Rx2Rx3Rx4QChannnelLPFCuttoffFreqErrorVal >> 24 & 255));
                    ushort num11 = (ushort)(ScriptOps.RxIFStageAsyncDataParam.Rx1Rx2Rx3Rx4IChannnelIFAGainErrorVal & 255);
                    if (num11 > 127)
                    {
                        sbyte b = (sbyte)(num11 - 255);
                        Rx1IChRxIFAGainErrVal = Convert.ToString((double)b / 10.0);
                    }
                    else
                    {
                        Rx1IChRxIFAGainErrVal = Convert.ToString((double)num11 / 10.0);
                    }
                    ushort num12 = (ushort)(ScriptOps.RxIFStageAsyncDataParam.Rx1Rx2Rx3Rx4IChannnelIFAGainErrorVal >> 8 & 255);
                    if (num12 > 127)
                    {
                        sbyte b = (sbyte)(num12 - 255);
                        Rx2IChRxIFAGainErrVal = Convert.ToString((double)b / 10.0);
                    }
                    else
                    {
                        Rx2IChRxIFAGainErrVal = Convert.ToString((double)num12 / 10.0);
                    }
                    ushort num13 = (ushort)(ScriptOps.RxIFStageAsyncDataParam.Rx1Rx2Rx3Rx4IChannnelIFAGainErrorVal >> 16 & 255);
                    if (num13 > 127)
                    {
                        sbyte b = (sbyte)(num13 - 255);
                        Rx3IChRxIFAGainErrVal = Convert.ToString((double)b / 10.0);
                    }
                    else
                    {
                        Rx3IChRxIFAGainErrVal = Convert.ToString((double)num13 / 10.0);
                    }
                    ushort num14 = (ushort)(ScriptOps.RxIFStageAsyncDataParam.Rx1Rx2Rx3Rx4IChannnelIFAGainErrorVal >> 24 & 255);
                    if (num14 > 127)
                    {
                        sbyte b = (sbyte)(num14 - 255);
                        Rx4IChRxIFAGainErrVal = Convert.ToString((double)b / 10.0);
                    }
                    else
                    {
                        Rx4IChRxIFAGainErrVal = Convert.ToString((double)num14 / 10.0);
                    }
                    ushort num15 = (ushort)(ScriptOps.RxIFStageAsyncDataParam.Rx1Rx2Rx3Rx4QChannnelIFAGainErrorVal & 255);
                    if (num15 > 127)
                    {
                        sbyte b = (sbyte)(num15 - 255);
                        Rx1QChRxIFAGainErrVal = Convert.ToString((double)b / 10.0);
                    }
                    else
                    {
                        Rx1QChRxIFAGainErrVal = Convert.ToString((double)num15 / 10.0);
                    }
                    ushort num16 = (ushort)(ScriptOps.RxIFStageAsyncDataParam.Rx1Rx2Rx3Rx4QChannnelIFAGainErrorVal >> 8 & 255);
                    if (num16 > 127)
                    {
                        sbyte b = (sbyte)(num16 - 255);
                        Rx2QChRxIFAGainErrVal = Convert.ToString((double)b / 10.0);
                    }
                    else
                    {
                        Rx2QChRxIFAGainErrVal = Convert.ToString((double)num16 / 10.0);
                    }
                    ushort num17 = (ushort)(ScriptOps.RxIFStageAsyncDataParam.Rx1Rx2Rx3Rx4QChannnelIFAGainErrorVal >> 16 & 255);
                    if (num17 > 127)
                    {
                        sbyte b = (sbyte)(num17 - 255);
                        Rx3QChRxIFAGainErrVal = Convert.ToString((double)b / 10.0);
                    }
                    else
                    {
                        Rx3QChRxIFAGainErrVal = Convert.ToString((double)num17 / 10.0);
                    }
                    ushort num18 = (ushort)(ScriptOps.RxIFStageAsyncDataParam.Rx1Rx2Rx3Rx4QChannnelIFAGainErrorVal >> 24 & 255);
                    if (num18 > 127)
                    {
                        sbyte b = (sbyte)(num18 - 255);
                        Rx4QChRxIFAGainErrVal = Convert.ToString((double)b / 10.0);
                    }
                    else
                    {
                        Rx4QChRxIFAGainErrVal = Convert.ToString((double)num18 / 10.0);
                    }
                    Timestamp = Convert.ToString(ScriptOps.RxIFStageAsyncDataParam.TimeStamp);
                    ushort num19 = (ushort)(ScriptOps.RxIFStageAsyncDataParam.Reserved3 & 255U);
                    if (num19 > 127)
                    {
                        sbyte b = (sbyte)(num19 - 255);
                        ProgIFAGain = Convert.ToString(b);
                    }
                    else
                    {
                        ProgIFAGain = Convert.ToString(num19);
                    }
                }
                else if (GlobalRef.g_RadarDeviceId == 4U)
                {
                    StatusFlag = Convert.ToString(ScriptOps.RxIFStageAsyncDataParam.StatusFlags);
                    Errorcode = Convert.ToString(ScriptOps.RxIFStageAsyncDataParam.ErrorCode);
                    Profileindex = Convert.ToString(ScriptOps.RxIFStageAsyncDataParam.ProfileIndex);
                    Rx1IChHPFCutoffFreqErrVal = Convert.ToString((sbyte)(ScriptOps.RxIFStageAsyncDataParam.Rx1Rx2Rx3Rx4IChannnelHPFCuttoffFreqErrorVal & 255));
                    Rx2IChHPFCutoffFreqErrVal = Convert.ToString((sbyte)(ScriptOps.RxIFStageAsyncDataParam.Rx1Rx2Rx3Rx4IChannnelHPFCuttoffFreqErrorVal >> 8 & 255));
                    Rx3IChHPFCutoffFreqErrVal = Convert.ToString((sbyte)(ScriptOps.RxIFStageAsyncDataParam.Rx1Rx2Rx3Rx4IChannnelHPFCuttoffFreqErrorVal >> 16 & 255));
                    Rx4IChHPFCutoffFreqErrVal = Convert.ToString((sbyte)(ScriptOps.RxIFStageAsyncDataParam.Rx1Rx2Rx3Rx4IChannnelHPFCuttoffFreqErrorVal >> 24 & 255));
                    Rx1QChHPFCutoffFreqErrVal = Convert.ToString((sbyte)(ScriptOps.RxIFStageAsyncDataParam.Rx1Rx2Rx3Rx4QChannnelHPFCuttoffFreqErrorVal & 255));
                    Rx2QChHPFCutoffFreqErrVal = Convert.ToString((sbyte)(ScriptOps.RxIFStageAsyncDataParam.Rx1Rx2Rx3Rx4QChannnelHPFCuttoffFreqErrorVal >> 8 & 255));
                    Rx3QChHPFCutoffFreqErrVal = Convert.ToString((sbyte)(ScriptOps.RxIFStageAsyncDataParam.Rx1Rx2Rx3Rx4QChannnelHPFCuttoffFreqErrorVal >> 16 & 255));
                    Rx4QChHPFCutoffFreqErrVal = Convert.ToString((sbyte)(ScriptOps.RxIFStageAsyncDataParam.Rx1Rx2Rx3Rx4QChannnelHPFCuttoffFreqErrorVal >> 24 & 255));
                    Rx1IChLPFCutoffFreqErrVal = Convert.ToString((sbyte)(ScriptOps.RxIFStageAsyncDataParam.Rx1Rx2Rx3Rx4IChannnelLPFCuttoffFreqErrorVal & 255));
                    Rx2IChLPFCutoffFreqErrVal = Convert.ToString((sbyte)(ScriptOps.RxIFStageAsyncDataParam.Rx1Rx2Rx3Rx4IChannnelLPFCuttoffFreqErrorVal >> 8 & 255));
                    Rx3IChLPFCutoffFreqErrVal = Convert.ToString((sbyte)(ScriptOps.RxIFStageAsyncDataParam.Rx1Rx2Rx3Rx4IChannnelLPFCuttoffFreqErrorVal >> 16 & 255));
                    Rx4IChLPFCutoffFreqErrVal = Convert.ToString((sbyte)(ScriptOps.RxIFStageAsyncDataParam.Rx1Rx2Rx3Rx4IChannnelLPFCuttoffFreqErrorVal >> 24 & 255));
                    Rx1QChLPFCutoffFreqErrVal = Convert.ToString((sbyte)(ScriptOps.RxIFStageAsyncDataParam.Rx1Rx2Rx3Rx4QChannnelLPFCuttoffFreqErrorVal & 255));
                    Rx2QChLPFCutoffFreqErrVal = Convert.ToString((sbyte)(ScriptOps.RxIFStageAsyncDataParam.Rx1Rx2Rx3Rx4QChannnelLPFCuttoffFreqErrorVal >> 8 & 255));
                    Rx3QChLPFCutoffFreqErrVal = Convert.ToString((sbyte)(ScriptOps.RxIFStageAsyncDataParam.Rx1Rx2Rx3Rx4QChannnelLPFCuttoffFreqErrorVal >> 16 & 255));
                    Rx4QChLPFCutoffFreqErrVal = Convert.ToString((sbyte)(ScriptOps.RxIFStageAsyncDataParam.Rx1Rx2Rx3Rx4QChannnelLPFCuttoffFreqErrorVal >> 24 & 255));
                    ushort num20 = (ushort)(ScriptOps.RxIFStageAsyncDataParam.Rx1Rx2Rx3Rx4IChannnelIFAGainErrorVal & 255);
                    if (num20 > 127)
                    {
                        sbyte b = (sbyte)(num20 - 255);
                        Rx1IChRxIFAGainErrVal = Convert.ToString((double)b / 10.0);
                    }
                    else
                    {
                        Rx1IChRxIFAGainErrVal = Convert.ToString((double)num20 / 10.0);
                    }
                    ushort num21 = (ushort)(ScriptOps.RxIFStageAsyncDataParam.Rx1Rx2Rx3Rx4IChannnelIFAGainErrorVal >> 8 & 255);
                    if (num21 > 127)
                    {
                        sbyte b = (sbyte)(num21 - 255);
                        Rx2IChRxIFAGainErrVal = Convert.ToString((double)b / 10.0);
                    }
                    else
                    {
                        Rx2IChRxIFAGainErrVal = Convert.ToString((double)num21 / 10.0);
                    }
                    ushort num22 = (ushort)(ScriptOps.RxIFStageAsyncDataParam.Rx1Rx2Rx3Rx4IChannnelIFAGainErrorVal >> 16 & 255);
                    if (num22 > 127)
                    {
                        sbyte b = (sbyte)(num22 - 255);
                        Rx3IChRxIFAGainErrVal = Convert.ToString((double)b / 10.0);
                    }
                    else
                    {
                        Rx3IChRxIFAGainErrVal = Convert.ToString((double)num22 / 10.0);
                    }
                    ushort num23 = (ushort)(ScriptOps.RxIFStageAsyncDataParam.Rx1Rx2Rx3Rx4IChannnelIFAGainErrorVal >> 24 & 255);
                    if (num23 > 127)
                    {
                        sbyte b = (sbyte)(num23 - 255);
                        Rx4IChRxIFAGainErrVal = Convert.ToString((double)b / 10.0);
                    }
                    else
                    {
                        Rx4IChRxIFAGainErrVal = Convert.ToString((double)num23 / 10.0);
                    }
                    ushort num24 = (ushort)(ScriptOps.RxIFStageAsyncDataParam.Rx1Rx2Rx3Rx4QChannnelIFAGainErrorVal & 255);
                    if (num24 > 127)
                    {
                        sbyte b = (sbyte)(num24 - 255);
                        Rx1QChRxIFAGainErrVal = Convert.ToString((double)b / 10.0);
                    }
                    else
                    {
                        Rx1QChRxIFAGainErrVal = Convert.ToString((double)num24 / 10.0);
                    }
                    ushort num25 = (ushort)(ScriptOps.RxIFStageAsyncDataParam.Rx1Rx2Rx3Rx4QChannnelIFAGainErrorVal >> 8 & 255);
                    if (num25 > 127)
                    {
                        sbyte b = (sbyte)(num25 - 255);
                        Rx2QChRxIFAGainErrVal = Convert.ToString((double)b / 10.0);
                    }
                    else
                    {
                        Rx2QChRxIFAGainErrVal = Convert.ToString((double)num25 / 10.0);
                    }
                    ushort num26 = (ushort)(ScriptOps.RxIFStageAsyncDataParam.Rx1Rx2Rx3Rx4QChannnelIFAGainErrorVal >> 16 & 255);
                    if (num26 > 127)
                    {
                        sbyte b = (sbyte)(num26 - 255);
                        Rx3QChRxIFAGainErrVal = Convert.ToString((double)b / 10.0);
                    }
                    else
                    {
                        Rx3QChRxIFAGainErrVal = Convert.ToString((double)num26 / 10.0);
                    }
                    ushort num27 = (ushort)(ScriptOps.RxIFStageAsyncDataParam.Rx1Rx2Rx3Rx4QChannnelIFAGainErrorVal >> 24 & 255);
                    if (num27 > 127)
                    {
                        sbyte b = (sbyte)(num27 - 255);
                        Rx4QChRxIFAGainErrVal = Convert.ToString((double)b / 10.0);
                    }
                    else
                    {
                        Rx4QChRxIFAGainErrVal = Convert.ToString((double)num27 / 10.0);
                    }
                    Timestamp = Convert.ToString(ScriptOps.RxIFStageAsyncDataParam.TimeStamp);
                    ushort num28 = (ushort)(ScriptOps.RxIFStageAsyncDataParam.Reserved3 & 255U);
                    if (num28 > 127)
                    {
                        sbyte b = (sbyte)(num28 - 255);
                        ProgIFAGain = Convert.ToString(b);
                    }
                    else
                    {
                        ProgIFAGain = Convert.ToString(num28);
                    }
                }
                else if (GlobalRef.g_RadarDeviceId == 8U)
                {
                    StatusFlag = Convert.ToString(ScriptOps.RxIFStageAsyncDataParam.StatusFlags);
                    Errorcode = Convert.ToString(ScriptOps.RxIFStageAsyncDataParam.ErrorCode);
                    Profileindex = Convert.ToString(ScriptOps.RxIFStageAsyncDataParam.ProfileIndex);
                    Rx1IChHPFCutoffFreqErrVal = Convert.ToString((sbyte)(ScriptOps.RxIFStageAsyncDataParam.Rx1Rx2Rx3Rx4IChannnelHPFCuttoffFreqErrorVal & 255));
                    Rx2IChHPFCutoffFreqErrVal = Convert.ToString((sbyte)(ScriptOps.RxIFStageAsyncDataParam.Rx1Rx2Rx3Rx4IChannnelHPFCuttoffFreqErrorVal >> 8 & 255));
                    Rx3IChHPFCutoffFreqErrVal = Convert.ToString((sbyte)(ScriptOps.RxIFStageAsyncDataParam.Rx1Rx2Rx3Rx4IChannnelHPFCuttoffFreqErrorVal >> 16 & 255));
                    Rx4IChHPFCutoffFreqErrVal = Convert.ToString((sbyte)(ScriptOps.RxIFStageAsyncDataParam.Rx1Rx2Rx3Rx4IChannnelHPFCuttoffFreqErrorVal >> 24 & 255));
                    Rx1QChHPFCutoffFreqErrVal = Convert.ToString((sbyte)(ScriptOps.RxIFStageAsyncDataParam.Rx1Rx2Rx3Rx4QChannnelHPFCuttoffFreqErrorVal & 255));
                    Rx2QChHPFCutoffFreqErrVal = Convert.ToString((sbyte)(ScriptOps.RxIFStageAsyncDataParam.Rx1Rx2Rx3Rx4QChannnelHPFCuttoffFreqErrorVal >> 8 & 255));
                    Rx3QChHPFCutoffFreqErrVal = Convert.ToString((sbyte)(ScriptOps.RxIFStageAsyncDataParam.Rx1Rx2Rx3Rx4QChannnelHPFCuttoffFreqErrorVal >> 16 & 255));
                    Rx4QChHPFCutoffFreqErrVal = Convert.ToString((sbyte)(ScriptOps.RxIFStageAsyncDataParam.Rx1Rx2Rx3Rx4QChannnelHPFCuttoffFreqErrorVal >> 24 & 255));
                    Rx1IChLPFCutoffFreqErrVal = Convert.ToString((sbyte)(ScriptOps.RxIFStageAsyncDataParam.Rx1Rx2Rx3Rx4IChannnelLPFCuttoffFreqErrorVal & 255));
                    Rx2IChLPFCutoffFreqErrVal = Convert.ToString((sbyte)(ScriptOps.RxIFStageAsyncDataParam.Rx1Rx2Rx3Rx4IChannnelLPFCuttoffFreqErrorVal >> 8 & 255));
                    Rx3IChLPFCutoffFreqErrVal = Convert.ToString((sbyte)(ScriptOps.RxIFStageAsyncDataParam.Rx1Rx2Rx3Rx4IChannnelLPFCuttoffFreqErrorVal >> 16 & 255));
                    Rx4IChLPFCutoffFreqErrVal = Convert.ToString((sbyte)(ScriptOps.RxIFStageAsyncDataParam.Rx1Rx2Rx3Rx4IChannnelLPFCuttoffFreqErrorVal >> 24 & 255));
                    Rx1QChLPFCutoffFreqErrVal = Convert.ToString((sbyte)(ScriptOps.RxIFStageAsyncDataParam.Rx1Rx2Rx3Rx4QChannnelLPFCuttoffFreqErrorVal & 255));
                    Rx2QChLPFCutoffFreqErrVal = Convert.ToString((sbyte)(ScriptOps.RxIFStageAsyncDataParam.Rx1Rx2Rx3Rx4QChannnelLPFCuttoffFreqErrorVal >> 8 & 255));
                    Rx3QChLPFCutoffFreqErrVal = Convert.ToString((sbyte)(ScriptOps.RxIFStageAsyncDataParam.Rx1Rx2Rx3Rx4QChannnelLPFCuttoffFreqErrorVal >> 16 & 255));
                    Rx4QChLPFCutoffFreqErrVal = Convert.ToString((sbyte)(ScriptOps.RxIFStageAsyncDataParam.Rx1Rx2Rx3Rx4QChannnelLPFCuttoffFreqErrorVal >> 24 & 255));
                    ushort num29 = (ushort)(ScriptOps.RxIFStageAsyncDataParam.Rx1Rx2Rx3Rx4IChannnelIFAGainErrorVal & 255);
                    if (num29 > 127)
                    {
                        sbyte b = (sbyte)(num29 - 255);
                        Rx1IChRxIFAGainErrVal = Convert.ToString((double)b / 10.0);
                    }
                    else
                    {
                        Rx1IChRxIFAGainErrVal = Convert.ToString((double)num29 / 10.0);
                    }
                    ushort num30 = (ushort)(ScriptOps.RxIFStageAsyncDataParam.Rx1Rx2Rx3Rx4IChannnelIFAGainErrorVal >> 8 & 255);
                    if (num30 > 127)
                    {
                        sbyte b = (sbyte)(num30 - 255);
                        Rx2IChRxIFAGainErrVal = Convert.ToString((double)b / 10.0);
                    }
                    else
                    {
                        Rx2IChRxIFAGainErrVal = Convert.ToString((double)num30 / 10.0);
                    }
                    ushort num31 = (ushort)(ScriptOps.RxIFStageAsyncDataParam.Rx1Rx2Rx3Rx4IChannnelIFAGainErrorVal >> 16 & 255);
                    if (num31 > 127)
                    {
                        sbyte b = (sbyte)(num31 - 255);
                        Rx3IChRxIFAGainErrVal = Convert.ToString((double)b / 10.0);
                    }
                    else
                    {
                        Rx3IChRxIFAGainErrVal = Convert.ToString((double)num31 / 10.0);
                    }
                    ushort num32 = (ushort)(ScriptOps.RxIFStageAsyncDataParam.Rx1Rx2Rx3Rx4IChannnelIFAGainErrorVal >> 24 & 255);
                    if (num32 > 127)
                    {
                        sbyte b = (sbyte)(num32 - 255);
                        Rx4IChRxIFAGainErrVal = Convert.ToString((double)b / 10.0);
                    }
                    else
                    {
                        Rx4IChRxIFAGainErrVal = Convert.ToString((double)num32 / 10.0);
                    }
                    ushort num33 = (ushort)(ScriptOps.RxIFStageAsyncDataParam.Rx1Rx2Rx3Rx4QChannnelIFAGainErrorVal & 255);
                    if (num33 > 127)
                    {
                        sbyte b = (sbyte)(num33 - 255);
                        Rx1QChRxIFAGainErrVal = Convert.ToString((double)b / 10.0);
                    }
                    else
                    {
                        Rx1QChRxIFAGainErrVal = Convert.ToString((double)num33 / 10.0);
                    }
                    ushort num34 = (ushort)(ScriptOps.RxIFStageAsyncDataParam.Rx1Rx2Rx3Rx4QChannnelIFAGainErrorVal >> 8 & 255);
                    if (num34 > 127)
                    {
                        sbyte b = (sbyte)(num34 - 255);
                        Rx2QChRxIFAGainErrVal = Convert.ToString((double)b / 10.0);
                    }
                    else
                    {
                        Rx2QChRxIFAGainErrVal = Convert.ToString((double)num34 / 10.0);
                    }
                    ushort num35 = (ushort)(ScriptOps.RxIFStageAsyncDataParam.Rx1Rx2Rx3Rx4QChannnelIFAGainErrorVal >> 16 & 255);
                    if (num35 > 127)
                    {
                        sbyte b = (sbyte)(num35 - 255);
                        Rx3QChRxIFAGainErrVal = Convert.ToString((double)b / 10.0);
                    }
                    else
                    {
                        Rx3QChRxIFAGainErrVal = Convert.ToString((double)num35 / 10.0);
                    }
                    ushort num36 = (ushort)(ScriptOps.RxIFStageAsyncDataParam.Rx1Rx2Rx3Rx4QChannnelIFAGainErrorVal >> 24 & 255);
                    if (num36 > 127)
                    {
                        sbyte b = (sbyte)(num36 - 255);
                        Rx4QChRxIFAGainErrVal = Convert.ToString((double)b / 10.0);
                    }
                    else
                    {
                        Rx4QChRxIFAGainErrVal = Convert.ToString((double)num36 / 10.0);
                    }
                    Timestamp = Convert.ToString(ScriptOps.RxIFStageAsyncDataParam.TimeStamp);
                    ushort num37 = (ushort)(ScriptOps.RxIFStageAsyncDataParam.Reserved3 & 255U);
                    if (num37 > 127)
                    {
                        sbyte b = (sbyte)(num37 - 255);
                        ProgIFAGain = Convert.ToString(b);
                    }
                    else
                    {
                        ProgIFAGain = Convert.ToString(num37);
                    }
                }
            }
            if ((num == 0 && ((GlobalRef.g_CasCadeDeviceSpiConnect & 1U) == 1U || (GlobalRef.g_CasCadeDeviceSpiConnect & 2U) == 2U || (GlobalRef.g_CasCadeDeviceSpiConnect & 4U) == 4U || (GlobalRef.g_CasCadeDeviceSpiConnect & 8U) == 8U)) || GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
            {
                string full_command4 = string.Format("Status: Passed", new object[0]);
                m_GuiManager.RecordLog(6, full_command4);
            }
            else
            {
                string msg = string.Format("Status: Failed, Error Type: {0}", new object[]
                {
                    GetErrorType(num)
                });
                GlobalRef.LuaWrapper.PrintError(msg);
            }
            if (GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex] && iRs232ConnectDisconnect_impl() == 0 && !GlobalRef.g_NtvRS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
            {
                m_GuiManager.DllOps.iConnect(1U, 0U);
                string full_command5 = string.Format("Debug Port Reconnected!", new object[0]);
                m_GuiManager.RecordLog(9, full_command5);
                ScriptOps.KeepTrying(2000, new Func<bool>(spare_read));
            }
            return num;
        }

        public int UpdateNSetTx1BPMPhaseMonitoringConfData(ushort RadarDeviceId, byte ProfileIndex, byte phaseShifterMonEna, float phaseShifterIncCfg, float phaseShifterVal1, float phaseShifterVal2, byte ReportingMode, byte RxChannel, float TxBPMPhaseErrorThreshold, float TxBPMAmplitudeErrorThreshold, float TxPhaseShifter1Threshold, float TxPhaseShifter2Threshold, ushort Reserved)
        {
            int result = -1;
            GlobalRef.g_RadarDeviceId = (uint)RadarDeviceId;
            ScriptOps.m_MainForm.AnalogMonConfig.UpdateTX1BPMPhaseMonConfigData();
            m_MonTx1BPMPhaseConfigParameters.ProfileIndex = ProfileIndex;
            m_MonTx1BPMPhaseConfigParameters.phaseShifterCfgIncVal = phaseShifterIncCfg;
            m_MonTx1BPMPhaseConfigParameters.phaseShifterMonEna = (byte)(phaseShifterMonEna >> 1 & 1);
            m_MonTx1BPMPhaseConfigParameters.phaseShifterCfgIncValEna = (byte)(phaseShifterMonEna & 1);
            m_MonTx1BPMPhaseConfigParameters.phaseShifter1 = phaseShifterVal1;
            m_MonTx1BPMPhaseConfigParameters.phaseShifter2 = phaseShifterVal2;
            m_MonTx1BPMPhaseConfigParameters.ReportingMode = ReportingMode;
            m_MonTx1BPMPhaseConfigParameters.Rx0Channel = (byte)(RxChannel & 1);
            m_MonTx1BPMPhaseConfigParameters.Rx1Channel = (byte)(RxChannel >> 1 & 1);
            m_MonTx1BPMPhaseConfigParameters.Rx2Channel = (byte)(RxChannel >> 2 & 1);
            m_MonTx1BPMPhaseConfigParameters.Rx3Channel = (byte)(RxChannel >> 3 & 1);
            m_MonTx1BPMPhaseConfigParameters.TxBPMPhaseErrorThreshold = (double)TxBPMPhaseErrorThreshold;
            m_MonTx1BPMPhaseConfigParameters.TxBPMAmplitudeErrorThreshold = (double)TxBPMAmplitudeErrorThreshold;
            m_MonTx1BPMPhaseConfigParameters.TxPhaseShifter1Threshold = (double)TxPhaseShifter1Threshold;
            m_MonTx1BPMPhaseConfigParameters.TxPhaseShifter2Threshold = (double)TxPhaseShifter2Threshold;
            m_MonTx1BPMPhaseConfigParameters.Reserved = Reserved;
            ScriptOps.m_MainForm.AnalogMonConfig.m000006();
            return result;
        }

        public int UpdateNTx1BPMPhaseMonitoringConfigurationData_cmd(out string StatusFlag, out string Errorcode, out string profileIndex, out string Tx1BPMPhaseErrorValue, out string Tx1BPMAmplitudeErrorValue, out string TxPhaseShifter1Val, out string TxPhaseShifter2Val, out string Timestamp)
        {
            StatusFlag = string.Empty;
            Errorcode = string.Empty;
            profileIndex = string.Empty;
            TxPhaseShifter2Val = string.Empty;
            TxPhaseShifter1Val = string.Empty;
            Tx1BPMPhaseErrorValue = string.Empty;
            Tx1BPMAmplitudeErrorValue = string.Empty;
            Timestamp = string.Empty;
            ScriptOps.m_MainForm.AnalogMonConfig.UpdateTX1BPMPhaseMonConfigData();
            return iSetTx1BPMPhaseMonConfig_ImplForLuaCommand(out StatusFlag, out Errorcode, out profileIndex, out Tx1BPMPhaseErrorValue, out Tx1BPMAmplitudeErrorValue, out TxPhaseShifter1Val, out TxPhaseShifter2Val, out Timestamp);
        }

        private int iSetTx1BPMPhaseMonConfig_ImplForLuaCommand(out string StatusFlag, out string Errorcode, out string profileIndex, out string Tx1BPMPhaseErrorValue, out string Tx1BPMAmplitudeErrorValue, out string TxPhaseShifter1Val, out string TxPhaseShifter2Val, out string Timestamp)
        {
            StatusFlag = string.Empty;
            Errorcode = string.Empty;
            profileIndex = string.Empty;
            TxPhaseShifter2Val = string.Empty;
            TxPhaseShifter1Val = string.Empty;
            Tx1BPMPhaseErrorValue = string.Empty;
            Tx1BPMAmplitudeErrorValue = string.Empty;
            Timestamp = string.Empty;
            ScriptOps.Tx1BPMPhaseMonitoringConfigurationParam.ProfileIndex = 0;
            ScriptOps.Tx1BPMPhaseMonitoringConfigurationParam.phaseShifterCfg = 0;
            ScriptOps.Tx1BPMPhaseMonitoringConfigurationParam.phaseShifterVal1 = 0;
            ScriptOps.Tx1BPMPhaseMonitoringConfigurationParam.phaseShifterVal2 = 0;
            ScriptOps.Tx1BPMPhaseMonitoringConfigurationParam.ReportingMode = 0;
            ScriptOps.Tx1BPMPhaseMonitoringConfigurationParam.RxChannel = 0;
            ScriptOps.Tx1BPMPhaseMonitoringConfigurationParam.TxBPMPhaseErrorThreshold = 0;
            ScriptOps.Tx1BPMPhaseMonitoringConfigurationParam.TxBPMAmplitudeErrorThreshold = 0;
            ScriptOps.Tx1BPMPhaseMonitoringConfigurationParam.TxPhaseShifter1Threshold = 0;
            ScriptOps.Tx1BPMPhaseMonitoringConfigurationParam.TxPhaseShifter2Threshold = 0;
            ScriptOps.Tx1BPMPhaseMonitoringConfigurationParam.Reserved = 0;
            ScriptOps.Tx2BPMPhaseMonitoringConfigurationParam.ProfileIndex = 0;
            ScriptOps.Tx2BPMPhaseMonitoringConfigurationParam.phaseShifterCfg = 0;
            ScriptOps.Tx2BPMPhaseMonitoringConfigurationParam.phaseShifterVal1 = 0;
            ScriptOps.Tx2BPMPhaseMonitoringConfigurationParam.phaseShifterVal2 = 0;
            ScriptOps.Tx2BPMPhaseMonitoringConfigurationParam.ReportingMode = 0;
            ScriptOps.Tx2BPMPhaseMonitoringConfigurationParam.RxChannel = 0;
            ScriptOps.Tx2BPMPhaseMonitoringConfigurationParam.TxBPMPhaseErrorThreshold = 0;
            ScriptOps.Tx2BPMPhaseMonitoringConfigurationParam.TxBPMAmplitudeErrorThreshold = 0;
            ScriptOps.Tx2BPMPhaseMonitoringConfigurationParam.TxPhaseShifter1Threshold = 0;
            ScriptOps.Tx2BPMPhaseMonitoringConfigurationParam.TxPhaseShifter2Threshold = 0;
            ScriptOps.Tx2BPMPhaseMonitoringConfigurationParam.Reserved = 0;
            ScriptOps.Tx3BPMPhaseMonitoringConfigurationParam.ProfileIndex = 0;
            ScriptOps.Tx3BPMPhaseMonitoringConfigurationParam.phaseShifterCfg = 0;
            ScriptOps.Tx3BPMPhaseMonitoringConfigurationParam.phaseShifterVal1 = 0;
            ScriptOps.Tx3BPMPhaseMonitoringConfigurationParam.phaseShifterVal2 = 0;
            ScriptOps.Tx3BPMPhaseMonitoringConfigurationParam.ReportingMode = 0;
            ScriptOps.Tx3BPMPhaseMonitoringConfigurationParam.RxChannel = 0;
            ScriptOps.Tx3BPMPhaseMonitoringConfigurationParam.TxBPMPhaseErrorThreshold = 0;
            ScriptOps.Tx3BPMPhaseMonitoringConfigurationParam.TxBPMAmplitudeErrorThreshold = 0;
            ScriptOps.Tx3BPMPhaseMonitoringConfigurationParam.TxPhaseShifter1Threshold = 0;
            ScriptOps.Tx3BPMPhaseMonitoringConfigurationParam.TxPhaseShifter2Threshold = 0;
            ScriptOps.Tx3BPMPhaseMonitoringConfigurationParam.Reserved = 0;
            ScriptOps.Tx1BPMPhaseMonitoringConfigurationParam.ProfileIndex = m_MonTx1BPMPhaseConfigParameters.ProfileIndex;
            ScriptOps.Tx1BPMPhaseMonitoringConfigurationParam.phaseShifterCfg = (byte)((int)((byte)(Math.Round((double)(m_MonTx1BPMPhaseConfigParameters.phaseShifterCfgIncVal * 64f)) / 360.0) & 63) | (int)m_MonTx1BPMPhaseConfigParameters.phaseShifterCfgIncValEna << 6 | (int)m_MonTx1BPMPhaseConfigParameters.phaseShifterMonEna << 7);
            ScriptOps.Tx1BPMPhaseMonitoringConfigurationParam.phaseShifterVal1 = (byte)(Math.Round((double)(m_MonTx1BPMPhaseConfigParameters.phaseShifter1 * 64f)) / 360.0);
            ScriptOps.Tx1BPMPhaseMonitoringConfigurationParam.phaseShifterVal2 = (byte)(Math.Round((double)(m_MonTx1BPMPhaseConfigParameters.phaseShifter2 * 64f)) / 360.0);
            ScriptOps.Tx1BPMPhaseMonitoringConfigurationParam.ReportingMode = m_MonTx1BPMPhaseConfigParameters.ReportingMode;
            ScriptOps.Tx1BPMPhaseMonitoringConfigurationParam.RxChannel = (byte)((int)m_MonTx1BPMPhaseConfigParameters.Rx0Channel | (int)m_MonTx1BPMPhaseConfigParameters.Rx1Channel << 1 | (int)m_MonTx1BPMPhaseConfigParameters.Rx2Channel << 2 | (int)m_MonTx1BPMPhaseConfigParameters.Rx3Channel << 3);
            ScriptOps.Tx1BPMPhaseMonitoringConfigurationParam.TxBPMPhaseErrorThreshold = (ushort)(m_MonTx1BPMPhaseConfigParameters.TxBPMPhaseErrorThreshold * 65535.0 / 360.0);
            ScriptOps.Tx1BPMPhaseMonitoringConfigurationParam.TxBPMAmplitudeErrorThreshold = (ushort)(m_MonTx1BPMPhaseConfigParameters.TxBPMAmplitudeErrorThreshold * 10.0);
            ScriptOps.Tx1BPMPhaseMonitoringConfigurationParam.TxPhaseShifter1Threshold = (ushort)(m_MonTx1BPMPhaseConfigParameters.TxPhaseShifter1Threshold * 65535.0 / 360.0);
            ScriptOps.Tx1BPMPhaseMonitoringConfigurationParam.TxPhaseShifter2Threshold = (ushort)(m_MonTx1BPMPhaseConfigParameters.TxPhaseShifter2Threshold * 65535.0 / 360.0);
            ScriptOps.Tx1BPMPhaseMonitoringConfigurationParam.Reserved = 0;
            IntPtr f = GCHandle.Alloc(ScriptOps.Tx1BPMPhaseMonitoringConfigurationParam, GCHandleType.Pinned).AddrOfPinnedObject();
            GCHandle.Alloc(ScriptOps.Tx2BPMPhaseMonitoringConfigurationParam, GCHandleType.Pinned).AddrOfPinnedObject();
            GCHandle.Alloc(ScriptOps.Tx3BPMPhaseMonitoringConfigurationParam, GCHandleType.Pinned).AddrOfPinnedObject();
            ScriptOps.Tx1Tx2Tx3BPMPhaseMonitoringConfigurationParam.f000022 = f;
            ScriptOps.Tx1Tx2Tx3BPMPhaseMonitoringConfigurationParam.f000023 = IntPtr.Zero;
            ScriptOps.Tx1Tx2Tx3BPMPhaseMonitoringConfigurationParam.f000024 = IntPtr.Zero;
            IntPtr data = GCHandle.Alloc(ScriptOps.Tx1Tx2Tx3BPMPhaseMonitoringConfigurationParam, GCHandleType.Pinned).AddrOfPinnedObject();
            int num;
            if (GlobalRef.g_NtvRS232Connect[(int)GlobalRef.g_RadarDeviceIndex] && GlobalRef.g_CasCadeDeviceSpiConnect == 0U)
            {
                num = m_TsWrapper.Calling_WriteAddr_Single(4294959848U, 1U);
                if (m_GuiManager.DllOps.itempDisconnect(false) == 0)
                {
                    string full_command = string.Format("Debug Port Disconnected", new object[0]);
                    m_GuiManager.RecordLog(0, full_command);
                    if (!GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
                    {
                        iRs232ConnectDisconnect_impl();
                    }
                }
            }
            if (m_RadarDeviceModeConfigParams.NumberOfRadarDevicesDetected <= 1)
            {
                string full_command2 = string.Format("ar1.SetRfTx0BpmMonConfig({0}, {1}, {2}, {3}, {4}, {5}, {6}, {7}, {8}, {9}, {10}, {11})", new object[]
                {
                    ScriptOps.Tx1BPMPhaseMonitoringConfigurationParam.ProfileIndex,
                    (int)m_MonTx1BPMPhaseConfigParameters.phaseShifterCfgIncValEna | (int)m_MonTx1BPMPhaseConfigParameters.phaseShifterMonEna << 1,
                    (decimal)Math.Round((double)m_MonTx1BPMPhaseConfigParameters.phaseShifterCfgIncVal, 3),
                    (decimal)Math.Round((double)m_MonTx1BPMPhaseConfigParameters.phaseShifter1, 3),
                    (decimal)Math.Round((double)m_MonTx1BPMPhaseConfigParameters.phaseShifter2, 3),
                    ScriptOps.Tx1BPMPhaseMonitoringConfigurationParam.ReportingMode,
                    ScriptOps.Tx1BPMPhaseMonitoringConfigurationParam.RxChannel,
                    (decimal)Math.Round(m_MonTx1BPMPhaseConfigParameters.TxBPMPhaseErrorThreshold, 2),
                    (decimal)Math.Round(m_MonTx1BPMPhaseConfigParameters.TxBPMAmplitudeErrorThreshold, 2),
                    (decimal)Math.Round(m_MonTx1BPMPhaseConfigParameters.TxPhaseShifter1Threshold, 2),
                    (decimal)Math.Round(m_MonTx1BPMPhaseConfigParameters.TxPhaseShifter2Threshold, 2),
                    m_MonTx1BPMPhaseConfigParameters.Reserved
                });
                m_GuiManager.RecordLog(6, full_command2);
            }
            else
            {
                string full_command3 = string.Format("ar1.SetRfTx0BpmMonConfig_mult({0}, {1}, {2}, {3}, {4}, {5}, {6}, {7}, {8}, {9}, {10}, {11}, {12})", new object[]
                {
                    GlobalRef.g_RadarDeviceId,
                    ScriptOps.Tx1BPMPhaseMonitoringConfigurationParam.ProfileIndex,
                    (int)m_MonTx1BPMPhaseConfigParameters.phaseShifterCfgIncValEna | (int)m_MonTx1BPMPhaseConfigParameters.phaseShifterMonEna << 1,
                    (decimal)Math.Round((double)m_MonTx1BPMPhaseConfigParameters.phaseShifterCfgIncVal, 3),
                    (decimal)Math.Round((double)m_MonTx1BPMPhaseConfigParameters.phaseShifter1, 3),
                    (decimal)Math.Round((double)m_MonTx1BPMPhaseConfigParameters.phaseShifter2, 3),
                    ScriptOps.Tx1BPMPhaseMonitoringConfigurationParam.ReportingMode,
                    ScriptOps.Tx1BPMPhaseMonitoringConfigurationParam.RxChannel,
                    (decimal)Math.Round(m_MonTx1BPMPhaseConfigParameters.TxBPMPhaseErrorThreshold, 2),
                    (decimal)Math.Round(m_MonTx1BPMPhaseConfigParameters.TxBPMAmplitudeErrorThreshold, 2),
                    (decimal)Math.Round(m_MonTx1BPMPhaseConfigParameters.TxPhaseShifter1Threshold, 2),
                    (decimal)Math.Round(m_MonTx1BPMPhaseConfigParameters.TxPhaseShifter2Threshold, 2),
                    m_MonTx1BPMPhaseConfigParameters.Reserved
                });
                m_GuiManager.RecordLog(6, full_command3);
            }
            GlobalRef.g_Tx1BPMPhaseMon = 1U;
            num = Imports.RadarLinkImpl_RfTxBpmMonConfig((byte)GlobalRef.g_RadarDeviceId, data);
            while (GlobalRef.g_Tx1BPMPhaseMon == 0U)
            {
                Thread.Sleep(100);
            }
            if (num == 0)
            {
                if (GlobalRef.g_RadarDeviceId == 1U)
                {
                    StatusFlag = Convert.ToString(ScriptOps.Tx1BPMPhaseAsyncFormatParam.StatusFlags);
                    Errorcode = Convert.ToString(ScriptOps.Tx1BPMPhaseAsyncFormatParam.ErrorCode);
                    profileIndex = Convert.ToString(ScriptOps.Tx1BPMPhaseAsyncFormatParam.ProfileIndex);
                    ushort txPhaseShifter2LSB = (ushort)ScriptOps.Tx1BPMPhaseAsyncFormatParam.TxPhaseShifter2LSB;
                    TxPhaseShifter2Val = Convert.ToString(Math.Round((double)(((int)txPhaseShifter2LSB | (int)ScriptOps.Tx1BPMPhaseAsyncFormatParam.TxPhaseShifter2MSB << 8) * 360) / 65536.0, 2));
                    ushort txPhaseShifter1Val = ScriptOps.Tx1BPMPhaseAsyncFormatParam.TxPhaseShifter1Val;
                    if (txPhaseShifter1Val > 32767)
                    {
                        ushort num2 = (ushort)((int)txPhaseShifter1Val - 65536);
                        TxPhaseShifter1Val = Convert.ToString(Math.Round((double)(num2 * 360) / 65536.0, 2));
                    }
                    else
                    {
                        TxPhaseShifter1Val = Convert.ToString(Math.Round((double)(txPhaseShifter1Val * 360) / 65536.0, 2));
                    }
                    ushort txBPMPhaseErrorVal = ScriptOps.Tx1BPMPhaseAsyncFormatParam.TxBPMPhaseErrorVal;
                    if (txBPMPhaseErrorVal > 32767)
                    {
                        ushort num2 = (ushort)((int)txBPMPhaseErrorVal - 65536);
                        Tx1BPMPhaseErrorValue = Convert.ToString(Math.Round((double)(num2 * 360) / 65536.0, 2));
                    }
                    else
                    {
                        Tx1BPMPhaseErrorValue = Convert.ToString(Math.Round((double)(txBPMPhaseErrorVal * 360) / 65536.0, 2));
                    }
                    byte txBPMAmplitudeErrorVal = ScriptOps.Tx1BPMPhaseAsyncFormatParam.TxBPMAmplitudeErrorVal;
                    if (txBPMAmplitudeErrorVal > 127)
                    {
                        sbyte b = (sbyte)(txBPMAmplitudeErrorVal - byte.MaxValue);
                        Tx1BPMAmplitudeErrorValue = Convert.ToString((double)b / 10.0);
                    }
                    else
                    {
                        Tx1BPMAmplitudeErrorValue = Convert.ToString((double)txBPMAmplitudeErrorVal / 10.0);
                    }
                    Timestamp = Convert.ToString(ScriptOps.Tx1BPMPhaseAsyncFormatParam.TimeStamp);
                }
                else if (GlobalRef.g_RadarDeviceId == 2U)
                {
                    StatusFlag = Convert.ToString(ScriptOps.Tx1BPMPhaseAsyncFormatParam.StatusFlags);
                    Errorcode = Convert.ToString(ScriptOps.Tx1BPMPhaseAsyncFormatParam.ErrorCode);
                    profileIndex = Convert.ToString(ScriptOps.Tx1BPMPhaseAsyncFormatParam.ProfileIndex);
                    ushort txPhaseShifter2LSB2 = (ushort)ScriptOps.Tx1BPMPhaseAsyncFormatParam.TxPhaseShifter2LSB;
                    TxPhaseShifter2Val = Convert.ToString(Math.Round((double)(((int)txPhaseShifter2LSB2 | (int)ScriptOps.Tx1BPMPhaseAsyncFormatParam.TxPhaseShifter2MSB << 8) * 360) / 65536.0, 2));
                    ushort txPhaseShifter1Val2 = ScriptOps.Tx1BPMPhaseAsyncFormatParam.TxPhaseShifter1Val;
                    if (txPhaseShifter1Val2 > 32767)
                    {
                        ushort num2 = (ushort)((int)txPhaseShifter1Val2 - 65536);
                        TxPhaseShifter1Val = Convert.ToString(Math.Round((double)(num2 * 360) / 65536.0, 2));
                    }
                    else
                    {
                        TxPhaseShifter1Val = Convert.ToString(Math.Round((double)(txPhaseShifter1Val2 * 360) / 65536.0, 2));
                    }
                    ushort txBPMPhaseErrorVal2 = ScriptOps.Tx1BPMPhaseAsyncFormatParam.TxBPMPhaseErrorVal;
                    if (txBPMPhaseErrorVal2 > 32767)
                    {
                        ushort num2 = (ushort)((int)txBPMPhaseErrorVal2 - 65536);
                        Tx1BPMPhaseErrorValue = Convert.ToString(Math.Round((double)(num2 * 360) / 65536.0, 2));
                    }
                    else
                    {
                        Tx1BPMPhaseErrorValue = Convert.ToString(Math.Round((double)(txBPMPhaseErrorVal2 * 360) / 65536.0, 2));
                    }
                    byte txBPMAmplitudeErrorVal2 = ScriptOps.Tx1BPMPhaseAsyncFormatParam.TxBPMAmplitudeErrorVal;
                    if (txBPMAmplitudeErrorVal2 > 127)
                    {
                        sbyte b = (sbyte)(txBPMAmplitudeErrorVal2 - byte.MaxValue);
                        Tx1BPMAmplitudeErrorValue = Convert.ToString((double)b / 10.0);
                    }
                    else
                    {
                        Tx1BPMAmplitudeErrorValue = Convert.ToString((double)txBPMAmplitudeErrorVal2 / 10.0);
                    }
                    Timestamp = Convert.ToString(ScriptOps.Tx1BPMPhaseAsyncFormatParam.TimeStamp);
                }
                else if (GlobalRef.g_RadarDeviceId == 4U)
                {
                    StatusFlag = Convert.ToString(ScriptOps.Tx1BPMPhaseAsyncFormatParam.StatusFlags);
                    Errorcode = Convert.ToString(ScriptOps.Tx1BPMPhaseAsyncFormatParam.ErrorCode);
                    profileIndex = Convert.ToString(ScriptOps.Tx1BPMPhaseAsyncFormatParam.ProfileIndex);
                    ushort txPhaseShifter2LSB3 = (ushort)ScriptOps.Tx1BPMPhaseAsyncFormatParam.TxPhaseShifter2LSB;
                    TxPhaseShifter2Val = Convert.ToString(Math.Round((double)(((int)txPhaseShifter2LSB3 | (int)ScriptOps.Tx1BPMPhaseAsyncFormatParam.TxPhaseShifter2MSB << 8) * 360) / 65536.0, 2));
                    ushort txPhaseShifter1Val3 = ScriptOps.Tx1BPMPhaseAsyncFormatParam.TxPhaseShifter1Val;
                    if (txPhaseShifter1Val3 > 32767)
                    {
                        ushort num2 = (ushort)((int)txPhaseShifter1Val3 - 65536);
                        TxPhaseShifter1Val = Convert.ToString(Math.Round((double)(num2 * 360) / 65536.0, 2));
                    }
                    else
                    {
                        TxPhaseShifter1Val = Convert.ToString(Math.Round((double)(txPhaseShifter1Val3 * 360) / 65536.0, 2));
                    }
                    ushort txBPMPhaseErrorVal3 = ScriptOps.Tx1BPMPhaseAsyncFormatParam.TxBPMPhaseErrorVal;
                    if (txBPMPhaseErrorVal3 > 32767)
                    {
                        ushort num2 = (ushort)((int)txBPMPhaseErrorVal3 - 65536);
                        Tx1BPMPhaseErrorValue = Convert.ToString(Math.Round((double)(num2 * 360) / 65536.0, 2));
                    }
                    else
                    {
                        Tx1BPMPhaseErrorValue = Convert.ToString(Math.Round((double)(txBPMPhaseErrorVal3 * 360) / 65536.0, 2));
                    }
                    byte txBPMAmplitudeErrorVal3 = ScriptOps.Tx1BPMPhaseAsyncFormatParam.TxBPMAmplitudeErrorVal;
                    if (txBPMAmplitudeErrorVal3 > 127)
                    {
                        sbyte b = (sbyte)(txBPMAmplitudeErrorVal3 - byte.MaxValue);
                        Tx1BPMAmplitudeErrorValue = Convert.ToString((double)b / 10.0);
                    }
                    else
                    {
                        Tx1BPMAmplitudeErrorValue = Convert.ToString((double)txBPMAmplitudeErrorVal3 / 10.0);
                    }
                    Timestamp = Convert.ToString(ScriptOps.Tx1BPMPhaseAsyncFormatParam.TimeStamp);
                }
                else if (GlobalRef.g_RadarDeviceId == 8U)
                {
                    StatusFlag = Convert.ToString(ScriptOps.Tx1BPMPhaseAsyncFormatParam.StatusFlags);
                    Errorcode = Convert.ToString(ScriptOps.Tx1BPMPhaseAsyncFormatParam.ErrorCode);
                    profileIndex = Convert.ToString(ScriptOps.Tx1BPMPhaseAsyncFormatParam.ProfileIndex);
                    ushort txPhaseShifter2LSB4 = (ushort)ScriptOps.Tx1BPMPhaseAsyncFormatParam.TxPhaseShifter2LSB;
                    TxPhaseShifter2Val = Convert.ToString(Math.Round((double)(((int)txPhaseShifter2LSB4 | (int)ScriptOps.Tx1BPMPhaseAsyncFormatParam.TxPhaseShifter2MSB << 8) * 360) / 65536.0, 2));
                    ushort txPhaseShifter1Val4 = ScriptOps.Tx1BPMPhaseAsyncFormatParam.TxPhaseShifter1Val;
                    if (txPhaseShifter1Val4 > 32767)
                    {
                        ushort num2 = (ushort)((int)txPhaseShifter1Val4 - 65536);
                        TxPhaseShifter1Val = Convert.ToString(Math.Round((double)(num2 * 360) / 65536.0, 2));
                    }
                    else
                    {
                        TxPhaseShifter1Val = Convert.ToString(Math.Round((double)(txPhaseShifter1Val4 * 360) / 65536.0, 2));
                    }
                    ushort txBPMPhaseErrorVal4 = ScriptOps.Tx1BPMPhaseAsyncFormatParam.TxBPMPhaseErrorVal;
                    if (txBPMPhaseErrorVal4 > 32767)
                    {
                        ushort num2 = (ushort)((int)txBPMPhaseErrorVal4 - 65536);
                        Tx1BPMPhaseErrorValue = Convert.ToString(Math.Round((double)(num2 * 360) / 65536.0, 2));
                    }
                    else
                    {
                        Tx1BPMPhaseErrorValue = Convert.ToString(Math.Round((double)(txBPMPhaseErrorVal4 * 360) / 65536.0, 2));
                    }
                    byte txBPMAmplitudeErrorVal4 = ScriptOps.Tx1BPMPhaseAsyncFormatParam.TxBPMAmplitudeErrorVal;
                    if (txBPMAmplitudeErrorVal4 > 127)
                    {
                        sbyte b = (sbyte)(txBPMAmplitudeErrorVal4 - byte.MaxValue);
                        Tx1BPMAmplitudeErrorValue = Convert.ToString((double)b / 10.0);
                    }
                    else
                    {
                        Tx1BPMAmplitudeErrorValue = Convert.ToString((double)txBPMAmplitudeErrorVal4 / 10.0);
                    }
                    Timestamp = Convert.ToString(ScriptOps.Tx1BPMPhaseAsyncFormatParam.TimeStamp);
                }
            }
            if ((num == 0 && ((GlobalRef.g_CasCadeDeviceSpiConnect & 1U) == 1U || (GlobalRef.g_CasCadeDeviceSpiConnect & 2U) == 2U || (GlobalRef.g_CasCadeDeviceSpiConnect & 4U) == 4U || (GlobalRef.g_CasCadeDeviceSpiConnect & 8U) == 8U)) || GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
            {
                string full_command4 = string.Format("Status: Passed", new object[0]);
                m_GuiManager.RecordLog(6, full_command4);
            }
            else
            {
                string msg = string.Format("Status: Failed, Error Type: {0}", new object[]
                {
                    GetErrorType(num)
                });
                GlobalRef.LuaWrapper.PrintError(msg);
            }
            if (GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
            {
                if (iRs232ConnectDisconnect_impl() == 0 && !GlobalRef.g_NtvRS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
                {
                    m_GuiManager.DllOps.iConnect(1U, 0U);
                    string full_command5 = string.Format("Debug Port Reconnected!", new object[0]);
                    m_GuiManager.RecordLog(9, full_command5);
                    ScriptOps.KeepTrying(2000, new Func<bool>(spare_read));
                }
            }
            else if (GlobalRef.g_CasCadeDeviceSpiConnect == 0U)
            {
                string full_command6 = string.Format("Error Occurred in Port open close", new object[0]);
                m_GuiManager.RecordLog(9, full_command6);
            }
            return num;
        }

        public int UpdateNSetTx2BPMPhaseMonitoringConfData(ushort RadarDeviceId, byte ProfileIndex, byte phaseShifterMonEna, float phaseShifterIncCfg, float phaseShifterVal1, float phaseShifterVal2, byte ReportingMode, byte RxChannel, float TxBPMPhaseErrorThreshold, float TxBPMAmplitudeErrorThreshold, float TxPhaseShifter1Threshold, float TxPhaseShifter2Threshold, ushort Reserved)
        {
            int result = -1;
            GlobalRef.g_RadarDeviceId = (uint)RadarDeviceId;
            ScriptOps.m_MainForm.AnalogMonConfig.UpdateTX2BPMPhaseMonConfigData();
            m_MonTx2BPMPhaseConfigParameters.ProfileIndex = ProfileIndex;
            m_MonTx2BPMPhaseConfigParameters.phaseShifterCfgIncVal = phaseShifterIncCfg;
            m_MonTx2BPMPhaseConfigParameters.phaseShifterMonEna = (byte)(phaseShifterMonEna >> 1 & 1);
            m_MonTx2BPMPhaseConfigParameters.phaseShifterCfgIncValEna = (byte)(phaseShifterMonEna & 1);
            m_MonTx2BPMPhaseConfigParameters.phaseShifter1 = phaseShifterVal1;
            m_MonTx2BPMPhaseConfigParameters.phaseShifter2 = phaseShifterVal2;
            m_MonTx2BPMPhaseConfigParameters.ReportingMode = ReportingMode;
            m_MonTx2BPMPhaseConfigParameters.Rx0Channel = (byte)(RxChannel & 1);
            m_MonTx2BPMPhaseConfigParameters.Rx1Channel = (byte)(RxChannel >> 1 & 1);
            m_MonTx2BPMPhaseConfigParameters.Rx2Channel = (byte)(RxChannel >> 2 & 1);
            m_MonTx2BPMPhaseConfigParameters.Rx3Channel = (byte)(RxChannel >> 3 & 1);
            m_MonTx2BPMPhaseConfigParameters.TxBPMPhaseErrorThreshold = (double)TxBPMPhaseErrorThreshold;
            m_MonTx2BPMPhaseConfigParameters.TxBPMAmplitudeErrorThreshold = (double)TxBPMAmplitudeErrorThreshold;
            m_MonTx2BPMPhaseConfigParameters.TxPhaseShifter1Threshold = (double)TxPhaseShifter1Threshold;
            m_MonTx2BPMPhaseConfigParameters.TxPhaseShifter2Threshold = (double)TxPhaseShifter2Threshold;
            m_MonTx2BPMPhaseConfigParameters.Reserved = Reserved;
            ScriptOps.m_MainForm.AnalogMonConfig.m000008();
            return result;
        }

        public int UpdateNTx2BPMPhaseMonitoringConfigurationData_cmd(out string StatusFlag, out string Errorcode, out string profileIndex, out string Tx1BPMPhaseErrorValue, out string Tx1BPMAmplitudeErrorValue, out string TxPhaseShifter1Val, out string TxPhaseShifter2Val, out string Timestamp)
        {
            StatusFlag = string.Empty;
            Errorcode = string.Empty;
            profileIndex = string.Empty;
            TxPhaseShifter2Val = string.Empty;
            TxPhaseShifter1Val = string.Empty;
            Tx1BPMPhaseErrorValue = string.Empty;
            Tx1BPMAmplitudeErrorValue = string.Empty;
            Timestamp = string.Empty;
            ScriptOps.m_MainForm.AnalogMonConfig.UpdateTX2BPMPhaseMonConfigData();
            return iSetTx2BPMPhaseMonConfig_ImplForLuaCommand(out StatusFlag, out Errorcode, out profileIndex, out Tx1BPMPhaseErrorValue, out Tx1BPMAmplitudeErrorValue, out TxPhaseShifter1Val, out TxPhaseShifter2Val, out Timestamp);
        }

        private int iSetTx2BPMPhaseMonConfig_ImplForLuaCommand(out string StatusFlag, out string Errorcode, out string profileIndex, out string Tx1BPMPhaseErrorValue, out string Tx1BPMAmplitudeErrorValue, out string TxPhaseShifter1Val, out string TxPhaseShifter2Val, out string Timestamp)
        {
            StatusFlag = string.Empty;
            Errorcode = string.Empty;
            profileIndex = string.Empty;
            TxPhaseShifter2Val = string.Empty;
            TxPhaseShifter1Val = string.Empty;
            Tx1BPMPhaseErrorValue = string.Empty;
            Tx1BPMAmplitudeErrorValue = string.Empty;
            Timestamp = string.Empty;
            ScriptOps.Tx1BPMPhaseMonitoringConfigurationParam.ProfileIndex = 0;
            ScriptOps.Tx1BPMPhaseMonitoringConfigurationParam.phaseShifterCfg = 0;
            ScriptOps.Tx1BPMPhaseMonitoringConfigurationParam.phaseShifterVal1 = 0;
            ScriptOps.Tx1BPMPhaseMonitoringConfigurationParam.phaseShifterVal2 = 0;
            ScriptOps.Tx1BPMPhaseMonitoringConfigurationParam.ReportingMode = 0;
            ScriptOps.Tx1BPMPhaseMonitoringConfigurationParam.RxChannel = 0;
            ScriptOps.Tx1BPMPhaseMonitoringConfigurationParam.TxBPMPhaseErrorThreshold = 0;
            ScriptOps.Tx1BPMPhaseMonitoringConfigurationParam.TxBPMAmplitudeErrorThreshold = 0;
            ScriptOps.Tx1BPMPhaseMonitoringConfigurationParam.TxPhaseShifter1Threshold = 0;
            ScriptOps.Tx1BPMPhaseMonitoringConfigurationParam.TxPhaseShifter2Threshold = 0;
            ScriptOps.Tx1BPMPhaseMonitoringConfigurationParam.Reserved = 0;
            ScriptOps.Tx2BPMPhaseMonitoringConfigurationParam.ProfileIndex = 0;
            ScriptOps.Tx2BPMPhaseMonitoringConfigurationParam.phaseShifterCfg = 0;
            ScriptOps.Tx2BPMPhaseMonitoringConfigurationParam.phaseShifterVal1 = 0;
            ScriptOps.Tx2BPMPhaseMonitoringConfigurationParam.phaseShifterVal2 = 0;
            ScriptOps.Tx2BPMPhaseMonitoringConfigurationParam.ReportingMode = 0;
            ScriptOps.Tx2BPMPhaseMonitoringConfigurationParam.RxChannel = 0;
            ScriptOps.Tx2BPMPhaseMonitoringConfigurationParam.TxBPMPhaseErrorThreshold = 0;
            ScriptOps.Tx2BPMPhaseMonitoringConfigurationParam.TxBPMAmplitudeErrorThreshold = 0;
            ScriptOps.Tx2BPMPhaseMonitoringConfigurationParam.TxPhaseShifter1Threshold = 0;
            ScriptOps.Tx2BPMPhaseMonitoringConfigurationParam.TxPhaseShifter2Threshold = 0;
            ScriptOps.Tx2BPMPhaseMonitoringConfigurationParam.Reserved = 0;
            ScriptOps.Tx3BPMPhaseMonitoringConfigurationParam.ProfileIndex = 0;
            ScriptOps.Tx3BPMPhaseMonitoringConfigurationParam.phaseShifterCfg = 0;
            ScriptOps.Tx3BPMPhaseMonitoringConfigurationParam.phaseShifterVal1 = 0;
            ScriptOps.Tx3BPMPhaseMonitoringConfigurationParam.phaseShifterVal2 = 0;
            ScriptOps.Tx3BPMPhaseMonitoringConfigurationParam.ReportingMode = 0;
            ScriptOps.Tx3BPMPhaseMonitoringConfigurationParam.RxChannel = 0;
            ScriptOps.Tx3BPMPhaseMonitoringConfigurationParam.TxBPMPhaseErrorThreshold = 0;
            ScriptOps.Tx3BPMPhaseMonitoringConfigurationParam.TxBPMAmplitudeErrorThreshold = 0;
            ScriptOps.Tx3BPMPhaseMonitoringConfigurationParam.TxPhaseShifter1Threshold = 0;
            ScriptOps.Tx3BPMPhaseMonitoringConfigurationParam.TxPhaseShifter2Threshold = 0;
            ScriptOps.Tx3BPMPhaseMonitoringConfigurationParam.Reserved = 0;
            ScriptOps.Tx2BPMPhaseMonitoringConfigurationParam.ProfileIndex = m_MonTx2BPMPhaseConfigParameters.ProfileIndex;
            ScriptOps.Tx2BPMPhaseMonitoringConfigurationParam.phaseShifterCfg = (byte)((int)((byte)(Math.Round((double)(m_MonTx2BPMPhaseConfigParameters.phaseShifterCfgIncVal * 64f)) / 360.0) & 63) | (int)m_MonTx2BPMPhaseConfigParameters.phaseShifterCfgIncValEna << 6 | (int)m_MonTx2BPMPhaseConfigParameters.phaseShifterMonEna << 7);
            ScriptOps.Tx2BPMPhaseMonitoringConfigurationParam.phaseShifterVal1 = (byte)(Math.Round((double)(m_MonTx2BPMPhaseConfigParameters.phaseShifter1 * 64f)) / 360.0);
            ScriptOps.Tx2BPMPhaseMonitoringConfigurationParam.phaseShifterVal2 = (byte)(Math.Round((double)(m_MonTx2BPMPhaseConfigParameters.phaseShifter2 * 64f)) / 360.0);
            ScriptOps.Tx2BPMPhaseMonitoringConfigurationParam.ReportingMode = m_MonTx2BPMPhaseConfigParameters.ReportingMode;
            ScriptOps.Tx2BPMPhaseMonitoringConfigurationParam.RxChannel = (byte)((int)m_MonTx2BPMPhaseConfigParameters.Rx0Channel | (int)m_MonTx2BPMPhaseConfigParameters.Rx1Channel << 1 | (int)m_MonTx2BPMPhaseConfigParameters.Rx2Channel << 2 | (int)m_MonTx2BPMPhaseConfigParameters.Rx3Channel << 3);
            ScriptOps.Tx2BPMPhaseMonitoringConfigurationParam.TxBPMPhaseErrorThreshold = (ushort)(m_MonTx2BPMPhaseConfigParameters.TxBPMPhaseErrorThreshold * 65535.0 / 360.0);
            ScriptOps.Tx2BPMPhaseMonitoringConfigurationParam.TxBPMAmplitudeErrorThreshold = (ushort)(m_MonTx2BPMPhaseConfigParameters.TxBPMAmplitudeErrorThreshold * 10.0);
            ScriptOps.Tx2BPMPhaseMonitoringConfigurationParam.TxPhaseShifter1Threshold = (ushort)(m_MonTx2BPMPhaseConfigParameters.TxPhaseShifter1Threshold * 65535.0 / 360.0);
            ScriptOps.Tx2BPMPhaseMonitoringConfigurationParam.TxPhaseShifter2Threshold = (ushort)(m_MonTx2BPMPhaseConfigParameters.TxPhaseShifter2Threshold * 65535.0 / 360.0);
            ScriptOps.Tx2BPMPhaseMonitoringConfigurationParam.Reserved = 0;
            GCHandle.Alloc(ScriptOps.Tx1BPMPhaseMonitoringConfigurationParam, GCHandleType.Pinned).AddrOfPinnedObject();
            IntPtr f = GCHandle.Alloc(ScriptOps.Tx2BPMPhaseMonitoringConfigurationParam, GCHandleType.Pinned).AddrOfPinnedObject();
            GCHandle.Alloc(ScriptOps.Tx3BPMPhaseMonitoringConfigurationParam, GCHandleType.Pinned).AddrOfPinnedObject();
            ScriptOps.Tx1Tx2Tx3BPMPhaseMonitoringConfigurationParam.f000022 = IntPtr.Zero;
            ScriptOps.Tx1Tx2Tx3BPMPhaseMonitoringConfigurationParam.f000023 = f;
            ScriptOps.Tx1Tx2Tx3BPMPhaseMonitoringConfigurationParam.f000024 = IntPtr.Zero;
            IntPtr data = GCHandle.Alloc(ScriptOps.Tx1Tx2Tx3BPMPhaseMonitoringConfigurationParam, GCHandleType.Pinned).AddrOfPinnedObject();
            int num;
            if (GlobalRef.g_NtvRS232Connect[(int)GlobalRef.g_RadarDeviceIndex] && GlobalRef.g_CasCadeDeviceSpiConnect == 0U)
            {
                num = m_TsWrapper.Calling_WriteAddr_Single(4294959848U, 1U);
                if (m_GuiManager.DllOps.itempDisconnect(false) == 0)
                {
                    string full_command = string.Format("Debug Port Disconnected", new object[0]);
                    m_GuiManager.RecordLog(0, full_command);
                    if (!GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
                    {
                        iRs232ConnectDisconnect_impl();
                    }
                }
            }
            if (m_RadarDeviceModeConfigParams.NumberOfRadarDevicesDetected <= 1)
            {
                string full_command2 = string.Format("ar1.SetRfTx1BpmMonConfig({0}, {1}, {2}, {3}, {4}, {5}, {6}, {7}, {8}, {9}, {10}, {11})", new object[]
                {
                    ScriptOps.Tx2BPMPhaseMonitoringConfigurationParam.ProfileIndex,
                    (int)m_MonTx2BPMPhaseConfigParameters.phaseShifterCfgIncValEna | (int)m_MonTx2BPMPhaseConfigParameters.phaseShifterMonEna << 1,
                    (decimal)Math.Round((double)m_MonTx2BPMPhaseConfigParameters.phaseShifterCfgIncVal, 3),
                    (decimal)Math.Round((double)m_MonTx2BPMPhaseConfigParameters.phaseShifter1, 3),
                    (decimal)Math.Round((double)m_MonTx2BPMPhaseConfigParameters.phaseShifter2, 3),
                    ScriptOps.Tx2BPMPhaseMonitoringConfigurationParam.ReportingMode,
                    ScriptOps.Tx2BPMPhaseMonitoringConfigurationParam.RxChannel,
                    (decimal)Math.Round(m_MonTx2BPMPhaseConfigParameters.TxBPMPhaseErrorThreshold, 2),
                    (decimal)Math.Round(m_MonTx2BPMPhaseConfigParameters.TxBPMAmplitudeErrorThreshold, 2),
                    (decimal)Math.Round(m_MonTx2BPMPhaseConfigParameters.TxPhaseShifter1Threshold, 2),
                    (decimal)Math.Round(m_MonTx2BPMPhaseConfigParameters.TxPhaseShifter2Threshold, 2),
                    m_MonTx2BPMPhaseConfigParameters.Reserved
                });
                m_GuiManager.RecordLog(6, full_command2);
            }
            else
            {
                string full_command3 = string.Format("ar1.SetRfTx1BpmMonConfig_mult({0}, {1}, {2}, {3}, {4}, {5}, {6}, {7}, {8}, {9}, {10}, {11}, {12})", new object[]
                {
                    GlobalRef.g_RadarDeviceId,
                    ScriptOps.Tx2BPMPhaseMonitoringConfigurationParam.ProfileIndex,
                    (int)m_MonTx2BPMPhaseConfigParameters.phaseShifterCfgIncValEna | (int)m_MonTx2BPMPhaseConfigParameters.phaseShifterMonEna << 1,
                    (decimal)Math.Round((double)m_MonTx2BPMPhaseConfigParameters.phaseShifterCfgIncVal, 3),
                    (decimal)Math.Round((double)m_MonTx2BPMPhaseConfigParameters.phaseShifter1, 3),
                    (decimal)Math.Round((double)m_MonTx2BPMPhaseConfigParameters.phaseShifter2, 3),
                    ScriptOps.Tx2BPMPhaseMonitoringConfigurationParam.ReportingMode,
                    ScriptOps.Tx2BPMPhaseMonitoringConfigurationParam.RxChannel,
                    (decimal)Math.Round(m_MonTx2BPMPhaseConfigParameters.TxBPMPhaseErrorThreshold, 2),
                    (decimal)Math.Round(m_MonTx2BPMPhaseConfigParameters.TxBPMAmplitudeErrorThreshold, 2),
                    (decimal)Math.Round(m_MonTx2BPMPhaseConfigParameters.TxPhaseShifter1Threshold, 2),
                    (decimal)Math.Round(m_MonTx2BPMPhaseConfigParameters.TxPhaseShifter2Threshold, 2),
                    m_MonTx2BPMPhaseConfigParameters.Reserved
                });
                m_GuiManager.RecordLog(6, full_command3);
            }
            GlobalRef.g_Tx2BPMPhaseMon = 1U;
            num = Imports.RadarLinkImpl_RfTxBpmMonConfig((byte)GlobalRef.g_RadarDeviceId, data);
            while (GlobalRef.g_Tx2BPMPhaseMon == 0U)
            {
                Thread.Sleep(100);
            }
            if (num == 0)
            {
                if (GlobalRef.g_RadarDeviceId == 1U)
                {
                    StatusFlag = Convert.ToString(ScriptOps.Tx2BPMPhaseAsyncFormatParam.StatusFlags);
                    Errorcode = Convert.ToString(ScriptOps.Tx2BPMPhaseAsyncFormatParam.ErrorCode);
                    profileIndex = Convert.ToString(ScriptOps.Tx2BPMPhaseAsyncFormatParam.ProfileIndex);
                    ushort txPhaseShifter2LSB = (ushort)ScriptOps.Tx2BPMPhaseAsyncFormatParam.TxPhaseShifter2LSB;
                    TxPhaseShifter2Val = Convert.ToString(Math.Round((double)(((int)txPhaseShifter2LSB | (int)ScriptOps.Tx2BPMPhaseAsyncFormatParam.TxPhaseShifter2MSB << 8) * 360) / 65536.0, 2));
                    ushort txPhaseShifter1Val = ScriptOps.Tx2BPMPhaseAsyncFormatParam.TxPhaseShifter1Val;
                    if (txPhaseShifter1Val > 32767)
                    {
                        ushort num2 = (ushort)((int)txPhaseShifter1Val - 65536);
                        TxPhaseShifter1Val = Convert.ToString(Math.Round((double)(num2 * 360) / 65536.0, 2));
                    }
                    else
                    {
                        TxPhaseShifter1Val = Convert.ToString(Math.Round((double)(txPhaseShifter1Val * 360) / 65536.0, 2));
                    }
                    ushort txBPMPhaseErrorVal = ScriptOps.Tx2BPMPhaseAsyncFormatParam.TxBPMPhaseErrorVal;
                    if (txBPMPhaseErrorVal > 32767)
                    {
                        ushort num2 = (ushort)((int)txBPMPhaseErrorVal - 65536);
                        Tx1BPMPhaseErrorValue = Convert.ToString(Math.Round((double)(num2 * 360) / 65536.0, 2));
                    }
                    else
                    {
                        Tx1BPMPhaseErrorValue = Convert.ToString(Math.Round((double)(txBPMPhaseErrorVal * 360) / 65536.0, 2));
                    }
                    byte txBPMAmplitudeErrorVal = ScriptOps.Tx2BPMPhaseAsyncFormatParam.TxBPMAmplitudeErrorVal;
                    if (txBPMAmplitudeErrorVal > 127)
                    {
                        sbyte b = (sbyte)(txBPMAmplitudeErrorVal - byte.MaxValue);
                        Tx1BPMAmplitudeErrorValue = Convert.ToString((double)b / 10.0);
                    }
                    else
                    {
                        Tx1BPMAmplitudeErrorValue = Convert.ToString((double)txBPMAmplitudeErrorVal / 10.0);
                    }
                    Timestamp = Convert.ToString(ScriptOps.Tx2BPMPhaseAsyncFormatParam.TimeStamp);
                }
                else if (GlobalRef.g_RadarDeviceId == 2U)
                {
                    StatusFlag = Convert.ToString(ScriptOps.Tx2BPMPhaseAsyncFormatParam.StatusFlags);
                    Errorcode = Convert.ToString(ScriptOps.Tx2BPMPhaseAsyncFormatParam.ErrorCode);
                    profileIndex = Convert.ToString(ScriptOps.Tx2BPMPhaseAsyncFormatParam.ProfileIndex);
                    ushort txPhaseShifter2LSB2 = (ushort)ScriptOps.Tx2BPMPhaseAsyncFormatParam.TxPhaseShifter2LSB;
                    TxPhaseShifter2Val = Convert.ToString(Math.Round((double)(((int)txPhaseShifter2LSB2 | (int)ScriptOps.Tx2BPMPhaseAsyncFormatParam.TxPhaseShifter2MSB << 8) * 360) / 65536.0, 2));
                    ushort txPhaseShifter1Val2 = ScriptOps.Tx2BPMPhaseAsyncFormatParam.TxPhaseShifter1Val;
                    if (txPhaseShifter1Val2 > 32767)
                    {
                        ushort num2 = (ushort)((int)txPhaseShifter1Val2 - 65536);
                        TxPhaseShifter1Val = Convert.ToString(Math.Round((double)(num2 * 360) / 65536.0, 2));
                    }
                    else
                    {
                        TxPhaseShifter1Val = Convert.ToString(Math.Round((double)(txPhaseShifter1Val2 * 360) / 65536.0, 2));
                    }
                    ushort txBPMPhaseErrorVal2 = ScriptOps.Tx2BPMPhaseAsyncFormatParam.TxBPMPhaseErrorVal;
                    if (txBPMPhaseErrorVal2 > 32767)
                    {
                        ushort num2 = (ushort)((int)txBPMPhaseErrorVal2 - 65536);
                        Tx1BPMPhaseErrorValue = Convert.ToString(Math.Round((double)(num2 * 360) / 65536.0, 2));
                    }
                    else
                    {
                        Tx1BPMPhaseErrorValue = Convert.ToString(Math.Round((double)(txBPMPhaseErrorVal2 * 360) / 65536.0, 2));
                    }
                    byte txBPMAmplitudeErrorVal2 = ScriptOps.Tx2BPMPhaseAsyncFormatParam.TxBPMAmplitudeErrorVal;
                    if (txBPMAmplitudeErrorVal2 > 127)
                    {
                        sbyte b = (sbyte)(txBPMAmplitudeErrorVal2 - byte.MaxValue);
                        Tx1BPMAmplitudeErrorValue = Convert.ToString((double)b / 10.0);
                    }
                    else
                    {
                        Tx1BPMAmplitudeErrorValue = Convert.ToString((double)txBPMAmplitudeErrorVal2 / 10.0);
                    }
                    Timestamp = Convert.ToString(ScriptOps.Tx2BPMPhaseAsyncFormatParam.TimeStamp);
                }
                else if (GlobalRef.g_RadarDeviceId == 4U)
                {
                    StatusFlag = Convert.ToString(ScriptOps.Tx2BPMPhaseAsyncFormatParam.StatusFlags);
                    Errorcode = Convert.ToString(ScriptOps.Tx2BPMPhaseAsyncFormatParam.ErrorCode);
                    profileIndex = Convert.ToString(ScriptOps.Tx2BPMPhaseAsyncFormatParam.ProfileIndex);
                    ushort txPhaseShifter2LSB3 = (ushort)ScriptOps.Tx2BPMPhaseAsyncFormatParam.TxPhaseShifter2LSB;
                    TxPhaseShifter2Val = Convert.ToString(Math.Round((double)(((int)txPhaseShifter2LSB3 | (int)ScriptOps.Tx2BPMPhaseAsyncFormatParam.TxPhaseShifter2MSB << 8) * 360) / 65536.0, 2));
                    ushort txPhaseShifter1Val3 = ScriptOps.Tx2BPMPhaseAsyncFormatParam.TxPhaseShifter1Val;
                    if (txPhaseShifter1Val3 > 32767)
                    {
                        ushort num2 = (ushort)((int)txPhaseShifter1Val3 - 65536);
                        TxPhaseShifter1Val = Convert.ToString(Math.Round((double)(num2 * 360) / 65536.0, 2));
                    }
                    else
                    {
                        TxPhaseShifter1Val = Convert.ToString(Math.Round((double)(txPhaseShifter1Val3 * 360) / 65536.0, 2));
                    }
                    ushort txBPMPhaseErrorVal3 = ScriptOps.Tx2BPMPhaseAsyncFormatParam.TxBPMPhaseErrorVal;
                    if (txBPMPhaseErrorVal3 > 32767)
                    {
                        ushort num2 = (ushort)((int)txBPMPhaseErrorVal3 - 65536);
                        Tx1BPMPhaseErrorValue = Convert.ToString(Math.Round((double)(num2 * 360) / 65536.0, 2));
                    }
                    else
                    {
                        Tx1BPMPhaseErrorValue = Convert.ToString(Math.Round((double)(txBPMPhaseErrorVal3 * 360) / 65536.0, 2));
                    }
                    byte txBPMAmplitudeErrorVal3 = ScriptOps.Tx2BPMPhaseAsyncFormatParam.TxBPMAmplitudeErrorVal;
                    if (txBPMAmplitudeErrorVal3 > 127)
                    {
                        sbyte b = (sbyte)(txBPMAmplitudeErrorVal3 - byte.MaxValue);
                        Tx1BPMAmplitudeErrorValue = Convert.ToString((double)b / 10.0);
                    }
                    else
                    {
                        Tx1BPMAmplitudeErrorValue = Convert.ToString((double)txBPMAmplitudeErrorVal3 / 10.0);
                    }
                    Timestamp = Convert.ToString(ScriptOps.Tx2BPMPhaseAsyncFormatParam.TimeStamp);
                }
                else if (GlobalRef.g_RadarDeviceId == 8U)
                {
                    StatusFlag = Convert.ToString(ScriptOps.Tx2BPMPhaseAsyncFormatParam.StatusFlags);
                    Errorcode = Convert.ToString(ScriptOps.Tx2BPMPhaseAsyncFormatParam.ErrorCode);
                    profileIndex = Convert.ToString(ScriptOps.Tx2BPMPhaseAsyncFormatParam.ProfileIndex);
                    ushort txPhaseShifter2LSB4 = (ushort)ScriptOps.Tx2BPMPhaseAsyncFormatParam.TxPhaseShifter2LSB;
                    TxPhaseShifter2Val = Convert.ToString(Math.Round((double)(((int)txPhaseShifter2LSB4 | (int)ScriptOps.Tx2BPMPhaseAsyncFormatParam.TxPhaseShifter2MSB << 8) * 360) / 65536.0, 2));
                    ushort txPhaseShifter1Val4 = ScriptOps.Tx2BPMPhaseAsyncFormatParam.TxPhaseShifter1Val;
                    if (txPhaseShifter1Val4 > 32767)
                    {
                        ushort num2 = (ushort)((int)txPhaseShifter1Val4 - 65536);
                        TxPhaseShifter1Val = Convert.ToString(Math.Round((double)(num2 * 360) / 65536.0, 2));
                    }
                    else
                    {
                        TxPhaseShifter1Val = Convert.ToString(Math.Round((double)(txPhaseShifter1Val4 * 360) / 65536.0, 2));
                    }
                    ushort txBPMPhaseErrorVal4 = ScriptOps.Tx2BPMPhaseAsyncFormatParam.TxBPMPhaseErrorVal;
                    if (txBPMPhaseErrorVal4 > 32767)
                    {
                        ushort num2 = (ushort)((int)txBPMPhaseErrorVal4 - 65536);
                        Tx1BPMPhaseErrorValue = Convert.ToString(Math.Round((double)(num2 * 360) / 65536.0, 2));
                    }
                    else
                    {
                        Tx1BPMPhaseErrorValue = Convert.ToString(Math.Round((double)(txBPMPhaseErrorVal4 * 360) / 65536.0, 2));
                    }
                    byte txBPMAmplitudeErrorVal4 = ScriptOps.Tx2BPMPhaseAsyncFormatParam.TxBPMAmplitudeErrorVal;
                    if (txBPMAmplitudeErrorVal4 > 127)
                    {
                        sbyte b = (sbyte)(txBPMAmplitudeErrorVal4 - byte.MaxValue);
                        Tx1BPMAmplitudeErrorValue = Convert.ToString((double)b / 10.0);
                    }
                    else
                    {
                        Tx1BPMAmplitudeErrorValue = Convert.ToString((double)txBPMAmplitudeErrorVal4 / 10.0);
                    }
                    Timestamp = Convert.ToString(ScriptOps.Tx2BPMPhaseAsyncFormatParam.TimeStamp);
                }
            }
            if ((num == 0 && ((GlobalRef.g_CasCadeDeviceSpiConnect & 1U) == 1U || (GlobalRef.g_CasCadeDeviceSpiConnect & 2U) == 2U || (GlobalRef.g_CasCadeDeviceSpiConnect & 4U) == 4U || (GlobalRef.g_CasCadeDeviceSpiConnect & 8U) == 8U)) || GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
            {
                string full_command4 = string.Format("Status: Passed", new object[0]);
                m_GuiManager.RecordLog(6, full_command4);
            }
            else
            {
                string msg = string.Format("Status: Failed, Error Type: {0}", new object[]
                {
                    GetErrorType(num)
                });
                GlobalRef.LuaWrapper.PrintError(msg);
            }
            if (GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex] && iRs232ConnectDisconnect_impl() == 0 && !GlobalRef.g_NtvRS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
            {
                m_GuiManager.DllOps.iConnect(1U, 0U);
                string full_command5 = string.Format("Debug Port Reconnected!", new object[0]);
                m_GuiManager.RecordLog(9, full_command5);
                ScriptOps.KeepTrying(2000, new Func<bool>(spare_read));
            }
            return num;
        }

        public int UpdateNSetTx3BPMPhaseMonitoringConfData(ushort RadarDeviceId, byte ProfileIndex, byte phaseShifterMonEna, float phaseShifterIncCfg, float phaseShifterVal1, float phaseShifterVal2, byte ReportingMode, byte RxChannel, float TxBPMPhaseErrorThreshold, float TxBPMAmplitudeErrorThreshold, float TxPhaseShifter1Threshold, float TxPhaseShifter2Threshold, ushort Reserved)
        {
            int result = -1;
            GlobalRef.g_RadarDeviceId = (uint)RadarDeviceId;
            ScriptOps.m_MainForm.AnalogMonConfig.UpdateTX3BPMPhaseMonConfigData();
            m_MonTx3BPMPhaseConfigParameters.ProfileIndex = ProfileIndex;
            m_MonTx3BPMPhaseConfigParameters.phaseShifterCfgIncVal = phaseShifterIncCfg;
            m_MonTx3BPMPhaseConfigParameters.phaseShifterMonEna = (byte)(phaseShifterMonEna >> 1 & 1);
            m_MonTx3BPMPhaseConfigParameters.phaseShifterCfgIncValEna = (byte)(phaseShifterMonEna & 1);
            m_MonTx3BPMPhaseConfigParameters.phaseShifter1 = phaseShifterVal1;
            m_MonTx3BPMPhaseConfigParameters.phaseShifter2 = phaseShifterVal2;
            m_MonTx3BPMPhaseConfigParameters.ReportingMode = ReportingMode;
            m_MonTx3BPMPhaseConfigParameters.Rx0Channel = (byte)(RxChannel & 1);
            m_MonTx3BPMPhaseConfigParameters.Rx1Channel = (byte)(RxChannel >> 1 & 1);
            m_MonTx3BPMPhaseConfigParameters.Rx2Channel = (byte)(RxChannel >> 2 & 1);
            m_MonTx3BPMPhaseConfigParameters.Rx3Channel = (byte)(RxChannel >> 3 & 1);
            m_MonTx3BPMPhaseConfigParameters.TxBPMPhaseErrorThreshold = (double)TxBPMPhaseErrorThreshold;
            m_MonTx3BPMPhaseConfigParameters.TxBPMAmplitudeErrorThreshold = (double)TxBPMAmplitudeErrorThreshold;
            m_MonTx3BPMPhaseConfigParameters.TxPhaseShifter1Threshold = (double)TxPhaseShifter1Threshold;
            m_MonTx3BPMPhaseConfigParameters.TxPhaseShifter2Threshold = (double)TxPhaseShifter2Threshold;
            m_MonTx3BPMPhaseConfigParameters.Reserved = Reserved;
            ScriptOps.m_MainForm.AnalogMonConfig.m00000a();
            return result;
        }

        public int UpdateNTx3BPMPhaseMonitoringConfigurationData_cmd(out string StatusFlag, out string Errorcode, out string profileIndex, out string Tx1BPMPhaseErrorValue, out string Tx1BPMAmplitudeErrorValue, out string TxPhaseShifter1Val, out string TxPhaseShifter2Val, out string Timestamp)
        {
            StatusFlag = string.Empty;
            Errorcode = string.Empty;
            profileIndex = string.Empty;
            TxPhaseShifter2Val = string.Empty;
            TxPhaseShifter1Val = string.Empty;
            Tx1BPMPhaseErrorValue = string.Empty;
            Tx1BPMAmplitudeErrorValue = string.Empty;
            Timestamp = string.Empty;
            ScriptOps.m_MainForm.AnalogMonConfig.UpdateTX3BPMPhaseMonConfigData();
            return iSetTx3BPMPhaseMonConfig_ImplForLuaCommand(out StatusFlag, out Errorcode, out profileIndex, out Tx1BPMPhaseErrorValue, out Tx1BPMAmplitudeErrorValue, out TxPhaseShifter1Val, out TxPhaseShifter2Val, out Timestamp);
        }

        private int iSetTx3BPMPhaseMonConfig_ImplForLuaCommand(out string StatusFlag, out string Errorcode, out string profileIndex, out string Tx1BPMPhaseErrorValue, out string Tx1BPMAmplitudeErrorValue, out string TxPhaseShifter1Val, out string TxPhaseShifter2Val, out string Timestamp)
        {
            StatusFlag = string.Empty;
            Errorcode = string.Empty;
            profileIndex = string.Empty;
            TxPhaseShifter2Val = string.Empty;
            TxPhaseShifter1Val = string.Empty;
            Tx1BPMPhaseErrorValue = string.Empty;
            Tx1BPMAmplitudeErrorValue = string.Empty;
            Timestamp = string.Empty;
            ScriptOps.Tx1BPMPhaseMonitoringConfigurationParam.ProfileIndex = 0;
            ScriptOps.Tx1BPMPhaseMonitoringConfigurationParam.phaseShifterCfg = 0;
            ScriptOps.Tx1BPMPhaseMonitoringConfigurationParam.phaseShifterVal1 = 0;
            ScriptOps.Tx1BPMPhaseMonitoringConfigurationParam.phaseShifterVal2 = 0;
            ScriptOps.Tx1BPMPhaseMonitoringConfigurationParam.ReportingMode = 0;
            ScriptOps.Tx1BPMPhaseMonitoringConfigurationParam.RxChannel = 0;
            ScriptOps.Tx1BPMPhaseMonitoringConfigurationParam.TxBPMPhaseErrorThreshold = 0;
            ScriptOps.Tx1BPMPhaseMonitoringConfigurationParam.TxBPMAmplitudeErrorThreshold = 0;
            ScriptOps.Tx1BPMPhaseMonitoringConfigurationParam.TxPhaseShifter1Threshold = 0;
            ScriptOps.Tx1BPMPhaseMonitoringConfigurationParam.TxPhaseShifter2Threshold = 0;
            ScriptOps.Tx1BPMPhaseMonitoringConfigurationParam.Reserved = 0;
            ScriptOps.Tx2BPMPhaseMonitoringConfigurationParam.ProfileIndex = 0;
            ScriptOps.Tx2BPMPhaseMonitoringConfigurationParam.phaseShifterCfg = 0;
            ScriptOps.Tx2BPMPhaseMonitoringConfigurationParam.phaseShifterVal1 = 0;
            ScriptOps.Tx2BPMPhaseMonitoringConfigurationParam.phaseShifterVal2 = 0;
            ScriptOps.Tx2BPMPhaseMonitoringConfigurationParam.ReportingMode = 0;
            ScriptOps.Tx2BPMPhaseMonitoringConfigurationParam.RxChannel = 0;
            ScriptOps.Tx2BPMPhaseMonitoringConfigurationParam.TxBPMPhaseErrorThreshold = 0;
            ScriptOps.Tx2BPMPhaseMonitoringConfigurationParam.TxBPMAmplitudeErrorThreshold = 0;
            ScriptOps.Tx2BPMPhaseMonitoringConfigurationParam.TxPhaseShifter1Threshold = 0;
            ScriptOps.Tx2BPMPhaseMonitoringConfigurationParam.TxPhaseShifter2Threshold = 0;
            ScriptOps.Tx2BPMPhaseMonitoringConfigurationParam.Reserved = 0;
            ScriptOps.Tx3BPMPhaseMonitoringConfigurationParam.ProfileIndex = 0;
            ScriptOps.Tx3BPMPhaseMonitoringConfigurationParam.phaseShifterCfg = 0;
            ScriptOps.Tx3BPMPhaseMonitoringConfigurationParam.phaseShifterVal1 = 0;
            ScriptOps.Tx3BPMPhaseMonitoringConfigurationParam.phaseShifterVal2 = 0;
            ScriptOps.Tx3BPMPhaseMonitoringConfigurationParam.ReportingMode = 0;
            ScriptOps.Tx3BPMPhaseMonitoringConfigurationParam.RxChannel = 0;
            ScriptOps.Tx3BPMPhaseMonitoringConfigurationParam.TxBPMPhaseErrorThreshold = 0;
            ScriptOps.Tx3BPMPhaseMonitoringConfigurationParam.TxBPMAmplitudeErrorThreshold = 0;
            ScriptOps.Tx3BPMPhaseMonitoringConfigurationParam.TxPhaseShifter1Threshold = 0;
            ScriptOps.Tx3BPMPhaseMonitoringConfigurationParam.TxPhaseShifter2Threshold = 0;
            ScriptOps.Tx3BPMPhaseMonitoringConfigurationParam.Reserved = 0;
            ScriptOps.Tx3BPMPhaseMonitoringConfigurationParam.ProfileIndex = m_MonTx3BPMPhaseConfigParameters.ProfileIndex;
            ScriptOps.Tx3BPMPhaseMonitoringConfigurationParam.phaseShifterCfg = (byte)((int)((byte)(Math.Round((double)(m_MonTx1BPMPhaseConfigParameters.phaseShifterCfgIncVal * 64f)) / 360.0) & 63) | (int)m_MonTx3BPMPhaseConfigParameters.phaseShifterCfgIncValEna << 6 | (int)m_MonTx3BPMPhaseConfigParameters.phaseShifterMonEna << 7);
            ScriptOps.Tx3BPMPhaseMonitoringConfigurationParam.phaseShifterVal1 = (byte)(Math.Round((double)(m_MonTx3BPMPhaseConfigParameters.phaseShifter1 * 64f)) / 360.0);
            ScriptOps.Tx3BPMPhaseMonitoringConfigurationParam.phaseShifterVal2 = (byte)(Math.Round((double)(m_MonTx3BPMPhaseConfigParameters.phaseShifter2 * 64f)) / 360.0);
            ScriptOps.Tx3BPMPhaseMonitoringConfigurationParam.ReportingMode = m_MonTx3BPMPhaseConfigParameters.ReportingMode;
            ScriptOps.Tx3BPMPhaseMonitoringConfigurationParam.RxChannel = (byte)((int)m_MonTx3BPMPhaseConfigParameters.Rx0Channel | (int)m_MonTx3BPMPhaseConfigParameters.Rx1Channel << 1 | (int)m_MonTx3BPMPhaseConfigParameters.Rx2Channel << 2 | (int)m_MonTx3BPMPhaseConfigParameters.Rx3Channel << 3);
            ScriptOps.Tx3BPMPhaseMonitoringConfigurationParam.TxBPMPhaseErrorThreshold = (ushort)(m_MonTx3BPMPhaseConfigParameters.TxBPMPhaseErrorThreshold * 65536.0 / 360.0);
            ScriptOps.Tx3BPMPhaseMonitoringConfigurationParam.TxBPMAmplitudeErrorThreshold = (ushort)(m_MonTx3BPMPhaseConfigParameters.TxBPMAmplitudeErrorThreshold * 10.0);
            ScriptOps.Tx3BPMPhaseMonitoringConfigurationParam.TxPhaseShifter1Threshold = (ushort)(m_MonTx3BPMPhaseConfigParameters.TxPhaseShifter1Threshold * 65536.0 / 360.0);
            ScriptOps.Tx3BPMPhaseMonitoringConfigurationParam.TxPhaseShifter2Threshold = (ushort)(m_MonTx3BPMPhaseConfigParameters.TxPhaseShifter2Threshold * 65536.0 / 360.0);
            ScriptOps.Tx3BPMPhaseMonitoringConfigurationParam.Reserved = 0;
            GCHandle.Alloc(ScriptOps.Tx1BPMPhaseMonitoringConfigurationParam, GCHandleType.Pinned).AddrOfPinnedObject();
            GCHandle.Alloc(ScriptOps.Tx2BPMPhaseMonitoringConfigurationParam, GCHandleType.Pinned).AddrOfPinnedObject();
            IntPtr f = GCHandle.Alloc(ScriptOps.Tx3BPMPhaseMonitoringConfigurationParam, GCHandleType.Pinned).AddrOfPinnedObject();
            ScriptOps.Tx1Tx2Tx3BPMPhaseMonitoringConfigurationParam.f000022 = IntPtr.Zero;
            ScriptOps.Tx1Tx2Tx3BPMPhaseMonitoringConfigurationParam.f000023 = IntPtr.Zero;
            ScriptOps.Tx1Tx2Tx3BPMPhaseMonitoringConfigurationParam.f000024 = f;
            IntPtr data = GCHandle.Alloc(ScriptOps.Tx1Tx2Tx3BPMPhaseMonitoringConfigurationParam, GCHandleType.Pinned).AddrOfPinnedObject();
            int num;
            if (GlobalRef.g_NtvRS232Connect[(int)GlobalRef.g_RadarDeviceIndex] && GlobalRef.g_CasCadeDeviceSpiConnect == 0U)
            {
                num = m_TsWrapper.Calling_WriteAddr_Single(4294959848U, 1U);
                if (m_GuiManager.DllOps.itempDisconnect(false) == 0)
                {
                    string full_command = string.Format("Debug Port Disconnected", new object[0]);
                    m_GuiManager.RecordLog(0, full_command);
                    if (!GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
                    {
                        iRs232ConnectDisconnect_impl();
                    }
                }
            }
            if (m_RadarDeviceModeConfigParams.NumberOfRadarDevicesDetected <= 1)
            {
                string full_command2 = string.Format("ar1.SetRfTx2BpmMonConfig({0}, {1}, {2}, {3}, {4}, {5}, {6}, {7}, {8}, {9}, {10}, {11})", new object[]
                {
                    ScriptOps.Tx3BPMPhaseMonitoringConfigurationParam.ProfileIndex,
                    (int)m_MonTx3BPMPhaseConfigParameters.phaseShifterCfgIncValEna | (int)m_MonTx3BPMPhaseConfigParameters.phaseShifterMonEna << 1,
                    (decimal)Math.Round((double)m_MonTx3BPMPhaseConfigParameters.phaseShifterCfgIncVal, 3),
                    (decimal)Math.Round((double)m_MonTx3BPMPhaseConfigParameters.phaseShifter1, 3),
                    (decimal)Math.Round((double)m_MonTx3BPMPhaseConfigParameters.phaseShifter2, 3),
                    ScriptOps.Tx3BPMPhaseMonitoringConfigurationParam.ReportingMode,
                    ScriptOps.Tx3BPMPhaseMonitoringConfigurationParam.RxChannel,
                    (decimal)Math.Round(m_MonTx3BPMPhaseConfigParameters.TxBPMPhaseErrorThreshold, 2),
                    (decimal)Math.Round(m_MonTx3BPMPhaseConfigParameters.TxBPMAmplitudeErrorThreshold, 2),
                    (decimal)Math.Round(m_MonTx3BPMPhaseConfigParameters.TxPhaseShifter1Threshold, 2),
                    (decimal)Math.Round(m_MonTx3BPMPhaseConfigParameters.TxPhaseShifter2Threshold, 2),
                    m_MonTx3BPMPhaseConfigParameters.Reserved
                });
                m_GuiManager.RecordLog(6, full_command2);
            }
            else
            {
                string full_command3 = string.Format("ar1.SetRfTx2BpmMonConfig_mult({0}, {1}, {2}, {3}, {4}, {5}, {6}, {7}, {8}, {9}, {10}, {11}, {12})", new object[]
                {
                    GlobalRef.g_RadarDeviceId,
                    ScriptOps.Tx3BPMPhaseMonitoringConfigurationParam.ProfileIndex,
                    (int)m_MonTx3BPMPhaseConfigParameters.phaseShifterCfgIncValEna | (int)m_MonTx3BPMPhaseConfigParameters.phaseShifterMonEna << 1,
                    (decimal)Math.Round((double)m_MonTx3BPMPhaseConfigParameters.phaseShifterCfgIncVal, 3),
                    (decimal)Math.Round((double)m_MonTx3BPMPhaseConfigParameters.phaseShifter1, 3),
                    (decimal)Math.Round((double)m_MonTx3BPMPhaseConfigParameters.phaseShifter2, 3),
                    ScriptOps.Tx3BPMPhaseMonitoringConfigurationParam.ReportingMode,
                    ScriptOps.Tx3BPMPhaseMonitoringConfigurationParam.RxChannel,
                    (decimal)Math.Round(m_MonTx3BPMPhaseConfigParameters.TxBPMPhaseErrorThreshold, 2),
                    (decimal)Math.Round(m_MonTx3BPMPhaseConfigParameters.TxBPMAmplitudeErrorThreshold, 2),
                    (decimal)Math.Round(m_MonTx3BPMPhaseConfigParameters.TxPhaseShifter1Threshold, 2),
                    (decimal)Math.Round(m_MonTx3BPMPhaseConfigParameters.TxPhaseShifter2Threshold, 2),
                    m_MonTx3BPMPhaseConfigParameters.Reserved
                });
                m_GuiManager.RecordLog(6, full_command3);
            }
            GlobalRef.g_Tx3BPMPhaseMon = 1U;
            num = Imports.RadarLinkImpl_RfTxBpmMonConfig((byte)GlobalRef.g_RadarDeviceId, data);
            while (GlobalRef.g_Tx3BPMPhaseMon == 0U)
            {
                Thread.Sleep(100);
            }
            if (num == 0)
            {
                if (GlobalRef.g_RadarDeviceId == 1U)
                {
                    StatusFlag = Convert.ToString(ScriptOps.Tx3BPMPhaseAsyncFormatParam.StatusFlags);
                    Errorcode = Convert.ToString(ScriptOps.Tx3BPMPhaseAsyncFormatParam.ErrorCode);
                    profileIndex = Convert.ToString(ScriptOps.Tx3BPMPhaseAsyncFormatParam.ProfileIndex);
                    ushort txPhaseShifter2LSB = (ushort)ScriptOps.Tx3BPMPhaseAsyncFormatParam.TxPhaseShifter2LSB;
                    TxPhaseShifter2Val = Convert.ToString(Math.Round((double)(((int)txPhaseShifter2LSB | (int)ScriptOps.Tx3BPMPhaseAsyncFormatParam.TxPhaseShifter2MSB << 8) * 360) / 65536.0, 2));
                    ushort txPhaseShifter1Val = ScriptOps.Tx3BPMPhaseAsyncFormatParam.TxPhaseShifter1Val;
                    if (txPhaseShifter1Val > 32767)
                    {
                        ushort num2 = (ushort)((int)txPhaseShifter1Val - 65536);
                        TxPhaseShifter1Val = Convert.ToString(Math.Round((double)(num2 * 360) / 65536.0, 2));
                    }
                    else
                    {
                        TxPhaseShifter1Val = Convert.ToString(Math.Round((double)(txPhaseShifter1Val * 360) / 65536.0, 2));
                    }
                    ushort txBPMPhaseErrorVal = ScriptOps.Tx3BPMPhaseAsyncFormatParam.TxBPMPhaseErrorVal;
                    if (txBPMPhaseErrorVal > 32767)
                    {
                        ushort num2 = (ushort)((int)txBPMPhaseErrorVal - 65536);
                        Tx1BPMPhaseErrorValue = Convert.ToString(Math.Round((double)(num2 * 360) / 65536.0, 2));
                    }
                    else
                    {
                        Tx1BPMPhaseErrorValue = Convert.ToString(Math.Round((double)(txBPMPhaseErrorVal * 360) / 65536.0, 2));
                    }
                    byte txBPMAmplitudeErrorVal = ScriptOps.Tx3BPMPhaseAsyncFormatParam.TxBPMAmplitudeErrorVal;
                    if (txBPMAmplitudeErrorVal > 127)
                    {
                        sbyte b = (sbyte)(txBPMAmplitudeErrorVal - byte.MaxValue);
                        Tx1BPMAmplitudeErrorValue = Convert.ToString((double)b / 10.0);
                    }
                    else
                    {
                        Tx1BPMAmplitudeErrorValue = Convert.ToString((double)txBPMAmplitudeErrorVal / 10.0);
                    }
                    Timestamp = Convert.ToString(ScriptOps.Tx3BPMPhaseAsyncFormatParam.TimeStamp);
                }
                else if (GlobalRef.g_RadarDeviceId == 2U)
                {
                    StatusFlag = Convert.ToString(ScriptOps.Tx3BPMPhaseAsyncFormatParam.StatusFlags);
                    Errorcode = Convert.ToString(ScriptOps.Tx3BPMPhaseAsyncFormatParam.ErrorCode);
                    profileIndex = Convert.ToString(ScriptOps.Tx3BPMPhaseAsyncFormatParam.ProfileIndex);
                    ushort txPhaseShifter2LSB2 = (ushort)ScriptOps.Tx3BPMPhaseAsyncFormatParam.TxPhaseShifter2LSB;
                    TxPhaseShifter2Val = Convert.ToString(Math.Round((double)(((int)txPhaseShifter2LSB2 | (int)ScriptOps.Tx3BPMPhaseAsyncFormatParam.TxPhaseShifter2MSB << 8) * 360) / 65536.0, 2));
                    ushort txPhaseShifter1Val2 = ScriptOps.Tx3BPMPhaseAsyncFormatParam.TxPhaseShifter1Val;
                    if (txPhaseShifter1Val2 > 32767)
                    {
                        ushort num2 = (ushort)((int)txPhaseShifter1Val2 - 65536);
                        TxPhaseShifter1Val = Convert.ToString(Math.Round((double)(num2 * 360) / 65536.0, 2));
                    }
                    else
                    {
                        TxPhaseShifter1Val = Convert.ToString(Math.Round((double)(txPhaseShifter1Val2 * 360) / 65536.0, 2));
                    }
                    ushort txBPMPhaseErrorVal2 = ScriptOps.Tx3BPMPhaseAsyncFormatParam.TxBPMPhaseErrorVal;
                    if (txBPMPhaseErrorVal2 > 32767)
                    {
                        ushort num2 = (ushort)((int)txBPMPhaseErrorVal2 - 65536);
                        Tx1BPMPhaseErrorValue = Convert.ToString(Math.Round((double)(num2 * 360) / 65536.0, 2));
                    }
                    else
                    {
                        Tx1BPMPhaseErrorValue = Convert.ToString(Math.Round((double)(txBPMPhaseErrorVal2 * 360) / 65536.0, 2));
                    }
                    byte txBPMAmplitudeErrorVal2 = ScriptOps.Tx3BPMPhaseAsyncFormatParam.TxBPMAmplitudeErrorVal;
                    if (txBPMAmplitudeErrorVal2 > 127)
                    {
                        sbyte b = (sbyte)(txBPMAmplitudeErrorVal2 - byte.MaxValue);
                        Tx1BPMAmplitudeErrorValue = Convert.ToString((double)b / 10.0);
                    }
                    else
                    {
                        Tx1BPMAmplitudeErrorValue = Convert.ToString((double)txBPMAmplitudeErrorVal2 / 10.0);
                    }
                    Timestamp = Convert.ToString(ScriptOps.Tx3BPMPhaseAsyncFormatParam.TimeStamp);
                }
                else if (GlobalRef.g_RadarDeviceId == 4U)
                {
                    StatusFlag = Convert.ToString(ScriptOps.Tx3BPMPhaseAsyncFormatParam.StatusFlags);
                    Errorcode = Convert.ToString(ScriptOps.Tx3BPMPhaseAsyncFormatParam.ErrorCode);
                    profileIndex = Convert.ToString(ScriptOps.Tx3BPMPhaseAsyncFormatParam.ProfileIndex);
                    ushort txPhaseShifter2LSB3 = (ushort)ScriptOps.Tx3BPMPhaseAsyncFormatParam.TxPhaseShifter2LSB;
                    TxPhaseShifter2Val = Convert.ToString(Math.Round((double)(((int)txPhaseShifter2LSB3 | (int)ScriptOps.Tx3BPMPhaseAsyncFormatParam.TxPhaseShifter2MSB << 8) * 360) / 65536.0, 2));
                    ushort txPhaseShifter1Val3 = ScriptOps.Tx3BPMPhaseAsyncFormatParam.TxPhaseShifter1Val;
                    if (txPhaseShifter1Val3 > 32767)
                    {
                        ushort num2 = (ushort)((int)txPhaseShifter1Val3 - 65536);
                        TxPhaseShifter1Val = Convert.ToString(Math.Round((double)(num2 * 360) / 65536.0, 2));
                    }
                    else
                    {
                        TxPhaseShifter1Val = Convert.ToString(Math.Round((double)(txPhaseShifter1Val3 * 360) / 65536.0, 2));
                    }
                    ushort txBPMPhaseErrorVal3 = ScriptOps.Tx3BPMPhaseAsyncFormatParam.TxBPMPhaseErrorVal;
                    if (txBPMPhaseErrorVal3 > 32767)
                    {
                        ushort num2 = (ushort)((int)txBPMPhaseErrorVal3 - 65536);
                        Tx1BPMPhaseErrorValue = Convert.ToString(Math.Round((double)(num2 * 360) / 65536.0, 2));
                    }
                    else
                    {
                        Tx1BPMPhaseErrorValue = Convert.ToString(Math.Round((double)(txBPMPhaseErrorVal3 * 360) / 65536.0, 2));
                    }
                    byte txBPMAmplitudeErrorVal3 = ScriptOps.Tx3BPMPhaseAsyncFormatParam.TxBPMAmplitudeErrorVal;
                    if (txBPMAmplitudeErrorVal3 > 127)
                    {
                        sbyte b = (sbyte)(txBPMAmplitudeErrorVal3 - byte.MaxValue);
                        Tx1BPMAmplitudeErrorValue = Convert.ToString((double)b / 10.0);
                    }
                    else
                    {
                        Tx1BPMAmplitudeErrorValue = Convert.ToString((double)txBPMAmplitudeErrorVal3 / 10.0);
                    }
                    Timestamp = Convert.ToString(ScriptOps.Tx3BPMPhaseAsyncFormatParam.TimeStamp);
                }
                else if (GlobalRef.g_RadarDeviceId == 8U)
                {
                    StatusFlag = Convert.ToString(ScriptOps.Tx3BPMPhaseAsyncFormatParam.StatusFlags);
                    Errorcode = Convert.ToString(ScriptOps.Tx3BPMPhaseAsyncFormatParam.ErrorCode);
                    profileIndex = Convert.ToString(ScriptOps.Tx3BPMPhaseAsyncFormatParam.ProfileIndex);
                    ushort txPhaseShifter2LSB4 = (ushort)ScriptOps.Tx3BPMPhaseAsyncFormatParam.TxPhaseShifter2LSB;
                    TxPhaseShifter2Val = Convert.ToString(Math.Round((double)(((int)txPhaseShifter2LSB4 | (int)ScriptOps.Tx3BPMPhaseAsyncFormatParam.TxPhaseShifter2MSB << 8) * 360) / 65536.0, 2));
                    ushort txPhaseShifter1Val4 = ScriptOps.Tx3BPMPhaseAsyncFormatParam.TxPhaseShifter1Val;
                    if (txPhaseShifter1Val4 > 32767)
                    {
                        ushort num2 = (ushort)((int)txPhaseShifter1Val4 - 65536);
                        TxPhaseShifter1Val = Convert.ToString(Math.Round((double)(num2 * 360) / 65536.0, 2));
                    }
                    else
                    {
                        TxPhaseShifter1Val = Convert.ToString(Math.Round((double)(txPhaseShifter1Val4 * 360) / 65536.0, 2));
                    }
                    ushort txBPMPhaseErrorVal4 = ScriptOps.Tx3BPMPhaseAsyncFormatParam.TxBPMPhaseErrorVal;
                    if (txBPMPhaseErrorVal4 > 32767)
                    {
                        ushort num2 = (ushort)((int)txBPMPhaseErrorVal4 - 65536);
                        Tx1BPMPhaseErrorValue = Convert.ToString(Math.Round((double)(num2 * 360) / 65536.0, 2));
                    }
                    else
                    {
                        Tx1BPMPhaseErrorValue = Convert.ToString(Math.Round((double)(txBPMPhaseErrorVal4 * 360) / 65536.0, 2));
                    }
                    byte txBPMAmplitudeErrorVal4 = ScriptOps.Tx3BPMPhaseAsyncFormatParam.TxBPMAmplitudeErrorVal;
                    if (txBPMAmplitudeErrorVal4 > 127)
                    {
                        sbyte b = (sbyte)(txBPMAmplitudeErrorVal4 - byte.MaxValue);
                        Tx1BPMAmplitudeErrorValue = Convert.ToString((double)b / 10.0);
                    }
                    else
                    {
                        Tx1BPMAmplitudeErrorValue = Convert.ToString((double)txBPMAmplitudeErrorVal4 / 10.0);
                    }
                    Timestamp = Convert.ToString(ScriptOps.Tx3BPMPhaseAsyncFormatParam.TimeStamp);
                }
            }
            if ((num == 0 && ((GlobalRef.g_CasCadeDeviceSpiConnect & 1U) == 1U || (GlobalRef.g_CasCadeDeviceSpiConnect & 2U) == 2U || (GlobalRef.g_CasCadeDeviceSpiConnect & 4U) == 4U || (GlobalRef.g_CasCadeDeviceSpiConnect & 8U) == 8U)) || GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
            {
                string full_command4 = string.Format("Status: Passed", new object[0]);
                m_GuiManager.RecordLog(6, full_command4);
            }
            else
            {
                string msg = string.Format("Status: Failed, Error Type: {0}", new object[]
                {
                    GetErrorType(num)
                });
                GlobalRef.LuaWrapper.PrintError(msg);
            }
            if (GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
            {
                if (iRs232ConnectDisconnect_impl() == 0 && !GlobalRef.g_NtvRS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
                {
                    m_GuiManager.DllOps.iConnect(1U, 0U);
                    string full_command5 = string.Format("Debug Port Reconnected!", new object[0]);
                    m_GuiManager.RecordLog(9, full_command5);
                    ScriptOps.KeepTrying(2000, new Func<bool>(spare_read));
                }
            }
            else if (GlobalRef.g_CasCadeDeviceSpiConnect == 0U)
            {
                string full_command6 = string.Format("Error Occurred in Port open close", new object[0]);
                m_GuiManager.RecordLog(9, full_command6);
            }
            return num;
        }

        public int UpdateNSetDigitalPeriodicMonitoringConfData(ushort RadarDeviceId, char ReportingMode, uint Reserved, uint PeriodiDigitalMonEn, uint Reserved2)
        {
            int result = -1;
            GlobalRef.g_RadarDeviceId = (uint)RadarDeviceId;
            ScriptOps.m_MainForm.MonitoringConfig.UpdateRFDigitalSysPeriodicMonConfigData();
            m_RFDigitalSysPeriodicConfigParameters.ReportingMode = ReportingMode;
            m_RFDigitalSysPeriodicConfigParameters.Reserved = (uint)((ushort)Reserved);
            m_RFDigitalSysPeriodicConfigParameters.PeriodicRegisterRead = (char)(PeriodiDigitalMonEn & 1U);
            m_RFDigitalSysPeriodicConfigParameters.ESMTest = (char)(PeriodiDigitalMonEn >> 1 & 1U);
            m_RFDigitalSysPeriodicConfigParameters.DFESTC = (char)(PeriodiDigitalMonEn >> 2 & 1U);
            m_RFDigitalSysPeriodicConfigParameters.FrameTimigTest = (char)(PeriodiDigitalMonEn >> 3 & 1U);
            m_RFDigitalSysPeriodicConfigParameters.Reserved2 = (uint)((ushort)Reserved2);
            ScriptOps.m_MainForm.MonitoringConfig.UpdateRFDigitalSysPeriodicMonConfigDataFrmCmdSrc();
            return result;
        }

        public int UpdateNSetDigitalPeriodicMonitoringConfigurationData_cmd(out string DigMonPeriodicStatus, out string TimeStamp)
        {
            DigMonPeriodicStatus = string.Empty;
            TimeStamp = string.Empty;
            ScriptOps.m_MainForm.MonitoringConfig.UpdateRFDigitalSysPeriodicMonConfigData();
            return iSetDigitalPeriodicMonConfig_ImplForLuaCommand(out DigMonPeriodicStatus, out TimeStamp);
        }

        private int iSetDigitalPeriodicMonConfig_ImplForLuaCommand(out string DigMonPeriodicStatus, out string TimeStamp)
        {
            DigMonPeriodicStatus = string.Empty;
            TimeStamp = string.Empty;
            RFDigSysPeriodicConfigParametersParam.ReportingMode = (byte)m_RFDigitalSysPeriodicConfigParameters.ReportingMode;
            RFDigSysPeriodicConfigParametersParam.Reserved = 0;
            RFDigSysPeriodicConfigParametersParam.Reserved2 = 0;
            RFDigSysPeriodicConfigParametersParam.Reserved3 = 0;
            RFDigSysPeriodicConfigParametersParam.RFDigSysPeriodicMonEna = (uint)((byte)(m_RFDigitalSysPeriodicConfigParameters.PeriodicRegisterRead | m_RFDigitalSysPeriodicConfigParameters.ESMTest << 1 | m_RFDigitalSysPeriodicConfigParameters.DFESTC << 2 | m_RFDigitalSysPeriodicConfigParameters.FrameTimigTest << 3));
            RFDigSysPeriodicConfigParametersParam.Reserved4 = 0U;
            IntPtr data = GCHandle.Alloc(RFDigSysPeriodicConfigParametersParam, GCHandleType.Pinned).AddrOfPinnedObject();
            int num;
            if (GlobalRef.g_NtvRS232Connect[(int)GlobalRef.g_RadarDeviceIndex] && GlobalRef.g_CasCadeDeviceSpiConnect == 0U)
            {
                num = m_TsWrapper.Calling_WriteAddr_Single(4294959848U, 1U);
                if (m_GuiManager.DllOps.itempDisconnect(false) == 0)
                {
                    string full_command = string.Format("Debug Port Disconnected", new object[0]);
                    m_GuiManager.RecordLog(0, full_command);
                    if (!GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
                    {
                        iRs232ConnectDisconnect_impl();
                    }
                }
            }
            if (m_RadarDeviceModeConfigParams.NumberOfRadarDevicesDetected <= 1)
            {
                string full_command2 = string.Format("ar1.SetRfDigMonPeriodicConfig({0}, {1}, 0x{2}, {3})", new object[]
                {
                    m_RFDigitalSysPeriodicConfigParameters.ReportingMode,
                    m_RFDigitalSysPeriodicConfigParameters.Reserved,
                    ((int)(m_RFDigitalSysPeriodicConfigParameters.PeriodicRegisterRead | (int)m_RFDigitalSysPeriodicConfigParameters.ESMTest << 1 | (int)m_RFDigitalSysPeriodicConfigParameters.DFESTC << 2 | (int)m_RFDigitalSysPeriodicConfigParameters.FrameTimigTest << 3)).ToString("X"),
                    m_RFDigitalSysPeriodicConfigParameters.Reserved2
                });
                m_GuiManager.RecordLog(6, full_command2);
            }
            else
            {
                string full_command3 = string.Format("ar1.SetRfDigMonPeriodicConfig_mult({0}, {1}, 0x{2}, {3}, {4})", new object[]
                {
                    GlobalRef.g_RadarDeviceId,
                    m_RFDigitalSysPeriodicConfigParameters.ReportingMode,
                    m_RFDigitalSysPeriodicConfigParameters.Reserved,
                    ((int)(m_RFDigitalSysPeriodicConfigParameters.PeriodicRegisterRead | (int)m_RFDigitalSysPeriodicConfigParameters.ESMTest << 1 | (int)m_RFDigitalSysPeriodicConfigParameters.DFESTC << 2 | (int)m_RFDigitalSysPeriodicConfigParameters.FrameTimigTest << 3)).ToString("X"),
                    m_RFDigitalSysPeriodicConfigParameters.Reserved2
                });
                m_GuiManager.RecordLog(6, full_command3);
            }
            GlobalRef.g_DigPeriodicStatus = 1;
            num = Imports.RadarLinkImpl_RfDigMonPeriodicConfig(GlobalRef.g_RadarDeviceId, data);
            while (GlobalRef.g_DigPeriodicStatus == 0)
            {
                Thread.Sleep(100);
            }
            if (num == 0)
            {
                if (GlobalRef.g_RadarDeviceId == 1U)
                {
                    DigMonPeriodicStatus = "0x" + ScriptOps.RFDigitalPeriodicAsyncReportParam.RFDigMonPeriodicStatus.ToString("X");
                    TimeStamp = "0x" + ScriptOps.RFDigitalPeriodicAsyncReportParam.TimeStamp.ToString("X");
                }
                else if (GlobalRef.g_RadarDeviceId == 2U)
                {
                    DigMonPeriodicStatus = "0x" + ScriptOps.RFDigitalPeriodicAsyncReportParam.RFDigMonPeriodicStatus.ToString("X");
                    TimeStamp = "0x" + ScriptOps.RFDigitalPeriodicAsyncReportParam.TimeStamp.ToString("X");
                }
                else if (GlobalRef.g_RadarDeviceId == 4U)
                {
                    DigMonPeriodicStatus = "0x" + ScriptOps.RFDigitalPeriodicAsyncReportParam.RFDigMonPeriodicStatus.ToString("X");
                    TimeStamp = "0x" + ScriptOps.RFDigitalPeriodicAsyncReportParam.TimeStamp.ToString("X");
                }
                else if (GlobalRef.g_RadarDeviceId == 8U)
                {
                    DigMonPeriodicStatus = "0x" + ScriptOps.RFDigitalPeriodicAsyncReportParam.RFDigMonPeriodicStatus.ToString("X");
                    TimeStamp = "0x" + ScriptOps.RFDigitalPeriodicAsyncReportParam.TimeStamp.ToString("X");
                }
            }
            if ((num == 0 && ((GlobalRef.g_CasCadeDeviceSpiConnect & 1U) == 1U || (GlobalRef.g_CasCadeDeviceSpiConnect & 2U) == 2U || (GlobalRef.g_CasCadeDeviceSpiConnect & 4U) == 4U || (GlobalRef.g_CasCadeDeviceSpiConnect & 8U) == 8U)) || GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
            {
                string full_command4 = string.Format("Status: Passed", new object[0]);
                m_GuiManager.RecordLog(6, full_command4);
            }
            else
            {
                string msg = string.Format("Status: Failed, Error Type: {0}", new object[]
                {
                    GetErrorType(num)
                });
                GlobalRef.LuaWrapper.PrintError(msg);
            }
            if (GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
            {
                if (iRs232ConnectDisconnect_impl() == 0 && !GlobalRef.g_NtvRS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
                {
                    m_GuiManager.DllOps.iConnect(1U, 0U);
                    string full_command5 = string.Format("Debug Port Reconnected!", new object[0]);
                    m_GuiManager.RecordLog(9, full_command5);
                    ScriptOps.KeepTrying(2000, new Func<bool>(spare_read));
                }
            }
            else if (GlobalRef.g_CasCadeDeviceSpiConnect == 0U)
            {
                string full_command6 = string.Format("Error Occurred in Port open close", new object[0]);
                m_GuiManager.RecordLog(9, full_command6);
            }
            return num;
        }

        public int UpdateNSetDigitalLatentFaultMonitoringConfData(ushort RadarDeviceId, uint DigitalMonEnables, char TestMode, uint Reserved1, uint Reserved2)
        {
            int result = -1;
            GlobalRef.g_RadarDeviceId = (uint)RadarDeviceId;
            ScriptOps.m_MainForm.MonitoringConfig.UpdateMonitoringRFDigitalSysLatentFaultConfigData();
            m_RFDigitalSysLatentFaultConfigParameters.f00031c = (char)(DigitalMonEnables >> 1 & 1U);
            m_RFDigitalSysLatentFaultConfigParameters.VIMMOn = (char)(DigitalMonEnables >> 3 & 1U);
            m_RFDigitalSysLatentFaultConfigParameters.CRCMOn = (char)(DigitalMonEnables >> 6 & 1U);
            m_RFDigitalSysLatentFaultConfigParameters.RampGenECCMOn = (char)(DigitalMonEnables >> 7 & 1U);
            m_RFDigitalSysLatentFaultConfigParameters.DFEParityMOn = (char)(DigitalMonEnables >> 8 & 1U);
            m_RFDigitalSysLatentFaultConfigParameters.f00031d = (char)(DigitalMonEnables >> 9 & 1U);
            m_RFDigitalSysLatentFaultConfigParameters.RampGenLockStepMon = (char)(DigitalMonEnables >> 10 & 1U);
            m_RFDigitalSysLatentFaultConfigParameters.FRCLockStepMon = (char)(DigitalMonEnables >> 11 & 1U);
            m_RFDigitalSysLatentFaultConfigParameters.ESMMon = (char)(DigitalMonEnables >> 16 & 1U);
            m_RFDigitalSysLatentFaultConfigParameters.f00031e = (char)(DigitalMonEnables >> 17 & 1U);
            m_RFDigitalSysLatentFaultConfigParameters.f00031f = (char)(DigitalMonEnables >> 19 & 1U);
            m_RFDigitalSysLatentFaultConfigParameters.f000320 = (char)(DigitalMonEnables >> 20 & 1U);
            m_RFDigitalSysLatentFaultConfigParameters.FFTMon = (char)(DigitalMonEnables >> 24 & 1U);
            m_RFDigitalSysLatentFaultConfigParameters.RTIMon = (char)(DigitalMonEnables >> 25 & 1U);
            m_RFDigitalSysLatentFaultConfigParameters.PCRMon = (char)(DigitalMonEnables >> 26 & 1U);
            m_RFDigitalSysLatentFaultConfigParameters.TestMode = TestMode;
            m_RFDigitalSysLatentFaultConfigParameters.Reserved = 0U;
            m_RFDigitalSysLatentFaultConfigParameters.Reserved2 = 0U;
            ScriptOps.m_MainForm.MonitoringConfig.UpdateMonitoringRFDigitalSysLatentFaultConfigDataFrmCmdSrc();
            return result;
        }

        public int UpdateNSetDigitalLatentFaultMonitoringConfigurationData_cmd(out string TestStatusFlag)
        {
            TestStatusFlag = string.Empty;
            ScriptOps.m_MainForm.MonitoringConfig.UpdateMonitoringRFDigitalSysLatentFaultConfigData();
            return iSetDigitalLatentFaultMonConfig_ImplForLuaCommand(out TestStatusFlag);
        }

        private int iSetDigitalLatentFaultMonConfig_ImplForLuaCommand(out string TestStatusFlag)
        {
            TestStatusFlag = string.Empty;
            m_RFDigitalSysLatentFaultConfigParameters.WDTMon = '\0';
            m_RFDigitalSysLatentFaultConfigParameters.DCCMon = '\0';
            m_RFDigitalSysLatentFaultConfigParameters.SOCCMon = '\0';
            m_RFDigitalSysLatentFaultConfigParameters.f000321 = '\0';
            m_RFDigitalSysLatentFaultConfigParameters.FRCMon = '\0';
            RFDigSysLatentFaultConfigParametersParam.DigitalMonEna = (uint)((uint)m_RFDigitalSysLatentFaultConfigParameters.f00031c << 1 | (uint)m_RFDigitalSysLatentFaultConfigParameters.VIMMOn << 3 | (uint)m_RFDigitalSysLatentFaultConfigParameters.CRCMOn << 6 | (uint)m_RFDigitalSysLatentFaultConfigParameters.RampGenECCMOn << 7 | (uint)m_RFDigitalSysLatentFaultConfigParameters.DFEParityMOn << 8 | (uint)m_RFDigitalSysLatentFaultConfigParameters.f00031d << 9 | (uint)m_RFDigitalSysLatentFaultConfigParameters.RampGenLockStepMon << 10 | (uint)m_RFDigitalSysLatentFaultConfigParameters.FRCLockStepMon << 11 | (uint)m_RFDigitalSysLatentFaultConfigParameters.WDTMon << 15 | (uint)m_RFDigitalSysLatentFaultConfigParameters.ESMMon << 16 | (uint)m_RFDigitalSysLatentFaultConfigParameters.f00031e << 17 | (uint)m_RFDigitalSysLatentFaultConfigParameters.FRCMon << 18 | (uint)m_RFDigitalSysLatentFaultConfigParameters.f00031f << 19 | (uint)m_RFDigitalSysLatentFaultConfigParameters.f000320 << 20 | (uint)m_RFDigitalSysLatentFaultConfigParameters.DCCMon << 21 | (uint)m_RFDigitalSysLatentFaultConfigParameters.SOCCMon << 22 | (uint)m_RFDigitalSysLatentFaultConfigParameters.f000321 << 23 | (uint)m_RFDigitalSysLatentFaultConfigParameters.FFTMon << 24 | (uint)m_RFDigitalSysLatentFaultConfigParameters.RTIMon << 25 | (uint)m_RFDigitalSysLatentFaultConfigParameters.PCRMon << 26);
            RFDigSysLatentFaultConfigParametersParam.TestMode = (byte)m_RFDigitalSysLatentFaultConfigParameters.TestMode;
            RFDigSysLatentFaultConfigParametersParam.Reserved = 0;
            RFDigSysLatentFaultConfigParametersParam.Reserved2 = 0;
            IntPtr data = GCHandle.Alloc(RFDigSysLatentFaultConfigParametersParam, GCHandleType.Pinned).AddrOfPinnedObject();
            int num;
            if (GlobalRef.g_NtvRS232Connect[(int)GlobalRef.g_RadarDeviceIndex] && GlobalRef.g_CasCadeDeviceSpiConnect == 0U)
            {
                num = m_TsWrapper.Calling_WriteAddr_Single(4294959848U, 1U);
                if (m_GuiManager.DllOps.itempDisconnect(false) == 0)
                {
                    string full_command = string.Format("Debug Port Disconnected", new object[0]);
                    m_GuiManager.RecordLog(0, full_command);
                    if (!GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
                    {
                        iRs232ConnectDisconnect_impl();
                    }
                }
            }
            if (m_RadarDeviceModeConfigParams.NumberOfRadarDevicesDetected <= 1)
            {
                string full_command2 = string.Format("ar1.SetRfDigLatentFaultMonEnableConfig(0x{0}, {1}, {2}, {3})", new object[]
                {
                    ((int)((int)m_RFDigitalSysLatentFaultConfigParameters.f00031c << 1 | (int)m_RFDigitalSysLatentFaultConfigParameters.VIMMOn << 3 | (int)m_RFDigitalSysLatentFaultConfigParameters.CRCMOn << 6 | (int)m_RFDigitalSysLatentFaultConfigParameters.RampGenECCMOn << 7 | (int)m_RFDigitalSysLatentFaultConfigParameters.DFEParityMOn << 8 | (int)m_RFDigitalSysLatentFaultConfigParameters.f00031d << 9 | (int)m_RFDigitalSysLatentFaultConfigParameters.RampGenLockStepMon << 10 | (int)m_RFDigitalSysLatentFaultConfigParameters.FRCLockStepMon << 11 | (int)m_RFDigitalSysLatentFaultConfigParameters.ESMMon << 16 | (int)m_RFDigitalSysLatentFaultConfigParameters.f00031e << 17 | (int)m_RFDigitalSysLatentFaultConfigParameters.f00031f << 19 | (int)m_RFDigitalSysLatentFaultConfigParameters.f000320 << 20 | (int)m_RFDigitalSysLatentFaultConfigParameters.FFTMon << 24 | (int)m_RFDigitalSysLatentFaultConfigParameters.RTIMon << 25 | (int)m_RFDigitalSysLatentFaultConfigParameters.PCRMon << 26)).ToString("X"),
                    m_RFDigitalSysLatentFaultConfigParameters.TestMode,
                    m_RFDigitalSysLatentFaultConfigParameters.Reserved,
                    m_RFDigitalSysLatentFaultConfigParameters.Reserved2
                });
                m_GuiManager.RecordLog(6, full_command2);
            }
            else
            {
                string full_command3 = string.Format("ar1.SetRfDigLatentFaultMonEnableConfig_mult({0}, 0x{1}, {2}, {3}, {4})", new object[]
                {
                    GlobalRef.g_RadarDeviceId,
                    ((int)((int)m_RFDigitalSysLatentFaultConfigParameters.f00031c << 1 | (int)m_RFDigitalSysLatentFaultConfigParameters.VIMMOn << 3 | (int)m_RFDigitalSysLatentFaultConfigParameters.CRCMOn << 6 | (int)m_RFDigitalSysLatentFaultConfigParameters.RampGenECCMOn << 7 | (int)m_RFDigitalSysLatentFaultConfigParameters.DFEParityMOn << 8 | (int)m_RFDigitalSysLatentFaultConfigParameters.f00031d << 9 | (int)m_RFDigitalSysLatentFaultConfigParameters.RampGenLockStepMon << 10 | (int)m_RFDigitalSysLatentFaultConfigParameters.FRCLockStepMon << 11 | (int)m_RFDigitalSysLatentFaultConfigParameters.ESMMon << 16 | (int)m_RFDigitalSysLatentFaultConfigParameters.f00031e << 17 | (int)m_RFDigitalSysLatentFaultConfigParameters.f00031f << 19 | (int)m_RFDigitalSysLatentFaultConfigParameters.f000320 << 20 | (int)m_RFDigitalSysLatentFaultConfigParameters.FFTMon << 24 | (int)m_RFDigitalSysLatentFaultConfigParameters.RTIMon << 25 | (int)m_RFDigitalSysLatentFaultConfigParameters.PCRMon << 26)).ToString("X"),
                    m_RFDigitalSysLatentFaultConfigParameters.TestMode,
                    m_RFDigitalSysLatentFaultConfigParameters.Reserved,
                    m_RFDigitalSysLatentFaultConfigParameters.Reserved2
                });
                m_GuiManager.RecordLog(6, full_command3);
            }
            GlobalRef.g_DigLatentFaultStatus = 0;
            num = Imports.RadarLinkImpl_EnableDigMon(GlobalRef.g_RadarDeviceId, data);
            while (GlobalRef.g_DigLatentFaultStatus == 0)
            {
                Thread.Sleep(100);
            }
            if (num == 0)
            {
                if (GlobalRef.g_RadarDeviceId == 1U)
                {
                    TestStatusFlag = "0x" + ScriptOps.RFDigitalLatentFaultAsyncReportParam.DigLatentFaultResult.ToString("X");
                }
                else if (GlobalRef.g_RadarDeviceId == 2U)
                {
                    TestStatusFlag = "0x" + ScriptOps.RFDigitalLatentFaultAsyncReportParam.DigLatentFaultResult.ToString("X");
                }
                else if (GlobalRef.g_RadarDeviceId == 4U)
                {
                    TestStatusFlag = "0x" + ScriptOps.RFDigitalLatentFaultAsyncReportParam.DigLatentFaultResult.ToString("X");
                }
                else if (GlobalRef.g_RadarDeviceId == 8U)
                {
                    TestStatusFlag = "0x" + ScriptOps.RFDigitalLatentFaultAsyncReportParam.DigLatentFaultResult.ToString("X");
                }
            }
            if ((num == 0 && ((GlobalRef.g_CasCadeDeviceSpiConnect & 1U) == 1U || (GlobalRef.g_CasCadeDeviceSpiConnect & 2U) == 2U || (GlobalRef.g_CasCadeDeviceSpiConnect & 4U) == 4U || (GlobalRef.g_CasCadeDeviceSpiConnect & 8U) == 8U)) || GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
            {
                string full_command4 = string.Format("Status: Passed", new object[0]);
                m_GuiManager.RecordLog(6, full_command4);
            }
            else
            {
                string msg = string.Format("Status: Failed, Error Type: {0}", new object[]
                {
                    GetErrorType(num)
                });
                GlobalRef.LuaWrapper.PrintError(msg);
            }
            if (GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
            {
                if (iRs232ConnectDisconnect_impl() == 0 && !GlobalRef.g_NtvRS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
                {
                    m_GuiManager.DllOps.iConnect(1U, 0U);
                    string full_command5 = string.Format("Debug Port Reconnected!", new object[0]);
                    m_GuiManager.RecordLog(9, full_command5);
                    ScriptOps.KeepTrying(2000, new Func<bool>(spare_read));
                }
            }
            else if (GlobalRef.g_CasCadeDeviceSpiConnect == 0U)
            {
                string full_command6 = string.Format("Error Occurred in Port open close", new object[0]);
                m_GuiManager.RecordLog(9, full_command6);
            }
            return num;
        }

        public int UpdateNSetTx1BallBreakMonitoringConfData(ushort RadarDeviceId, char ReportingMode, double TXReflectionCoeffMagnitudeThreshold)
        {
            int result = -1;
            GlobalRef.g_RadarDeviceId = (uint)RadarDeviceId;
            ScriptOps.m_MainForm.AnalogMonConfig.UpdateTX1BallBreakMonConfigData();
            m_MonTx1BallBreakConfigParameters.ReportingMode = ReportingMode;
            m_MonTx1BallBreakConfigParameters.TXReflectionCoeffMagnitudeThreshold = TXReflectionCoeffMagnitudeThreshold;
            ScriptOps.m_MainForm.AnalogMonConfig.UpdateTX1BallBreakMonConfigDataFrmCmdSrc();
            return result;
        }

        public int UpdateNTx1BallBreakMonitoringConfigurationData_cmd(out string StatusFlags, out string ErrorCode, out string TxReflCoeffMagValue, out string TimeStamp)
        {
            StatusFlags = string.Empty;
            ErrorCode = string.Empty;
            TxReflCoeffMagValue = string.Empty;
            TimeStamp = string.Empty;
            ScriptOps.m_MainForm.AnalogMonConfig.UpdateTX1BallBreakMonConfigData();
            return iSetTx1BallBreakMonConfig_ImplForLuaCommand(out StatusFlags, out ErrorCode, out TxReflCoeffMagValue, out TimeStamp);
        }

        private int iSetTx1BallBreakMonConfig_ImplForLuaCommand(out string StatusFlags, out string ErrorCode, out string TxReflCoeffMagValue, out string TimeStamp)
        {
            StatusFlags = string.Empty;
            ErrorCode = string.Empty;
            TxReflCoeffMagValue = string.Empty;
            TimeStamp = string.Empty;
            ScriptOps.TX1BallBreakMonitoringConfigurationParam.ReportingMode = 0;
            ScriptOps.TX1BallBreakMonitoringConfigurationParam.TxReflCeoffMagThreshold = 0;
            ScriptOps.TX1BallBreakMonitoringConfigurationParam.Reserved = 0;
            ScriptOps.TX1BallBreakMonitoringConfigurationParam.Reserved2 = 0U;
            ScriptOps.TX1BallBreakMonitoringConfigurationParam.Reserved3 = 0U;
            ScriptOps.TX2BallBreakMonitoringConfigurationParam.ReportingMode = 0;
            ScriptOps.TX2BallBreakMonitoringConfigurationParam.TxReflCeoffMagThreshold = 0;
            ScriptOps.TX2BallBreakMonitoringConfigurationParam.Reserved = 0;
            ScriptOps.TX2BallBreakMonitoringConfigurationParam.Reserved2 = 0U;
            ScriptOps.TX2BallBreakMonitoringConfigurationParam.Reserved3 = 0U;
            ScriptOps.TX3BallBreakMonitoringConfigurationParam.ReportingMode = 0;
            ScriptOps.TX3BallBreakMonitoringConfigurationParam.TxReflCeoffMagThreshold = 0;
            ScriptOps.TX3BallBreakMonitoringConfigurationParam.Reserved = 0;
            ScriptOps.TX3BallBreakMonitoringConfigurationParam.Reserved2 = 0U;
            ScriptOps.TX3BallBreakMonitoringConfigurationParam.Reserved3 = 0U;
            ScriptOps.TX1BallBreakMonitoringConfigurationParam.ReportingMode = (byte)m_MonTx1BallBreakConfigParameters.ReportingMode;
            ScriptOps.TX1BallBreakMonitoringConfigurationParam.TxReflCeoffMagThreshold = (short)(m_MonTx1BallBreakConfigParameters.TXReflectionCoeffMagnitudeThreshold * 10.0);
            ScriptOps.TX1BallBreakMonitoringConfigurationParam.Reserved = 0;
            ScriptOps.TX1BallBreakMonitoringConfigurationParam.Reserved2 = 0U;
            ScriptOps.TX1BallBreakMonitoringConfigurationParam.Reserved3 = 0U;
            IntPtr pTX1BallBreakMonitoringConfigurationData = GCHandle.Alloc(ScriptOps.TX1BallBreakMonitoringConfigurationParam, GCHandleType.Pinned).AddrOfPinnedObject();
            GCHandle.Alloc(ScriptOps.TX2BallBreakMonitoringConfigurationParam, GCHandleType.Pinned).AddrOfPinnedObject();
            GCHandle.Alloc(ScriptOps.TX3BallBreakMonitoringConfigurationParam, GCHandleType.Pinned).AddrOfPinnedObject();
            ScriptOps.Tx1Tx2Tx3BallBreakMonitoringConfigurationParam.pTX1BallBreakMonitoringConfigurationData = pTX1BallBreakMonitoringConfigurationData;
            ScriptOps.Tx1Tx2Tx3BallBreakMonitoringConfigurationParam.pTX2BallBreakMonitoringConfigurationData = IntPtr.Zero;
            ScriptOps.Tx1Tx2Tx3BallBreakMonitoringConfigurationParam.pTX3BallBreakMonitoringConfigurationData = IntPtr.Zero;
            IntPtr data = GCHandle.Alloc(ScriptOps.Tx1Tx2Tx3BallBreakMonitoringConfigurationParam, GCHandleType.Pinned).AddrOfPinnedObject();
            int num;
            if (GlobalRef.g_NtvRS232Connect[(int)GlobalRef.g_RadarDeviceIndex] && GlobalRef.g_CasCadeDeviceSpiConnect == 0U)
            {
                num = m_TsWrapper.Calling_WriteAddr_Single(4294959848U, 1U);
                if (m_GuiManager.DllOps.itempDisconnect(false) == 0)
                {
                    string full_command = string.Format("Debug Port Disconnected", new object[0]);
                    m_GuiManager.RecordLog(0, full_command);
                    if (!GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
                    {
                        iRs232ConnectDisconnect_impl();
                    }
                }
            }
            if (m_RadarDeviceModeConfigParams.NumberOfRadarDevicesDetected <= 1)
            {
                string full_command2 = string.Format("ar1.SetRfTx0BallbreakMonConfig({0}, {1})", new object[]
                {
                    m_MonTx1BallBreakConfigParameters.ReportingMode,
                    (decimal)Math.Round(m_MonTx1BallBreakConfigParameters.TXReflectionCoeffMagnitudeThreshold, 1)
                });
                m_GuiManager.RecordLog(6, full_command2);
            }
            else
            {
                string full_command3 = string.Format("ar1.SetRfTx0BallbreakMonConfig_mult({0}, {1}, {2})", new object[]
                {
                    GlobalRef.g_RadarDeviceId,
                    m_MonTx1BallBreakConfigParameters.ReportingMode,
                    (decimal)Math.Round(m_MonTx1BallBreakConfigParameters.TXReflectionCoeffMagnitudeThreshold, 1)
                });
                m_GuiManager.RecordLog(6, full_command3);
            }
            GlobalRef.g_Tx1BallBreakMon = 1U;
            num = Imports.RadarLinkImpl_RfTxBallbreakMonConfig((byte)GlobalRef.g_RadarDeviceId, data);
            while (GlobalRef.g_Tx1BallBreakMon == 0U)
            {
                Thread.Sleep(100);
            }
            if (num == 0)
            {
                if (GlobalRef.g_RadarDeviceId == 1U)
                {
                    StatusFlags = Convert.ToString(ScriptOps.Tx1BallBreakAsyncDataParam.StatusFlags);
                    ErrorCode = Convert.ToString(ScriptOps.Tx1BallBreakAsyncDataParam.ErrorCode);
                    ushort txReflCoeffMagValue = ScriptOps.Tx1BallBreakAsyncDataParam.TxReflCoeffMagValue;
                    if (txReflCoeffMagValue > 32767)
                    {
                        short num2 = (short)((int)txReflCoeffMagValue - 65536);
                        TxReflCoeffMagValue = Convert.ToString((double)num2 / 10.0);
                    }
                    else
                    {
                        TxReflCoeffMagValue = Convert.ToString((double)txReflCoeffMagValue / 10.0);
                    }
                    TimeStamp = Convert.ToString(ScriptOps.Tx1BallBreakAsyncDataParam.TimeStamp);
                }
                else if (GlobalRef.g_RadarDeviceId == 2U)
                {
                    StatusFlags = Convert.ToString(ScriptOps.Tx1BallBreakAsyncDataParam.StatusFlags);
                    ErrorCode = Convert.ToString(ScriptOps.Tx1BallBreakAsyncDataParam.ErrorCode);
                    ushort txReflCoeffMagValue2 = ScriptOps.Tx1BallBreakAsyncDataParam.TxReflCoeffMagValue;
                    if (txReflCoeffMagValue2 > 32767)
                    {
                        short num2 = (short)((int)txReflCoeffMagValue2 - 65536);
                        TxReflCoeffMagValue = Convert.ToString((double)num2 / 10.0);
                    }
                    else
                    {
                        TxReflCoeffMagValue = Convert.ToString((double)txReflCoeffMagValue2 / 10.0);
                    }
                    TimeStamp = Convert.ToString(ScriptOps.Tx1BallBreakAsyncDataParam.TimeStamp);
                }
                else if (GlobalRef.g_RadarDeviceId == 4U)
                {
                    StatusFlags = Convert.ToString(ScriptOps.Tx1BallBreakAsyncDataParam.StatusFlags);
                    ErrorCode = Convert.ToString(ScriptOps.Tx1BallBreakAsyncDataParam.ErrorCode);
                    ushort txReflCoeffMagValue3 = ScriptOps.Tx1BallBreakAsyncDataParam.TxReflCoeffMagValue;
                    if (txReflCoeffMagValue3 > 32767)
                    {
                        short num2 = (short)((int)txReflCoeffMagValue3 - 65536);
                        TxReflCoeffMagValue = Convert.ToString((double)num2 / 10.0);
                    }
                    else
                    {
                        TxReflCoeffMagValue = Convert.ToString((double)txReflCoeffMagValue3 / 10.0);
                    }
                    TimeStamp = Convert.ToString(ScriptOps.Tx1BallBreakAsyncDataParam.TimeStamp);
                }
                else if (GlobalRef.g_RadarDeviceId == 8U)
                {
                    StatusFlags = Convert.ToString(ScriptOps.Tx1BallBreakAsyncDataParam.StatusFlags);
                    ErrorCode = Convert.ToString(ScriptOps.Tx1BallBreakAsyncDataParam.ErrorCode);
                    ushort txReflCoeffMagValue4 = ScriptOps.Tx1BallBreakAsyncDataParam.TxReflCoeffMagValue;
                    if (txReflCoeffMagValue4 > 32767)
                    {
                        short num2 = (short)((int)txReflCoeffMagValue4 - 65536);
                        TxReflCoeffMagValue = Convert.ToString((double)num2 / 10.0);
                    }
                    else
                    {
                        TxReflCoeffMagValue = Convert.ToString((double)txReflCoeffMagValue4 / 10.0);
                    }
                    TimeStamp = Convert.ToString(ScriptOps.Tx1BallBreakAsyncDataParam.TimeStamp);
                }
            }
            if ((num == 0 && ((GlobalRef.g_CasCadeDeviceSpiConnect & 1U) == 1U || (GlobalRef.g_CasCadeDeviceSpiConnect & 2U) == 2U || (GlobalRef.g_CasCadeDeviceSpiConnect & 4U) == 4U || (GlobalRef.g_CasCadeDeviceSpiConnect & 8U) == 8U)) || GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
            {
                string full_command4 = string.Format("Status: Passed", new object[0]);
                m_GuiManager.RecordLog(6, full_command4);
            }
            else
            {
                string msg = string.Format("Status: Failed, Error Type: {0}", new object[]
                {
                    GetErrorType(num)
                });
                GlobalRef.LuaWrapper.PrintError(msg);
            }
            if (GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
            {
                if (iRs232ConnectDisconnect_impl() == 0 && !GlobalRef.g_NtvRS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
                {
                    m_GuiManager.DllOps.iConnect(1U, 0U);
                    string full_command5 = string.Format("Debug Port Reconnected!", new object[0]);
                    m_GuiManager.RecordLog(9, full_command5);
                    ScriptOps.KeepTrying(2000, new Func<bool>(spare_read));
                }
            }
            else if (GlobalRef.g_CasCadeDeviceSpiConnect == 0U)
            {
                string full_command6 = string.Format("Error Occurred in Port open close", new object[0]);
                m_GuiManager.RecordLog(9, full_command6);
            }
            return num;
        }

        public int UpdateNSetTx2BallBreakMonitoringConfData(ushort RadarDeviceId, char ReportingMode, double TXReflectionCoeffMagnitudeThreshold)
        {
            int result = -1;
            GlobalRef.g_RadarDeviceId = (uint)RadarDeviceId;
            ScriptOps.m_MainForm.AnalogMonConfig.UpdateTX2BallBreakMonConfigData();
            m_MonTx2BallBreakConfigParameters.ReportingMode = ReportingMode;
            m_MonTx2BallBreakConfigParameters.TXReflectionCoeffMagnitudeThreshold = TXReflectionCoeffMagnitudeThreshold;
            ScriptOps.m_MainForm.AnalogMonConfig.UpdateTX2BallBreakMonConfigDataFrmCmdSrc();
            return result;
        }

        public int UpdateNTx2BallBreakMonitoringConfigurationData_cmd(out string StatusFlags, out string ErrorCode, out string TxReflCoeffMagValue, out string TimeStamp)
        {
            StatusFlags = string.Empty;
            ErrorCode = string.Empty;
            TxReflCoeffMagValue = string.Empty;
            TimeStamp = string.Empty;
            ScriptOps.m_MainForm.AnalogMonConfig.UpdateTX2BallBreakMonConfigData();
            return iSetTx2BallBreakMonConfig_ImplForLuaCommand(out StatusFlags, out ErrorCode, out TxReflCoeffMagValue, out TimeStamp);
        }

        private int iSetTx2BallBreakMonConfig_ImplForLuaCommand(out string StatusFlags, out string ErrorCode, out string TxReflCoeffMagValue, out string TimeStamp)
        {
            StatusFlags = string.Empty;
            ErrorCode = string.Empty;
            TxReflCoeffMagValue = string.Empty;
            TimeStamp = string.Empty;
            ScriptOps.TX1BallBreakMonitoringConfigurationParam.ReportingMode = 0;
            ScriptOps.TX1BallBreakMonitoringConfigurationParam.TxReflCeoffMagThreshold = 0;
            ScriptOps.TX1BallBreakMonitoringConfigurationParam.Reserved = 0;
            ScriptOps.TX1BallBreakMonitoringConfigurationParam.Reserved2 = 0U;
            ScriptOps.TX1BallBreakMonitoringConfigurationParam.Reserved3 = 0U;
            ScriptOps.TX2BallBreakMonitoringConfigurationParam.ReportingMode = 0;
            ScriptOps.TX2BallBreakMonitoringConfigurationParam.TxReflCeoffMagThreshold = 0;
            ScriptOps.TX2BallBreakMonitoringConfigurationParam.Reserved = 0;
            ScriptOps.TX2BallBreakMonitoringConfigurationParam.Reserved2 = 0U;
            ScriptOps.TX2BallBreakMonitoringConfigurationParam.Reserved3 = 0U;
            ScriptOps.TX3BallBreakMonitoringConfigurationParam.ReportingMode = 0;
            ScriptOps.TX3BallBreakMonitoringConfigurationParam.TxReflCeoffMagThreshold = 0;
            ScriptOps.TX3BallBreakMonitoringConfigurationParam.Reserved = 0;
            ScriptOps.TX3BallBreakMonitoringConfigurationParam.Reserved2 = 0U;
            ScriptOps.TX3BallBreakMonitoringConfigurationParam.Reserved3 = 0U;
            ScriptOps.TX2BallBreakMonitoringConfigurationParam.ReportingMode = (byte)m_MonTx2BallBreakConfigParameters.ReportingMode;
            ScriptOps.TX2BallBreakMonitoringConfigurationParam.TxReflCeoffMagThreshold = (short)(m_MonTx2BallBreakConfigParameters.TXReflectionCoeffMagnitudeThreshold * 10.0);
            ScriptOps.TX2BallBreakMonitoringConfigurationParam.Reserved = 0;
            ScriptOps.TX2BallBreakMonitoringConfigurationParam.Reserved2 = 0U;
            ScriptOps.TX2BallBreakMonitoringConfigurationParam.Reserved3 = 0U;
            GCHandle.Alloc(ScriptOps.TX1BallBreakMonitoringConfigurationParam, GCHandleType.Pinned).AddrOfPinnedObject();
            IntPtr pTX2BallBreakMonitoringConfigurationData = GCHandle.Alloc(ScriptOps.TX2BallBreakMonitoringConfigurationParam, GCHandleType.Pinned).AddrOfPinnedObject();
            GCHandle.Alloc(ScriptOps.TX3BallBreakMonitoringConfigurationParam, GCHandleType.Pinned).AddrOfPinnedObject();
            ScriptOps.Tx1Tx2Tx3BallBreakMonitoringConfigurationParam.pTX1BallBreakMonitoringConfigurationData = IntPtr.Zero;
            ScriptOps.Tx1Tx2Tx3BallBreakMonitoringConfigurationParam.pTX2BallBreakMonitoringConfigurationData = pTX2BallBreakMonitoringConfigurationData;
            ScriptOps.Tx1Tx2Tx3BallBreakMonitoringConfigurationParam.pTX3BallBreakMonitoringConfigurationData = IntPtr.Zero;
            IntPtr data = GCHandle.Alloc(ScriptOps.Tx1Tx2Tx3BallBreakMonitoringConfigurationParam, GCHandleType.Pinned).AddrOfPinnedObject();
            int num;
            if (GlobalRef.g_NtvRS232Connect[(int)GlobalRef.g_RadarDeviceIndex] && GlobalRef.g_CasCadeDeviceSpiConnect == 0U)
            {
                num = m_TsWrapper.Calling_WriteAddr_Single(4294959848U, 1U);
                if (m_GuiManager.DllOps.itempDisconnect(false) == 0)
                {
                    string full_command = string.Format("Debug Port Disconnected", new object[0]);
                    m_GuiManager.RecordLog(0, full_command);
                    if (!GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
                    {
                        iRs232ConnectDisconnect_impl();
                    }
                }
            }
            if (m_RadarDeviceModeConfigParams.NumberOfRadarDevicesDetected <= 1)
            {
                string full_command2 = string.Format("ar1.SetRfTx1BallbreakMonConfig({0}, {1})", new object[]
                {
                    m_MonTx2BallBreakConfigParameters.ReportingMode,
                    (decimal)Math.Round(m_MonTx2BallBreakConfigParameters.TXReflectionCoeffMagnitudeThreshold, 1)
                });
                m_GuiManager.RecordLog(6, full_command2);
            }
            else
            {
                string full_command3 = string.Format("ar1.SetRfTx1BallbreakMonConfig_mult({0}, {1}, {2})", new object[]
                {
                    GlobalRef.g_RadarDeviceId,
                    m_MonTx2BallBreakConfigParameters.ReportingMode,
                    (decimal)Math.Round(m_MonTx2BallBreakConfigParameters.TXReflectionCoeffMagnitudeThreshold, 1)
                });
                m_GuiManager.RecordLog(6, full_command3);
            }
            GlobalRef.g_Tx2BallBreakMon = 1U;
            num = Imports.RadarLinkImpl_RfTxBallbreakMonConfig((byte)GlobalRef.g_RadarDeviceId, data);
            while (GlobalRef.g_Tx2BallBreakMon == 0U)
            {
                Thread.Sleep(100);
            }
            if (num == 0)
            {
                if (GlobalRef.g_RadarDeviceId == 1U)
                {
                    StatusFlags = Convert.ToString(ScriptOps.Tx2BallBreakAsyncDataParam.StatusFlags);
                    ErrorCode = Convert.ToString(ScriptOps.Tx2BallBreakAsyncDataParam.ErrorCode);
                    ushort txReflCoeffMagValue = ScriptOps.Tx2BallBreakAsyncDataParam.TxReflCoeffMagValue;
                    if (txReflCoeffMagValue > 32767)
                    {
                        short num2 = (short)((int)txReflCoeffMagValue - 65536);
                        TxReflCoeffMagValue = Convert.ToString((double)num2 / 10.0);
                    }
                    else
                    {
                        TxReflCoeffMagValue = Convert.ToString((double)txReflCoeffMagValue / 10.0);
                    }
                    TimeStamp = Convert.ToString(ScriptOps.Tx2BallBreakAsyncDataParam.TimeStamp);
                }
                else if (GlobalRef.g_RadarDeviceId == 2U)
                {
                    StatusFlags = Convert.ToString(ScriptOps.Tx2BallBreakAsyncDataParam.StatusFlags);
                    ErrorCode = Convert.ToString(ScriptOps.Tx2BallBreakAsyncDataParam.ErrorCode);
                    ushort txReflCoeffMagValue2 = ScriptOps.Tx2BallBreakAsyncDataParam.TxReflCoeffMagValue;
                    if (txReflCoeffMagValue2 > 32767)
                    {
                        short num2 = (short)((int)txReflCoeffMagValue2 - 65536);
                        TxReflCoeffMagValue = Convert.ToString((double)num2 / 10.0);
                    }
                    else
                    {
                        TxReflCoeffMagValue = Convert.ToString((double)txReflCoeffMagValue2 / 10.0);
                    }
                    TimeStamp = Convert.ToString(ScriptOps.Tx2BallBreakAsyncDataParam.TimeStamp);
                }
                else if (GlobalRef.g_RadarDeviceId == 4U)
                {
                    StatusFlags = Convert.ToString(ScriptOps.Tx2BallBreakAsyncDataParam.StatusFlags);
                    ErrorCode = Convert.ToString(ScriptOps.Tx2BallBreakAsyncDataParam.ErrorCode);
                    ushort txReflCoeffMagValue3 = ScriptOps.Tx2BallBreakAsyncDataParam.TxReflCoeffMagValue;
                    if (txReflCoeffMagValue3 > 32767)
                    {
                        short num2 = (short)((int)txReflCoeffMagValue3 - 65536);
                        TxReflCoeffMagValue = Convert.ToString((double)num2 / 10.0);
                    }
                    else
                    {
                        TxReflCoeffMagValue = Convert.ToString((double)txReflCoeffMagValue3 / 10.0);
                    }
                    TimeStamp = Convert.ToString(ScriptOps.Tx2BallBreakAsyncDataParam.TimeStamp);
                }
                else if (GlobalRef.g_RadarDeviceId == 8U)
                {
                    StatusFlags = Convert.ToString(ScriptOps.Tx2BallBreakAsyncDataParam.StatusFlags);
                    ErrorCode = Convert.ToString(ScriptOps.Tx2BallBreakAsyncDataParam.ErrorCode);
                    ushort txReflCoeffMagValue4 = ScriptOps.Tx2BallBreakAsyncDataParam.TxReflCoeffMagValue;
                    if (txReflCoeffMagValue4 > 32767)
                    {
                        short num2 = (short)((int)txReflCoeffMagValue4 - 65536);
                        TxReflCoeffMagValue = Convert.ToString((double)num2 / 10.0);
                    }
                    else
                    {
                        TxReflCoeffMagValue = Convert.ToString((double)txReflCoeffMagValue4 / 10.0);
                    }
                    TimeStamp = Convert.ToString(ScriptOps.Tx2BallBreakAsyncDataParam.TimeStamp);
                }
            }
            if ((num == 0 && ((GlobalRef.g_CasCadeDeviceSpiConnect & 1U) == 1U || (GlobalRef.g_CasCadeDeviceSpiConnect & 2U) == 2U || (GlobalRef.g_CasCadeDeviceSpiConnect & 4U) == 4U || (GlobalRef.g_CasCadeDeviceSpiConnect & 8U) == 8U)) || GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
            {
                string full_command4 = string.Format("Status: Passed", new object[0]);
                m_GuiManager.RecordLog(6, full_command4);
            }
            else
            {
                string msg = string.Format("Status: Failed, Error Type: {0}", new object[]
                {
                    GetErrorType(num)
                });
                GlobalRef.LuaWrapper.PrintError(msg);
            }
            if (GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
            {
                if (iRs232ConnectDisconnect_impl() == 0 && !GlobalRef.g_NtvRS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
                {
                    m_GuiManager.DllOps.iConnect(1U, 0U);
                    string full_command5 = string.Format("Debug Port Reconnected!", new object[0]);
                    m_GuiManager.RecordLog(9, full_command5);
                    ScriptOps.KeepTrying(2000, new Func<bool>(spare_read));
                }
            }
            else if (GlobalRef.g_CasCadeDeviceSpiConnect == 0U)
            {
                string full_command6 = string.Format("Error Occurred in Port open close", new object[0]);
                m_GuiManager.RecordLog(9, full_command6);
            }
            return num;
        }

        public int UpdateNSetTx3BallBreakMonitoringConfData(ushort RadarDeviceId, char ReportingMode, double TXReflectionCoeffMagnitudeThreshold)
        {
            int result = -1;
            GlobalRef.g_RadarDeviceId = (uint)RadarDeviceId;
            ScriptOps.m_MainForm.AnalogMonConfig.UpdateTX3BallBreakMonConfigData();
            m_MonTx3BallBreakConfigParameters.ReportingMode = ReportingMode;
            m_MonTx3BallBreakConfigParameters.TXReflectionCoeffMagnitudeThreshold = TXReflectionCoeffMagnitudeThreshold;
            ScriptOps.m_MainForm.AnalogMonConfig.UpdateTX3BallBreakMonConfigDataFrmCmdSrc();
            return result;
        }

        public int UpdateNTx3BallBreakMonitoringConfigurationData_cmd(out string StatusFlags, out string ErrorCode, out string TxReflCoeffMagValue, out string TimeStamp)
        {
            StatusFlags = string.Empty;
            ErrorCode = string.Empty;
            TxReflCoeffMagValue = string.Empty;
            TimeStamp = string.Empty;
            ScriptOps.m_MainForm.AnalogMonConfig.UpdateTX3BallBreakMonConfigData();
            return iSetTx3BallBreakMonConfig_ImplForLuaCommand(out StatusFlags, out ErrorCode, out TxReflCoeffMagValue, out TimeStamp);
        }

        private int iSetTx3BallBreakMonConfig_ImplForLuaCommand(out string StatusFlags, out string ErrorCode, out string TxReflCoeffMagValue, out string TimeStamp)
        {
            StatusFlags = string.Empty;
            ErrorCode = string.Empty;
            TxReflCoeffMagValue = string.Empty;
            TimeStamp = string.Empty;
            ScriptOps.TX1BallBreakMonitoringConfigurationParam.ReportingMode = 0;
            ScriptOps.TX1BallBreakMonitoringConfigurationParam.TxReflCeoffMagThreshold = 0;
            ScriptOps.TX1BallBreakMonitoringConfigurationParam.Reserved = 0;
            ScriptOps.TX1BallBreakMonitoringConfigurationParam.Reserved2 = 0U;
            ScriptOps.TX1BallBreakMonitoringConfigurationParam.Reserved3 = 0U;
            ScriptOps.TX2BallBreakMonitoringConfigurationParam.ReportingMode = 0;
            ScriptOps.TX2BallBreakMonitoringConfigurationParam.TxReflCeoffMagThreshold = 0;
            ScriptOps.TX2BallBreakMonitoringConfigurationParam.Reserved = 0;
            ScriptOps.TX2BallBreakMonitoringConfigurationParam.Reserved2 = 0U;
            ScriptOps.TX2BallBreakMonitoringConfigurationParam.Reserved3 = 0U;
            ScriptOps.TX3BallBreakMonitoringConfigurationParam.ReportingMode = 0;
            ScriptOps.TX3BallBreakMonitoringConfigurationParam.TxReflCeoffMagThreshold = 0;
            ScriptOps.TX3BallBreakMonitoringConfigurationParam.Reserved = 0;
            ScriptOps.TX3BallBreakMonitoringConfigurationParam.Reserved2 = 0U;
            ScriptOps.TX3BallBreakMonitoringConfigurationParam.Reserved3 = 0U;
            ScriptOps.TX3BallBreakMonitoringConfigurationParam.ReportingMode = (byte)m_MonTx3BallBreakConfigParameters.ReportingMode;
            ScriptOps.TX3BallBreakMonitoringConfigurationParam.TxReflCeoffMagThreshold = (short)(m_MonTx3BallBreakConfigParameters.TXReflectionCoeffMagnitudeThreshold * 10.0);
            ScriptOps.TX3BallBreakMonitoringConfigurationParam.Reserved = 0;
            ScriptOps.TX3BallBreakMonitoringConfigurationParam.Reserved2 = 0U;
            ScriptOps.TX3BallBreakMonitoringConfigurationParam.Reserved3 = 0U;
            GCHandle.Alloc(ScriptOps.TX1BallBreakMonitoringConfigurationParam, GCHandleType.Pinned).AddrOfPinnedObject();
            GCHandle.Alloc(ScriptOps.TX2BallBreakMonitoringConfigurationParam, GCHandleType.Pinned).AddrOfPinnedObject();
            IntPtr pTX3BallBreakMonitoringConfigurationData = GCHandle.Alloc(ScriptOps.TX3BallBreakMonitoringConfigurationParam, GCHandleType.Pinned).AddrOfPinnedObject();
            ScriptOps.Tx1Tx2Tx3BallBreakMonitoringConfigurationParam.pTX1BallBreakMonitoringConfigurationData = IntPtr.Zero;
            ScriptOps.Tx1Tx2Tx3BallBreakMonitoringConfigurationParam.pTX2BallBreakMonitoringConfigurationData = IntPtr.Zero;
            ScriptOps.Tx1Tx2Tx3BallBreakMonitoringConfigurationParam.pTX3BallBreakMonitoringConfigurationData = pTX3BallBreakMonitoringConfigurationData;
            IntPtr data = GCHandle.Alloc(ScriptOps.Tx1Tx2Tx3BallBreakMonitoringConfigurationParam, GCHandleType.Pinned).AddrOfPinnedObject();
            int num;
            if (GlobalRef.g_NtvRS232Connect[(int)GlobalRef.g_RadarDeviceIndex] && GlobalRef.g_CasCadeDeviceSpiConnect == 0U)
            {
                num = m_TsWrapper.Calling_WriteAddr_Single(4294959848U, 1U);
                if (m_GuiManager.DllOps.itempDisconnect(false) == 0)
                {
                    string full_command = string.Format("Debug Port Disconnected", new object[0]);
                    m_GuiManager.RecordLog(0, full_command);
                    if (!GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
                    {
                        iRs232ConnectDisconnect_impl();
                    }
                }
            }
            if (m_RadarDeviceModeConfigParams.NumberOfRadarDevicesDetected <= 1)
            {
                string full_command2 = string.Format("ar1.SetRfTx2BallbreakMonConfig({0}, {1})", new object[]
                {
                    m_MonTx3BallBreakConfigParameters.ReportingMode,
                    (decimal)Math.Round(m_MonTx3BallBreakConfigParameters.TXReflectionCoeffMagnitudeThreshold, 1)
                });
                m_GuiManager.RecordLog(6, full_command2);
            }
            else
            {
                string full_command3 = string.Format("ar1.SetRfTx2BallbreakMonConfig_mult({0}, {1}, {2})", new object[]
                {
                    GlobalRef.g_RadarDeviceId,
                    m_MonTx3BallBreakConfigParameters.ReportingMode,
                    (decimal)Math.Round(m_MonTx3BallBreakConfigParameters.TXReflectionCoeffMagnitudeThreshold, 1)
                });
                m_GuiManager.RecordLog(6, full_command3);
            }
            GlobalRef.g_Tx3BallBreakMon = 1U;
            num = Imports.RadarLinkImpl_RfTxBallbreakMonConfig((byte)GlobalRef.g_RadarDeviceId, data);
            while (GlobalRef.g_Tx3BallBreakMon == 0U)
            {
                Thread.Sleep(100);
            }
            if (num == 0)
            {
                if (GlobalRef.g_RadarDeviceId == 1U)
                {
                    StatusFlags = Convert.ToString(ScriptOps.Tx3BallBreakAsyncDataParam.StatusFlags);
                    ErrorCode = Convert.ToString(ScriptOps.Tx3BallBreakAsyncDataParam.ErrorCode);
                    ushort txReflCoeffMagValue = ScriptOps.Tx3BallBreakAsyncDataParam.TxReflCoeffMagValue;
                    if (txReflCoeffMagValue > 32767)
                    {
                        short num2 = (short)((int)txReflCoeffMagValue - 65536);
                        TxReflCoeffMagValue = Convert.ToString((double)num2 / 10.0);
                    }
                    else
                    {
                        TxReflCoeffMagValue = Convert.ToString((double)txReflCoeffMagValue / 10.0);
                    }
                    TimeStamp = Convert.ToString(ScriptOps.Tx3BallBreakAsyncDataParam.TimeStamp);
                }
                else if (GlobalRef.g_RadarDeviceId == 2U)
                {
                    StatusFlags = Convert.ToString(ScriptOps.Tx3BallBreakAsyncDataParam.StatusFlags);
                    ErrorCode = Convert.ToString(ScriptOps.Tx3BallBreakAsyncDataParam.ErrorCode);
                    ushort txReflCoeffMagValue2 = ScriptOps.Tx3BallBreakAsyncDataParam.TxReflCoeffMagValue;
                    if (txReflCoeffMagValue2 > 32767)
                    {
                        short num2 = (short)((int)txReflCoeffMagValue2 - 65536);
                        TxReflCoeffMagValue = Convert.ToString((double)num2 / 10.0);
                    }
                    else
                    {
                        TxReflCoeffMagValue = Convert.ToString((double)txReflCoeffMagValue2 / 10.0);
                    }
                    TimeStamp = Convert.ToString(ScriptOps.Tx3BallBreakAsyncDataParam.TimeStamp);
                }
                else if (GlobalRef.g_RadarDeviceId == 4U)
                {
                    StatusFlags = Convert.ToString(ScriptOps.Tx3BallBreakAsyncDataParam.StatusFlags);
                    ErrorCode = Convert.ToString(ScriptOps.Tx3BallBreakAsyncDataParam.ErrorCode);
                    ushort txReflCoeffMagValue3 = ScriptOps.Tx3BallBreakAsyncDataParam.TxReflCoeffMagValue;
                    if (txReflCoeffMagValue3 > 32767)
                    {
                        short num2 = (short)((int)txReflCoeffMagValue3 - 65536);
                        TxReflCoeffMagValue = Convert.ToString((double)num2 / 10.0);
                    }
                    else
                    {
                        TxReflCoeffMagValue = Convert.ToString((double)txReflCoeffMagValue3 / 10.0);
                    }
                    TimeStamp = Convert.ToString(ScriptOps.Tx3BallBreakAsyncDataParam.TimeStamp);
                }
                else if (GlobalRef.g_RadarDeviceId == 8U)
                {
                    StatusFlags = Convert.ToString(ScriptOps.Tx3BallBreakAsyncDataParam.StatusFlags);
                    ErrorCode = Convert.ToString(ScriptOps.Tx3BallBreakAsyncDataParam.ErrorCode);
                    ushort txReflCoeffMagValue4 = ScriptOps.Tx3BallBreakAsyncDataParam.TxReflCoeffMagValue;
                    if (txReflCoeffMagValue4 > 32767)
                    {
                        short num2 = (short)((int)txReflCoeffMagValue4 - 65536);
                        TxReflCoeffMagValue = Convert.ToString((double)num2 / 10.0);
                    }
                    else
                    {
                        TxReflCoeffMagValue = Convert.ToString((double)txReflCoeffMagValue4 / 10.0);
                    }
                    TimeStamp = Convert.ToString(ScriptOps.Tx3BallBreakAsyncDataParam.TimeStamp);
                }
            }
            if ((num == 0 && ((GlobalRef.g_CasCadeDeviceSpiConnect & 1U) == 1U || (GlobalRef.g_CasCadeDeviceSpiConnect & 2U) == 2U || (GlobalRef.g_CasCadeDeviceSpiConnect & 4U) == 4U || (GlobalRef.g_CasCadeDeviceSpiConnect & 8U) == 8U)) || GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
            {
                string full_command4 = string.Format("Status: Passed", new object[0]);
                m_GuiManager.RecordLog(6, full_command4);
            }
            else
            {
                string msg = string.Format("Status: Failed, Error Type: {0}", new object[]
                {
                    GetErrorType(num)
                });
                GlobalRef.LuaWrapper.PrintError(msg);
            }
            if (GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
            {
                if (iRs232ConnectDisconnect_impl() == 0 && !GlobalRef.g_NtvRS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
                {
                    m_GuiManager.DllOps.iConnect(1U, 0U);
                    string full_command5 = string.Format("Debug Port Reconnected!", new object[0]);
                    m_GuiManager.RecordLog(9, full_command5);
                    ScriptOps.KeepTrying(2000, new Func<bool>(spare_read));
                }
            }
            else if (GlobalRef.g_CasCadeDeviceSpiConnect == 0U)
            {
                string full_command6 = string.Format("Error Occurred in Port open close", new object[0]);
                m_GuiManager.RecordLog(9, full_command6);
            }
            return num;
        }

        public int UpdateNSetRxGainandPhaseMonitoringConfData(ushort RadarDeviceId, char ProfileIndex, char RF1FreqBitMask, char RF2FreqBitMask, char RF3FreqBitMask, char ReportingMode, char TxSelect, double RxGainAbsoluteErrorThreshold, double RxGainMismatchThreshold, double RxGainFlatnessErrorThreshold, ushort RxPhaseMismatchThreshold, double p11, double p12, double p13, double p14, double p15, double p16, double p17, double p18, double p19, double p20, double p21, double p22, double p23, double p24, double p25, double p26, double p27, double p28, double p29, double p30, double p31, double p32, double p33, double p34)
        {
            int result = -1;
            GlobalRef.g_RadarDeviceId = (uint)RadarDeviceId;
            ScriptOps.m_MainForm.AnalogMon2Config.UpdateRxGainPhaseMonConfigData();
            m_MonRXGainPhaseConfigParameters.ProfileIndex = ProfileIndex;
            m_MonRXGainPhaseConfigParameters.RF1FreqBitMask = RF1FreqBitMask;
            m_MonRXGainPhaseConfigParameters.RF2FreqBitMask = RF2FreqBitMask;
            m_MonRXGainPhaseConfigParameters.RF3FreqBitMask = RF3FreqBitMask;
            m_MonRXGainPhaseConfigParameters.ReportingMode = ReportingMode;
            m_MonRXGainPhaseConfigParameters.TxSelect = TxSelect;
            m_MonRXGainPhaseConfigParameters.RxGainAbsoluteErrorThreshold = RxGainAbsoluteErrorThreshold;
            m_MonRXGainPhaseConfigParameters.RxGainMismatchThreshold = RxGainMismatchThreshold;
            m_MonRXGainPhaseConfigParameters.RxGainFlatnessErrorThreshold = RxGainFlatnessErrorThreshold;
            m_MonRXGainPhaseConfigParameters.RxPhaseMismatchThreshold = RxPhaseMismatchThreshold;
            m_MonRXGainPhaseConfigParameters.f000301 = p11;
            m_MonRXGainPhaseConfigParameters.f000302 = p12;
            m_MonRXGainPhaseConfigParameters.f000303 = p13;
            m_MonRXGainPhaseConfigParameters.f000304 = p14;
            m_MonRXGainPhaseConfigParameters.f000305 = p15;
            m_MonRXGainPhaseConfigParameters.f000306 = p16;
            m_MonRXGainPhaseConfigParameters.f000307 = p17;
            m_MonRXGainPhaseConfigParameters.f000308 = p18;
            m_MonRXGainPhaseConfigParameters.f000309 = p19;
            m_MonRXGainPhaseConfigParameters.f00030a = p20;
            m_MonRXGainPhaseConfigParameters.f00030b = p21;
            m_MonRXGainPhaseConfigParameters.f00030c = p22;
            m_MonRXGainPhaseConfigParameters.f00030d = p23;
            m_MonRXGainPhaseConfigParameters.f00030e = p24;
            m_MonRXGainPhaseConfigParameters.f00030f = p25;
            m_MonRXGainPhaseConfigParameters.f000310 = p26;
            m_MonRXGainPhaseConfigParameters.f000311 = p27;
            m_MonRXGainPhaseConfigParameters.f000312 = p28;
            m_MonRXGainPhaseConfigParameters.f000313 = p29;
            m_MonRXGainPhaseConfigParameters.f000314 = p30;
            m_MonRXGainPhaseConfigParameters.f000315 = p31;
            m_MonRXGainPhaseConfigParameters.f000316 = p32;
            m_MonRXGainPhaseConfigParameters.f000317 = p33;
            m_MonRXGainPhaseConfigParameters.f000318 = p34;
            ScriptOps.m_MainForm.AnalogMon2Config.UpdateRxGainPhaseMonConfigDataFrmCmdSrc();
            return result;
        }

        public int UpdateNRxGainandPhaseMonitoringConfigurationData_cmd(out string StatusFlag, out string Errorcode, out string Profileindex, out string RF1Rx1gainvalue, out string RF1Rx2gainvalue, out string RF1Rx3gainvalue, out string RF1Rx4gainvalue, out string RF2Rx1gainvalue, out string RF2Rx2gainvalue, out string RF2Rx3gainvalue, out string RF2Rx4gainvalue, out string RF3Rx1gainvalue, out string RF3Rx2gainvalue, out string RF3Rx3gainvalue, out string RF3Rx4gainvalue, out string p15, out string p16, out string p17, out string p18, out string p19, out string p20, out string p21, out string p22, out string p23, out string p24, out string p25, out string p26, out string Timestamp)
        {
            StatusFlag = string.Empty;
            Errorcode = string.Empty;
            Profileindex = string.Empty;
            RF1Rx1gainvalue = string.Empty;
            RF1Rx2gainvalue = string.Empty;
            RF1Rx3gainvalue = string.Empty;
            RF1Rx4gainvalue = string.Empty;
            RF2Rx1gainvalue = string.Empty;
            RF2Rx2gainvalue = string.Empty;
            RF2Rx3gainvalue = string.Empty;
            RF2Rx4gainvalue = string.Empty;
            RF3Rx1gainvalue = string.Empty;
            RF3Rx2gainvalue = string.Empty;
            RF3Rx3gainvalue = string.Empty;
            RF3Rx4gainvalue = string.Empty;
            p15 = string.Empty;
            p16 = string.Empty;
            p17 = string.Empty;
            p18 = string.Empty;
            p19 = string.Empty;
            p20 = string.Empty;
            p21 = string.Empty;
            p22 = string.Empty;
            p23 = string.Empty;
            p24 = string.Empty;
            p25 = string.Empty;
            p26 = string.Empty;
            Timestamp = string.Empty;
            ScriptOps.m_MainForm.AnalogMon2Config.UpdateRxGainPhaseMonConfigData();
            return iSetRxGainandPhaseMonConfig_ImplForLuaCommand(out StatusFlag, out Errorcode, out Profileindex, out RF1Rx1gainvalue, out RF1Rx2gainvalue, out RF1Rx3gainvalue, out RF1Rx4gainvalue, out RF2Rx1gainvalue, out RF2Rx2gainvalue, out RF2Rx3gainvalue, out RF2Rx4gainvalue, out RF3Rx1gainvalue, out RF3Rx2gainvalue, out RF3Rx3gainvalue, out RF3Rx4gainvalue, out p15, out p16, out p17, out p18, out p19, out p20, out p21, out p22, out p23, out p24, out p25, out p26, out Timestamp);
        }

        private int iSetRxGainandPhaseMonConfig_ImplForLuaCommand(out string StatusFlag, out string Errorcode, out string Profileindex, out string RF1Rx1gainvalue, out string RF1Rx2gainvalue, out string RF1Rx3gainvalue, out string RF1Rx4gainvalue, out string RF2Rx1gainvalue, out string RF2Rx2gainvalue, out string RF2Rx3gainvalue, out string RF2Rx4gainvalue, out string RF3Rx1gainvalue, out string RF3Rx2gainvalue, out string RF3Rx3gainvalue, out string RF3Rx4gainvalue, out string p15, out string p16, out string p17, out string p18, out string p19, out string p20, out string p21, out string p22, out string p23, out string p24, out string p25, out string p26, out string Timestamp)
        {
            StatusFlag = string.Empty;
            Errorcode = string.Empty;
            Profileindex = string.Empty;
            RF1Rx1gainvalue = string.Empty;
            RF1Rx2gainvalue = string.Empty;
            RF1Rx3gainvalue = string.Empty;
            RF1Rx4gainvalue = string.Empty;
            RF2Rx1gainvalue = string.Empty;
            RF2Rx2gainvalue = string.Empty;
            RF2Rx3gainvalue = string.Empty;
            RF2Rx4gainvalue = string.Empty;
            RF3Rx1gainvalue = string.Empty;
            RF3Rx2gainvalue = string.Empty;
            RF3Rx3gainvalue = string.Empty;
            RF3Rx4gainvalue = string.Empty;
            p15 = string.Empty;
            p16 = string.Empty;
            p17 = string.Empty;
            p18 = string.Empty;
            p19 = string.Empty;
            p20 = string.Empty;
            p21 = string.Empty;
            p22 = string.Empty;
            p23 = string.Empty;
            p24 = string.Empty;
            p25 = string.Empty;
            p26 = string.Empty;
            Timestamp = string.Empty;
            RxGainPhaseMonitoringConfigurationParam.ProfileIndex = (byte)m_MonRXGainPhaseConfigParameters.ProfileIndex;
            RxGainPhaseMonitoringConfigurationParam.RFFreqBitMask = (byte)(m_MonRXGainPhaseConfigParameters.RF1FreqBitMask | m_MonRXGainPhaseConfigParameters.RF2FreqBitMask << 1 | m_MonRXGainPhaseConfigParameters.RF3FreqBitMask << 2);
            RxGainPhaseMonitoringConfigurationParam.ReportingMode = (byte)m_MonRXGainPhaseConfigParameters.ReportingMode;
            RxGainPhaseMonitoringConfigurationParam.TxSelect = (byte)m_MonRXGainPhaseConfigParameters.TxSelect;
            RxGainPhaseMonitoringConfigurationParam.RxGainAbsoluteErrorThreshold = (ushort)(m_MonRXGainPhaseConfigParameters.RxGainAbsoluteErrorThreshold * 10.0);
            RxGainPhaseMonitoringConfigurationParam.RxGainMismatchThreshold = (ushort)(m_MonRXGainPhaseConfigParameters.RxGainMismatchThreshold * 10.0);
            RxGainPhaseMonitoringConfigurationParam.RxGainFlatnessErrorThreshold = (ushort)(m_MonRXGainPhaseConfigParameters.RxGainFlatnessErrorThreshold * 10.0);
            RxGainPhaseMonitoringConfigurationParam.RxPhaseMismatchThreshold = (ushort)((double)((int)m_MonRXGainPhaseConfigParameters.RxPhaseMismatchThreshold * 65536) / 360.0);
            RxGainPhaseMonitoringConfigurationParam.f000010 = (((int)((short)(m_MonRXGainPhaseConfigParameters.f000301 * 10.0)) & 65535) | (int)((short)(m_MonRXGainPhaseConfigParameters.f000302 * 10.0)) << 16);
            RxGainPhaseMonitoringConfigurationParam.f000011 = (((int)((short)(m_MonRXGainPhaseConfigParameters.f000303 * 10.0)) & 65535) | (int)((short)(m_MonRXGainPhaseConfigParameters.f000304 * 10.0)) << 16);
            RxGainPhaseMonitoringConfigurationParam.f000012 = (((int)((short)(m_MonRXGainPhaseConfigParameters.f000305 * 10.0)) & 65535) | (int)((short)(m_MonRXGainPhaseConfigParameters.f000306 * 10.0)) << 16);
            RxGainPhaseMonitoringConfigurationParam.f000013 = (((int)((short)(m_MonRXGainPhaseConfigParameters.f000307 * 10.0)) & 65535) | (int)((short)(m_MonRXGainPhaseConfigParameters.f000308 * 10.0)) << 16);
            RxGainPhaseMonitoringConfigurationParam.f000014 = (((int)((short)(m_MonRXGainPhaseConfigParameters.f000309 * 10.0)) & 65535) | (int)((short)(m_MonRXGainPhaseConfigParameters.f00030a * 10.0)) << 16);
            RxGainPhaseMonitoringConfigurationParam.f000015 = (((int)((short)(m_MonRXGainPhaseConfigParameters.f00030b * 10.0)) & 65535) | (int)((short)(m_MonRXGainPhaseConfigParameters.f00030c * 10.0)) << 16);
            RxGainPhaseMonitoringConfigurationParam.f000016 = (uint)((int)((ushort)(m_MonRXGainPhaseConfigParameters.f00030d * 65536.0 / 360.0)) | (int)((ushort)(m_MonRXGainPhaseConfigParameters.f00030e * 65536.0 / 360.0)) << 16);
            RxGainPhaseMonitoringConfigurationParam.f000017 = (uint)((int)((ushort)(m_MonRXGainPhaseConfigParameters.f00030f * 65536.0 / 360.0)) | (int)((ushort)(m_MonRXGainPhaseConfigParameters.f000310 * 65536.0 / 360.0)) << 16);
            RxGainPhaseMonitoringConfigurationParam.f000018 = (uint)((int)((ushort)(m_MonRXGainPhaseConfigParameters.f000311 * 65536.0 / 360.0)) | (int)((ushort)(m_MonRXGainPhaseConfigParameters.f000312 * 65536.0 / 360.0)) << 16);
            RxGainPhaseMonitoringConfigurationParam.f000019 = (uint)((int)((ushort)(m_MonRXGainPhaseConfigParameters.f000313 * 65536.0 / 360.0)) | (int)((ushort)(m_MonRXGainPhaseConfigParameters.f000314 * 65536.0 / 360.0)) << 16);
            RxGainPhaseMonitoringConfigurationParam.f00001a = (uint)((int)((ushort)(m_MonRXGainPhaseConfigParameters.f000315 * 65536.0 / 360.0)) | (int)((ushort)(m_MonRXGainPhaseConfigParameters.f000316 * 65536.0 / 360.0)) << 16);
            RxGainPhaseMonitoringConfigurationParam.f00001b = (uint)((int)((ushort)(m_MonRXGainPhaseConfigParameters.f000317 * 65536.0 / 360.0)) | (int)((ushort)(m_MonRXGainPhaseConfigParameters.f000318 * 65536.0 / 360.0)) << 16);
            RxGainPhaseMonitoringConfigurationParam.Reserved = 0U;
            RxGainPhaseMonitoringConfigurationParam.Reserved2 = 0U;
            IntPtr data = GCHandle.Alloc(RxGainPhaseMonitoringConfigurationParam, GCHandleType.Pinned).AddrOfPinnedObject();
            int num;
            if (GlobalRef.g_NtvRS232Connect[(int)GlobalRef.g_RadarDeviceIndex] && GlobalRef.g_CasCadeDeviceSpiConnect == 0U)
            {
                num = m_TsWrapper.Calling_WriteAddr_Single(4294959848U, 1U);
                if (m_GuiManager.DllOps.itempDisconnect(false) == 0)
                {
                    string full_command = string.Format("Debug Port Disconnected", new object[0]);
                    m_GuiManager.RecordLog(0, full_command);
                    if (!GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
                    {
                        iRs232ConnectDisconnect_impl();
                    }
                }
            }
            if (m_RadarDeviceModeConfigParams.NumberOfRadarDevicesDetected <= 1)
            {
                string full_command2 = string.Format("ar1.SetRfRxGainPhMonConfig({0}, {1}, {2}, {3}, {4} , {5}, {6}, {7}, {8}, {9}, {10}, {11}, {12}, {13}, {14}, {15}, {16}, {17}, {18}, {19}, {20}, {21}, {22}, {23}, {24}, {25}, {26}, {27}, {28}, {29}, {30}, {31}, {32}, {33})", new object[]
                {
                    m_MonRXGainPhaseConfigParameters.ProfileIndex,
                    m_MonRXGainPhaseConfigParameters.RF1FreqBitMask,
                    m_MonRXGainPhaseConfigParameters.RF2FreqBitMask,
                    m_MonRXGainPhaseConfigParameters.RF3FreqBitMask,
                    m_MonRXGainPhaseConfigParameters.ReportingMode,
                    m_MonRXGainPhaseConfigParameters.TxSelect,
                    (decimal)Math.Round(m_MonRXGainPhaseConfigParameters.RxGainAbsoluteErrorThreshold, 1),
                    (decimal)Math.Round(m_MonRXGainPhaseConfigParameters.RxGainMismatchThreshold, 1),
                    (decimal)Math.Round(m_MonRXGainPhaseConfigParameters.RxGainFlatnessErrorThreshold, 1),
                    m_MonRXGainPhaseConfigParameters.RxPhaseMismatchThreshold,
                    (decimal)Math.Round(m_MonRXGainPhaseConfigParameters.f000301, 1),
                    (decimal)Math.Round(m_MonRXGainPhaseConfigParameters.f000302, 1),
                    (decimal)Math.Round(m_MonRXGainPhaseConfigParameters.f000303, 1),
                    (decimal)Math.Round(m_MonRXGainPhaseConfigParameters.f000304, 1),
                    (decimal)Math.Round(m_MonRXGainPhaseConfigParameters.f000305, 1),
                    (decimal)Math.Round(m_MonRXGainPhaseConfigParameters.f000306, 1),
                    (decimal)Math.Round(m_MonRXGainPhaseConfigParameters.f000307, 1),
                    (decimal)Math.Round(m_MonRXGainPhaseConfigParameters.f000308, 1),
                    (decimal)Math.Round(m_MonRXGainPhaseConfigParameters.f000309, 1),
                    (decimal)Math.Round(m_MonRXGainPhaseConfigParameters.f00030a, 1),
                    (decimal)Math.Round(m_MonRXGainPhaseConfigParameters.f00030b, 1),
                    (decimal)Math.Round(m_MonRXGainPhaseConfigParameters.f00030c, 1),
                    (decimal)Math.Round(m_MonRXGainPhaseConfigParameters.f00030d, 2),
                    (decimal)Math.Round(m_MonRXGainPhaseConfigParameters.f00030e, 2),
                    (decimal)Math.Round(m_MonRXGainPhaseConfigParameters.f00030f, 2),
                    (decimal)Math.Round(m_MonRXGainPhaseConfigParameters.f000310, 2),
                    (decimal)Math.Round(m_MonRXGainPhaseConfigParameters.f000311, 2),
                    (decimal)Math.Round(m_MonRXGainPhaseConfigParameters.f000312, 2),
                    (decimal)Math.Round(m_MonRXGainPhaseConfigParameters.f000313, 2),
                    (decimal)Math.Round(m_MonRXGainPhaseConfigParameters.f000314, 2),
                    (decimal)Math.Round(m_MonRXGainPhaseConfigParameters.f000315, 2),
                    (decimal)Math.Round(m_MonRXGainPhaseConfigParameters.f000317, 2),
                    (decimal)Math.Round(m_MonRXGainPhaseConfigParameters.f000317, 2),
                    (decimal)Math.Round(m_MonRXGainPhaseConfigParameters.f000318, 2)
                });
                m_GuiManager.RecordLog(6, full_command2);
            }
            else
            {
                string full_command3 = string.Format("ar1.SetRfRxGainPhMonConfig_mult({0}, {1}, {2}, {3}, {4} , {5}, {6}, {7}, {8}, {9}, {10}, {11}, {12}, {13}, {14}, {15}, {16}, {17}, {18}, {19}, {20}, {21}, {22}, {23}, {24}, {25}, {26}, {27}, {28}, {29}, {30}, {31}, {32}, {33}, {34})", new object[]
                {
                    GlobalRef.g_RadarDeviceId,
                    m_MonRXGainPhaseConfigParameters.ProfileIndex,
                    m_MonRXGainPhaseConfigParameters.RF1FreqBitMask,
                    m_MonRXGainPhaseConfigParameters.RF2FreqBitMask,
                    m_MonRXGainPhaseConfigParameters.RF3FreqBitMask,
                    m_MonRXGainPhaseConfigParameters.ReportingMode,
                    m_MonRXGainPhaseConfigParameters.TxSelect,
                    (decimal)Math.Round(m_MonRXGainPhaseConfigParameters.RxGainAbsoluteErrorThreshold, 1),
                    (decimal)Math.Round(m_MonRXGainPhaseConfigParameters.RxGainMismatchThreshold, 1),
                    (decimal)Math.Round(m_MonRXGainPhaseConfigParameters.RxGainFlatnessErrorThreshold, 1),
                    m_MonRXGainPhaseConfigParameters.RxPhaseMismatchThreshold,
                    (decimal)Math.Round(m_MonRXGainPhaseConfigParameters.f000301, 1),
                    (decimal)Math.Round(m_MonRXGainPhaseConfigParameters.f000302, 1),
                    (decimal)Math.Round(m_MonRXGainPhaseConfigParameters.f000303, 1),
                    (decimal)Math.Round(m_MonRXGainPhaseConfigParameters.f000304, 1),
                    (decimal)Math.Round(m_MonRXGainPhaseConfigParameters.f000305, 1),
                    (decimal)Math.Round(m_MonRXGainPhaseConfigParameters.f000306, 1),
                    (decimal)Math.Round(m_MonRXGainPhaseConfigParameters.f000307, 1),
                    (decimal)Math.Round(m_MonRXGainPhaseConfigParameters.f000308, 1),
                    (decimal)Math.Round(m_MonRXGainPhaseConfigParameters.f000309, 1),
                    (decimal)Math.Round(m_MonRXGainPhaseConfigParameters.f00030a, 1),
                    (decimal)Math.Round(m_MonRXGainPhaseConfigParameters.f00030b, 1),
                    (decimal)Math.Round(m_MonRXGainPhaseConfigParameters.f00030c, 1),
                    (decimal)Math.Round(m_MonRXGainPhaseConfigParameters.f00030d, 2),
                    (decimal)Math.Round(m_MonRXGainPhaseConfigParameters.f00030e, 2),
                    (decimal)Math.Round(m_MonRXGainPhaseConfigParameters.f00030f, 2),
                    (decimal)Math.Round(m_MonRXGainPhaseConfigParameters.f000310, 2),
                    (decimal)Math.Round(m_MonRXGainPhaseConfigParameters.f000311, 2),
                    (decimal)Math.Round(m_MonRXGainPhaseConfigParameters.f000312, 2),
                    (decimal)Math.Round(m_MonRXGainPhaseConfigParameters.f000313, 2),
                    (decimal)Math.Round(m_MonRXGainPhaseConfigParameters.f000314, 2),
                    (decimal)Math.Round(m_MonRXGainPhaseConfigParameters.f000315, 2),
                    (decimal)Math.Round(m_MonRXGainPhaseConfigParameters.f000317, 2),
                    (decimal)Math.Round(m_MonRXGainPhaseConfigParameters.f000317, 2),
                    (decimal)Math.Round(m_MonRXGainPhaseConfigParameters.f000318, 2)
                });
                m_GuiManager.RecordLog(6, full_command3);
            }
            GlobalRef.g_RxGainAndPhaseMon = 1U;
            num = Imports.RadarLinkImpl_RfRxGainPhMonConfig(GlobalRef.g_RadarDeviceId, data);
            while (GlobalRef.g_RxGainAndPhaseMon == 0U)
            {
                Thread.Sleep(100);
            }
            if (num == 0)
            {
                if (GlobalRef.g_RadarDeviceId == 1U)
                {
                    StatusFlag = Convert.ToString(ScriptOps.RxGainPhaseAsyncDataParam.StatusFlags);
                    Errorcode = Convert.ToString(ScriptOps.RxGainPhaseAsyncDataParam.ErrorCode);
                    Profileindex = Convert.ToString(ScriptOps.RxGainPhaseAsyncDataParam.ProfileIndex);
                    ushort num2 = (ushort)(ScriptOps.RxGainPhaseAsyncDataParam.RF1Rx1Rx2RxGainValue & 65535U);
                    if (num2 > 32767)
                    {
                        short num3 = (short)((int)num2 - 65536);
                        RF1Rx1gainvalue = Convert.ToString((double)num3 / 10.0);
                    }
                    else
                    {
                        RF1Rx1gainvalue = Convert.ToString((double)num2 / 10.0);
                    }
                    ushort num4 = (ushort)(ScriptOps.RxGainPhaseAsyncDataParam.RF1Rx1Rx2RxGainValue >> 16);
                    if (num4 > 32767)
                    {
                        short num3 = (short)((int)num4 - 65536);
                        RF1Rx2gainvalue = Convert.ToString((double)num3 / 10.0);
                    }
                    else
                    {
                        RF1Rx2gainvalue = Convert.ToString((double)num4 / 10.0);
                    }
                    ushort num5 = (ushort)(ScriptOps.RxGainPhaseAsyncDataParam.RF1Rx3Rx4RxGainValue & 65535U);
                    if (num5 > 32767)
                    {
                        short num3 = (short)((int)num5 - 65536);
                        RF1Rx3gainvalue = Convert.ToString((double)num3 / 10.0);
                    }
                    else
                    {
                        RF1Rx3gainvalue = Convert.ToString((double)num5 / 10.0);
                    }
                    ushort num6 = (ushort)(ScriptOps.RxGainPhaseAsyncDataParam.RF1Rx3Rx4RxGainValue >> 16);
                    if (num6 > 32767)
                    {
                        short num3 = (short)((int)num6 - 65536);
                        RF1Rx4gainvalue = Convert.ToString((double)num3 / 10.0);
                    }
                    else
                    {
                        RF1Rx4gainvalue = Convert.ToString((double)num6 / 10.0);
                    }
                    ushort num7 = (ushort)(ScriptOps.RxGainPhaseAsyncDataParam.RF2Rx1Rx2RxGainValue & 65535U);
                    if (num7 > 32767)
                    {
                        short num3 = (short)((int)num7 - 65536);
                        RF2Rx1gainvalue = Convert.ToString((double)num3 / 10.0);
                    }
                    else
                    {
                        RF2Rx1gainvalue = Convert.ToString((double)num7 / 10.0);
                    }
                    ushort num8 = (ushort)(ScriptOps.RxGainPhaseAsyncDataParam.RF2Rx1Rx2RxGainValue >> 16);
                    if (num8 > 32767)
                    {
                        short num3 = (short)((int)num8 - 65536);
                        RF2Rx2gainvalue = Convert.ToString((double)num3 / 10.0);
                    }
                    else
                    {
                        RF2Rx2gainvalue = Convert.ToString((double)num8 / 10.0);
                    }
                    ushort num9 = (ushort)(ScriptOps.RxGainPhaseAsyncDataParam.RF2Rx3Rx4RxGainValue & 65535U);
                    if (num9 > 32767)
                    {
                        short num3 = (short)((int)num9 - 65536);
                        RF2Rx3gainvalue = Convert.ToString((double)num3 / 10.0);
                    }
                    else
                    {
                        RF2Rx3gainvalue = Convert.ToString((double)num9 / 10.0);
                    }
                    ushort num10 = (ushort)(ScriptOps.RxGainPhaseAsyncDataParam.RF2Rx3Rx4RxGainValue >> 16);
                    if (num10 > 32767)
                    {
                        short num3 = (short)((int)num10 - 65536);
                        RF2Rx4gainvalue = Convert.ToString((double)num3 / 10.0);
                    }
                    else
                    {
                        RF2Rx4gainvalue = Convert.ToString((double)num10 / 10.0);
                    }
                    ushort num11 = (ushort)(ScriptOps.RxGainPhaseAsyncDataParam.RF3Rx1Rx2RxGainValue & 65535U);
                    if (num11 > 32767)
                    {
                        short num3 = (short)((int)num11 - 65536);
                        RF3Rx1gainvalue = Convert.ToString((double)num3 / 10.0);
                    }
                    else
                    {
                        RF3Rx1gainvalue = Convert.ToString((double)num11 / 10.0);
                    }
                    ushort num12 = (ushort)(ScriptOps.RxGainPhaseAsyncDataParam.RF3Rx1Rx2RxGainValue >> 16);
                    if (num12 > 32767)
                    {
                        short num3 = (short)((int)num12 - 65536);
                        RF3Rx2gainvalue = Convert.ToString((double)num3 / 10.0);
                    }
                    else
                    {
                        RF3Rx2gainvalue = Convert.ToString((double)num12 / 10.0);
                    }
                    ushort num13 = (ushort)(ScriptOps.RxGainPhaseAsyncDataParam.RF3Rx3Rx4RxGainValue & 65535U);
                    if (num13 > 32767)
                    {
                        short num3 = (short)((int)num13 - 65536);
                        RF3Rx3gainvalue = Convert.ToString((double)num3 / 10.0);
                    }
                    else
                    {
                        RF3Rx3gainvalue = Convert.ToString((double)num13 / 10.0);
                    }
                    ushort num14 = (ushort)(ScriptOps.RxGainPhaseAsyncDataParam.RF3Rx3Rx4RxGainValue >> 16);
                    if (num14 > 32767)
                    {
                        short num3 = (short)((int)num14 - 65536);
                        RF3Rx4gainvalue = Convert.ToString((double)num3 / 10.0);
                    }
                    else
                    {
                        RF3Rx4gainvalue = Convert.ToString((double)num14 / 10.0);
                    }
                    ushort num15 = (ushort)(ScriptOps.RxGainPhaseAsyncDataParam.RF1Rx1Rx2RxPhaseValue & 65535U);
                    if (num15 > 32767)
                    {
                        ushort num16 = (ushort)((int)num15 - 65536);
                        p15 = Convert.ToString(Math.Round((double)(num16 * 360) / 65536.0, 2));
                    }
                    else
                    {
                        p15 = Convert.ToString(Math.Round((double)(num15 * 360) / 65536.0, 2));
                    }
                    ushort num17 = (ushort)(ScriptOps.RxGainPhaseAsyncDataParam.RF1Rx1Rx2RxPhaseValue >> 16);
                    if (num17 > 32767)
                    {
                        ushort num16 = (ushort)((int)num17 - 65536);
                        p16 = Convert.ToString(Math.Round((double)(num16 * 360) / 65536.0, 2));
                    }
                    else
                    {
                        p16 = Convert.ToString(Math.Round((double)(num17 * 360) / 65536.0, 2));
                    }
                    ushort num18 = (ushort)(ScriptOps.RxGainPhaseAsyncDataParam.RF1Rx3Rx4RxPhaseValue & 65535U);
                    if (num18 > 32767)
                    {
                        ushort num16 = (ushort)((int)num18 - 65536);
                        p17 = Convert.ToString(Math.Round((double)(num16 * 360) / 65536.0, 2));
                    }
                    else
                    {
                        p17 = Convert.ToString(Math.Round((double)(num18 * 360) / 65536.0, 2));
                    }
                    ushort num19 = (ushort)(ScriptOps.RxGainPhaseAsyncDataParam.RF1Rx3Rx4RxPhaseValue >> 16);
                    if (num19 > 32767)
                    {
                        ushort num16 = (ushort)((int)num19 - 65536);
                        p18 = Convert.ToString(Math.Round((double)(num16 * 360) / 65536.0, 2));
                    }
                    else
                    {
                        p18 = Convert.ToString(Math.Round((double)(num19 * 360) / 65536.0, 2));
                    }
                    ushort num20 = (ushort)(ScriptOps.RxGainPhaseAsyncDataParam.RF2Rx1Rx2RxPhaseValue & 65535U);
                    if (num20 > 32767)
                    {
                        ushort num16 = (ushort)((int)num20 - 65536);
                        p19 = Convert.ToString(Math.Round((double)(num16 * 360) / 65536.0, 2));
                    }
                    else
                    {
                        p19 = Convert.ToString(Math.Round((double)(num20 * 360) / 65536.0, 2));
                    }
                    ushort num21 = (ushort)(ScriptOps.RxGainPhaseAsyncDataParam.RF2Rx1Rx2RxPhaseValue >> 16);
                    if (num21 > 32767)
                    {
                        ushort num16 = (ushort)((int)num21 - 65536);
                        p20 = Convert.ToString(Math.Round((double)(num16 * 360) / 65536.0, 2));
                    }
                    else
                    {
                        p20 = Convert.ToString(Math.Round((double)(num21 * 360) / 65536.0, 2));
                    }
                    ushort num22 = (ushort)(ScriptOps.RxGainPhaseAsyncDataParam.RF2Rx3Rx4RxPhaseValue & 65535U);
                    if (num22 > 32767)
                    {
                        ushort num16 = (ushort)((int)num22 - 65536);
                        p21 = Convert.ToString(Math.Round((double)(num16 * 360) / 65536.0, 2));
                    }
                    else
                    {
                        p21 = Convert.ToString(Math.Round((double)(num22 * 360) / 65536.0, 2));
                    }
                    ushort num23 = (ushort)(ScriptOps.RxGainPhaseAsyncDataParam.RF2Rx3Rx4RxPhaseValue >> 16);
                    if (num23 > 32767)
                    {
                        ushort num16 = (ushort)((int)num23 - 65536);
                        p22 = Convert.ToString(Math.Round((double)(num16 * 360) / 65536.0, 2));
                    }
                    else
                    {
                        p22 = Convert.ToString(Math.Round((double)(num23 * 360) / 65536.0, 2));
                    }
                    ushort num24 = (ushort)(ScriptOps.RxGainPhaseAsyncDataParam.RF3Rx1Rx2RxPhaseValue & 65535U);
                    if (num24 > 32767)
                    {
                        ushort num16 = (ushort)((int)num24 - 65536);
                        p23 = Convert.ToString(Math.Round((double)(num16 * 360) / 65536.0, 2));
                    }
                    else
                    {
                        p23 = Convert.ToString(Math.Round((double)(num24 * 360) / 65536.0, 2));
                    }
                    ushort num25 = (ushort)(ScriptOps.RxGainPhaseAsyncDataParam.RF3Rx1Rx2RxPhaseValue >> 16);
                    if (num25 > 32767)
                    {
                        ushort num16 = (ushort)((int)num25 - 65536);
                        p24 = Convert.ToString(Math.Round((double)(num16 * 360) / 65536.0, 2));
                    }
                    else
                    {
                        p24 = Convert.ToString(Math.Round((double)(num25 * 360) / 65536.0, 2));
                    }
                    ushort num26 = (ushort)(ScriptOps.RxGainPhaseAsyncDataParam.RF3Rx3Rx4RxPhaseValue & 65535U);
                    if (num26 > 32767)
                    {
                        ushort num16 = (ushort)((int)num26 - 65536);
                        p25 = Convert.ToString(Math.Round((double)(num16 * 360) / 65536.0, 2));
                    }
                    else
                    {
                        p25 = Convert.ToString(Math.Round((double)(num26 * 360) / 65536.0, 2));
                    }
                    ushort num27 = (ushort)(ScriptOps.RxGainPhaseAsyncDataParam.RF3Rx3Rx4RxPhaseValue >> 16);
                    if (num27 > 32767)
                    {
                        ushort num16 = (ushort)((int)num27 - 65536);
                        p26 = Convert.ToString(Math.Round((double)(num16 * 360) / 65536.0, 2));
                    }
                    else
                    {
                        p26 = Convert.ToString(Math.Round((double)(num27 * 360) / 65536.0, 2));
                    }
                    Timestamp = Convert.ToString(ScriptOps.RxGainPhaseAsyncDataParam.TimeStamp);
                }
                else if (GlobalRef.g_RadarDeviceId == 2U)
                {
                    StatusFlag = Convert.ToString(ScriptOps.RxGainPhaseAsyncDataParam.StatusFlags);
                    Errorcode = Convert.ToString(ScriptOps.RxGainPhaseAsyncDataParam.ErrorCode);
                    Profileindex = Convert.ToString(ScriptOps.RxGainPhaseAsyncDataParam.ProfileIndex);
                    ushort num28 = (ushort)(ScriptOps.RxGainPhaseAsyncDataParam.RF1Rx1Rx2RxGainValue & 65535U);
                    if (num28 > 32767)
                    {
                        short num3 = (short)((int)num28 - 65536);
                        RF1Rx1gainvalue = Convert.ToString((double)num3 / 10.0);
                    }
                    else
                    {
                        RF1Rx1gainvalue = Convert.ToString((double)num28 / 10.0);
                    }
                    ushort num29 = (ushort)(ScriptOps.RxGainPhaseAsyncDataParam.RF1Rx1Rx2RxGainValue >> 16);
                    if (num29 > 32767)
                    {
                        short num3 = (short)((int)num29 - 65536);
                        RF1Rx2gainvalue = Convert.ToString((double)num3 / 10.0);
                    }
                    else
                    {
                        RF1Rx2gainvalue = Convert.ToString((double)num29 / 10.0);
                    }
                    ushort num30 = (ushort)(ScriptOps.RxGainPhaseAsyncDataParam.RF1Rx3Rx4RxGainValue & 65535U);
                    if (num30 > 32767)
                    {
                        short num3 = (short)((int)num30 - 65536);
                        RF1Rx3gainvalue = Convert.ToString((double)num3 / 10.0);
                    }
                    else
                    {
                        RF1Rx3gainvalue = Convert.ToString((double)num30 / 10.0);
                    }
                    ushort num31 = (ushort)(ScriptOps.RxGainPhaseAsyncDataParam.RF1Rx3Rx4RxGainValue >> 16);
                    if (num31 > 32767)
                    {
                        short num3 = (short)((int)num31 - 65536);
                        RF1Rx4gainvalue = Convert.ToString((double)num3 / 10.0);
                    }
                    else
                    {
                        RF1Rx4gainvalue = Convert.ToString((double)num31 / 10.0);
                    }
                    ushort num32 = (ushort)(ScriptOps.RxGainPhaseAsyncDataParam.RF2Rx1Rx2RxGainValue & 65535U);
                    if (num32 > 32767)
                    {
                        short num3 = (short)((int)num32 - 65536);
                        RF2Rx1gainvalue = Convert.ToString((double)num3 / 10.0);
                    }
                    else
                    {
                        RF2Rx1gainvalue = Convert.ToString((double)num32 / 10.0);
                    }
                    ushort num33 = (ushort)(ScriptOps.RxGainPhaseAsyncDataParam.RF2Rx1Rx2RxGainValue >> 16);
                    if (num33 > 32767)
                    {
                        short num3 = (short)((int)num33 - 65536);
                        RF2Rx2gainvalue = Convert.ToString((double)num3 / 10.0);
                    }
                    else
                    {
                        RF2Rx2gainvalue = Convert.ToString((double)num33 / 10.0);
                    }
                    ushort num34 = (ushort)(ScriptOps.RxGainPhaseAsyncDataParam.RF2Rx3Rx4RxGainValue & 65535U);
                    if (num34 > 32767)
                    {
                        short num3 = (short)((int)num34 - 65536);
                        RF2Rx3gainvalue = Convert.ToString((double)num3 / 10.0);
                    }
                    else
                    {
                        RF2Rx3gainvalue = Convert.ToString((double)num34 / 10.0);
                    }
                    ushort num35 = (ushort)(ScriptOps.RxGainPhaseAsyncDataParam.RF2Rx3Rx4RxGainValue >> 16);
                    if (num35 > 32767)
                    {
                        short num3 = (short)((int)num35 - 65536);
                        RF2Rx4gainvalue = Convert.ToString((double)num3 / 10.0);
                    }
                    else
                    {
                        RF2Rx4gainvalue = Convert.ToString((double)num35 / 10.0);
                    }
                    ushort num36 = (ushort)(ScriptOps.RxGainPhaseAsyncDataParam.RF3Rx1Rx2RxGainValue & 65535U);
                    if (num36 > 32767)
                    {
                        short num3 = (short)((int)num36 - 65536);
                        RF3Rx1gainvalue = Convert.ToString((double)num3 / 10.0);
                    }
                    else
                    {
                        RF3Rx1gainvalue = Convert.ToString((double)num36 / 10.0);
                    }
                    ushort num37 = (ushort)(ScriptOps.RxGainPhaseAsyncDataParam.RF3Rx1Rx2RxGainValue >> 16);
                    if (num37 > 32767)
                    {
                        short num3 = (short)((int)num37 - 65536);
                        RF3Rx2gainvalue = Convert.ToString((double)num3 / 10.0);
                    }
                    else
                    {
                        RF3Rx2gainvalue = Convert.ToString((double)num37 / 10.0);
                    }
                    ushort num38 = (ushort)(ScriptOps.RxGainPhaseAsyncDataParam.RF3Rx3Rx4RxGainValue & 65535U);
                    if (num38 > 32767)
                    {
                        short num3 = (short)((int)num38 - 65536);
                        RF3Rx3gainvalue = Convert.ToString((double)num3 / 10.0);
                    }
                    else
                    {
                        RF3Rx3gainvalue = Convert.ToString((double)num38 / 10.0);
                    }
                    ushort num39 = (ushort)(ScriptOps.RxGainPhaseAsyncDataParam.RF3Rx3Rx4RxGainValue >> 16);
                    if (num39 > 32767)
                    {
                        short num3 = (short)((int)num39 - 65536);
                        RF3Rx4gainvalue = Convert.ToString((double)num3 / 10.0);
                    }
                    else
                    {
                        RF3Rx4gainvalue = Convert.ToString((double)num39 / 10.0);
                    }
                    ushort num40 = (ushort)(ScriptOps.RxGainPhaseAsyncDataParam.RF1Rx1Rx2RxPhaseValue & 65535U);
                    if (num40 > 32767)
                    {
                        ushort num16 = (ushort)((int)num40 - 65536);
                        p15 = Convert.ToString(Math.Round((double)(num16 * 360) / 65536.0, 2));
                    }
                    else
                    {
                        p15 = Convert.ToString(Math.Round((double)(num40 * 360) / 65536.0, 2));
                    }
                    ushort num41 = (ushort)(ScriptOps.RxGainPhaseAsyncDataParam.RF1Rx1Rx2RxPhaseValue >> 16);
                    if (num41 > 32767)
                    {
                        ushort num16 = (ushort)((int)num41 - 65536);
                        p16 = Convert.ToString(Math.Round((double)(num16 * 360) / 65536.0, 2));
                    }
                    else
                    {
                        p16 = Convert.ToString(Math.Round((double)(num41 * 360) / 65536.0, 2));
                    }
                    ushort num42 = (ushort)(ScriptOps.RxGainPhaseAsyncDataParam.RF1Rx3Rx4RxPhaseValue & 65535U);
                    if (num42 > 32767)
                    {
                        ushort num16 = (ushort)((int)num42 - 65536);
                        p17 = Convert.ToString(Math.Round((double)(num16 * 360) / 65536.0, 2));
                    }
                    else
                    {
                        p17 = Convert.ToString(Math.Round((double)(num42 * 360) / 65536.0, 2));
                    }
                    ushort num43 = (ushort)(ScriptOps.RxGainPhaseAsyncDataParam.RF1Rx3Rx4RxPhaseValue >> 16);
                    if (num43 > 32767)
                    {
                        ushort num16 = (ushort)((int)num43 - 65536);
                        p18 = Convert.ToString(Math.Round((double)(num16 * 360) / 65536.0, 2));
                    }
                    else
                    {
                        p18 = Convert.ToString(Math.Round((double)(num43 * 360) / 65536.0, 2));
                    }
                    ushort num44 = (ushort)(ScriptOps.RxGainPhaseAsyncDataParam.RF2Rx1Rx2RxPhaseValue & 65535U);
                    if (num44 > 32767)
                    {
                        ushort num16 = (ushort)((int)num44 - 65536);
                        p19 = Convert.ToString(Math.Round((double)(num16 * 360) / 65536.0, 2));
                    }
                    else
                    {
                        p19 = Convert.ToString(Math.Round((double)(num44 * 360) / 65536.0, 2));
                    }
                    ushort num45 = (ushort)(ScriptOps.RxGainPhaseAsyncDataParam.RF2Rx1Rx2RxPhaseValue >> 16);
                    if (num45 > 32767)
                    {
                        ushort num16 = (ushort)((int)num45 - 65536);
                        p20 = Convert.ToString(Math.Round((double)(num16 * 360) / 65536.0, 2));
                    }
                    else
                    {
                        p20 = Convert.ToString(Math.Round((double)(num45 * 360) / 65536.0, 2));
                    }
                    ushort num46 = (ushort)(ScriptOps.RxGainPhaseAsyncDataParam.RF2Rx3Rx4RxPhaseValue & 65535U);
                    if (num46 > 32767)
                    {
                        ushort num16 = (ushort)((int)num46 - 65536);
                        p21 = Convert.ToString(Math.Round((double)(num16 * 360) / 65536.0, 2));
                    }
                    else
                    {
                        p21 = Convert.ToString(Math.Round((double)(num46 * 360) / 65536.0, 2));
                    }
                    ushort num47 = (ushort)(ScriptOps.RxGainPhaseAsyncDataParam.RF2Rx3Rx4RxPhaseValue >> 16);
                    if (num47 > 32767)
                    {
                        ushort num16 = (ushort)((int)num47 - 65536);
                        p22 = Convert.ToString(Math.Round((double)(num16 * 360) / 65536.0, 2));
                    }
                    else
                    {
                        p22 = Convert.ToString(Math.Round((double)(num47 * 360) / 65536.0, 2));
                    }
                    ushort num48 = (ushort)(ScriptOps.RxGainPhaseAsyncDataParam.RF3Rx1Rx2RxPhaseValue & 65535U);
                    if (num48 > 32767)
                    {
                        ushort num16 = (ushort)((int)num48 - 65536);
                        p23 = Convert.ToString(Math.Round((double)(num16 * 360) / 65536.0, 2));
                    }
                    else
                    {
                        p23 = Convert.ToString(Math.Round((double)(num48 * 360) / 65536.0, 2));
                    }
                    ushort num49 = (ushort)(ScriptOps.RxGainPhaseAsyncDataParam.RF3Rx1Rx2RxPhaseValue >> 16);
                    if (num49 > 32767)
                    {
                        ushort num16 = (ushort)((int)num49 - 65536);
                        p24 = Convert.ToString(Math.Round((double)(num16 * 360) / 65536.0, 2));
                    }
                    else
                    {
                        p24 = Convert.ToString(Math.Round((double)(num49 * 360) / 65536.0, 2));
                    }
                    ushort num50 = (ushort)(ScriptOps.RxGainPhaseAsyncDataParam.RF3Rx3Rx4RxPhaseValue & 65535U);
                    if (num50 > 32767)
                    {
                        ushort num16 = (ushort)((int)num50 - 65536);
                        p25 = Convert.ToString(Math.Round((double)(num16 * 360) / 65536.0, 2));
                    }
                    else
                    {
                        p25 = Convert.ToString(Math.Round((double)(num50 * 360) / 65536.0, 2));
                    }
                    ushort num51 = (ushort)(ScriptOps.RxGainPhaseAsyncDataParam.RF3Rx3Rx4RxPhaseValue >> 16);
                    if (num51 > 32767)
                    {
                        ushort num16 = (ushort)((int)num51 - 65536);
                        p26 = Convert.ToString(Math.Round((double)(num16 * 360) / 65536.0, 2));
                    }
                    else
                    {
                        p26 = Convert.ToString(Math.Round((double)(num51 * 360) / 65536.0, 2));
                    }
                    Timestamp = Convert.ToString(ScriptOps.RxGainPhaseAsyncDataParam.TimeStamp);
                }
                else if (GlobalRef.g_RadarDeviceId == 4U)
                {
                    StatusFlag = Convert.ToString(ScriptOps.RxGainPhaseAsyncDataParam.StatusFlags);
                    Errorcode = Convert.ToString(ScriptOps.RxGainPhaseAsyncDataParam.ErrorCode);
                    Profileindex = Convert.ToString(ScriptOps.RxGainPhaseAsyncDataParam.ProfileIndex);
                    ushort num52 = (ushort)(ScriptOps.RxGainPhaseAsyncDataParam.RF1Rx1Rx2RxGainValue & 65535U);
                    if (num52 > 32767)
                    {
                        short num3 = (short)((int)num52 - 65536);
                        RF1Rx1gainvalue = Convert.ToString((double)num3 / 10.0);
                    }
                    else
                    {
                        RF1Rx1gainvalue = Convert.ToString((double)num52 / 10.0);
                    }
                    ushort num53 = (ushort)(ScriptOps.RxGainPhaseAsyncDataParam.RF1Rx1Rx2RxGainValue >> 16);
                    if (num53 > 32767)
                    {
                        short num3 = (short)((int)num53 - 65536);
                        RF1Rx2gainvalue = Convert.ToString((double)num3 / 10.0);
                    }
                    else
                    {
                        RF1Rx2gainvalue = Convert.ToString((double)num53 / 10.0);
                    }
                    ushort num54 = (ushort)(ScriptOps.RxGainPhaseAsyncDataParam.RF1Rx3Rx4RxGainValue & 65535U);
                    if (num54 > 32767)
                    {
                        short num3 = (short)((int)num54 - 65536);
                        RF1Rx3gainvalue = Convert.ToString((double)num3 / 10.0);
                    }
                    else
                    {
                        RF1Rx3gainvalue = Convert.ToString((double)num54 / 10.0);
                    }
                    ushort num55 = (ushort)(ScriptOps.RxGainPhaseAsyncDataParam.RF1Rx3Rx4RxGainValue >> 16);
                    if (num55 > 32767)
                    {
                        short num3 = (short)((int)num55 - 65536);
                        RF1Rx4gainvalue = Convert.ToString((double)num3 / 10.0);
                    }
                    else
                    {
                        RF1Rx4gainvalue = Convert.ToString((double)num55 / 10.0);
                    }
                    ushort num56 = (ushort)(ScriptOps.RxGainPhaseAsyncDataParam.RF2Rx1Rx2RxGainValue & 65535U);
                    if (num56 > 32767)
                    {
                        short num3 = (short)((int)num56 - 65536);
                        RF2Rx1gainvalue = Convert.ToString((double)num3 / 10.0);
                    }
                    else
                    {
                        RF2Rx1gainvalue = Convert.ToString((double)num56 / 10.0);
                    }
                    ushort num57 = (ushort)(ScriptOps.RxGainPhaseAsyncDataParam.RF2Rx1Rx2RxGainValue >> 16);
                    if (num57 > 32767)
                    {
                        short num3 = (short)((int)num57 - 65536);
                        RF2Rx2gainvalue = Convert.ToString((double)num3 / 10.0);
                    }
                    else
                    {
                        RF2Rx2gainvalue = Convert.ToString((double)num57 / 10.0);
                    }
                    ushort num58 = (ushort)(ScriptOps.RxGainPhaseAsyncDataParam.RF2Rx3Rx4RxGainValue & 65535U);
                    if (num58 > 32767)
                    {
                        short num3 = (short)((int)num58 - 65536);
                        RF2Rx3gainvalue = Convert.ToString((double)num3 / 10.0);
                    }
                    else
                    {
                        RF2Rx3gainvalue = Convert.ToString((double)num58 / 10.0);
                    }
                    ushort num59 = (ushort)(ScriptOps.RxGainPhaseAsyncDataParam.RF2Rx3Rx4RxGainValue >> 16);
                    if (num59 > 32767)
                    {
                        short num3 = (short)((int)num59 - 65536);
                        RF2Rx4gainvalue = Convert.ToString((double)num3 / 10.0);
                    }
                    else
                    {
                        RF2Rx4gainvalue = Convert.ToString((double)num59 / 10.0);
                    }
                    ushort num60 = (ushort)(ScriptOps.RxGainPhaseAsyncDataParam.RF3Rx1Rx2RxGainValue & 65535U);
                    if (num60 > 32767)
                    {
                        short num3 = (short)((int)num60 - 65536);
                        RF3Rx1gainvalue = Convert.ToString((double)num3 / 10.0);
                    }
                    else
                    {
                        RF3Rx1gainvalue = Convert.ToString((double)num60 / 10.0);
                    }
                    ushort num61 = (ushort)(ScriptOps.RxGainPhaseAsyncDataParam.RF3Rx1Rx2RxGainValue >> 16);
                    if (num61 > 32767)
                    {
                        short num3 = (short)((int)num61 - 65536);
                        RF3Rx2gainvalue = Convert.ToString((double)num3 / 10.0);
                    }
                    else
                    {
                        RF3Rx2gainvalue = Convert.ToString((double)num61 / 10.0);
                    }
                    ushort num62 = (ushort)(ScriptOps.RxGainPhaseAsyncDataParam.RF3Rx3Rx4RxGainValue & 65535U);
                    if (num62 > 32767)
                    {
                        short num3 = (short)((int)num62 - 65536);
                        RF3Rx3gainvalue = Convert.ToString((double)num3 / 10.0);
                    }
                    else
                    {
                        RF3Rx3gainvalue = Convert.ToString((double)num62 / 10.0);
                    }
                    ushort num63 = (ushort)(ScriptOps.RxGainPhaseAsyncDataParam.RF3Rx3Rx4RxGainValue >> 16);
                    if (num63 > 32767)
                    {
                        short num3 = (short)((int)num63 - 65536);
                        RF3Rx4gainvalue = Convert.ToString((double)num3 / 10.0);
                    }
                    else
                    {
                        RF3Rx4gainvalue = Convert.ToString((double)num63 / 10.0);
                    }
                    ushort num64 = (ushort)(ScriptOps.RxGainPhaseAsyncDataParam.RF1Rx1Rx2RxPhaseValue & 65535U);
                    if (num64 > 32767)
                    {
                        ushort num16 = (ushort)((int)num64 - 65536);
                        p15 = Convert.ToString(Math.Round((double)(num16 * 360) / 65536.0, 2));
                    }
                    else
                    {
                        p15 = Convert.ToString(Math.Round((double)(num64 * 360) / 65536.0, 2));
                    }
                    ushort num65 = (ushort)(ScriptOps.RxGainPhaseAsyncDataParam.RF1Rx1Rx2RxPhaseValue >> 16);
                    if (num65 > 32767)
                    {
                        ushort num16 = (ushort)((int)num65 - 65536);
                        p16 = Convert.ToString(Math.Round((double)(num16 * 360) / 65536.0, 2));
                    }
                    else
                    {
                        p16 = Convert.ToString(Math.Round((double)(num65 * 360) / 65536.0, 2));
                    }
                    ushort num66 = (ushort)(ScriptOps.RxGainPhaseAsyncDataParam.RF1Rx3Rx4RxPhaseValue & 65535U);
                    if (num66 > 32767)
                    {
                        ushort num16 = (ushort)((int)num66 - 65536);
                        p17 = Convert.ToString(Math.Round((double)(num16 * 360) / 65536.0, 2));
                    }
                    else
                    {
                        p17 = Convert.ToString(Math.Round((double)(num66 * 360) / 65536.0, 2));
                    }
                    ushort num67 = (ushort)(ScriptOps.RxGainPhaseAsyncDataParam.RF1Rx3Rx4RxPhaseValue >> 16);
                    if (num67 > 32767)
                    {
                        ushort num16 = (ushort)((int)num67 - 65536);
                        p18 = Convert.ToString(Math.Round((double)(num16 * 360) / 65536.0, 2));
                    }
                    else
                    {
                        p18 = Convert.ToString(Math.Round((double)(num67 * 360) / 65536.0, 2));
                    }
                    ushort num68 = (ushort)(ScriptOps.RxGainPhaseAsyncDataParam.RF2Rx1Rx2RxPhaseValue & 65535U);
                    if (num68 > 32767)
                    {
                        ushort num16 = (ushort)((int)num68 - 65536);
                        p19 = Convert.ToString(Math.Round((double)(num16 * 360) / 65536.0, 2));
                    }
                    else
                    {
                        p19 = Convert.ToString(Math.Round((double)(num68 * 360) / 65536.0, 2));
                    }
                    ushort num69 = (ushort)(ScriptOps.RxGainPhaseAsyncDataParam.RF2Rx1Rx2RxPhaseValue >> 16);
                    if (num69 > 32767)
                    {
                        ushort num16 = (ushort)((int)num69 - 65536);
                        p20 = Convert.ToString(Math.Round((double)(num16 * 360) / 65536.0, 2));
                    }
                    else
                    {
                        p20 = Convert.ToString(Math.Round((double)(num69 * 360) / 65536.0, 2));
                    }
                    ushort num70 = (ushort)(ScriptOps.RxGainPhaseAsyncDataParam.RF2Rx3Rx4RxPhaseValue & 65535U);
                    if (num70 > 32767)
                    {
                        ushort num16 = (ushort)((int)num70 - 65536);
                        p21 = Convert.ToString(Math.Round((double)(num16 * 360) / 65536.0, 2));
                    }
                    else
                    {
                        p21 = Convert.ToString(Math.Round((double)(num70 * 360) / 65536.0, 2));
                    }
                    ushort num71 = (ushort)(ScriptOps.RxGainPhaseAsyncDataParam.RF2Rx3Rx4RxPhaseValue >> 16);
                    if (num71 > 32767)
                    {
                        ushort num16 = (ushort)((int)num71 - 65536);
                        p22 = Convert.ToString(Math.Round((double)(num16 * 360) / 65536.0, 2));
                    }
                    else
                    {
                        p22 = Convert.ToString(Math.Round((double)(num71 * 360) / 65536.0, 2));
                    }
                    ushort num72 = (ushort)(ScriptOps.RxGainPhaseAsyncDataParam.RF3Rx1Rx2RxPhaseValue & 65535U);
                    if (num72 > 32767)
                    {
                        ushort num16 = (ushort)((int)num72 - 65536);
                        p23 = Convert.ToString(Math.Round((double)(num16 * 360) / 65536.0, 2));
                    }
                    else
                    {
                        p23 = Convert.ToString(Math.Round((double)(num72 * 360) / 65536.0, 2));
                    }
                    ushort num73 = (ushort)(ScriptOps.RxGainPhaseAsyncDataParam.RF3Rx1Rx2RxPhaseValue >> 16);
                    if (num73 > 32767)
                    {
                        ushort num16 = (ushort)((int)num73 - 65536);
                        p24 = Convert.ToString(Math.Round((double)(num16 * 360) / 65536.0, 2));
                    }
                    else
                    {
                        p24 = Convert.ToString(Math.Round((double)(num73 * 360) / 65536.0, 2));
                    }
                    ushort num74 = (ushort)(ScriptOps.RxGainPhaseAsyncDataParam.RF3Rx3Rx4RxPhaseValue & 65535U);
                    if (num74 > 32767)
                    {
                        ushort num16 = (ushort)((int)num74 - 65536);
                        p25 = Convert.ToString(Math.Round((double)(num16 * 360) / 65536.0, 2));
                    }
                    else
                    {
                        p25 = Convert.ToString(Math.Round((double)(num74 * 360) / 65536.0, 2));
                    }
                    ushort num75 = (ushort)(ScriptOps.RxGainPhaseAsyncDataParam.RF3Rx3Rx4RxPhaseValue >> 16);
                    if (num75 > 32767)
                    {
                        ushort num16 = (ushort)((int)num75 - 65536);
                        p26 = Convert.ToString(Math.Round((double)(num16 * 360) / 65536.0, 2));
                    }
                    else
                    {
                        p26 = Convert.ToString(Math.Round((double)(num75 * 360) / 65536.0, 2));
                    }
                    Timestamp = Convert.ToString(ScriptOps.RxGainPhaseAsyncDataParam.TimeStamp);
                }
                else if (GlobalRef.g_RadarDeviceId == 8U)
                {
                    StatusFlag = Convert.ToString(ScriptOps.RxGainPhaseAsyncDataParam.StatusFlags);
                    Errorcode = Convert.ToString(ScriptOps.RxGainPhaseAsyncDataParam.ErrorCode);
                    Profileindex = Convert.ToString(ScriptOps.RxGainPhaseAsyncDataParam.ProfileIndex);
                    ushort num76 = (ushort)(ScriptOps.RxGainPhaseAsyncDataParam.RF1Rx1Rx2RxGainValue & 65535U);
                    if (num76 > 32767)
                    {
                        short num3 = (short)((int)num76 - 65536);
                        RF1Rx1gainvalue = Convert.ToString((double)num3 / 10.0);
                    }
                    else
                    {
                        RF1Rx1gainvalue = Convert.ToString((double)num76 / 10.0);
                    }
                    ushort num77 = (ushort)(ScriptOps.RxGainPhaseAsyncDataParam.RF1Rx1Rx2RxGainValue >> 16);
                    if (num77 > 32767)
                    {
                        short num3 = (short)((int)num77 - 65536);
                        RF1Rx2gainvalue = Convert.ToString((double)num3 / 10.0);
                    }
                    else
                    {
                        RF1Rx2gainvalue = Convert.ToString((double)num77 / 10.0);
                    }
                    ushort num78 = (ushort)(ScriptOps.RxGainPhaseAsyncDataParam.RF1Rx3Rx4RxGainValue & 65535U);
                    if (num78 > 32767)
                    {
                        short num3 = (short)((int)num78 - 65536);
                        RF1Rx3gainvalue = Convert.ToString((double)num3 / 10.0);
                    }
                    else
                    {
                        RF1Rx3gainvalue = Convert.ToString((double)num78 / 10.0);
                    }
                    ushort num79 = (ushort)(ScriptOps.RxGainPhaseAsyncDataParam.RF1Rx3Rx4RxGainValue >> 16);
                    if (num79 > 32767)
                    {
                        short num3 = (short)((int)num79 - 65536);
                        RF1Rx4gainvalue = Convert.ToString((double)num3 / 10.0);
                    }
                    else
                    {
                        RF1Rx4gainvalue = Convert.ToString((double)num79 / 10.0);
                    }
                    ushort num80 = (ushort)(ScriptOps.RxGainPhaseAsyncDataParam.RF2Rx1Rx2RxGainValue & 65535U);
                    if (num80 > 32767)
                    {
                        short num3 = (short)((int)num80 - 65536);
                        RF2Rx1gainvalue = Convert.ToString((double)num3 / 10.0);
                    }
                    else
                    {
                        RF2Rx1gainvalue = Convert.ToString((double)num80 / 10.0);
                    }
                    ushort num81 = (ushort)(ScriptOps.RxGainPhaseAsyncDataParam.RF2Rx1Rx2RxGainValue >> 16);
                    if (num81 > 32767)
                    {
                        short num3 = (short)((int)num81 - 65536);
                        RF2Rx2gainvalue = Convert.ToString((double)num3 / 10.0);
                    }
                    else
                    {
                        RF2Rx2gainvalue = Convert.ToString((double)num81 / 10.0);
                    }
                    ushort num82 = (ushort)(ScriptOps.RxGainPhaseAsyncDataParam.RF2Rx3Rx4RxGainValue & 65535U);
                    if (num82 > 32767)
                    {
                        short num3 = (short)((int)num82 - 65536);
                        RF2Rx3gainvalue = Convert.ToString((double)num3 / 10.0);
                    }
                    else
                    {
                        RF2Rx3gainvalue = Convert.ToString((double)num82 / 10.0);
                    }
                    ushort num83 = (ushort)(ScriptOps.RxGainPhaseAsyncDataParam.RF2Rx3Rx4RxGainValue >> 16);
                    if (num83 > 32767)
                    {
                        short num3 = (short)((int)num83 - 65536);
                        RF2Rx4gainvalue = Convert.ToString((double)num3 / 10.0);
                    }
                    else
                    {
                        RF2Rx4gainvalue = Convert.ToString((double)num83 / 10.0);
                    }
                    ushort num84 = (ushort)(ScriptOps.RxGainPhaseAsyncDataParam.RF3Rx1Rx2RxGainValue & 65535U);
                    if (num84 > 32767)
                    {
                        short num3 = (short)((int)num84 - 65536);
                        RF3Rx1gainvalue = Convert.ToString((double)num3 / 10.0);
                    }
                    else
                    {
                        RF3Rx1gainvalue = Convert.ToString((double)num84 / 10.0);
                    }
                    ushort num85 = (ushort)(ScriptOps.RxGainPhaseAsyncDataParam.RF3Rx1Rx2RxGainValue >> 16);
                    if (num85 > 32767)
                    {
                        short num3 = (short)((int)num85 - 65536);
                        RF3Rx2gainvalue = Convert.ToString((double)num3 / 10.0);
                    }
                    else
                    {
                        RF3Rx2gainvalue = Convert.ToString((double)num85 / 10.0);
                    }
                    ushort num86 = (ushort)(ScriptOps.RxGainPhaseAsyncDataParam.RF3Rx3Rx4RxGainValue & 65535U);
                    if (num86 > 32767)
                    {
                        short num3 = (short)((int)num86 - 65536);
                        RF3Rx3gainvalue = Convert.ToString((double)num3 / 10.0);
                    }
                    else
                    {
                        RF3Rx3gainvalue = Convert.ToString((double)num86 / 10.0);
                    }
                    ushort num87 = (ushort)(ScriptOps.RxGainPhaseAsyncDataParam.RF3Rx3Rx4RxGainValue >> 16);
                    if (num87 > 32767)
                    {
                        short num3 = (short)((int)num87 - 65536);
                        RF3Rx4gainvalue = Convert.ToString((double)num3 / 10.0);
                    }
                    else
                    {
                        RF3Rx4gainvalue = Convert.ToString((double)num87 / 10.0);
                    }
                    ushort num88 = (ushort)(ScriptOps.RxGainPhaseAsyncDataParam.RF1Rx1Rx2RxPhaseValue & 65535U);
                    if (num88 > 32767)
                    {
                        ushort num16 = (ushort)((int)num88 - 65536);
                        p15 = Convert.ToString(Math.Round((double)(num16 * 360) / 65536.0, 2));
                    }
                    else
                    {
                        p15 = Convert.ToString(Math.Round((double)(num88 * 360) / 65536.0, 2));
                    }
                    ushort num89 = (ushort)(ScriptOps.RxGainPhaseAsyncDataParam.RF1Rx1Rx2RxPhaseValue >> 16);
                    if (num89 > 32767)
                    {
                        ushort num16 = (ushort)((int)num89 - 65536);
                        p16 = Convert.ToString(Math.Round((double)(num16 * 360) / 65536.0, 2));
                    }
                    else
                    {
                        p16 = Convert.ToString(Math.Round((double)(num89 * 360) / 65536.0, 2));
                    }
                    ushort num90 = (ushort)(ScriptOps.RxGainPhaseAsyncDataParam.RF1Rx3Rx4RxPhaseValue & 65535U);
                    if (num90 > 32767)
                    {
                        ushort num16 = (ushort)((int)num90 - 65536);
                        p17 = Convert.ToString(Math.Round((double)(num16 * 360) / 65536.0, 2));
                    }
                    else
                    {
                        p17 = Convert.ToString(Math.Round((double)(num90 * 360) / 65536.0, 2));
                    }
                    ushort num91 = (ushort)(ScriptOps.RxGainPhaseAsyncDataParam.RF1Rx3Rx4RxPhaseValue >> 16);
                    if (num91 > 32767)
                    {
                        ushort num16 = (ushort)((int)num91 - 65536);
                        p18 = Convert.ToString(Math.Round((double)(num16 * 360) / 65536.0, 2));
                    }
                    else
                    {
                        p18 = Convert.ToString(Math.Round((double)(num91 * 360) / 65536.0, 2));
                    }
                    ushort num92 = (ushort)(ScriptOps.RxGainPhaseAsyncDataParam.RF2Rx1Rx2RxPhaseValue & 65535U);
                    if (num92 > 32767)
                    {
                        ushort num16 = (ushort)((int)num92 - 65536);
                        p19 = Convert.ToString(Math.Round((double)(num16 * 360) / 65536.0, 2));
                    }
                    else
                    {
                        p19 = Convert.ToString(Math.Round((double)(num92 * 360) / 65536.0, 2));
                    }
                    ushort num93 = (ushort)(ScriptOps.RxGainPhaseAsyncDataParam.RF2Rx1Rx2RxPhaseValue >> 16);
                    if (num93 > 32767)
                    {
                        ushort num16 = (ushort)((int)num93 - 65536);
                        p20 = Convert.ToString(Math.Round((double)(num16 * 360) / 65536.0, 2));
                    }
                    else
                    {
                        p20 = Convert.ToString(Math.Round((double)(num93 * 360) / 65536.0, 2));
                    }
                    ushort num94 = (ushort)(ScriptOps.RxGainPhaseAsyncDataParam.RF2Rx3Rx4RxPhaseValue & 65535U);
                    if (num94 > 32767)
                    {
                        ushort num16 = (ushort)((int)num94 - 65536);
                        p21 = Convert.ToString(Math.Round((double)(num16 * 360) / 65536.0, 2));
                    }
                    else
                    {
                        p21 = Convert.ToString(Math.Round((double)(num94 * 360) / 65536.0, 2));
                    }
                    ushort num95 = (ushort)(ScriptOps.RxGainPhaseAsyncDataParam.RF2Rx3Rx4RxPhaseValue >> 16);
                    if (num95 > 32767)
                    {
                        ushort num16 = (ushort)((int)num95 - 65536);
                        p22 = Convert.ToString(Math.Round((double)(num16 * 360) / 65536.0, 2));
                    }
                    else
                    {
                        p22 = Convert.ToString(Math.Round((double)(num95 * 360) / 65536.0, 2));
                    }
                    ushort num96 = (ushort)(ScriptOps.RxGainPhaseAsyncDataParam.RF3Rx1Rx2RxPhaseValue & 65535U);
                    if (num96 > 32767)
                    {
                        ushort num16 = (ushort)((int)num96 - 65536);
                        p23 = Convert.ToString(Math.Round((double)(num16 * 360) / 65536.0, 2));
                    }
                    else
                    {
                        p23 = Convert.ToString(Math.Round((double)(num96 * 360) / 65536.0, 2));
                    }
                    ushort num97 = (ushort)(ScriptOps.RxGainPhaseAsyncDataParam.RF3Rx1Rx2RxPhaseValue >> 16);
                    if (num97 > 32767)
                    {
                        ushort num16 = (ushort)((int)num97 - 65536);
                        p24 = Convert.ToString(Math.Round((double)(num16 * 360) / 65536.0, 2));
                    }
                    else
                    {
                        p24 = Convert.ToString(Math.Round((double)(num97 * 360) / 65536.0, 2));
                    }
                    ushort num98 = (ushort)(ScriptOps.RxGainPhaseAsyncDataParam.RF3Rx3Rx4RxPhaseValue & 65535U);
                    if (num98 > 32767)
                    {
                        ushort num16 = (ushort)((int)num98 - 65536);
                        p25 = Convert.ToString(Math.Round((double)(num16 * 360) / 65536.0, 2));
                    }
                    else
                    {
                        p25 = Convert.ToString(Math.Round((double)(num98 * 360) / 65536.0, 2));
                    }
                    ushort num99 = (ushort)(ScriptOps.RxGainPhaseAsyncDataParam.RF3Rx3Rx4RxPhaseValue >> 16);
                    if (num99 > 32767)
                    {
                        ushort num16 = (ushort)((int)num99 - 65536);
                        p26 = Convert.ToString(Math.Round((double)(num16 * 360) / 65536.0, 2));
                    }
                    else
                    {
                        p26 = Convert.ToString(Math.Round((double)(num99 * 360) / 65536.0, 2));
                    }
                    Timestamp = Convert.ToString(ScriptOps.RxGainPhaseAsyncDataParam.TimeStamp);
                }
            }
            if ((num == 0 && ((GlobalRef.g_CasCadeDeviceSpiConnect & 1U) == 1U || (GlobalRef.g_CasCadeDeviceSpiConnect & 2U) == 2U || (GlobalRef.g_CasCadeDeviceSpiConnect & 4U) == 4U || (GlobalRef.g_CasCadeDeviceSpiConnect & 8U) == 8U)) || GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
            {
                string full_command4 = string.Format("Status: Passed", new object[0]);
                m_GuiManager.RecordLog(6, full_command4);
            }
            else
            {
                string msg = string.Format("Status: Failed, Error Type: {0}", new object[]
                {
                    GetErrorType(num)
                });
                GlobalRef.LuaWrapper.PrintError(msg);
            }
            if (GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
            {
                if (iRs232ConnectDisconnect_impl() == 0 && !GlobalRef.g_NtvRS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
                {
                    m_GuiManager.DllOps.iConnect(1U, 0U);
                    string full_command5 = string.Format("Debug Port Reconnected!", new object[0]);
                    m_GuiManager.RecordLog(9, full_command5);
                    ScriptOps.KeepTrying(2000, new Func<bool>(spare_read));
                }
            }
            else if (GlobalRef.g_CasCadeDeviceSpiConnect == 0U)
            {
                string full_command6 = string.Format("Error Occurred in Port open close", new object[0]);
                m_GuiManager.RecordLog(9, full_command6);
            }
            return num;
        }

        public int UpdateNSetRFInitCalibConfData(ushort RadarDeviceId, uint LODist, uint RXADCDC, uint HPFCutoff, uint LPFCutoff, uint PeakDetector, uint TXPower, uint RXGain, uint RXIQMM)
        {
            GlobalRef.g_RadarDeviceId = (uint)RadarDeviceId;
            ScriptOps.m_MainForm.CalibConfig.UpdateRFInitCalibConfigData();
            m_RFInitCalibConfigParameters.LODist = LODist;
            m_RFInitCalibConfigParameters.RXADCDC = RXADCDC;
            m_RFInitCalibConfigParameters.HPFCutoff = HPFCutoff;
            m_RFInitCalibConfigParameters.LPFCutoff = LPFCutoff;
            m_RFInitCalibConfigParameters.PeakDetector = PeakDetector;
            m_RFInitCalibConfigParameters.TXPower = TXPower;
            m_RFInitCalibConfigParameters.RXGain = RXGain;
            m_RFInitCalibConfigParameters.TXPhase = (RXIQMM >> 16 & 65535U);
            m_RFInitCalibConfigParameters.RXIQMM = (RXIQMM & 65535U);
            ScriptOps.m_MainForm.CalibConfig.UpdateRFInitCalibConfigDataFrmCmdSrc();
            return iSetRFInitCalibConfig_Gui(true, false);
        }

        public int UpdateNSetRunTimeCalibConfData(ushort RadarDeviceId, uint OneTimeCalibLODist, uint OneTimeCalibTXPower, uint OneTimeCalibRXGain, uint PeriodicCalibLODist, uint PeriodicCalibTXPower, uint PeriodicCalibRXGain, uint CalibPeriodicity, char CalReport)
        {
            GlobalRef.g_RadarDeviceId = (uint)RadarDeviceId;
            ScriptOps.m_MainForm.CalibConfig.UpdateRunTimeCalibConfigData();
            m_RunTimeCalibConfigParameters.OneTimeLODist = OneTimeCalibLODist;
            m_RunTimeCalibConfigParameters.OneTimeTXPower = OneTimeCalibTXPower;
            m_RunTimeCalibConfigParameters.OneTimeRXGain = OneTimeCalibRXGain;
            m_RunTimeCalibConfigParameters.PeriodiCalibLODist = PeriodicCalibLODist;
            m_RunTimeCalibConfigParameters.PeriodiCalibTXPower = PeriodicCalibTXPower;
            m_RunTimeCalibConfigParameters.PeriodiCalibRXGain = PeriodicCalibRXGain;
            m_RunTimeCalibConfigParameters.CalibPeriodicity = CalibPeriodicity;
            m_RunTimeCalibConfigParameters.EnableCalReport = CalReport;
            ScriptOps.m_MainForm.CalibConfig.UpdateRunTimeCalibConfigDataFrmCmdSrc();
            return iSetRunTimeCalibConfig_Gui(true, false);
        }

        public int UpdateChanNAdcConfData(ushort TxIdx, ushort Tx2, ushort Tx3, ushort RxIdx, ushort Rx2, ushort Rx3, ushort Rx4, ushort cascadeMode, int BitsVal, int FmtVal, int IQSwap)
        {
            ScriptOps.m_MainForm.StaticConfigTab.UpdateBasicConfData();

            m_StaticParams.EnableTx1 = (int)TxIdx;
            m_StaticParams.EnableTx2 = (int)Tx2;
            m_StaticParams.EnableTx3 = (int)Tx3;
            m_StaticParams.EnableRx1 = (int)RxIdx;
            m_StaticParams.EnableRx2 = (int)Rx2;
            m_StaticParams.EnableRx3 = (int)Rx3;
            m_StaticParams.EnableRx4 = (int)Rx4;
            m_StaticParams.CascadeMode = cascadeMode;
            m_StaticParams.BitsVal = BitsVal;
            m_StaticParams.FmtVal = FmtVal;
            m_StaticParams.IQSwap = (char)IQSwap;

            ScriptOps.m_MainForm.StaticConfigTab.UpdateChanAdcDataFrmCmdSrc();

            return -1;
        }

        public int LoadNLPModeConfData(int LpAdcMod)
        {
            int result = -1;
            ScriptOps.m_MainForm.StaticConfigTab.UpdateLpModConfData();
            m_LpModConfParams.LpAdcMod = LpAdcMod;
            ScriptOps.m_MainForm.StaticConfigTab.UpdateLpNNoiseDataFrmCmdSrc();
            return result;
        }

        public int LoadNFreqLimitConfData(double FreqLimitLow, double FreqLimitHigh)
        {
            int result = -1;
            ScriptOps.m_MainForm.StaticConfigTab.UpdateFreqLimitConfigData();
            m_RFCalibFrequencyLimitConfigParameters.FreqLimitLow = FreqLimitLow;
            m_RFCalibFrequencyLimitConfigParameters.FreqLimitHigh = FreqLimitHigh;
            ScriptOps.m_MainForm.StaticConfigTab.UpdateFreqLimitConfigDataFrmCmdSrc();
            return result;
        }

        public int LoadNRfLDOBypassConfData(ushort RFLdoBypass)
        {
            int result = -1;
            ScriptOps.m_MainForm.StaticConfigTab.UpdateRFLDOBypassConfData();
            m_RFLDOBypassEnableAndDisableConfigParameters.LDOBypassEnable = RFLdoBypass;
            ScriptOps.m_MainForm.StaticConfigTab.UpdateRFLDOBypassConfDataFromCmdSrc();
            return result;
        }

        public int LoadNRadarMiscControlConfData(uint PerChirpPhaseShiftEna)
        {
            int result = -1;
            ScriptOps.m_MainForm.StaticConfigTab.UpdatePerChirpPhaseShifterEnableConfigData();
            m_RFMiscConfigParams.PerChirpPhaseShifterEnable = PerChirpPhaseShiftEna;
            ScriptOps.m_MainForm.StaticConfigTab.UpdatePerChirpPhaseShifterEnableDataFrmCmdSrc();
            return result;
        }

        public int LoadNCalMonFreqTxPowLimitConfData(double FreqLimitLowTx0, double FreqLimitLowTx1, double FreqLimitLowTx2, double FreqLimitHighTx0, double FreqLimitHighTx1, double FreqLimitHighTx2, double Tx0PowerBackoff, double Tx1PowerBackoff, double Tx2PowerBackoff)
        {
            int result = -1;
            ScriptOps.m_MainForm.StaticConfigTab.UpdateCalMonFreqTxPowerLimitConfigData();
            m_CalMonFrequencyTxPowerLimitConfigParameters.FreqLimitLowTx1 = FreqLimitLowTx0;
            m_CalMonFrequencyTxPowerLimitConfigParameters.FreqLimitLowTx2 = FreqLimitLowTx1;
            m_CalMonFrequencyTxPowerLimitConfigParameters.FreqLimitLowTx3 = FreqLimitLowTx2;
            m_CalMonFrequencyTxPowerLimitConfigParameters.FreqLimitHighTx1 = FreqLimitHighTx0;
            m_CalMonFrequencyTxPowerLimitConfigParameters.FreqLimitHighTx2 = FreqLimitHighTx1;
            m_CalMonFrequencyTxPowerLimitConfigParameters.FreqLimitHighTx3 = FreqLimitHighTx2;
            m_CalMonFrequencyTxPowerLimitConfigParameters.Tx1PowerBackoff = Tx0PowerBackoff;
            m_CalMonFrequencyTxPowerLimitConfigParameters.Tx2PowerBackoff = Tx1PowerBackoff;
            m_CalMonFrequencyTxPowerLimitConfigParameters.Tx3PowerBackoff = Tx2PowerBackoff;
            ScriptOps.m_MainForm.StaticConfigTab.UpdateCalMonFreqTxPowerLimitConfigDataFrmCmdSrc();
            return result;
        }

        public int LoadNDataPathConfData(byte dataPathCfgPath, byte p1, byte p2, byte pkt0VChannelNo, byte pkt1VChannelNo)
        {
            int result = -1;
            ScriptOps.m_MainForm.DataConfigTab.UpdateDataConfigData();
            m_DataConfigParams.DataPath = (char)dataPathCfgPath;
            m_DataConfigParams.DataFmt0 = (char)p1;
            m_DataConfigParams.DataFmt1 = (char)p2;
            m_DataConfigParams.CS2Pkt0VirtualChannelNo = (char)pkt0VChannelNo;
            m_DataConfigParams.CS2Pkt1VirtualChannelNo = (char)pkt1VChannelNo;
            ScriptOps.m_MainForm.DataConfigTab.UpdateAndLoadDataConfigDataFrmCmdSrc();
            return result;
        }

        public int LoadNClockConfData(byte laneClock, byte dataRate)
        {
            int result = -1;
            ScriptOps.m_MainForm.DataConfigTab.UpdateDataConfigData();
            m_DataConfigParams.laneClk = (char)laneClock;
            m_DataConfigParams.DataRate = (char)dataRate;
            ScriptOps.m_MainForm.DataConfigTab.UpdateDataConfigDataFrmCmdSrc();
            return result;
        }

        public int LoadNLVDSLaneConfData(ushort laneFormat, ushort lane1En, ushort lane2En, ushort lane3En, ushort lane4En, ushort p5, ushort p6, ushort lvdsPacketEndPulse)
        {
            int result = -1;
            ScriptOps.m_MainForm.DataConfigTab.UpdateDataConfigData();
            m_DataConfigParams.f000327 = laneFormat;
            m_DataConfigParams.lane1En = lane1En;
            m_DataConfigParams.lane2En = lane2En;
            m_DataConfigParams.lane3En = lane3En;
            m_DataConfigParams.lane4En = lane4En;
            m_DataConfigParams.msbFirst = p5;
            m_DataConfigParams.crc = p6;
            m_DataConfigParams.endPulse = lvdsPacketEndPulse;
            ScriptOps.m_MainForm.DataConfigTab.UpdateDataConfigDataFrmCmdSrc();
            return result;
        }

        public int LoadNCSI2LaneConfData(ushort lane0Pos, ushort lane0Pol, ushort lane1Pos, ushort lane1Pol, ushort lane2Pos, ushort lane2Pol, ushort lane3Pos, ushort lane3Pol, ushort clockPos, ushort clockPol)
        {
            int result = -1;
            ScriptOps.m_MainForm.DataConfigTab.UpdateDataConfigData();
            m_DataConfigParams.CSI2DataLane0Pos = lane0Pos;
            m_DataConfigParams.CSI2DataLane0Pol = lane0Pol;
            m_DataConfigParams.CSI2DataLane1Pos = lane1Pos;
            m_DataConfigParams.CSI2DataLane1Pol = lane1Pol;
            m_DataConfigParams.CSI2DataLane2Pos = lane2Pos;
            m_DataConfigParams.CSI2DataLane2Pol = lane2Pol;
            m_DataConfigParams.CSI2DataLane3Pos = lane3Pos;
            m_DataConfigParams.CSI2DataLane3Pol = lane3Pol;
            m_DataConfigParams.CSI2ClockPos = clockPos;
            m_DataConfigParams.CSI2ClockPol = clockPol;
            ScriptOps.m_MainForm.DataConfigTab.UpdateCSI2LaneConfigDataFrmCmdSrc();
            return result;
        }

        public int LoadNTestPatternGenConfData(byte testPatternGenCtl, byte testPatternGenTime, ushort testPatternPktSize, uint numTestPatternPkts, ushort testPatternRx0ICFGStartOffset, ushort testPatternRx0ICFGVal, ushort testPatternRx0QCFGStartOffset, ushort testPatternRx0QCFGVal, ushort testPatternRx1ICFGStartOffset, ushort testPatternRx1ICFGVal, ushort testPatternRx1QCFGStartOffset, ushort testPatternRx1QCFGVal, ushort testPatternRx2ICFGStartOffset, ushort testPatternRx2ICFGVal, ushort testPatternRx2QCFGStartOffset, ushort testPatternRx2QCFGVal, ushort testPatternRx3ICFGStartOffset, ushort testPatternRx3ICFGVal, ushort testPatternRx3QCFGStartOffset, ushort testPatternRx3QCFGVal)
        {
            int result = -1;
            ScriptOps.m_MainForm.DataConfigTab.UpdateTestPatternGeneratingConfigData();
            m_TestPatternGenConfigParams.TestPatternGenCtl = testPatternGenCtl;
            m_TestPatternGenConfigParams.TestPatternGenTiming = testPatternGenTime;
            m_TestPatternGenConfigParams.TestPatternPktSize = testPatternPktSize;
            m_TestPatternGenConfigParams.NumTestPatternPkts = numTestPatternPkts;
            m_TestPatternGenConfigParams.TestPatternRx0ICfg1 = testPatternRx0ICFGStartOffset;
            m_TestPatternGenConfigParams.TestPatternRx0ICfg2 = testPatternRx0ICFGVal;
            m_TestPatternGenConfigParams.TestPatternRx1ICfg1 = testPatternRx1ICFGStartOffset;
            m_TestPatternGenConfigParams.TestPatternRx1ICfg2 = testPatternRx1ICFGVal;
            m_TestPatternGenConfigParams.TestPatternRx2ICfg1 = testPatternRx2ICFGStartOffset;
            m_TestPatternGenConfigParams.TestPatternRx2ICfg2 = testPatternRx2ICFGVal;
            m_TestPatternGenConfigParams.TestPatternRx3ICfg1 = testPatternRx3ICFGStartOffset;
            m_TestPatternGenConfigParams.TestPatternRx3ICfg2 = testPatternRx3ICFGVal;
            m_TestPatternGenConfigParams.TestPatternRx0QCfg1 = testPatternRx0QCFGStartOffset;
            m_TestPatternGenConfigParams.TestPatternRx0QCfg2 = testPatternRx0QCFGVal;
            m_TestPatternGenConfigParams.TestPatternRx1QCfg1 = testPatternRx1QCFGStartOffset;
            m_TestPatternGenConfigParams.TestPatternRx1QCfg2 = testPatternRx1QCFGVal;
            m_TestPatternGenConfigParams.TestPatternRx2QCfg1 = testPatternRx2QCFGStartOffset;
            m_TestPatternGenConfigParams.TestPatternRx2QCfg2 = testPatternRx2QCFGVal;
            m_TestPatternGenConfigParams.TestPatternRx3QCfg1 = testPatternRx3QCFGStartOffset;
            m_TestPatternGenConfigParams.TestPatternRx3QCfg2 = testPatternRx3QCFGVal;
            ScriptOps.m_MainForm.DataConfigTab.UpdateTestPatternGeneratingConfigDataFrmCmdSrc();
            return result;
        }

        public int UpdateAdvanceFrameConfigData(byte numOfSubFrames, byte forceProfileEna, ushort numOfFrames, ushort softwareTrigger, ushort hardwareTrigger, float frameTriggerDelay, byte loopBackCfgSubFrameID, byte loopBackCfg, ushort testSourceEn, ushort p9, ushort p10, ushort sb1numOfChirps, ushort sb1numOfLoops, float p13, ushort p14, ushort sb1numOfBrust, ushort p16, float p17, ushort p18, ushort p19, ushort p20, ushort sb2numOfChirps, ushort sb2numOfLoops, float p23, ushort p24, ushort sb2numOfBrust, ushort p26, float p27, ushort p28, ushort p29, ushort p30, ushort sb3numOfChirps, ushort sb3numOfLoops, float p33, ushort p34, ushort sb3numOfBrust, ushort p36, float p37, ushort p38, ushort p39, ushort p40, ushort sb4numOfChirps, ushort sb4numOfLoops, float p43, ushort p44, ushort sb4numOfBrust, ushort p46, float p47, ushort p48)
        {
            int result = 0;
            ScriptOps.m_MainForm.AdvanceFrameConfigTab.UpdateAdvncedFrameConfigData();
            m_AdvancedFrameConfigParams.NumOfSubFrames = numOfSubFrames;
            m_AdvancedFrameConfigParams.ForceProfile = forceProfileEna;
            m_AdvancedFrameConfigParams.NumOfFrames = numOfFrames;
            if (softwareTrigger == 1)
            {
                m_AdvancedFrameConfigParams.TriggerSelect = 1;
            }
            else if (hardwareTrigger == 1)
            {
                m_AdvancedFrameConfigParams.TriggerSelect = 2;
            }
            else
            {
                m_AdvancedFrameConfigParams.TriggerSelect = 1;
            }
            m_AdvancedFrameConfigParams.FrameTrigDelay = frameTriggerDelay;
            m_AdvancedFrameConfigParams.LoopBackCfg = loopBackCfg;
            m_AdvancedFrameConfigParams.SubFrameId = loopBackCfgSubFrameID;
            m_AdvancedFrameConfigParams.ForceProfileIdx = p9;
            m_AdvancedFrameConfigParams.ChirpStartIdx = p10;
            m_AdvancedFrameConfigParams.NumOfChirps = sb1numOfChirps;
            m_AdvancedFrameConfigParams.NumOfLoops = sb1numOfLoops;
            m_AdvancedFrameConfigParams.BurstPeriodicity = p13;
            m_AdvancedFrameConfigParams.ChirpStartIdxOffset = p14;
            m_AdvancedFrameConfigParams.NumOfBrust = sb1numOfBrust;
            m_AdvancedFrameConfigParams.NumOfBrustLoops = p16;
            m_AdvancedFrameConfigParams.SubFramePeriodicity = p17;
            m_AdvancedFrameConfigParams.NumOfAdcSamples = p18;
            m_AdvancedFrameConfigParams.ForceProfileIdx2 = p19;
            m_AdvancedFrameConfigParams.ChirpStartIdx2 = p20;
            m_AdvancedFrameConfigParams.NumOfChirps2 = sb2numOfChirps;
            m_AdvancedFrameConfigParams.NumOfLoops2 = sb2numOfLoops;
            m_AdvancedFrameConfigParams.BurstPeriodicity2 = p23;
            m_AdvancedFrameConfigParams.ChirpStartIdxOffset2 = p24;
            m_AdvancedFrameConfigParams.NumOfBrust2 = sb2numOfBrust;
            m_AdvancedFrameConfigParams.NumOfBrustLoops2 = p26;
            m_AdvancedFrameConfigParams.SubFramePeriodicity2 = p27;
            m_AdvancedFrameConfigParams.NumOfAdcSamples2 = p28;
            m_AdvancedFrameConfigParams.ForceProfileIdx3 = p29;
            m_AdvancedFrameConfigParams.ChirpStartIdx3 = p30;
            m_AdvancedFrameConfigParams.NumOfChirps3 = sb3numOfChirps;
            m_AdvancedFrameConfigParams.NumOfLoops3 = sb3numOfLoops;
            m_AdvancedFrameConfigParams.BurstPeriodicity3 = p33;
            m_AdvancedFrameConfigParams.ChirpStartIdxOffset3 = p34;
            m_AdvancedFrameConfigParams.NumOfBrust3 = sb3numOfBrust;
            m_AdvancedFrameConfigParams.NumOfBrustLoops3 = p36;
            m_AdvancedFrameConfigParams.SubFramePeriodicity3 = p37;
            m_AdvancedFrameConfigParams.NumOfAdcSamples3 = p38;
            m_AdvancedFrameConfigParams.ForceProfileIdx4 = p39;
            m_AdvancedFrameConfigParams.ChirpStartIdx4 = p40;
            m_AdvancedFrameConfigParams.NumOfChirps4 = sb4numOfChirps;
            m_AdvancedFrameConfigParams.NumOfLoops4 = sb4numOfLoops;
            m_AdvancedFrameConfigParams.BurstPeriodicity4 = p43;
            m_AdvancedFrameConfigParams.ChirpStartIdxOffset4 = p44;
            m_AdvancedFrameConfigParams.NumOfBrust4 = sb4numOfBrust;
            m_AdvancedFrameConfigParams.NumOfBrustLoops4 = p46;
            m_AdvancedFrameConfigParams.SubFramePeriodicity4 = p47;
            m_AdvancedFrameConfigParams.NumOfAdcSamples4 = p48;
            m_AdvancedFrameConfigParams.testSourceEnable = testSourceEn;
            ScriptOps.m_MainForm.AdvanceFrameConfigTab.UpdateAdvncedFrameConfigDataFrmCmd();
            return result;
        }

        public int UpdateLoopBackBurstConfigData(byte loopBackSelect, byte baseProfileIndex, byte busrtIndex, double freqConst, float slopeConst, byte tx0BackOff, byte tx1BackOff, byte tx2BackOff, byte p8, byte p9, byte p10, byte rfGainTarget, byte rxGain, byte p13, byte p14, byte p15, byte p16, byte p17, byte p18, byte digitalCorrDisable, byte digCorrRxGainPhase, byte ifLoopBackFreq, byte iflLoopBackMag, byte ps1PGAGainIndex, byte ps2PGAGainIndex, byte paLoopBackFreq, byte psTx0LoopBackFreq, byte psTx1LoopBackFreq)
        {
            int result = 0;
            ScriptOps.m_MainForm.AdvanceFrameConfigTab.UpdateLoopBackBurstConfigData();
            m_LoopBackBurstConfigParams.LoopBackSelect = loopBackSelect;
            m_LoopBackBurstConfigParams.BaseProfileIndex = baseProfileIndex;
            m_LoopBackBurstConfigParams.BurstIndex = busrtIndex;
            m_LoopBackBurstConfigParams.FreqConst = freqConst;
            m_LoopBackBurstConfigParams.SlopeConst = slopeConst;
            m_LoopBackBurstConfigParams.Tx1BackOff = tx0BackOff;
            m_LoopBackBurstConfigParams.Tx2BackOff = tx1BackOff;
            m_LoopBackBurstConfigParams.Tx3BackOff = tx2BackOff;
            m_LoopBackBurstConfigParams.RxGain = rxGain;
            if (rfGainTarget == 0)
            {
                m_LoopBackBurstConfigParams.RFGainTarget = 0;
            }
            else if (rfGainTarget == 1)
            {
                m_LoopBackBurstConfigParams.RFGainTarget = 1;
            }
            else if (rfGainTarget == 2)
            {
                m_LoopBackBurstConfigParams.RFGainTarget = 3;
            }
            m_LoopBackBurstConfigParams.Tx1Enable = p8;
            m_LoopBackBurstConfigParams.Tx2Enable = p9;
            m_LoopBackBurstConfigParams.Tx3Enable = p10;
            m_LoopBackBurstConfigParams.BPMTx0Off = p13;
            m_LoopBackBurstConfigParams.BPMTx0On = p14;
            m_LoopBackBurstConfigParams.BPMTx1Off = p15;
            m_LoopBackBurstConfigParams.BPMTx1On = p16;
            m_LoopBackBurstConfigParams.BPMTx2Off = p17;
            m_LoopBackBurstConfigParams.BPMTx2On = p18;
            m_LoopBackBurstConfigParams.IQMM = digitalCorrDisable;
            m_LoopBackBurstConfigParams.RxGainPhase = digCorrRxGainPhase;
            m_LoopBackBurstConfigParams.IFLoopBackFreq = ifLoopBackFreq;
            m_LoopBackBurstConfigParams.IFLoopBackMagnitude = iflLoopBackMag;
            m_LoopBackBurstConfigParams.f000027 = ps1PGAGainIndex;
            m_LoopBackBurstConfigParams.f000028 = ps2PGAGainIndex;
            m_LoopBackBurstConfigParams.PALoopBackFreq = (ushort)paLoopBackFreq;
            m_LoopBackBurstConfigParams.Tx1PSLoopBackFreq = (ushort)psTx0LoopBackFreq;
            m_LoopBackBurstConfigParams.Tx2PSLoopBackFreq = (ushort)psTx1LoopBackFreq;
            ScriptOps.m_MainForm.AdvanceFrameConfigTab.UpdateLoopBackBurstConfigDataFrmCmd();
            return result;
        }

        public int UpdateAnalogMonEnableConfigData(byte temperatureMonEna, byte rxGainPhaseMonEna, byte rxNoiseMonEna, byte rxIFStageMonEna, byte tx0PowerMonEna, byte tx1PowerMonEna, byte tx2PowerMonEna, byte tx0BallBreakMonEna, byte tx1BallBreakMonEna, byte tx2BallBreakMonEna, byte txGainPhaseMonEna, byte tx0BPMMonEna, byte tx1BPMMonEna, byte tx2BPMMonEna, byte synthFreqMonEna, byte externalAnalogSignalsMonEna, byte internalTX0SignalsMonEna, byte internalTX1SignalsMonEna, byte internalTX2SignalsMonEna, byte internalRXSignalsMonEna, byte p20, byte internalGPADCSignalsMonEna, byte pllControlVolMonEna, byte dccClockFreqMonEna, byte rxIFASaturationMonEna, byte rxSigImgBandMonEna, byte rxMixerInputPowerMonEna, byte reservedMonEna)
        {
            int result = 0;
            ScriptOps.m_MainForm.m_AnalogMonConfig.UpdateMonitoringRFEnablesConfigData();
            m_MonRFEnablesConfigParameters.TemperatureMon = (char)temperatureMonEna;
            m_MonRFEnablesConfigParameters.RxGainPhase = (char)rxGainPhaseMonEna;
            m_MonRFEnablesConfigParameters.RxNoise = (char)rxNoiseMonEna;
            m_MonRFEnablesConfigParameters.RxIFStage = (char)rxIFStageMonEna;
            m_MonRFEnablesConfigParameters.Tx1Power = (char)tx0PowerMonEna;
            m_MonRFEnablesConfigParameters.Tx2Power = (char)tx1PowerMonEna;
            m_MonRFEnablesConfigParameters.Tx3Power = (char)tx2PowerMonEna;
            m_MonRFEnablesConfigParameters.Tx1BallBreak = (char)tx0BallBreakMonEna;
            m_MonRFEnablesConfigParameters.Tx2BallBreak = (char)tx1BallBreakMonEna;
            m_MonRFEnablesConfigParameters.Tx3BallBreak = (char)tx2BallBreakMonEna;
            m_MonRFEnablesConfigParameters.TxGainPhase = (char)txGainPhaseMonEna;
            m_MonRFEnablesConfigParameters.Tx1BPM = (char)tx0BPMMonEna;
            m_MonRFEnablesConfigParameters.Tx2BPM = (char)tx1BPMMonEna;
            m_MonRFEnablesConfigParameters.Tx3BPM = (char)tx2BPMMonEna;
            m_MonRFEnablesConfigParameters.SynthFrequency = (char)synthFreqMonEna;
            m_MonRFEnablesConfigParameters.ExternalAnalogSignals = (char)externalAnalogSignalsMonEna;
            m_MonRFEnablesConfigParameters.InternalTX1Signals = (char)internalTX0SignalsMonEna;
            m_MonRFEnablesConfigParameters.InternalTX2Signals = (char)internalTX1SignalsMonEna;
            m_MonRFEnablesConfigParameters.InternalTX3Signals = (char)internalTX2SignalsMonEna;
            m_MonRFEnablesConfigParameters.InternalRXSignal = (char)internalRXSignalsMonEna;
            m_MonRFEnablesConfigParameters.f0002fe = (char)p20;
            m_MonRFEnablesConfigParameters.f0002ff = (char)internalGPADCSignalsMonEna;
            m_MonRFEnablesConfigParameters.PLLControlVoltage = (char)pllControlVolMonEna;
            m_MonRFEnablesConfigParameters.DCCClockFreq = (char)dccClockFreqMonEna;
            m_MonRFEnablesConfigParameters.f000300 = (char)rxIFASaturationMonEna;
            m_MonRFEnablesConfigParameters.RxSigImgBand = (char)rxSigImgBandMonEna;
            m_MonRFEnablesConfigParameters.RxMixerInputPower = (char)rxMixerInputPowerMonEna;
            m_MonRFEnablesConfigParameters.Reserved = (char)reservedMonEna;
            ScriptOps.m_MainForm.m_AnalogMonConfig.UpdateMonitoringRFEnablesConfigDataFrmCmdSrc();
            return result;
        }

        public int UpdateTx0BallBreakConfigData(byte tx0BallBreakMonReportingMode, double tx0ReflCoeffMagThreshold)
        {
            int result = 0;
            ScriptOps.m_MainForm.m_AnalogMonConfig.UpdateTX1BallBreakMonConfigData();
            m_MonTx1BallBreakConfigParameters.ReportingMode = (char)tx0BallBreakMonReportingMode;
            m_MonTx1BallBreakConfigParameters.TXReflectionCoeffMagnitudeThreshold = tx0ReflCoeffMagThreshold;
            ScriptOps.m_MainForm.m_AnalogMonConfig.UpdateTX1BallBreakMonConfigDataFrmCmdSrc();
            return result;
        }

        public int UpdateTx1BallBreakConfigData(byte tx1BallBreakMonReportingMode, double tx1ReflCoeffMagThreshold)
        {
            int result = 0;
            ScriptOps.m_MainForm.m_AnalogMonConfig.UpdateTX2BallBreakMonConfigData();
            m_MonTx2BallBreakConfigParameters.ReportingMode = (char)tx1BallBreakMonReportingMode;
            m_MonTx2BallBreakConfigParameters.TXReflectionCoeffMagnitudeThreshold = tx1ReflCoeffMagThreshold;
            ScriptOps.m_MainForm.m_AnalogMonConfig.UpdateTX2BallBreakMonConfigDataFrmCmdSrc();
            return result;
        }

        public int UpdateTx2BallBreakConfigData(byte tx2BallBreakMonReportingMode, double tx2ReflCoeffMagThreshold)
        {
            int result = 0;
            ScriptOps.m_MainForm.m_AnalogMonConfig.UpdateTX3BallBreakMonConfigData();
            m_MonTx3BallBreakConfigParameters.ReportingMode = (char)tx2BallBreakMonReportingMode;
            m_MonTx3BallBreakConfigParameters.TXReflectionCoeffMagnitudeThreshold = tx2ReflCoeffMagThreshold;
            ScriptOps.m_MainForm.m_AnalogMonConfig.UpdateTX3BallBreakMonConfigDataFrmCmdSrc();
            return result;
        }

        public int UpdateTx0PowerMonConfigData(byte tx0PwrMonProfileIndex, byte tx0PowerRF1, byte tx0PowerRF2, byte tx0PowerRF3, byte tx0PowerReportingMode, double tx0PwAbsErrThreshold, double tx0PwFlatnessThreshold)
        {
            int result = 0;
            ScriptOps.m_MainForm.m_AnalogMonConfig.UpdateTX1PowerMonConfigData();
            m_MonTX1PowerConfigParameters.ProfileIndex = (char)tx0PwrMonProfileIndex;
            m_MonTX1PowerConfigParameters.RF1FreqBitMask = (char)tx0PowerRF1;
            m_MonTX1PowerConfigParameters.RF2FreqBitMask = (char)tx0PowerRF2;
            m_MonTX1PowerConfigParameters.RF3FreqBitMask = (char)tx0PowerRF3;
            m_MonTX1PowerConfigParameters.ReportingMode = (char)tx0PowerReportingMode;
            m_MonTX1PowerConfigParameters.TxPowerAbsoluteErrorThreshold = tx0PwAbsErrThreshold;
            m_MonTX1PowerConfigParameters.TxPowerFlatnessErrorThreshold = tx0PwFlatnessThreshold;
            ScriptOps.m_MainForm.m_AnalogMonConfig.UpdateTX1PowerMonConfigDataFrmCmdSrc();
            return result;
        }

        public int UpdateTx1PowerMonConfigData(byte tx1PwrMonProfileIndex, byte tx1PowerRF1, byte tx1PowerRF2, byte tx1PowerRF3, byte tx1PowerReportingMode, double tx1PwAbsErrThreshold, double tx1PwFlatnessThreshold)
        {
            int result = 0;
            ScriptOps.m_MainForm.m_AnalogMonConfig.UpdateTX2PowerMonConfigData();
            m_MonTX2PowerConfigParameters.ProfileIndex = (char)tx1PwrMonProfileIndex;
            m_MonTX2PowerConfigParameters.RF1FreqBitMask = (char)tx1PowerRF1;
            m_MonTX2PowerConfigParameters.RF2FreqBitMask = (char)tx1PowerRF2;
            m_MonTX2PowerConfigParameters.RF3FreqBitMask = (char)tx1PowerRF3;
            m_MonTX2PowerConfigParameters.ReportingMode = (char)tx1PowerReportingMode;
            m_MonTX2PowerConfigParameters.TxPowerAbsoluteErrorThreshold = tx1PwAbsErrThreshold;
            m_MonTX2PowerConfigParameters.TxPowerFlatnessErrorThreshold = tx1PwFlatnessThreshold;
            ScriptOps.m_MainForm.m_AnalogMonConfig.UpdateTX2PowerMonConfigDataFrmCmdSrc();
            return result;
        }

        public int UpdateTx2PowerMonConfigData(byte tx2PwrMonProfileIndex, byte tx2PowerRF1, byte tx2PowerRF2, byte tx2PowerRF3, byte tx2PowerReportingMode, double tx2PwAbsErrThreshold, double tx2PwFlatnessThreshold)
        {
            int result = 0;
            ScriptOps.m_MainForm.m_AnalogMonConfig.UpdateTX3PowerMonConfigData();
            m_MonTX3PowerConfigParameters.ProfileIndex = (char)tx2PwrMonProfileIndex;
            m_MonTX3PowerConfigParameters.RF1FreqBitMask = (char)tx2PowerRF1;
            m_MonTX3PowerConfigParameters.RF2FreqBitMask = (char)tx2PowerRF2;
            m_MonTX3PowerConfigParameters.RF3FreqBitMask = (char)tx2PowerRF3;
            m_MonTX3PowerConfigParameters.ReportingMode = (char)tx2PowerReportingMode;
            m_MonTX3PowerConfigParameters.TxPowerAbsoluteErrorThreshold = tx2PwAbsErrThreshold;
            m_MonTX3PowerConfigParameters.TxPowerFlatnessErrorThreshold = tx2PwFlatnessThreshold;
            ScriptOps.m_MainForm.m_AnalogMonConfig.UpdateTX3PowerMonConfigDataFrmCmdSrc();
            return result;
        }

        public int UpdateTx0BPMMonConfigData(byte tx0BPMPhaseMonProfileIndex, byte tx0BPMPhaseMonReportMode, byte tx0BPMMonRx0, byte tx0BPMMonRx1, byte tx0BPMMonRx2, byte tx0BPMMonRx3, double tx0BPMPhaseMonErrorThreshold, double tx0BPMAmplitudeMonErrorThreshold)
        {
            int result = 0;
            ScriptOps.m_MainForm.m_AnalogMonConfig.UpdateTX1BPMPhaseMonConfigData();
            m_MonTx1BPMPhaseConfigParameters.ProfileIndex = tx0BPMPhaseMonProfileIndex;
            m_MonTx1BPMPhaseConfigParameters.ReportingMode = tx0BPMPhaseMonReportMode;
            m_MonTx1BPMPhaseConfigParameters.Rx0Channel = tx0BPMMonRx0;
            m_MonTx1BPMPhaseConfigParameters.Rx1Channel = tx0BPMMonRx1;
            m_MonTx1BPMPhaseConfigParameters.Rx2Channel = tx0BPMMonRx2;
            m_MonTx1BPMPhaseConfigParameters.Rx3Channel = tx0BPMMonRx3;
            m_MonTx1BPMPhaseConfigParameters.TxBPMPhaseErrorThreshold = tx0BPMPhaseMonErrorThreshold;
            m_MonTx1BPMPhaseConfigParameters.TxBPMAmplitudeErrorThreshold = tx0BPMAmplitudeMonErrorThreshold;
            ScriptOps.m_MainForm.m_AnalogMonConfig.m000006();
            return result;
        }

        public int UpdateTx1BPMMonConfigData(byte tx0BPMPhaseMonProfileIndex, byte tx0BPMPhaseMonReportMode, byte tx0BPMMonRx0, byte tx0BPMMonRx1, byte tx0BPMMonRx2, byte tx0BPMMonRx3, double tx0BPMPhaseMonErrorThreshold, double tx0BPMAmplitudeMonErrorThreshold)
        {
            int result = 0;
            ScriptOps.m_MainForm.m_AnalogMonConfig.UpdateTX2BPMPhaseMonConfigData();
            m_MonTx2BPMPhaseConfigParameters.ProfileIndex = tx0BPMPhaseMonProfileIndex;
            m_MonTx2BPMPhaseConfigParameters.ReportingMode = tx0BPMPhaseMonReportMode;
            m_MonTx2BPMPhaseConfigParameters.Rx0Channel = tx0BPMMonRx0;
            m_MonTx2BPMPhaseConfigParameters.Rx1Channel = tx0BPMMonRx1;
            m_MonTx2BPMPhaseConfigParameters.Rx2Channel = tx0BPMMonRx2;
            m_MonTx2BPMPhaseConfigParameters.Rx3Channel = tx0BPMMonRx3;
            m_MonTx2BPMPhaseConfigParameters.TxBPMPhaseErrorThreshold = tx0BPMPhaseMonErrorThreshold;
            m_MonTx2BPMPhaseConfigParameters.TxBPMAmplitudeErrorThreshold = tx0BPMAmplitudeMonErrorThreshold;
            ScriptOps.m_MainForm.m_AnalogMonConfig.m000008();
            return result;
        }

        public int UpdateTx2BPMMonConfigData(byte tx0BPMPhaseMonProfileIndex, byte tx0BPMPhaseMonReportMode, byte tx0BPMMonRx0, byte tx0BPMMonRx1, byte tx0BPMMonRx2, byte tx0BPMMonRx3, double tx0BPMPhaseMonErrorThreshold, double tx0BPMAmplitudeMonErrorThreshold)
        {
            int result = 0;
            ScriptOps.m_MainForm.m_AnalogMonConfig.UpdateTX3BPMPhaseMonConfigData();
            m_MonTx3BPMPhaseConfigParameters.ProfileIndex = tx0BPMPhaseMonProfileIndex;
            m_MonTx3BPMPhaseConfigParameters.ReportingMode = tx0BPMPhaseMonReportMode;
            m_MonTx3BPMPhaseConfigParameters.Rx0Channel = tx0BPMMonRx0;
            m_MonTx3BPMPhaseConfigParameters.Rx1Channel = tx0BPMMonRx1;
            m_MonTx3BPMPhaseConfigParameters.Rx2Channel = tx0BPMMonRx2;
            m_MonTx3BPMPhaseConfigParameters.Rx3Channel = tx0BPMMonRx3;
            m_MonTx3BPMPhaseConfigParameters.TxBPMPhaseErrorThreshold = tx0BPMPhaseMonErrorThreshold;
            m_MonTx3BPMPhaseConfigParameters.TxBPMAmplitudeErrorThreshold = tx0BPMAmplitudeMonErrorThreshold;
            ScriptOps.m_MainForm.m_AnalogMonConfig.m00000a();
            return result;
        }

        public int UpdateTxGainPhaseMismtchMonConfigData(byte txGainPhaseMismacthMonProfileIndex, byte txGainPhaseMismacthMonReportingMode, byte rf1TXGainPhaseMismatchMonBitMask, byte rf2TXGainPhaseMismatchMonBitMask, byte rf3TXGainPhaseMismatchMonBitMask, byte tx0GainPhaseMismatchMon, byte tx1GainPhaseMismatchMon, byte tx2GainPhaseMismatchMon, byte txGainPhaseMismatchMonRx0, byte txGainPhaseMismatchMonRx1, byte txGainPhaseMismatchMonRx2, byte txGainPhaseMismatchMonRx3, double txGainPhaseMismacthMonTxGainMismatchThreshold, double txGainPhaseMismacthMonTxPhaseMismatchThreshold, double rf1TX0TXGainPhaseMismatchOffVal, double rf2TX0TXGainPhaseMismatchOffVal, double rf3TX0TXGainPhaseMismatchOffVal, double rf1TX1TXGainPhaseMismatchOffVal, double rf2TX1TXGainPhaseMismatchOffVal, double rf3TX1TXGainPhaseMismatchOffVal, double rf1TX2TXGainPhaseMismatchOffVal, double rf2TX2TXGainPhaseMismatchOffVal, double rf3TX2TXGainPhaseMismatchOffVal, double rf1TX0TXPhaseMismatchOffVal, double rf2TX0TXPhaseMismatchOffVal, double rf3TX0TXPhaseMismatchOffVal, double rf1TX1TXPhaseMismatchOffVal, double rf2TX1TXPhaseMismatchOffVal, double rf3TX1TXPhaseMismatchOffVal, double rf1TX2TXPhaseMismatchOffVal, double rf2TX2TXPhaseMismatchOffVal, double rf3TX2TXPhaseMismatchOffVal)
        {
            int result = 0;
            ScriptOps.m_MainForm.m_AnalogMonConfig.UpdateTXGainPhaseMismatchMonConfigData();
            m_MonTxGainPhaseMismatchConfigParameters.ProfileIndex = (char)txGainPhaseMismacthMonProfileIndex;
            m_MonTxGainPhaseMismatchConfigParameters.RF1FreqBitMask = (char)rf1TXGainPhaseMismatchMonBitMask;
            m_MonTxGainPhaseMismatchConfigParameters.RF2FreqBitMask = (char)rf2TXGainPhaseMismatchMonBitMask;
            m_MonTxGainPhaseMismatchConfigParameters.RF3FreqBitMask = (char)rf3TXGainPhaseMismatchMonBitMask;
            m_MonTxGainPhaseMismatchConfigParameters.Tx1Channel = (char)tx0GainPhaseMismatchMon;
            m_MonTxGainPhaseMismatchConfigParameters.Tx2Channel = (char)tx1GainPhaseMismatchMon;
            m_MonTxGainPhaseMismatchConfigParameters.Tx3Channel = (char)tx2GainPhaseMismatchMon;
            m_MonTxGainPhaseMismatchConfigParameters.Rx0Channel = (char)txGainPhaseMismatchMonRx0;
            m_MonTxGainPhaseMismatchConfigParameters.Rx1Channel = (char)txGainPhaseMismatchMonRx1;
            m_MonTxGainPhaseMismatchConfigParameters.Rx2Channel = (char)txGainPhaseMismatchMonRx2;
            m_MonTxGainPhaseMismatchConfigParameters.Rx3Channel = (char)txGainPhaseMismatchMonRx3;
            m_MonTxGainPhaseMismatchConfigParameters.ReportingMode = (char)txGainPhaseMismacthMonReportingMode;
            m_MonTxGainPhaseMismatchConfigParameters.TxGainMismatchThreshold = txGainPhaseMismacthMonTxGainMismatchThreshold;
            m_MonTxGainPhaseMismatchConfigParameters.TxPhaseMismatchThreshold = txGainPhaseMismacthMonTxPhaseMismatchThreshold;
            m_MonTxGainPhaseMismatchConfigParameters.RF1Tx1GainMismatchOffsetVal = rf1TX0TXGainPhaseMismatchOffVal;
            m_MonTxGainPhaseMismatchConfigParameters.RF1Tx2GainMismatchOffsetVal = rf1TX1TXGainPhaseMismatchOffVal;
            m_MonTxGainPhaseMismatchConfigParameters.RF1Tx3GainMismatchOffsetVal = rf1TX2TXGainPhaseMismatchOffVal;
            m_MonTxGainPhaseMismatchConfigParameters.RF2Tx1GainMismatchOffsetVal = rf2TX0TXGainPhaseMismatchOffVal;
            m_MonTxGainPhaseMismatchConfigParameters.RF2Tx2GainMismatchOffsetVal = rf2TX1TXGainPhaseMismatchOffVal;
            m_MonTxGainPhaseMismatchConfigParameters.RF2Tx3GainMismatchOffsetVal = rf2TX2TXGainPhaseMismatchOffVal;
            m_MonTxGainPhaseMismatchConfigParameters.RF3Tx1GainMismatchOffsetVal = rf3TX0TXGainPhaseMismatchOffVal;
            m_MonTxGainPhaseMismatchConfigParameters.RF3Tx2GainMismatchOffsetVal = rf3TX1TXGainPhaseMismatchOffVal;
            m_MonTxGainPhaseMismatchConfigParameters.RF3Tx3GainMismatchOffsetVal = rf3TX2TXGainPhaseMismatchOffVal;
            m_MonTxGainPhaseMismatchConfigParameters.RF1Tx1PhaseMismatchOffsetVal = rf1TX0TXPhaseMismatchOffVal;
            m_MonTxGainPhaseMismatchConfigParameters.RF1Tx2PhaseMismatchOffsetVal = rf1TX1TXPhaseMismatchOffVal;
            m_MonTxGainPhaseMismatchConfigParameters.RF1Tx3PhaseMismatchOffsetVal = rf1TX2TXPhaseMismatchOffVal;
            m_MonTxGainPhaseMismatchConfigParameters.RF2Tx1PhaseMismatchOffsetVal = rf2TX0TXPhaseMismatchOffVal;
            m_MonTxGainPhaseMismatchConfigParameters.RF2Tx2PhaseMismatchOffsetVal = rf2TX1TXPhaseMismatchOffVal;
            m_MonTxGainPhaseMismatchConfigParameters.RF2Tx3PhaseMismatchOffsetVal = rf2TX2TXPhaseMismatchOffVal;
            m_MonTxGainPhaseMismatchConfigParameters.RF3Tx1PhaseMismatchOffsetVal = rf3TX0TXPhaseMismatchOffVal;
            m_MonTxGainPhaseMismatchConfigParameters.RF3Tx2PhaseMismatchOffsetVal = rf3TX1TXPhaseMismatchOffVal;
            m_MonTxGainPhaseMismatchConfigParameters.RF3Tx3PhaseMismatchOffsetVal = rf3TX2TXPhaseMismatchOffVal;
            ScriptOps.m_MainForm.m_AnalogMonConfig.UpdateTXGainPhaseMismatchMonConfigDataFrmCmdSrc();
            return result;
        }

        public int UpdateNAnalogFaultInjectionConfigData(byte rxGainDropRx0, byte rxGainDropRx1, byte rxGainDropRx2, byte rxGainDropRx3, byte rxPhaseInvRx0, byte rxPhaseInvRx1, byte rxPhaseInvRx2, byte rxPhaseInvRx3, byte rxHighNoiseRx0, byte rxHighNoiseRx1, byte rxHighNoiseRx2, byte rxHighNoiseRx3, byte rxIFStageRx0, byte rxIFStageRx1, byte rxIFStageRx2, byte rxIFStageRx3, byte rxLOAmpRx0Rx1, byte rxLOAmpRx2Rx3, byte txLOAmpTx0Tx1, byte txLOAmpTx2, byte txGainDropTx0, byte txGainDropTx1, byte txGainDropTx2, byte txGainInvTx0BPMVal, byte txGainInvTx1BPMVal, byte txGainInvTx2BPMVal, byte txGainInvTxFault, byte synthVCOOpenLoop, byte synthFreqMonOffset, byte ldoRxLODistFault, byte gpadcClkFreqFault, byte gpadcIntSigMon, byte extAnaSigMon)
        {
            int result = 0;
            ScriptOps.m_MainForm.m_AnalogMonConfig.UpdateAnalogFaultInjectionConfigData();
            m_AnalogFaultInjectionConfigParameters.RxGainDropRx1 = rxGainDropRx0;
            m_AnalogFaultInjectionConfigParameters.RxGainDropRx2 = rxGainDropRx1;
            m_AnalogFaultInjectionConfigParameters.RxGainDropRx3 = rxGainDropRx2;
            m_AnalogFaultInjectionConfigParameters.RxGainDropRx4 = rxGainDropRx3;
            m_AnalogFaultInjectionConfigParameters.RxPhaseInvRx1 = rxPhaseInvRx0;
            m_AnalogFaultInjectionConfigParameters.RxPhaseInvRx2 = rxPhaseInvRx1;
            m_AnalogFaultInjectionConfigParameters.RxPhaseInvRx3 = rxPhaseInvRx2;
            m_AnalogFaultInjectionConfigParameters.RxPhaseInvRx4 = rxPhaseInvRx3;
            m_AnalogFaultInjectionConfigParameters.RxHighNoiseRx1 = rxHighNoiseRx0;
            m_AnalogFaultInjectionConfigParameters.RxHighNoiseRx2 = rxHighNoiseRx1;
            m_AnalogFaultInjectionConfigParameters.RxHighNoiseRx3 = rxHighNoiseRx2;
            m_AnalogFaultInjectionConfigParameters.RxHighNoiseRx4 = rxHighNoiseRx3;
            m_AnalogFaultInjectionConfigParameters.RxIFStageRx1 = rxIFStageRx0;
            m_AnalogFaultInjectionConfigParameters.RxIFStageRx2 = rxIFStageRx1;
            m_AnalogFaultInjectionConfigParameters.RxIFStageRx3 = rxIFStageRx2;
            m_AnalogFaultInjectionConfigParameters.RxIFStageRx4 = rxIFStageRx3;
            m_AnalogFaultInjectionConfigParameters.RxLOAmpRx1Rx2 = rxLOAmpRx0Rx1;
            m_AnalogFaultInjectionConfigParameters.RxLOAmpRx3Rx4 = rxLOAmpRx2Rx3;
            m_AnalogFaultInjectionConfigParameters.TxLOAmpTx1Tx2 = txLOAmpTx0Tx1;
            m_AnalogFaultInjectionConfigParameters.TxLOAmpTx3 = txLOAmpTx2;
            m_AnalogFaultInjectionConfigParameters.TxGainDropTx1 = txGainDropTx0;
            m_AnalogFaultInjectionConfigParameters.TxGainDropTx2 = txGainDropTx1;
            m_AnalogFaultInjectionConfigParameters.TxGainDropTx3 = txGainDropTx2;
            m_AnalogFaultInjectionConfigParameters.TxPhaseInvTxFault = txGainInvTxFault;
            m_AnalogFaultInjectionConfigParameters.TxPhaseInvBPMTx1Fault = txGainInvTx0BPMVal;
            m_AnalogFaultInjectionConfigParameters.TxPhaseInvBPMTx2Fault = txGainInvTx1BPMVal;
            m_AnalogFaultInjectionConfigParameters.TxPhaseInvBPMTx3Fault = txGainInvTx2BPMVal;
            m_AnalogFaultInjectionConfigParameters.SynthVCOOpenFault = synthVCOOpenLoop;
            m_AnalogFaultInjectionConfigParameters.SynthFreqMonOffset = synthFreqMonOffset;
            m_AnalogFaultInjectionConfigParameters.f000319 = ldoRxLODistFault;
            m_AnalogFaultInjectionConfigParameters.f00031a = gpadcClkFreqFault;
            m_AnalogFaultInjectionConfigParameters.f00031b = gpadcIntSigMon;
            ScriptOps.m_MainForm.m_AnalogMonConfig.UpdateAnalogFaultInjectionConfigDataFrmCmdSrc();
            return result;
        }

        public int UpdateNRxGainPhaseMonConfigData(byte rxGainPhaseMonProfileIndex, byte rf1RXGainPhaseMonBitMask, byte rf2RXGainPhaseMonBitMask, byte rf3RXGainPhaseMonBitMask, byte rxGainPhaseReprotingMode, double rxGainPhaseAbsErrThreshold, double rxGainMismatchThresholds, double rxGainFlatnessErrThreshold, double rxPhaseMismatchThreshold, byte rxGainPhaseMonTxSelect, double rf1RX0RXGainMismatchOffVal, double rf1RX1RXGainMismatchOffVal, double rf1RX2RXGainMismatchOffVal, double rf1RX3RXGainMismatchOffVal, double rf2RX0RXGainMismatchOffVal, double rf2RX1RXGainMismatchOffVal, double rf2RX2RXGainMismatchOffVal, double rf2RX3RXGainMismatchOffVal, double rf3RX0RXGainMismatchOffVal, double rf3RX1RXGainMismatchOffVal, double rf3RX2RXGainMismatchOffVal, double rf3RX3RXGainMismatchOffVal, double rf1RX0RXPhaseMismatchOffVal, double rf1RX1RXPhaseMismatchOffVal, double rf1RX2RXPhaseMismatchOffVal, double rf1RX3RXPhaseMismatchOffVal, double rf2RX0RXPhaseMismatchOffVal, double rf2RX1RXPhaseMismatchOffVal, double rf2RX2RXPhaseMismatchOffVal, double rf2RX3RXPhaseMismatchOffVal, double rf3RX0RXPhaseMismatchOffVal, double rf3RX1RXPhaseMismatchOffVal, double rf3RX2RXPhaseMismatchOffVal, double rf3RX3RXPhaseMismatchOffVal)
        {
            int result = 0;
            ScriptOps.m_MainForm.m_AnalogMon2Config.UpdateRxGainPhaseMonConfigData();
            m_MonRXGainPhaseConfigParameters.ProfileIndex = (char)rxGainPhaseMonProfileIndex;
            m_MonRXGainPhaseConfigParameters.RF1FreqBitMask = (char)rf1RXGainPhaseMonBitMask;
            m_MonRXGainPhaseConfigParameters.RF2FreqBitMask = (char)rf2RXGainPhaseMonBitMask;
            m_MonRXGainPhaseConfigParameters.RF3FreqBitMask = (char)rf3RXGainPhaseMonBitMask;
            m_MonRXGainPhaseConfigParameters.ReportingMode = (char)rxGainPhaseReprotingMode;
            m_MonRXGainPhaseConfigParameters.TxSelect = (char)rxGainPhaseMonTxSelect;
            m_MonRXGainPhaseConfigParameters.RxGainAbsoluteErrorThreshold = rxGainPhaseAbsErrThreshold;
            m_MonRXGainPhaseConfigParameters.RxGainMismatchThreshold = rxGainMismatchThresholds;
            m_MonRXGainPhaseConfigParameters.RxGainFlatnessErrorThreshold = rxGainFlatnessErrThreshold;
            m_MonRXGainPhaseConfigParameters.RxPhaseMismatchThreshold = (ushort)rxPhaseMismatchThreshold;
            m_MonRXGainPhaseConfigParameters.f000301 = rf1RX0RXGainMismatchOffVal;
            m_MonRXGainPhaseConfigParameters.f000302 = rf1RX1RXGainMismatchOffVal;
            m_MonRXGainPhaseConfigParameters.f000303 = rf1RX2RXGainMismatchOffVal;
            m_MonRXGainPhaseConfigParameters.f000304 = rf1RX3RXGainMismatchOffVal;
            m_MonRXGainPhaseConfigParameters.f000305 = rf2RX0RXGainMismatchOffVal;
            m_MonRXGainPhaseConfigParameters.f000306 = rf2RX1RXGainMismatchOffVal;
            m_MonRXGainPhaseConfigParameters.f000307 = rf2RX2RXGainMismatchOffVal;
            m_MonRXGainPhaseConfigParameters.f000308 = rf2RX3RXGainMismatchOffVal;
            m_MonRXGainPhaseConfigParameters.f000309 = rf3RX0RXGainMismatchOffVal;
            m_MonRXGainPhaseConfigParameters.f00030a = rf3RX1RXGainMismatchOffVal;
            m_MonRXGainPhaseConfigParameters.f00030b = rf3RX2RXGainMismatchOffVal;
            m_MonRXGainPhaseConfigParameters.f00030c = rf3RX3RXGainMismatchOffVal;
            m_MonRXGainPhaseConfigParameters.f00030d = rf1RX0RXPhaseMismatchOffVal;
            m_MonRXGainPhaseConfigParameters.f00030e = rf1RX1RXPhaseMismatchOffVal;
            m_MonRXGainPhaseConfigParameters.f00030f = rf1RX2RXPhaseMismatchOffVal;
            m_MonRXGainPhaseConfigParameters.f000310 = rf1RX3RXPhaseMismatchOffVal;
            m_MonRXGainPhaseConfigParameters.f000311 = rf2RX0RXPhaseMismatchOffVal;
            m_MonRXGainPhaseConfigParameters.f000312 = rf2RX1RXPhaseMismatchOffVal;
            m_MonRXGainPhaseConfigParameters.f000313 = rf2RX2RXPhaseMismatchOffVal;
            m_MonRXGainPhaseConfigParameters.f000314 = rf2RX3RXPhaseMismatchOffVal;
            m_MonRXGainPhaseConfigParameters.f000315 = rf3RX0RXPhaseMismatchOffVal;
            m_MonRXGainPhaseConfigParameters.f000316 = rf3RX1RXPhaseMismatchOffVal;
            m_MonRXGainPhaseConfigParameters.f000317 = rf3RX2RXPhaseMismatchOffVal;
            m_MonRXGainPhaseConfigParameters.f000318 = rf3RX3RXPhaseMismatchOffVal;
            ScriptOps.m_MainForm.m_AnalogMon2Config.UpdateRxGainPhaseMonConfigDataFrmCmdSrc();
            return result;
        }

        public int UpdateNRxNoiseFigureMonConfigData(byte rxNoiseMonProfileIndex, byte rf1RXNoiseMon, byte rf2RXNoiseMon, byte rf3RXNoiseMon, byte rxNoiseFigureReportingMode, double rxNoiseFigureThreshold)
        {
            int result = 0;
            ScriptOps.m_MainForm.m_AnalogMon2Config.UpdateRXNoiseFigureMonConfigData();
            m_MonRXNoiseFigureConfigParameters.ProfileIndex = (char)rxNoiseMonProfileIndex;
            m_MonRXNoiseFigureConfigParameters.RF1FreqBitMask = (char)rf1RXNoiseMon;
            m_MonRXNoiseFigureConfigParameters.RF2FreqBitMask = (char)rf2RXNoiseMon;
            m_MonRXNoiseFigureConfigParameters.RF3FreqBitMask = (char)rf3RXNoiseMon;
            m_MonRXNoiseFigureConfigParameters.ReportingMode = (char)rxNoiseFigureReportingMode;
            m_MonRXNoiseFigureConfigParameters.RXNoiseFigureThreshold = rxNoiseFigureThreshold;
            ScriptOps.m_MainForm.m_AnalogMon2Config.UpdateRXNoiseFigureMonConfigDataFrmCmdSrc();
            return result;
        }

        public int UpdateNRxIFStageMonConfigData(byte rxIFStageMonProfileIndex, byte rxIFStageReportingMode, ushort rxIFStageHPFCuttoffFreqErrThreshold, ushort rxIFStageLPFCuttoffFreqErrThreshold, double p4)
        {
            int result = 0;
            ScriptOps.m_MainForm.m_AnalogMon2Config.UpdateRXIFStageMonConfigData();
            m_MonRXIFStageConfigParameters.ProfileIndex = (char)rxIFStageMonProfileIndex;
            m_MonRXIFStageConfigParameters.ReportingMode = (char)rxIFStageReportingMode;
            m_MonRXIFStageConfigParameters.HPFCutofFreqErrorThreshold = rxIFStageHPFCuttoffFreqErrThreshold;
            m_MonRXIFStageConfigParameters.LPFCutofFreqErrorThreshold = rxIFStageLPFCuttoffFreqErrThreshold;
            m_MonRXIFStageConfigParameters.IFAGainErrorThreshold = p4;
            ScriptOps.m_MainForm.m_AnalogMon2Config.UpdateRXIFStageMonConfigDataFrmCmdSrc();
            return result;
        }

        public int UpdateNRxSaturationDetectorMonConfigData(byte rxSatDetectorMonProfileIndex, double rxSatDetectorMonPriTimeSliceDuration, ushort rxSatDetectorMonSatMonNumSlice, byte rxSatDetectorSatMonSelect, byte rxSatDetectorMonSatMonRxChannelMask)
        {
            int result = 0;
            ScriptOps.m_MainForm.m_AnalogMon2Config.UpdateRXSaturationDetectorMonConfigData();
            m_MonRxSaturationDetectorConfigParameters.ProfileIndex = rxSatDetectorMonProfileIndex;
            m_MonRxSaturationDetectorConfigParameters.SatMonPrimaryTimeSliceDuration = rxSatDetectorMonPriTimeSliceDuration;
            m_MonRxSaturationDetectorConfigParameters.SatMonNumSlices = (short)rxSatDetectorMonSatMonNumSlice;
            m_MonRxSaturationDetectorConfigParameters.SatMonSelect = rxSatDetectorSatMonSelect;
            m_MonRxSaturationDetectorConfigParameters.SatMonRxChannelMask = rxSatDetectorMonSatMonRxChannelMask;
            ScriptOps.m_MainForm.m_AnalogMon2Config.UpdateRXSaturationDetectorMonConfigDataFrmCmdSrc();
            return result;
        }

        public int UpdateNRxSignalAndImageMonConfigData(byte sigImgMonProfileIndex, byte sigImgMonNumSlice, ushort sigImgMonPriTimeSliceNumSamples)
        {
            int result = 0;
            ScriptOps.m_MainForm.m_AnalogMon2Config.UpdateSignalandImageMonConfigData();
            m_MonSignalAndImageConfigParameters.ProfileIndex = (char)sigImgMonProfileIndex;
            m_MonSignalAndImageConfigParameters.SigImGMonPriTimeSliceNumSamples = (short)sigImgMonPriTimeSliceNumSamples;
            m_MonSignalAndImageConfigParameters.SigImGMonNumSlices = (char)sigImgMonNumSlice;
            ScriptOps.m_MainForm.m_AnalogMon2Config.UpdateSignalandImageMonConfigDataFrmCmdSrc();
            return result;
        }

        public int UpdateNRxMixerInputPowerMonConfigData(byte rxMixerIpPowMonReportingMode, byte rxMixerIpPowMonProfielIdnex, byte rxMixerIpPowMonTx0Ena, byte rxMixerIpPowMonTx1Ena, byte rxMixerIpPowMonTx2Ena, ushort rxMixerIpPowMonMinThresholds, ushort rxMixerIpPowMonMaxThresholds)
        {
            int result = 0;
            ScriptOps.m_MainForm.m_AnalogMon2Config.UpdateRxMixerInputPowerMonConfigData();
            m_MonRxMixerInputPowerConfigParameters.ReportingMode = (char)rxMixerIpPowMonReportingMode;
            m_MonRxMixerInputPowerConfigParameters.ProfileIndex = (char)rxMixerIpPowMonProfielIdnex;
            m_MonRxMixerInputPowerConfigParameters.Tx1Enable = (char)rxMixerIpPowMonTx0Ena;
            m_MonRxMixerInputPowerConfigParameters.Tx2Enable = (char)rxMixerIpPowMonTx1Ena;
            m_MonRxMixerInputPowerConfigParameters.Tx3Enable = (char)rxMixerIpPowMonTx2Ena;
            m_MonRxMixerInputPowerConfigParameters.MinThresholds = rxMixerIpPowMonMinThresholds;
            m_MonRxMixerInputPowerConfigParameters.MaxThresholds = rxMixerIpPowMonMaxThresholds;
            ScriptOps.m_MainForm.m_AnalogMon2Config.UpdateRxMixerInputPowerMonConfigDataFrmCmdSrc();
            return result;
        }

        public int UpdateNRxTemperatureMonConfigData(byte tempMonReportingMode, short tempMonAnaTempThreshMin, short tempMonAnaTempThreshMax, short tempMonDigTempThreshMin, short tempMonDigTempThreshMax, short tempMonTempDiffThresh)
        {
            int result = 0;
            ScriptOps.m_MainForm.m_AnalogMon2Config.UpdateTemperatureMonConfigData();
            m_MonTemperatureConfigParameters.ReportingMode = (char)tempMonReportingMode;
            m_MonTemperatureConfigParameters.AnaTempThreshMin = tempMonAnaTempThreshMin;
            m_MonTemperatureConfigParameters.AnaTempThreshMax = tempMonAnaTempThreshMax;
            m_MonTemperatureConfigParameters.DigTempThreshMin = tempMonDigTempThreshMin;
            m_MonTemperatureConfigParameters.DigTempThreshMax = tempMonDigTempThreshMax;
            m_MonTemperatureConfigParameters.TempDiffThresh = tempMonTempDiffThresh;
            ScriptOps.m_MainForm.m_AnalogMon2Config.UpdateTemperatureMonConfigDataFrmCmdSrc();
            return result;
        }

        public int UpdateNRxSynthFreqErrorMonConfigData(byte synthFrequencyProfileIndex, byte synthFrequencyMonReportingMode, ushort synthFrequencyMonFreqErrorThreshold, double synthFrequencyMonStartTime)
        {
            int result = 0;
            ScriptOps.m_MainForm.m_AnalogMon2Config.UpdateSynthFrequencyMonConfigData();
            m_MonSynthFrequencyConfigParameters.ProfileIndex = (char)synthFrequencyProfileIndex;
            m_MonSynthFrequencyConfigParameters.ReportingMode = (char)synthFrequencyMonReportingMode;
            m_MonSynthFrequencyConfigParameters.FreqErrorThreshold = synthFrequencyMonFreqErrorThreshold;
            m_MonSynthFrequencyConfigParameters.MonStartTime = synthFrequencyMonStartTime;
            ScriptOps.m_MainForm.m_AnalogMon2Config.UpdateSynthFrequencyMonConfigDataFrmCmdSrc();
            return result;
        }

        public int UpdateNRxExternalAnalogSignalMonConfigData(byte extAnalogSigMonReportingMode, byte extAnalogSigMonSigIPEnaAnaTest1, byte extAnalogSigMonSigIPEnaAnaTest2, byte extAnalogSigMonSigIPEnaAnaTest3, byte extAnalogSigMonSigIPEnaAnaTest4, byte extAnalogSigMonSigIPEnaAnaMux, byte extAnalogSigMonSigIPEnaVSense, byte extAnalogSigMonSigBufEnaAnaTest1, byte extAnalogSigMonSigBufEnaAnaTest2, byte extAnalogSigMonSigBufEnaAnaTest3, byte extAnalogSigMonSigBufEnaAnaTest4, byte extAnalogSigMonSigBufEnaAnaMux, double extAnalogSigMonSigSettlingTimeAnaTest1, double extAnalogSigMonSigSettlingTimeAnaTest2, double extAnalogSigMonSigSettlingTimeAnaTest3, double extAnalogSigMonSigSettlingTimeAnaTest4, double extAnalogSigMonSigSettlingTimeAnaMux, double extAnalogSigMonSigSettlingTimeAnaVSense, double extAnalogSigMonSigThresholdMinAnaTest1, double extAnalogSigMonSigThresholdMinAnaTest2, double extAnalogSigMonSigThresholdMinAnaTest3, double extAnalogSigMonSigThresholdMinAnaTest4, double extAnalogSigMonSigThresholdMinAnaMux, double extAnalogSigMonSigThresholdMinAnaVSense, double extAnalogSigMonSigThresholdMaxAnaTest1, double extAnalogSigMonSigThresholdMaxAnaTest2, double extAnalogSigMonSigThresholdMaxAnaTest3, double extAnalogSigMonSigThresholdMaxAnaTest4, double extAnalogSigMonSigThresholdMaxAnaMux, double extAnalogSigMonSigThresholdMaxAnaVSense)
        {
            int result = 0;
            ScriptOps.m_MainForm.f0001a7.UpdateExternalAnalogSignalsMonConfigData();
            m_MonExternalAnalogSignalConfigParameters.ReportingMode = (char)extAnalogSigMonReportingMode;
            m_MonExternalAnalogSignalConfigParameters.SigIpEnaAnalogTest1 = (char)extAnalogSigMonSigIPEnaAnaTest1;
            m_MonExternalAnalogSignalConfigParameters.SigIpEnaAnalogTest2 = (char)extAnalogSigMonSigIPEnaAnaTest2;
            m_MonExternalAnalogSignalConfigParameters.SigIpEnaAnalogTest3 = (char)extAnalogSigMonSigIPEnaAnaTest3;
            m_MonExternalAnalogSignalConfigParameters.SigIpEnaAnalogTest4 = (char)extAnalogSigMonSigIPEnaAnaTest4;
            m_MonExternalAnalogSignalConfigParameters.SigIpEnaAnalogMux = (char)extAnalogSigMonSigIPEnaAnaMux;
            m_MonExternalAnalogSignalConfigParameters.SigIpEnaAnalogVSense = (char)extAnalogSigMonSigIPEnaVSense;
            m_MonExternalAnalogSignalConfigParameters.SigBufEnaAnalogTest1 = (char)extAnalogSigMonSigBufEnaAnaTest1;
            m_MonExternalAnalogSignalConfigParameters.SigBufEnaAnalogTest2 = (char)extAnalogSigMonSigBufEnaAnaTest2;
            m_MonExternalAnalogSignalConfigParameters.SigBufEnaAnalogTest3 = (char)extAnalogSigMonSigBufEnaAnaTest3;
            m_MonExternalAnalogSignalConfigParameters.SigBufEnaAnalogTest4 = (char)extAnalogSigMonSigBufEnaAnaTest4;
            m_MonExternalAnalogSignalConfigParameters.SigBufEnaAnalogMux = (char)extAnalogSigMonSigBufEnaAnaMux;
            m_MonExternalAnalogSignalConfigParameters.SigSettlingTimeAnalogTest1 = extAnalogSigMonSigSettlingTimeAnaTest1;
            m_MonExternalAnalogSignalConfigParameters.SigSettlingTimeAnalogTest2 = extAnalogSigMonSigSettlingTimeAnaTest2;
            m_MonExternalAnalogSignalConfigParameters.SigSettlingTimeAnalogTest3 = extAnalogSigMonSigSettlingTimeAnaTest3;
            m_MonExternalAnalogSignalConfigParameters.SigSettlingTimeAnalogTest4 = extAnalogSigMonSigSettlingTimeAnaTest4;
            m_MonExternalAnalogSignalConfigParameters.SigSettlingTimeAnalogMux = extAnalogSigMonSigSettlingTimeAnaMux;
            m_MonExternalAnalogSignalConfigParameters.SigSettlingTimeAnalogVSense = extAnalogSigMonSigSettlingTimeAnaVSense;
            m_MonExternalAnalogSignalConfigParameters.SigMinThresholdAnalogTest1 = extAnalogSigMonSigThresholdMinAnaTest1;
            m_MonExternalAnalogSignalConfigParameters.SigMinThresholdAnalogTest2 = extAnalogSigMonSigThresholdMinAnaTest2;
            m_MonExternalAnalogSignalConfigParameters.SigMinThresholdAnalogTest3 = extAnalogSigMonSigThresholdMinAnaTest3;
            m_MonExternalAnalogSignalConfigParameters.SigMinThresholdAnalogTest4 = extAnalogSigMonSigThresholdMinAnaTest4;
            m_MonExternalAnalogSignalConfigParameters.SigMinThresholdAnalogMux = extAnalogSigMonSigThresholdMinAnaMux;
            m_MonExternalAnalogSignalConfigParameters.SigMinThresholdAnalogVSense = extAnalogSigMonSigThresholdMinAnaVSense;
            m_MonExternalAnalogSignalConfigParameters.SigMaxThresholdAnalogTest1 = extAnalogSigMonSigThresholdMaxAnaTest1;
            m_MonExternalAnalogSignalConfigParameters.SigMaxThresholdAnalogTest2 = extAnalogSigMonSigThresholdMaxAnaTest2;
            m_MonExternalAnalogSignalConfigParameters.SigMaxThresholdAnalogTest3 = extAnalogSigMonSigThresholdMaxAnaTest3;
            m_MonExternalAnalogSignalConfigParameters.SigMaxThresholdAnalogTest4 = extAnalogSigMonSigThresholdMaxAnaTest4;
            m_MonExternalAnalogSignalConfigParameters.SigMaxThresholdAnalogMux = extAnalogSigMonSigThresholdMaxAnaMux;
            m_MonExternalAnalogSignalConfigParameters.SigMaxThresholdAnalogVSense = extAnalogSigMonSigThresholdMaxAnaVSense;
            ScriptOps.m_MainForm.f0001a7.UpdateExternalAnalogSignalsMonConfigDataFrmCmdSrc();
            return result;
        }

        public int UpdateNTx0InternalAnalogSignalMonConfigData(byte txIntAnalogSigMonProfileIndex, byte txIntAnalogSigMonReportingMode)
        {
            int result = 0;
            ScriptOps.m_MainForm.f0001a7.UpdateTX1IntAnalogSigMonConfigData();
            m_MonInternalTx1AnalogSignalConfigParameters.ProfileIndex = (char)txIntAnalogSigMonProfileIndex;
            m_MonInternalTx1AnalogSignalConfigParameters.ReportingMode = (char)txIntAnalogSigMonReportingMode;
            ScriptOps.m_MainForm.f0001a7.UpdateTX1IntAnalogSigMonConfigDataFrmCmdSrc();
            return result;
        }

        public int UpdateNTx1InternalAnalogSignalMonConfigData(byte txIntAnalogSigMonProfileIndex, byte txIntAnalogSigMonReportingMode)
        {
            int result = 0;
            ScriptOps.m_MainForm.f0001a7.UpdateTX2IntAnalogSigMonConfigData();
            m_MonInternalTx2AnalogSignalConfigParameters.ProfileIndex = (char)txIntAnalogSigMonProfileIndex;
            m_MonInternalTx2AnalogSignalConfigParameters.ReportingMode = (char)txIntAnalogSigMonReportingMode;
            ScriptOps.m_MainForm.f0001a7.UpdateTX2IntAnalogSigMonConfigDataFrmCmdSrc();
            return result;
        }

        public int UpdateNTx2InternalAnalogSignalMonConfigData(byte txIntAnalogSigMonProfileIndex, byte txIntAnalogSigMonReportingMode)
        {
            int result = 0;
            ScriptOps.m_MainForm.f0001a7.UpdateTX3IntAnalogSigMonConfigData();
            m_MonInternalTx3AnalogSignalConfigParameters.ProfileIndex = (char)txIntAnalogSigMonProfileIndex;
            m_MonInternalTx3AnalogSignalConfigParameters.ReportingMode = (char)txIntAnalogSigMonReportingMode;
            ScriptOps.m_MainForm.f0001a7.UpdateTX3IntAnalogSigMonConfigDataFrmCmdSrc();
            return result;
        }

        public int UpdateNRxInternalAnalogSignalMonConfigData(byte rxIntAnalogSigMonProfileIndex, byte rxIntAnalogSigMonReportingMode)
        {
            int result = 0;
            ScriptOps.m_MainForm.f0001a7.UpdateRXIntAnalogSigMonConfigData();
            m_MonInternalRxAnalogSignalConfigParameters.ProfileIndex = (char)rxIntAnalogSigMonProfileIndex;
            m_MonInternalRxAnalogSignalConfigParameters.ReportingMode = (char)rxIntAnalogSigMonReportingMode;
            ScriptOps.m_MainForm.f0001a7.UpdateRXIntAnalogSigMonConfigDataFrmCmdSrc();
            return result;
        }

        public int UpdateNPMCLKLOInternalAnalogSignalMonConfigData(byte pmCLKLOIntAnalogSigMonProfileIndex, byte pmCLKLOIntAnalogSigMonReportingMode)
        {
            int result = 0;
            ScriptOps.m_MainForm.f0001a7.UpdatePMCLKLOIntAnalogSigMonConfigData();
            m_MonInternalPMCLKLOAnalogSignalConfigParameters.ProfileIndex = pmCLKLOIntAnalogSigMonProfileIndex;
            m_MonInternalPMCLKLOAnalogSignalConfigParameters.ReportingMode = pmCLKLOIntAnalogSigMonReportingMode;
            ScriptOps.m_MainForm.f0001a7.UpdatePMCLKLOIntAnalogSigMonConfigDataFrmCmdSrc();
            return result;
        }

        public int UpdateNGPADCInternalAnalogSignalMonConfigData(byte gpadcIntAnalogSigMonReportingMode)
        {
            int result = 0;
            ScriptOps.m_MainForm.f0001a7.UpdateGPADCIntAnalogSigMonConfigData();
            m_MonInternalGPADCAnalogSignalConfigParameters.ReportingMode = (char)gpadcIntAnalogSigMonReportingMode;
            ScriptOps.m_MainForm.f0001a7.UpdateGPADCIntAnalogSigMonConfigDataFrmCmdSrc();
            return result;
        }

        public int UpdateNPLLVoltageControlInternalAnalogSignalMonConfigData(byte pllCtlVolMonReportingMode, byte pllCtlVolMonAPLLVctl, byte pllCtlVolMonSynthVCO1VolControl, byte pllCtlVolMonSynthVCO2VolControl)
        {
            int result = 0;
            ScriptOps.m_MainForm.f0001a7.UpdatePLLControlVolMonConfigData();
            m_MonPLLControlVoltageConfigParameters.ReportingMode = (char)pllCtlVolMonReportingMode;
            m_MonPLLControlVoltageConfigParameters.APLLVctl = (char)pllCtlVolMonAPLLVctl;
            m_MonPLLControlVoltageConfigParameters.SynthVCO1VoltageControl = (char)pllCtlVolMonSynthVCO1VolControl;
            m_MonPLLControlVoltageConfigParameters.SynthVCO2VoltageControl = (char)pllCtlVolMonSynthVCO2VolControl;
            ScriptOps.m_MainForm.f0001a7.UpdatePLLControlVolMonConfigDataFrmCmdSrc();
            return result;
        }

        public int UpdateNDCCInternalAnalogSignalMonConfigData(byte dccMonReportingMode, byte dccMonClockPair0, byte dccMonClockPair1, byte dccMonClockPair2, byte dccMonClockPair3, byte dccMonClockPair4, byte dccMonClockPair5)
        {
            int result = 0;
            ScriptOps.m_MainForm.f0001a7.UpdateDCCMonConfigData();
            m_MonDualClockCompConfigParameters.ReportingMode = (char)dccMonReportingMode;
            m_MonDualClockCompConfigParameters.ClockPair0 = (char)dccMonClockPair0;
            m_MonDualClockCompConfigParameters.ClockPair1 = (char)dccMonClockPair1;
            m_MonDualClockCompConfigParameters.ClockPair2 = (char)dccMonClockPair2;
            m_MonDualClockCompConfigParameters.ClockPair3 = (char)dccMonClockPair3;
            m_MonDualClockCompConfigParameters.ClockPair4 = (char)dccMonClockPair4;
            m_MonDualClockCompConfigParameters.ClockPair5 = (char)dccMonClockPair5;
            ScriptOps.m_MainForm.f0001a7.UpdateDCCMonConfigDataFrmCmdSrc();
            return result;
        }

        public int UpdateNSetLowPowNNoisFifConfigData(ushort RadarDeviceId, int AnaChan, int LpAdcMod)
        {
            int num = 0;
            GlobalRef.g_RadarDeviceId = (uint)RadarDeviceId;
            ScriptOps.m_MainForm.StaticConfigTab.UpdateLpModConfData();
            m_LpModConfParams.AnaChan = AnaChan;
            m_LpModConfParams.LpAdcMod = LpAdcMod;
            ScriptOps.m_MainForm.StaticConfigTab.UpdateLpNNoiseDataFrmCmdSrc();
            return num + iSetLpModConfig_Gui(true, false);
        }

        public int UpdateNSetRFLDOBypassEnableorDisableConfigData(ushort RadarDeviceId, uint p1)
        {
            int num = 0;
            GlobalRef.g_RadarDeviceId = (uint)RadarDeviceId;
            ScriptOps.m_MainForm.StaticConfigTab.UpdateRFLDOBypassConfData();
            m_RFLDOBypassEnableAndDisableConfigParameters.LDOBypassEnable = (ushort)(p1 & 1U);
            m_RFLDOBypassEnableAndDisableConfigParameters.f0002fc = (byte)(p1 >> 1 & 1U);
            m_RFLDOBypassEnableAndDisableConfigParameters.SupplyMonIRDrop = (ushort)(p1 >> 16 & 255U);
            m_RFLDOBypassEnableAndDisableConfigParameters.IOSupply = (byte)(p1 >> 24);
            ScriptOps.m_MainForm.StaticConfigTab.UpdateRFLDOBypassConfDataFromCmdSrc();
            return num + iSetRFLDOBypassEnableAndDisableConfig_Gui(true, false);
        }

        public int UpdateLowPowNNoisFifConfigData(int AnaChan, int LpAdcMod, int NfMod)
        {
            int result = 0;
            ScriptOps.m_MainForm.StaticConfigTab.UpdateLpModConfData();
            m_LpModConfParams.AnaChan = AnaChan;
            m_LpModConfParams.LpAdcMod = LpAdcMod;
            ScriptOps.m_MainForm.StaticConfigTab.UpdateLpNNoiseDataFrmCmdSrc();
            return result;
        }

        public int UpdateNSetDataPathConfigData(ushort RadarDeviceId, uint intfSel, uint p2, uint p3)
        {
            int num = 0;
            GlobalRef.g_RadarDeviceId = (uint)RadarDeviceId;
            ScriptOps.m_MainForm.DataConfigTab.UpdateDataConfigData();
            m_DataConfigParams.DataPath = (char)(intfSel & 255U);
            m_DataConfigParams.DataFmt0 = (char)(p2 & 63U);
            m_DataConfigParams.DataFmt1 = (char)(p3 & 63U);
            m_DataConfigParams.CS2Pkt0VirtualChannelNo = (char)(p2 & 192U);
            m_DataConfigParams.CS2Pkt1VirtualChannelNo = (char)(p3 & 192U);
            m_DataConfigParams.reserved = (char)(p3 >> 8);
            m_DataConfigParams.CQConfig = (char)(intfSel >> 8);
            m_DataConfigParams.CQ0TransSize = (char)(p2 >> 8 & 255U);
            m_DataConfigParams.CQ1TransSize = (char)(p2 >> 16 & 255U);
            m_DataConfigParams.CQ2TransSize = (char)(p2 >> 24 & 255U);
            ScriptOps.m_MainForm.DataConfigTab.UpdateDataPathConfigDataFrmCmdSrc();
            return num + iSetDataPathConfig_Gui(true, false);
        }

        public int UpdateDataPathConfigData(char intfSel, char p1, char p2, char cqConfig, char Pkt0VirtualChannelNo, char Pkt1VirtualChannelNo)
        {
            int result = 0;
            ScriptOps.m_MainForm.DataConfigTab.UpdateDataConfigData();
            m_DataConfigParams.DataPath = intfSel;
            m_DataConfigParams.DataFmt0 = p1;
            m_DataConfigParams.DataFmt1 = p2;
            m_DataConfigParams.f000326 = cqConfig;
            m_DataConfigParams.CS2Pkt0VirtualChannelNo = Pkt0VirtualChannelNo;
            m_DataConfigParams.CS2Pkt1VirtualChannelNo = Pkt1VirtualChannelNo;
            ScriptOps.m_MainForm.DataConfigTab.UpdateAndLoadDataConfigDataFrmCmdSrc();
            return result;
        }

        public int UpdateNSetLvdsClkConfData(ushort RadarDeviceId, char laneClk, char dataRate)
        {
            int num = 0;
            GlobalRef.g_RadarDeviceId = (uint)RadarDeviceId;
            ScriptOps.m_MainForm.DataConfigTab.UpdateDataConfigData();
            m_DataConfigParams.laneClk = laneClk;
            m_DataConfigParams.DataRate = dataRate;
            ScriptOps.m_MainForm.DataConfigTab.UpdateDataConfigDataFrmCmdSrc();
            return num + iSetLvdsClkConfig_Gui(true, false);
        }

        public int UpdateNSetMSSDataBlockReadConfData(ushort RadarDeviceId, uint BlockStartAddress, uint DataLength, uint Reserved)
        {
            int num = 0;
            GlobalRef.g_RadarDeviceId = (uint)RadarDeviceId;
            ScriptOps.m_MainForm.m_RegOpeTab.UpdateMSSGetContiguousBlockConfigData();
            m_MSSGetDataBlockConfigParams.BlockStartAddress = BlockStartAddress;
            m_MSSGetDataBlockConfigParams.DataLength = DataLength;
            m_MSSGetDataBlockConfigParams.Reserved = 0U;
            ScriptOps.m_MainForm.m_RegOpeTab.UpdateMSSGetContiguousBlockDataFrmCmdSrc();
            return num + iSetMSSGetDataBlockConfig_Gui(true, false);
        }

        public int UpdateLvdsClkConfData(char laneClk, char dataRate)
        {
            int result = 0;
            ScriptOps.m_MainForm.DataConfigTab.UpdateDataConfigData();
            m_DataConfigParams.laneClk = laneClk;
            m_DataConfigParams.DataRate = dataRate;
            ScriptOps.m_MainForm.DataConfigTab.UpdateDataConfigDataFrmCmdSrc();
            return result;
        }

        public int UpdateNSetLvdsLaneConfData(ushort RadarDeviceId, ushort p1, ushort lane1En, ushort lane2En, ushort lane3En, ushort lane4En, ushort p6, ushort p7, ushort p8)
        {
            int num = 0;
            GlobalRef.g_RadarDeviceId = (uint)RadarDeviceId;
            ScriptOps.m_MainForm.DataConfigTab.UpdateDataConfigData();
            m_DataConfigParams.f000327 = p1;
            m_DataConfigParams.lane1En = lane1En;
            m_DataConfigParams.lane2En = lane2En;
            m_DataConfigParams.lane3En = lane3En;
            m_DataConfigParams.lane4En = lane4En;
            m_DataConfigParams.msbFirst = p6;
            m_DataConfigParams.endPulse = p7;
            m_DataConfigParams.crc = p8;
            ScriptOps.m_MainForm.DataConfigTab.UpdateDataConfigDataFrmCmdSrc();
            return num + iSetLvdsLaneConfig_Gui(true, false);
        }

        public int UpdateNSetCSI2LaneConfData(ushort RadarDeviceId, ushort CSI2DataLane0Pos, ushort CSI2DataLane0Pol, ushort CSI2DataLane1Pos, ushort CSI2DataLane1Pol, ushort CSI2DataLane2Pos, ushort CSI2DataLane2Pol, ushort CSI2DataLane3Pos, ushort CSI2DataLane3Pol, ushort CSI2ClockPos, ushort CSI2ClockPol)
        {
            int num = 0;
            GlobalRef.g_RadarDeviceId = (uint)RadarDeviceId;
            ScriptOps.m_MainForm.DataConfigTab.UpdateDataConfigData();
            m_DataConfigParams.CSI2DataLane0Pos = CSI2DataLane0Pos;
            m_DataConfigParams.CSI2DataLane0Pol = CSI2DataLane0Pol;
            m_DataConfigParams.CSI2DataLane1Pos = CSI2DataLane1Pos;
            m_DataConfigParams.CSI2DataLane1Pol = CSI2DataLane1Pol;
            m_DataConfigParams.CSI2DataLane2Pos = CSI2DataLane2Pos;
            m_DataConfigParams.CSI2DataLane2Pol = CSI2DataLane2Pol;
            m_DataConfigParams.CSI2DataLane3Pos = CSI2DataLane3Pos;
            m_DataConfigParams.CSI2DataLane3Pol = CSI2DataLane3Pol;
            m_DataConfigParams.CSI2ClockPos = CSI2ClockPos;
            m_DataConfigParams.CSI2ClockPol = CSI2ClockPol;
            ScriptOps.m_MainForm.DataConfigTab.UpdateCSI2LaneConfigDataFrmCmdSrc();
            return num + iSetLvdsLaneConfig_Gui(true, false);
        }

        public int UpdateLvdsLaneConfData(ushort p0, ushort lane1, ushort lane2, ushort lane3, ushort lane4, ushort p5, ushort p6, ushort p7)
        {
            int result = 0;
            ScriptOps.m_MainForm.DataConfigTab.UpdateDataConfigData();
            m_DataConfigParams.f000327 = p0;
            m_DataConfigParams.lane1En = lane1;
            m_DataConfigParams.lane2En = lane2;
            m_DataConfigParams.lane3En = lane3;
            m_DataConfigParams.lane4En = lane4;
            m_DataConfigParams.msbFirst = p5;
            m_DataConfigParams.endPulse = p6;
            m_DataConfigParams.crc = p7;
            ScriptOps.m_MainForm.DataConfigTab.UpdateDataConfigDataFrmCmdSrc();
            return result;
        }

        public int UpdateNSetProfileConfData(ushort RadarDeviceId, ushort profileId, float startFreqConst, float idleTimeConst, float adcStartTimeConst, float rampEndTime, uint tx1OutPowerBackoffCode, uint tx2OutPowerBackoffCode, uint tx3OutPowerBackoffCode, float tx1PhaseShifter, float tx2PhaseShifter, float tx3PhaseShifter, float freqSlopeConst, float txStartTime, ushort numAdcSamples, ushort digOutSampleRate, uint hpfCornerFreq1, uint hpfCornerFreq2, char rxGain)
        {
            int num = 0;
            GlobalRef.g_RadarDeviceId = (uint)RadarDeviceId;
            ScriptOps.m_MainForm.ChirpConfigTab.UpdateChirpConfigData();
            m_ChirpConfigParams.pprofileId = profileId;
            m_ChirpConfigParams.startFreqConst = (double)startFreqConst;
            m_ChirpConfigParams.idleTimeConst = idleTimeConst;
            m_ChirpConfigParams.adcStartTimeConst = adcStartTimeConst;
            m_ChirpConfigParams.rampEndTime = rampEndTime;
            m_ChirpConfigParams.tx1OutPowerBackoffCode = tx1OutPowerBackoffCode;
            m_ChirpConfigParams.tx2OutPowerBackoffCode = tx2OutPowerBackoffCode;
            m_ChirpConfigParams.tx3OutPowerBackoffCode = tx3OutPowerBackoffCode;
            m_ChirpConfigParams.tx1PhaseShifter = (double)tx1PhaseShifter;
            m_ChirpConfigParams.tx2PhaseShifter = (double)tx2PhaseShifter;
            m_ChirpConfigParams.tx3PhaseShifter = (double)tx3PhaseShifter;
            m_ChirpConfigParams.freqSlopeConst = freqSlopeConst;
            m_ChirpConfigParams.txStartTime = txStartTime;
            m_ChirpConfigParams.pnumAdcSamples = numAdcSamples;
            m_ChirpConfigParams.digOutSampleRate = digOutSampleRate;
            m_ChirpConfigParams.hpfCornerFreq1 = (char)(hpfCornerFreq1 & 511U);
            m_ChirpConfigParams.hpfCornerFreq2 = (char)(hpfCornerFreq2 & 65535U);
            m_ChirpConfigParams.rxGain = (char)(rxGain & '?');
            if (rxGain >> 6 == '\0')
            {
                m_ChirpConfigParams.RFGainTarget = '\0';
            }
            else if (rxGain >> 6 == '\u0001')
            {
                m_ChirpConfigParams.RFGainTarget = '\u0001';
            }
            else if (rxGain >> 6 == '\u0003')
            {
                m_ChirpConfigParams.RFGainTarget = '\u0003';
            }
            m_ChirpConfigParams.ProfileControl = 0;
            m_ChirpConfigParams.ForceVCOSelect = (byte)(hpfCornerFreq2 >> 16 & 1U);
            m_ChirpConfigParams.VCOSelect = (byte)(hpfCornerFreq2 >> 17 & 1U);
            m_ChirpConfigParams.RetainTxCalLUT = (byte)(hpfCornerFreq2 >> 24 & 1U);
            m_ChirpConfigParams.RetainRxCalLUT = (byte)(hpfCornerFreq2 >> 25 & 1U);
            m_ChirpConfigParams.TX0CalibTx0 = (byte)(hpfCornerFreq1 >> 16 & 1U);
            m_ChirpConfigParams.TX0CalibTx1 = (byte)(hpfCornerFreq1 >> 17 & 1U);
            m_ChirpConfigParams.TX0CalibTx2 = (byte)(hpfCornerFreq1 >> 18 & 1U);
            m_ChirpConfigParams.TX1CalibTx0 = (byte)(hpfCornerFreq1 >> 19 & 1U);
            m_ChirpConfigParams.TX1CalibTx1 = (byte)(hpfCornerFreq1 >> 20 & 1U);
            m_ChirpConfigParams.TX1CalibTx2 = (byte)(hpfCornerFreq1 >> 21 & 1U);
            m_ChirpConfigParams.TX2CalibTx0 = (byte)(hpfCornerFreq1 >> 22 & 1U);
            m_ChirpConfigParams.TX2CalibTx1 = (byte)(hpfCornerFreq1 >> 23 & 1U);
            m_ChirpConfigParams.TX2CalibTx2 = (byte)(hpfCornerFreq1 >> 24 & 1U);
            m_ChirpConfigParams.f000328 = (byte)(hpfCornerFreq1 >> 31 & 1U);
            ScriptOps.m_MainForm.ChirpConfigTab.UpdateProfileConfigDataFrmCmd();
            return num + iSetProfileConfig_Gui(true, false);
        }

        public int UpdateNSetAdvancedFrameConfData(ushort ForceProfileIdx, ushort ChirpStartIdx, ushort NumOfChirps, ushort NumOfLoops, uint BurstPeriodicity, ushort ChirpStartIdxOffset, ushort NumOfBrust, ushort NumOfBrustLoops, uint SubFramePeriodicity, byte NumOfSubFrames, byte ForceProfile, ushort NumOfFrames, ushort TriggerSelect, uint FrameTrigDelay)
        {
            int num = 0;
            ScriptOps.m_MainForm.AdvanceFrameConfigTab.UpdateAdvncedFrameConfigData();
            m_AdvancedFrameConfigParams.ForceProfileIdx = ForceProfileIdx;
            m_AdvancedFrameConfigParams.ChirpStartIdx = ChirpStartIdx;
            m_AdvancedFrameConfigParams.NumOfChirps = NumOfChirps;
            m_AdvancedFrameConfigParams.NumOfLoops = NumOfLoops;
            m_AdvancedFrameConfigParams.BurstPeriodicity = BurstPeriodicity;
            m_AdvancedFrameConfigParams.ChirpStartIdxOffset = ChirpStartIdxOffset;
            m_AdvancedFrameConfigParams.NumOfBrust = NumOfBrust;
            m_AdvancedFrameConfigParams.NumOfBrustLoops = NumOfBrustLoops;
            m_AdvancedFrameConfigParams.SubFramePeriodicity = SubFramePeriodicity;
            m_AdvancedFrameConfigParams.NumOfSubFrames = NumOfSubFrames;
            m_AdvancedFrameConfigParams.ForceProfile = ForceProfile;
            m_AdvancedFrameConfigParams.NumOfFrames = NumOfFrames;
            m_AdvancedFrameConfigParams.TriggerSelect = TriggerSelect;
            m_AdvancedFrameConfigParams.FrameTrigDelay = FrameTrigDelay;
            ScriptOps.m_MainForm.AdvanceFrameConfigTab.UpdateAdvncedFrameConfigDataFrmCmd();
            return num + iAdvncedFrameConfig_Gui(true, false);
        }

        public int UpdateNSetBasicConfigurationForAnalysisConfData(uint NumberOfSamples, uint FFTSize, uint NUumberOfAverages, ushort WindowSelection, char RemoveDC, char EnableTriggerCapture, char WindowCompensation)
        {
            m_BasicConfigurationForAnalysisParams.NumberOfSamples = NumberOfSamples;
            m_BasicConfigurationForAnalysisParams.FFTSize = FFTSize;
            m_BasicConfigurationForAnalysisParams.NumberOFAverages = NUumberOfAverages;
            m_BasicConfigurationForAnalysisParams.WindowSelection = WindowSelection;
            m_BasicConfigurationForAnalysisParams.RemoveDCEnable = RemoveDC;
            m_BasicConfigurationForAnalysisParams.EnableTirggerCapture = EnableTriggerCapture;
            m_BasicConfigurationForAnalysisParams.WindowCopensation = WindowCompensation;
            ScriptOps.m_MainForm.ContStreamingTab.UpdateBasicConfigForAnalysiConfigDataFromLuaCmd();
            return iSetBasicConfigurationForAnalysisConfig_Gui(true, false);
        }

        public int UpdateNSetMeasureTheGainConfData(string ADCFileName, uint RxChain, float ToneFreq, float RXInputPower)
        {
            ScriptOps.m_MainForm.ContStreamingTab.UpdateMeasureGainData();
            m_ContStreamParams.mtlbAdcPath = ADCFileName;
            m_ContStreamParams.GainNFRxChain = RxChain;
            m_ContStreamParams.GainNFInputPower = RXInputPower;
            m_ContStreamParams.GainNFToneFreq = ToneFreq;
            ScriptOps.m_MainForm.ContStreamingTab.UpdateMeasureGainConfigDataFromLuaCmd();
            return iStartMeasureGainConfig_Gui(true, false);
        }

        public int UpdateNSetMeasureTheNFConfigData(string ADCFileName, uint RxChain, float ToneFreq)
        {
            ScriptOps.m_MainForm.ContStreamingTab.UpdateMeasureNFData();
            m_ContStreamParams.mtlbAdcPath = ADCFileName;
            m_ContStreamParams.GainNFRxChain = RxChain;
            m_ContStreamParams.GainNFToneFreq = ToneFreq;
            ScriptOps.m_MainForm.ContStreamingTab.UpdateMeasureNFConfigDataFromLuaCmd();
            return iStartMeasureNFConfig_Gui(true, false);
        }

        public int UpdateNSetRawADCStartCaptureFromContStreamingConfData(string ADCFileName, byte PktSeqEnaDisable)
        {
            int result = 0;
            if (GlobalRef.f0002d0)
            {
                if (PktSeqEnaDisable == 1)
                {
                    GlobalRef.g_CapturePktSequenceEnaDisable = true;
                }
                else
                {
                    GlobalRef.g_CapturePktSequenceEnaDisable = false;
                }
                iStartMatlabForContProcessingForRawADCCaptureFromCaptureCardViaLua(ADCFileName, PktSeqEnaDisable);
            }
            return result;
        }

        private int iStartMatlabForContProcessingForRawADCCaptureFromCaptureCardViaLua(string ADCFileName, byte PktSeqEnaDisable)
        {
            string empty = string.Empty;
            string text = Path.GetDirectoryName(Application.StartupPath) + "\\PostProc";
            string text2 = "cf.json";
            string path = text + "\\cf.json";
            string text3 = "DCA1000EVM_CLI_Record.exe";
            if (!GlobalRef.g_ContStreamCaptureStartStopStatus)
            {
                Path.GetDirectoryName(Application.ExecutablePath);
                if (string.IsNullOrEmpty(ADCFileName))
                {
                    string msg = string.Format("Please select a file to save Data Capture Raw ADC data for Post Processing", new object[0]);
                    m_GuiManager.Log(msg);
                    return 0;
                }
                GlobalRef.g_CapturePktSequenceEnaDisable = (PktSeqEnaDisable > 0);
                if (GlobalRef.g_RadarDeviceId == 1U)
                {
                    string full_command = string.Format("ar1.CaptureCardConfig_StartRecord_ContinuousStreamData(\"{0}\", {1})", new object[]
                    {
                        ADCFileName,
                        PktSeqEnaDisable
                    });
                    m_GuiManager.RecordLog(2, full_command);
                }
                GlobalRef.g_ContStreamCaptureStartStopStatus = true;
                m_GuiManager.MainTsForm.ContStreamingTab.ChangeStatusFromStartCaptureToStopCaptureInContStream(true);
                string[] array = ADCFileName.Split(new char[]
                {
                    '\\'
                });
                int num = array.Length;
                string text4 = "";
                for (int i = 0; i < num - 1; i++)
                {
                    if (i != num - 2)
                    {
                        text4 = text4 + array[i] + "\\";
                    }
                    else if (i == num - 2)
                    {
                        text4 += array[i];
                    }
                }
                string arg = text4;
                string fileNameWithoutExtension = Path.GetFileNameWithoutExtension(array[num - 1]);
                object obj = JsonConvert.DeserializeObject(File.ReadAllText(path));
                if (ScriptOps.c0002ad.f0001ae == null)
                {
                    ScriptOps.c0002ad.f0001ae = CallSite<Func<CallSite, object, string, string, object>>.Create(Binder.SetIndex(CSharpBinderFlags.None, typeof(ScriptOps), new CSharpArgumentInfo[]
                    {
                        CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.None, null),
                        CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.UseCompileTimeType | CSharpArgumentInfoFlags.Constant, null),
                        CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.UseCompileTimeType, null)
                    }));
                }
                Func<CallSite, object, string, string, object> target = ScriptOps.c0002ad.f0001ae.Target;
                CallSite f0001ae = ScriptOps.c0002ad.f0001ae;
                if (ScriptOps.c0002ad.f0001ad == null)
                {
                    ScriptOps.c0002ad.f0001ad = CallSite<Func<CallSite, object, string, object>>.Create(Binder.GetIndex(CSharpBinderFlags.None, typeof(ScriptOps), new CSharpArgumentInfo[]
                    {
                        CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.None, null),
                        CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.UseCompileTimeType | CSharpArgumentInfoFlags.Constant, null)
                    }));
                }
                Func<CallSite, object, string, object> target2 = ScriptOps.c0002ad.f0001ad.Target;
                CallSite f0001ad = ScriptOps.c0002ad.f0001ad;
                if (ScriptOps.c0002ad.f0001ac == null)
                {
                    ScriptOps.c0002ad.f0001ac = CallSite<Func<CallSite, object, string, object>>.Create(Binder.GetIndex(CSharpBinderFlags.None, typeof(ScriptOps), new CSharpArgumentInfo[]
                    {
                        CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.None, null),
                        CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.UseCompileTimeType | CSharpArgumentInfoFlags.Constant, null)
                    }));
                }
                target(f0001ae, target2(f0001ad, ScriptOps.c0002ad.f0001ac.Target(ScriptOps.c0002ad.f0001ac, obj, "DCA1000Config"), "captureConfig"), "fileBasePath", arg);
                if (ScriptOps.c0002ad.f0001b1 == null)
                {
                    ScriptOps.c0002ad.f0001b1 = CallSite<Func<CallSite, object, string, string, object>>.Create(Binder.SetIndex(CSharpBinderFlags.None, typeof(ScriptOps), new CSharpArgumentInfo[]
                    {
                        CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.None, null),
                        CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.UseCompileTimeType | CSharpArgumentInfoFlags.Constant, null),
                        CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.UseCompileTimeType, null)
                    }));
                }
                Func<CallSite, object, string, string, object> target3 = ScriptOps.c0002ad.f0001b1.Target;
                CallSite f0001b = ScriptOps.c0002ad.f0001b1;
                if (ScriptOps.c0002ad.f0001b0 == null)
                {
                    ScriptOps.c0002ad.f0001b0 = CallSite<Func<CallSite, object, string, object>>.Create(Binder.GetIndex(CSharpBinderFlags.None, typeof(ScriptOps), new CSharpArgumentInfo[]
                    {
                        CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.None, null),
                        CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.UseCompileTimeType | CSharpArgumentInfoFlags.Constant, null)
                    }));
                }
                Func<CallSite, object, string, object> target4 = ScriptOps.c0002ad.f0001b0.Target;
                CallSite f0001b2 = ScriptOps.c0002ad.f0001b0;
                if (ScriptOps.c0002ad.f0001af == null)
                {
                    ScriptOps.c0002ad.f0001af = CallSite<Func<CallSite, object, string, object>>.Create(Binder.GetIndex(CSharpBinderFlags.None, typeof(ScriptOps), new CSharpArgumentInfo[]
                    {
                        CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.None, null),
                        CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.UseCompileTimeType | CSharpArgumentInfoFlags.Constant, null)
                    }));
                }
                target3(f0001b, target4(f0001b2, ScriptOps.c0002ad.f0001af.Target(ScriptOps.c0002ad.f0001af, obj, "DCA1000Config"), "captureConfig"), "filePrefix", fileNameWithoutExtension);
                if (ScriptOps.c0002ad.f0001b4 == null)
                {
                    ScriptOps.c0002ad.f0001b4 = CallSite<Func<CallSite, object, string, byte, object>>.Create(Binder.SetIndex(CSharpBinderFlags.None, typeof(ScriptOps), new CSharpArgumentInfo[]
                    {
                        CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.None, null),
                        CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.UseCompileTimeType | CSharpArgumentInfoFlags.Constant, null),
                        CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.UseCompileTimeType, null)
                    }));
                }
                Func<CallSite, object, string, byte, object> target5 = ScriptOps.c0002ad.f0001b4.Target;
                CallSite f0001b3 = ScriptOps.c0002ad.f0001b4;
                if (ScriptOps.c0002ad.f0001b3 == null)
                {
                    ScriptOps.c0002ad.f0001b3 = CallSite<Func<CallSite, object, string, object>>.Create(Binder.GetIndex(CSharpBinderFlags.None, typeof(ScriptOps), new CSharpArgumentInfo[]
                    {
                        CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.None, null),
                        CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.UseCompileTimeType | CSharpArgumentInfoFlags.Constant, null)
                    }));
                }
                Func<CallSite, object, string, object> target6 = ScriptOps.c0002ad.f0001b3.Target;
                CallSite f0001b4 = ScriptOps.c0002ad.f0001b3;
                if (ScriptOps.c0002ad.f0001b2 == null)
                {
                    ScriptOps.c0002ad.f0001b2 = CallSite<Func<CallSite, object, string, object>>.Create(Binder.GetIndex(CSharpBinderFlags.None, typeof(ScriptOps), new CSharpArgumentInfo[]
                    {
                        CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.None, null),
                        CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.UseCompileTimeType | CSharpArgumentInfoFlags.Constant, null)
                    }));
                }
                target5(f0001b3, target6(f0001b4, ScriptOps.c0002ad.f0001b2.Target(ScriptOps.c0002ad.f0001b2, obj, "DCA1000Config"), "captureConfig"), "sequenceNumberEnable", PktSeqEnaDisable);
                if (ScriptOps.c0002ad.f0001b6 == null)
                {
                    ScriptOps.c0002ad.f0001b6 = CallSite<Func<CallSite, object, string>>.Create(Binder.Convert(CSharpBinderFlags.None, typeof(string), typeof(ScriptOps)));
                }
                Func<CallSite, object, string> target7 = ScriptOps.c0002ad.f0001b6.Target;
                CallSite f0001b5 = ScriptOps.c0002ad.f0001b6;
                if (ScriptOps.c0002ad.f0001b5 == null)
                {
                    ScriptOps.c0002ad.f0001b5 = CallSite<Func<CallSite, Type, object, Newtonsoft.Json.Formatting, object>>.Create(Binder.InvokeMember(CSharpBinderFlags.None, "SerializeObject", null, typeof(ScriptOps), new CSharpArgumentInfo[]
                    {
                        CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.UseCompileTimeType | CSharpArgumentInfoFlags.IsStaticType, null),
                        CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.None, null),
                        CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.UseCompileTimeType | CSharpArgumentInfoFlags.Constant, null)
                    }));
                }
                string contents = target7(f0001b5, ScriptOps.c0002ad.f0001b5.Target(ScriptOps.c0002ad.f0001b5, typeof(JsonConvert), obj, Newtonsoft.Json.Formatting.Indented));
                File.WriteAllText(path, contents);
                string text5 = "start_record";
                string arguments = string.Concat(new string[]
                {
                    "/C ",
                    text3,
                    " ",
                    text5,
                    " ",
                    text2
                });
                GlobalRef.g_processLua = Process.Start(new ProcessStartInfo
                {
                    FileName = "CMD.EXE",
                    WorkingDirectory = text,
                    Arguments = arguments,
                    UseShellExecute = false,
                    RedirectStandardOutput = true,
                    RedirectStandardError = true,
                    RedirectStandardInput = true,
                    CreateNoWindow = true
                });
                string full_command2 = string.Format("Sending {0} command to DCA1000", text5);
                m_GuiManager.RecordLog(0, full_command2);
                if (GlobalRef.g_processLua != null && !GlobalRef.g_processLua.HasExited)
                {
                    GlobalRef.g_processLua.WaitForExit();
                    string full_command3 = GlobalRef.g_processLua.StandardOutput.ReadToEnd();
                    m_GuiManager.RecordLog(0, full_command3);
                }
                CopyMatlabLogFileForDCA1000ForAnalysis(ADCFileName);
                Thread.Sleep(100);
            }
            return 0;
        }

        public int UpdateNSetRawADCStopCaptureFromContStreamingConfDataViaLua()
        {
            return iStartMatlabForContProcessingForRawADCStopCaptureFromCaptureCardViaLua();
        }

        private int iStartMatlabForContProcessingForRawADCStopCaptureFromCaptureCardViaLua()
        {
            if (GlobalRef.f0002d0)
            {
                string text = Path.GetDirectoryName(Application.StartupPath) + "\\PostProc";
                string text2 = "cf.json";
                string text3 = "DCA1000EVM_CLI_Record.exe";
                if (m_RadarDeviceModeConfigParams.NumberOfRadarDevicesDetected <= 1)
                {
                    string full_command = string.Format("ar1.CaptureCardConfig_StopRecord_ContinuousStreamData()", new object[0]);
                    m_GuiManager.RecordLog(2, full_command);
                }
                string text4 = "stop_record";
                string arguments = string.Concat(new string[]
                {
                    "/C ",
                    text3,
                    " ",
                    text4,
                    " ",
                    text2
                });
                GlobalRef.g_processLua = Process.Start(new ProcessStartInfo
                {
                    FileName = "CMD.EXE",
                    WorkingDirectory = text,
                    Arguments = arguments,
                    UseShellExecute = false,
                    RedirectStandardOutput = true,
                    RedirectStandardError = true,
                    RedirectStandardInput = true,
                    CreateNoWindow = true
                });
                string full_command2 = string.Format("Sending {0} command to DCA1000", text4);
                m_GuiManager.RecordLog(0, full_command2);
                if (GlobalRef.g_processLua != null && !GlobalRef.g_processLua.HasExited)
                {
                    GlobalRef.g_processLua.WaitForExit();
                    string full_command3 = GlobalRef.g_processLua.StandardOutput.ReadToEnd();
                    m_GuiManager.RecordLog(0, full_command3);
                }
            }
            return 0;
        }

        public int UpdateNSetADCCaptureFromContStreamingConfData(string ADCFileName, uint ADCNumberOfSamples)
        {
            m_ContStreamParams.mtlbAdcPath = ADCFileName;
            m_BasicConfigurationForAnalysisParams.NumberOfSamples = ADCNumberOfSamples;
            ScriptOps.m_MainForm.ContStreamingTab.UpdateContStreamADCCaptureConfigDataFromLuaCmd();
            return iStartContStrADCCaptureConfig_Gui(true, false);
        }

        public int UpdateNSetADCDataProcessingAndDisplayFromContStreamingConfData(string ADCFileName)
        {
            m_ContStreamParams.mtlbAdcPath = ADCFileName;
            ScriptOps.m_MainForm.ContStreamingTab.UpdateContStreamADCCaptureConfigDataFromLuaCmd();
            return iStartContStrADCProcessAndDisplayConfig_Gui(true, false);
        }

        public int UpdateNSetContStrConfData(ushort RadarDeviceId, double startFreqConst, ushort digOutSampleRate, char rxGain, char hpfCornerFreq1, char hpfCornerFreq2, uint tx1OutPowerBackoffCode, uint tx2OutPowerBackoffCode, uint tx3OutPowerBackoffCode, ushort tx1PhaseShifter, ushort tx2PhaseShifter, uint tx3PhaseShifter)
        {
            GlobalRef.g_RadarDeviceId = (uint)RadarDeviceId;
            m_ContStreamParams.startFreqConst = startFreqConst;
            m_ContStreamParams.digOutSampleRate = digOutSampleRate;
            m_ContStreamParams.rxGain = (char)(Convert.ToInt32(rxGain) & 63);
            m_ContStreamParams.RFGainTarget = (ushort)(rxGain >> 6 & '\u0003');
            m_ContStreamParams.hpfCornerFreq1 = hpfCornerFreq1;
            m_ContStreamParams.hpfCornerFreq2 = hpfCornerFreq2;
            m_ContStreamParams.tx1OutPowerBackoffCode = tx1OutPowerBackoffCode;
            m_ContStreamParams.tx2OutPowerBackoffCode = tx2OutPowerBackoffCode;
            m_ContStreamParams.tx3OutPowerBackoffCode = tx3OutPowerBackoffCode;
            m_ContStreamParams.tx1PhaseShifter = (double)tx1PhaseShifter;
            m_ContStreamParams.tx2PhaseShifter = (double)tx2PhaseShifter;
            m_ContStreamParams.tx3PhaseShifter = (tx3PhaseShifter & 65535U);
            m_ContStreamParams.ForceVCOSelect = (byte)(tx3PhaseShifter >> 16 & 1U);
            m_ContStreamParams.VCOSelect = (byte)(tx3PhaseShifter >> 17 & 1U);
            ScriptOps.m_MainForm.ContStreamingTab.UpdateContStrConfigData();
            return iSetContStrConfig_Gui(true, false);
        }

        public void UpdateProfileConfData(ushort profileId, float startFreqConst, float idleTimeConst, float adcStartTimeConst, float rampEndTime, uint tx1OutPowerBackoffCode, uint tx2OutPowerBackoffCode, uint tx3OutPowerBackoffCode, ushort tx1PhaseShifter, ushort tx2PhaseShifter, ushort tx3PhaseShifter, float freqSlopeConst, float txStartTime, ushort numAdcSamples, ushort digOutSampleRate, char hpfCornerFreq1, char hpfCornerFreq2, char rxGain, byte rfGainTarget, byte vcoSelect, byte forceVCOSelect, byte retainTxCalLUT, byte retainRxCalLUT)
        {
            ScriptOps.m_MainForm.ChirpConfigTab.UpdateChirpConfigData();
            m_ChirpConfigParams.pprofileId = profileId;
            m_ChirpConfigParams.startFreqConst = (double)startFreqConst;
            m_ChirpConfigParams.idleTimeConst = idleTimeConst;
            m_ChirpConfigParams.adcStartTimeConst = adcStartTimeConst;
            m_ChirpConfigParams.rampEndTime = rampEndTime;
            m_ChirpConfigParams.tx1OutPowerBackoffCode = tx1OutPowerBackoffCode;
            m_ChirpConfigParams.tx2OutPowerBackoffCode = tx2OutPowerBackoffCode;
            m_ChirpConfigParams.tx3OutPowerBackoffCode = tx3OutPowerBackoffCode;
            m_ChirpConfigParams.tx1PhaseShifter = (double)tx1PhaseShifter;
            m_ChirpConfigParams.tx2PhaseShifter = (double)tx2PhaseShifter;
            m_ChirpConfigParams.tx3PhaseShifter = (double)tx3PhaseShifter;
            m_ChirpConfigParams.freqSlopeConst = freqSlopeConst;
            m_ChirpConfigParams.txStartTime = txStartTime;
            m_ChirpConfigParams.pnumAdcSamples = numAdcSamples;
            m_ChirpConfigParams.digOutSampleRate = digOutSampleRate;
            m_ChirpConfigParams.hpfCornerFreq1 = hpfCornerFreq1;
            m_ChirpConfigParams.hpfCornerFreq2 = hpfCornerFreq2;
            m_ChirpConfigParams.rxGain = rxGain;
            m_ChirpConfigParams.RFGainTarget = (char)rfGainTarget;
            m_ChirpConfigParams.VCOSelect = vcoSelect;
            m_ChirpConfigParams.ForceVCOSelect = forceVCOSelect;
            m_ChirpConfigParams.RetainTxCalLUT = retainTxCalLUT;
            m_ChirpConfigParams.RetainRxCalLUT = retainRxCalLUT;
            ScriptOps.m_MainForm.ChirpConfigTab.UpdateProfileConfigDataFrmCmd();
        }

        public int UpdateNSetChirpConfData(ushort RadarDeviceId, ushort chirpStartIdx, ushort chirpEndIdx, ushort profileId, float startFreqVar, float freqSlopeVar, float idleTimeVar, float adcStartTimeVar, ushort tx1Enable, ushort tx2Enable, ushort tx3Enable)
        {
            int num = 0;
            GlobalRef.g_RadarDeviceId = (uint)RadarDeviceId;
            ScriptOps.m_MainForm.ChirpConfigTab.UpdateChirpConfigData();
            m_ChirpConfigParams.chirpStartIdx = chirpStartIdx;
            m_ChirpConfigParams.chirpEndIdx = chirpEndIdx;
            m_ChirpConfigParams.cprofileId = profileId;
            m_ChirpConfigParams.startFreqVar = startFreqVar;
            m_ChirpConfigParams.freqSlopeVar = freqSlopeVar;
            m_ChirpConfigParams.idleTimeVar = idleTimeVar;
            m_ChirpConfigParams.adcStartTimeVar = adcStartTimeVar;
            m_ChirpConfigParams.tx1Enable = tx1Enable;
            m_ChirpConfigParams.tx2Enable = tx2Enable;
            m_ChirpConfigParams.tx3Enable = tx3Enable;
            ScriptOps.m_MainForm.ChirpConfigTab.UpdateChirpConfigDataFrmCmd();
            return num + iSetChirpConfig_Gui(true, false);
        }

        public int UpdateNSetdynamicPowerSaveModeConfData(uint RadarDeviceId, ushort BlockCfgTX, ushort BlockCfgRX, ushort BlockCfgLODist)
        {
            int num = 0;
            GlobalRef.g_RadarDeviceId = RadarDeviceId;
            ScriptOps.m_MainForm.ChirpConfigTab.UpdateDynamicPowerSaveConfigData();
            m_DynamicPowerSaveConfigParams.BloclCfgTX = BlockCfgTX;
            m_DynamicPowerSaveConfigParams.BloclCfgRX = BlockCfgRX;
            m_DynamicPowerSaveConfigParams.BloclCfgLODist = BlockCfgLODist;
            ScriptOps.m_MainForm.ChirpConfigTab.UpdateDynamicPowerSaveConfigDataFrmCmd();
            return num + iSetDynamicPowerSaveConfig_Gui(true, false);
        }

        public int UpdateChirpConfData(ushort chirpStartIdx, ushort chirpEndIdx, ushort profileId, float startFreqVar, float freqSlopeVar, float idleTimeVar, float adcStartTimeVar, ushort tx1Enable, ushort tx2Enable, ushort tx3Enable)
        {
            int result = 0;
            ScriptOps.m_MainForm.ChirpConfigTab.UpdateChirpConfigData();
            m_ChirpConfigParams.chirpStartIdx = chirpStartIdx;
            m_ChirpConfigParams.chirpEndIdx = chirpEndIdx;
            m_ChirpConfigParams.cprofileId = profileId;
            m_ChirpConfigParams.startFreqVar = startFreqVar;
            m_ChirpConfigParams.freqSlopeVar = freqSlopeVar;
            m_ChirpConfigParams.idleTimeVar = idleTimeVar;
            m_ChirpConfigParams.adcStartTimeVar = adcStartTimeVar;
            m_ChirpConfigParams.tx1Enable = tx1Enable;
            m_ChirpConfigParams.tx2Enable = tx2Enable;
            m_ChirpConfigParams.tx3Enable = tx3Enable;
            ScriptOps.m_MainForm.ChirpConfigTab.UpdateChirpConfigDataFrmCmd();
            return result;
        }

        public int UpdateNSetFrameConfData(ushort RadarDeviceId, ushort chirpStartIdx, ushort chirpEndIdx, ushort frameCount, ushort loopCount, float periodicity, float triggerDelay, byte numDummyChirp, ushort TriggerSelect)
        {
            int num = 0;
            GlobalRef.g_RadarDeviceId = (uint)RadarDeviceId;
            ScriptOps.m_MainForm.ChirpConfigTab.UpdateChirpConfigData();
            m_ChirpConfigParams.fchirpStartIdx = chirpStartIdx;
            m_ChirpConfigParams.fchirpEndIdx = chirpEndIdx;
            m_ChirpConfigParams.frameCount = frameCount;
            m_ChirpConfigParams.loopCount = loopCount;
            m_ChirpConfigParams.periodicity = periodicity;
            m_ChirpConfigParams.triggerDelay = triggerDelay;
            m_ChirpConfigParams.numDummyChirpsAtEnd = numDummyChirp;
            m_ChirpConfigParams.TriggerSelect = TriggerSelect;
            m_ChirpConfigParams.FrameControl = 0;
            ScriptOps.m_MainForm.ChirpConfigTab.UpdateFrameConfigDataFrmCmd();
            return num + iSetFrameConfig_Gui(true, false);
        }

        public int UpdateNSetBPMChirpConfigData(ushort RadarDeviceId, ushort bpmChirpStartIndex, ushort bpmChirpEndIndex, ushort tx0Off, ushort tx0On, ushort tx1Off, ushort tx1On, ushort tx2Off, ushort tx2On)
        {
            int num = 0;
            GlobalRef.g_RadarDeviceId = (uint)RadarDeviceId;
            ScriptOps.m_MainForm.BpmConfigTab.UpdateBpmChirpConfigData();
            m_BpmChirpConfigParams.chirpStartIdx = bpmChirpStartIndex;
            m_BpmChirpConfigParams.chirpEndIdx = bpmChirpEndIndex;
            m_BpmChirpConfigParams.tx0Off = tx0Off;
            m_BpmChirpConfigParams.tx0On = tx0On;
            m_BpmChirpConfigParams.tx1Off = tx1Off;
            m_BpmChirpConfigParams.tx1On = tx1On;
            m_BpmChirpConfigParams.tx2Off = tx2Off;
            m_BpmChirpConfigParams.tx2On = tx2On;
            ScriptOps.m_MainForm.BpmConfigTab.UpdateBpmChirpConfigDataFrmCmd();
            return num + iSetBpmChirpConfig_Gui(true, false);
        }

        public int UpdateNSetAdvanceBPMPatternConfigData(ushort RadarDeviceId, byte BPMPatternIndex, byte Reserved, ushort ResetOption, ushort Reserved1, ushort Reserved2, string Tx0BPMpattern0, uint Tx0BPMpattern1, uint Tx0BPMpattern2, uint Tx0BPMpattern3, uint Tx0BPMpattern4, uint Tx0BPMpattern5, uint Tx0BPMpattern6, uint Tx0BPMpattern7, uint Tx0BPMpattern8, uint Tx0BPMpattern9, uint Tx0BPMpattern10, uint Tx0BPMpattern11, uint Tx0BPMpattern12, uint Tx0BPMpattern13, uint Tx0BPMpattern14, uint Tx0BPMpattern15, uint Tx1BPMpattern0, uint Tx1BPMpattern1, uint Tx1BPMpattern2, uint Tx1BPMpattern3, uint Tx1BPMpattern4, uint Tx1BPMpattern5, uint Tx1BPMpattern6, uint Tx1BPMpattern7, uint Tx1BPMpattern8, uint Tx1BPMpattern9, uint Tx1BPMpattern10, uint Tx1BPMpattern11, uint Tx1BPMpattern12, uint Tx1BPMpattern13, uint Tx1BPMpattern14, uint Tx1BPMpattern15, uint Tx2BPMpattern0, uint Tx2BPMpattern1, uint Tx2BPMpattern2, uint Tx2BPMpattern3, uint Tx2BPMpattern4, uint Tx2BPMpattern5, uint Tx2BPMpattern6, uint Tx2BPMpattern7, uint Tx2BPMpattern8, uint Tx2BPMpattern9, uint Tx2BPMpattern10, uint Tx2BPMpattern11, uint Tx2BPMpattern12, uint Tx2BPMpattern13, uint Tx2BPMpattern14, uint Tx2BPMpattern15)
        {
            int num = 0;
            GlobalRef.g_RadarDeviceId = (uint)RadarDeviceId;
            ScriptOps.m_MainForm.BpmConfigTab.UpdateAdvanceBPMPatternConfigData();
            m_AdvanceBPMPatternConfigParams.BPMPatternIndex = BPMPatternIndex;
            m_AdvanceBPMPatternConfigParams.Reserved = BPMPatternIndex;
            m_AdvanceBPMPatternConfigParams.ResetOption = ResetOption;
            m_AdvanceBPMPatternConfigParams.Reserved1 = Reserved1;
            m_AdvanceBPMPatternConfigParams.Reserved2 = Reserved2;
            m_AdvanceBPMPatternConfigParams.Tx0BPMpattern0 = Convert.ToUInt32(Tx0BPMpattern0);
            m_AdvanceBPMPatternConfigParams.Tx0BPMpattern1 = Tx0BPMpattern1;
            m_AdvanceBPMPatternConfigParams.Tx0BPMpattern2 = Tx0BPMpattern2;
            m_AdvanceBPMPatternConfigParams.Tx0BPMpattern3 = Tx0BPMpattern3;
            m_AdvanceBPMPatternConfigParams.Tx0BPMpattern4 = Tx0BPMpattern4;
            m_AdvanceBPMPatternConfigParams.Tx0BPMpattern5 = Tx0BPMpattern5;
            m_AdvanceBPMPatternConfigParams.Tx0BPMpattern6 = Tx0BPMpattern6;
            m_AdvanceBPMPatternConfigParams.Tx0BPMpattern7 = Tx0BPMpattern7;
            m_AdvanceBPMPatternConfigParams.Tx0BPMpattern8 = Tx0BPMpattern8;
            m_AdvanceBPMPatternConfigParams.Tx0BPMpattern9 = Tx0BPMpattern9;
            m_AdvanceBPMPatternConfigParams.Tx0BPMpattern10 = Tx0BPMpattern10;
            m_AdvanceBPMPatternConfigParams.Tx0BPMpattern11 = Tx0BPMpattern11;
            m_AdvanceBPMPatternConfigParams.Tx0BPMpattern12 = Tx0BPMpattern12;
            m_AdvanceBPMPatternConfigParams.Tx0BPMpattern13 = Tx0BPMpattern13;
            m_AdvanceBPMPatternConfigParams.Tx0BPMpattern14 = Tx0BPMpattern14;
            m_AdvanceBPMPatternConfigParams.Tx0BPMpattern15 = Tx0BPMpattern15;
            m_AdvanceBPMPatternConfigParams.Tx1BPMpattern0 = Tx1BPMpattern0;
            m_AdvanceBPMPatternConfigParams.Tx1BPMpattern1 = Tx1BPMpattern1;
            m_AdvanceBPMPatternConfigParams.Tx1BPMpattern2 = Tx1BPMpattern2;
            m_AdvanceBPMPatternConfigParams.Tx1BPMpattern3 = Tx1BPMpattern3;
            m_AdvanceBPMPatternConfigParams.Tx1BPMpattern4 = Tx1BPMpattern4;
            m_AdvanceBPMPatternConfigParams.Tx1BPMpattern5 = Tx1BPMpattern5;
            m_AdvanceBPMPatternConfigParams.Tx1BPMpattern6 = Tx1BPMpattern6;
            m_AdvanceBPMPatternConfigParams.Tx1BPMpattern7 = Tx1BPMpattern7;
            m_AdvanceBPMPatternConfigParams.Tx1BPMpattern8 = Tx1BPMpattern8;
            m_AdvanceBPMPatternConfigParams.Tx1BPMpattern9 = Tx1BPMpattern9;
            m_AdvanceBPMPatternConfigParams.Tx1BPMpattern10 = Tx1BPMpattern10;
            m_AdvanceBPMPatternConfigParams.Tx1BPMpattern11 = Tx1BPMpattern11;
            m_AdvanceBPMPatternConfigParams.Tx1BPMpattern12 = Tx1BPMpattern12;
            m_AdvanceBPMPatternConfigParams.Tx1BPMpattern13 = Tx1BPMpattern13;
            m_AdvanceBPMPatternConfigParams.Tx1BPMpattern14 = Tx1BPMpattern14;
            m_AdvanceBPMPatternConfigParams.Tx1BPMpattern15 = Tx1BPMpattern15;
            m_AdvanceBPMPatternConfigParams.Tx2BPMpattern0 = Tx2BPMpattern0;
            m_AdvanceBPMPatternConfigParams.Tx2BPMpattern1 = Tx2BPMpattern1;
            m_AdvanceBPMPatternConfigParams.Tx2BPMpattern2 = Tx2BPMpattern2;
            m_AdvanceBPMPatternConfigParams.Tx2BPMpattern3 = Tx2BPMpattern3;
            m_AdvanceBPMPatternConfigParams.Tx2BPMpattern4 = Tx2BPMpattern4;
            m_AdvanceBPMPatternConfigParams.Tx2BPMpattern5 = Tx2BPMpattern5;
            m_AdvanceBPMPatternConfigParams.Tx2BPMpattern6 = Tx2BPMpattern6;
            m_AdvanceBPMPatternConfigParams.Tx2BPMpattern7 = Tx2BPMpattern7;
            m_AdvanceBPMPatternConfigParams.Tx2BPMpattern8 = Tx2BPMpattern8;
            m_AdvanceBPMPatternConfigParams.Tx2BPMpattern9 = Tx2BPMpattern9;
            m_AdvanceBPMPatternConfigParams.Tx2BPMpattern10 = Tx2BPMpattern10;
            m_AdvanceBPMPatternConfigParams.Tx2BPMpattern11 = Tx2BPMpattern11;
            m_AdvanceBPMPatternConfigParams.Tx2BPMpattern12 = Tx2BPMpattern12;
            m_AdvanceBPMPatternConfigParams.Tx2BPMpattern13 = Tx2BPMpattern13;
            m_AdvanceBPMPatternConfigParams.Tx2BPMpattern14 = Tx2BPMpattern14;
            m_AdvanceBPMPatternConfigParams.Tx2BPMpattern15 = Tx2BPMpattern15;
            ScriptOps.m_MainForm.BpmConfigTab.UpdateAdvanceBPMPatternConfigDataFrmCmd();
            return num + iSetAdvanceBPMPatternConfig_Gui(true, false);
        }

        public int UpdateNSetChirpBasedPhaseShifterConfigData(ushort RadarDeviceId, ushort ChirpStartIndex, ushort ChirpEndIndex, ushort Tx0PhaseShifter, ushort Tx1PhaseShifter, ushort Tx2PhaseShifter)
        {
            int num = 0;
            GlobalRef.g_RadarDeviceId = (uint)RadarDeviceId;
            ScriptOps.m_MainForm.BpmConfigTab.UpdatePerChirpPhaseShifterConfigData();
            m_PerChirpPhaseShifterConfigParams.chirpStartIdx = ChirpStartIndex;
            m_PerChirpPhaseShifterConfigParams.chirpEndIdx = ChirpEndIndex;
            m_PerChirpPhaseShifterConfigParams.Tx0PhaseShifter = (char)Tx0PhaseShifter;
            m_PerChirpPhaseShifterConfigParams.Tx1PhaseShifter = (char)Tx1PhaseShifter;
            m_PerChirpPhaseShifterConfigParams.Tx2PhaseShifter = (char)Tx2PhaseShifter;
            ScriptOps.m_MainForm.BpmConfigTab.UpdatePerChirpPhaseShifterConfigDataFrmCmd();
            return num + iSetPerChirpPhaseShifterConfig_Gui(true, false);
        }

        public int UpdateNSetPALoopBackConfigData(ushort RadarDeviceId, ushort PALoopBackFreq, ushort PALoopBackEnabled)
        {
            int num = 0;
            GlobalRef.g_RadarDeviceId = (uint)RadarDeviceId;
            ScriptOps.m_MainForm.LoopBack.UpdateRFPALoopBackConfigDataFromGUI();
            m_RFPALoopBackConfigParams.LoopBackFreq = PALoopBackFreq;
            m_RFPALoopBackConfigParams.LoopBackEnable = (char)PALoopBackEnabled;
            ScriptOps.m_MainForm.LoopBack.UpdateRFPALoopBackConfigDataFrmCmd();
            return num + iSetRFPALoopBackConfig_Gui(true, false);
        }

        public int UpdateNSetPSLoopBackConfigData(ushort RadarDeviceId, ushort PSLoopBackFreq, ushort PSLoopBackEnabled, ushort PSLoopBackTXId0, ushort PSLoopBackTXId1, ushort PGAGainIndex)
        {
            int num = 0;
            GlobalRef.g_RadarDeviceId = (uint)RadarDeviceId;
            ScriptOps.m_MainForm.LoopBack.UpdateRFPSLoopBackConfigDataFromGUI();
            m_RFPSLoopBackConfigParams.LoopBackFreq = PSLoopBackFreq;
            m_RFPSLoopBackConfigParams.LoopBackEnable = (char)PSLoopBackEnabled;
            m_RFPSLoopBackConfigParams.LoopBackTXIdTx0 = (char)PSLoopBackTXId0;
            m_RFPSLoopBackConfigParams.LoopBackTXIdTx1 = (char)PSLoopBackTXId1;
            m_RFPSLoopBackConfigParams.PGAGainIndex = (char)PGAGainIndex;
            ScriptOps.m_MainForm.LoopBack.UpdateRFPSLoopBackConfigDataFrmCmd();
            return num + iSetRFPSLoopBackConfig_Gui(true, false);
        }

        public int UpdateNSetIFLoopBackConfigData(ushort RadarDeviceId, ushort IFLoopBackFreq, ushort IFLoopBackEnabled)
        {
            int num = 0;
            GlobalRef.g_RadarDeviceId = (uint)RadarDeviceId;
            ScriptOps.m_MainForm.LoopBack.UpdateRFIFLoopBackConfigDataFromGUI();
            m_RFIFLoopBackConfigParams.LoopBackFreq = IFLoopBackFreq;
            m_RFIFLoopBackConfigParams.LoopBackEnable = (char)IFLoopBackEnabled;
            ScriptOps.m_MainForm.LoopBack.UpdateRFIFLoopBackConfigDataFrmCmd();
            return num + iSetRFIFLoopBackConfig_Gui(true, false);
        }

        public int UpdateNSetProgramFilterCoeffRAMConfigDataClear(ushort RadarDeviceId)
        {
            int result = 0;
            int i = 0;
            GlobalRef.g_RadarDeviceId = (uint)RadarDeviceId;
            while (i <= 103)
            {
                GlobalRef.CoeffRAM[i] = 0;
                i++;
            }
            return result;
        }

        public int UpdateNSetProgramFilterCoeffRAMConfigData(ushort RadarDeviceId)
        {
            int num = 0;
            GlobalRef.g_RadarDeviceId = (uint)RadarDeviceId;
            return num + iSetExternalFilterCoefficientRAMConfig_Gui(true, false);
        }

        public int m00008c(ushort RadarDeviceId, short FirstCoeff, short SecondCoeff, short ThirdCoeff, short FourthCoeff, short FifthCoeff, short SixthCoeff, short SeventhCoeff, short EigthCoeff, short NinethCoeff, short TenthCoeff)
        {
            int result = 0;
            GlobalRef.g_RadarDeviceId = (uint)RadarDeviceId;
            GlobalRef.CoeffRAM[0] = FirstCoeff;
            GlobalRef.CoeffRAM[1] = SecondCoeff;
            GlobalRef.CoeffRAM[2] = ThirdCoeff;
            GlobalRef.CoeffRAM[3] = FourthCoeff;
            GlobalRef.CoeffRAM[4] = FifthCoeff;
            GlobalRef.CoeffRAM[5] = SixthCoeff;
            GlobalRef.CoeffRAM[6] = SeventhCoeff;
            GlobalRef.CoeffRAM[7] = EigthCoeff;
            GlobalRef.CoeffRAM[8] = NinethCoeff;
            GlobalRef.CoeffRAM[9] = TenthCoeff;
            if (m_RadarDeviceModeConfigParams.NumberOfRadarDevicesDetected <= 1)
            {
                string full_command = string.Format("ar1.SetProgFiltCoeffRam1to10({0},{1},{2},{3},{4},{5},{6},{7},{8},{9})", new object[]
                {
                    FirstCoeff,
                    SecondCoeff,
                    ThirdCoeff,
                    FourthCoeff,
                    FifthCoeff,
                    SixthCoeff,
                    SeventhCoeff,
                    EigthCoeff,
                    NinethCoeff,
                    TenthCoeff
                });
                m_GuiManager.RecordLog(8, full_command);
            }
            else
            {
                string full_command2 = string.Format("ar1.SetProgFiltCoeffRam1to10_mult({0},{1},{2},{3},{4},{5},{6},{7},{8},{9},{10})", new object[]
                {
                    GlobalRef.g_RadarDeviceId,
                    FirstCoeff,
                    SecondCoeff,
                    ThirdCoeff,
                    FourthCoeff,
                    FifthCoeff,
                    SixthCoeff,
                    SeventhCoeff,
                    EigthCoeff,
                    NinethCoeff,
                    TenthCoeff
                });
                m_GuiManager.RecordLog(8, full_command2);
            }
            return result;
        }

        public int m00008d(ushort RadarDeviceId, short FirstCoeff, short SecondCoeff, short ThirdCoeff, short FourthCoeff, short FifthCoeff, short SixthCoeff, short SeventhCoeff, short EigthCoeff, short NinethCoeff, short TenthCoeff)
        {
            int result = 0;
            GlobalRef.g_RadarDeviceId = (uint)RadarDeviceId;
            GlobalRef.CoeffRAM[10] = FirstCoeff;
            GlobalRef.CoeffRAM[11] = SecondCoeff;
            GlobalRef.CoeffRAM[12] = ThirdCoeff;
            GlobalRef.CoeffRAM[13] = FourthCoeff;
            GlobalRef.CoeffRAM[14] = FifthCoeff;
            GlobalRef.CoeffRAM[15] = SixthCoeff;
            GlobalRef.CoeffRAM[16] = SeventhCoeff;
            GlobalRef.CoeffRAM[17] = EigthCoeff;
            GlobalRef.CoeffRAM[18] = NinethCoeff;
            GlobalRef.CoeffRAM[19] = TenthCoeff;
            if (m_RadarDeviceModeConfigParams.NumberOfRadarDevicesDetected <= 1)
            {
                string full_command = string.Format("ar1.SetProgFiltCoeffRam11to20({0},{1},{2},{3},{4},{5},{6},{7},{8},{9})", new object[]
                {
                    FirstCoeff,
                    SecondCoeff,
                    ThirdCoeff,
                    FourthCoeff,
                    FifthCoeff,
                    SixthCoeff,
                    SeventhCoeff,
                    EigthCoeff,
                    NinethCoeff,
                    TenthCoeff
                });
                m_GuiManager.RecordLog(8, full_command);
            }
            else
            {
                string full_command2 = string.Format("ar1.SetProgFiltCoeffRam11to20_mult({0},{1},{2},{3},{4},{5},{6},{7},{8},{9},{10})", new object[]
                {
                    GlobalRef.g_RadarDeviceId,
                    FirstCoeff,
                    SecondCoeff,
                    ThirdCoeff,
                    FourthCoeff,
                    FifthCoeff,
                    SixthCoeff,
                    SeventhCoeff,
                    EigthCoeff,
                    NinethCoeff,
                    TenthCoeff
                });
                m_GuiManager.RecordLog(8, full_command2);
            }
            return result;
        }

        public int m00008e(ushort RadarDeviceId, short FirstCoeff, short SecondCoeff, short ThirdCoeff, short FourthCoeff, short FifthCoeff, short SixthCoeff, short SeventhCoeff, short EigthCoeff, short NinethCoeff, short TenthCoeff)
        {
            int result = 0;
            GlobalRef.g_RadarDeviceId = (uint)RadarDeviceId;
            GlobalRef.CoeffRAM[20] = FirstCoeff;
            GlobalRef.CoeffRAM[21] = SecondCoeff;
            GlobalRef.CoeffRAM[22] = ThirdCoeff;
            GlobalRef.CoeffRAM[23] = FourthCoeff;
            GlobalRef.CoeffRAM[24] = FifthCoeff;
            GlobalRef.CoeffRAM[25] = SixthCoeff;
            GlobalRef.CoeffRAM[26] = SeventhCoeff;
            GlobalRef.CoeffRAM[27] = EigthCoeff;
            GlobalRef.CoeffRAM[28] = NinethCoeff;
            GlobalRef.CoeffRAM[29] = TenthCoeff;
            if (m_RadarDeviceModeConfigParams.NumberOfRadarDevicesDetected <= 1)
            {
                string full_command = string.Format("ar1.SetProgFiltCoeffRam21to30({0},{1},{2},{3},{4},{5},{6},{7},{8},{9})", new object[]
                {
                    FirstCoeff,
                    SecondCoeff,
                    ThirdCoeff,
                    FourthCoeff,
                    FifthCoeff,
                    SixthCoeff,
                    SeventhCoeff,
                    EigthCoeff,
                    NinethCoeff,
                    TenthCoeff
                });
                m_GuiManager.RecordLog(8, full_command);
            }
            else
            {
                string full_command2 = string.Format("ar1.SetProgFiltCoeffRam21to30_mult({0},{1},{2},{3},{4},{5},{6},{7},{8},{9},{10})", new object[]
                {
                    GlobalRef.g_RadarDeviceId,
                    FirstCoeff,
                    SecondCoeff,
                    ThirdCoeff,
                    FourthCoeff,
                    FifthCoeff,
                    SixthCoeff,
                    SeventhCoeff,
                    EigthCoeff,
                    NinethCoeff,
                    TenthCoeff
                });
                m_GuiManager.RecordLog(8, full_command2);
            }
            return result;
        }

        public int m00008f(ushort RadarDeviceId, short FirstCoeff, short SecondCoeff, short ThirdCoeff, short FourthCoeff, short FifthCoeff, short SixthCoeff, short SeventhCoeff, short EigthCoeff, short NinethCoeff, short TenthCoeff)
        {
            int result = 0;
            GlobalRef.g_RadarDeviceId = (uint)RadarDeviceId;
            GlobalRef.CoeffRAM[30] = FirstCoeff;
            GlobalRef.CoeffRAM[31] = SecondCoeff;
            GlobalRef.CoeffRAM[32] = ThirdCoeff;
            GlobalRef.CoeffRAM[33] = FourthCoeff;
            GlobalRef.CoeffRAM[34] = FifthCoeff;
            GlobalRef.CoeffRAM[35] = SixthCoeff;
            GlobalRef.CoeffRAM[36] = SeventhCoeff;
            GlobalRef.CoeffRAM[37] = EigthCoeff;
            GlobalRef.CoeffRAM[38] = NinethCoeff;
            GlobalRef.CoeffRAM[39] = TenthCoeff;
            if (m_RadarDeviceModeConfigParams.NumberOfRadarDevicesDetected <= 1)
            {
                string full_command = string.Format("ar1.SetProgFiltCoeffRam31to40({0},{1},{2},{3},{4},{5},{6},{7},{8},{9})", new object[]
                {
                    FirstCoeff,
                    SecondCoeff,
                    ThirdCoeff,
                    FourthCoeff,
                    FifthCoeff,
                    SixthCoeff,
                    SeventhCoeff,
                    EigthCoeff,
                    NinethCoeff,
                    TenthCoeff
                });
                m_GuiManager.RecordLog(8, full_command);
            }
            else
            {
                string full_command2 = string.Format("ar1.SetProgFiltCoeffRam31to40_mult({0},{1},{2},{3},{4},{5},{6},{7},{8},{9},{10})", new object[]
                {
                    GlobalRef.g_RadarDeviceId,
                    FirstCoeff,
                    SecondCoeff,
                    ThirdCoeff,
                    FourthCoeff,
                    FifthCoeff,
                    SixthCoeff,
                    SeventhCoeff,
                    EigthCoeff,
                    NinethCoeff,
                    TenthCoeff
                });
                m_GuiManager.RecordLog(8, full_command2);
            }
            return result;
        }

        public int m000090(ushort RadarDeviceId, short FirstCoeff, short SecondCoeff, short ThirdCoeff, short FourthCoeff, short FifthCoeff, short SixthCoeff, short SeventhCoeff, short EigthCoeff, short NinethCoeff, short TenthCoeff)
        {
            int result = 0;
            GlobalRef.g_RadarDeviceId = (uint)RadarDeviceId;
            GlobalRef.CoeffRAM[40] = FirstCoeff;
            GlobalRef.CoeffRAM[41] = SecondCoeff;
            GlobalRef.CoeffRAM[42] = ThirdCoeff;
            GlobalRef.CoeffRAM[43] = FourthCoeff;
            GlobalRef.CoeffRAM[44] = FifthCoeff;
            GlobalRef.CoeffRAM[45] = SixthCoeff;
            GlobalRef.CoeffRAM[46] = SeventhCoeff;
            GlobalRef.CoeffRAM[47] = EigthCoeff;
            GlobalRef.CoeffRAM[48] = NinethCoeff;
            GlobalRef.CoeffRAM[49] = TenthCoeff;
            if (m_RadarDeviceModeConfigParams.NumberOfRadarDevicesDetected <= 1)
            {
                string full_command = string.Format("ar1.SetProgFiltCoeffRam41to50({0},{1},{2},{3},{4},{5},{6},{7},{8},{9})", new object[]
                {
                    FirstCoeff,
                    SecondCoeff,
                    ThirdCoeff,
                    FourthCoeff,
                    FifthCoeff,
                    SixthCoeff,
                    SeventhCoeff,
                    EigthCoeff,
                    NinethCoeff,
                    TenthCoeff
                });
                m_GuiManager.RecordLog(8, full_command);
            }
            else
            {
                string full_command2 = string.Format("ar1.SetProgFiltCoeffRam41to50_mult({0},{1},{2},{3},{4},{5},{6},{7},{8},{9},{10})", new object[]
                {
                    GlobalRef.g_RadarDeviceId,
                    FirstCoeff,
                    SecondCoeff,
                    ThirdCoeff,
                    FourthCoeff,
                    FifthCoeff,
                    SixthCoeff,
                    SeventhCoeff,
                    EigthCoeff,
                    NinethCoeff,
                    TenthCoeff
                });
                m_GuiManager.RecordLog(8, full_command2);
            }
            return result;
        }

        public int m000091(ushort RadarDeviceId, short FirstCoeff, short SecondCoeff, short ThirdCoeff, short FourthCoeff, short FifthCoeff, short SixthCoeff, short SeventhCoeff, short EigthCoeff, short NinethCoeff, short TenthCoeff)
        {
            int result = 0;
            GlobalRef.g_RadarDeviceId = (uint)RadarDeviceId;
            GlobalRef.CoeffRAM[50] = FirstCoeff;
            GlobalRef.CoeffRAM[51] = SecondCoeff;
            GlobalRef.CoeffRAM[52] = ThirdCoeff;
            GlobalRef.CoeffRAM[53] = FourthCoeff;
            GlobalRef.CoeffRAM[54] = FifthCoeff;
            GlobalRef.CoeffRAM[55] = SixthCoeff;
            GlobalRef.CoeffRAM[56] = SeventhCoeff;
            GlobalRef.CoeffRAM[57] = EigthCoeff;
            GlobalRef.CoeffRAM[58] = NinethCoeff;
            GlobalRef.CoeffRAM[59] = TenthCoeff;
            if (m_RadarDeviceModeConfigParams.NumberOfRadarDevicesDetected <= 1)
            {
                string full_command = string.Format("ar1.SetProgFiltCoeffRam51to60({0},{1},{2},{3},{4},{5},{6},{7},{8},{9})", new object[]
                {
                    FirstCoeff,
                    SecondCoeff,
                    ThirdCoeff,
                    FourthCoeff,
                    FifthCoeff,
                    SixthCoeff,
                    SeventhCoeff,
                    EigthCoeff,
                    NinethCoeff,
                    TenthCoeff
                });
                m_GuiManager.RecordLog(8, full_command);
            }
            else
            {
                string full_command2 = string.Format("ar1.SetProgFiltCoeffRam51to60_mult({0},{1},{2},{3},{4},{5},{6},{7},{8},{9},{10})", new object[]
                {
                    GlobalRef.g_RadarDeviceId,
                    FirstCoeff,
                    SecondCoeff,
                    ThirdCoeff,
                    FourthCoeff,
                    FifthCoeff,
                    SixthCoeff,
                    SeventhCoeff,
                    EigthCoeff,
                    NinethCoeff,
                    TenthCoeff
                });
                m_GuiManager.RecordLog(8, full_command2);
            }
            return result;
        }

        public int m000092(ushort RadarDeviceId, short FirstCoeff, short SecondCoeff, short ThirdCoeff, short FourthCoeff, short FifthCoeff, short SixthCoeff, short SeventhCoeff, short EigthCoeff, short NinethCoeff, short TenthCoeff)
        {
            int result = 0;
            GlobalRef.g_RadarDeviceId = (uint)RadarDeviceId;
            GlobalRef.CoeffRAM[60] = FirstCoeff;
            GlobalRef.CoeffRAM[61] = SecondCoeff;
            GlobalRef.CoeffRAM[62] = ThirdCoeff;
            GlobalRef.CoeffRAM[63] = FourthCoeff;
            GlobalRef.CoeffRAM[64] = FifthCoeff;
            GlobalRef.CoeffRAM[65] = SixthCoeff;
            GlobalRef.CoeffRAM[66] = SeventhCoeff;
            GlobalRef.CoeffRAM[67] = EigthCoeff;
            GlobalRef.CoeffRAM[68] = NinethCoeff;
            GlobalRef.CoeffRAM[69] = TenthCoeff;
            if (m_RadarDeviceModeConfigParams.NumberOfRadarDevicesDetected <= 1)
            {
                string full_command = string.Format("ar1.SetProgFiltCoeffRam61to70({0},{1},{2},{3},{4},{5},{6},{7},{8},{9})", new object[]
                {
                    FirstCoeff,
                    SecondCoeff,
                    ThirdCoeff,
                    FourthCoeff,
                    FifthCoeff,
                    SixthCoeff,
                    SeventhCoeff,
                    EigthCoeff,
                    NinethCoeff,
                    TenthCoeff
                });
                m_GuiManager.RecordLog(8, full_command);
            }
            else
            {
                string full_command2 = string.Format("ar1.SetProgFiltCoeffRam61to70_mult({0},{1},{2},{3},{4},{5},{6},{7},{8},{9},{10})", new object[]
                {
                    GlobalRef.g_RadarDeviceId,
                    FirstCoeff,
                    SecondCoeff,
                    ThirdCoeff,
                    FourthCoeff,
                    FifthCoeff,
                    SixthCoeff,
                    SeventhCoeff,
                    EigthCoeff,
                    NinethCoeff,
                    TenthCoeff
                });
                m_GuiManager.RecordLog(8, full_command2);
            }
            return result;
        }

        public int m000093(ushort RadarDeviceId, short FirstCoeff, short SecondCoeff, short ThirdCoeff, short FourthCoeff, short FifthCoeff, short SixthCoeff, short SeventhCoeff, short EigthCoeff, short NinethCoeff, short TenthCoeff)
        {
            int result = 0;
            GlobalRef.g_RadarDeviceId = (uint)RadarDeviceId;
            GlobalRef.CoeffRAM[70] = FirstCoeff;
            GlobalRef.CoeffRAM[71] = SecondCoeff;
            GlobalRef.CoeffRAM[72] = ThirdCoeff;
            GlobalRef.CoeffRAM[73] = FourthCoeff;
            GlobalRef.CoeffRAM[74] = FifthCoeff;
            GlobalRef.CoeffRAM[75] = SixthCoeff;
            GlobalRef.CoeffRAM[76] = SeventhCoeff;
            GlobalRef.CoeffRAM[77] = EigthCoeff;
            GlobalRef.CoeffRAM[78] = NinethCoeff;
            GlobalRef.CoeffRAM[79] = TenthCoeff;
            if (m_RadarDeviceModeConfigParams.NumberOfRadarDevicesDetected <= 1)
            {
                string full_command = string.Format("ar1.SetProgFiltCoeffRam71to80({0},{1},{2},{3},{4},{5},{6},{7},{8},{9})", new object[]
                {
                    FirstCoeff,
                    SecondCoeff,
                    ThirdCoeff,
                    FourthCoeff,
                    FifthCoeff,
                    SixthCoeff,
                    SeventhCoeff,
                    EigthCoeff,
                    NinethCoeff,
                    TenthCoeff
                });
                m_GuiManager.RecordLog(8, full_command);
            }
            else
            {
                string full_command2 = string.Format("ar1.SetProgFiltCoeffRam71to80_mult({0},{1},{2},{3},{4},{5},{6},{7},{8},{9},{10})", new object[]
                {
                    GlobalRef.g_RadarDeviceId,
                    FirstCoeff,
                    SecondCoeff,
                    ThirdCoeff,
                    FourthCoeff,
                    FifthCoeff,
                    SixthCoeff,
                    SeventhCoeff,
                    EigthCoeff,
                    NinethCoeff,
                    TenthCoeff
                });
                m_GuiManager.RecordLog(8, full_command2);
            }
            return result;
        }

        public int m000094(ushort RadarDeviceId, short FirstCoeff, short SecondCoeff, short ThirdCoeff, short FourthCoeff, short FifthCoeff, short SixthCoeff, short SeventhCoeff, short EigthCoeff, short NinethCoeff, short TenthCoeff)
        {
            int result = 0;
            GlobalRef.g_RadarDeviceId = (uint)RadarDeviceId;
            GlobalRef.CoeffRAM[80] = FirstCoeff;
            GlobalRef.CoeffRAM[81] = SecondCoeff;
            GlobalRef.CoeffRAM[82] = ThirdCoeff;
            GlobalRef.CoeffRAM[83] = FourthCoeff;
            GlobalRef.CoeffRAM[84] = FifthCoeff;
            GlobalRef.CoeffRAM[85] = SixthCoeff;
            GlobalRef.CoeffRAM[86] = SeventhCoeff;
            GlobalRef.CoeffRAM[87] = EigthCoeff;
            GlobalRef.CoeffRAM[88] = NinethCoeff;
            GlobalRef.CoeffRAM[89] = TenthCoeff;
            if (m_RadarDeviceModeConfigParams.NumberOfRadarDevicesDetected <= 1)
            {
                string full_command = string.Format("ar1.SetProgFiltCoeffRam81to90({0},{1},{2},{3},{4},{5},{6},{7},{8},{9})", new object[]
                {
                    FirstCoeff,
                    SecondCoeff,
                    ThirdCoeff,
                    FourthCoeff,
                    FifthCoeff,
                    SixthCoeff,
                    SeventhCoeff,
                    EigthCoeff,
                    NinethCoeff,
                    TenthCoeff
                });
                m_GuiManager.RecordLog(8, full_command);
            }
            else
            {
                string full_command2 = string.Format("ar1.SetProgFiltCoeffRam81to90_mult({0},{1},{2},{3},{4},{5},{6},{7},{8},{9},{10})", new object[]
                {
                    GlobalRef.g_RadarDeviceId,
                    FirstCoeff,
                    SecondCoeff,
                    ThirdCoeff,
                    FourthCoeff,
                    FifthCoeff,
                    SixthCoeff,
                    SeventhCoeff,
                    EigthCoeff,
                    NinethCoeff,
                    TenthCoeff
                });
                m_GuiManager.RecordLog(8, full_command2);
            }
            return result;
        }

        public int m000095(ushort RadarDeviceId, short FirstCoeff, short SecondCoeff, short ThirdCoeff, short FourthCoeff, short FifthCoeff, short SixthCoeff, short SeventhCoeff, short EigthCoeff, short NinethCoeff, short TenthCoeff)
        {
            int result = 0;
            GlobalRef.g_RadarDeviceId = (uint)RadarDeviceId;
            GlobalRef.CoeffRAM[90] = FirstCoeff;
            GlobalRef.CoeffRAM[91] = SecondCoeff;
            GlobalRef.CoeffRAM[92] = ThirdCoeff;
            GlobalRef.CoeffRAM[93] = FourthCoeff;
            GlobalRef.CoeffRAM[94] = FifthCoeff;
            GlobalRef.CoeffRAM[95] = SixthCoeff;
            GlobalRef.CoeffRAM[96] = SeventhCoeff;
            GlobalRef.CoeffRAM[97] = EigthCoeff;
            GlobalRef.CoeffRAM[98] = NinethCoeff;
            GlobalRef.CoeffRAM[99] = TenthCoeff;
            if (m_RadarDeviceModeConfigParams.NumberOfRadarDevicesDetected <= 1)
            {
                string full_command = string.Format("ar1.SetProgFiltCoeffRam91to100({0},{1},{2},{3},{4},{5},{6},{7},{8},{9})", new object[]
                {
                    FirstCoeff,
                    SecondCoeff,
                    ThirdCoeff,
                    FourthCoeff,
                    FifthCoeff,
                    SixthCoeff,
                    SeventhCoeff,
                    EigthCoeff,
                    NinethCoeff,
                    TenthCoeff
                });
                m_GuiManager.RecordLog(8, full_command);
            }
            else
            {
                string full_command2 = string.Format("ar1.SetProgFiltCoeffRam91to100_mult({0},{1},{2},{3},{4},{5},{6},{7},{8},{9},{10})", new object[]
                {
                    GlobalRef.g_RadarDeviceId,
                    FirstCoeff,
                    SecondCoeff,
                    ThirdCoeff,
                    FourthCoeff,
                    FifthCoeff,
                    SixthCoeff,
                    SeventhCoeff,
                    EigthCoeff,
                    NinethCoeff,
                    TenthCoeff
                });
                m_GuiManager.RecordLog(8, full_command2);
            }
            return result;
        }

        public int m000096(ushort RadarDeviceId, short FirstCoeff, short SecondCoeff, short ThirdCoeff, short FourthCoeff)
        {
            int result = 0;
            GlobalRef.g_RadarDeviceId = (uint)RadarDeviceId;
            GlobalRef.CoeffRAM[100] = FirstCoeff;
            GlobalRef.CoeffRAM[101] = SecondCoeff;
            GlobalRef.CoeffRAM[102] = ThirdCoeff;
            GlobalRef.CoeffRAM[103] = FourthCoeff;
            if (m_RadarDeviceModeConfigParams.NumberOfRadarDevicesDetected <= 1)
            {
                string full_command = string.Format("ar1.SetProgFiltCoeffRam101to104({0},{1},{2},{3})", new object[]
                {
                    FirstCoeff,
                    SecondCoeff,
                    ThirdCoeff,
                    FourthCoeff
                });
                m_GuiManager.RecordLog(8, full_command);
            }
            else
            {
                string full_command2 = string.Format("ar1.SetProgFiltCoeffRam101to104_mult({0},{1},{2},{3},{4})", new object[]
                {
                    GlobalRef.g_RadarDeviceId,
                    FirstCoeff,
                    SecondCoeff,
                    ThirdCoeff,
                    FourthCoeff
                });
                m_GuiManager.RecordLog(8, full_command2);
            }
            return result;
        }

        public int UpdateNSetProgramFilterConfigData(ushort RadarDeviceId, char ProfileIndex, char PFCoeffStartIndex, char ProgFilterLen, double FreqShiftFactor)
        {
            int num = 0;
            GlobalRef.g_RadarDeviceId = (uint)RadarDeviceId;
            ScriptOps.m_MainForm.ExternalFilterProgramming.UpdateExternalFilterProgConfigDataFromGUI();
            m_ExternalFilterProgConfigParams.ProfileIndex = ProfileIndex;
            m_ExternalFilterProgConfigParams.PFFilterCoeffStartIndex = PFCoeffStartIndex;
            m_ExternalFilterProgConfigParams.ProgFilterLength = ProgFilterLen;
            m_ExternalFilterProgConfigParams.FreqShiftFactor = FreqShiftFactor;
            ScriptOps.m_MainForm.ExternalFilterProgramming.UpdateExternalFilterProgConfigDataFrmCmd();
            return num + iSetExternalFilterProgConfig_Gui(true, false);
        }

        public int UpdateNSetGPADCExternalInputsConfigData(ushort RadarDeviceId, ushort SigInputEna, ushort SigBufEna, ushort ANATest1Cfg, ushort ANATest2Cfg, ushort ANATest3Cfg, ushort ANATest4Cfg, ushort ANAMuxCfg, ushort VSenseCfg, ushort Reserved1, uint Reserved2, uint Reserved3, uint Reserved4)
        {
            int num = 0;
            GlobalRef.g_RadarDeviceId = (uint)RadarDeviceId;
            ScriptOps.m_MainForm.ClibTab.UpdateGPADCMeasurementForExtIPConfigData();
            m_RfGPADCMeasureForExtInputConfigParams.ANATest1SignalInputEna = (ushort)(SigInputEna & 1);
            m_RfGPADCMeasureForExtInputConfigParams.ANATest2SignalInputEna = (ushort)(SigInputEna >> 1 & 1);
            m_RfGPADCMeasureForExtInputConfigParams.ANATest3SignalInputEna = (ushort)(SigInputEna >> 2 & 1);
            m_RfGPADCMeasureForExtInputConfigParams.ANATest4SignalInputEna = (ushort)(SigInputEna >> 3 & 1);
            m_RfGPADCMeasureForExtInputConfigParams.ANAMuxSignalInputEna = (ushort)(SigInputEna >> 4 & 1);
            m_RfGPADCMeasureForExtInputConfigParams.VSenseSignalInputEna = (ushort)(SigInputEna >> 5 & 1);
            m_RfGPADCMeasureForExtInputConfigParams.ANATest1SignalBufEna = (ushort)(SigBufEna & 1);
            m_RfGPADCMeasureForExtInputConfigParams.ANATest2SignalBufEna = (ushort)(SigBufEna >> 1 & 1);
            m_RfGPADCMeasureForExtInputConfigParams.ANATest3SignalBufEna = (ushort)(SigBufEna >> 2 & 1);
            m_RfGPADCMeasureForExtInputConfigParams.ANATest4SignalBufEna = (ushort)(SigBufEna >> 3 & 1);
            m_RfGPADCMeasureForExtInputConfigParams.ANAMuxSignalBufEna = (ushort)(SigBufEna >> 4 & 1);
            m_RfGPADCMeasureForExtInputConfigParams.ANATest1Cfg_NumSamples = (ushort)(ANATest1Cfg & 255);
            m_RfGPADCMeasureForExtInputConfigParams.ANATest2Cfg_NumSamples = (ushort)(ANATest2Cfg & 255);
            m_RfGPADCMeasureForExtInputConfigParams.ANATest3Cfg_NumSamples = (ushort)(ANATest3Cfg & 255);
            m_RfGPADCMeasureForExtInputConfigParams.ANATest4Cfg_NumSamples = (ushort)(ANATest4Cfg & 255);
            m_RfGPADCMeasureForExtInputConfigParams.ANAMuxCfg_NumSamples = (ushort)(ANAMuxCfg & 255);
            m_RfGPADCMeasureForExtInputConfigParams.VSenseCfg_NumSamples = (ushort)(VSenseCfg & 255);
            m_RfGPADCMeasureForExtInputConfigParams.ANATest1Cfg_SettlingTime = (float)((double)(ANATest1Cfg >> 8 & 255) * 0.8);
            m_RfGPADCMeasureForExtInputConfigParams.ANATest2Cfg_SettlingTime = (float)((double)(ANATest2Cfg >> 8 & 255) * 0.8);
            m_RfGPADCMeasureForExtInputConfigParams.ANATest3Cfg_SettlingTime = (float)((double)(ANATest3Cfg >> 8 & 255) * 0.8);
            m_RfGPADCMeasureForExtInputConfigParams.ANATest4Cfg_SettlingTime = (float)((double)(ANATest4Cfg >> 8 & 255) * 0.8);
            m_RfGPADCMeasureForExtInputConfigParams.ANAMuxCfg_SettlingTime = (float)((double)(ANAMuxCfg >> 8 & 255) * 0.8);
            m_RfGPADCMeasureForExtInputConfigParams.VSenseCfg_SettlingTime = (float)((double)(VSenseCfg >> 8 & 255) * 0.8);
            ScriptOps.m_MainForm.ClibTab.m000017();
            return num + iSetGPADCExternalMeasurementConfig_Gui(true, false);
        }

        public int UpdateNSetDynamicCharReportConfigData(ushort RadarDeviceId, ushort AeReportPeriod)
        {
            int num = 0;
            GlobalRef.g_RadarDeviceId = (uint)RadarDeviceId;
            ScriptOps.m_MainForm.RFStatusTab.UpdateRFCharReportConfigData();
            m_RFCharReportConfigParams.AeReportPeriod = AeReportPeriod;
            ScriptOps.m_MainForm.RFStatusTab.UpdateRFCharReportConfigDataFrmCmd();
            return num + iSetDynamicCharReportConfig_Gui(true, false);
        }

        public int UpdateNGetDynamicCharReportConfigData()
        {
            return 0 + iGetRFDynamicCharReportConfig_Gui(true, false);
        }

        public int UpdateNSetInterChirpBlockControlsConfigData(ushort RadarDeviceId, double Rx02RFTurnOffTime, double Rx13RFTurnOffTime, double Rx02BBTurnOffTime, double Rx13BBTurnOffTime, double Rx02RFPreEnableTime, double Rx24RFPreEnableTime, double Rx02BBPreEnableTime, double Rx13BBPreEnableTime, double Rx02RFTurnOnTime, double Rx13RFTurnOnTime, double Rx02BBTurnOnTime, double Rx13BBTurnOnTime, double RxLOChainTurnOffTime, double TxLOChainTurnOffTime, double RxLOChainTurnOnTime, double TxLOChainTurnOnTime, uint Reserved, uint Reserved2)
        {
            int num = 0;
            GlobalRef.g_RadarDeviceId = (uint)RadarDeviceId;
            ScriptOps.m_MainForm.InterChirpBlockControls.UpdateInterChirpBlockControlsConfigData();
            m_InterChirpBlockControlsConfigParams.Rx02RFTurnOffTime = Rx02RFTurnOffTime;
            m_InterChirpBlockControlsConfigParams.Rx13RFTurnOffTime = Rx13RFTurnOffTime;
            m_InterChirpBlockControlsConfigParams.Rx02BBTurnOffTime = Rx02BBTurnOffTime;
            m_InterChirpBlockControlsConfigParams.Rx13BBTurnOffTime = Rx13BBTurnOffTime;
            m_InterChirpBlockControlsConfigParams.Rx02RFPreEnableTime = Rx02RFPreEnableTime;
            m_InterChirpBlockControlsConfigParams.Rx24RFPreEnableTime = Rx24RFPreEnableTime;
            m_InterChirpBlockControlsConfigParams.Rx02BBPreEnableTime = Rx02BBPreEnableTime;
            m_InterChirpBlockControlsConfigParams.Rx13BBPreEnableTime = Rx13BBPreEnableTime;
            m_InterChirpBlockControlsConfigParams.Rx02RFTurnOnTime = Rx02RFTurnOnTime;
            m_InterChirpBlockControlsConfigParams.Rx13RFTurnOnTime = Rx13RFTurnOnTime;
            m_InterChirpBlockControlsConfigParams.Rx02BBTurnOnTime = Rx02BBTurnOnTime;
            m_InterChirpBlockControlsConfigParams.Rx13BBTurnOnTime = Rx13BBTurnOnTime;
            m_InterChirpBlockControlsConfigParams.RxLOChainTurnOffTime = RxLOChainTurnOffTime;
            m_InterChirpBlockControlsConfigParams.TxLOChainTurnOffTime = TxLOChainTurnOffTime;
            m_InterChirpBlockControlsConfigParams.RxLOChainTurnOnTime = RxLOChainTurnOnTime;
            m_InterChirpBlockControlsConfigParams.TxLOChainTurnOnTime = TxLOChainTurnOnTime;
            ScriptOps.m_MainForm.InterChirpBlockControls.UpdateInterChirpBlockControlsConfigDataFrmCmd();
            return num + iInterChirpBlockControlsConfig_Gui(true, false);
        }

        public int UpdateNSetCalibDataSaveConfigData(ushort RadarDeviceId, ushort ChunkID, ushort Reserved, string CalibStoreFilePath)
        {
            int num = 0;
            GlobalRef.g_RadarDeviceId = (uint)RadarDeviceId;
            m_CalibDataRestoreSaveConfigParams.ChunkID = ChunkID;
            m_CalibDataRestoreSaveConfigParams.Reserved = Reserved;
            m_PhaseShiftAndCalibFilePathParams.CalibStoreRestorePath = CalibStoreFilePath;
            ScriptOps.m_MainForm.CalibDataReStore.UpdateCalibDataRestoreAndSaveConfigDataFrmCmd();
            return num + iCalibDataRestoreAndSaveConfig_Gui(true, false);
        }

        public int UpdateNSetCalibDataRestoreConfigData(ushort RadarDeviceId, ushort ChunkID, ushort NumChunks, string CalibRestoreFilePath)
        {
            int num = 0;
            GlobalRef.g_RadarDeviceId = (uint)RadarDeviceId;
            m_CalibDataRestoreConfigParams.ChunkID = ChunkID;
            m_CalibDataRestoreConfigParams.NumChunks = NumChunks;
            m_PhaseShiftAndCalibFilePathParams.CalibStoreRestorePath = CalibRestoreFilePath;
            ScriptOps.m_MainForm.CalibDataReStore.UpdateCalibDataRestoreConfigDataFrmCmd();
            return num + iCalibDataRestoreConfig_Gui(true, false);
        }

        public int UpdateNSetPhaseShifterCalibDataSaveConfigData(ushort RadarDeviceId, ushort Reserved0, ushort Reserved1, ushort Reserved2, string PhaseShiterCalibStoreFilePath)
        {
            int num = 0;
            GlobalRef.g_RadarDeviceId = (uint)RadarDeviceId;
            m_PhaseShiftAndCalibFilePathParams.PhaseShifterCalibStoreRestorePath = PhaseShiterCalibStoreFilePath;
            ScriptOps.m_MainForm.CalibDataReStore.UpdatePhaseShifterCalibDataRestoreConfigDataFrmCmd();
            return num + iPhaseShifterCalibGetConfig_Gui(true, false);
        }

        public int UpdateNSetPhaseShifterCalibDataRestoreConfigData(ushort RadarDeviceId, ushort Reserved0, ushort Reserved1, ushort Reserved2, string PhaseShiterCalibRestoreFilePath)
        {
            int num = 0;
            GlobalRef.g_RadarDeviceId = (uint)RadarDeviceId;
            m_PhaseShiftAndCalibFilePathParams.PhaseShifterCalibStoreRestorePath = PhaseShiterCalibRestoreFilePath;
            ScriptOps.m_MainForm.CalibDataReStore.UpdatePhaseShifterCalibDataRestoreConfigDataFrmCmd();
            return num + iPhaseShifterCalibDataRestoreConfig_Gui(true, false);
        }

        public int UpdateNSetMCUClockOutConfigData(ushort RadarDeviceId, byte MCUClockControl, byte MCUClockSrc, byte SrcClockDiv, byte Reserved)
        {
            int num = 0;
            GlobalRef.g_RadarDeviceId = (uint)RadarDeviceId;
            ScriptOps.m_MainForm.ClockOutConfig.UpdateMCUClockOutConfigData();
            m_MCUClockOutConfigParams.MCUClockControl = MCUClockControl;
            m_MCUClockOutConfigParams.MCUClockSrc = MCUClockSrc;
            m_MCUClockOutConfigParams.SrcClockDiv = SrcClockDiv;
            m_MCUClockOutConfigParams.Reserved = Reserved;
            ScriptOps.m_MainForm.ClockOutConfig.UpdateMCUClockOutConfigDataFrmCmd();
            return num + iMCUClockOutConfig_Gui(true, false);
        }

        public int UpdateNSetPMICClockOutConfigData(ushort RadarDeviceId, byte PMICClockControl, byte PMICClockSrc, byte SrcClockDiv, byte ModeSelect, uint FreqSlope, byte MinNDivVal, byte MaxNDivVal, byte ClockDitherEna, byte Reserved)
        {
            int num = 0;
            GlobalRef.g_RadarDeviceId = (uint)RadarDeviceId;
            ScriptOps.m_MainForm.ClockOutConfig.UpdatePMICClockOutConfigData();
            m_PMICClockOutConfigParams.PMICClockControl = PMICClockControl;
            m_PMICClockOutConfigParams.PMICClockSrc = PMICClockSrc;
            m_PMICClockOutConfigParams.SrcClockDiv = SrcClockDiv;
            m_PMICClockOutConfigParams.ModeSelect = ModeSelect;
            m_PMICClockOutConfigParams.FreqSlope = FreqSlope;
            m_PMICClockOutConfigParams.MinNDivVal = MinNDivVal;
            m_PMICClockOutConfigParams.MaxNDivVal = MaxNDivVal;
            m_PMICClockOutConfigParams.ClockDitherEna = ClockDitherEna;
            m_PMICClockOutConfigParams.Reserved = Reserved;
            ScriptOps.m_MainForm.ClockOutConfig.UpdatePMICClockOutConfigDataFrmCmd();
            return num + iPMICClockOutConfig_Gui(true, false);
        }

        public int UpdateNSetCalibEnaDisableConfigData(ushort RadarDeviceId, uint p1, uint APLLCal, uint Synth1Cal, uint Synth2Cal)
        {
            int num = 0;
            GlobalRef.g_RadarDeviceId = (uint)RadarDeviceId;
            ScriptOps.m_MainForm.RFStatusTab.UpdateRFCalibEnaDisConfigData();
            m_RFCalibEnaDisConfigParams.f0004f5 = p1;
            m_RFCalibEnaDisConfigParams.APLLCalDisable = APLLCal;
            m_RFCalibEnaDisConfigParams.Synth1CalDisable = Synth1Cal;
            m_RFCalibEnaDisConfigParams.Synth2CalDisable = Synth2Cal;
            ScriptOps.m_MainForm.RFStatusTab.UpdateRFCalibEnaDisConfigDataFrmCmd();
            return num + iSetRFClibDisableConfig_Gui(true, false);
        }

        public int UpdateNSetPDTrim1GHZConfigData(ushort RadarDeviceId, char PDInstance, char RFInPowerIndex, char RFInPowerOn, char Mode)
        {
            int num = 0;
            GlobalRef.g_RadarDeviceId = (uint)RadarDeviceId;
            ScriptOps.m_MainForm.RFStatusTab.UpdatePDTrimGHZConfigData();
            f000210.PDInstance = PDInstance;
            f000210.RFINPowerIndex = RFInPowerIndex;
            f000210.RFINPowerOn = RFInPowerOn;
            f000210.Mode = Mode;
            ScriptOps.m_MainForm.RFStatusTab.m000069();
            return num + m0000a7(true, false);
        }

        public int UpdateNSetDynamicChirpConfigData(ushort RadarDeviceId, byte ChirpRowSelect, byte ChirpSegmentSelect, ushort ProgramMode, uint Chirp1R1Conf, uint Chirp1R2Conf, uint Chirp1R3Conf, uint Chirp2R1Conf, uint Chirp2R2Conf, uint Chirp2R3Conf, uint Chirp3R1Conf, uint Chirp3R2Conf, uint Chirp3R3Conf, uint Chirp4R1Conf, uint Chirp4R2Conf, uint Chirp4R3Conf, uint Chirp5R1Conf, uint Chirp5R2Conf, uint Chirp5R3Conf, uint Chirp6R1Conf, uint Chirp6R2Conf, uint Chirp6R3Conf, uint Chirp7R1Conf, uint Chirp7R2Conf, uint Chirp7R3Conf, uint Chirp8R1Conf, uint Chirp8R2Conf, uint Chirp8R3Conf, uint Chirp9R1Conf, uint Chirp9R2Conf, uint Chirp9R3Conf, uint Chirp10R1Conf, uint Chirp10R2Conf, uint Chirp10R3Conf, uint Chirp11R1Conf, uint Chirp11R2Conf, uint Chirp11R3Conf, uint Chirp12R1Conf, uint Chirp12R2Conf, uint Chirp12R3Conf, uint Chirp13R1Conf, uint Chirp13R2Conf, uint Chirp13R3Conf, uint Chirp14R1Conf, uint Chirp14R2Conf, uint Chirp14R3Conf, uint Chirp15R1Conf, uint Chirp15R2Conf, uint Chirp15R3Conf, uint Chirp16R1Conf, uint Chirp16R2Conf, uint Chirp16R3Conf)
        {
            GlobalRef.g_RadarDeviceId = (uint)RadarDeviceId;
            DynamicChirpConfigurationParam.ChirpRowSelect = ChirpRowSelect;
            DynamicChirpConfigurationParam.ChirpSegmentSelect = ChirpSegmentSelect;
            DynamicChirpConfigurationParam.ProgramMode = ProgramMode;
            DynamicChirpConfigurationParam.Chirp1R1 = Chirp1R1Conf;
            DynamicChirpConfigurationParam.Chirp1R2 = Chirp1R2Conf;
            DynamicChirpConfigurationParam.Chirp1R3 = Chirp1R3Conf;
            DynamicChirpConfigurationParam.Chirp2R1 = Chirp2R1Conf;
            DynamicChirpConfigurationParam.Chirp2R2 = Chirp2R2Conf;
            DynamicChirpConfigurationParam.Chirp2R3 = Chirp2R3Conf;
            DynamicChirpConfigurationParam.Chirp3R1 = Chirp3R1Conf;
            DynamicChirpConfigurationParam.Chirp3R2 = Chirp3R2Conf;
            DynamicChirpConfigurationParam.Chirp3R3 = Chirp3R3Conf;
            DynamicChirpConfigurationParam.Chirp4R1 = Chirp4R1Conf;
            DynamicChirpConfigurationParam.Chirp4R2 = Chirp4R2Conf;
            DynamicChirpConfigurationParam.Chirp4R3 = Chirp4R3Conf;
            DynamicChirpConfigurationParam.Chirp5R1 = Chirp5R1Conf;
            DynamicChirpConfigurationParam.Chirp5R2 = Chirp5R2Conf;
            DynamicChirpConfigurationParam.Chirp5R3 = Chirp5R3Conf;
            DynamicChirpConfigurationParam.Chirp6R1 = Chirp6R1Conf;
            DynamicChirpConfigurationParam.Chirp6R2 = Chirp6R2Conf;
            DynamicChirpConfigurationParam.Chirp6R3 = Chirp6R3Conf;
            DynamicChirpConfigurationParam.Chirp7R1 = Chirp7R1Conf;
            DynamicChirpConfigurationParam.Chirp7R2 = Chirp7R2Conf;
            DynamicChirpConfigurationParam.Chirp7R3 = Chirp7R3Conf;
            DynamicChirpConfigurationParam.Chirp8R1 = Chirp8R1Conf;
            DynamicChirpConfigurationParam.Chirp8R2 = Chirp8R2Conf;
            DynamicChirpConfigurationParam.Chirp8R3 = Chirp8R3Conf;
            DynamicChirpConfigurationParam.Chirp9R1 = Chirp9R1Conf;
            DynamicChirpConfigurationParam.Chirp9R2 = Chirp9R2Conf;
            DynamicChirpConfigurationParam.Chirp9R3 = Chirp9R3Conf;
            DynamicChirpConfigurationParam.Chirp10R1 = Chirp10R1Conf;
            DynamicChirpConfigurationParam.Chirp10R2 = Chirp10R2Conf;
            DynamicChirpConfigurationParam.Chirp10R3 = Chirp10R3Conf;
            DynamicChirpConfigurationParam.Chirp11R1 = Chirp11R1Conf;
            DynamicChirpConfigurationParam.Chirp11R2 = Chirp11R2Conf;
            DynamicChirpConfigurationParam.Chirp11R3 = Chirp11R3Conf;
            DynamicChirpConfigurationParam.Chirp12R1 = Chirp12R1Conf;
            DynamicChirpConfigurationParam.Chirp12R2 = Chirp12R2Conf;
            DynamicChirpConfigurationParam.Chirp12R3 = Chirp12R3Conf;
            DynamicChirpConfigurationParam.Chirp13R1 = Chirp13R1Conf;
            DynamicChirpConfigurationParam.Chirp13R2 = Chirp13R2Conf;
            DynamicChirpConfigurationParam.Chirp13R3 = Chirp13R3Conf;
            DynamicChirpConfigurationParam.Chirp14R1 = Chirp14R1Conf;
            DynamicChirpConfigurationParam.Chirp14R2 = Chirp14R2Conf;
            DynamicChirpConfigurationParam.Chirp14R3 = Chirp14R3Conf;
            DynamicChirpConfigurationParam.Chirp15R1 = Chirp15R1Conf;
            DynamicChirpConfigurationParam.Chirp15R2 = Chirp15R2Conf;
            DynamicChirpConfigurationParam.Chirp15R3 = Chirp15R3Conf;
            DynamicChirpConfigurationParam.Chirp16R1 = Chirp16R1Conf;
            DynamicChirpConfigurationParam.Chirp16R2 = Chirp16R2Conf;
            DynamicChirpConfigurationParam.Chirp16R3 = Chirp16R3Conf;
            return iDynamicChirpConfig_Impl(true, false);
        }

        public int UpdateNSetDynamicPerChirpConfigData(ushort RadarDeviceId, byte Reserved, byte ChirpSegmentSelect, byte Chirp1Tx1PhaseShifter, byte Chirp1Tx2PhaseShifter, byte Chirp1Tx3PhaseShifter, byte Chirp2Tx1PhaseShifter, byte Chirp2Tx2PhaseShifter, byte Chirp2Tx3PhaseShifter, byte Chirp3Tx1PhaseShifter, byte Chirp3Tx2PhaseShifter, byte Chirp3Tx3PhaseShifter, byte Chirp4Tx1PhaseShifter, byte Chirp4Tx2PhaseShifter, byte Chirp4Tx3PhaseShifter, byte Chirp5Tx1PhaseShifter, byte Chirp5Tx2PhaseShifter, byte Chirp5Tx3PhaseShifter, byte Chirp6Tx1PhaseShifter, byte Chirp6Tx2PhaseShifter, byte Chirp6Tx3PhaseShifter, byte Chirp7Tx1PhaseShifter, byte Chirp7Tx2PhaseShifter, byte Chirp7Tx3PhaseShifter, byte Chirp8Tx1PhaseShifter, byte Chirp8Tx2PhaseShifter, byte Chirp8Tx3PhaseShifter, byte Chirp9Tx1PhaseShifter, byte Chirp9Tx2PhaseShifter, byte Chirp9Tx3PhaseShifter, byte Chirp10Tx1PhaseShifter, byte Chirp10Tx2PhaseShifter, byte Chirp10Tx3PhaseShifter, byte Chirp11Tx1PhaseShifter, byte Chirp11Tx2PhaseShifter, byte Chirp11Tx3PhaseShifter, byte Chirp12Tx1PhaseShifter, byte Chirp12Tx2PhaseShifter, byte Chirp12Tx3PhaseShifter, byte Chirp13Tx1PhaseShifter, byte Chirp13Tx2PhaseShifter, byte Chirp13Tx3PhaseShifter, byte Chirp14Tx1PhaseShifter, byte Chirp14Tx2PhaseShifter, byte Chirp14Tx3PhaseShifter, byte Chirp15Tx1PhaseShifter, byte Chirp15Tx2PhaseShifter, byte Chirp15Tx3PhaseShifter, byte Chirp16Tx1PhaseShifter, byte Chirp16Tx2PhaseShifter, byte Chirp16Tx3PhaseShifter, ushort Reserved2)
        {
            int num = 0;
            GlobalRef.g_RadarDeviceId = (uint)RadarDeviceId;
            ScriptOps.m_MainForm.DynamicChirpConfig.UpdateDynamicPerChirpPhaseShifterConfigData();
            m_DynamicPerChirpPhaseShiftConfigParams.Reserved = Reserved;
            m_DynamicPerChirpPhaseShiftConfigParams.ChirpSegmentSelect = ChirpSegmentSelect;
            m_DynamicPerChirpPhaseShiftConfigParams.Chirp1Tx1PhaseShifter = Chirp1Tx1PhaseShifter;
            m_DynamicPerChirpPhaseShiftConfigParams.Chirp1Tx2PhaseShifter = Chirp1Tx2PhaseShifter;
            m_DynamicPerChirpPhaseShiftConfigParams.Chirp1Tx3PhaseShifter = Chirp1Tx3PhaseShifter;
            m_DynamicPerChirpPhaseShiftConfigParams.Chirp2Tx1PhaseShifter = Chirp2Tx1PhaseShifter;
            m_DynamicPerChirpPhaseShiftConfigParams.Chirp2Tx2PhaseShifter = Chirp2Tx2PhaseShifter;
            m_DynamicPerChirpPhaseShiftConfigParams.Chirp2Tx3PhaseShifter = Chirp2Tx3PhaseShifter;
            m_DynamicPerChirpPhaseShiftConfigParams.Chirp3Tx1PhaseShifter = Chirp3Tx1PhaseShifter;
            m_DynamicPerChirpPhaseShiftConfigParams.Chirp3Tx2PhaseShifter = Chirp3Tx2PhaseShifter;
            m_DynamicPerChirpPhaseShiftConfigParams.Chirp3Tx3PhaseShifter = Chirp3Tx3PhaseShifter;
            m_DynamicPerChirpPhaseShiftConfigParams.Chirp4Tx1PhaseShifter = Chirp4Tx1PhaseShifter;
            m_DynamicPerChirpPhaseShiftConfigParams.Chirp4Tx2PhaseShifter = Chirp4Tx2PhaseShifter;
            m_DynamicPerChirpPhaseShiftConfigParams.Chirp4Tx3PhaseShifter = Chirp4Tx3PhaseShifter;
            m_DynamicPerChirpPhaseShiftConfigParams.Chirp5Tx1PhaseShifter = Chirp5Tx1PhaseShifter;
            m_DynamicPerChirpPhaseShiftConfigParams.Chirp5Tx2PhaseShifter = Chirp5Tx2PhaseShifter;
            m_DynamicPerChirpPhaseShiftConfigParams.Chirp5Tx3PhaseShifter = Chirp5Tx3PhaseShifter;
            m_DynamicPerChirpPhaseShiftConfigParams.Chirp6Tx1PhaseShifter = Chirp6Tx1PhaseShifter;
            m_DynamicPerChirpPhaseShiftConfigParams.Chirp6Tx2PhaseShifter = Chirp6Tx2PhaseShifter;
            m_DynamicPerChirpPhaseShiftConfigParams.Chirp6Tx3PhaseShifter = Chirp6Tx3PhaseShifter;
            m_DynamicPerChirpPhaseShiftConfigParams.Chirp7Tx1PhaseShifter = Chirp7Tx1PhaseShifter;
            m_DynamicPerChirpPhaseShiftConfigParams.Chirp7Tx2PhaseShifter = Chirp7Tx2PhaseShifter;
            m_DynamicPerChirpPhaseShiftConfigParams.Chirp7Tx3PhaseShifter = Chirp7Tx3PhaseShifter;
            m_DynamicPerChirpPhaseShiftConfigParams.Chirp8Tx1PhaseShifter = Chirp8Tx1PhaseShifter;
            m_DynamicPerChirpPhaseShiftConfigParams.Chirp8Tx2PhaseShifter = Chirp8Tx2PhaseShifter;
            m_DynamicPerChirpPhaseShiftConfigParams.Chirp8Tx3PhaseShifter = Chirp8Tx3PhaseShifter;
            m_DynamicPerChirpPhaseShiftConfigParams.Chirp9Tx1PhaseShifter = Chirp9Tx1PhaseShifter;
            m_DynamicPerChirpPhaseShiftConfigParams.Chirp9Tx2PhaseShifter = Chirp9Tx2PhaseShifter;
            m_DynamicPerChirpPhaseShiftConfigParams.Chirp9Tx3PhaseShifter = Chirp9Tx3PhaseShifter;
            m_DynamicPerChirpPhaseShiftConfigParams.Chirp10Tx1PhaseShifter = Chirp10Tx1PhaseShifter;
            m_DynamicPerChirpPhaseShiftConfigParams.Chirp10Tx2PhaseShifter = Chirp10Tx2PhaseShifter;
            m_DynamicPerChirpPhaseShiftConfigParams.Chirp10Tx3PhaseShifter = Chirp10Tx3PhaseShifter;
            m_DynamicPerChirpPhaseShiftConfigParams.Chirp11Tx1PhaseShifter = Chirp11Tx1PhaseShifter;
            m_DynamicPerChirpPhaseShiftConfigParams.Chirp11Tx2PhaseShifter = Chirp11Tx2PhaseShifter;
            m_DynamicPerChirpPhaseShiftConfigParams.Chirp11Tx3PhaseShifter = Chirp11Tx3PhaseShifter;
            m_DynamicPerChirpPhaseShiftConfigParams.Chirp12Tx1PhaseShifter = Chirp12Tx1PhaseShifter;
            m_DynamicPerChirpPhaseShiftConfigParams.Chirp12Tx2PhaseShifter = Chirp12Tx2PhaseShifter;
            m_DynamicPerChirpPhaseShiftConfigParams.Chirp12Tx3PhaseShifter = Chirp12Tx3PhaseShifter;
            m_DynamicPerChirpPhaseShiftConfigParams.Chirp13Tx1PhaseShifter = Chirp13Tx1PhaseShifter;
            m_DynamicPerChirpPhaseShiftConfigParams.Chirp13Tx2PhaseShifter = Chirp13Tx2PhaseShifter;
            m_DynamicPerChirpPhaseShiftConfigParams.Chirp13Tx3PhaseShifter = Chirp13Tx3PhaseShifter;
            m_DynamicPerChirpPhaseShiftConfigParams.Chirp14Tx1PhaseShifter = Chirp14Tx1PhaseShifter;
            m_DynamicPerChirpPhaseShiftConfigParams.Chirp14Tx2PhaseShifter = Chirp14Tx2PhaseShifter;
            m_DynamicPerChirpPhaseShiftConfigParams.Chirp14Tx3PhaseShifter = Chirp14Tx3PhaseShifter;
            m_DynamicPerChirpPhaseShiftConfigParams.Chirp15Tx1PhaseShifter = Chirp15Tx1PhaseShifter;
            m_DynamicPerChirpPhaseShiftConfigParams.Chirp15Tx2PhaseShifter = Chirp15Tx2PhaseShifter;
            m_DynamicPerChirpPhaseShiftConfigParams.Chirp15Tx3PhaseShifter = Chirp15Tx3PhaseShifter;
            m_DynamicPerChirpPhaseShiftConfigParams.Chirp16Tx1PhaseShifter = Chirp16Tx1PhaseShifter;
            m_DynamicPerChirpPhaseShiftConfigParams.Chirp16Tx2PhaseShifter = Chirp16Tx2PhaseShifter;
            m_DynamicPerChirpPhaseShiftConfigParams.Chirp16Tx3PhaseShifter = Chirp16Tx3PhaseShifter;
            ScriptOps.m_MainForm.DynamicChirpConfig.UpdateDynamicPerChirpPhaseShifterConfigDataFrmCmd();
            return num + iDynamicPerChirpPhaseShifterConfig_Gui(true, false);
        }

        public int UpdateNSetDynamicChirpEnableConfigData(ushort RadarDeviceId, uint Reserved)
        {
            int num = 0;
            GlobalRef.g_RadarDeviceId = (uint)RadarDeviceId;
            ScriptOps.m_MainForm.DynamicChirpConfig.UpdateDynamicChirpEnableConfigData();
            m_DynamicChirpEnableConfigParams.Reserved = Reserved;
            ScriptOps.m_MainForm.DynamicChirpConfig.UpdateDynamicChirpEnableConfigDataFrmCmd();
            return num + iDynamicChirpEnableConfig_Gui(true, false);
        }

        public int UpdateNSetTestPatternGenerationConfigData(ushort RadarDeviceId, byte TestPatternGenCtl, byte TestPatternGenTiming, ushort TestPatternPktSize, uint NumTestPatternPkts, ushort TestPatternRx0ICfg1, ushort TestPatternRx0ICfg2, ushort TestPatternRx0QCfg1, ushort TestPatternRx0QCfg2, ushort TestPatternRx1ICfg1, ushort TestPatternRx1ICfg2, ushort TestPatternRx1QCfg1, ushort TestPatternRx1QCfg2, ushort TestPatternRx2ICfg1, ushort TestPatternRx2ICfg2, ushort TestPatternRx2QCfg1, ushort TestPatternRx2QCfg2, ushort TestPatternRx3ICfg1, ushort TestPatternRx3ICfg2, ushort TestPatternRx3QCfg1, ushort TestPatternRx3QCfg2, uint Reserved)
        {
            int num = 0;
            GlobalRef.g_RadarDeviceId = (uint)RadarDeviceId;
            ScriptOps.m_MainForm.DataConfigTab.UpdateTestPatternGeneratingConfigData();
            m_TestPatternGenConfigParams.TestPatternGenCtl = TestPatternGenCtl;
            m_TestPatternGenConfigParams.TestPatternGenTiming = TestPatternGenTiming;
            m_TestPatternGenConfigParams.TestPatternPktSize = TestPatternPktSize;
            m_TestPatternGenConfigParams.NumTestPatternPkts = NumTestPatternPkts;
            m_TestPatternGenConfigParams.Reserved = Reserved;
            m_TestPatternGenConfigParams.TestPatternRx0ICfg1 = TestPatternRx0ICfg1;
            m_TestPatternGenConfigParams.TestPatternRx0ICfg2 = TestPatternRx0ICfg2;
            m_TestPatternGenConfigParams.TestPatternRx1ICfg1 = TestPatternRx1ICfg1;
            m_TestPatternGenConfigParams.TestPatternRx1ICfg2 = TestPatternRx1ICfg2;
            m_TestPatternGenConfigParams.TestPatternRx2ICfg1 = TestPatternRx2ICfg1;
            m_TestPatternGenConfigParams.TestPatternRx2ICfg2 = TestPatternRx2ICfg2;
            m_TestPatternGenConfigParams.TestPatternRx3ICfg1 = TestPatternRx3ICfg1;
            m_TestPatternGenConfigParams.TestPatternRx3ICfg2 = TestPatternRx3ICfg2;
            m_TestPatternGenConfigParams.TestPatternRx0QCfg1 = TestPatternRx0QCfg1;
            m_TestPatternGenConfigParams.TestPatternRx0QCfg2 = TestPatternRx0QCfg2;
            m_TestPatternGenConfigParams.TestPatternRx1QCfg1 = TestPatternRx1QCfg1;
            m_TestPatternGenConfigParams.TestPatternRx1QCfg2 = TestPatternRx1QCfg2;
            m_TestPatternGenConfigParams.TestPatternRx2QCfg1 = TestPatternRx2QCfg1;
            m_TestPatternGenConfigParams.TestPatternRx2QCfg2 = TestPatternRx2QCfg2;
            m_TestPatternGenConfigParams.TestPatternRx3QCfg1 = TestPatternRx3QCfg1;
            m_TestPatternGenConfigParams.TestPatternRx3QCfg2 = TestPatternRx3QCfg2;
            ScriptOps.m_MainForm.DataConfigTab.UpdateTestPatternGeneratingConfigDataFrmCmdSrc();
            return num + iSetTestPatternGeneratingConfig_Gui(true, false);
        }

        public int UpdateNSetAnalogFaultInjectionConfigData(ushort RadarDeviceId, byte Reserved, byte RxGainDrop, byte RxPhaseInv, byte RxHighNoise, byte RxIFStageFault, byte RxLOAmpFault, byte TxLOAmpFault, byte TxGainDrop, byte TxPhaseInv, byte SynthFault, byte SupplyLDOFault, byte MiscFault, byte MiscThresholdFault, byte Reserved2, ushort Reserved3, uint Reserved4)
        {
            int num = 0;
            GlobalRef.g_RadarDeviceId = (uint)RadarDeviceId;
            ScriptOps.m_MainForm.AnalogMonConfig.UpdateAnalogFaultInjectionConfigData();
            m_AnalogFaultInjectionConfigParameters.Reserved = Reserved;
            m_AnalogFaultInjectionConfigParameters.RxGainDropRx1 = (byte)(RxGainDrop & 1);
            m_AnalogFaultInjectionConfigParameters.RxGainDropRx2 = (byte)(RxGainDrop >> 1 & 1);
            m_AnalogFaultInjectionConfigParameters.RxGainDropRx3 = (byte)(RxGainDrop >> 2 & 1);
            m_AnalogFaultInjectionConfigParameters.RxGainDropRx4 = (byte)(RxGainDrop >> 3 & 1);
            m_AnalogFaultInjectionConfigParameters.RxPhaseInvRx1 = (byte)(RxPhaseInv & 1);
            m_AnalogFaultInjectionConfigParameters.RxPhaseInvRx2 = (byte)(RxPhaseInv >> 1 & 1);
            m_AnalogFaultInjectionConfigParameters.RxPhaseInvRx3 = (byte)(RxPhaseInv >> 2 & 1);
            m_AnalogFaultInjectionConfigParameters.RxPhaseInvRx4 = (byte)(RxPhaseInv >> 3 & 1);
            m_AnalogFaultInjectionConfigParameters.RxHighNoiseRx1 = (byte)(RxHighNoise & 1);
            m_AnalogFaultInjectionConfigParameters.RxHighNoiseRx2 = (byte)(RxHighNoise >> 1 & 1);
            m_AnalogFaultInjectionConfigParameters.RxHighNoiseRx3 = (byte)(RxHighNoise >> 2 & 1);
            m_AnalogFaultInjectionConfigParameters.RxHighNoiseRx4 = (byte)(RxHighNoise >> 3 & 1);
            m_AnalogFaultInjectionConfigParameters.RxIFStageRx1 = (byte)(RxIFStageFault & 1);
            m_AnalogFaultInjectionConfigParameters.RxIFStageRx2 = (byte)(RxIFStageFault >> 1 & 1);
            m_AnalogFaultInjectionConfigParameters.RxIFStageRx3 = (byte)(RxIFStageFault >> 2 & 1);
            m_AnalogFaultInjectionConfigParameters.RxIFStageRx4 = (byte)(RxIFStageFault >> 3 & 1);
            m_AnalogFaultInjectionConfigParameters.RxLOAmpRx1Rx2 = (byte)(RxLOAmpFault & 1);
            m_AnalogFaultInjectionConfigParameters.RxLOAmpRx3Rx4 = (byte)(RxLOAmpFault >> 1 & 1);
            m_AnalogFaultInjectionConfigParameters.TxLOAmpTx1Tx2 = (byte)(TxLOAmpFault & 1);
            m_AnalogFaultInjectionConfigParameters.TxLOAmpTx3 = (byte)(TxLOAmpFault >> 1 & 1);
            m_AnalogFaultInjectionConfigParameters.TxGainDropTx1 = (byte)(TxGainDrop & 1);
            m_AnalogFaultInjectionConfigParameters.TxGainDropTx2 = (byte)(TxGainDrop >> 1 & 1);
            m_AnalogFaultInjectionConfigParameters.TxGainDropTx3 = (byte)(TxGainDrop >> 2 & 1);
            m_AnalogFaultInjectionConfigParameters.TxPhaseInvTxFault = (byte)(TxPhaseInv & 1);
            m_AnalogFaultInjectionConfigParameters.TxPhaseInvBPMTx1Fault = (byte)(TxPhaseInv >> 3 & 1);
            m_AnalogFaultInjectionConfigParameters.TxPhaseInvBPMTx2Fault = (byte)(TxPhaseInv >> 4 & 1);
            m_AnalogFaultInjectionConfigParameters.TxPhaseInvBPMTx3Fault = (byte)(TxPhaseInv >> 5 & 1);
            m_AnalogFaultInjectionConfigParameters.SynthVCOOpenFault = (byte)(SynthFault & 1);
            m_AnalogFaultInjectionConfigParameters.SynthFreqMonOffset = (byte)(SynthFault >> 1 & 1);
            m_AnalogFaultInjectionConfigParameters.f000319 = SupplyLDOFault;
            m_AnalogFaultInjectionConfigParameters.f00031a = (byte)(MiscFault & 1);
            m_AnalogFaultInjectionConfigParameters.f00031b = (byte)(MiscThresholdFault & 1);
            m_AnalogFaultInjectionConfigParameters.Reserved2 = AnalogFaultInjectionConfigurationParam.Reserved2;
            m_AnalogFaultInjectionConfigParameters.Reserved3 = AnalogFaultInjectionConfigurationParam.Reserved3;
            m_AnalogFaultInjectionConfigParameters.Reserved4 = AnalogFaultInjectionConfigurationParam.Reserved4;
            ScriptOps.m_MainForm.AnalogMonConfig.UpdateAnalogFaultInjectionConfigDataFrmCmdSrc();
            return num + iSetAnalogFaultInjectionConfig_Gui(true, false);
        }

        public int UpdateNSetRfSynthFreqLinearityMonConfigData(ushort RadarDeviceId, char ProfileIndex, char ReportingMode, ushort FreqErrorThreshold, double Profile0MonStartTime, double Profile1MonStartTime, double Profile2MonStartTime, double Profile3MonStartTime, char DataPathParams1L1, char DataPathParams1L2, char DataPathParams1N, char DataPathParams2S1, char DataPathParams2S2, char DataPathParams2S, char Profile0LinearityRAMAddress, char Profile1LinearityRAMAddress, char Profile2LinearityRAMAddress, char Profile3LinearityRAMAddress)
        {
            int result = 0;
            GlobalRef.g_RadarDeviceId = (uint)RadarDeviceId;
            ScriptOps.m_MainForm.RFStatusTab.UpdateSynthFreqLinearityMonConfigData();
            m_MonSynthFreqLinearityConfigParams.Profile0Index = (char)(ProfileIndex & 0x01);
            m_MonSynthFreqLinearityConfigParams.Profile1Index = (char)(ProfileIndex >> 1 & 0x01);
            m_MonSynthFreqLinearityConfigParams.Profile2Index = (char)(ProfileIndex >> 2 & 0x01);
            m_MonSynthFreqLinearityConfigParams.Profile3Index = (char)(ProfileIndex >> 3 & 0x01);
            m_MonSynthFreqLinearityConfigParams.ReportingMode = ReportingMode;
            m_MonSynthFreqLinearityConfigParams.FreqErrorThreshold = FreqErrorThreshold;
            m_MonSynthFreqLinearityConfigParams.Profile0MonStartTime = Profile0MonStartTime;
            m_MonSynthFreqLinearityConfigParams.Profile1MonStartTime = Profile1MonStartTime;
            m_MonSynthFreqLinearityConfigParams.Profile2MonStartTime = Profile2MonStartTime;
            m_MonSynthFreqLinearityConfigParams.Profile3MonStartTime = Profile3MonStartTime;
            m_MonSynthFreqLinearityConfigParams.DataPathParams1L1 = DataPathParams1L1;
            m_MonSynthFreqLinearityConfigParams.DataPathParams1L2 = DataPathParams1L2;
            m_MonSynthFreqLinearityConfigParams.DataPathParams1N = DataPathParams1N;
            m_MonSynthFreqLinearityConfigParams.DataPathParams2S1 = DataPathParams2S1;
            m_MonSynthFreqLinearityConfigParams.DataPathParams2S2 = DataPathParams2S2;
            m_MonSynthFreqLinearityConfigParams.DataPathParams2S = DataPathParams2S;
            m_MonSynthFreqLinearityConfigParams.Profile0LinearityRAMAddress = Profile0LinearityRAMAddress;
            m_MonSynthFreqLinearityConfigParams.Profile1LinearityRAMAddress = Profile1LinearityRAMAddress;
            m_MonSynthFreqLinearityConfigParams.Profile2LinearityRAMAddress = Profile2LinearityRAMAddress;
            m_MonSynthFreqLinearityConfigParams.Profile3LinearityRAMAddress = Profile3LinearityRAMAddress;
            ScriptOps.m_MainForm.RFStatusTab.UpdateSynthFreqLinearityMonConfigDataFrmCmd();
            return result;
        }

        public int UpdateNRfSynthFreqLinearityMonConfigurationData_cmd(out string StatusFlag, out string Errorcode, out string Profileindex, out string MaxFreqErrorVal, out string FrequencyFailureCount, out string Timestamp)
        {
            StatusFlag = string.Empty;
            Errorcode = string.Empty;
            Profileindex = string.Empty;
            MaxFreqErrorVal = string.Empty;
            FrequencyFailureCount = string.Empty;
            Timestamp = string.Empty;
            ScriptOps.m_MainForm.RFStatusTab.UpdateSynthFreqLinearityMonConfigData();
            return iSetRfSynthFreqLinearityMonConfig_ImplForLuaCommand(out StatusFlag, out Errorcode, out Profileindex, out MaxFreqErrorVal, out FrequencyFailureCount, out Timestamp);
        }

        private int iSetRfSynthFreqLinearityMonConfig_ImplForLuaCommand(out string StatusFlag, out string Errorcode, out string Profileindex, out string MaxFreqErrorVal, out string FrequencyFailureCount, out string Timestamp)
        {
            StatusFlag = string.Empty;
            Errorcode = string.Empty;
            Profileindex = string.Empty;
            MaxFreqErrorVal = string.Empty;
            FrequencyFailureCount = string.Empty;
            Timestamp = string.Empty;
            SynthFreqLinearityConfigDataParam.ProfileIndex = (byte)(m_MonSynthFreqLinearityConfigParams.Profile0Index | m_MonSynthFreqLinearityConfigParams.Profile1Index << 1 | m_MonSynthFreqLinearityConfigParams.Profile2Index << 2 | m_MonSynthFreqLinearityConfigParams.Profile3Index << 3);
            SynthFreqLinearityConfigDataParam.ReportingMode = (byte)m_MonSynthFreqLinearityConfigParams.ReportingMode;
            SynthFreqLinearityConfigDataParam.FreqErrorThreshold = m_MonSynthFreqLinearityConfigParams.FreqErrorThreshold;
            SynthFreqLinearityConfigDataParam.MonStartTime = (uint)((int)((byte)(m_MonSynthFreqLinearityConfigParams.Profile0MonStartTime / 0.2)) | (int)((byte)(m_MonSynthFreqLinearityConfigParams.Profile1MonStartTime / 0.2)) << 8 | (int)((byte)(m_MonSynthFreqLinearityConfigParams.Profile2MonStartTime / 0.2)) << 16 | (int)((byte)(m_MonSynthFreqLinearityConfigParams.Profile3MonStartTime / 0.2)) << 24);
            SynthFreqLinearityConfigDataParam.DataPathParams1 = (uint)((int)((byte)m_MonSynthFreqLinearityConfigParams.DataPathParams1L1) | (int)((byte)m_MonSynthFreqLinearityConfigParams.DataPathParams1L1) << 8 | (int)((byte)m_MonSynthFreqLinearityConfigParams.DataPathParams1N) << 16);
            SynthFreqLinearityConfigDataParam.DataPathParams2 = (uint)((int)((byte)m_MonSynthFreqLinearityConfigParams.DataPathParams2S1) | (int)((byte)m_MonSynthFreqLinearityConfigParams.DataPathParams2S2) << 8 | (int)((byte)m_MonSynthFreqLinearityConfigParams.DataPathParams2S) << 16);
            SynthFreqLinearityConfigDataParam.LinearityRAMAddress = (uint)((int)((byte)m_MonSynthFreqLinearityConfigParams.Profile0LinearityRAMAddress) | (int)((byte)m_MonSynthFreqLinearityConfigParams.Profile1LinearityRAMAddress) << 4 | (int)((byte)m_MonSynthFreqLinearityConfigParams.Profile2LinearityRAMAddress) << 8 | (int)((byte)m_MonSynthFreqLinearityConfigParams.Profile3LinearityRAMAddress) << 12);
            SynthFreqLinearityConfigDataParam.Reserved = 0U;
            IntPtr inData = GCHandle.Alloc(SynthFreqLinearityConfigDataParam, GCHandleType.Pinned).AddrOfPinnedObject();
            int num;
            if (GlobalRef.g_NtvRS232Connect[(int)GlobalRef.g_RadarDeviceIndex] && GlobalRef.g_CasCadeDeviceSpiConnect == 0U)
            {
                num = m_TsWrapper.Calling_WriteAddr_Single(4294959848U, 1U);
                if (m_GuiManager.DllOps.itempDisconnect(false) == 0)
                {
                    string full_command = string.Format("Debug Port Disconnected", new object[0]);
                    m_GuiManager.RecordLog(0, full_command);
                    if (!GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
                    {
                        iRs232ConnectDisconnect_impl();
                    }
                }
            }
            Thread.Sleep(200);
            if (m_RadarDeviceModeConfigParams.NumberOfRadarDevicesDetected <= 1)
            {
                string full_command2 = string.Format("ar1.SetRfSynthLinMonConfig({0}, {1}, {2}, {3}, {4}, {5}, {6}, {7}, {8}, {9}, {10}, {11}, {12}, {13}, {14}, {15}, {16})", new object[]
                {
                    SynthFreqLinearityConfigDataParam.ProfileIndex,
                    m_MonSynthFreqLinearityConfigParams.ReportingMode,
                    m_MonSynthFreqLinearityConfigParams.FreqErrorThreshold,
                    (decimal)m_MonSynthFreqLinearityConfigParams.Profile0MonStartTime,
                    (decimal)m_MonSynthFreqLinearityConfigParams.Profile1MonStartTime,
                    (decimal)m_MonSynthFreqLinearityConfigParams.Profile2MonStartTime,
                    (decimal)m_MonSynthFreqLinearityConfigParams.Profile3MonStartTime,
                    m_MonSynthFreqLinearityConfigParams.DataPathParams1L1,
                    m_MonSynthFreqLinearityConfigParams.DataPathParams1L2,
                    m_MonSynthFreqLinearityConfigParams.DataPathParams1N,
                    m_MonSynthFreqLinearityConfigParams.DataPathParams2S1,
                    m_MonSynthFreqLinearityConfigParams.DataPathParams2S2,
                    m_MonSynthFreqLinearityConfigParams.DataPathParams2S,
                    m_MonSynthFreqLinearityConfigParams.Profile0LinearityRAMAddress,
                    m_MonSynthFreqLinearityConfigParams.Profile1LinearityRAMAddress,
                    m_MonSynthFreqLinearityConfigParams.Profile2LinearityRAMAddress,
                    m_MonSynthFreqLinearityConfigParams.Profile3LinearityRAMAddress
                });
                m_GuiManager.RecordLog(15, full_command2);
            }
            else
            {
                string full_command3 = string.Format("ar1.SetRfSynthLinMonConfig_mult({0}, {1}, {2}, {3}, {4}, {5}, {6}, {7}, {8}, {9}, {10}, {11}, {12}, {13}, {14}, {15}, {16}, {17})", new object[]
                {
                    GlobalRef.g_RadarDeviceId,
                    SynthFreqLinearityConfigDataParam.ProfileIndex,
                    m_MonSynthFreqLinearityConfigParams.ReportingMode,
                    m_MonSynthFreqLinearityConfigParams.FreqErrorThreshold,
                    (decimal)m_MonSynthFreqLinearityConfigParams.Profile0MonStartTime,
                    (decimal)m_MonSynthFreqLinearityConfigParams.Profile1MonStartTime,
                    (decimal)m_MonSynthFreqLinearityConfigParams.Profile2MonStartTime,
                    (decimal)m_MonSynthFreqLinearityConfigParams.Profile3MonStartTime,
                    m_MonSynthFreqLinearityConfigParams.DataPathParams1L1,
                    m_MonSynthFreqLinearityConfigParams.DataPathParams1L2,
                    m_MonSynthFreqLinearityConfigParams.DataPathParams1N,
                    m_MonSynthFreqLinearityConfigParams.DataPathParams2S1,
                    m_MonSynthFreqLinearityConfigParams.DataPathParams2S2,
                    m_MonSynthFreqLinearityConfigParams.DataPathParams2S,
                    m_MonSynthFreqLinearityConfigParams.Profile0LinearityRAMAddress,
                    m_MonSynthFreqLinearityConfigParams.Profile1LinearityRAMAddress,
                    m_MonSynthFreqLinearityConfigParams.Profile2LinearityRAMAddress,
                    m_MonSynthFreqLinearityConfigParams.Profile3LinearityRAMAddress
                });
                m_GuiManager.RecordLog(15, full_command3);
            }
            GlobalRef.g_SynthFreqErrMon = 1U;
            num = Imports.RadarLinkImpl_RfSynthLinMonConfig((byte)GlobalRef.g_RadarDeviceId, inData);
            while (GlobalRef.g_SynthFreqErrMon == 0U)
            {
                Thread.Sleep(100);
            }
            if (num == 0)
            {
                if (GlobalRef.g_RadarDeviceId == 1U)
                {
                    StatusFlag = Convert.ToString(ScriptOps.SynthFrequencyMonAsyncReportParam.StatusFlags);
                    Errorcode = Convert.ToString(ScriptOps.SynthFrequencyMonAsyncReportParam.ErrorCode);
                    Profileindex = Convert.ToString(ScriptOps.SynthFrequencyMonAsyncReportParam.ProfileIndex);
                    MaxFreqErrorVal = Convert.ToString(ScriptOps.SynthFrequencyMonAsyncReportParam.MaxFreqErrorValue);
                    FrequencyFailureCount = Convert.ToString(ScriptOps.SynthFrequencyMonAsyncReportParam.FreqFailureCount);
                    Timestamp = Convert.ToString(ScriptOps.SynthFrequencyMonAsyncReportParam.TimeStamp);
                }
                else if (GlobalRef.g_RadarDeviceId == 2U)
                {
                    StatusFlag = Convert.ToString(ScriptOps.SynthFrequencyMonAsyncReportParam.StatusFlags);
                    Errorcode = Convert.ToString(ScriptOps.SynthFrequencyMonAsyncReportParam.ErrorCode);
                    Profileindex = Convert.ToString(ScriptOps.SynthFrequencyMonAsyncReportParam.ProfileIndex);
                    MaxFreqErrorVal = Convert.ToString(ScriptOps.SynthFrequencyMonAsyncReportParam.MaxFreqErrorValue);
                    FrequencyFailureCount = Convert.ToString(ScriptOps.SynthFrequencyMonAsyncReportParam.FreqFailureCount);
                    Timestamp = Convert.ToString(ScriptOps.SynthFrequencyMonAsyncReportParam.TimeStamp);
                }
                else if (GlobalRef.g_RadarDeviceId == 4U)
                {
                    StatusFlag = Convert.ToString(ScriptOps.SynthFrequencyMonAsyncReportParam.StatusFlags);
                    Errorcode = Convert.ToString(ScriptOps.SynthFrequencyMonAsyncReportParam.ErrorCode);
                    Profileindex = Convert.ToString(ScriptOps.SynthFrequencyMonAsyncReportParam.ProfileIndex);
                    MaxFreqErrorVal = Convert.ToString(ScriptOps.SynthFrequencyMonAsyncReportParam.MaxFreqErrorValue);
                    FrequencyFailureCount = Convert.ToString(ScriptOps.SynthFrequencyMonAsyncReportParam.FreqFailureCount);
                    Timestamp = Convert.ToString(ScriptOps.SynthFrequencyMonAsyncReportParam.TimeStamp);
                }
                else if (GlobalRef.g_RadarDeviceId == 8U)
                {
                    StatusFlag = Convert.ToString(ScriptOps.SynthFrequencyMonAsyncReportParam.StatusFlags);
                    Errorcode = Convert.ToString(ScriptOps.SynthFrequencyMonAsyncReportParam.ErrorCode);
                    Profileindex = Convert.ToString(ScriptOps.SynthFrequencyMonAsyncReportParam.ProfileIndex);
                    MaxFreqErrorVal = Convert.ToString(ScriptOps.SynthFrequencyMonAsyncReportParam.MaxFreqErrorValue);
                    FrequencyFailureCount = Convert.ToString(ScriptOps.SynthFrequencyMonAsyncReportParam.FreqFailureCount);
                    Timestamp = Convert.ToString(ScriptOps.SynthFrequencyMonAsyncReportParam.TimeStamp);
                }
            }
            if ((num == 0 && ((GlobalRef.g_CasCadeDeviceSpiConnect & 1U) == 1U || (GlobalRef.g_CasCadeDeviceSpiConnect & 2U) == 2U || (GlobalRef.g_CasCadeDeviceSpiConnect & 4U) == 4U || (GlobalRef.g_CasCadeDeviceSpiConnect & 8U) == 8U)) || GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
            {
                string full_command4 = string.Format("Status: Passed", new object[0]);
                m_GuiManager.RecordLog(6, full_command4);
            }
            else
            {
                string msg = string.Format("Status: Failed, Error Type: {0}", new object[]
                {
                    GetErrorType(num)
                });
                GlobalRef.LuaWrapper.PrintError(msg);
            }
            if (GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
            {
                if (iRs232ConnectDisconnect_impl() == 0 && !GlobalRef.g_NtvRS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
                {
                    m_GuiManager.DllOps.iConnect(1U, 0U);
                    string full_command5 = string.Format("Debug Port Reconnected!", new object[0]);
                    m_GuiManager.RecordLog(9, full_command5);
                    ScriptOps.KeepTrying(2000, new Func<bool>(spare_read));
                }
            }
            else if (GlobalRef.g_CasCadeDeviceSpiConnect == 0U)
            {
                string full_command6 = string.Format("Error Occurred in SPI Port open close", new object[0]);
                m_GuiManager.RecordLog(9, full_command6);
            }
            return num;
        }

        public int UpdateNSetRunTimeCalibrationConfigData(ushort RadarDeviceId, uint OneTimeCalibLODist, uint OneTimeCalibTXPower, uint OneTimeCalibRXGain, uint OneTimeCalibPDCal, uint PeriodicCalibLODist, uint PeriodicCalibTXPower, uint PeriodicCalibRXGain, uint PeriodicCalibPDCal, uint CalibPeriodicity, char CalReport, char TxPowerCalMode)
        {
            int result = -1;
            GlobalRef.g_RadarDeviceId = (uint)RadarDeviceId;
            ScriptOps.m_MainForm.CalibConfig.UpdateRunTimeCalibConfigData();
            m_RunTimeCalibConfigParameters.OneTimeLODist = OneTimeCalibLODist;
            m_RunTimeCalibConfigParameters.OneTimeTXPower = OneTimeCalibTXPower;
            m_RunTimeCalibConfigParameters.OneTimeRXGain = OneTimeCalibRXGain;
            m_RunTimeCalibConfigParameters.OneTimePDCal = OneTimeCalibPDCal;
            m_RunTimeCalibConfigParameters.PeriodiCalibLODist = PeriodicCalibLODist;
            m_RunTimeCalibConfigParameters.PeriodiCalibTXPower = PeriodicCalibTXPower;
            m_RunTimeCalibConfigParameters.PeriodiCalibRXGain = PeriodicCalibRXGain;
            m_RunTimeCalibConfigParameters.PeriodiCalibPDCal = PeriodicCalibPDCal;
            m_RunTimeCalibConfigParameters.CalibPeriodicity = CalibPeriodicity;
            m_RunTimeCalibConfigParameters.EnableCalReport = CalReport;
            m_RunTimeCalibConfigParameters.TxPowerCalMode = TxPowerCalMode;
            ScriptOps.m_MainForm.CalibConfig.UpdateRunTimeCalibConfigDataFrmCmdSrc();
            return result;
        }

        public int UpdateNMeasureTheRunTimeConfigurationData_cmd(out string ErrorFlag, out string UpdateStatus, out string Temperature, out string TimeStamp)
        {
            ErrorFlag = string.Empty;
            UpdateStatus = string.Empty;
            Temperature = string.Empty;
            TimeStamp = string.Empty;
            ScriptOps.m_MainForm.CalibConfig.UpdateRunTimeCalibConfigData();
            return iRunTimeCalibrationConfig_ImplViaLuaCommand(out ErrorFlag, out UpdateStatus, out Temperature, out TimeStamp);
        }

        private int iRunTimeCalibrationConfig_ImplViaLuaCommand(out string ErrorFlag, out string UpdateStatus, out string Temperature, out string TimeStamp)
        {
            ErrorFlag = string.Empty;
            UpdateStatus = string.Empty;
            Temperature = string.Empty;
            TimeStamp = string.Empty;
            RunTimeCalibConfigurationParam.OneTimeCalibEnaMask = (m_RunTimeCalibConfigParameters.OneTimeLODist << 4 | m_RunTimeCalibConfigParameters.OneTimePDCal << 8 | m_RunTimeCalibConfigParameters.OneTimeTXPower << 9 | m_RunTimeCalibConfigParameters.OneTimeRXGain << 10);
            RunTimeCalibConfigurationParam.PeriodicCalibEnaMask = (m_RunTimeCalibConfigParameters.PeriodiCalibLODist << 4 | m_RunTimeCalibConfigParameters.PeriodiCalibPDCal << 8 | m_RunTimeCalibConfigParameters.PeriodiCalibTXPower << 9 | m_RunTimeCalibConfigParameters.PeriodiCalibRXGain << 10);
            RunTimeCalibConfigurationParam.CalibPeriodicity = m_RunTimeCalibConfigParameters.CalibPeriodicity;
            RunTimeCalibConfigurationParam.ReportEnable = (byte)m_RunTimeCalibConfigParameters.EnableCalReport;
            RunTimeCalibConfigurationParam.TxPowerCalMode = (byte)m_RunTimeCalibConfigParameters.TxPowerCalMode;
            RunTimeCalibConfigurationParam.Reserved1 = 0;
            RunTimeCalibConfigurationParam.Reserved2 = 0;
            RunTimeCalibConfigurationParam.Reserved3 = 0U;
            IntPtr data = GCHandle.Alloc(RunTimeCalibConfigurationParam, GCHandleType.Pinned).AddrOfPinnedObject();
            int num;
            if (GlobalRef.g_NtvRS232Connect[(int)GlobalRef.g_RadarDeviceIndex] && GlobalRef.g_CasCadeDeviceSpiConnect == 0U)
            {
                num = m_TsWrapper.Calling_WriteAddr_Single(4294959848U, 1U);
                if (m_GuiManager.DllOps.itempDisconnect(false) == 0)
                {
                    string full_command = string.Format("Debug Port Disconnected", new object[0]);
                    m_GuiManager.RecordLog(0, full_command);
                    if (!GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
                    {
                        iRs232ConnectDisconnect_impl();
                    }
                }
            }
            if (m_RadarDeviceModeConfigParams.NumberOfRadarDevicesDetected <= 1)
            {
                string full_command2 = string.Format("ar1.RunTimeCalibConfTrig({0}, {1}, {2}, {3}, {4}, {5}, {6}, {7}, {8}, {9}, {10})", new object[]
                {
                    m_RunTimeCalibConfigParameters.OneTimeLODist,
                    m_RunTimeCalibConfigParameters.OneTimeTXPower,
                    m_RunTimeCalibConfigParameters.OneTimeRXGain,
                    m_RunTimeCalibConfigParameters.OneTimePDCal,
                    m_RunTimeCalibConfigParameters.PeriodiCalibLODist,
                    m_RunTimeCalibConfigParameters.PeriodiCalibTXPower,
                    m_RunTimeCalibConfigParameters.PeriodiCalibRXGain,
                    m_RunTimeCalibConfigParameters.PeriodiCalibPDCal,
                    m_RunTimeCalibConfigParameters.CalibPeriodicity,
                    m_RunTimeCalibConfigParameters.EnableCalReport,
                    m_RunTimeCalibConfigParameters.TxPowerCalMode
                });
                m_GuiManager.RecordLog(6, full_command2);
            }
            else
            {
                string full_command3 = string.Format("ar1.RunTimeCalibConfTrig_mult({0}, {1}, {2}, {3}, {4}, {5}, {6}, {7}, {8}, {9}, {10}, {11})", new object[]
                {
                    GlobalRef.g_RadarDeviceId,
                    m_RunTimeCalibConfigParameters.OneTimeLODist,
                    m_RunTimeCalibConfigParameters.OneTimeTXPower,
                    m_RunTimeCalibConfigParameters.OneTimeRXGain,
                    m_RunTimeCalibConfigParameters.OneTimePDCal,
                    m_RunTimeCalibConfigParameters.PeriodiCalibLODist,
                    m_RunTimeCalibConfigParameters.PeriodiCalibTXPower,
                    m_RunTimeCalibConfigParameters.PeriodiCalibRXGain,
                    m_RunTimeCalibConfigParameters.PeriodiCalibPDCal,
                    m_RunTimeCalibConfigParameters.CalibPeriodicity,
                    m_RunTimeCalibConfigParameters.EnableCalReport,
                    m_RunTimeCalibConfigParameters.TxPowerCalMode
                });
                m_GuiManager.RecordLog(6, full_command3);
            }
            GlobalRef.g_RunTimeCalibStatus = 0U;
            num = Imports.RadarLinkImpl_RunTimeCalibConf(GlobalRef.g_RadarDeviceId, data);
            if (RunTimeCalibConfigurationParam.ReportEnable == 1)
            {
                ushort num2 = 0;
                while (GlobalRef.g_RunTimeCalibStatus == 0U)
                {
                    Thread.Sleep(100);
                    num2 += 1;
                    if (num2 > 30)
                    {
                        string msg = string.Format("Run time Calib response from the device timed out!", new object[0]);
                        GlobalRef.LuaWrapper.PrintError(msg);
                        return -1;
                    }
                }
            }
            if (num == 0)
            {
                if (GlobalRef.g_RadarDeviceId == 1U)
                {
                    ErrorFlag = "0x" + ScriptOps.RunTimeCalibParam.ErrorFlag.ToString("X");
                    UpdateStatus = "0x" + ScriptOps.RunTimeCalibParam.UpdateStatus.ToString("X");
                    Temperature = "0x" + ScriptOps.RunTimeCalibParam.Temperature.ToString("X");
                    TimeStamp = "0x" + ScriptOps.RunTimeCalibParam.TimeStamp.ToString("X");
                }
                else if (GlobalRef.g_RadarDeviceId == 2U)
                {
                    ErrorFlag = "0x" + ScriptOps.RunTimeCalibParam.ErrorFlag.ToString("X");
                    UpdateStatus = "0x" + ScriptOps.RunTimeCalibParam.UpdateStatus.ToString("X");
                    Temperature = "0x" + ScriptOps.RunTimeCalibParam.Temperature.ToString("X");
                    TimeStamp = "0x" + ScriptOps.RunTimeCalibParam.TimeStamp.ToString("X");
                }
                else if (GlobalRef.g_RadarDeviceId == 4U)
                {
                    ErrorFlag = "0x" + ScriptOps.RunTimeCalibParam.ErrorFlag.ToString("X");
                    UpdateStatus = "0x" + ScriptOps.RunTimeCalibParam.UpdateStatus.ToString("X");
                    Temperature = "0x" + ScriptOps.RunTimeCalibParam.Temperature.ToString("X");
                    TimeStamp = "0x" + ScriptOps.RunTimeCalibParam.TimeStamp.ToString("X");
                }
                else if (GlobalRef.g_RadarDeviceId == 8U)
                {
                    ErrorFlag = "0x" + ScriptOps.RunTimeCalibParam.ErrorFlag.ToString("X");
                    UpdateStatus = "0x" + ScriptOps.RunTimeCalibParam.UpdateStatus.ToString("X");
                    Temperature = "0x" + ScriptOps.RunTimeCalibParam.Temperature.ToString("X");
                    TimeStamp = "0x" + ScriptOps.RunTimeCalibParam.TimeStamp.ToString("X");
                }
            }
            if ((num == 0 && ((GlobalRef.g_CasCadeDeviceSpiConnect & 1U) == 1U || (GlobalRef.g_CasCadeDeviceSpiConnect & 2U) == 2U || (GlobalRef.g_CasCadeDeviceSpiConnect & 4U) == 4U || (GlobalRef.g_CasCadeDeviceSpiConnect & 8U) == 8U)) || GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
            {
                string full_command4 = string.Format("Status: Passed", new object[0]);
                m_GuiManager.RecordLog(8, full_command4);
            }
            else
            {
                string msg2 = string.Format("Status: Failed, Error Type: {0}", new object[]
                {
                    GetErrorType(num)
                });
                GlobalRef.LuaWrapper.PrintError(msg2);
            }
            if (GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
            {
                if (iRs232ConnectDisconnect_impl() == 0 && !GlobalRef.g_NtvRS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
                {
                    m_GuiManager.DllOps.iConnect(1U, 0U);
                    string full_command5 = string.Format("Debug Port Reconnected!", new object[0]);
                    m_GuiManager.RecordLog(9, full_command5);
                    ScriptOps.KeepTrying(2000, new Func<bool>(spare_read));
                }
            }
            else if (GlobalRef.g_CasCadeDeviceSpiConnect == 0U)
            {
                string full_command6 = string.Format("Error Occurred in Port open close", new object[0]);
                m_GuiManager.RecordLog(9, full_command6);
            }
            return num;
        }

        public int UpdateNSetPDPowerConfigData(ushort RadarDeviceId, char PDId, char p2, char NumAccumulations, char NumSamples, byte PDType, byte pdSel, byte pdDacVal, byte paramVal, uint Reserved)
        {
            int result = 0;
            GlobalRef.g_RadarDeviceId = (uint)RadarDeviceId;
            ScriptOps.m_MainForm.RFStatusTab.UpdateMeasurePDPowerConfigData();
            m_MeasurePDPowerConfigParams.PDId = PDId;
            m_MeasurePDPowerConfigParams.PDLnaGainIndex = p2;
            m_MeasurePDPowerConfigParams.NumOfAccumulations = NumAccumulations;
            m_MeasurePDPowerConfigParams.NumOfSamples = NumSamples;
            m_MeasurePDPowerConfigParams.PDType = PDType;
            m_MeasurePDPowerConfigParams.pdSel = pdSel;
            m_MeasurePDPowerConfigParams.pdDacVal = pdDacVal;
            m_MeasurePDPowerConfigParams.paramVal = paramVal;
            m_MeasurePDPowerConfigParams.Reserved = Reserved;
            ScriptOps.m_MainForm.RFStatusTab.UpdateMeasurePDPowerConfigDataFrmCmd();
            return result;
        }

        public int UpdateNTempertureSensorTempConfigData(ushort RadarDeviceId, short TrimTemp1, short TrimTemp2, ushort TrimCodeRx1, ushort TrimCodeTx1, ushort TrimCodePm1, ushort TrimCodeDig1, ushort TrimCodeRx2, ushort TrimCodeTx2, ushort TrimCodePm2, ushort TrimCodeDig2)
        {
            int num = 0;
            GlobalRef.g_RadarDeviceId = (uint)RadarDeviceId;
            ScriptOps.m_MainForm.RFStatusTab.UpdateTempertureSensorTempConfigData();
            m_TemperatrueSensorTempDataConfigParams.TrimTemp1 = TrimTemp1;
            m_TemperatrueSensorTempDataConfigParams.TrimTemp2 = TrimTemp2;
            m_TemperatrueSensorTempDataConfigParams.TrimCodeRx1 = TrimCodeRx1;
            m_TemperatrueSensorTempDataConfigParams.TrimCodeTx1 = TrimCodeTx1;
            m_TemperatrueSensorTempDataConfigParams.TrimCodePm1 = TrimCodePm1;
            m_TemperatrueSensorTempDataConfigParams.TrimCodeDig1 = TrimCodeDig1;
            m_TemperatrueSensorTempDataConfigParams.TrimCodeRx2 = TrimCodeRx2;
            m_TemperatrueSensorTempDataConfigParams.TrimCodeTx2 = TrimCodeTx2;
            m_TemperatrueSensorTempDataConfigParams.TrimCodePm2 = TrimCodePm2;
            m_TemperatrueSensorTempDataConfigParams.TrimCodeDig2 = TrimCodeDig2;
            ScriptOps.m_MainForm.RFStatusTab.UpdateTempertureSensorTempConfigDataFrmCmd();
            return num + iSetTempertureSensorTempDataConfig_Gui(true, false);
        }

        public int UpdateNAdvanceFrameConfigConfigData(ushort RadarDeviceId, uint NumOfSubFrames, ushort ForceProfile, ushort ForceProfileIdx, ushort ChirpStartIdx, ushort NumOfChirps, ushort NumOfLoops, uint BurstPeriodicity, ushort ChirpStartIdxOffset, ushort NumOfBrust, ushort NumOfBrustLoops, uint SubFramePeriodicity, ushort SF2ForceProfileIdx, ushort SF2ChirpStartIdx, ushort SF2NumOfChirps, ushort SF2NumOfLoops, uint SF2BurstPeriodicity, ushort SF2ChirpStartIdxOffset, ushort SF2NumOfBrust, ushort SF2NumOfBrustLoops, uint SF2SubFramePeriodicity, ushort SF3ForceProfileIdx, ushort SF3ChirpStartIdx, ushort SF3NumOfChirps, ushort SF3NumOfLoops, uint SF3BurstPeriodicity, ushort SF3ChirpStartIdxOffset, ushort SF3NumOfBrust, ushort SF3NumOfBrustLoops, uint SF3SubFramePeriodicity, ushort SF4ForceProfileIdx, ushort SF4ChirpStartIdx, ushort SF4NumOfChirps, ushort SF4NumOfLoops, uint SF4BurstPeriodicity, ushort SF4ChirpStartIdxOffset, ushort SF4NumOfBrust, ushort SF4NumOfBrustLoops, uint SF4SubFramePeriodicity, ushort NumOfFrames, ushort TriggerSelect, uint FrameTrigDelay, byte NumOfCloneSubFrames, uint SF1TotalChirps, ushort SF1NumOfAdcSamples, byte SF1NumOfChirpsInDataPacket, uint SF2TotalChirps, ushort SF2NumOfAdcSamples, byte SF2NumOfChirpsInDataPacket, uint SF3TotalChirps, ushort SF3NumOfAdcSamples, byte SF3NumOfChirpsInDataPacket, uint SF4TotalChirps, ushort SF4NumOfAdcSamples, byte SF4NumOfChirpsInDataPacket)
        {
            int num = 0;
            GlobalRef.g_RadarDeviceId = (uint)RadarDeviceId;
            ScriptOps.m_MainForm.AdvanceFrameConfigTab.UpdateAdvncedFrameConfigData();
            m_AdvancedFrameConfigParams.NumOfSubFrames = (byte)(NumOfSubFrames & 65535U);
            m_AdvancedFrameConfigParams.SWSubFrameTriggerMode = (byte)(NumOfSubFrames >> 16);
            m_AdvancedFrameConfigParams.ForceProfile = (byte)(ForceProfile & 255);
            m_AdvancedFrameConfigParams.AdvFrameControl = 0;
            m_AdvancedFrameConfigParams.NumOfFrames = NumOfFrames;
            m_AdvancedFrameConfigParams.TriggerSelect = TriggerSelect;
            m_AdvancedFrameConfigParams.FrameTrigDelay = FrameTrigDelay;
            m_AdvancedFrameConfigParams.LoopBackCfg = (byte)(ForceProfile >> 8 & 1);
            m_AdvancedFrameConfigParams.SubFrameId = (byte)(ForceProfile >> 9 & 3);
            m_AdvancedFrameConfigParams.ForceProfileIdx = ForceProfileIdx;
            m_AdvancedFrameConfigParams.ChirpStartIdx = ChirpStartIdx;
            m_AdvancedFrameConfigParams.NumOfChirps = NumOfChirps;
            m_AdvancedFrameConfigParams.NumOfLoops = NumOfLoops;
            m_AdvancedFrameConfigParams.BurstPeriodicity = (float)(BurstPeriodicity / 200000.0);
            m_AdvancedFrameConfigParams.ChirpStartIdxOffset = ChirpStartIdxOffset;
            m_AdvancedFrameConfigParams.NumOfBrust = NumOfBrust;
            m_AdvancedFrameConfigParams.NumOfBrustLoops = NumOfBrustLoops;
            m_AdvancedFrameConfigParams.SubFramePeriodicity = (float)(SubFramePeriodicity / 200000.0);
            m_AdvancedFrameConfigParams.NumOfAdcSamples = SF1NumOfAdcSamples;
            m_AdvancedFrameConfigParams.ForceProfileIdx2 = SF2ForceProfileIdx;
            m_AdvancedFrameConfigParams.ChirpStartIdx2 = SF2ChirpStartIdx;
            m_AdvancedFrameConfigParams.NumOfChirps2 = SF2NumOfChirps;
            m_AdvancedFrameConfigParams.NumOfLoops2 = SF2NumOfLoops;
            m_AdvancedFrameConfigParams.BurstPeriodicity2 = (float)(SF2BurstPeriodicity / 200000.0);
            m_AdvancedFrameConfigParams.ChirpStartIdxOffset2 = SF2ChirpStartIdxOffset;
            m_AdvancedFrameConfigParams.NumOfBrust2 = SF2NumOfBrust;
            m_AdvancedFrameConfigParams.NumOfBrustLoops2 = SF2NumOfBrustLoops;
            m_AdvancedFrameConfigParams.SubFramePeriodicity2 = (float)(SF2SubFramePeriodicity / 200000.0);
            m_AdvancedFrameConfigParams.NumOfAdcSamples2 = SF2NumOfAdcSamples;
            m_AdvancedFrameConfigParams.ForceProfileIdx3 = SF3ForceProfileIdx;
            m_AdvancedFrameConfigParams.ChirpStartIdx3 = SF3ChirpStartIdx;
            m_AdvancedFrameConfigParams.NumOfChirps3 = SF3NumOfChirps;
            m_AdvancedFrameConfigParams.NumOfLoops3 = SF3NumOfLoops;
            m_AdvancedFrameConfigParams.BurstPeriodicity3 = (float)(SF3BurstPeriodicity / 200000.0);
            m_AdvancedFrameConfigParams.ChirpStartIdxOffset3 = SF3ChirpStartIdxOffset;
            m_AdvancedFrameConfigParams.NumOfBrust3 = SF3NumOfBrust;
            m_AdvancedFrameConfigParams.NumOfBrustLoops3 = SF3NumOfBrustLoops;
            m_AdvancedFrameConfigParams.SubFramePeriodicity3 = (float)(SF3SubFramePeriodicity / 200000.0);
            m_AdvancedFrameConfigParams.NumOfAdcSamples3 = SF3NumOfAdcSamples;
            m_AdvancedFrameConfigParams.ForceProfileIdx4 = SF4ForceProfileIdx;
            m_AdvancedFrameConfigParams.ChirpStartIdx4 = SF4ChirpStartIdx;
            m_AdvancedFrameConfigParams.NumOfChirps4 = SF4NumOfChirps;
            m_AdvancedFrameConfigParams.NumOfLoops4 = SF4NumOfLoops;
            m_AdvancedFrameConfigParams.BurstPeriodicity4 = (float)(SF4BurstPeriodicity / 200000.0);
            m_AdvancedFrameConfigParams.ChirpStartIdxOffset4 = SF4ChirpStartIdxOffset;
            m_AdvancedFrameConfigParams.NumOfBrust4 = SF4NumOfBrust;
            m_AdvancedFrameConfigParams.NumOfBrustLoops4 = SF4NumOfBrustLoops;
            m_AdvancedFrameConfigParams.SubFramePeriodicity4 = (float)(SF4SubFramePeriodicity / 200000.0);
            m_AdvancedFrameConfigParams.NumOfAdcSamples4 = SF4NumOfAdcSamples;
            ScriptOps.m_MainForm.AdvanceFrameConfigTab.UpdateAdvncedFrameConfigDataFrmCmd();
            return num + iAdvncedFrameConfig_Gui(true, false);
        }

        public int UpdateNLoopBackBurstConfigData(uint RadarDeviceId, byte LoopBackSelect, byte BaseProfileIndex, byte BurstIndex, byte Reserved, double FreqConst, float SlopeConst, ushort Reserved2, uint TxBackOff, ushort RxGain, byte TxEnable, byte Reserved3, ushort BPMConfig, ushort DigitalCorrectionDisable, byte IFLoopBackFreq, byte IFLoopBackMagnitude, byte p16, byte p17, uint PSLoopBackFreq, uint Reserved4, ushort PALoopBackFreq, ushort Reserved5, ushort Reserved6, ushort Reserved7)
        {
            int num = 0;
            GlobalRef.g_RadarDeviceId = RadarDeviceId;
            ScriptOps.m_MainForm.AdvanceFrameConfigTab.UpdateLoopBackBurstConfigData();
            m_LoopBackBurstConfigParams.LoopBackSelect = LoopBackSelect;
            m_LoopBackBurstConfigParams.BaseProfileIndex = BaseProfileIndex;
            m_LoopBackBurstConfigParams.BurstIndex = BurstIndex;
            m_LoopBackBurstConfigParams.FreqConst = FreqConst;
            m_LoopBackBurstConfigParams.SlopeConst = SlopeConst;
            m_LoopBackBurstConfigParams.Tx1BackOff = (byte)(TxBackOff & 255U);
            m_LoopBackBurstConfigParams.Tx2BackOff = (byte)(TxBackOff >> 8 & 255U);
            m_LoopBackBurstConfigParams.Tx3BackOff = (byte)(TxBackOff >> 16 & 255U);
            m_LoopBackBurstConfigParams.RxGain = (byte)(RxGain & 63);
            m_LoopBackBurstConfigParams.RFGainTarget = (byte)(RxGain >> 6 & 3);
            m_LoopBackBurstConfigParams.Tx1Enable = (byte)(TxEnable & 1);
            m_LoopBackBurstConfigParams.Tx2Enable = (byte)(TxEnable >> 1 & 1);
            m_LoopBackBurstConfigParams.Tx3Enable = (byte)(TxEnable >> 2 & 1);
            m_LoopBackBurstConfigParams.BPMTx0Off = (byte)(BPMConfig & 1);
            m_LoopBackBurstConfigParams.BPMTx0On = (byte)(BPMConfig >> 1 & 1);
            m_LoopBackBurstConfigParams.BPMTx1Off = (byte)(BPMConfig >> 2 & 1);
            m_LoopBackBurstConfigParams.BPMTx1On = (byte)(BPMConfig >> 3 & 1);
            m_LoopBackBurstConfigParams.BPMTx2Off = (byte)(BPMConfig >> 4 & 1);
            m_LoopBackBurstConfigParams.BPMTx2On = (byte)(BPMConfig >> 5 & 1);
            m_LoopBackBurstConfigParams.IQMM = (byte)(DigitalCorrectionDisable & 1);
            m_LoopBackBurstConfigParams.RxGainPhase = (byte)(DigitalCorrectionDisable >> 1 & 1);
            m_LoopBackBurstConfigParams.IFLoopBackFreq = IFLoopBackFreq;
            m_LoopBackBurstConfigParams.IFLoopBackMagnitude = IFLoopBackMagnitude;
            m_LoopBackBurstConfigParams.f000027 = p16;
            m_LoopBackBurstConfigParams.f000028 = p17;
            m_LoopBackBurstConfigParams.PALoopBackFreq = PALoopBackFreq;
            m_LoopBackBurstConfigParams.Tx1PSLoopBackFreq = (ushort)(PSLoopBackFreq & 65535U);
            m_LoopBackBurstConfigParams.Tx2PSLoopBackFreq = (ushort)(PSLoopBackFreq >> 16 & 65535U);
            ScriptOps.m_MainForm.AdvanceFrameConfigTab.UpdateLoopBackBurstConfigDataFrmCmd();
            return num + iLoopBuckBurstConfig_Gui(true, false);
        }

        public int SelectPMICDevice_cmd(uint RadarDeviceId, int p1)
        {
            int num = 0;
            GlobalRef.g_RadarDeviceId = RadarDeviceId;
            ScriptOps.m_MainForm.PMICTab.m00004b(p1);
            return num + iSetMultiplePMICDevicesConfig_Gui(true, false);
        }

        public int UpdateNPMICRegisterConfigData(uint RadarDeviceId, byte SlaveAddress, byte RegAddress, byte RegMsbData, byte RegLsbData, uint DataSize)
        {
            int num = 0;
            GlobalRef.g_RadarDeviceId = RadarDeviceId;
            ScriptOps.m_MainForm.PMICTab.UpdateSetPMICRegConfigData();
            m_SetPMICRegConfigParams.SlaveAddress = SlaveAddress;
            m_SetPMICRegConfigParams.RegAddress = RegAddress;
            m_SetPMICRegConfigParams.RegMsbData = RegMsbData;
            m_SetPMICRegConfigParams.RegLsbData = RegLsbData;
            m_SetPMICRegConfigParams.DataSize = (int)DataSize;
            ScriptOps.m_MainForm.PMICTab.UpdatePMICRegConfigDataFrmCmd();
            return num + iSetPMICRegConfig_Gui(true, false);
        }

        public int UpdateNPMICRegisterReadConfigData(uint RadarDeviceId, byte SlaveAddress, byte RegAddress, uint DataSize, out string RegMsbData, out string RegLsbData)
        {
            RegMsbData = string.Empty;
            RegLsbData = string.Empty;
            GlobalRef.g_RadarDeviceId = RadarDeviceId;
            ScriptOps.m_MainForm.PMICTab.UpdateGetPMICRegConfigData();
            m_GetPMICRegConfigParams.SlaveAddress = SlaveAddress;
            m_GetPMICRegConfigParams.RegAddress = RegAddress;
            m_GetPMICRegConfigParams.DataSize = (int)DataSize;
            ScriptOps.m_MainForm.PMICTab.UpdatePMICRegReadConfigDataFrmCmd();
            return iGetPMICRegConfigFromLua_Impl(out RegMsbData, out RegLsbData);
        }

        public int UpdateGPIOReadConfigData(uint RadarDeviceId, uint gpioBase, uint gpioPin, out uint gpioVal)
        {
            gpioVal = 0U;
            GlobalRef.g_RadarDeviceId = RadarDeviceId;
            f000206.gpioBase = gpioBase;
            f000206.gpioPin = gpioPin;
            f000206.gpioValue = 0U;
            ScriptOps.m_MainForm.RegOpeTab.UpdateGPIOReadConfigDataFrmCmd();
            return ScriptOps.m_MainForm.RegOpeTab.iGPIOReadConfigFromLua_Impl(out gpioVal);
        }

        public int UpdateGPIOWriteConfigData(uint RadarDeviceId, uint gpioBase, uint gpioPin, uint gpioVal)
        {
            GlobalRef.g_RadarDeviceId = RadarDeviceId;
            f000206.gpioBase = gpioBase;
            f000206.gpioPin = gpioPin;
            f000206.gpioValue = gpioVal;
            ScriptOps.m_MainForm.RegOpeTab.UpdateGPIOReadConfigDataFrmCmd();
            return ScriptOps.m_MainForm.RegOpeTab.iGPIOWriteConfigFromLua_Impl();
        }

        private int iGetPMICRegConfigFromLua_Impl(out string RegMsbData, out string RegLsbData)
        {
            RegMsbData = string.Empty;
            RegLsbData = string.Empty;
            byte[] array = new byte[4];
            IntPtr msbData = GCHandle.Alloc(array, GCHandleType.Pinned).AddrOfPinnedObject();
            byte[] array2 = new byte[4];
            IntPtr lsbData = GCHandle.Alloc(array2, GCHandleType.Pinned).AddrOfPinnedObject();
            uint g_RadarDeviceId = GlobalRef.g_RadarDeviceId;
            Thread.Sleep(200);
            int num;
            if (GlobalRef.g_I2COpenCloseHandler == 0U)
            {
                num = Imports.RadarLinkImpl_OpenI2cIrqIf(g_RadarDeviceId);
            }
            Thread.Sleep(200);
            num = Imports.RadarLinkImpl_I2CRead(g_RadarDeviceId, (char)m_GetPMICRegConfigParams.SlaveAddress, (char)m_GetPMICRegConfigParams.RegAddress, msbData, lsbData, m_GetPMICRegConfigParams.DataSize);
            Thread.Sleep(200);
            if (m_RadarDeviceModeConfigParams.NumberOfRadarDevicesDetected <= 1)
            {
                string full_command = string.Format("ar1.GetPMICRegConfig(0x{0:X}, 0x{1:X}, 0x{2:X})", new object[]
                {
                    m_GetPMICRegConfigParams.SlaveAddress,
                    m_GetPMICRegConfigParams.RegAddress,
                    m_GetPMICRegConfigParams.DataSize
                });
                m_GuiManager.RecordLog(15, full_command);
                ScriptOps.m_MainForm.PMICTab.m000058(array[0].ToString("X"));
                ScriptOps.m_MainForm.PMICTab.m000059(array2[0].ToString("X"));
                RegMsbData = array[0].ToString("X");
                RegLsbData = array2[0].ToString("X");
            }
            else
            {
                string full_command2 = string.Format("ar1.GetPMICRegConfig_mult(0x{0:X}, 0x{1:X}, 0x{2:X}, 0x{3:X})", new object[]
                {
                    GlobalRef.g_RadarDeviceId,
                    m_GetPMICRegConfigParams.SlaveAddress,
                    m_GetPMICRegConfigParams.RegAddress,
                    m_GetPMICRegConfigParams.DataSize
                });
                m_GuiManager.RecordLog(15, full_command2);
                ScriptOps.m_MainForm.PMICTab.m000058(array[0].ToString("X"));
                ScriptOps.m_MainForm.PMICTab.m000059(array2[0].ToString("X"));
                RegMsbData = array[0].ToString("X");
                RegLsbData = array2[0].ToString("X");
            }
            if (num == 0)
            {
                string full_command3 = string.Format("Status: Passed", new object[0]);
                m_GuiManager.RecordLog(8, full_command3);
            }
            else
            {
                string msg = string.Format("Status: Failed, Error Type: {0}", new object[]
                {
                    GetErrorType(num)
                });
                GlobalRef.LuaWrapper.PrintError(msg);
            }
            Thread.Sleep(200);
            if (GlobalRef.g_I2COpenCloseHandler == 0U)
            {
                num = Imports.RadarLinkImpl_CloseI2cIrqIf(g_RadarDeviceId);
            }
            return num;
        }

        public int UpdateNSWSubFrameStartStopConfigData(uint RadarDeviceId, ushort StartStopCommand, ushort Reserved, ushort Reserved2)
        {
            int num = 0;
            GlobalRef.g_RadarDeviceId = RadarDeviceId;
            ScriptOps.m_MainForm.AdvanceFrameConfigTab.UpdateSWSubFrameStartConfigData();
            m_SWSubFrameStartStopConfigParams.StartCommand = StartStopCommand;
            m_SWSubFrameStartStopConfigParams.Reserved = 0;
            ScriptOps.m_MainForm.AdvanceFrameConfigTab.UpdateSWSubFrameStartConfigDataFrmCmd();
            return num + iSoftwareSubFrameStartConfig_Gui(true, false);
        }

        public int UpdateNSetRFEthernetInitializationConfigurationData(uint RadarDeviceId, string p1, string SourcePCIPAddress, string p3, uint ConfigPort, uint RecordPort)
        {
            GlobalRef.f0002d0 = true;
            ethernetInitConfigurationParam.f00001c = (m_EthernetInitConfigParams.f00001c = Convert.ToByte(p1.Substring(0, 2)));
            ethernetInitConfigurationParam.f00001d = (m_EthernetInitConfigParams.f00001d = Convert.ToByte(p1.Substring(3, 2)));
            ethernetInitConfigurationParam.f00001e = (m_EthernetInitConfigParams.f00001e = Convert.ToByte(p1.Substring(6, 2)));
            ethernetInitConfigurationParam.f00001f = (m_EthernetInitConfigParams.f00001f = Convert.ToByte(p1.Substring(9, 2)));
            ethernetInitConfigurationParam.f000020 = (m_EthernetInitConfigParams.f000020 = Convert.ToByte(p1.Substring(12, 2)));
            ethernetInitConfigurationParam.f000021 = (m_EthernetInitConfigParams.f000021 = Convert.ToByte(p1.Substring(15, 2)));
            ethernetInitConfigurationParam.au8SourceIpAddr0 = (m_EthernetInitConfigParams.au8SourceIpAddr0 = Convert.ToByte(SourcePCIPAddress.Substring(0, 3)));
            ethernetInitConfigurationParam.au8SourceIpAddr1 = (m_EthernetInitConfigParams.au8SourceIpAddr1 = Convert.ToByte(SourcePCIPAddress.Substring(4, 3)));
            ethernetInitConfigurationParam.au8SourceIpAddr2 = (m_EthernetInitConfigParams.au8SourceIpAddr2 = Convert.ToByte(SourcePCIPAddress.Substring(8, 2)));
            ethernetInitConfigurationParam.au8SourceIpAddr3 = (m_EthernetInitConfigParams.au8SourceIpAddr3 = Convert.ToByte(SourcePCIPAddress.Substring(11, 2)));
            ethernetInitConfigurationParam.au8DestiIpAddr0 = (m_EthernetInitConfigParams.au8DestiIpAddr0 = Convert.ToByte(p3.Substring(0, 3)));
            ethernetInitConfigurationParam.au8DestiIpAddr1 = (m_EthernetInitConfigParams.au8DestiIpAddr1 = Convert.ToByte(p3.Substring(4, 3)));
            ethernetInitConfigurationParam.au8DestiIpAddr2 = (m_EthernetInitConfigParams.au8DestiIpAddr2 = Convert.ToByte(p3.Substring(8, 2)));
            ethernetInitConfigurationParam.au8DestiIpAddr3 = (m_EthernetInitConfigParams.au8DestiIpAddr3 = Convert.ToByte(p3.Substring(11, 3)));
            m_EthernetInitConfigParams.u32ConfigPortNo = ConfigPort;
            m_EthernetInitConfigParams.u32RecordPortNo = RecordPort;
            return RFEthernetInitializationConfigurationData_Impl();
        }

        public int UpdateNSetRFEthernetInitializationConfigurationData_WithoutSPI(uint RadarDeviceId, string p1, string SourcePCIPAddress, string p3, uint ConfigPort, uint RecordPort)
        {
            GlobalRef.f0002d0 = true;
            ethernetInitConfigurationParam.f00001c = (m_EthernetInitConfigParams.f00001c = Convert.ToByte(p1.Substring(0, 2)));
            ethernetInitConfigurationParam.f00001d = (m_EthernetInitConfigParams.f00001d = Convert.ToByte(p1.Substring(3, 2)));
            ethernetInitConfigurationParam.f00001e = (m_EthernetInitConfigParams.f00001e = Convert.ToByte(p1.Substring(6, 2)));
            ethernetInitConfigurationParam.f00001f = (m_EthernetInitConfigParams.f00001f = Convert.ToByte(p1.Substring(9, 2)));
            ethernetInitConfigurationParam.f000020 = (m_EthernetInitConfigParams.f000020 = Convert.ToByte(p1.Substring(12, 2)));
            ethernetInitConfigurationParam.f000021 = (m_EthernetInitConfigParams.f000021 = Convert.ToByte(p1.Substring(15, 2)));
            ethernetInitConfigurationParam.au8SourceIpAddr0 = (m_EthernetInitConfigParams.au8SourceIpAddr0 = Convert.ToByte(SourcePCIPAddress.Substring(0, 3)));
            ethernetInitConfigurationParam.au8SourceIpAddr1 = (m_EthernetInitConfigParams.au8SourceIpAddr1 = Convert.ToByte(SourcePCIPAddress.Substring(4, 3)));
            ethernetInitConfigurationParam.au8SourceIpAddr2 = (m_EthernetInitConfigParams.au8SourceIpAddr2 = Convert.ToByte(SourcePCIPAddress.Substring(8, 2)));
            ethernetInitConfigurationParam.au8SourceIpAddr3 = (m_EthernetInitConfigParams.au8SourceIpAddr3 = Convert.ToByte(SourcePCIPAddress.Substring(11, 2)));
            ethernetInitConfigurationParam.au8DestiIpAddr0 = (m_EthernetInitConfigParams.au8DestiIpAddr0 = Convert.ToByte(p3.Substring(0, 3)));
            ethernetInitConfigurationParam.au8DestiIpAddr1 = (m_EthernetInitConfigParams.au8DestiIpAddr1 = Convert.ToByte(p3.Substring(4, 3)));
            ethernetInitConfigurationParam.au8DestiIpAddr2 = (m_EthernetInitConfigParams.au8DestiIpAddr2 = Convert.ToByte(p3.Substring(8, 2)));
            ethernetInitConfigurationParam.au8DestiIpAddr3 = (m_EthernetInitConfigParams.au8DestiIpAddr3 = Convert.ToByte(p3.Substring(11, 3)));
            m_EthernetInitConfigParams.u32ConfigPortNo = ConfigPort;
            m_EthernetInitConfigParams.u32RecordPortNo = RecordPort;
            return RFEthernetInitializationConfigurationData_Impl_WithoutSPI();
        }

        public int m000097(uint RadarDeviceId, string p1, string SourcePCIPAddress, string p3, uint ConfigPort, uint RecordPort)
        {
            ethernetInitConfigurationParam.f00001c = (m_EthernetInitConfigParams.f00001c = Convert.ToByte(p1.Substring(0, 2)));
            ethernetInitConfigurationParam.f00001d = (m_EthernetInitConfigParams.f00001d = Convert.ToByte(p1.Substring(3, 2)));
            ethernetInitConfigurationParam.f00001e = (m_EthernetInitConfigParams.f00001e = Convert.ToByte(p1.Substring(6, 2)));
            ethernetInitConfigurationParam.f00001f = (m_EthernetInitConfigParams.f00001f = Convert.ToByte(p1.Substring(9, 2)));
            ethernetInitConfigurationParam.f000020 = (m_EthernetInitConfigParams.f000020 = Convert.ToByte(p1.Substring(12, 2)));
            ethernetInitConfigurationParam.f000021 = (m_EthernetInitConfigParams.f000021 = Convert.ToByte(p1.Substring(15, 2)));
            ethernetInitConfigurationParam.au8SourceIpAddr0 = (m_EthernetInitConfigParams.au8SourceIpAddr0 = Convert.ToByte(SourcePCIPAddress.Substring(0, 3)));
            ethernetInitConfigurationParam.au8SourceIpAddr1 = (m_EthernetInitConfigParams.au8SourceIpAddr1 = Convert.ToByte(SourcePCIPAddress.Substring(4, 3)));
            ethernetInitConfigurationParam.au8SourceIpAddr2 = (m_EthernetInitConfigParams.au8SourceIpAddr2 = Convert.ToByte(SourcePCIPAddress.Substring(8, 2)));
            ethernetInitConfigurationParam.au8SourceIpAddr3 = (m_EthernetInitConfigParams.au8SourceIpAddr3 = Convert.ToByte(SourcePCIPAddress.Substring(11, 2)));
            ethernetInitConfigurationParam.au8DestiIpAddr0 = (m_EthernetInitConfigParams.au8DestiIpAddr0 = Convert.ToByte(p3.Substring(0, 3)));
            ethernetInitConfigurationParam.au8DestiIpAddr1 = (m_EthernetInitConfigParams.au8DestiIpAddr1 = Convert.ToByte(p3.Substring(4, 3)));
            ethernetInitConfigurationParam.au8DestiIpAddr2 = (m_EthernetInitConfigParams.au8DestiIpAddr2 = Convert.ToByte(p3.Substring(8, 2)));
            ethernetInitConfigurationParam.au8DestiIpAddr3 = (m_EthernetInitConfigParams.au8DestiIpAddr3 = Convert.ToByte(p3.Substring(11, 3)));
            m_EthernetInitConfigParams.u32ConfigPortNo = ConfigPort;
            m_EthernetInitConfigParams.u32RecordPortNo = RecordPort;
            return ConfigurationOfRFDataCardEEPROMData_Impl();
        }

        public int m000098(uint RadarDeviceId, string p1, string SourcePCIPAddress, string p3, uint ConfigPort, uint RecordPort)
        {
            ethernetInitConfigurationParam.f00001c = (m_EthernetInitConfigParams.f00001c = Convert.ToByte(p1.Substring(0, 2)));
            ethernetInitConfigurationParam.f00001d = (m_EthernetInitConfigParams.f00001d = Convert.ToByte(p1.Substring(3, 2)));
            ethernetInitConfigurationParam.f00001e = (m_EthernetInitConfigParams.f00001e = Convert.ToByte(p1.Substring(6, 2)));
            ethernetInitConfigurationParam.f00001f = (m_EthernetInitConfigParams.f00001f = Convert.ToByte(p1.Substring(9, 2)));
            ethernetInitConfigurationParam.f000020 = (m_EthernetInitConfigParams.f000020 = Convert.ToByte(p1.Substring(12, 2)));
            ethernetInitConfigurationParam.f000021 = (m_EthernetInitConfigParams.f000021 = Convert.ToByte(p1.Substring(15, 2)));
            ethernetInitConfigurationParam.au8SourceIpAddr0 = (m_EthernetInitConfigParams.au8SourceIpAddr0 = Convert.ToByte(SourcePCIPAddress.Substring(0, 3)));
            ethernetInitConfigurationParam.au8SourceIpAddr1 = (m_EthernetInitConfigParams.au8SourceIpAddr1 = Convert.ToByte(SourcePCIPAddress.Substring(4, 3)));
            ethernetInitConfigurationParam.au8SourceIpAddr2 = (m_EthernetInitConfigParams.au8SourceIpAddr2 = Convert.ToByte(SourcePCIPAddress.Substring(8, 2)));
            ethernetInitConfigurationParam.au8SourceIpAddr3 = (m_EthernetInitConfigParams.au8SourceIpAddr3 = Convert.ToByte(SourcePCIPAddress.Substring(11, 2)));
            ethernetInitConfigurationParam.au8DestiIpAddr0 = (m_EthernetInitConfigParams.au8DestiIpAddr0 = Convert.ToByte(p3.Substring(0, 3)));
            ethernetInitConfigurationParam.au8DestiIpAddr1 = (m_EthernetInitConfigParams.au8DestiIpAddr1 = Convert.ToByte(p3.Substring(4, 3)));
            ethernetInitConfigurationParam.au8DestiIpAddr2 = (m_EthernetInitConfigParams.au8DestiIpAddr2 = Convert.ToByte(p3.Substring(8, 2)));
            ethernetInitConfigurationParam.au8DestiIpAddr3 = (m_EthernetInitConfigParams.au8DestiIpAddr3 = Convert.ToByte(p3.Substring(11, 3)));
            m_EthernetInitConfigParams.u32ConfigPortNo = ConfigPort;
            m_EthernetInitConfigParams.u32RecordPortNo = RecordPort;
            return m000099();
        }

        public int ConfigurationOfRFDataCardEEPROMData_Impl()
        {
            ethernetInitConfigurationParam.f00001c = m_EthernetInitConfigParams.f00001c;
            ethernetInitConfigurationParam.f00001d = m_EthernetInitConfigParams.f00001d;
            ethernetInitConfigurationParam.f00001e = m_EthernetInitConfigParams.f00001e;
            ethernetInitConfigurationParam.f00001f = m_EthernetInitConfigParams.f00001f;
            ethernetInitConfigurationParam.f000020 = m_EthernetInitConfigParams.f000020;
            ethernetInitConfigurationParam.f000021 = m_EthernetInitConfigParams.f000021;
            ethernetInitConfigurationParam.au8SourceIpAddr0 = m_EthernetInitConfigParams.au8SourceIpAddr0;
            ethernetInitConfigurationParam.au8SourceIpAddr1 = m_EthernetInitConfigParams.au8SourceIpAddr1;
            ethernetInitConfigurationParam.au8SourceIpAddr2 = m_EthernetInitConfigParams.au8SourceIpAddr2;
            ethernetInitConfigurationParam.au8SourceIpAddr3 = m_EthernetInitConfigParams.au8SourceIpAddr3;
            ethernetInitConfigurationParam.au8DestiIpAddr0 = m_EthernetInitConfigParams.au8DestiIpAddr0;
            ethernetInitConfigurationParam.au8DestiIpAddr1 = m_EthernetInitConfigParams.au8DestiIpAddr1;
            ethernetInitConfigurationParam.au8DestiIpAddr2 = m_EthernetInitConfigParams.au8DestiIpAddr2;
            ethernetInitConfigurationParam.au8DestiIpAddr3 = m_EthernetInitConfigParams.au8DestiIpAddr3;
            ethernetInitConfigurationParam.u32ConfigPortNo = (int)m_EthernetInitConfigParams.u32ConfigPortNo;
            ethernetInitConfigurationParam.u32RecordPortNo = (int)m_EthernetInitConfigParams.u32RecordPortNo;
            if (GlobalRef.g_NtvRS232Connect[(int)GlobalRef.g_RadarDeviceIndex] && GlobalRef.g_CasCadeDeviceSpiConnect == 0U)
            {
                m_TsWrapper.Calling_WriteAddr_Single(4294959848U, 1U);
                if (m_GuiManager.DllOps.itempDisconnect(false) == 0)
                {
                    string full_command = string.Format("Debug Port Disconnected", new object[0]);
                    m_GuiManager.RecordLog(0, full_command);
                    if (!GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
                    {
                        iRs232ConnectDisconnect_impl();
                    }
                }
            }
            if (m_RadarDeviceModeConfigParams.NumberOfRadarDevicesDetected <= 1)
            {
                string full_command2 = string.Format("ar1.ConfigureRFDCCard_EEPROM(\"{0}\", \"{1}\", \"{2}\", {3}, {4})", new object[]
                {
                    string.Concat(new string[]
                    {
                        Convert.ToString(ethernetInitConfigurationParam.au8SourceIpAddr0),
                        ".",
                        Convert.ToString(ethernetInitConfigurationParam.au8SourceIpAddr1),
                        ".",
                        Convert.ToString(ethernetInitConfigurationParam.au8SourceIpAddr2),
                        ".",
                        Convert.ToString(ethernetInitConfigurationParam.au8SourceIpAddr3)
                    }),
                    string.Concat(new string[]
                    {
                        Convert.ToString(ethernetInitConfigurationParam.au8DestiIpAddr0),
                        ".",
                        Convert.ToString(ethernetInitConfigurationParam.au8DestiIpAddr1),
                        ".",
                        Convert.ToString(ethernetInitConfigurationParam.au8DestiIpAddr2),
                        ".",
                        Convert.ToString(ethernetInitConfigurationParam.au8DestiIpAddr3)
                    }),
                    string.Concat(new string[]
                    {
                        ethernetInitConfigurationParam.f00001c.ToString(),
                        ":",
                        ethernetInitConfigurationParam.f00001d.ToString(),
                        ":",
                        ethernetInitConfigurationParam.f00001e.ToString(),
                        ":",
                        ethernetInitConfigurationParam.f00001f.ToString(),
                        ":",
                        ethernetInitConfigurationParam.f000020.ToString(),
                        ":",
                        ethernetInitConfigurationParam.f000021.ToString()
                    }),
                    ethernetInitConfigurationParam.u32ConfigPortNo,
                    ethernetInitConfigurationParam.u32RecordPortNo
                });
                m_GuiManager.RecordLog(6, full_command2);
            }
            string arg = string.Concat(new string[]
            {
                Convert.ToString(ethernetInitConfigurationParam.au8SourceIpAddr0),
                ".",
                Convert.ToString(ethernetInitConfigurationParam.au8SourceIpAddr1),
                ".",
                Convert.ToString(ethernetInitConfigurationParam.au8SourceIpAddr2),
                ".",
                Convert.ToString(ethernetInitConfigurationParam.au8SourceIpAddr3)
            });
            string arg2 = string.Concat(new string[]
            {
                Convert.ToString(ethernetInitConfigurationParam.au8DestiIpAddr0),
                ".",
                Convert.ToString(ethernetInitConfigurationParam.au8DestiIpAddr1),
                ".",
                Convert.ToString(ethernetInitConfigurationParam.au8DestiIpAddr2),
                ".",
                Convert.ToString(ethernetInitConfigurationParam.au8DestiIpAddr3)
            });
            string arg3 = string.Concat(new string[]
            {
                Convert.ToString(ethernetInitConfigurationParam.f00001c),
                ".",
                Convert.ToString(ethernetInitConfigurationParam.f00001d),
                ".",
                Convert.ToString(ethernetInitConfigurationParam.f00001e),
                ".",
                Convert.ToString(ethernetInitConfigurationParam.f00001f),
                ".",
                Convert.ToString(ethernetInitConfigurationParam.f000020),
                ".",
                Convert.ToString(ethernetInitConfigurationParam.f000021)
            });
            if (GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex] && iRs232ConnectDisconnect_impl() == 0 && !GlobalRef.g_NtvRS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
            {
                m_GuiManager.DllOps.iConnect(1U, 0U);
                string full_command3 = string.Format("Debug Port Reconnected!", new object[0]);
                m_GuiManager.RecordLog(9, full_command3);
                ScriptOps.KeepTrying(2000, new Func<bool>(spare_read));
            }
            string text = Path.GetDirectoryName(Application.StartupPath) + "\\PostProc";
            string text2 = "cf.json";
            string path = text + "\\cf.json";
            string text3 = "DCA1000EVM_CLI_Control.exe";
            object obj = JsonConvert.DeserializeObject(File.ReadAllText(path));
            if (ScriptOps.c0002ae.f0001ae == null)
            {
                ScriptOps.c0002ae.f0001ae = CallSite<Func<CallSite, object, string, string, object>>.Create(Binder.SetIndex(CSharpBinderFlags.None, typeof(ScriptOps), new CSharpArgumentInfo[]
                {
                    CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.None, null),
                    CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.UseCompileTimeType | CSharpArgumentInfoFlags.Constant, null),
                    CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.UseCompileTimeType, null)
                }));
            }
            Func<CallSite, object, string, string, object> target = ScriptOps.c0002ae.f0001ae.Target;
            CallSite f0001ae = ScriptOps.c0002ae.f0001ae;
            if (ScriptOps.c0002ae.f0001ad == null)
            {
                ScriptOps.c0002ae.f0001ad = CallSite<Func<CallSite, object, string, object>>.Create(Binder.GetIndex(CSharpBinderFlags.None, typeof(ScriptOps), new CSharpArgumentInfo[]
                {
                    CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.None, null),
                    CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.UseCompileTimeType | CSharpArgumentInfoFlags.Constant, null)
                }));
            }
            Func<CallSite, object, string, object> target2 = ScriptOps.c0002ae.f0001ad.Target;
            CallSite f0001ad = ScriptOps.c0002ae.f0001ad;
            if (ScriptOps.c0002ae.f0001ac == null)
            {
                ScriptOps.c0002ae.f0001ac = CallSite<Func<CallSite, object, string, object>>.Create(Binder.GetIndex(CSharpBinderFlags.None, typeof(ScriptOps), new CSharpArgumentInfo[]
                {
                    CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.None, null),
                    CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.UseCompileTimeType | CSharpArgumentInfoFlags.Constant, null)
                }));
            }
            target(f0001ae, target2(f0001ad, ScriptOps.c0002ae.f0001ac.Target(ScriptOps.c0002ae.f0001ac, obj, "DCA1000Config"), "ethernetConfigUpdate"), "systemIPAddress", arg);
            if (ScriptOps.c0002ae.f0001b1 == null)
            {
                ScriptOps.c0002ae.f0001b1 = CallSite<Func<CallSite, object, string, string, object>>.Create(Binder.SetIndex(CSharpBinderFlags.None, typeof(ScriptOps), new CSharpArgumentInfo[]
                {
                    CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.None, null),
                    CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.UseCompileTimeType | CSharpArgumentInfoFlags.Constant, null),
                    CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.UseCompileTimeType, null)
                }));
            }
            Func<CallSite, object, string, string, object> target3 = ScriptOps.c0002ae.f0001b1.Target;
            CallSite f0001b = ScriptOps.c0002ae.f0001b1;
            if (ScriptOps.c0002ae.f0001b0 == null)
            {
                ScriptOps.c0002ae.f0001b0 = CallSite<Func<CallSite, object, string, object>>.Create(Binder.GetIndex(CSharpBinderFlags.None, typeof(ScriptOps), new CSharpArgumentInfo[]
                {
                    CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.None, null),
                    CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.UseCompileTimeType | CSharpArgumentInfoFlags.Constant, null)
                }));
            }
            Func<CallSite, object, string, object> target4 = ScriptOps.c0002ae.f0001b0.Target;
            CallSite f0001b2 = ScriptOps.c0002ae.f0001b0;
            if (ScriptOps.c0002ae.f0001af == null)
            {
                ScriptOps.c0002ae.f0001af = CallSite<Func<CallSite, object, string, object>>.Create(Binder.GetIndex(CSharpBinderFlags.None, typeof(ScriptOps), new CSharpArgumentInfo[]
                {
                    CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.None, null),
                    CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.UseCompileTimeType | CSharpArgumentInfoFlags.Constant, null)
                }));
            }
            target3(f0001b, target4(f0001b2, ScriptOps.c0002ae.f0001af.Target(ScriptOps.c0002ae.f0001af, obj, "DCA1000Config"), "ethernetConfigUpdate"), "DCA1000IPAddress", arg2);
            if (ScriptOps.c0002ae.f0001b4 == null)
            {
                ScriptOps.c0002ae.f0001b4 = CallSite<Func<CallSite, object, string, string, object>>.Create(Binder.SetIndex(CSharpBinderFlags.None, typeof(ScriptOps), new CSharpArgumentInfo[]
                {
                    CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.None, null),
                    CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.UseCompileTimeType | CSharpArgumentInfoFlags.Constant, null),
                    CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.UseCompileTimeType, null)
                }));
            }
            Func<CallSite, object, string, string, object> target5 = ScriptOps.c0002ae.f0001b4.Target;
            CallSite f0001b3 = ScriptOps.c0002ae.f0001b4;
            if (ScriptOps.c0002ae.f0001b3 == null)
            {
                ScriptOps.c0002ae.f0001b3 = CallSite<Func<CallSite, object, string, object>>.Create(Binder.GetIndex(CSharpBinderFlags.None, typeof(ScriptOps), new CSharpArgumentInfo[]
                {
                    CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.None, null),
                    CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.UseCompileTimeType | CSharpArgumentInfoFlags.Constant, null)
                }));
            }
            Func<CallSite, object, string, object> target6 = ScriptOps.c0002ae.f0001b3.Target;
            CallSite f0001b4 = ScriptOps.c0002ae.f0001b3;
            if (ScriptOps.c0002ae.f0001b2 == null)
            {
                ScriptOps.c0002ae.f0001b2 = CallSite<Func<CallSite, object, string, object>>.Create(Binder.GetIndex(CSharpBinderFlags.None, typeof(ScriptOps), new CSharpArgumentInfo[]
                {
                    CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.None, null),
                    CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.UseCompileTimeType | CSharpArgumentInfoFlags.Constant, null)
                }));
            }
            target5(f0001b3, target6(f0001b4, ScriptOps.c0002ae.f0001b2.Target(ScriptOps.c0002ae.f0001b2, obj, "DCA1000Config"), "ethernetConfigUpdate"), "DCA1000MACAddress", arg3);
            if (ScriptOps.c0002ae.f0002e0 == null)
            {
                ScriptOps.c0002ae.f0002e0 = CallSite<Func<CallSite, object, string, int, object>>.Create(Binder.SetIndex(CSharpBinderFlags.None, typeof(ScriptOps), new CSharpArgumentInfo[]
                {
                    CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.None, null),
                    CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.UseCompileTimeType | CSharpArgumentInfoFlags.Constant, null),
                    CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.UseCompileTimeType, null)
                }));
            }
            Func<CallSite, object, string, int, object> target7 = ScriptOps.c0002ae.f0002e0.Target;
            CallSite f0002e = ScriptOps.c0002ae.f0002e0;
            if (ScriptOps.c0002ae.f0001b6 == null)
            {
                ScriptOps.c0002ae.f0001b6 = CallSite<Func<CallSite, object, string, object>>.Create(Binder.GetIndex(CSharpBinderFlags.None, typeof(ScriptOps), new CSharpArgumentInfo[]
                {
                    CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.None, null),
                    CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.UseCompileTimeType | CSharpArgumentInfoFlags.Constant, null)
                }));
            }
            Func<CallSite, object, string, object> target8 = ScriptOps.c0002ae.f0001b6.Target;
            CallSite f0001b5 = ScriptOps.c0002ae.f0001b6;
            if (ScriptOps.c0002ae.f0001b5 == null)
            {
                ScriptOps.c0002ae.f0001b5 = CallSite<Func<CallSite, object, string, object>>.Create(Binder.GetIndex(CSharpBinderFlags.None, typeof(ScriptOps), new CSharpArgumentInfo[]
                {
                    CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.None, null),
                    CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.UseCompileTimeType | CSharpArgumentInfoFlags.Constant, null)
                }));
            }
            target7(f0002e, target8(f0001b5, ScriptOps.c0002ae.f0001b5.Target(ScriptOps.c0002ae.f0001b5, obj, "DCA1000Config"), "ethernetConfigUpdate"), "DCA1000ConfigPort", ethernetInitConfigurationParam.u32ConfigPortNo);
            if (ScriptOps.c0002ae.f0002e3 == null)
            {
                ScriptOps.c0002ae.f0002e3 = CallSite<Func<CallSite, object, string, int, object>>.Create(Binder.SetIndex(CSharpBinderFlags.None, typeof(ScriptOps), new CSharpArgumentInfo[]
                {
                    CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.None, null),
                    CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.UseCompileTimeType | CSharpArgumentInfoFlags.Constant, null),
                    CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.UseCompileTimeType, null)
                }));
            }
            Func<CallSite, object, string, int, object> target9 = ScriptOps.c0002ae.f0002e3.Target;
            CallSite f0002e2 = ScriptOps.c0002ae.f0002e3;
            if (ScriptOps.c0002ae.f0002e2 == null)
            {
                ScriptOps.c0002ae.f0002e2 = CallSite<Func<CallSite, object, string, object>>.Create(Binder.GetIndex(CSharpBinderFlags.None, typeof(ScriptOps), new CSharpArgumentInfo[]
                {
                    CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.None, null),
                    CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.UseCompileTimeType | CSharpArgumentInfoFlags.Constant, null)
                }));
            }
            Func<CallSite, object, string, object> target10 = ScriptOps.c0002ae.f0002e2.Target;
            CallSite f0002e3 = ScriptOps.c0002ae.f0002e2;
            if (ScriptOps.c0002ae.f0002e1 == null)
            {
                ScriptOps.c0002ae.f0002e1 = CallSite<Func<CallSite, object, string, object>>.Create(Binder.GetIndex(CSharpBinderFlags.None, typeof(ScriptOps), new CSharpArgumentInfo[]
                {
                    CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.None, null),
                    CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.UseCompileTimeType | CSharpArgumentInfoFlags.Constant, null)
                }));
            }
            target9(f0002e2, target10(f0002e3, ScriptOps.c0002ae.f0002e1.Target(ScriptOps.c0002ae.f0002e1, obj, "DCA1000Config"), "ethernetConfigUpdate"), "DCA1000DataPort", ethernetInitConfigurationParam.u32RecordPortNo);
            if (ScriptOps.c0002ae.f0002e5 == null)
            {
                ScriptOps.c0002ae.f0002e5 = CallSite<Func<CallSite, object, string>>.Create(Binder.Convert(CSharpBinderFlags.None, typeof(string), typeof(ScriptOps)));
            }
            Func<CallSite, object, string> target11 = ScriptOps.c0002ae.f0002e5.Target;
            CallSite f0002e4 = ScriptOps.c0002ae.f0002e5;
            if (ScriptOps.c0002ae.f0002e4 == null)
            {
                ScriptOps.c0002ae.f0002e4 = CallSite<Func<CallSite, Type, object, Newtonsoft.Json.Formatting, object>>.Create(Binder.InvokeMember(CSharpBinderFlags.None, "SerializeObject", null, typeof(ScriptOps), new CSharpArgumentInfo[]
                {
                    CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.UseCompileTimeType | CSharpArgumentInfoFlags.IsStaticType, null),
                    CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.None, null),
                    CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.UseCompileTimeType | CSharpArgumentInfoFlags.Constant, null)
                }));
            }
            string contents = target11(f0002e4, ScriptOps.c0002ae.f0002e4.Target(ScriptOps.c0002ae.f0002e4, typeof(JsonConvert), obj, Newtonsoft.Json.Formatting.Indented));
            File.WriteAllText(path, contents);
            string text4 = "eeprom";
            string arguments = string.Concat(new string[]
            {
                "/C ",
                text3,
                " ",
                text4,
                " ",
                text2
            });
            Process process = Process.Start(new ProcessStartInfo
            {
                FileName = "CMD.EXE",
                WorkingDirectory = text,
                Arguments = arguments,
                UseShellExecute = false,
                RedirectStandardOutput = true,
                RedirectStandardError = true,
                RedirectStandardInput = true,
                CreateNoWindow = true
            });
            string full_command4 = string.Format("Sending {0} command to DCA1000", text4);
            m_GuiManager.RecordLog(0, full_command4);
            if (process != null && !process.HasExited)
            {
                process.WaitForExit();
            }
            string full_command5 = process.StandardOutput.ReadToEnd();
            m_GuiManager.RecordLog(0, full_command5);
            return 0;
        }

        public int m000099()
        {
            ethernetInitConfigurationParam.f00001c = m_EthernetInitConfigParams.f00001c;
            ethernetInitConfigurationParam.f00001d = m_EthernetInitConfigParams.f00001d;
            ethernetInitConfigurationParam.f00001e = m_EthernetInitConfigParams.f00001e;
            ethernetInitConfigurationParam.f00001f = m_EthernetInitConfigParams.f00001f;
            ethernetInitConfigurationParam.f000020 = m_EthernetInitConfigParams.f000020;
            ethernetInitConfigurationParam.f000021 = m_EthernetInitConfigParams.f000021;
            ethernetInitConfigurationParam.au8SourceIpAddr0 = m_EthernetInitConfigParams.au8SourceIpAddr0;
            ethernetInitConfigurationParam.au8SourceIpAddr1 = m_EthernetInitConfigParams.au8SourceIpAddr1;
            ethernetInitConfigurationParam.au8SourceIpAddr2 = m_EthernetInitConfigParams.au8SourceIpAddr2;
            ethernetInitConfigurationParam.au8SourceIpAddr3 = m_EthernetInitConfigParams.au8SourceIpAddr3;
            ethernetInitConfigurationParam.au8DestiIpAddr0 = m_EthernetInitConfigParams.au8DestiIpAddr0;
            ethernetInitConfigurationParam.au8DestiIpAddr1 = m_EthernetInitConfigParams.au8DestiIpAddr1;
            ethernetInitConfigurationParam.au8DestiIpAddr2 = m_EthernetInitConfigParams.au8DestiIpAddr2;
            ethernetInitConfigurationParam.au8DestiIpAddr3 = m_EthernetInitConfigParams.au8DestiIpAddr3;
            ethernetInitConfigurationParam.u32ConfigPortNo = (int)m_EthernetInitConfigParams.u32ConfigPortNo;
            ethernetInitConfigurationParam.u32RecordPortNo = (int)m_EthernetInitConfigParams.u32RecordPortNo;
            if (m_RadarDeviceModeConfigParams.NumberOfRadarDevicesDetected <= 1)
            {
                string full_command = string.Format("ar1.ConfigureRFDCCard_EEPROM_WithoutSPI(\"{0}\", \"{1}\", \"{2}\", {3}, {4})", new object[]
                {
                    string.Concat(new string[]
                    {
                        Convert.ToString(ethernetInitConfigurationParam.au8SourceIpAddr0),
                        ".",
                        Convert.ToString(ethernetInitConfigurationParam.au8SourceIpAddr1),
                        ".",
                        Convert.ToString(ethernetInitConfigurationParam.au8SourceIpAddr2),
                        ".",
                        Convert.ToString(ethernetInitConfigurationParam.au8SourceIpAddr3)
                    }),
                    string.Concat(new string[]
                    {
                        Convert.ToString(ethernetInitConfigurationParam.au8DestiIpAddr0),
                        ".",
                        Convert.ToString(ethernetInitConfigurationParam.au8DestiIpAddr1),
                        ".",
                        Convert.ToString(ethernetInitConfigurationParam.au8DestiIpAddr2),
                        ".",
                        Convert.ToString(ethernetInitConfigurationParam.au8DestiIpAddr3)
                    }),
                    string.Concat(new string[]
                    {
                        ethernetInitConfigurationParam.f00001c.ToString(),
                        ":",
                        ethernetInitConfigurationParam.f00001d.ToString(),
                        ":",
                        ethernetInitConfigurationParam.f00001e.ToString(),
                        ":",
                        ethernetInitConfigurationParam.f00001f.ToString(),
                        ":",
                        ethernetInitConfigurationParam.f000020.ToString(),
                        ":",
                        ethernetInitConfigurationParam.f000021.ToString()
                    }),
                    ethernetInitConfigurationParam.u32ConfigPortNo,
                    ethernetInitConfigurationParam.u32RecordPortNo
                });
                m_GuiManager.RecordLog(6, full_command);
            }
            string arg = string.Concat(new string[]
            {
                Convert.ToString(ethernetInitConfigurationParam.au8SourceIpAddr0),
                ".",
                Convert.ToString(ethernetInitConfigurationParam.au8SourceIpAddr1),
                ".",
                Convert.ToString(ethernetInitConfigurationParam.au8SourceIpAddr2),
                ".",
                Convert.ToString(ethernetInitConfigurationParam.au8SourceIpAddr3)
            });
            string arg2 = string.Concat(new string[]
            {
                Convert.ToString(ethernetInitConfigurationParam.au8DestiIpAddr0),
                ".",
                Convert.ToString(ethernetInitConfigurationParam.au8DestiIpAddr1),
                ".",
                Convert.ToString(ethernetInitConfigurationParam.au8DestiIpAddr2),
                ".",
                Convert.ToString(ethernetInitConfigurationParam.au8DestiIpAddr3)
            });
            string arg3 = string.Concat(new string[]
            {
                Convert.ToString(ethernetInitConfigurationParam.f00001c),
                ".",
                Convert.ToString(ethernetInitConfigurationParam.f00001d),
                ".",
                Convert.ToString(ethernetInitConfigurationParam.f00001e),
                ".",
                Convert.ToString(ethernetInitConfigurationParam.f00001f),
                ".",
                Convert.ToString(ethernetInitConfigurationParam.f000020),
                ".",
                Convert.ToString(ethernetInitConfigurationParam.f000021)
            });
            string text = Path.GetDirectoryName(Application.StartupPath) + "\\PostProc";
            string text2 = "cf.json";
            string path = text + "\\cf.json";
            string text3 = "DCA1000EVM_CLI_Control.exe";
            object obj = JsonConvert.DeserializeObject(File.ReadAllText(path));
            if (ScriptOps.c0002af.f0001ae == null)
            {
                ScriptOps.c0002af.f0001ae = CallSite<Func<CallSite, object, string, string, object>>.Create(Binder.SetIndex(CSharpBinderFlags.None, typeof(ScriptOps), new CSharpArgumentInfo[]
                {
                    CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.None, null),
                    CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.UseCompileTimeType | CSharpArgumentInfoFlags.Constant, null),
                    CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.UseCompileTimeType, null)
                }));
            }
            Func<CallSite, object, string, string, object> target = ScriptOps.c0002af.f0001ae.Target;
            CallSite f0001ae = ScriptOps.c0002af.f0001ae;
            if (ScriptOps.c0002af.f0001ad == null)
            {
                ScriptOps.c0002af.f0001ad = CallSite<Func<CallSite, object, string, object>>.Create(Binder.GetIndex(CSharpBinderFlags.None, typeof(ScriptOps), new CSharpArgumentInfo[]
                {
                    CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.None, null),
                    CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.UseCompileTimeType | CSharpArgumentInfoFlags.Constant, null)
                }));
            }
            Func<CallSite, object, string, object> target2 = ScriptOps.c0002af.f0001ad.Target;
            CallSite f0001ad = ScriptOps.c0002af.f0001ad;
            if (ScriptOps.c0002af.f0001ac == null)
            {
                ScriptOps.c0002af.f0001ac = CallSite<Func<CallSite, object, string, object>>.Create(Binder.GetIndex(CSharpBinderFlags.None, typeof(ScriptOps), new CSharpArgumentInfo[]
                {
                    CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.None, null),
                    CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.UseCompileTimeType | CSharpArgumentInfoFlags.Constant, null)
                }));
            }
            target(f0001ae, target2(f0001ad, ScriptOps.c0002af.f0001ac.Target(ScriptOps.c0002af.f0001ac, obj, "DCA1000Config"), "ethernetConfigUpdate"), "systemIPAddress", arg);
            if (ScriptOps.c0002af.f0001b1 == null)
            {
                ScriptOps.c0002af.f0001b1 = CallSite<Func<CallSite, object, string, string, object>>.Create(Binder.SetIndex(CSharpBinderFlags.None, typeof(ScriptOps), new CSharpArgumentInfo[]
                {
                    CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.None, null),
                    CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.UseCompileTimeType | CSharpArgumentInfoFlags.Constant, null),
                    CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.UseCompileTimeType, null)
                }));
            }
            Func<CallSite, object, string, string, object> target3 = ScriptOps.c0002af.f0001b1.Target;
            CallSite f0001b = ScriptOps.c0002af.f0001b1;
            if (ScriptOps.c0002af.f0001b0 == null)
            {
                ScriptOps.c0002af.f0001b0 = CallSite<Func<CallSite, object, string, object>>.Create(Binder.GetIndex(CSharpBinderFlags.None, typeof(ScriptOps), new CSharpArgumentInfo[]
                {
                    CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.None, null),
                    CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.UseCompileTimeType | CSharpArgumentInfoFlags.Constant, null)
                }));
            }
            Func<CallSite, object, string, object> target4 = ScriptOps.c0002af.f0001b0.Target;
            CallSite f0001b2 = ScriptOps.c0002af.f0001b0;
            if (ScriptOps.c0002af.f0001af == null)
            {
                ScriptOps.c0002af.f0001af = CallSite<Func<CallSite, object, string, object>>.Create(Binder.GetIndex(CSharpBinderFlags.None, typeof(ScriptOps), new CSharpArgumentInfo[]
                {
                    CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.None, null),
                    CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.UseCompileTimeType | CSharpArgumentInfoFlags.Constant, null)
                }));
            }
            target3(f0001b, target4(f0001b2, ScriptOps.c0002af.f0001af.Target(ScriptOps.c0002af.f0001af, obj, "DCA1000Config"), "ethernetConfigUpdate"), "DCA1000IPAddress", arg2);
            if (ScriptOps.c0002af.f0001b4 == null)
            {
                ScriptOps.c0002af.f0001b4 = CallSite<Func<CallSite, object, string, string, object>>.Create(Binder.SetIndex(CSharpBinderFlags.None, typeof(ScriptOps), new CSharpArgumentInfo[]
                {
                    CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.None, null),
                    CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.UseCompileTimeType | CSharpArgumentInfoFlags.Constant, null),
                    CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.UseCompileTimeType, null)
                }));
            }
            Func<CallSite, object, string, string, object> target5 = ScriptOps.c0002af.f0001b4.Target;
            CallSite f0001b3 = ScriptOps.c0002af.f0001b4;
            if (ScriptOps.c0002af.f0001b3 == null)
            {
                ScriptOps.c0002af.f0001b3 = CallSite<Func<CallSite, object, string, object>>.Create(Binder.GetIndex(CSharpBinderFlags.None, typeof(ScriptOps), new CSharpArgumentInfo[]
                {
                    CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.None, null),
                    CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.UseCompileTimeType | CSharpArgumentInfoFlags.Constant, null)
                }));
            }
            Func<CallSite, object, string, object> target6 = ScriptOps.c0002af.f0001b3.Target;
            CallSite f0001b4 = ScriptOps.c0002af.f0001b3;
            if (ScriptOps.c0002af.f0001b2 == null)
            {
                ScriptOps.c0002af.f0001b2 = CallSite<Func<CallSite, object, string, object>>.Create(Binder.GetIndex(CSharpBinderFlags.None, typeof(ScriptOps), new CSharpArgumentInfo[]
                {
                    CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.None, null),
                    CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.UseCompileTimeType | CSharpArgumentInfoFlags.Constant, null)
                }));
            }
            target5(f0001b3, target6(f0001b4, ScriptOps.c0002af.f0001b2.Target(ScriptOps.c0002af.f0001b2, obj, "DCA1000Config"), "ethernetConfigUpdate"), "DCA1000MACAddress", arg3);
            if (ScriptOps.c0002af.f0002e0 == null)
            {
                ScriptOps.c0002af.f0002e0 = CallSite<Func<CallSite, object, string, int, object>>.Create(Binder.SetIndex(CSharpBinderFlags.None, typeof(ScriptOps), new CSharpArgumentInfo[]
                {
                    CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.None, null),
                    CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.UseCompileTimeType | CSharpArgumentInfoFlags.Constant, null),
                    CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.UseCompileTimeType, null)
                }));
            }
            Func<CallSite, object, string, int, object> target7 = ScriptOps.c0002af.f0002e0.Target;
            CallSite f0002e = ScriptOps.c0002af.f0002e0;
            if (ScriptOps.c0002af.f0001b6 == null)
            {
                ScriptOps.c0002af.f0001b6 = CallSite<Func<CallSite, object, string, object>>.Create(Binder.GetIndex(CSharpBinderFlags.None, typeof(ScriptOps), new CSharpArgumentInfo[]
                {
                    CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.None, null),
                    CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.UseCompileTimeType | CSharpArgumentInfoFlags.Constant, null)
                }));
            }
            Func<CallSite, object, string, object> target8 = ScriptOps.c0002af.f0001b6.Target;
            CallSite f0001b5 = ScriptOps.c0002af.f0001b6;
            if (ScriptOps.c0002af.f0001b5 == null)
            {
                ScriptOps.c0002af.f0001b5 = CallSite<Func<CallSite, object, string, object>>.Create(Binder.GetIndex(CSharpBinderFlags.None, typeof(ScriptOps), new CSharpArgumentInfo[]
                {
                    CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.None, null),
                    CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.UseCompileTimeType | CSharpArgumentInfoFlags.Constant, null)
                }));
            }
            target7(f0002e, target8(f0001b5, ScriptOps.c0002af.f0001b5.Target(ScriptOps.c0002af.f0001b5, obj, "DCA1000Config"), "ethernetConfigUpdate"), "DCA1000ConfigPort", ethernetInitConfigurationParam.u32ConfigPortNo);
            if (ScriptOps.c0002af.f0002e3 == null)
            {
                ScriptOps.c0002af.f0002e3 = CallSite<Func<CallSite, object, string, int, object>>.Create(Binder.SetIndex(CSharpBinderFlags.None, typeof(ScriptOps), new CSharpArgumentInfo[]
                {
                    CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.None, null),
                    CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.UseCompileTimeType | CSharpArgumentInfoFlags.Constant, null),
                    CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.UseCompileTimeType, null)
                }));
            }
            Func<CallSite, object, string, int, object> target9 = ScriptOps.c0002af.f0002e3.Target;
            CallSite f0002e2 = ScriptOps.c0002af.f0002e3;
            if (ScriptOps.c0002af.f0002e2 == null)
            {
                ScriptOps.c0002af.f0002e2 = CallSite<Func<CallSite, object, string, object>>.Create(Binder.GetIndex(CSharpBinderFlags.None, typeof(ScriptOps), new CSharpArgumentInfo[]
                {
                    CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.None, null),
                    CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.UseCompileTimeType | CSharpArgumentInfoFlags.Constant, null)
                }));
            }
            Func<CallSite, object, string, object> target10 = ScriptOps.c0002af.f0002e2.Target;
            CallSite f0002e3 = ScriptOps.c0002af.f0002e2;
            if (ScriptOps.c0002af.f0002e1 == null)
            {
                ScriptOps.c0002af.f0002e1 = CallSite<Func<CallSite, object, string, object>>.Create(Binder.GetIndex(CSharpBinderFlags.None, typeof(ScriptOps), new CSharpArgumentInfo[]
                {
                    CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.None, null),
                    CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.UseCompileTimeType | CSharpArgumentInfoFlags.Constant, null)
                }));
            }
            target9(f0002e2, target10(f0002e3, ScriptOps.c0002af.f0002e1.Target(ScriptOps.c0002af.f0002e1, obj, "DCA1000Config"), "ethernetConfigUpdate"), "DCA1000DataPort", ethernetInitConfigurationParam.u32RecordPortNo);
            if (ScriptOps.c0002af.f0002e5 == null)
            {
                ScriptOps.c0002af.f0002e5 = CallSite<Func<CallSite, object, string>>.Create(Binder.Convert(CSharpBinderFlags.None, typeof(string), typeof(ScriptOps)));
            }
            Func<CallSite, object, string> target11 = ScriptOps.c0002af.f0002e5.Target;
            CallSite f0002e4 = ScriptOps.c0002af.f0002e5;
            if (ScriptOps.c0002af.f0002e4 == null)
            {
                ScriptOps.c0002af.f0002e4 = CallSite<Func<CallSite, Type, object, Newtonsoft.Json.Formatting, object>>.Create(Binder.InvokeMember(CSharpBinderFlags.None, "SerializeObject", null, typeof(ScriptOps), new CSharpArgumentInfo[]
                {
                    CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.UseCompileTimeType | CSharpArgumentInfoFlags.IsStaticType, null),
                    CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.None, null),
                    CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.UseCompileTimeType | CSharpArgumentInfoFlags.Constant, null)
                }));
            }
            string contents = target11(f0002e4, ScriptOps.c0002af.f0002e4.Target(ScriptOps.c0002af.f0002e4, typeof(JsonConvert), obj, Newtonsoft.Json.Formatting.Indented));
            File.WriteAllText(path, contents);
            string text4 = "eeprom";
            string arguments = string.Concat(new string[]
            {
                "/C ",
                text3,
                " ",
                text4,
                " ",
                text2
            });
            Process process = Process.Start(new ProcessStartInfo
            {
                FileName = "CMD.EXE",
                WorkingDirectory = text,
                Arguments = arguments,
                UseShellExecute = false,
                RedirectStandardOutput = true,
                RedirectStandardError = true,
                RedirectStandardInput = true,
                CreateNoWindow = true
            });
            string full_command2 = string.Format("Sending {0} command to DCA1000", text4);
            m_GuiManager.RecordLog(0, full_command2);
            if (process != null && !process.HasExited)
            {
                process.WaitForExit();
            }
            string full_command3 = process.StandardOutput.ReadToEnd();
            m_GuiManager.RecordLog(0, full_command3);
            return 0;
        }

        public int RFEthernetInitializationConfigurationData_Impl()
        {
            ethernetInitConfigurationParam.f00001c = m_EthernetInitConfigParams.f00001c;
            ethernetInitConfigurationParam.f00001d = m_EthernetInitConfigParams.f00001d;
            ethernetInitConfigurationParam.f00001e = m_EthernetInitConfigParams.f00001e;
            ethernetInitConfigurationParam.f00001f = m_EthernetInitConfigParams.f00001f;
            ethernetInitConfigurationParam.f000020 = m_EthernetInitConfigParams.f000020;
            ethernetInitConfigurationParam.f000021 = m_EthernetInitConfigParams.f000021;
            ethernetInitConfigurationParam.au8SourceIpAddr0 = m_EthernetInitConfigParams.au8SourceIpAddr0;
            ethernetInitConfigurationParam.au8SourceIpAddr1 = m_EthernetInitConfigParams.au8SourceIpAddr1;
            ethernetInitConfigurationParam.au8SourceIpAddr2 = m_EthernetInitConfigParams.au8SourceIpAddr2;
            ethernetInitConfigurationParam.au8SourceIpAddr3 = m_EthernetInitConfigParams.au8SourceIpAddr3;
            ethernetInitConfigurationParam.au8DestiIpAddr0 = m_EthernetInitConfigParams.au8DestiIpAddr0;
            ethernetInitConfigurationParam.au8DestiIpAddr1 = m_EthernetInitConfigParams.au8DestiIpAddr1;
            ethernetInitConfigurationParam.au8DestiIpAddr2 = m_EthernetInitConfigParams.au8DestiIpAddr2;
            ethernetInitConfigurationParam.au8DestiIpAddr3 = m_EthernetInitConfigParams.au8DestiIpAddr3;
            ethernetInitConfigurationParam.u32ConfigPortNo = (int)m_EthernetInitConfigParams.u32ConfigPortNo;
            ethernetInitConfigurationParam.u32RecordPortNo = (int)m_EthernetInitConfigParams.u32RecordPortNo;
            string arg = string.Concat(new string[]
            {
                Convert.ToString(ethernetInitConfigurationParam.au8DestiIpAddr0),
                ".",
                Convert.ToString(ethernetInitConfigurationParam.au8DestiIpAddr1),
                ".",
                Convert.ToString(ethernetInitConfigurationParam.au8DestiIpAddr2),
                ".",
                Convert.ToString(ethernetInitConfigurationParam.au8DestiIpAddr3)
            });
            if (GlobalRef.g_NtvRS232Connect[(int)GlobalRef.g_RadarDeviceIndex] && GlobalRef.g_CasCadeDeviceSpiConnect == 0U)
            {
                m_TsWrapper.Calling_WriteAddr_Single(4294959848U, 1U);
                if (m_GuiManager.DllOps.itempDisconnect(false) == 0)
                {
                    string full_command = string.Format("Debug Port Disconnected", new object[0]);
                    m_GuiManager.RecordLog(0, full_command);
                    if (!GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
                    {
                        iRs232ConnectDisconnect_impl();
                    }
                }
            }
            if (m_RadarDeviceModeConfigParams.NumberOfRadarDevicesDetected <= 1)
            {
                string full_command2 = string.Format("ar1.CaptureCardConfig_EthInit(\"{0}\", \"{1}\", \"{2}\", {3}, {4})", new object[]
                {
                    string.Concat(new string[]
                    {
                        Convert.ToString(ethernetInitConfigurationParam.au8SourceIpAddr0),
                        ".",
                        Convert.ToString(ethernetInitConfigurationParam.au8SourceIpAddr1),
                        ".",
                        Convert.ToString(ethernetInitConfigurationParam.au8SourceIpAddr2),
                        ".",
                        Convert.ToString(ethernetInitConfigurationParam.au8SourceIpAddr3)
                    }),
                    string.Concat(new string[]
                    {
                        Convert.ToString(ethernetInitConfigurationParam.au8DestiIpAddr0),
                        ".",
                        Convert.ToString(ethernetInitConfigurationParam.au8DestiIpAddr1),
                        ".",
                        Convert.ToString(ethernetInitConfigurationParam.au8DestiIpAddr2),
                        ".",
                        Convert.ToString(ethernetInitConfigurationParam.au8DestiIpAddr3)
                    }),
                    string.Concat(new string[]
                    {
                        ethernetInitConfigurationParam.f00001c.ToString("x"),
                        ":",
                        ethernetInitConfigurationParam.f00001d.ToString("x"),
                        ":",
                        ethernetInitConfigurationParam.f00001e.ToString("x"),
                        ":",
                        ethernetInitConfigurationParam.f00001f.ToString("x"),
                        ":",
                        ethernetInitConfigurationParam.f000020.ToString("x"),
                        ":",
                        ethernetInitConfigurationParam.f000021.ToString("x")
                    }),
                    ethernetInitConfigurationParam.u32ConfigPortNo,
                    ethernetInitConfigurationParam.u32RecordPortNo
                });
                m_GuiManager.RecordLog(6, full_command2);
            }
            if (GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex] && iRs232ConnectDisconnect_impl() == 0 && !GlobalRef.g_NtvRS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
            {
                m_GuiManager.DllOps.iConnect(1U, 0U);
                string full_command3 = string.Format("Debug Port Reconnected!", new object[0]);
                m_GuiManager.RecordLog(9, full_command3);
                ScriptOps.KeepTrying(2000, new Func<bool>(spare_read));
            }
            string text = Path.GetDirectoryName(Application.StartupPath) + "\\PostProc";
            string text2 = "cf.json";
            string path = text + "\\cf.json";
            string text3 = "DCA1000EVM_CLI_Control.exe";
            object obj = JsonConvert.DeserializeObject(File.ReadAllText(path));
            if (ScriptOps.c0002b0.f0001ae == null)
            {
                ScriptOps.c0002b0.f0001ae = CallSite<Func<CallSite, object, string, string, object>>.Create(Binder.SetIndex(CSharpBinderFlags.None, typeof(ScriptOps), new CSharpArgumentInfo[]
                {
                    CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.None, null),
                    CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.UseCompileTimeType | CSharpArgumentInfoFlags.Constant, null),
                    CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.UseCompileTimeType, null)
                }));
            }
            Func<CallSite, object, string, string, object> target = ScriptOps.c0002b0.f0001ae.Target;
            CallSite f0001ae = ScriptOps.c0002b0.f0001ae;
            if (ScriptOps.c0002b0.f0001ad == null)
            {
                ScriptOps.c0002b0.f0001ad = CallSite<Func<CallSite, object, string, object>>.Create(Binder.GetIndex(CSharpBinderFlags.None, typeof(ScriptOps), new CSharpArgumentInfo[]
                {
                    CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.None, null),
                    CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.UseCompileTimeType | CSharpArgumentInfoFlags.Constant, null)
                }));
            }
            Func<CallSite, object, string, object> target2 = ScriptOps.c0002b0.f0001ad.Target;
            CallSite f0001ad = ScriptOps.c0002b0.f0001ad;
            if (ScriptOps.c0002b0.f0001ac == null)
            {
                ScriptOps.c0002b0.f0001ac = CallSite<Func<CallSite, object, string, object>>.Create(Binder.GetIndex(CSharpBinderFlags.None, typeof(ScriptOps), new CSharpArgumentInfo[]
                {
                    CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.None, null),
                    CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.UseCompileTimeType | CSharpArgumentInfoFlags.Constant, null)
                }));
            }
            target(f0001ae, target2(f0001ad, ScriptOps.c0002b0.f0001ac.Target(ScriptOps.c0002b0.f0001ac, obj, "DCA1000Config"), "ethernetConfig"), "DCA1000IPAddress", arg);
            if (ScriptOps.c0002b0.f0001b1 == null)
            {
                ScriptOps.c0002b0.f0001b1 = CallSite<Func<CallSite, object, string, int, object>>.Create(Binder.SetIndex(CSharpBinderFlags.None, typeof(ScriptOps), new CSharpArgumentInfo[]
                {
                    CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.None, null),
                    CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.UseCompileTimeType | CSharpArgumentInfoFlags.Constant, null),
                    CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.UseCompileTimeType, null)
                }));
            }
            Func<CallSite, object, string, int, object> target3 = ScriptOps.c0002b0.f0001b1.Target;
            CallSite f0001b = ScriptOps.c0002b0.f0001b1;
            if (ScriptOps.c0002b0.f0001b0 == null)
            {
                ScriptOps.c0002b0.f0001b0 = CallSite<Func<CallSite, object, string, object>>.Create(Binder.GetIndex(CSharpBinderFlags.None, typeof(ScriptOps), new CSharpArgumentInfo[]
                {
                    CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.None, null),
                    CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.UseCompileTimeType | CSharpArgumentInfoFlags.Constant, null)
                }));
            }
            Func<CallSite, object, string, object> target4 = ScriptOps.c0002b0.f0001b0.Target;
            CallSite f0001b2 = ScriptOps.c0002b0.f0001b0;
            if (ScriptOps.c0002b0.f0001af == null)
            {
                ScriptOps.c0002b0.f0001af = CallSite<Func<CallSite, object, string, object>>.Create(Binder.GetIndex(CSharpBinderFlags.None, typeof(ScriptOps), new CSharpArgumentInfo[]
                {
                    CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.None, null),
                    CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.UseCompileTimeType | CSharpArgumentInfoFlags.Constant, null)
                }));
            }
            target3(f0001b, target4(f0001b2, ScriptOps.c0002b0.f0001af.Target(ScriptOps.c0002b0.f0001af, obj, "DCA1000Config"), "ethernetConfig"), "DCA1000ConfigPort", ethernetInitConfigurationParam.u32ConfigPortNo);
            if (ScriptOps.c0002b0.f0001b4 == null)
            {
                ScriptOps.c0002b0.f0001b4 = CallSite<Func<CallSite, object, string, int, object>>.Create(Binder.SetIndex(CSharpBinderFlags.None, typeof(ScriptOps), new CSharpArgumentInfo[]
                {
                    CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.None, null),
                    CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.UseCompileTimeType | CSharpArgumentInfoFlags.Constant, null),
                    CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.UseCompileTimeType, null)
                }));
            }
            Func<CallSite, object, string, int, object> target5 = ScriptOps.c0002b0.f0001b4.Target;
            CallSite f0001b3 = ScriptOps.c0002b0.f0001b4;
            if (ScriptOps.c0002b0.f0001b3 == null)
            {
                ScriptOps.c0002b0.f0001b3 = CallSite<Func<CallSite, object, string, object>>.Create(Binder.GetIndex(CSharpBinderFlags.None, typeof(ScriptOps), new CSharpArgumentInfo[]
                {
                    CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.None, null),
                    CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.UseCompileTimeType | CSharpArgumentInfoFlags.Constant, null)
                }));
            }
            Func<CallSite, object, string, object> target6 = ScriptOps.c0002b0.f0001b3.Target;
            CallSite f0001b4 = ScriptOps.c0002b0.f0001b3;
            if (ScriptOps.c0002b0.f0001b2 == null)
            {
                ScriptOps.c0002b0.f0001b2 = CallSite<Func<CallSite, object, string, object>>.Create(Binder.GetIndex(CSharpBinderFlags.None, typeof(ScriptOps), new CSharpArgumentInfo[]
                {
                    CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.None, null),
                    CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.UseCompileTimeType | CSharpArgumentInfoFlags.Constant, null)
                }));
            }
            target5(f0001b3, target6(f0001b4, ScriptOps.c0002b0.f0001b2.Target(ScriptOps.c0002b0.f0001b2, obj, "DCA1000Config"), "ethernetConfig"), "DCA1000DataPort", ethernetInitConfigurationParam.u32RecordPortNo);
            if (ScriptOps.c0002b0.f0001b6 == null)
            {
                ScriptOps.c0002b0.f0001b6 = CallSite<Func<CallSite, object, string>>.Create(Binder.Convert(CSharpBinderFlags.None, typeof(string), typeof(ScriptOps)));
            }
            Func<CallSite, object, string> target7 = ScriptOps.c0002b0.f0001b6.Target;
            CallSite f0001b5 = ScriptOps.c0002b0.f0001b6;
            if (ScriptOps.c0002b0.f0001b5 == null)
            {
                ScriptOps.c0002b0.f0001b5 = CallSite<Func<CallSite, Type, object, Newtonsoft.Json.Formatting, object>>.Create(Binder.InvokeMember(CSharpBinderFlags.None, "SerializeObject", null, typeof(ScriptOps), new CSharpArgumentInfo[]
                {
                    CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.UseCompileTimeType | CSharpArgumentInfoFlags.IsStaticType, null),
                    CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.None, null),
                    CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.UseCompileTimeType | CSharpArgumentInfoFlags.Constant, null)
                }));
            }
            string contents = target7(f0001b5, ScriptOps.c0002b0.f0001b5.Target(ScriptOps.c0002b0.f0001b5, typeof(JsonConvert), obj, Newtonsoft.Json.Formatting.Indented));
            File.WriteAllText(path, contents);
            string text4 = "fpga";
            string arguments = string.Concat(new string[]
            {
                "/C ",
                text3,
                " ",
                text4,
                " ",
                text2
            });
            ProcessStartInfo processStartInfo = new ProcessStartInfo();
            processStartInfo.FileName = "CMD.EXE";
            processStartInfo.WorkingDirectory = text;
            processStartInfo.Arguments = arguments;
            processStartInfo.UseShellExecute = false;
            processStartInfo.RedirectStandardOutput = true;
            processStartInfo.RedirectStandardError = true;
            processStartInfo.RedirectStandardInput = true;
            processStartInfo.CreateNoWindow = true;
            Process process = Process.Start(processStartInfo);
            string full_command4 = string.Format("Sending {0} command to DCA1000", text4);
            m_GuiManager.RecordLog(0, full_command4);
            if (process != null && !process.HasExited)
            {
                process.WaitForExit();
            }
            string full_command5 = process.StandardOutput.ReadToEnd();
            m_GuiManager.RecordLog(0, full_command5);
            text4 = "fpga_version";
            arguments = string.Concat(new string[]
            {
                "/C ",
                text3,
                " ",
                text4,
                " ",
                text2
            });
            processStartInfo.Arguments = arguments;
            process = Process.Start(processStartInfo);
            full_command4 = string.Format("Sending {0} command to DCA1000", text4);
            m_GuiManager.RecordLog(0, full_command4);
            if (process != null && !process.HasExited)
            {
                process.WaitForExit();
            }
            string text5 = process.StandardOutput.ReadToEnd();
            m_GuiManager.RecordLog(0, text5);
            GlobalRef.f0002d3 = text5.Substring(19, 12);
            ScriptOps.m_MainForm.m_RFDataCaptureCard.m00006e(GlobalRef.f0002d3);
            return 0;
        }

        public int RFEthernetInitializationConfigurationData_Impl_WithoutSPI()
        {
            int result = -1;
            ethernetInitConfigurationParam.f00001c = m_EthernetInitConfigParams.f00001c;
            ethernetInitConfigurationParam.f00001d = m_EthernetInitConfigParams.f00001d;
            ethernetInitConfigurationParam.f00001e = m_EthernetInitConfigParams.f00001e;
            ethernetInitConfigurationParam.f00001f = m_EthernetInitConfigParams.f00001f;
            ethernetInitConfigurationParam.f000020 = m_EthernetInitConfigParams.f000020;
            ethernetInitConfigurationParam.f000021 = m_EthernetInitConfigParams.f000021;
            ethernetInitConfigurationParam.au8SourceIpAddr0 = m_EthernetInitConfigParams.au8SourceIpAddr0;
            ethernetInitConfigurationParam.au8SourceIpAddr1 = m_EthernetInitConfigParams.au8SourceIpAddr1;
            ethernetInitConfigurationParam.au8SourceIpAddr2 = m_EthernetInitConfigParams.au8SourceIpAddr2;
            ethernetInitConfigurationParam.au8SourceIpAddr3 = m_EthernetInitConfigParams.au8SourceIpAddr3;
            ethernetInitConfigurationParam.au8DestiIpAddr0 = m_EthernetInitConfigParams.au8DestiIpAddr0;
            ethernetInitConfigurationParam.au8DestiIpAddr1 = m_EthernetInitConfigParams.au8DestiIpAddr1;
            ethernetInitConfigurationParam.au8DestiIpAddr2 = m_EthernetInitConfigParams.au8DestiIpAddr2;
            ethernetInitConfigurationParam.au8DestiIpAddr3 = m_EthernetInitConfigParams.au8DestiIpAddr3;
            ethernetInitConfigurationParam.u32ConfigPortNo = (int)m_EthernetInitConfigParams.u32ConfigPortNo;
            ethernetInitConfigurationParam.u32RecordPortNo = (int)m_EthernetInitConfigParams.u32RecordPortNo;
            string arg = string.Concat(new string[]
            {
                Convert.ToString(ethernetInitConfigurationParam.au8DestiIpAddr0),
                ".",
                Convert.ToString(ethernetInitConfigurationParam.au8DestiIpAddr1),
                ".",
                Convert.ToString(ethernetInitConfigurationParam.au8DestiIpAddr2),
                ".",
                Convert.ToString(ethernetInitConfigurationParam.au8DestiIpAddr3)
            });
            if (m_RadarDeviceModeConfigParams.NumberOfRadarDevicesDetected <= 1)
            {
                string full_command = string.Format("ar1.CaptureCardConfig_EthInit_WithoutSPI(\"{0}\", \"{1}\", \"{2}\", {3}, {4})", new object[]
                {
                    string.Concat(new string[]
                    {
                        Convert.ToString(ethernetInitConfigurationParam.au8SourceIpAddr0),
                        ".",
                        Convert.ToString(ethernetInitConfigurationParam.au8SourceIpAddr1),
                        ".",
                        Convert.ToString(ethernetInitConfigurationParam.au8SourceIpAddr2),
                        ".",
                        Convert.ToString(ethernetInitConfigurationParam.au8SourceIpAddr3)
                    }),
                    string.Concat(new string[]
                    {
                        Convert.ToString(ethernetInitConfigurationParam.au8DestiIpAddr0),
                        ".",
                        Convert.ToString(ethernetInitConfigurationParam.au8DestiIpAddr1),
                        ".",
                        Convert.ToString(ethernetInitConfigurationParam.au8DestiIpAddr2),
                        ".",
                        Convert.ToString(ethernetInitConfigurationParam.au8DestiIpAddr3)
                    }),
                    string.Concat(new string[]
                    {
                        ethernetInitConfigurationParam.f00001c.ToString(),
                        ":",
                        ethernetInitConfigurationParam.f00001d.ToString(),
                        ":",
                        ethernetInitConfigurationParam.f00001e.ToString(),
                        ":",
                        ethernetInitConfigurationParam.f00001f.ToString(),
                        ":",
                        ethernetInitConfigurationParam.f000020.ToString(),
                        ":",
                        ethernetInitConfigurationParam.f000021.ToString()
                    }),
                    ethernetInitConfigurationParam.u32ConfigPortNo,
                    ethernetInitConfigurationParam.u32RecordPortNo
                });
                m_GuiManager.RecordLog(6, full_command);
            }
            string text = Path.GetDirectoryName(Application.StartupPath) + "\\PostProc";
            string text2 = "cf.json";
            string path = text + "\\cf.json";
            string text3 = "DCA1000EVM_CLI_Control.exe";
            object obj = JsonConvert.DeserializeObject(File.ReadAllText(path));
            if (ScriptOps.c0002b1.f0001ae == null)
            {
                ScriptOps.c0002b1.f0001ae = CallSite<Func<CallSite, object, string, string, object>>.Create(Binder.SetIndex(CSharpBinderFlags.None, typeof(ScriptOps), new CSharpArgumentInfo[]
                {
                    CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.None, null),
                    CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.UseCompileTimeType | CSharpArgumentInfoFlags.Constant, null),
                    CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.UseCompileTimeType, null)
                }));
            }
            Func<CallSite, object, string, string, object> target = ScriptOps.c0002b1.f0001ae.Target;
            CallSite f0001ae = ScriptOps.c0002b1.f0001ae;
            if (ScriptOps.c0002b1.f0001ad == null)
            {
                ScriptOps.c0002b1.f0001ad = CallSite<Func<CallSite, object, string, object>>.Create(Binder.GetIndex(CSharpBinderFlags.None, typeof(ScriptOps), new CSharpArgumentInfo[]
                {
                    CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.None, null),
                    CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.UseCompileTimeType | CSharpArgumentInfoFlags.Constant, null)
                }));
            }
            Func<CallSite, object, string, object> target2 = ScriptOps.c0002b1.f0001ad.Target;
            CallSite f0001ad = ScriptOps.c0002b1.f0001ad;
            if (ScriptOps.c0002b1.f0001ac == null)
            {
                ScriptOps.c0002b1.f0001ac = CallSite<Func<CallSite, object, string, object>>.Create(Binder.GetIndex(CSharpBinderFlags.None, typeof(ScriptOps), new CSharpArgumentInfo[]
                {
                    CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.None, null),
                    CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.UseCompileTimeType | CSharpArgumentInfoFlags.Constant, null)
                }));
            }
            target(f0001ae, target2(f0001ad, ScriptOps.c0002b1.f0001ac.Target(ScriptOps.c0002b1.f0001ac, obj, "DCA1000Config"), "ethernetConfig"), "DCA1000IPAddress", arg);
            if (ScriptOps.c0002b1.f0001b1 == null)
            {
                ScriptOps.c0002b1.f0001b1 = CallSite<Func<CallSite, object, string, int, object>>.Create(Binder.SetIndex(CSharpBinderFlags.None, typeof(ScriptOps), new CSharpArgumentInfo[]
                {
                    CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.None, null),
                    CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.UseCompileTimeType | CSharpArgumentInfoFlags.Constant, null),
                    CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.UseCompileTimeType, null)
                }));
            }
            Func<CallSite, object, string, int, object> target3 = ScriptOps.c0002b1.f0001b1.Target;
            CallSite f0001b = ScriptOps.c0002b1.f0001b1;
            if (ScriptOps.c0002b1.f0001b0 == null)
            {
                ScriptOps.c0002b1.f0001b0 = CallSite<Func<CallSite, object, string, object>>.Create(Binder.GetIndex(CSharpBinderFlags.None, typeof(ScriptOps), new CSharpArgumentInfo[]
                {
                    CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.None, null),
                    CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.UseCompileTimeType | CSharpArgumentInfoFlags.Constant, null)
                }));
            }
            Func<CallSite, object, string, object> target4 = ScriptOps.c0002b1.f0001b0.Target;
            CallSite f0001b2 = ScriptOps.c0002b1.f0001b0;
            if (ScriptOps.c0002b1.f0001af == null)
            {
                ScriptOps.c0002b1.f0001af = CallSite<Func<CallSite, object, string, object>>.Create(Binder.GetIndex(CSharpBinderFlags.None, typeof(ScriptOps), new CSharpArgumentInfo[]
                {
                    CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.None, null),
                    CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.UseCompileTimeType | CSharpArgumentInfoFlags.Constant, null)
                }));
            }
            target3(f0001b, target4(f0001b2, ScriptOps.c0002b1.f0001af.Target(ScriptOps.c0002b1.f0001af, obj, "DCA1000Config"), "ethernetConfig"), "DCA1000ConfigPort", ethernetInitConfigurationParam.u32ConfigPortNo);
            if (ScriptOps.c0002b1.f0001b4 == null)
            {
                ScriptOps.c0002b1.f0001b4 = CallSite<Func<CallSite, object, string, int, object>>.Create(Binder.SetIndex(CSharpBinderFlags.None, typeof(ScriptOps), new CSharpArgumentInfo[]
                {
                    CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.None, null),
                    CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.UseCompileTimeType | CSharpArgumentInfoFlags.Constant, null),
                    CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.UseCompileTimeType, null)
                }));
            }
            Func<CallSite, object, string, int, object> target5 = ScriptOps.c0002b1.f0001b4.Target;
            CallSite f0001b3 = ScriptOps.c0002b1.f0001b4;
            if (ScriptOps.c0002b1.f0001b3 == null)
            {
                ScriptOps.c0002b1.f0001b3 = CallSite<Func<CallSite, object, string, object>>.Create(Binder.GetIndex(CSharpBinderFlags.None, typeof(ScriptOps), new CSharpArgumentInfo[]
                {
                    CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.None, null),
                    CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.UseCompileTimeType | CSharpArgumentInfoFlags.Constant, null)
                }));
            }
            Func<CallSite, object, string, object> target6 = ScriptOps.c0002b1.f0001b3.Target;
            CallSite f0001b4 = ScriptOps.c0002b1.f0001b3;
            if (ScriptOps.c0002b1.f0001b2 == null)
            {
                ScriptOps.c0002b1.f0001b2 = CallSite<Func<CallSite, object, string, object>>.Create(Binder.GetIndex(CSharpBinderFlags.None, typeof(ScriptOps), new CSharpArgumentInfo[]
                {
                    CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.None, null),
                    CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.UseCompileTimeType | CSharpArgumentInfoFlags.Constant, null)
                }));
            }
            target5(f0001b3, target6(f0001b4, ScriptOps.c0002b1.f0001b2.Target(ScriptOps.c0002b1.f0001b2, obj, "DCA1000Config"), "ethernetConfig"), "DCA1000DataPort", ethernetInitConfigurationParam.u32RecordPortNo);
            if (ScriptOps.c0002b1.f0001b6 == null)
            {
                ScriptOps.c0002b1.f0001b6 = CallSite<Func<CallSite, object, string>>.Create(Binder.Convert(CSharpBinderFlags.None, typeof(string), typeof(ScriptOps)));
            }
            Func<CallSite, object, string> target7 = ScriptOps.c0002b1.f0001b6.Target;
            CallSite f0001b5 = ScriptOps.c0002b1.f0001b6;
            if (ScriptOps.c0002b1.f0001b5 == null)
            {
                ScriptOps.c0002b1.f0001b5 = CallSite<Func<CallSite, Type, object, Newtonsoft.Json.Formatting, object>>.Create(Binder.InvokeMember(CSharpBinderFlags.None, "SerializeObject", null, typeof(ScriptOps), new CSharpArgumentInfo[]
                {
                    CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.UseCompileTimeType | CSharpArgumentInfoFlags.IsStaticType, null),
                    CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.None, null),
                    CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.UseCompileTimeType | CSharpArgumentInfoFlags.Constant, null)
                }));
            }
            string contents = target7(f0001b5, ScriptOps.c0002b1.f0001b5.Target(ScriptOps.c0002b1.f0001b5, typeof(JsonConvert), obj, Newtonsoft.Json.Formatting.Indented));
            File.WriteAllText(path, contents);
            string text4 = "fpga";
            string arguments = string.Concat(new string[]
            {
                "/C ",
                text3,
                " ",
                text4,
                " ",
                text2
            });
            ProcessStartInfo processStartInfo = new ProcessStartInfo();
            processStartInfo.FileName = "CMD.EXE";
            processStartInfo.WorkingDirectory = text;
            processStartInfo.Arguments = arguments;
            processStartInfo.UseShellExecute = false;
            processStartInfo.RedirectStandardOutput = true;
            processStartInfo.RedirectStandardError = true;
            processStartInfo.RedirectStandardInput = true;
            processStartInfo.CreateNoWindow = true;
            Process process = Process.Start(processStartInfo);
            string full_command2 = string.Format("Sending {0} command to DCA1000", text4);
            m_GuiManager.RecordLog(0, full_command2);
            if (process != null && !process.HasExited)
            {
                process.WaitForExit();
            }
            string full_command3 = process.StandardOutput.ReadToEnd();
            m_GuiManager.RecordLog(0, full_command3);
            text4 = "fpga_version";
            arguments = string.Concat(new string[]
            {
                "/C ",
                text3,
                " ",
                text4,
                " ",
                text2
            });
            processStartInfo.Arguments = arguments;
            process = Process.Start(processStartInfo);
            full_command2 = string.Format("Sending {0} command to DCA1000", text4);
            m_GuiManager.RecordLog(0, full_command2);
            if (process != null && !process.HasExited)
            {
                process.WaitForExit();
            }
            string text5 = process.StandardOutput.ReadToEnd();
            m_GuiManager.RecordLog(0, text5);
            GlobalRef.f0002d3 = text5.Substring(19, 12);
            ScriptOps.m_MainForm.m_RFDataCaptureCard.m00006e(GlobalRef.f0002d3);
            return result;
        }

        public int UpdateNSetRFEthernetModeConfigurationData(uint RadarDeviceId, uint eLogMode, uint eLvdsMode, uint eDataXferMode, uint eDataCaptureMode, uint eDataFormatMode, byte u8Timer)
        {
            int result = 0;
            GlobalRef.g_RadarDeviceId = RadarDeviceId;
            GlobalRef.g_CapturePktSequenceEnaDisable = true;
            RFDCCardModeConfigurationParam.eLogMode = eLogMode;
            string arg = string.Empty;
            if (RFDCCardModeConfigurationParam.eLogMode == 1U)
            {
                arg = "raw";
            }
            else if (RFDCCardModeConfigurationParam.eLogMode == 2U)
            {
                arg = "multi";
            }
            RFDCCardModeConfigurationParam.eDataXferMode = eDataXferMode;
            string arg2 = string.Empty;
            if (RFDCCardModeConfigurationParam.eDataXferMode == 1U)
            {
                arg2 = "LVDSCapture";
            }
            else if (RFDCCardModeConfigurationParam.eDataXferMode == 2U)
            {
                arg2 = "LVDSPlayback";
            }
            RFDCCardModeConfigurationParam.eDataCaptureMode = eDataCaptureMode;
            string arg3 = string.Empty;
            if (RFDCCardModeConfigurationParam.eDataCaptureMode == 2U)
            {
                arg3 = "ethernetStream";
            }
            else if (RFDCCardModeConfigurationParam.eDataCaptureMode == 1U)
            {
                arg3 = "SDCardStorage";
            }
            RFDCCardModeConfigurationParam.u8Timer = m_EthernetModeConfigParams.u8Timer;
            RFDCCardModeConfigurationParam.eLvdsMode = eLvdsMode;
            RFDCCardModeConfigurationParam.eDataFormatMode = eDataFormatMode;
            if (m_RadarDeviceModeConfigParams.NumberOfRadarDevicesDetected <= 1)
            {
                string full_command = string.Format("ar1.CaptureCardConfig_Mode({0}, {1}, {2}, {3}, {4}, {5})", new object[]
                {
                    RFDCCardModeConfigurationParam.eLogMode,
                    RFDCCardModeConfigurationParam.eLvdsMode,
                    RFDCCardModeConfigurationParam.eDataXferMode,
                    RFDCCardModeConfigurationParam.eDataCaptureMode,
                    RFDCCardModeConfigurationParam.eDataFormatMode,
                    RFDCCardModeConfigurationParam.u8Timer
                });
                m_GuiManager.RecordLog(6, full_command);
            }
            string text = Path.GetDirectoryName(Application.StartupPath) + "\\PostProc";
            string text2 = "cf.json";
            string path = text + "\\cf.json";
            string text3 = "DCA1000EVM_CLI_Control.exe";
            object obj = JsonConvert.DeserializeObject(File.ReadAllText(path));
            if (ScriptOps.c0002b2.f0001ad == null)
            {
                ScriptOps.c0002b2.f0001ad = CallSite<Func<CallSite, object, string, string, object>>.Create(Binder.SetIndex(CSharpBinderFlags.None, typeof(ScriptOps), new CSharpArgumentInfo[]
                {
                    CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.None, null),
                    CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.UseCompileTimeType | CSharpArgumentInfoFlags.Constant, null),
                    CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.UseCompileTimeType, null)
                }));
            }
            Func<CallSite, object, string, string, object> target = ScriptOps.c0002b2.f0001ad.Target;
            CallSite f0001ad = ScriptOps.c0002b2.f0001ad;
            if (ScriptOps.c0002b2.f0001ac == null)
            {
                ScriptOps.c0002b2.f0001ac = CallSite<Func<CallSite, object, string, object>>.Create(Binder.GetIndex(CSharpBinderFlags.None, typeof(ScriptOps), new CSharpArgumentInfo[]
                {
                    CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.None, null),
                    CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.UseCompileTimeType | CSharpArgumentInfoFlags.Constant, null)
                }));
            }
            target(f0001ad, ScriptOps.c0002b2.f0001ac.Target(ScriptOps.c0002b2.f0001ac, obj, "DCA1000Config"), "dataLoggingMode", arg);
            if (ScriptOps.c0002b2.f0001af == null)
            {
                ScriptOps.c0002b2.f0001af = CallSite<Func<CallSite, object, string, string, object>>.Create(Binder.SetIndex(CSharpBinderFlags.None, typeof(ScriptOps), new CSharpArgumentInfo[]
                {
                    CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.None, null),
                    CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.UseCompileTimeType | CSharpArgumentInfoFlags.Constant, null),
                    CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.UseCompileTimeType, null)
                }));
            }
            Func<CallSite, object, string, string, object> target2 = ScriptOps.c0002b2.f0001af.Target;
            CallSite f0001af = ScriptOps.c0002b2.f0001af;
            if (ScriptOps.c0002b2.f0001ae == null)
            {
                ScriptOps.c0002b2.f0001ae = CallSite<Func<CallSite, object, string, object>>.Create(Binder.GetIndex(CSharpBinderFlags.None, typeof(ScriptOps), new CSharpArgumentInfo[]
                {
                    CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.None, null),
                    CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.UseCompileTimeType | CSharpArgumentInfoFlags.Constant, null)
                }));
            }
            target2(f0001af, ScriptOps.c0002b2.f0001ae.Target(ScriptOps.c0002b2.f0001ae, obj, "DCA1000Config"), "dataTransferMode", arg2);
            if (ScriptOps.c0002b2.f0001b1 == null)
            {
                ScriptOps.c0002b2.f0001b1 = CallSite<Func<CallSite, object, string, string, object>>.Create(Binder.SetIndex(CSharpBinderFlags.None, typeof(ScriptOps), new CSharpArgumentInfo[]
                {
                    CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.None, null),
                    CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.UseCompileTimeType | CSharpArgumentInfoFlags.Constant, null),
                    CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.UseCompileTimeType, null)
                }));
            }
            Func<CallSite, object, string, string, object> target3 = ScriptOps.c0002b2.f0001b1.Target;
            CallSite f0001b = ScriptOps.c0002b2.f0001b1;
            if (ScriptOps.c0002b2.f0001b0 == null)
            {
                ScriptOps.c0002b2.f0001b0 = CallSite<Func<CallSite, object, string, object>>.Create(Binder.GetIndex(CSharpBinderFlags.None, typeof(ScriptOps), new CSharpArgumentInfo[]
                {
                    CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.None, null),
                    CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.UseCompileTimeType | CSharpArgumentInfoFlags.Constant, null)
                }));
            }
            target3(f0001b, ScriptOps.c0002b2.f0001b0.Target(ScriptOps.c0002b2.f0001b0, obj, "DCA1000Config"), "dataCaptureMode", arg3);
            if (ScriptOps.c0002b2.f0001b3 == null)
            {
                ScriptOps.c0002b2.f0001b3 = CallSite<Func<CallSite, object, string, uint, object>>.Create(Binder.SetIndex(CSharpBinderFlags.None, typeof(ScriptOps), new CSharpArgumentInfo[]
                {
                    CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.None, null),
                    CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.UseCompileTimeType | CSharpArgumentInfoFlags.Constant, null),
                    CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.UseCompileTimeType, null)
                }));
            }
            Func<CallSite, object, string, uint, object> target4 = ScriptOps.c0002b2.f0001b3.Target;
            CallSite f0001b2 = ScriptOps.c0002b2.f0001b3;
            if (ScriptOps.c0002b2.f0001b2 == null)
            {
                ScriptOps.c0002b2.f0001b2 = CallSite<Func<CallSite, object, string, object>>.Create(Binder.GetIndex(CSharpBinderFlags.None, typeof(ScriptOps), new CSharpArgumentInfo[]
                {
                    CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.None, null),
                    CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.UseCompileTimeType | CSharpArgumentInfoFlags.Constant, null)
                }));
            }
            target4(f0001b2, ScriptOps.c0002b2.f0001b2.Target(ScriptOps.c0002b2.f0001b2, obj, "DCA1000Config"), "lvdsMode", RFDCCardModeConfigurationParam.eLvdsMode);
            if (ScriptOps.c0002b2.f0001b5 == null)
            {
                ScriptOps.c0002b2.f0001b5 = CallSite<Func<CallSite, object, string, uint, object>>.Create(Binder.SetIndex(CSharpBinderFlags.None, typeof(ScriptOps), new CSharpArgumentInfo[]
                {
                    CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.None, null),
                    CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.UseCompileTimeType | CSharpArgumentInfoFlags.Constant, null),
                    CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.UseCompileTimeType, null)
                }));
            }
            Func<CallSite, object, string, uint, object> target5 = ScriptOps.c0002b2.f0001b5.Target;
            CallSite f0001b3 = ScriptOps.c0002b2.f0001b5;
            if (ScriptOps.c0002b2.f0001b4 == null)
            {
                ScriptOps.c0002b2.f0001b4 = CallSite<Func<CallSite, object, string, object>>.Create(Binder.GetIndex(CSharpBinderFlags.None, typeof(ScriptOps), new CSharpArgumentInfo[]
                {
                    CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.None, null),
                    CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.UseCompileTimeType | CSharpArgumentInfoFlags.Constant, null)
                }));
            }
            target5(f0001b3, ScriptOps.c0002b2.f0001b4.Target(ScriptOps.c0002b2.f0001b4, obj, "DCA1000Config"), "dataFormatMode", RFDCCardModeConfigurationParam.eDataFormatMode);
            if (ScriptOps.c0002b2.f0002e0 == null)
            {
                ScriptOps.c0002b2.f0002e0 = CallSite<Func<CallSite, object, string>>.Create(Binder.Convert(CSharpBinderFlags.None, typeof(string), typeof(ScriptOps)));
            }
            Func<CallSite, object, string> target6 = ScriptOps.c0002b2.f0002e0.Target;
            CallSite f0002e = ScriptOps.c0002b2.f0002e0;
            if (ScriptOps.c0002b2.f0001b6 == null)
            {
                ScriptOps.c0002b2.f0001b6 = CallSite<Func<CallSite, Type, object, Newtonsoft.Json.Formatting, object>>.Create(Binder.InvokeMember(CSharpBinderFlags.None, "SerializeObject", null, typeof(ScriptOps), new CSharpArgumentInfo[]
                {
                    CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.UseCompileTimeType | CSharpArgumentInfoFlags.IsStaticType, null),
                    CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.None, null),
                    CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.UseCompileTimeType | CSharpArgumentInfoFlags.Constant, null)
                }));
            }
            string contents = target6(f0002e, ScriptOps.c0002b2.f0001b6.Target(ScriptOps.c0002b2.f0001b6, typeof(JsonConvert), obj, Newtonsoft.Json.Formatting.Indented));
            File.WriteAllText(path, contents);
            string text4 = "fpga";
            string arguments = string.Concat(new string[]
            {
                "/C ",
                text3,
                " ",
                text4,
                " ",
                text2
            });
            Process process = Process.Start(new ProcessStartInfo
            {
                FileName = "CMD.EXE",
                WorkingDirectory = text,
                Arguments = arguments,
                UseShellExecute = false,
                RedirectStandardOutput = true,
                RedirectStandardError = true,
                RedirectStandardInput = true,
                CreateNoWindow = true
            });
            string full_command2 = string.Format("Sending {0} command to DCA1000", text4);
            m_GuiManager.RecordLog(0, full_command2);
            if (process != null && !process.HasExited)
            {
                process.WaitForExit();
            }
            string full_command3 = process.StandardOutput.ReadToEnd();
            m_GuiManager.RecordLog(0, full_command3);
            return result;
        }

        public int UpdateNSetRFEthernetModeConfigurationData_WithoutSPI(uint RadarDeviceId, uint eLogMode, uint eLvdsMode, uint eDataXferMode, uint eDataCaptureMode, uint eDataFormatMode, byte u8Timer)
        {
            int result = 0;
            GlobalRef.g_RadarDeviceId = RadarDeviceId;
            GlobalRef.g_CapturePktSequenceEnaDisable = true;
            RFDCCardModeConfigurationParam.eLogMode = eLogMode;
            string arg = string.Empty;
            if (RFDCCardModeConfigurationParam.eLogMode == 1U)
            {
                arg = "raw";
            }
            else if (RFDCCardModeConfigurationParam.eLogMode == 2U)
            {
                arg = "multi";
            }
            RFDCCardModeConfigurationParam.eDataXferMode = eDataXferMode;
            string arg2 = string.Empty;
            if (RFDCCardModeConfigurationParam.eDataXferMode == 1U)
            {
                arg2 = "LVDSCapture";
            }
            else if (RFDCCardModeConfigurationParam.eDataXferMode == 2U)
            {
                arg2 = "LVDSPlayback";
            }
            RFDCCardModeConfigurationParam.eDataCaptureMode = eDataCaptureMode;
            string arg3 = string.Empty;
            if (RFDCCardModeConfigurationParam.eDataCaptureMode == 2U)
            {
                arg3 = "ethernetStream";
            }
            else if (RFDCCardModeConfigurationParam.eDataCaptureMode == 1U)
            {
                arg3 = "SDCardStorage";
            }
            RFDCCardModeConfigurationParam.u8Timer = m_EthernetModeConfigParams.u8Timer;
            RFDCCardModeConfigurationParam.eLvdsMode = eLvdsMode;
            RFDCCardModeConfigurationParam.eDataFormatMode = eDataFormatMode;
            if (m_RadarDeviceModeConfigParams.NumberOfRadarDevicesDetected <= 1)
            {
                string full_command = string.Format("ar1.ConfigureRFDCCardMode_WithoutSPI({0}, {1}, {2}, {3}, {4}, {5})", new object[]
                {
                    RFDCCardModeConfigurationParam.eLogMode,
                    RFDCCardModeConfigurationParam.eLvdsMode,
                    RFDCCardModeConfigurationParam.eDataXferMode,
                    RFDCCardModeConfigurationParam.eDataCaptureMode,
                    RFDCCardModeConfigurationParam.eDataFormatMode,
                    RFDCCardModeConfigurationParam.u8Timer
                });
                m_GuiManager.RecordLog(6, full_command);
            }
            string text = Path.GetDirectoryName(Application.StartupPath) + "\\PostProc";
            string text2 = "cf.json";
            string path = text + "\\cf.json";
            string text3 = "DCA1000EVM_CLI_Control.exe";
            object obj = JsonConvert.DeserializeObject(File.ReadAllText(path));
            if (ScriptOps.c0002b3.f0001ad == null)
            {
                ScriptOps.c0002b3.f0001ad = CallSite<Func<CallSite, object, string, string, object>>.Create(Binder.SetIndex(CSharpBinderFlags.None, typeof(ScriptOps), new CSharpArgumentInfo[]
                {
                    CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.None, null),
                    CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.UseCompileTimeType | CSharpArgumentInfoFlags.Constant, null),
                    CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.UseCompileTimeType, null)
                }));
            }
            Func<CallSite, object, string, string, object> target = ScriptOps.c0002b3.f0001ad.Target;
            CallSite f0001ad = ScriptOps.c0002b3.f0001ad;
            if (ScriptOps.c0002b3.f0001ac == null)
            {
                ScriptOps.c0002b3.f0001ac = CallSite<Func<CallSite, object, string, object>>.Create(Binder.GetIndex(CSharpBinderFlags.None, typeof(ScriptOps), new CSharpArgumentInfo[]
                {
                    CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.None, null),
                    CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.UseCompileTimeType | CSharpArgumentInfoFlags.Constant, null)
                }));
            }
            target(f0001ad, ScriptOps.c0002b3.f0001ac.Target(ScriptOps.c0002b3.f0001ac, obj, "DCA1000Config"), "dataLoggingMode", arg);
            if (ScriptOps.c0002b3.f0001af == null)
            {
                ScriptOps.c0002b3.f0001af = CallSite<Func<CallSite, object, string, string, object>>.Create(Binder.SetIndex(CSharpBinderFlags.None, typeof(ScriptOps), new CSharpArgumentInfo[]
                {
                    CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.None, null),
                    CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.UseCompileTimeType | CSharpArgumentInfoFlags.Constant, null),
                    CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.UseCompileTimeType, null)
                }));
            }
            Func<CallSite, object, string, string, object> target2 = ScriptOps.c0002b3.f0001af.Target;
            CallSite f0001af = ScriptOps.c0002b3.f0001af;
            if (ScriptOps.c0002b3.f0001ae == null)
            {
                ScriptOps.c0002b3.f0001ae = CallSite<Func<CallSite, object, string, object>>.Create(Binder.GetIndex(CSharpBinderFlags.None, typeof(ScriptOps), new CSharpArgumentInfo[]
                {
                    CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.None, null),
                    CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.UseCompileTimeType | CSharpArgumentInfoFlags.Constant, null)
                }));
            }
            target2(f0001af, ScriptOps.c0002b3.f0001ae.Target(ScriptOps.c0002b3.f0001ae, obj, "DCA1000Config"), "dataTransferMode", arg2);
            if (ScriptOps.c0002b3.f0001b1 == null)
            {
                ScriptOps.c0002b3.f0001b1 = CallSite<Func<CallSite, object, string, string, object>>.Create(Binder.SetIndex(CSharpBinderFlags.None, typeof(ScriptOps), new CSharpArgumentInfo[]
                {
                    CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.None, null),
                    CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.UseCompileTimeType | CSharpArgumentInfoFlags.Constant, null),
                    CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.UseCompileTimeType, null)
                }));
            }
            Func<CallSite, object, string, string, object> target3 = ScriptOps.c0002b3.f0001b1.Target;
            CallSite f0001b = ScriptOps.c0002b3.f0001b1;
            if (ScriptOps.c0002b3.f0001b0 == null)
            {
                ScriptOps.c0002b3.f0001b0 = CallSite<Func<CallSite, object, string, object>>.Create(Binder.GetIndex(CSharpBinderFlags.None, typeof(ScriptOps), new CSharpArgumentInfo[]
                {
                    CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.None, null),
                    CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.UseCompileTimeType | CSharpArgumentInfoFlags.Constant, null)
                }));
            }
            target3(f0001b, ScriptOps.c0002b3.f0001b0.Target(ScriptOps.c0002b3.f0001b0, obj, "DCA1000Config"), "dataCaptureMode", arg3);
            if (ScriptOps.c0002b3.f0001b3 == null)
            {
                ScriptOps.c0002b3.f0001b3 = CallSite<Func<CallSite, object, string, uint, object>>.Create(Binder.SetIndex(CSharpBinderFlags.None, typeof(ScriptOps), new CSharpArgumentInfo[]
                {
                    CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.None, null),
                    CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.UseCompileTimeType | CSharpArgumentInfoFlags.Constant, null),
                    CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.UseCompileTimeType, null)
                }));
            }
            Func<CallSite, object, string, uint, object> target4 = ScriptOps.c0002b3.f0001b3.Target;
            CallSite f0001b2 = ScriptOps.c0002b3.f0001b3;
            if (ScriptOps.c0002b3.f0001b2 == null)
            {
                ScriptOps.c0002b3.f0001b2 = CallSite<Func<CallSite, object, string, object>>.Create(Binder.GetIndex(CSharpBinderFlags.None, typeof(ScriptOps), new CSharpArgumentInfo[]
                {
                    CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.None, null),
                    CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.UseCompileTimeType | CSharpArgumentInfoFlags.Constant, null)
                }));
            }
            target4(f0001b2, ScriptOps.c0002b3.f0001b2.Target(ScriptOps.c0002b3.f0001b2, obj, "DCA1000Config"), "lvdsMode", RFDCCardModeConfigurationParam.eLvdsMode);
            if (ScriptOps.c0002b3.f0001b5 == null)
            {
                ScriptOps.c0002b3.f0001b5 = CallSite<Func<CallSite, object, string, uint, object>>.Create(Binder.SetIndex(CSharpBinderFlags.None, typeof(ScriptOps), new CSharpArgumentInfo[]
                {
                    CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.None, null),
                    CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.UseCompileTimeType | CSharpArgumentInfoFlags.Constant, null),
                    CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.UseCompileTimeType, null)
                }));
            }
            Func<CallSite, object, string, uint, object> target5 = ScriptOps.c0002b3.f0001b5.Target;
            CallSite f0001b3 = ScriptOps.c0002b3.f0001b5;
            if (ScriptOps.c0002b3.f0001b4 == null)
            {
                ScriptOps.c0002b3.f0001b4 = CallSite<Func<CallSite, object, string, object>>.Create(Binder.GetIndex(CSharpBinderFlags.None, typeof(ScriptOps), new CSharpArgumentInfo[]
                {
                    CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.None, null),
                    CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.UseCompileTimeType | CSharpArgumentInfoFlags.Constant, null)
                }));
            }
            target5(f0001b3, ScriptOps.c0002b3.f0001b4.Target(ScriptOps.c0002b3.f0001b4, obj, "DCA1000Config"), "dataFormatMode", RFDCCardModeConfigurationParam.eDataFormatMode);
            if (ScriptOps.c0002b3.f0002e0 == null)
            {
                ScriptOps.c0002b3.f0002e0 = CallSite<Func<CallSite, object, string>>.Create(Binder.Convert(CSharpBinderFlags.None, typeof(string), typeof(ScriptOps)));
            }
            Func<CallSite, object, string> target6 = ScriptOps.c0002b3.f0002e0.Target;
            CallSite f0002e = ScriptOps.c0002b3.f0002e0;
            if (ScriptOps.c0002b3.f0001b6 == null)
            {
                ScriptOps.c0002b3.f0001b6 = CallSite<Func<CallSite, Type, object, Newtonsoft.Json.Formatting, object>>.Create(Binder.InvokeMember(CSharpBinderFlags.None, "SerializeObject", null, typeof(ScriptOps), new CSharpArgumentInfo[]
                {
                    CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.UseCompileTimeType | CSharpArgumentInfoFlags.IsStaticType, null),
                    CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.None, null),
                    CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.UseCompileTimeType | CSharpArgumentInfoFlags.Constant, null)
                }));
            }
            string contents = target6(f0002e, ScriptOps.c0002b3.f0001b6.Target(ScriptOps.c0002b3.f0001b6, typeof(JsonConvert), obj, Newtonsoft.Json.Formatting.Indented));
            File.WriteAllText(path, contents);
            string text4 = "fpga";
            string arguments = string.Concat(new string[]
            {
                "/C ",
                text3,
                " ",
                text4,
                " ",
                text2
            });
            Process process = Process.Start(new ProcessStartInfo
            {
                FileName = "CMD.EXE",
                WorkingDirectory = text,
                Arguments = arguments,
                UseShellExecute = false,
                RedirectStandardOutput = true,
                RedirectStandardError = true,
                RedirectStandardInput = true,
                CreateNoWindow = true
            });
            string full_command2 = string.Format("Sending {0} command to DCA1000", text4);
            m_GuiManager.RecordLog(0, full_command2);
            if (process != null && !process.HasExited)
            {
                process.WaitForExit();
            }
            string full_command3 = process.StandardOutput.ReadToEnd();
            m_GuiManager.RecordLog(0, full_command3);
            return result;
        }

        public int UpdateNSetStopRecordData(uint RadarDeviceId)
        {
            int result = 0;
            GlobalRef.g_RadarDeviceId = RadarDeviceId;
            if (RadarDeviceId == 1U)
            {
                if (GlobalRef.f0002d0)
                {
                    if (GlobalRef.g_NtvRS232Connect[(int)GlobalRef.g_RadarDeviceIndex] && GlobalRef.g_CasCadeDeviceSpiConnect == 0U)
                    {
                        result = m_TsWrapper.Calling_WriteAddr_Single(4294959848U, 1U);
                        if (m_GuiManager.DllOps.itempDisconnect(false) == 0)
                        {
                            string full_command = string.Format("Debug Port Disconnected", new object[0]);
                            m_GuiManager.RecordLog(0, full_command);
                            if (!GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
                            {
                                m_GuiManager.ScriptOps.iRs232ConnectDisconnect_impl();
                            }
                        }
                    }
                    string text = Path.GetDirectoryName(Application.StartupPath) + "\\PostProc";
                    string text2 = "cf.json";
                    string text3 = "DCA1000EVM_CLI_Record.exe";
                    string full_command2 = string.Format("ar1.CaptureCardConfig_StopRecord()", new object[0]);
                    m_GuiManager.RecordLog(2, full_command2);
                    string text4 = "stop_record";
                    string arguments = string.Concat(new string[]
                    {
                        "/C ",
                        text3,
                        " ",
                        text4,
                        " ",
                        text2
                    });
                    GlobalRef.g_processLua = Process.Start(new ProcessStartInfo
                    {
                        FileName = "CMD.EXE",
                        WorkingDirectory = text,
                        Arguments = arguments,
                        UseShellExecute = false,
                        RedirectStandardOutput = true,
                        RedirectStandardError = true,
                        RedirectStandardInput = true,
                        CreateNoWindow = true
                    });
                    string full_command3 = string.Format("Sending {0} command to DCA1000", text4);
                    m_GuiManager.RecordLog(0, full_command3);
                    if (GlobalRef.g_processLua != null && !GlobalRef.g_processLua.HasExited)
                    {
                        GlobalRef.g_processLua.WaitForExit();
                        string full_command4 = GlobalRef.g_processLua.StandardOutput.ReadToEnd();
                        m_GuiManager.RecordLog(0, full_command4);
                    }
                }
            }
            else
            {
                string full_command5 = string.Format("Only single chip is supported with DCA1000!", new object[0]);
                m_GuiManager.RecordLog(2, full_command5);
            }
            return result;
        }

        public int UpdateNSetStopRecordData_WithoutSPI(uint RadarDeviceId)
        {
            int result = 0;
            GlobalRef.g_RadarDeviceId = RadarDeviceId;
            if (RadarDeviceId == 1U)
            {
                if (GlobalRef.f0002d0)
                {
                    string text = Path.GetDirectoryName(Application.StartupPath) + "\\PostProc";
                    string text2 = "cf.json";
                    string text3 = "DCA1000EVM_CLI_Record.exe";
                    string full_command = string.Format("ar1.CaptureCardConfig_StopRecord()", new object[0]);
                    m_GuiManager.RecordLog(2, full_command);
                    string text4 = "stop_record";
                    string arguments = string.Concat(new string[]
                    {
                        "/C ",
                        text3,
                        " ",
                        text4,
                        " ",
                        text2
                    });
                    GlobalRef.g_processLua = Process.Start(new ProcessStartInfo
                    {
                        FileName = "CMD.EXE",
                        WorkingDirectory = text,
                        Arguments = arguments,
                        UseShellExecute = false,
                        RedirectStandardOutput = true,
                        RedirectStandardError = true,
                        RedirectStandardInput = true,
                        CreateNoWindow = true
                    });
                    string full_command2 = string.Format("Sending {0} command to DCA1000", text4);
                    m_GuiManager.RecordLog(0, full_command2);
                    if (GlobalRef.g_processLua != null && !GlobalRef.g_processLua.HasExited)
                    {
                        GlobalRef.g_processLua.WaitForExit();
                        string full_command3 = GlobalRef.g_processLua.StandardOutput.ReadToEnd();
                        m_GuiManager.RecordLog(0, full_command3);
                    }
                }
            }
            else
            {
                string full_command4 = string.Format("Only single chip is supported with DCA1000!", new object[0]);
                m_GuiManager.RecordLog(2, full_command4);
            }
            return result;
        }

        public int UpdateNSetStartRecordADCData(uint RadarDeviceId, string ADCFileName, byte PktSeqEnaDisable)
        {
            int result = 0;
            GlobalRef.g_RadarDeviceId = RadarDeviceId;
            GlobalRef.dobject.capturedFiles.files.Clear();
            GlobalRef.dobject.capturedFiles.numFilesCollected = GlobalRef.dobject.capturedFiles.files.Count;
            GlobalRef.dobject.capturedFiles.fileBasePath = "";
            GlobalRef.f0002c5 = 0;
            ScriptOps.m_MainForm.ChirpConfigTab.iPutMtLbPostProcPath(ADCFileName, true);
            if (RadarDeviceId == 1U)
            {
                if (GlobalRef.f0002d0)
                {
                    if (GlobalRef.g_NtvRS232Connect[(int)GlobalRef.g_RadarDeviceIndex] && GlobalRef.g_CasCadeDeviceSpiConnect == 0U)
                    {
                        result = m_TsWrapper.Calling_WriteAddr_Single(4294959848U, 1U);
                        if (m_GuiManager.DllOps.itempDisconnect(false) == 0)
                        {
                            string full_command = string.Format("Debug Port Disconnected", new object[0]);
                            m_GuiManager.RecordLog(0, full_command);
                            if (!GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
                            {
                                m_GuiManager.ScriptOps.iRs232ConnectDisconnect_impl();
                            }
                        }
                    }
                    GlobalRef.g_CapturePktSequenceEnaDisable = (PktSeqEnaDisable > 0);
                    string text = Path.GetDirectoryName(Application.StartupPath) + "\\PostProc";
                    string text2 = "cf.json";
                    string path = text + "\\cf.json";
                    string text3 = "DCA1000EVM_CLI_Record.exe";
                    string capturePath = ScriptOps.m_MainForm.ChirpConfigTab.getCapturePath();
                    if (string.IsNullOrEmpty(capturePath))
                    {
                        string msg = string.Format("Please select a file to save Data Capture Raw ADC data for Post Processing", new object[0]);
                        m_GuiManager.Log(msg);
                        return 0;
                    }
                    if (GlobalRef.g_RadarDeviceId == 1U)
                    {
                        string full_command2 = string.Format("ar1.CaptureCardConfig_StartRecord(\"{0}\", {1})", new object[]
                        {
                            capturePath,
                            PktSeqEnaDisable
                        });
                        m_GuiManager.RecordLog(2, full_command2);
                    }
                    m_GuiManager.MainTsForm.ChirpConfigTab.DisableAndEnableTheStartCaptureButtonTillStopCaptureFinish(true);
                    string[] array = capturePath.Split(new char[]
                    {
                        '\\'
                    });
                    int num = array.Length;
                    string text4 = "";
                    for (int i = 0; i < num - 1; i++)
                    {
                        if (i != num - 2)
                        {
                            text4 = text4 + array[i] + "\\";
                        }
                        else if (i == num - 2)
                        {
                            text4 += array[i];
                        }
                    }
                    string arg = text4;
                    string fileNameWithoutExtension = Path.GetFileNameWithoutExtension(array[num - 1]);
                    object obj = JsonConvert.DeserializeObject(File.ReadAllText(path));
                    if (ScriptOps.c0002b4.f0001ae == null)
                    {
                        ScriptOps.c0002b4.f0001ae = CallSite<Func<CallSite, object, string, string, object>>.Create(Binder.SetIndex(CSharpBinderFlags.None, typeof(ScriptOps), new CSharpArgumentInfo[]
                        {
                            CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.None, null),
                            CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.UseCompileTimeType | CSharpArgumentInfoFlags.Constant, null),
                            CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.UseCompileTimeType, null)
                        }));
                    }
                    Func<CallSite, object, string, string, object> target = ScriptOps.c0002b4.f0001ae.Target;
                    CallSite f0001ae = ScriptOps.c0002b4.f0001ae;
                    if (ScriptOps.c0002b4.f0001ad == null)
                    {
                        ScriptOps.c0002b4.f0001ad = CallSite<Func<CallSite, object, string, object>>.Create(Binder.GetIndex(CSharpBinderFlags.None, typeof(ScriptOps), new CSharpArgumentInfo[]
                        {
                            CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.None, null),
                            CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.UseCompileTimeType | CSharpArgumentInfoFlags.Constant, null)
                        }));
                    }
                    Func<CallSite, object, string, object> target2 = ScriptOps.c0002b4.f0001ad.Target;
                    CallSite f0001ad = ScriptOps.c0002b4.f0001ad;
                    if (ScriptOps.c0002b4.f0001ac == null)
                    {
                        ScriptOps.c0002b4.f0001ac = CallSite<Func<CallSite, object, string, object>>.Create(Binder.GetIndex(CSharpBinderFlags.None, typeof(ScriptOps), new CSharpArgumentInfo[]
                        {
                            CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.None, null),
                            CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.UseCompileTimeType | CSharpArgumentInfoFlags.Constant, null)
                        }));
                    }
                    target(f0001ae, target2(f0001ad, ScriptOps.c0002b4.f0001ac.Target(ScriptOps.c0002b4.f0001ac, obj, "DCA1000Config"), "captureConfig"), "fileBasePath", arg);
                    if (ScriptOps.c0002b4.f0001b1 == null)
                    {
                        ScriptOps.c0002b4.f0001b1 = CallSite<Func<CallSite, object, string, string, object>>.Create(Binder.SetIndex(CSharpBinderFlags.None, typeof(ScriptOps), new CSharpArgumentInfo[]
                        {
                            CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.None, null),
                            CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.UseCompileTimeType | CSharpArgumentInfoFlags.Constant, null),
                            CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.UseCompileTimeType, null)
                        }));
                    }
                    Func<CallSite, object, string, string, object> target3 = ScriptOps.c0002b4.f0001b1.Target;
                    CallSite f0001b = ScriptOps.c0002b4.f0001b1;
                    if (ScriptOps.c0002b4.f0001b0 == null)
                    {
                        ScriptOps.c0002b4.f0001b0 = CallSite<Func<CallSite, object, string, object>>.Create(Binder.GetIndex(CSharpBinderFlags.None, typeof(ScriptOps), new CSharpArgumentInfo[]
                        {
                            CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.None, null),
                            CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.UseCompileTimeType | CSharpArgumentInfoFlags.Constant, null)
                        }));
                    }
                    Func<CallSite, object, string, object> target4 = ScriptOps.c0002b4.f0001b0.Target;
                    CallSite f0001b2 = ScriptOps.c0002b4.f0001b0;
                    if (ScriptOps.c0002b4.f0001af == null)
                    {
                        ScriptOps.c0002b4.f0001af = CallSite<Func<CallSite, object, string, object>>.Create(Binder.GetIndex(CSharpBinderFlags.None, typeof(ScriptOps), new CSharpArgumentInfo[]
                        {
                            CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.None, null),
                            CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.UseCompileTimeType | CSharpArgumentInfoFlags.Constant, null)
                        }));
                    }
                    target3(f0001b, target4(f0001b2, ScriptOps.c0002b4.f0001af.Target(ScriptOps.c0002b4.f0001af, obj, "DCA1000Config"), "captureConfig"), "filePrefix", fileNameWithoutExtension);
                    if (ScriptOps.c0002b4.f0001b4 == null)
                    {
                        ScriptOps.c0002b4.f0001b4 = CallSite<Func<CallSite, object, string, byte, object>>.Create(Binder.SetIndex(CSharpBinderFlags.None, typeof(ScriptOps), new CSharpArgumentInfo[]
                        {
                            CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.None, null),
                            CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.UseCompileTimeType | CSharpArgumentInfoFlags.Constant, null),
                            CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.UseCompileTimeType, null)
                        }));
                    }
                    Func<CallSite, object, string, byte, object> target5 = ScriptOps.c0002b4.f0001b4.Target;
                    CallSite f0001b3 = ScriptOps.c0002b4.f0001b4;
                    if (ScriptOps.c0002b4.f0001b3 == null)
                    {
                        ScriptOps.c0002b4.f0001b3 = CallSite<Func<CallSite, object, string, object>>.Create(Binder.GetIndex(CSharpBinderFlags.None, typeof(ScriptOps), new CSharpArgumentInfo[]
                        {
                            CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.None, null),
                            CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.UseCompileTimeType | CSharpArgumentInfoFlags.Constant, null)
                        }));
                    }
                    Func<CallSite, object, string, object> target6 = ScriptOps.c0002b4.f0001b3.Target;
                    CallSite f0001b4 = ScriptOps.c0002b4.f0001b3;
                    if (ScriptOps.c0002b4.f0001b2 == null)
                    {
                        ScriptOps.c0002b4.f0001b2 = CallSite<Func<CallSite, object, string, object>>.Create(Binder.GetIndex(CSharpBinderFlags.None, typeof(ScriptOps), new CSharpArgumentInfo[]
                        {
                            CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.None, null),
                            CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.UseCompileTimeType | CSharpArgumentInfoFlags.Constant, null)
                        }));
                    }
                    target5(f0001b3, target6(f0001b4, ScriptOps.c0002b4.f0001b2.Target(ScriptOps.c0002b4.f0001b2, obj, "DCA1000Config"), "captureConfig"), "sequenceNumberEnable", PktSeqEnaDisable);
                    if (ScriptOps.c0002b4.f0001b6 == null)
                    {
                        ScriptOps.c0002b4.f0001b6 = CallSite<Func<CallSite, object, string>>.Create(Binder.Convert(CSharpBinderFlags.None, typeof(string), typeof(ScriptOps)));
                    }
                    Func<CallSite, object, string> target7 = ScriptOps.c0002b4.f0001b6.Target;
                    CallSite f0001b5 = ScriptOps.c0002b4.f0001b6;
                    if (ScriptOps.c0002b4.f0001b5 == null)
                    {
                        ScriptOps.c0002b4.f0001b5 = CallSite<Func<CallSite, Type, object, Newtonsoft.Json.Formatting, object>>.Create(Binder.InvokeMember(CSharpBinderFlags.None, "SerializeObject", null, typeof(ScriptOps), new CSharpArgumentInfo[]
                        {
                            CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.UseCompileTimeType | CSharpArgumentInfoFlags.IsStaticType, null),
                            CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.None, null),
                            CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.UseCompileTimeType | CSharpArgumentInfoFlags.Constant, null)
                        }));
                    }
                    string contents = target7(f0001b5, ScriptOps.c0002b4.f0001b5.Target(ScriptOps.c0002b4.f0001b5, typeof(JsonConvert), obj, Newtonsoft.Json.Formatting.Indented));
                    File.WriteAllText(path, contents);
                    string text5 = "start_record";
                    string arguments = string.Concat(new string[]
                    {
                        "/C start /b ",
                        text3,
                        " ",
                        text5,
                        " ",
                        text2
                    });
                    GlobalRef.g_processLua = Process.Start(new ProcessStartInfo
                    {
                        FileName = "CMD.EXE",
                        WorkingDirectory = text,
                        Arguments = arguments,
                        UseShellExecute = false,
                        RedirectStandardOutput = true,
                        RedirectStandardError = true,
                        RedirectStandardInput = true,
                        CreateNoWindow = true
                    });
                    string full_command3 = string.Format("Sending {0} command to DCA1000", text5);
                    m_GuiManager.RecordLog(0, full_command3);
                    m_GuiManager.MainTsForm.ChirpConfigTab.DisableAndEnableTheStartCaptureButtonTillStopCaptureFinish(false);
                    m_GuiManager.MainTsForm.ChirpConfigTab.DisableAndEnableTriggerAndPostProcButton(false);
                    string full_command4 = string.Format("Status: Passed", new object[0]);
                    m_GuiManager.RecordLog(2, full_command4);
                }
            }
            else
            {
                string full_command5 = string.Format("Only single chip is supported with DCA1000!", new object[0]);
                m_GuiManager.RecordLog(2, full_command5);
            }
            CopyMatlabLogFileForDCA1000ForAnalysis(ADCFileName);
            Thread.Sleep(100);
            GlobalRef.f0002c5++;
            int count = GlobalRef.dobject.capturedFiles.files.Count;
            if (GlobalRef.f0002c5 > count)
            {
                Files item = new Files();
                GlobalRef.dobject.capturedFiles.files.Add(item);
                GlobalRef.dobject.capturedFiles.files[GlobalRef.f0002c5 - 1].rawFileName = "";
                GlobalRef.dobject.capturedFiles.files[GlobalRef.f0002c5 - 1].processedFileName = "";
                GlobalRef.dobject.capturedFiles.files[GlobalRef.f0002c5 - 1].processedFileSummary = new ProcessedFileSummary();
                ScriptOps.m_MainForm.ChirpConfigTab.GetCapturedFilesInfo();
            }
            else
            {
                ScriptOps.m_MainForm.ChirpConfigTab.MatlabPostProcPathSet(GlobalRef.dobject);
            }
            return result;
        }

        public int UpdateNSetStartRecordADCData_WithoutSPI(uint RadarDeviceId, string ADCFileName, byte PktSeqEnaDisable)
        {
            int result = 0;
            GlobalRef.g_RadarDeviceId = RadarDeviceId;
            ScriptOps.m_MainForm.ChirpConfigTab.iPutMtLbPostProcPath(ADCFileName, true);
            if (RadarDeviceId == 1U)
            {
                if (GlobalRef.f0002d0)
                {
                    GlobalRef.g_CapturePktSequenceEnaDisable = (PktSeqEnaDisable > 0);
                    string text = Path.GetDirectoryName(Application.StartupPath) + "\\PostProc";
                    string text2 = "cf.json";
                    string path = text + "\\cf.json";
                    string text3 = "DCA1000EVM_CLI_Record.exe";
                    string capturePath = ScriptOps.m_MainForm.ChirpConfigTab.getCapturePath();
                    if (string.IsNullOrEmpty(capturePath))
                    {
                        string msg = string.Format("Please select a file to save Data Capture Raw ADC data for Post Processing", new object[0]);
                        m_GuiManager.Log(msg);
                        return 0;
                    }
                    if (GlobalRef.g_RadarDeviceId == 1U)
                    {
                        string full_command = string.Format("ar1.CaptureCardConfig_StartRecord(\"{0}\", {1})", new object[]
                        {
                            capturePath,
                            PktSeqEnaDisable
                        });
                        m_GuiManager.RecordLog(2, full_command);
                    }
                    m_GuiManager.MainTsForm.ChirpConfigTab.DisableAndEnableTheStartCaptureButtonTillStopCaptureFinish(true);
                    string[] array = capturePath.Split(new char[]
                    {
                        '\\'
                    });
                    int num = array.Length;
                    string text4 = "";
                    for (int i = 0; i < num - 1; i++)
                    {
                        if (i != num - 2)
                        {
                            text4 = text4 + array[i] + "\\";
                        }
                        else if (i == num - 2)
                        {
                            text4 += array[i];
                        }
                    }
                    string arg = text4;
                    string fileNameWithoutExtension = Path.GetFileNameWithoutExtension(array[num - 1]);
                    object obj = JsonConvert.DeserializeObject(File.ReadAllText(path));
                    if (ScriptOps.c0002b5.f0001ae == null)
                    {
                        ScriptOps.c0002b5.f0001ae = CallSite<Func<CallSite, object, string, string, object>>.Create(Binder.SetIndex(CSharpBinderFlags.None, typeof(ScriptOps), new CSharpArgumentInfo[]
                        {
                            CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.None, null),
                            CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.UseCompileTimeType | CSharpArgumentInfoFlags.Constant, null),
                            CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.UseCompileTimeType, null)
                        }));
                    }
                    Func<CallSite, object, string, string, object> target = ScriptOps.c0002b5.f0001ae.Target;
                    CallSite f0001ae = ScriptOps.c0002b5.f0001ae;
                    if (ScriptOps.c0002b5.f0001ad == null)
                    {
                        ScriptOps.c0002b5.f0001ad = CallSite<Func<CallSite, object, string, object>>.Create(Binder.GetIndex(CSharpBinderFlags.None, typeof(ScriptOps), new CSharpArgumentInfo[]
                        {
                            CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.None, null),
                            CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.UseCompileTimeType | CSharpArgumentInfoFlags.Constant, null)
                        }));
                    }
                    Func<CallSite, object, string, object> target2 = ScriptOps.c0002b5.f0001ad.Target;
                    CallSite f0001ad = ScriptOps.c0002b5.f0001ad;
                    if (ScriptOps.c0002b5.f0001ac == null)
                    {
                        ScriptOps.c0002b5.f0001ac = CallSite<Func<CallSite, object, string, object>>.Create(Binder.GetIndex(CSharpBinderFlags.None, typeof(ScriptOps), new CSharpArgumentInfo[]
                        {
                            CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.None, null),
                            CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.UseCompileTimeType | CSharpArgumentInfoFlags.Constant, null)
                        }));
                    }
                    target(f0001ae, target2(f0001ad, ScriptOps.c0002b5.f0001ac.Target(ScriptOps.c0002b5.f0001ac, obj, "DCA1000Config"), "captureConfig"), "fileBasePath", arg);
                    if (ScriptOps.c0002b5.f0001b1 == null)
                    {
                        ScriptOps.c0002b5.f0001b1 = CallSite<Func<CallSite, object, string, string, object>>.Create(Binder.SetIndex(CSharpBinderFlags.None, typeof(ScriptOps), new CSharpArgumentInfo[]
                        {
                            CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.None, null),
                            CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.UseCompileTimeType | CSharpArgumentInfoFlags.Constant, null),
                            CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.UseCompileTimeType, null)
                        }));
                    }
                    Func<CallSite, object, string, string, object> target3 = ScriptOps.c0002b5.f0001b1.Target;
                    CallSite f0001b = ScriptOps.c0002b5.f0001b1;
                    if (ScriptOps.c0002b5.f0001b0 == null)
                    {
                        ScriptOps.c0002b5.f0001b0 = CallSite<Func<CallSite, object, string, object>>.Create(Binder.GetIndex(CSharpBinderFlags.None, typeof(ScriptOps), new CSharpArgumentInfo[]
                        {
                            CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.None, null),
                            CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.UseCompileTimeType | CSharpArgumentInfoFlags.Constant, null)
                        }));
                    }
                    Func<CallSite, object, string, object> target4 = ScriptOps.c0002b5.f0001b0.Target;
                    CallSite f0001b2 = ScriptOps.c0002b5.f0001b0;
                    if (ScriptOps.c0002b5.f0001af == null)
                    {
                        ScriptOps.c0002b5.f0001af = CallSite<Func<CallSite, object, string, object>>.Create(Binder.GetIndex(CSharpBinderFlags.None, typeof(ScriptOps), new CSharpArgumentInfo[]
                        {
                            CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.None, null),
                            CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.UseCompileTimeType | CSharpArgumentInfoFlags.Constant, null)
                        }));
                    }
                    target3(f0001b, target4(f0001b2, ScriptOps.c0002b5.f0001af.Target(ScriptOps.c0002b5.f0001af, obj, "DCA1000Config"), "captureConfig"), "filePrefix", fileNameWithoutExtension);
                    if (ScriptOps.c0002b5.f0001b4 == null)
                    {
                        ScriptOps.c0002b5.f0001b4 = CallSite<Func<CallSite, object, string, byte, object>>.Create(Binder.SetIndex(CSharpBinderFlags.None, typeof(ScriptOps), new CSharpArgumentInfo[]
                        {
                            CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.None, null),
                            CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.UseCompileTimeType | CSharpArgumentInfoFlags.Constant, null),
                            CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.UseCompileTimeType, null)
                        }));
                    }
                    Func<CallSite, object, string, byte, object> target5 = ScriptOps.c0002b5.f0001b4.Target;
                    CallSite f0001b3 = ScriptOps.c0002b5.f0001b4;
                    if (ScriptOps.c0002b5.f0001b3 == null)
                    {
                        ScriptOps.c0002b5.f0001b3 = CallSite<Func<CallSite, object, string, object>>.Create(Binder.GetIndex(CSharpBinderFlags.None, typeof(ScriptOps), new CSharpArgumentInfo[]
                        {
                            CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.None, null),
                            CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.UseCompileTimeType | CSharpArgumentInfoFlags.Constant, null)
                        }));
                    }
                    Func<CallSite, object, string, object> target6 = ScriptOps.c0002b5.f0001b3.Target;
                    CallSite f0001b4 = ScriptOps.c0002b5.f0001b3;
                    if (ScriptOps.c0002b5.f0001b2 == null)
                    {
                        ScriptOps.c0002b5.f0001b2 = CallSite<Func<CallSite, object, string, object>>.Create(Binder.GetIndex(CSharpBinderFlags.None, typeof(ScriptOps), new CSharpArgumentInfo[]
                        {
                            CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.None, null),
                            CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.UseCompileTimeType | CSharpArgumentInfoFlags.Constant, null)
                        }));
                    }
                    target5(f0001b3, target6(f0001b4, ScriptOps.c0002b5.f0001b2.Target(ScriptOps.c0002b5.f0001b2, obj, "DCA1000Config"), "captureConfig"), "sequenceNumberEnable", PktSeqEnaDisable);
                    if (ScriptOps.c0002b5.f0001b6 == null)
                    {
                        ScriptOps.c0002b5.f0001b6 = CallSite<Func<CallSite, object, string>>.Create(Binder.Convert(CSharpBinderFlags.None, typeof(string), typeof(ScriptOps)));
                    }
                    Func<CallSite, object, string> target7 = ScriptOps.c0002b5.f0001b6.Target;
                    CallSite f0001b5 = ScriptOps.c0002b5.f0001b6;
                    if (ScriptOps.c0002b5.f0001b5 == null)
                    {
                        ScriptOps.c0002b5.f0001b5 = CallSite<Func<CallSite, Type, object, Newtonsoft.Json.Formatting, object>>.Create(Binder.InvokeMember(CSharpBinderFlags.None, "SerializeObject", null, typeof(ScriptOps), new CSharpArgumentInfo[]
                        {
                            CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.UseCompileTimeType | CSharpArgumentInfoFlags.IsStaticType, null),
                            CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.None, null),
                            CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.UseCompileTimeType | CSharpArgumentInfoFlags.Constant, null)
                        }));
                    }
                    string contents = target7(f0001b5, ScriptOps.c0002b5.f0001b5.Target(ScriptOps.c0002b5.f0001b5, typeof(JsonConvert), obj, Newtonsoft.Json.Formatting.Indented));
                    File.WriteAllText(path, contents);
                    string text5 = "start_record";
                    string arguments = string.Concat(new string[]
                    {
                        "/C start /b ",
                        text3,
                        " ",
                        text5,
                        " ",
                        text2
                    });
                    GlobalRef.g_processLua = Process.Start(new ProcessStartInfo
                    {
                        FileName = "CMD.EXE",
                        WorkingDirectory = text,
                        Arguments = arguments,
                        UseShellExecute = false,
                        RedirectStandardOutput = true,
                        RedirectStandardError = true,
                        RedirectStandardInput = true,
                        CreateNoWindow = true
                    });
                    string full_command2 = string.Format("Sending {0} command to DCA1000", text5);
                    m_GuiManager.RecordLog(0, full_command2);
                    string text6 = "";
                    if (GlobalRef.g_processLua != null && !GlobalRef.g_processLua.HasExited)
                    {
                        GlobalRef.g_processLua.WaitForExit();
                        text6 = GlobalRef.g_processLua.StandardOutput.ReadToEnd();
                        m_GuiManager.RecordLog(0, text6);
                    }
                    if (text6 == "\r\nStart Record command : Success\r\n\r\nRecord is completed\r\n\r\nRecord stop is done successfully\r\n")
                    {
                        m_GuiManager.MainTsForm.ChirpConfigTab.DisableAndEnableTheStartCaptureButtonTillStopCaptureFinish(false);
                        m_GuiManager.MainTsForm.ChirpConfigTab.DisableAndEnableTriggerAndPostProcButton(false);
                    }
                    else
                    {
                        m_GuiManager.MainTsForm.ChirpConfigTab.DisableAndEnableTriggerAndPostProcButton(true);
                    }
                }
            }
            else
            {
                string full_command3 = string.Format("Only single chip is supported with DCA1000!", new object[0]);
                m_GuiManager.RecordLog(2, full_command3);
            }
            CopyMatlabLogFileForDCA1000ForAnalysis(ADCFileName);
            Thread.Sleep(100);
            return result;
        }

        public int CopyMatlabLogFileForDCA1000ForAnalysis(string logFileName)
        {
            string empty = string.Empty;
            string directoryName = Path.GetDirectoryName(Application.StartupPath);
            string text = string.Concat(new string[]
            {
                directoryName + "\\PostProc\\LogFile.txt"
            });
            string text2 = ".bin";
            string destFileName = logFileName.Remove(logFileName.IndexOf(text2), text2.Length) + "_LogFile.txt";
            if (File.Exists(text))
            {
                File.Copy(text, destFileName, true);
            }
            return 0;
        }

        public int UpdateNResetRFDataCaptureCardFPGAConfigData(uint RadarDeviceId)
        {
            int num = 0;
            GlobalRef.g_RadarDeviceId = RadarDeviceId;
            return num + iSetResetFPGADeviceConfig_Gui(true, false);
        }

        public int UpdateNResetRFDataCaptureCardFPGAConfigData_WithoutSPI(uint RadarDeviceId)
        {
            int num = 0;
            GlobalRef.g_RadarDeviceId = RadarDeviceId;
            return num + iSetResetFPGADeviceConfig_Gui_WithoutSPI(true, false);
        }

        public int UpdateNDataPacketDelayConfigData(uint RadarDeviceId, ushort packetDelay)
        {
            int num = 0;
            GlobalRef.g_RadarDeviceId = RadarDeviceId;
            m_RecordDataPacketDelayConfigParams.packetDelay = packetDelay;
            ScriptOps.m_MainForm.m_RFDataCaptureCard.UpdatePacketDelayConfigDataFrmCmdSrc();
            return num + iSetPacketDelayConfig_Gui(true, false);
        }

        public int UpdateNDataPacketDelayConfigData_WithoutSPI(uint RadarDeviceId, ushort packetDelay)
        {
            int num = 0;
            GlobalRef.g_RadarDeviceId = RadarDeviceId;
            m_RecordDataPacketDelayConfigParams.packetDelay = packetDelay;
            ScriptOps.m_MainForm.m_RFDataCaptureCard.UpdatePacketDelayConfigDataFrmCmdSrc();
            return num + iSetPacketDelayConfig_Gui_WithoutSPI(true, false);
        }

        public int UpdateNCaptureCardDisconnect(uint RadarDeviceId)
        {
            GlobalRef.g_RadarDeviceId = RadarDeviceId;
            int num;
            if (GlobalRef.g_NtvRS232Connect[(int)GlobalRef.g_RadarDeviceIndex] && GlobalRef.g_CasCadeDeviceSpiConnect == 0U)
            {
                num = m_TsWrapper.Calling_WriteAddr_Single(4294959848U, 1U);
                if (m_GuiManager.DllOps.itempDisconnect(false) == 0)
                {
                    string full_command = string.Format("Debug Port Disconnected", new object[0]);
                    m_GuiManager.RecordLog(0, full_command);
                    if (!GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
                    {
                        iRs232ConnectDisconnect_impl();
                    }
                }
            }
            if (m_RadarDeviceModeConfigParams.NumberOfRadarDevicesDetected <= 1)
            {
                string full_command2 = string.Format("ar1.CaptureCard_DisConnect()", new object[0]);
                m_GuiManager.RecordLog(6, full_command2);
            }
            else
            {
                string full_command3 = string.Format("ar1.CaptureCard_DisConnect_mult({0})", new object[]
                {
                    GlobalRef.g_RadarDeviceId
                });
                m_GuiManager.RecordLog(6, full_command3);
            }
            num = Imports.DisconnectRFDCCard();
            if ((num == 0 && ((GlobalRef.g_CasCadeDeviceSpiConnect & 1U) == 1U || (GlobalRef.g_CasCadeDeviceSpiConnect & 2U) == 2U || (GlobalRef.g_CasCadeDeviceSpiConnect & 4U) == 4U || (GlobalRef.g_CasCadeDeviceSpiConnect & 8U) == 8U)) || GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
            {
                string full_command4 = string.Format("Status: Passed", new object[0]);
                m_GuiManager.RecordLog(6, full_command4);
            }
            else
            {
                string full_command5 = string.Format("Status: Failed, Error Type: {0}", new object[]
                {
                    GetRFCaptureCardViaEthernetErrorType(num)
                });
                m_GuiManager.RecordLog(6, full_command5);
            }
            if (GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex] && iRs232ConnectDisconnect_impl() == 0 && !GlobalRef.g_NtvRS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
            {
                m_GuiManager.DllOps.iConnect(1U, 0U);
                string full_command6 = string.Format("Debug Port Reconnected!", new object[0]);
                m_GuiManager.RecordLog(9, full_command6);
                ScriptOps.KeepTrying(2000, new Func<bool>(spare_read));
            }
            return num;
        }

        public int UpdateNCaptureCardDisconnect_WithoutSPI(uint RadarDeviceId)
        {
            GlobalRef.g_RadarDeviceId = RadarDeviceId;
            if (m_RadarDeviceModeConfigParams.NumberOfRadarDevicesDetected <= 1)
            {
                string full_command = string.Format("ar1.CaptureCard_DisConnect_WithoutSPI()", new object[0]);
                m_GuiManager.RecordLog(6, full_command);
            }
            else
            {
                string full_command2 = string.Format("ar1.CaptureCard_DisConnect_mult_WithoutSPI({0})", new object[]
                {
                    GlobalRef.g_RadarDeviceId
                });
                m_GuiManager.RecordLog(6, full_command2);
            }
            int num = Imports.DisconnectRFDCCard();
            if (num == 0)
            {
                string full_command3 = string.Format("Status: Passed", new object[0]);
                m_GuiManager.RecordLog(6, full_command3);
            }
            else
            {
                string full_command4 = string.Format("Status: Failed, Error Type: {0}", new object[]
                {
                    GetRFCaptureCardViaEthernetErrorType(num)
                });
                m_GuiManager.RecordLog(6, full_command4);
            }
            return num;
        }

        public int UpdateNSetCalibMonConfigData(uint RadarDeviceId, uint CalibMonId)
        {
            int num = 0;
            GlobalRef.g_RadarDeviceId = RadarDeviceId;
            ScriptOps.m_MainForm.RFStatusTab.UpdateAndSetRFCalibMonConfigDataFrmCmd(CalibMonId);
            ScriptOps.m_MainForm.RFStatusTab.UpdateRFCalibMonConfigData();
            m_RFCalibMonConfigParams.CalibMonId = CalibMonId;
            ScriptOps.m_MainForm.RFStatusTab.UpdateRFCalibMonConfigDataFrmCmd();
            return num + iSetRFCalibMonConfig_Gui(true, false);
        }

        public int UpdateNSetRFStatusConfigData(uint p0, byte p1, byte p2, byte RFGPADCNumOfSkipSamplesMant, byte RFGPADCNumOfSkipSamplesExp)
        {
            int num = 0;
            ScriptOps.m_MainForm.RFStatusTab.UpdateRFStatusConfigData();
            m_RFStatusConfigParams.f000001 = p0;
            m_RFStatusConfigParams.f000002 = p1;
            m_RFStatusConfigParams.f000003 = p2;
            m_RFStatusConfigParams.GPADCNumOfSkipClocksMant = RFGPADCNumOfSkipSamplesMant;
            m_RFStatusConfigParams.GPADCNumOfSkipClocksExp = RFGPADCNumOfSkipSamplesExp;
            ScriptOps.m_MainForm.RFStatusTab.UpdateRFStatusConfigDataFrmCmd();
            return num + iSetRFStatusConfig_Gui(true, false);
        }

        public int UpdateNSetRFStatusConfigData_Cmd(uint RadarDeviceId, uint p1, byte p2, byte p3, byte RFGPADCNumOfSkipSamplesMant, byte RFGPADCNumOfSkipSamplesExp)
        {
            int result = 0;
            GlobalRef.g_RadarDeviceId = RadarDeviceId;
            ScriptOps.m_MainForm.RFStatusTab.UpdateRFStatusConfigData();
            m_RFStatusConfigParams.f000001 = p1;
            m_RFStatusConfigParams.f000002 = p2;
            m_RFStatusConfigParams.f000003 = p3;
            m_RFStatusConfigParams.GPADCNumOfSkipClocksMant = RFGPADCNumOfSkipSamplesMant;
            m_RFStatusConfigParams.GPADCNumOfSkipClocksExp = RFGPADCNumOfSkipSamplesExp;
            ScriptOps.m_MainForm.RFStatusTab.UpdateRFStatusConfigDataFrmCmd();
            return result;
        }

        public int iSetRFStatusConfig_Cmd(out double ADCMaxValue, out double ADCMinValue, out double ADCAvgValue)
        {
            ADCMaxValue = 0.0;
            ADCMinValue = 0.0;
            ADCAvgValue = 0.0;
            ScriptOps.m_MainForm.RFStatusTab.UpdateRFStatusConfigData();
            iDisableTabButtons();
            ScriptOps.m_MainForm.SetOvBtEnblTimer(true);
            int result = iBSSCharData_Update(out ADCMaxValue, out ADCMinValue, out ADCAvgValue);
            iEnableTabButtons();
            ScriptOps.m_MainForm.SetOvBtEnblTimer(false);
            return result;
        }

        public int m00009a(double iVoltage)
        {
            int num = -1;
            uint num2 = 1U;
            string text = Convert.ToString(iVoltage);
            if (iVoltage < 0.5 || iVoltage > 3.36)
            {
                MessageBox.Show("PMIC Buck Channel voltage range must lies between 0.5V to 3.36V !", "Error", MessageBoxButtons.OK, MessageBoxIcon.Hand);
                return num;
            }
            ScriptOps.m_MainForm.PMICTab.m000050(text);
            if (GlobalRef.g_I2COpenCloseHandler == 0U)
            {
                num = Imports.RadarLinkImpl_OpenI2cIrqIf(num2);
            }
            ushort slaveAddress = 96;
            ushort regAddress = 10;
            byte msbData = ScriptOps.m_MainForm.PMICTab.SetPMICBuckVoltageCodeFromValue(text);
            byte lsbData = 0;
            int datasize = 1;
            num = Imports.RadarLinkImpl_I2CWrite(num2, (char)slaveAddress, (char)regAddress, msbData, lsbData, datasize);
            if (m_RadarDeviceModeConfigParams.NumberOfRadarDevicesDetected <= 1)
            {
                string full_command = string.Format("ar1.SetPMICBuck0({0})", new object[]
                {
                    iVoltage
                });
                m_GuiManager.RecordLog(15, full_command);
            }
            else
            {
                string full_command2 = string.Format("ar1.SetPMICBuck0_mult({0},{1})", new object[]
                {
                    num2,
                    iVoltage
                });
                m_GuiManager.RecordLog(15, full_command2);
            }
            if (num == 0)
            {
                string full_command3 = string.Format("Status: Passed", new object[0]);
                m_GuiManager.RecordLog(8, full_command3);
            }
            else
            {
                string msg = string.Format("Status: Failed, Error Type: {0}", new object[]
                {
                    GetErrorType(num)
                });
                GlobalRef.LuaWrapper.PrintError(msg);
            }
            if (GlobalRef.g_I2COpenCloseHandler == 0U)
            {
                num = Imports.RadarLinkImpl_CloseI2cIrqIf(num2);
            }
            return num;
        }

        public int m00009b(double iVoltage)
        {
            int num = -1;
            uint num2 = 1U;
            string text = Convert.ToString(iVoltage);
            if (iVoltage < 0.5 || iVoltage > 3.36)
            {
                MessageBox.Show("PMIC Buck Channel voltage range must lies between 0.5V to 3.36V !", "Error", MessageBoxButtons.OK, MessageBoxIcon.Hand);
                return num;
            }
            ScriptOps.m_MainForm.PMICTab.m000051(text);
            if (GlobalRef.g_I2COpenCloseHandler == 0U)
            {
                num = Imports.RadarLinkImpl_OpenI2cIrqIf(num2);
            }
            ushort slaveAddress = 96;
            ushort regAddress = 12;
            byte msbData = ScriptOps.m_MainForm.PMICTab.SetPMICBuckVoltageCodeFromValue(text);
            byte lsbData = 0;
            int datasize = 1;
            num = Imports.RadarLinkImpl_I2CWrite(num2, (char)slaveAddress, (char)regAddress, msbData, lsbData, datasize);
            if (m_RadarDeviceModeConfigParams.NumberOfRadarDevicesDetected <= 1)
            {
                string full_command = string.Format("ar1.SetPMICBuck1({0})", new object[]
                {
                    iVoltage
                });
                m_GuiManager.RecordLog(15, full_command);
            }
            else
            {
                string full_command2 = string.Format("ar1.SetPMICBuck1_mult({0},{1})", new object[]
                {
                    num2,
                    iVoltage
                });
                m_GuiManager.RecordLog(15, full_command2);
            }
            if (num == 0)
            {
                string full_command3 = string.Format("Status: Passed", new object[0]);
                m_GuiManager.RecordLog(8, full_command3);
            }
            else
            {
                string msg = string.Format("Status: Failed, Error Type: {0}", new object[]
                {
                    GetErrorType(num)
                });
                GlobalRef.LuaWrapper.PrintError(msg);
            }
            if (GlobalRef.g_I2COpenCloseHandler == 0U)
            {
                num = Imports.RadarLinkImpl_CloseI2cIrqIf(num2);
            }
            return num;
        }

        public int m00009c(double iVoltage)
        {
            int num = -1;
            uint num2 = 1U;
            string text = Convert.ToString(iVoltage);
            if (iVoltage < 0.5 || iVoltage > 3.36)
            {
                MessageBox.Show("PMIC Buck Channel voltage range must lies between 0.5V to 3.36V !", "Error", MessageBoxButtons.OK, MessageBoxIcon.Hand);
                return num;
            }
            ScriptOps.m_MainForm.PMICTab.m000052(text);
            if (GlobalRef.g_I2COpenCloseHandler == 0U)
            {
                num = Imports.RadarLinkImpl_OpenI2cIrqIf(num2);
            }
            ushort slaveAddress = 96;
            ushort regAddress = 14;
            byte msbData = ScriptOps.m_MainForm.PMICTab.SetPMICBuckVoltageCodeFromValue(text);
            byte lsbData = 0;
            int datasize = 1;
            num = Imports.RadarLinkImpl_I2CWrite(num2, (char)slaveAddress, (char)regAddress, msbData, lsbData, datasize);
            if (m_RadarDeviceModeConfigParams.NumberOfRadarDevicesDetected <= 1)
            {
                string full_command = string.Format("ar1.SetPMICBuck2({0})", new object[]
                {
                    iVoltage
                });
                m_GuiManager.RecordLog(15, full_command);
            }
            else
            {
                string full_command2 = string.Format("ar1.SetPMICBuck2_mult({0},{1})", new object[]
                {
                    num2,
                    iVoltage
                });
                m_GuiManager.RecordLog(15, full_command2);
            }
            if (num == 0)
            {
                string full_command3 = string.Format("Status: Passed", new object[0]);
                m_GuiManager.RecordLog(8, full_command3);
            }
            else
            {
                string msg = string.Format("Status: Failed, Error Type: {0}", new object[]
                {
                    GetErrorType(num)
                });
                GlobalRef.LuaWrapper.PrintError(msg);
            }
            if (GlobalRef.g_I2COpenCloseHandler == 0U)
            {
                num = Imports.RadarLinkImpl_CloseI2cIrqIf(num2);
            }
            return num;
        }

        public int m00009d(double iVoltage)
        {
            int num = -1;
            uint num2 = 1U;
            string text = Convert.ToString(iVoltage);
            if (iVoltage < 0.5 || iVoltage > 3.36)
            {
                MessageBox.Show("PMIC Buck Channel voltage range must lies between 0.5V to 3.36V !", "Error", MessageBoxButtons.OK, MessageBoxIcon.Hand);
                return num;
            }
            ScriptOps.m_MainForm.PMICTab.m000053(text);
            if (GlobalRef.g_I2COpenCloseHandler == 0U)
            {
                num = Imports.RadarLinkImpl_OpenI2cIrqIf(num2);
            }
            ushort slaveAddress = 96;
            ushort regAddress = 16;
            byte msbData = ScriptOps.m_MainForm.PMICTab.SetPMICBuckVoltageCodeFromValue(text);
            byte lsbData = 0;
            int datasize = 1;
            num = Imports.RadarLinkImpl_I2CWrite(num2, (char)slaveAddress, (char)regAddress, msbData, lsbData, datasize);
            if (m_RadarDeviceModeConfigParams.NumberOfRadarDevicesDetected <= 1)
            {
                string full_command = string.Format("ar1.SetPMICBuck3({0})", new object[]
                {
                    iVoltage
                });
                m_GuiManager.RecordLog(15, full_command);
            }
            else
            {
                string full_command2 = string.Format("ar1.SetPMICBuck3_mult({0},{1})", new object[]
                {
                    num2,
                    iVoltage
                });
                m_GuiManager.RecordLog(15, full_command2);
            }
            if (num == 0)
            {
                string full_command3 = string.Format("Status: Passed", new object[0]);
                m_GuiManager.RecordLog(8, full_command3);
            }
            else
            {
                string msg = string.Format("Status: Failed, Error Type: {0}", new object[]
                {
                    GetErrorType(num)
                });
                GlobalRef.LuaWrapper.PrintError(msg);
            }
            if (GlobalRef.g_I2COpenCloseHandler == 0U)
            {
                num = Imports.RadarLinkImpl_CloseI2cIrqIf(num2);
            }
            return num;
        }

        public int m00009e(out string oVoltage)
        {
            uint num = 1U;
            oVoltage = string.Empty;
            Convert.ToString(oVoltage);
            byte[] array = new byte[4];
            IntPtr msbData = GCHandle.Alloc(array, GCHandleType.Pinned).AddrOfPinnedObject();
            IntPtr lsbData = GCHandle.Alloc(new byte[4], GCHandleType.Pinned).AddrOfPinnedObject();
            int num2;
            if (GlobalRef.g_I2COpenCloseHandler == 0U)
            {
                num2 = Imports.RadarLinkImpl_OpenI2cIrqIf(num);
            }
            num2 = Imports.RadarLinkImpl_I2CRead(num, '`', '\n', msbData, lsbData, 1);
            Convert.ToString(array[0]);
            oVoltage = Convert.ToString(ScriptOps.m_MainForm.PMICTab.GetPMICBuckVoltageValueFromCode(array[0]));
            ScriptOps.m_MainForm.PMICTab.m00004c(oVoltage);
            if (m_RadarDeviceModeConfigParams.NumberOfRadarDevicesDetected <= 1)
            {
                string full_command = string.Format("ar1.GetPMICBuck0()", new object[0]);
                m_GuiManager.RecordLog(15, full_command);
            }
            else
            {
                string full_command2 = string.Format("ar1.GetPMICBuck0_mult({0})", new object[]
                {
                    num
                });
                m_GuiManager.RecordLog(15, full_command2);
            }
            string full_command3 = string.Format("PMIC Buck0 configured voltage is: {0} V", new object[]
            {
                oVoltage
            });
            m_GuiManager.RecordLog(15, full_command3);
            if (num2 == 0)
            {
                string full_command4 = string.Format("Status: Passed", new object[0]);
                m_GuiManager.RecordLog(8, full_command4);
            }
            else
            {
                string msg = string.Format("Status: Failed, Error Type: {0}", new object[]
                {
                    GetErrorType(num2)
                });
                GlobalRef.LuaWrapper.PrintError(msg);
            }
            if (GlobalRef.g_I2COpenCloseHandler == 0U)
            {
                num2 = Imports.RadarLinkImpl_CloseI2cIrqIf(num);
            }
            return num2;
        }

        public int m00009f(out string oVoltage)
        {
            uint num = 1U;
            oVoltage = string.Empty;
            Convert.ToString(oVoltage);
            iDisableTabButtons();
            ScriptOps.m_MainForm.SetOvBtEnblTimer(true);
            Thread.Sleep(200);
            byte[] array = new byte[4];
            IntPtr msbData = GCHandle.Alloc(array, GCHandleType.Pinned).AddrOfPinnedObject();
            IntPtr lsbData = GCHandle.Alloc(new byte[4], GCHandleType.Pinned).AddrOfPinnedObject();
            int num2;
            if (GlobalRef.g_I2COpenCloseHandler == 0U)
            {
                num2 = Imports.RadarLinkImpl_OpenI2cIrqIf(num);
            }
            num2 = Imports.RadarLinkImpl_I2CRead(num, '`', '\f', msbData, lsbData, 1);
            Convert.ToString(array[0]);
            oVoltage = Convert.ToString(ScriptOps.m_MainForm.PMICTab.GetPMICBuckVoltageValueFromCode(array[0]));
            ScriptOps.m_MainForm.PMICTab.m00004d(oVoltage);
            if (m_RadarDeviceModeConfigParams.NumberOfRadarDevicesDetected <= 1)
            {
                string full_command = string.Format("ar1.GetPMICBuck1()", new object[0]);
                m_GuiManager.RecordLog(15, full_command);
            }
            else
            {
                string full_command2 = string.Format("ar1.GetPMICBuck1_mult({0})", new object[]
                {
                    num
                });
                m_GuiManager.RecordLog(15, full_command2);
            }
            string full_command3 = string.Format("PMIC Buck1 configured voltage is: {0} V", new object[]
            {
                oVoltage
            });
            m_GuiManager.RecordLog(15, full_command3);
            if (num2 == 0)
            {
                string full_command4 = string.Format("Status: Passed", new object[0]);
                m_GuiManager.RecordLog(8, full_command4);
            }
            else
            {
                string msg = string.Format("Status: Failed, Error Type: {0}", new object[]
                {
                    GetErrorType(num2)
                });
                GlobalRef.LuaWrapper.PrintError(msg);
            }
            if (GlobalRef.g_I2COpenCloseHandler == 0U)
            {
                num2 = Imports.RadarLinkImpl_CloseI2cIrqIf(num);
            }
            return num2;
        }

        public int m0000a0(out string oVoltage)
        {
            uint num = 1U;
            oVoltage = string.Empty;
            Convert.ToString(oVoltage);
            iDisableTabButtons();
            ScriptOps.m_MainForm.SetOvBtEnblTimer(true);
            Thread.Sleep(200);
            byte[] array = new byte[4];
            IntPtr msbData = GCHandle.Alloc(array, GCHandleType.Pinned).AddrOfPinnedObject();
            IntPtr lsbData = GCHandle.Alloc(new byte[4], GCHandleType.Pinned).AddrOfPinnedObject();
            int num2;
            if (GlobalRef.g_I2COpenCloseHandler == 0U)
            {
                num2 = Imports.RadarLinkImpl_OpenI2cIrqIf(num);
            }
            num2 = Imports.RadarLinkImpl_I2CRead(num, '`', '\u000e', msbData, lsbData, 1);
            Convert.ToString(array[0]);
            oVoltage = Convert.ToString(ScriptOps.m_MainForm.PMICTab.GetPMICBuckVoltageValueFromCode(array[0]));
            ScriptOps.m_MainForm.PMICTab.m00004e(oVoltage);
            if (m_RadarDeviceModeConfigParams.NumberOfRadarDevicesDetected <= 1)
            {
                string full_command = string.Format("ar1.GetPMICBuck2()", new object[0]);
                m_GuiManager.RecordLog(15, full_command);
            }
            else
            {
                string full_command2 = string.Format("ar1.GetPMICBuck2_mult({0})", new object[]
                {
                    num
                });
                m_GuiManager.RecordLog(15, full_command2);
            }
            string full_command3 = string.Format("PMIC Buck2 configured voltage is: {0} V", new object[]
            {
                oVoltage
            });
            m_GuiManager.RecordLog(15, full_command3);
            if (num2 == 0)
            {
                string full_command4 = string.Format("Status: Passed", new object[0]);
                m_GuiManager.RecordLog(8, full_command4);
            }
            else
            {
                string msg = string.Format("Status: Failed, Error Type: {0}", new object[]
                {
                    GetErrorType(num2)
                });
                GlobalRef.LuaWrapper.PrintError(msg);
            }
            if (GlobalRef.g_I2COpenCloseHandler == 0U)
            {
                num2 = Imports.RadarLinkImpl_CloseI2cIrqIf(num);
            }
            iEnableTabButtons();
            ScriptOps.m_MainForm.SetOvBtEnblTimer(false);
            return num2;
        }

        public int m0000a1(out string oVoltage)
        {
            uint num = 1U;
            oVoltage = string.Empty;
            Convert.ToString(oVoltage);
            byte[] array = new byte[4];
            IntPtr msbData = GCHandle.Alloc(array, GCHandleType.Pinned).AddrOfPinnedObject();
            IntPtr lsbData = GCHandle.Alloc(new byte[4], GCHandleType.Pinned).AddrOfPinnedObject();
            int num2;
            if (GlobalRef.g_I2COpenCloseHandler == 0U)
            {
                num2 = Imports.RadarLinkImpl_OpenI2cIrqIf(num);
            }
            num2 = Imports.RadarLinkImpl_I2CRead(num, '`', '\u0010', msbData, lsbData, 1);
            Convert.ToString(array[0]);
            oVoltage = Convert.ToString(ScriptOps.m_MainForm.PMICTab.GetPMICBuckVoltageValueFromCode(array[0]));
            ScriptOps.m_MainForm.PMICTab.m00004f(oVoltage);
            if (m_RadarDeviceModeConfigParams.NumberOfRadarDevicesDetected <= 1)
            {
                string full_command = string.Format("ar1.GetPMICBuck3()", new object[0]);
                m_GuiManager.RecordLog(15, full_command);
            }
            else
            {
                string full_command2 = string.Format("ar1.GetPMICBuck3_mult({0})", new object[]
                {
                    num
                });
                m_GuiManager.RecordLog(15, full_command2);
            }
            string full_command3 = string.Format("PMIC Buck3 configured voltage is: {0} V", new object[]
            {
                oVoltage
            });
            m_GuiManager.RecordLog(15, full_command3);
            if (num2 == 0)
            {
                string full_command4 = string.Format("Status: Passed", new object[0]);
                m_GuiManager.RecordLog(8, full_command4);
            }
            else
            {
                string msg = string.Format("Status: Failed, Error Type: {0}", new object[]
                {
                    GetErrorType(num2)
                });
                GlobalRef.LuaWrapper.PrintError(msg);
            }
            if (GlobalRef.g_I2COpenCloseHandler == 0U)
            {
                num2 = Imports.RadarLinkImpl_CloseI2cIrqIf(num);
            }
            return num2;
        }

        public int iGetRFDynamicetConfig_Cmd(ushort RadarDeviceId, out uint time, out short p2, out short p3, out short p4, out short p5, out short p6, out short p7, out short p8, out short p9, out short tmpDig1Sens, out short tmpDig2Sens)
        {
            GlobalRef.g_RadarDeviceId = (uint)RadarDeviceId;
            time = 0U;
            p2 = 0;
            p3 = 0;
            p4 = 0;
            p5 = 0;
            p6 = 0;
            p7 = 0;
            p8 = 0;
            p9 = 0;
            tmpDig1Sens = 0;
            tmpDig2Sens = 0;
            iDisableTabButtons();
            ScriptOps.m_MainForm.SetOvBtEnblTimer(true);
            int rfdynamicCharReportConfig_Impl = GetRFDynamicCharReportConfig_Impl(out time, out p2, out p3, out p4, out p5, out p6, out p7, out p8, out p9, out tmpDig1Sens, out tmpDig2Sens);
            iEnableTabButtons();
            ScriptOps.m_MainForm.SetOvBtEnblTimer(false);
            return rfdynamicCharReportConfig_Impl;
        }

        private int iBSSCharData_Update(out double ADCMaxValue, out double ADCMinValue, out double ADCAvgValue)
        {
            ADCMaxValue = 0.0;
            ADCMinValue = 0.0;
            ADCAvgValue = 0.0;
            IntPtr zero = IntPtr.Zero;
            new List<object>();
            f0002d6.f000001 = m_RFStatusConfigParams.f000001;
            f0002d6.f000002 = m_RFStatusConfigParams.f000002;
            f0002d6.f000003 = m_RFStatusConfigParams.f000003;
            f0002d6.GPADCNumOfSkipSamples = (byte)((int)m_RFStatusConfigParams.GPADCNumOfSkipClocksExp << 4 | (int)m_RFStatusConfigParams.GPADCNumOfSkipClocksMant);
            IntPtr inData = GCHandle.Alloc(f0002d6, GCHandleType.Pinned).AddrOfPinnedObject();
            IntPtr zero2 = IntPtr.Zero;
            GCHandle.Alloc(new byte[8], GCHandleType.Pinned).AddrOfPinnedObject();
            int num;
            if (GlobalRef.g_NtvRS232Connect[(int)GlobalRef.g_RadarDeviceIndex] && GlobalRef.g_CasCadeDeviceSpiConnect == 0U)
            {
                num = m_TsWrapper.Calling_WriteAddr_Single(4294959848U, 1U);
                if (m_GuiManager.DllOps.itempDisconnect(false) == 0)
                {
                    string full_command = string.Format("Debug Port Disconnected", new object[0]);
                    m_GuiManager.RecordLog(0, full_command);
                    if (!GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
                    {
                        iRs232ConnectDisconnect_impl();
                    }
                }
            }
            string full_command2 = string.Format("ar1.gpadcMeasurement({0}, {1}, {2}, {3},{4},{5})", new object[]
            {
                GlobalRef.g_RadarDeviceId,
                f0002d6.f000001,
                f0002d6.f000002,
                f0002d6.f000003,
                m_RFStatusConfigParams.GPADCNumOfSkipClocksMant,
                m_RFStatusConfigParams.GPADCNumOfSkipClocksExp
            });
            m_GuiManager.RecordLog(15, full_command2);
            num = Imports.RadarLinkImpl_GetGpadcData(GlobalRef.g_RadarDeviceId, inData);
            Thread.Sleep(100);
            while (ScriptOps.asyncEvent.asyncGpadc == 0U)
            {
                string full_command3 = string.Format("ar1.gpadcMeasurement({0}, {1}, {2})", new object[]
                {
                    ScriptOps.f0002db.maxMeas,
                    ScriptOps.f0002db.minMeas,
                    ScriptOps.f0002db.avgMeas
                });
                m_GuiManager.RecordLog(15, full_command3);
            }
            if (num == 0)
            {
                ushort maxMeas = ScriptOps.f0002db.maxMeas;
                ushort minMeas = ScriptOps.f0002db.minMeas;
                ushort avgMeas = ScriptOps.f0002db.avgMeas;
                ADCMaxValue = Math.Round((double)maxMeas * 1.7578125);
                ADCMinValue = Math.Round((double)minMeas * 1.7578125);
                ADCAvgValue = Math.Round((double)avgMeas * 1.7578125);
                ScriptOps.m_MainForm.RFStatusTab.SetGPADCAvgDataResponseInGui(Convert.ToString(ADCAvgValue) + " mV  (" + Convert.ToString(avgMeas) + ")");
                ScriptOps.m_MainForm.RFStatusTab.SetGPADCMaxDataResponseInGui(Convert.ToString(ADCMaxValue) + " mV  (" + Convert.ToString(maxMeas) + ")");
                ScriptOps.m_MainForm.RFStatusTab.SetGPADCMinDataResponseInGui(Convert.ToString(ADCMinValue) + " mV  (" + Convert.ToString(minMeas) + ")");
                ADCMaxValue = (double)maxMeas;
                ADCMinValue = (double)minMeas;
                ADCAvgValue = (double)avgMeas;
            }
            if ((num == 0 && ((GlobalRef.g_CasCadeDeviceSpiConnect & 1U) == 1U || (GlobalRef.g_CasCadeDeviceSpiConnect & 2U) == 2U || (GlobalRef.g_CasCadeDeviceSpiConnect & 4U) == 4U || (GlobalRef.g_CasCadeDeviceSpiConnect & 8U) == 8U)) || GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
            {
                string full_command4 = string.Format("Status: Passed", new object[0]);
                m_GuiManager.RecordLog(8, full_command4);
            }
            else
            {
                string msg = string.Format("Status: Failed, Error Type: {0}", new object[]
                {
                    GetErrorType(num)
                });
                GlobalRef.LuaWrapper.PrintError(msg);
            }
            if (GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
            {
                if (iRs232ConnectDisconnect_impl() == 0 && !GlobalRef.g_NtvRS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
                {
                    m_GuiManager.DllOps.iConnect(1U, 0U);
                    string full_command5 = string.Format("Debug Port Reconnected!", new object[0]);
                    m_GuiManager.RecordLog(9, full_command5);
                    ScriptOps.KeepTrying(2000, new Func<bool>(spare_read));
                }
            }
            else if (GlobalRef.g_CasCadeDeviceSpiConnect == 0U)
            {
                string full_command6 = string.Format("Error Occurred in Port open close", new object[0]);
                m_GuiManager.RecordLog(9, full_command6);
            }
            return num;
        }

        public int StartTsw1400Arm(string filename)
        {
            int result = 0;
            ScriptOps.m_MainForm.ChirpConfigTab.iSetMtLbPostProcPath(filename);
            ScriptOps.m_MainForm.startTsw1400Capture();
            return result;
        }

        public int StartPostProc(string filename)
        {
            int result = 0;
            ScriptOps.m_MainForm.ChirpConfigTab.iSetMtLbPostProcPath(filename);
            ScriptOps.m_MainForm.startMatlabPostProc();
            return result;
        }

        public int ReturnStrongestDetectedObject(string filename)
        {
            int result = 0;
            ScriptOps.m_MainForm.ChirpConfigTab.iSetMtLbPostProcPath(filename);
            ScriptOps.m_MainForm.ReturnStrongestDetectedObject();
            return result;
        }

        public int returnStrongestDetectedObject(string filename, out MWArray ObjectRangeAndSpeed)
        {
            int result = 0;
            ObjectRangeAndSpeed = null;
            ScriptOps.m_MainForm.ChirpConfigTab.iSetMtLbPostProcPath(filename);
            try
            {
                Path.GetDirectoryName(Application.ExecutablePath);
                if (string.IsNullOrEmpty(m_GuiManager.MainTsForm.ChirpConfigTab.iGetMtLbPostProcPath()))
                {
                    string msg = string.Format("Please select a file to save ADC data for returns Strongest Detected Object", new object[0]);
                    m_GuiManager.Log(msg);
                    return result;
                }
                string text = m_GuiManager.MainTsForm.ChirpConfigTab.iGetMtLbPostProcPath();
                string full_command = string.Format("ar1.ReturnStrongestDetectedObject(\"{0}\")", text);
                m_GuiManager.RecordLog(0, full_command);
                MWArray mwarray = MatlabPostProcGuiInstance.return_strongest_detected_object(text);
                ObjectRangeAndSpeed = mwarray;
                double[] array = (double[])((MWNumericArray)mwarray).ToVector(MWArrayComponent.Real);
                Convert.ToDecimal(array[0]);
                Convert.ToDecimal(array[1]);
            }
            catch (Exception ex)
            {
                m_GuiManager.Error(ex.Message, ex.StackTrace);
            }
            return result;
        }

        public int returnListOfDetectedObjects(string filename, out MWArray ObjectsRangeAndSpeed)
        {
            int result = 0;
            ObjectsRangeAndSpeed = null;
            ScriptOps.m_MainForm.ChirpConfigTab.iSetMtLbPostProcPath(filename);
            try
            {
                Path.GetDirectoryName(Application.ExecutablePath);
                if (string.IsNullOrEmpty(m_GuiManager.MainTsForm.ChirpConfigTab.iGetMtLbPostProcPath()))
                {
                    string msg = string.Format("Please select a file to save ADC data for returns Strongest Detected Object", new object[0]);
                    m_GuiManager.Log(msg);
                    return result;
                }
                string text = m_GuiManager.MainTsForm.ChirpConfigTab.iGetMtLbPostProcPath();
                string full_command = string.Format("ar1.ReturnListOfDetectedObjects(\"{0}\")", text);
                m_GuiManager.RecordLog(0, full_command);
                MWArray mwarray = MatlabPostProcGuiInstance.return_list_of_detected_objects(text);
                ObjectsRangeAndSpeed = mwarray;
                double[] array = (double[])((MWNumericArray)mwarray).ToVector(MWArrayComponent.Real);
                Convert.ToDecimal(array[0]);
                Convert.ToDecimal(array[1]);
            }
            catch (Exception ex)
            {
                m_GuiManager.Error(ex.Message, ex.StackTrace);
            }
            return result;
        }

        public int StartHSDCPro()
        {
            int result = 0;
            ScriptOps.m_MainForm.iStartStUpHsdcProAsync();
            return result;
        }

        public int StartRlTimePostProc(string filename)
        {
            int result = 0;
            ScriptOps.m_MainForm.ChirpConfigTab.iSetMtLbPostProcPath(filename);
            ScriptOps.m_MainForm.startMatlabRealTimeProc();
            return result;
        }

        public int UpdateFrameConfData(ushort chirpStartIdx, ushort chirpEndIdx, ushort frameCount, ushort loopCount, float periodicity, float triggerDelay, ushort triggerSelect, ushort testSourceEn)
        {
            int result = 0;
            ScriptOps.m_MainForm.ChirpConfigTab.UpdateChirpConfigData();
            m_ChirpConfigParams.fchirpStartIdx = chirpStartIdx;
            m_ChirpConfigParams.fchirpEndIdx = chirpEndIdx;
            m_ChirpConfigParams.frameCount = frameCount;
            m_ChirpConfigParams.loopCount = loopCount;
            m_ChirpConfigParams.periodicity = periodicity;
            m_ChirpConfigParams.triggerDelay = triggerDelay;
            m_ChirpConfigParams.TriggerSelect = triggerSelect;
            m_ChirpConfigParams.testSourceEnable = testSourceEn;
            ScriptOps.m_MainForm.ChirpConfigTab.UpdateFrameConfigDataFrmCmd();
            return result;
        }

        public int UpdateNSetTestSrcData(ushort RadarDeviceId, float obj1PosX, float obj1PosY, float obj1PosZ, float obj1VelX, float obj1VelY, float obj1VelZ, float obj1BMinX, float obj1BMinY, float obj1BMinZ, float obj1BMaxX, float obj1BMaxY, float obj1BMaxZ, float obj1Sig, float obj2PosX, float obj2PosY, float obj2PosZ, float obj2VelX, float obj2VelY, float obj2VelZ, float obj2BMinX, float obj2BMinY, float obj2BMinZ, float obj2BMaxX, float obj2BMaxY, float obj2BMaxZ, float obj2Sig, float obj1AntPosRx1X, float obj1AntPosRx1Z, float obj1AntPosRx2X, float obj1AntPosRx2Z, float obj1AntPosRx3X, float obj1AntPosRx3Z, float obj1AntPosRx4X, float obj1AntPosRx4Z, float obj1AntPosTx1X, float obj1AntPosTx1Z, float obj1AntPosTx2X, float obj1AntPosTx2Z, float obj1AntPosTx3X, float obj1AntPosTx3Z)
        {
            int num = 0;
            GlobalRef.g_RadarDeviceId = (uint)RadarDeviceId;
            m_TestSourceParams.obj1PosX = obj1PosX;
            m_TestSourceParams.obj1PosY = obj1PosY;
            m_TestSourceParams.obj1PosZ = obj1PosZ;
            m_TestSourceParams.obj1VelX = obj1VelX;
            m_TestSourceParams.obj1VelY = obj1VelY;
            m_TestSourceParams.obj1VelZ = obj1VelZ;
            m_TestSourceParams.obj1BMinX = obj1BMinX;
            m_TestSourceParams.obj1BMinY = obj1BMinY;
            m_TestSourceParams.obj1BMinZ = obj1BMinZ;
            m_TestSourceParams.obj1BMaxX = obj1BMaxX;
            m_TestSourceParams.obj1BMaxY = obj1BMaxY;
            m_TestSourceParams.obj1BMaxZ = obj1BMaxZ;
            m_TestSourceParams.obj1Sig = obj1Sig;
            m_TestSourceParams.obj2PosX = obj2PosX;
            m_TestSourceParams.obj2PosY = obj2PosY;
            m_TestSourceParams.obj2PosZ = obj2PosZ;
            m_TestSourceParams.obj2VelX = obj2VelX;
            m_TestSourceParams.obj2VelY = obj2VelY;
            m_TestSourceParams.obj2VelZ = obj2VelZ;
            m_TestSourceParams.obj2BMinX = obj2BMinX;
            m_TestSourceParams.obj2BMinY = obj2BMinY;
            m_TestSourceParams.obj2BMinZ = obj2BMinZ;
            m_TestSourceParams.obj2BMaxX = obj2BMaxX;
            m_TestSourceParams.obj2BMaxY = obj2BMaxY;
            m_TestSourceParams.obj2BMaxZ = obj2BMaxZ;
            m_TestSourceParams.obj2Sig = obj2Sig;
            m_TestSourceParams.obj1AntPosRx1X = obj1AntPosRx1X;
            m_TestSourceParams.obj1AntPosRx1Z = obj1AntPosRx1Z;
            m_TestSourceParams.obj1AntPosRx2X = obj1AntPosRx2X;
            m_TestSourceParams.obj1AntPosRx2Z = obj1AntPosRx2Z;
            m_TestSourceParams.obj1AntPosRx3X = obj1AntPosRx3X;
            m_TestSourceParams.obj1AntPosRx3Z = obj1AntPosRx3Z;
            m_TestSourceParams.obj1AntPosRx4X = obj1AntPosRx4X;
            m_TestSourceParams.obj1AntPosRx4Z = obj1AntPosRx4Z;
            m_TestSourceParams.obj1AntPosTx1X = obj1AntPosTx1X;
            m_TestSourceParams.obj1AntPosTx1Z = obj1AntPosTx1Z;
            m_TestSourceParams.obj1AntPosTx2X = obj1AntPosTx2X;
            m_TestSourceParams.obj1AntPosTx2Z = obj1AntPosTx2Z;
            m_TestSourceParams.obj1AntPosTx3X = obj1AntPosTx3X;
            m_TestSourceParams.obj1AntPosTx3Z = obj1AntPosTx3Z;
            ScriptOps.m_MainForm.TestSourceTab.UpdateTestSourceDataFrmCmdSrc();
            return num + iSetTestSource_Gui(true, false);
        }

        public int UpdateBPMConfigData(ushort bpmStartIndex, ushort bpmEndIndex, ushort p2, ushort p3, ushort p4, ushort p5, ushort p6, ushort p7)
        {
            int result = 0;
            ScriptOps.m_MainForm.BpmConfigTab.UpdateBpmChirpConfigData();
            m_BpmChirpConfigParams.chirpStartIdx = bpmStartIndex;
            m_BpmChirpConfigParams.chirpEndIdx = bpmEndIndex;
            m_BpmChirpConfigParams.tx0Off = p2;
            m_BpmChirpConfigParams.tx0On = p3;
            m_BpmChirpConfigParams.tx1Off = p4;
            m_BpmChirpConfigParams.tx1On = p5;
            m_BpmChirpConfigParams.tx2Off = p6;
            m_BpmChirpConfigParams.tx2On = p7;
            ScriptOps.m_MainForm.BpmConfigTab.UpdateBpmChirpConfigDataFrmCmd();
            return result;
        }

        public int UpdateContStreamConfigData(float StartFreq, ushort SampleRate, ushort RxGain, ushort HPF1CornFreq, ushort HPF2CornFreq, ushort p5, ushort p6, ushort p7, ushort PhaseShift1, ushort PhaseShift2, ushort PhaseShift3, string DumpFile, ushort NoOfSamples)
        {
            int result = 0;
            ScriptOps.m_MainForm.ContStreamingTab.UpdateContStrData();
            ScriptOps.m_MainForm.ContStreamingTab.UpdateMtLbContStrData();
            m_ContStreamParams.startFreqConst = (double)StartFreq;
            m_ContStreamParams.digOutSampleRate = SampleRate;
            m_ContStreamParams.rxGain = (char)RxGain;
            m_ContStreamParams.hpfCornerFreq1 = (char)HPF1CornFreq;
            m_ContStreamParams.hpfCornerFreq2 = (char)HPF2CornFreq;
            m_ContStreamParams.tx1OutPowerBackoffCode = (uint)p5;
            m_ContStreamParams.tx2OutPowerBackoffCode = (uint)p6;
            m_ContStreamParams.tx3OutPowerBackoffCode = (uint)p7;
            m_ContStreamParams.tx1PhaseShifter = (double)PhaseShift1;
            m_ContStreamParams.tx2PhaseShifter = (double)PhaseShift2;
            m_ContStreamParams.tx3PhaseShifter = (double)PhaseShift3;
            m_ContStreamParams.noOfAdcSamples = (int)NoOfSamples;
            m_ContStreamParams.mtlbAdcPath = DumpFile;
            ScriptOps.m_MainForm.ContStreamingTab.UpdateContStrConfigData();
            return result;
        }

        public int UpdateTestSrcData(float obj1PosX, float obj1PosY, float obj1PosZ, float obj1VelX, float obj1VelY, float obj1VelZ, float obj1BMinX, float obj1BMinY, float obj1BMinZ, float obj1BMaxX, float obj1BMaxY, float obj1BMaxZ, float obj1Sig, float obj2PosX, float obj2PosY, float obj2PosZ, float obj2VelX, float obj2VelY, float obj2VelZ, float obj2BMinX, float obj2BMinY, float obj2BMinZ, float obj2BMaxX, float obj2BMaxY, float obj2BMaxZ, float obj2Sig, float obj1AntPosRx1X, float obj1AntPosRx1Z, float obj1AntPosRx2X, float obj1AntPosRx2Z, float obj1AntPosRx3X, float obj1AntPosRx3Z, float obj1AntPosRx4X, float obj1AntPosRx4Z, float obj1AntPosTx1X, float obj1AntPosTx1Z, float obj1AntPosTx2X, float obj1AntPosTx2Z, float obj1AntPosTx3X, float obj1AntPosTx3Z)
        {
            int result = 0;
            ScriptOps.m_MainForm.TestSourceTab.UpdateTestSourceData();
            m_TestSourceParams.obj1PosX = obj1PosX;
            m_TestSourceParams.obj1PosY = obj1PosY;
            m_TestSourceParams.obj1PosZ = obj1PosZ;
            m_TestSourceParams.obj1VelX = obj1VelX;
            m_TestSourceParams.obj1VelY = obj1VelY;
            m_TestSourceParams.obj1VelZ = obj1VelZ;
            m_TestSourceParams.obj1BMinX = obj1BMinX;
            m_TestSourceParams.obj1BMinY = obj1BMinY;
            m_TestSourceParams.obj1BMinZ = obj1BMinZ;
            m_TestSourceParams.obj1BMaxX = obj1BMaxX;
            m_TestSourceParams.obj1BMaxY = obj1BMaxY;
            m_TestSourceParams.obj1BMaxZ = obj1BMaxZ;
            m_TestSourceParams.obj1Sig = obj1Sig;
            m_TestSourceParams.obj2PosX = obj2PosX;
            m_TestSourceParams.obj2PosY = obj2PosY;
            m_TestSourceParams.obj2PosZ = obj2PosZ;
            m_TestSourceParams.obj2VelX = obj2VelX;
            m_TestSourceParams.obj2VelY = obj2VelY;
            m_TestSourceParams.obj2VelZ = obj2VelZ;
            m_TestSourceParams.obj2BMinX = obj2BMinX;
            m_TestSourceParams.obj2BMinY = obj2BMinY;
            m_TestSourceParams.obj2BMinZ = obj2BMinZ;
            m_TestSourceParams.obj2BMaxX = obj2BMaxX;
            m_TestSourceParams.obj2BMaxY = obj2BMaxY;
            m_TestSourceParams.obj2BMaxZ = obj2BMaxZ;
            m_TestSourceParams.obj2Sig = obj2Sig;
            m_TestSourceParams.obj1AntPosRx1X = obj1AntPosRx1X;
            m_TestSourceParams.obj1AntPosRx1Z = obj1AntPosRx1Z;
            m_TestSourceParams.obj1AntPosRx2X = obj1AntPosRx2X;
            m_TestSourceParams.obj1AntPosRx2Z = obj1AntPosRx2Z;
            m_TestSourceParams.obj1AntPosRx3X = obj1AntPosRx3X;
            m_TestSourceParams.obj1AntPosRx3Z = obj1AntPosRx3Z;
            m_TestSourceParams.obj1AntPosRx4X = obj1AntPosRx4X;
            m_TestSourceParams.obj1AntPosRx4Z = obj1AntPosRx4Z;
            m_TestSourceParams.obj1AntPosTx1X = obj1AntPosTx1X;
            m_TestSourceParams.obj1AntPosTx1Z = obj1AntPosTx1Z;
            m_TestSourceParams.obj1AntPosTx2X = obj1AntPosTx2X;
            m_TestSourceParams.obj1AntPosTx2Z = obj1AntPosTx2Z;
            m_TestSourceParams.obj1AntPosTx3X = obj1AntPosTx3X;
            m_TestSourceParams.obj1AntPosTx3Z = obj1AntPosTx3Z;
            ScriptOps.m_MainForm.TestSourceTab.UpdateTestSourceDataFrmCmdSrc();
            return result;
        }

        public int iSetLpModConfig_Gui(bool is_starting_op, bool is_ending_op)
        {
            int num = 0;
            ScriptOps.m_MainForm.StaticConfigTab.UpdateLpModConfData();
            iDisableTabButtons();
            ScriptOps.m_MainForm.SetOvBtEnblTimer(true);
            int result = num + iSetLpModConfig_Impl(is_starting_op, is_ending_op);
            iEnableTabButtons();
            ScriptOps.m_MainForm.SetOvBtEnblTimer(false);
            return result;
        }

        public int iSetRFLDOBypassEnableAndDisableConfig_Gui(bool is_starting_op, bool is_ending_op)
        {
            int num = 0;
            ScriptOps.m_MainForm.StaticConfigTab.UpdateRFLDOBypassConfData();
            iDisableTabButtons();
            ScriptOps.m_MainForm.SetOvBtEnblTimer(true);
            int result = num + iSetRFLDOBypassEnableDisableConfig_Impl(is_starting_op, is_ending_op);
            iEnableTabButtons();
            ScriptOps.m_MainForm.SetOvBtEnblTimer(false);
            return result;
        }

        public int iSetDataPathConfig_Gui(bool is_starting_op, bool is_ending_op)
        {
            ScriptOps.m_MainForm.DataConfigTab.UpdateDataConfigData();
            iDisableTabButtons();
            ScriptOps.m_MainForm.SetOvBtEnblTimer(true);
            int result = iSetDataPathConfig_Impl(is_starting_op, is_ending_op);
            iEnableTabButtons();
            ScriptOps.m_MainForm.SetOvBtEnblTimer(false);
            return result;
        }

        public int iSetLvdsClkConfig_Gui(bool is_starting_op, bool is_ending_op)
        {
            int num = 0;
            ScriptOps.m_MainForm.DataConfigTab.UpdateDataConfigData();
            iDisableTabButtons();
            ScriptOps.m_MainForm.SetOvBtEnblTimer(true);
            int result = num + iSetLvdsClkConfig_Impl(is_starting_op, is_ending_op);
            iEnableTabButtons();
            ScriptOps.m_MainForm.SetOvBtEnblTimer(false);
            return result;
        }

        public int iSetTestPatternGeneratingConfig_Gui(bool is_starting_op, bool is_ending_op)
        {
            ScriptOps.m_MainForm.DataConfigTab.UpdateTestPatternGeneratingConfigData();
            iDisableTabButtons();
            ScriptOps.m_MainForm.SetOvBtEnblTimer(true);
            int result = iSetTestPatternGeneratingConfig_Impl(is_starting_op, is_ending_op);
            iEnableTabButtons();
            ScriptOps.m_MainForm.SetOvBtEnblTimer(false);
            return result;
        }

        public int iSetLvdsLaneConfig_Gui(bool is_starting_op, bool is_ending_op)
        {
            ScriptOps.m_MainForm.DataConfigTab.UpdateDataConfigData();
            iDisableTabButtons();
            ScriptOps.m_MainForm.SetOvBtEnblTimer(true);
            int result = iSetLvdsLaneConfig_Impl(is_starting_op, is_ending_op);
            iEnableTabButtons();
            ScriptOps.m_MainForm.SetOvBtEnblTimer(false);
            return result;
        }

        public int iSetMSSGetDataBlockConfig_Gui(bool is_starting_op, bool is_ending_op)
        {
            int num = 0;
            ScriptOps.m_MainForm.m_RegOpeTab.UpdateMSSGetContiguousBlockConfigData();
            iDisableTabButtons();
            ScriptOps.m_MainForm.SetOvBtEnblTimer(true);
            int result = num + iSetMSSGetDataBlockConfig_Impl(is_starting_op, is_ending_op);
            iEnableTabButtons();
            ScriptOps.m_MainForm.SetOvBtEnblTimer(false);
            return result;
        }

        public int iSetPerChirpPhaseShifterEnableConfig_Gui(bool is_starting_op, bool is_ending_op)
        {
            ScriptOps.m_MainForm.StaticConfigTab.UpdatePerChirpPhaseShifterEnableConfigData();
            iDisableTabButtons();
            ScriptOps.m_MainForm.SetOvBtEnblTimer(true);
            int result = iSetPerChirpPhaseShifterEnbaleConfig_Impl(is_starting_op, is_ending_op);
            iEnableTabButtons();
            ScriptOps.m_MainForm.SetOvBtEnblTimer(false);
            return result;
        }

        public int iSetFreqLimitConfig_Gui(bool is_starting_op, bool is_ending_op)
        {
            ScriptOps.m_MainForm.StaticConfigTab.UpdateFreqLimitConfigData();
            iDisableTabButtons();
            ScriptOps.m_MainForm.SetOvBtEnblTimer(true);
            int result = iSetFrequencyLimitConfig_Impl(is_starting_op, is_ending_op);
            iEnableTabButtons();
            ScriptOps.m_MainForm.SetOvBtEnblTimer(false);
            return result;
        }

        public int iSetRFDeviceAEControlConfig_Gui(bool is_starting_op, bool is_ending_op)
        {
            ScriptOps.m_MainForm.StaticConfigTab.UpdateRFDeviceAEControlConfigData();
            iDisableTabButtons();
            ScriptOps.m_MainForm.SetOvBtEnblTimer(true);
            int result = iSetRFDeviceAEDirectionControlConfig_Impl(is_starting_op, is_ending_op);
            iEnableTabButtons();
            ScriptOps.m_MainForm.SetOvBtEnblTimer(false);
            return result;
        }

        public int iSetCalMonFreqTxPowerLimitConfig_Gui(bool is_starting_op, bool is_ending_op)
        {
            ScriptOps.m_MainForm.StaticConfigTab.UpdateCalMonFreqTxPowerLimitConfigData();
            iDisableTabButtons();
            ScriptOps.m_MainForm.SetOvBtEnblTimer(true);
            int result = iSetCalMonFreqTxPowerLimitConfig_Impl(is_starting_op, is_ending_op);
            iEnableTabButtons();
            ScriptOps.m_MainForm.SetOvBtEnblTimer(false);
            return result;
        }

        public int iSetTimeUnitConfig_Gui(bool is_starting_op, bool is_ending_op)
        {
            ScriptOps.m_MainForm.CalibConfig.UpdateTimeUnitConfigData();
            iDisableTabButtons();
            ScriptOps.m_MainForm.SetOvBtEnblTimer(true);
            int result = iSetTimeUnitConfig_Impl(is_starting_op, is_ending_op);
            iEnableTabButtons();
            ScriptOps.m_MainForm.SetOvBtEnblTimer(false);
            return result;
        }

        public int iSetMonitoringModeConfig_Gui(bool is_starting_op, bool is_ending_op)
        {
            ScriptOps.m_MainForm.MonitoringConfig.UpdateMonitoringModeConfigData();
            iDisableTabButtons();
            ScriptOps.m_MainForm.SetOvBtEnblTimer(true);
            int result = iSetMonitoringModeConfig_Impl(is_starting_op, is_ending_op);
            iEnableTabButtons();
            ScriptOps.m_MainForm.SetOvBtEnblTimer(false);
            return result;
        }

        public int iSetTX1PowerMonConfig_Gui(bool is_starting_op, bool is_ending_op)
        {
            ScriptOps.m_MainForm.AnalogMonConfig.UpdateTX1PowerMonConfigData();
            iDisableTabButtons();
            ScriptOps.m_MainForm.SetOvBtEnblTimer(true);
            int result = iSetTX1PowerMonConfig_Impl(is_starting_op, is_ending_op);
            iEnableTabButtons();
            ScriptOps.m_MainForm.SetOvBtEnblTimer(false);
            return result;
        }

        public int iSetTX2PowerMonConfig_Gui(bool is_starting_op, bool is_ending_op)
        {
            ScriptOps.m_MainForm.AnalogMonConfig.UpdateTX2PowerMonConfigData();
            iDisableTabButtons();
            ScriptOps.m_MainForm.SetOvBtEnblTimer(true);
            int result = iSetTX2PowerMonConfig_Impl(is_starting_op, is_ending_op);
            iEnableTabButtons();
            ScriptOps.m_MainForm.SetOvBtEnblTimer(false);
            return result;
        }

        public int iSetTX3PowerMonConfig_Gui(bool is_starting_op, bool is_ending_op)
        {
            ScriptOps.m_MainForm.AnalogMonConfig.UpdateTX3PowerMonConfigData();
            iDisableTabButtons();
            ScriptOps.m_MainForm.SetOvBtEnblTimer(true);
            int result = iSetTX3PowerMonConfig_Impl(is_starting_op, is_ending_op);
            iEnableTabButtons();
            ScriptOps.m_MainForm.SetOvBtEnblTimer(false);
            return result;
        }

        public int iSetRXNoiseFigureMonConfig_Gui(bool is_starting_op, bool is_ending_op)
        {
            ScriptOps.m_MainForm.AnalogMon2Config.UpdateRXNoiseFigureMonConfigData();
            iDisableTabButtons();
            ScriptOps.m_MainForm.SetOvBtEnblTimer(true);
            int result = iSetRXNoiseFigureMonConfig_Impl(is_starting_op, is_ending_op);
            iEnableTabButtons();
            ScriptOps.m_MainForm.SetOvBtEnblTimer(false);
            return result;
        }

        public int iSetTX1BallBreakMonConfig_Gui(bool is_starting_op, bool is_ending_op)
        {
            ScriptOps.m_MainForm.AnalogMonConfig.UpdateTX1BallBreakMonConfigData();
            iDisableTabButtons();
            ScriptOps.m_MainForm.SetOvBtEnblTimer(true);
            int result = iSetTX1BallBreakMonConfig_Impl(is_starting_op, is_ending_op);
            iEnableTabButtons();
            ScriptOps.m_MainForm.SetOvBtEnblTimer(false);
            return result;
        }

        public int iSetTX2BallBreakMonConfig_Gui(bool is_starting_op, bool is_ending_op)
        {
            ScriptOps.m_MainForm.AnalogMonConfig.UpdateTX2BallBreakMonConfigData();
            iDisableTabButtons();
            ScriptOps.m_MainForm.SetOvBtEnblTimer(true);
            int result = iSetTX2BallBreakMonConfig_Impl(is_starting_op, is_ending_op);
            iEnableTabButtons();
            ScriptOps.m_MainForm.SetOvBtEnblTimer(false);
            return result;
        }

        public int iSetTX3BallBreakMonConfig_Gui(bool is_starting_op, bool is_ending_op)
        {
            ScriptOps.m_MainForm.AnalogMonConfig.UpdateTX3BallBreakMonConfigData();
            iDisableTabButtons();
            ScriptOps.m_MainForm.SetOvBtEnblTimer(true);
            int result = iSetTX3BallBreakMonConfig_Impl(is_starting_op, is_ending_op);
            iEnableTabButtons();
            ScriptOps.m_MainForm.SetOvBtEnblTimer(false);
            return result;
        }

        public int iSetRXGainPhaseMonConfig_Gui(bool is_starting_op, bool is_ending_op)
        {
            ScriptOps.m_MainForm.AnalogMon2Config.UpdateRxGainPhaseMonConfigData();
            iDisableTabButtons();
            ScriptOps.m_MainForm.SetOvBtEnblTimer(true);
            int result = iSetRXGainPhaseMonConfig_Impl(is_starting_op, is_ending_op);
            iEnableTabButtons();
            ScriptOps.m_MainForm.SetOvBtEnblTimer(false);
            return result;
        }

        public int iSetInterRxGainPhaseFreqControlConfig_Gui(bool is_starting_op, bool is_ending_op)
        {
            ScriptOps.m_MainForm.ChirpConfigTab.UpdateInterRxGainPhaseFreqControlConfigData();
            iDisableTabButtons();
            ScriptOps.m_MainForm.SetOvBtEnblTimer(true);
            int result = iSetInterRxGainPhaseFreqControlConfig_Impl(is_starting_op, is_ending_op);
            iEnableTabButtons();
            ScriptOps.m_MainForm.SetOvBtEnblTimer(false);
            return result;
        }

        public int m0000a2(string ipAddr, int portno, uint deviceMap)
        {
            ScriptOps.m_MainForm.SelectCaptureDevice("TDA2XX");
            string[] array = ipAddr.Split(new char[]
            {
                '.'
            });
            ScriptOps.m_MainForm.updateTDAStatus();
            m_TDAEthernetInitConfigParams.au8DestiIpAddr0 = Convert.ToByte(array[0]);
            m_TDAEthernetInitConfigParams.au8DestiIpAddr1 = Convert.ToByte(array[1]);
            m_TDAEthernetInitConfigParams.au8DestiIpAddr2 = Convert.ToByte(array[2]);
            m_TDAEthernetInitConfigParams.au8DestiIpAddr3 = Convert.ToByte(array[3]);
            m_TDAEthernetInitConfigParams.u32ConfigPortNo = Convert.ToUInt32(portno);
            m_TDAEthernetInitConfigParams.deviceMap = deviceMap;
            ScriptOps.m_MainForm.TDAxxCaptureCard.UpdateInitializeEthernetConfigDataToGUI();
            return iSetTDACaptureConnectConfig_Impl(true, false);
        }

        public int iSetTDACaptureConnectConfig_Gui(bool is_starting_op, bool is_ending_op)
        {
            ScriptOps.m_MainForm.TDAxxCaptureCard.UpdateInitializeEthernetConfigData();
            iDisableTabButtons();
            ScriptOps.m_MainForm.SetOvBtEnblTimer(true);
            int result = iSetTDACaptureConnectConfig_Impl(is_starting_op, is_ending_op);
            iEnableTabButtons();
            ScriptOps.m_MainForm.SetOvBtEnblTimer(false);
            return result;
        }

        public int iSetDataCaptureConnectConfig_Gui(bool is_starting_op, bool is_ending_op)
        {
            int result = 0;
            ScriptOps.m_MainForm.RFDataCaptureCard.UpdateInitializeEthernetConfigData();
            ScriptOps.m_MainForm.RFDataCaptureCard.UpdateEthernetModeConfigData();
            ScriptOps.m_MainForm.RFDataCaptureCard.UpdateEPacketDelayConfigData();
            iDisableTabButtons();
            ScriptOps.m_MainForm.SetOvBtEnblTimer(true);
            iSetDataCaptureConnectConfig_Impl(is_starting_op, is_ending_op);
            iEnableTabButtons();
            ScriptOps.m_MainForm.SetOvBtEnblTimer(false);
            return result;
        }

        public int iSetResetFPGADeviceConfig_Gui(bool is_starting_op, bool is_ending_op)
        {
            iDisableTabButtons();
            ScriptOps.m_MainForm.SetOvBtEnblTimer(true);
            int result = iSetResetDCCardFPGAViaEthernetChannelConfig_Impl(is_starting_op, is_ending_op);
            iEnableTabButtons();
            ScriptOps.m_MainForm.SetOvBtEnblTimer(false);
            return result;
        }

        public int iSetResetFPGADeviceConfig_Gui_WithoutSPI(bool is_starting_op, bool is_ending_op)
        {
            iDisableTabButtons();
            ScriptOps.m_MainForm.SetOvBtEnblTimer(true);
            int result = iSetResetDCCardFPGAViaEthernetChannelConfig_Impl_WithoutSPI(is_starting_op, is_ending_op);
            iEnableTabButtons();
            ScriptOps.m_MainForm.SetOvBtEnblTimer(false);
            return result;
        }

        public int iSetDisconnectDeviceConfig_Gui(bool is_starting_op, bool is_ending_op)
        {
            ScriptOps.m_MainForm.SetOvBtEnblTimer(true);
            int result = iSetDisconnectViaEthernetChannelConfig_Impl(is_starting_op, is_ending_op);
            ScriptOps.m_MainForm.SetOvBtEnblTimer(false);
            return result;
        }

        public int iSetPacketDelayConfig_Gui(bool is_starting_op, bool is_ending_op)
        {
            iDisableTabButtons();
            ScriptOps.m_MainForm.SetOvBtEnblTimer(true);
            int result = iSetRecordDataPacketDelayConfig_Impl(is_starting_op, is_ending_op);
            iEnableTabButtons();
            ScriptOps.m_MainForm.SetOvBtEnblTimer(false);
            return result;
        }

        public int iSetPacketDelayConfig_Gui_WithoutSPI(bool is_starting_op, bool is_ending_op)
        {
            iDisableTabButtons();
            ScriptOps.m_MainForm.SetOvBtEnblTimer(true);
            int result = iSetRecordDataPacketDelayConfig_Impl_WithoutSPI(is_starting_op, is_ending_op);
            iEnableTabButtons();
            ScriptOps.m_MainForm.SetOvBtEnblTimer(false);
            return result;
        }

        public int iSetRXIFStageMonConfig_Gui(bool is_starting_op, bool is_ending_op)
        {
            ScriptOps.m_MainForm.AnalogMon2Config.UpdateRXIFStageMonConfigData();
            iDisableTabButtons();
            ScriptOps.m_MainForm.SetOvBtEnblTimer(true);
            int result = iSetRXIFStageMonConfig_Impl(is_starting_op, is_ending_op);
            iEnableTabButtons();
            ScriptOps.m_MainForm.SetOvBtEnblTimer(false);
            return result;
        }

        public int iSetTX1BPMPhaseMonConfig_Gui(bool is_starting_op, bool is_ending_op)
        {
            ScriptOps.m_MainForm.AnalogMonConfig.UpdateTX1BPMPhaseMonConfigData();
            iDisableTabButtons();
            ScriptOps.m_MainForm.SetOvBtEnblTimer(true);
            int result = iSetTX1BPMPhaseMonConfig_Impl(is_starting_op, is_ending_op);
            iEnableTabButtons();
            ScriptOps.m_MainForm.SetOvBtEnblTimer(false);
            return result;
        }

        public int iSetTX2BPMPhaseMonConfig_Gui(bool is_starting_op, bool is_ending_op)
        {
            ScriptOps.m_MainForm.AnalogMonConfig.UpdateTX2BPMPhaseMonConfigData();
            iDisableTabButtons();
            ScriptOps.m_MainForm.SetOvBtEnblTimer(true);
            int result = iSetTX2BPMPhaseMonConfig_Impl(is_starting_op, is_ending_op);
            iEnableTabButtons();
            ScriptOps.m_MainForm.SetOvBtEnblTimer(false);
            return result;
        }

        public int iSetTX3BPMPhaseMonConfig_Gui(bool is_starting_op, bool is_ending_op)
        {
            ScriptOps.m_MainForm.AnalogMonConfig.UpdateTX3BPMPhaseMonConfigData();
            iDisableTabButtons();
            ScriptOps.m_MainForm.SetOvBtEnblTimer(true);
            int result = iSetTX3BPMPhaseMonConfig_Impl(is_starting_op, is_ending_op);
            iEnableTabButtons();
            ScriptOps.m_MainForm.SetOvBtEnblTimer(false);
            return result;
        }

        public int iSetTXGainPhaseMismatchMonConfig_Gui(bool is_starting_op, bool is_ending_op)
        {
            ScriptOps.m_MainForm.AnalogMonConfig.UpdateTXGainPhaseMismatchMonConfigData();
            iDisableTabButtons();
            ScriptOps.m_MainForm.SetOvBtEnblTimer(true);
            int result = iSetTXGainPhaseMismatchMonConfig_Impl(is_starting_op, is_ending_op);
            iEnableTabButtons();
            ScriptOps.m_MainForm.SetOvBtEnblTimer(false);
            return result;
        }

        public int iSetAnalogFaultInjectionConfig_Gui(bool is_starting_op, bool is_ending_op)
        {
            ScriptOps.m_MainForm.AnalogMonConfig.UpdateAnalogFaultInjectionConfigData();
            iDisableTabButtons();
            ScriptOps.m_MainForm.SetOvBtEnblTimer(true);
            int result = iSetAnalogFaultInjectionConfig_Impl(is_starting_op, is_ending_op);
            iEnableTabButtons();
            ScriptOps.m_MainForm.SetOvBtEnblTimer(false);
            return result;
        }

        public int iSetRXSaturationDetectorMonConfig_Gui(bool is_starting_op, bool is_ending_op)
        {
            ScriptOps.m_MainForm.AnalogMon2Config.UpdateRXSaturationDetectorMonConfigData();
            iDisableTabButtons();
            ScriptOps.m_MainForm.SetOvBtEnblTimer(true);
            int result = iSetRXSaturationDetectorMonConfig_Impl(is_starting_op, is_ending_op);
            iEnableTabButtons();
            ScriptOps.m_MainForm.SetOvBtEnblTimer(false);
            return result;
        }

        public int iSetPLLControlVolMonConfig_Gui(bool is_starting_op, bool is_ending_op)
        {
            ScriptOps.m_MainForm.p000001.UpdatePLLControlVolMonConfigData();
            iDisableTabButtons();
            ScriptOps.m_MainForm.SetOvBtEnblTimer(true);
            int result = iSetPLLControlVoltageMonConfig_Impl(is_starting_op, is_ending_op);
            iEnableTabButtons();
            ScriptOps.m_MainForm.SetOvBtEnblTimer(false);
            return result;
        }

        public int iSetDCCMonConfig_Gui(bool is_starting_op, bool is_ending_op)
        {
            ScriptOps.m_MainForm.p000001.UpdateDCCMonConfigData();
            iDisableTabButtons();
            ScriptOps.m_MainForm.SetOvBtEnblTimer(true);
            int result = iSetDualClockComparatorMonConfig_Impl(is_starting_op, is_ending_op);
            iEnableTabButtons();
            ScriptOps.m_MainForm.SetOvBtEnblTimer(false);
            return result;
        }

        public int iSetSignalandImageMonConfig_Gui(bool is_starting_op, bool is_ending_op)
        {
            ScriptOps.m_MainForm.AnalogMon2Config.UpdateSignalandImageMonConfigData();
            iDisableTabButtons();
            ScriptOps.m_MainForm.SetOvBtEnblTimer(true);
            int result = iSetSignalandImageMonConfig_Impl(is_starting_op, is_ending_op);
            iEnableTabButtons();
            ScriptOps.m_MainForm.SetOvBtEnblTimer(false);
            return result;
        }

        public int iSetSynthFrequencyMonConfig_Gui(bool is_starting_op, bool is_ending_op)
        {
            ScriptOps.m_MainForm.AnalogMon2Config.UpdateSynthFrequencyMonConfigData();
            iDisableTabButtons();
            ScriptOps.m_MainForm.SetOvBtEnblTimer(true);
            int result = iSetSynthFrequencyMonConfig_Impl(is_starting_op, is_ending_op);
            iEnableTabButtons();
            ScriptOps.m_MainForm.SetOvBtEnblTimer(false);
            return result;
        }

        public int iSetRxMixerInputPowerMonConfig_Gui(bool is_starting_op, bool is_ending_op)
        {
            ScriptOps.m_MainForm.AnalogMon2Config.UpdateRxMixerInputPowerMonConfigData();
            iDisableTabButtons();
            ScriptOps.m_MainForm.SetOvBtEnblTimer(true);
            int result = iSetRxMixerInputPowerMonConfig_Impl(is_starting_op, is_ending_op);
            iEnableTabButtons();
            ScriptOps.m_MainForm.SetOvBtEnblTimer(false);
            return result;
        }

        public int iSetExternalAnalogSignalsMonConfig_Gui(bool is_starting_op, bool is_ending_op)
        {
            ScriptOps.m_MainForm.p000001.UpdateExternalAnalogSignalsMonConfigData();
            iDisableTabButtons();
            ScriptOps.m_MainForm.SetOvBtEnblTimer(true);
            int result = iSetExternalAnalogSignalsMonConfig_Impl(is_starting_op, is_ending_op);
            iEnableTabButtons();
            ScriptOps.m_MainForm.SetOvBtEnblTimer(false);
            return result;
        }

        public int iSetTX1IntAnalogSigMonConfig_Gui(bool is_starting_op, bool is_ending_op)
        {
            ScriptOps.m_MainForm.p000001.UpdateTX1IntAnalogSigMonConfigData();
            iDisableTabButtons();
            ScriptOps.m_MainForm.SetOvBtEnblTimer(true);
            int result = iSetInternalTx1AnalogSignalsMonConfig_Impl(is_starting_op, is_ending_op);
            iEnableTabButtons();
            ScriptOps.m_MainForm.SetOvBtEnblTimer(false);
            return result;
        }

        public int iSetTX2IntAnalogSigMonConfig_Gui(bool is_starting_op, bool is_ending_op)
        {
            ScriptOps.m_MainForm.p000001.UpdateTX2IntAnalogSigMonConfigData();
            iDisableTabButtons();
            ScriptOps.m_MainForm.SetOvBtEnblTimer(true);
            int result = iSetInternalTx2AnalogSignalsMonConfig_Impl(is_starting_op, is_ending_op);
            iEnableTabButtons();
            ScriptOps.m_MainForm.SetOvBtEnblTimer(false);
            return result;
        }

        public int iSetTX3IntAnalogSigMonConfig_Gui(bool is_starting_op, bool is_ending_op)
        {
            ScriptOps.m_MainForm.p000001.UpdateTX3IntAnalogSigMonConfigData();
            iDisableTabButtons();
            ScriptOps.m_MainForm.SetOvBtEnblTimer(true);
            int result = iSetInternalTx3AnalogSignalsMonConfig_Impl(is_starting_op, is_ending_op);
            iEnableTabButtons();
            ScriptOps.m_MainForm.SetOvBtEnblTimer(false);
            return result;
        }

        public int iSetRXIntAnalogSigMonConfig_Gui(bool is_starting_op, bool is_ending_op)
        {
            ScriptOps.m_MainForm.p000001.UpdateRXIntAnalogSigMonConfigData();
            iDisableTabButtons();
            ScriptOps.m_MainForm.SetOvBtEnblTimer(true);
            int result = iSetInternalRXAnalogSignalsMonConfig_Impl(is_starting_op, is_ending_op);
            iEnableTabButtons();
            ScriptOps.m_MainForm.SetOvBtEnblTimer(false);
            return result;
        }

        public int iSetPMCLKLOIntAnalogSigMonConfig_Gui(bool is_starting_op, bool is_ending_op)
        {
            ScriptOps.m_MainForm.p000001.UpdatePMCLKLOIntAnalogSigMonConfigData();
            iDisableTabButtons();
            ScriptOps.m_MainForm.SetOvBtEnblTimer(true);
            int result = iSetInternalPMCLKLOAnalogSignalsMonConfig_Impl(is_starting_op, is_ending_op);
            iEnableTabButtons();
            ScriptOps.m_MainForm.SetOvBtEnblTimer(false);
            return result;
        }

        public int iSetGPADCIntAnalogSigMonConfig_Gui(bool is_starting_op, bool is_ending_op)
        {
            ScriptOps.m_MainForm.p000001.UpdateGPADCIntAnalogSigMonConfigData();
            iDisableTabButtons();
            ScriptOps.m_MainForm.SetOvBtEnblTimer(true);
            int result = iSetInternalGPADCAnalogSignalsMonConfig_Impl(is_starting_op, is_ending_op);
            iEnableTabButtons();
            ScriptOps.m_MainForm.SetOvBtEnblTimer(false);
            return result;
        }

        public int iSetTemperatureMonConfig_Gui(bool is_starting_op, bool is_ending_op)
        {
            ScriptOps.m_MainForm.AnalogMon2Config.UpdateTemperatureMonConfigData();
            iDisableTabButtons();
            ScriptOps.m_MainForm.SetOvBtEnblTimer(true);
            int result = iSetTemperatureMonConfig_Impl(is_starting_op, is_ending_op);
            iEnableTabButtons();
            ScriptOps.m_MainForm.SetOvBtEnblTimer(false);
            return result;
        }

        public int iSetTxGainTempLUTConfig_Gui(bool is_starting_op, bool is_ending_op)
        {
            ScriptOps.m_MainForm.TxRxGainTempLUTCfg.UpdateTxGainTempLUTConfigData();
            iDisableTabButtons();
            ScriptOps.m_MainForm.SetOvBtEnblTimer(true);
            int result = iSetTxGainTemperatureLUTConfig_Impl(is_starting_op, is_ending_op);
            iEnableTabButtons();
            ScriptOps.m_MainForm.SetOvBtEnblTimer(false);
            return result;
        }

        public int iSetRxGainTempLUTConfig_Gui(bool is_starting_op, bool is_ending_op)
        {
            ScriptOps.m_MainForm.TxRxGainTempLUTCfg.UpdateRxGainTempLUTConfigData();
            iDisableTabButtons();
            ScriptOps.m_MainForm.SetOvBtEnblTimer(true);
            int result = iSetRxGainTemperatureLUTConfig_Impl(is_starting_op, is_ending_op);
            iEnableTabButtons();
            ScriptOps.m_MainForm.SetOvBtEnblTimer(false);
            return result;
        }

        public int iGetTxGainTempLUTConfig_Gui(bool is_starting_op, bool is_ending_op)
        {
            ScriptOps.m_MainForm.TxRxGainTempLUTCfg.UpdateTxGainTempLUTGetConfigData();
            iDisableTabButtons();
            ScriptOps.m_MainForm.SetOvBtEnblTimer(true);
            int result = iGetTxGainTemperatureLUTConfig_Impl(is_starting_op, is_ending_op);
            iEnableTabButtons();
            ScriptOps.m_MainForm.SetOvBtEnblTimer(false);
            return result;
        }

        public int iGetRxGainTempLUTConfig_Gui(bool is_starting_op, bool is_ending_op)
        {
            ScriptOps.m_MainForm.TxRxGainTempLUTCfg.UpdateRxGainTempLUTGetConfigData();
            iDisableTabButtons();
            ScriptOps.m_MainForm.SetOvBtEnblTimer(true);
            int result = iGetRxGainTemperatureLUTConfig_Impl(is_starting_op, is_ending_op);
            iEnableTabButtons();
            ScriptOps.m_MainForm.SetOvBtEnblTimer(false);
            return result;
        }

        public int iSetMonitoringRFEnablesConfig_Gui(bool is_starting_op, bool is_ending_op)
        {
            ScriptOps.m_MainForm.AnalogMonConfig.UpdateMonitoringRFEnablesConfigData();
            iDisableTabButtons();
            ScriptOps.m_MainForm.SetOvBtEnblTimer(true);
            int result = iSetMonitoringRFEnablesConfig_Impl(is_starting_op, is_ending_op);
            iEnableTabButtons();
            ScriptOps.m_MainForm.SetOvBtEnblTimer(false);
            return result;
        }

        public int iSetRFDigitalSysPeriodicMonConfig_Gui(bool is_starting_op, bool is_ending_op)
        {
            ScriptOps.m_MainForm.MonitoringConfig.UpdateRFDigitalSysPeriodicMonConfigData();
            iDisableTabButtons();
            ScriptOps.m_MainForm.SetOvBtEnblTimer(true);
            int result = iSetRFDigitalSysPeriodicMonConfig_Impl(is_starting_op, is_ending_op);
            iEnableTabButtons();
            ScriptOps.m_MainForm.SetOvBtEnblTimer(false);
            return result;
        }

        public int iSetRFDigitalSysLatentFaultMonConfig_Gui(bool is_starting_op, bool is_ending_op)
        {
            ScriptOps.m_MainForm.MonitoringConfig.UpdateMonitoringRFDigitalSysLatentFaultConfigData();
            iDisableTabButtons();
            ScriptOps.m_MainForm.SetOvBtEnblTimer(true);
            int result = iSetRFDigitalSysLatentFaultMonConfig_Impl(is_starting_op, is_ending_op);
            iEnableTabButtons();
            ScriptOps.m_MainForm.SetOvBtEnblTimer(false);
            return result;
        }

        public int iSetMSSLatentFaultMonConfig_Gui(bool is_starting_op, bool is_ending_op)
        {
            ScriptOps.m_MainForm.MSSMonitoring.UpdateMonitoringMSSRFDigitalSysLatentFaultConfigData();
            iDisableTabButtons();
            ScriptOps.m_MainForm.SetOvBtEnblTimer(true);
            int result = iSetMSSLatentFaultMonConfig_Impl(is_starting_op, is_ending_op);
            iEnableTabButtons();
            ScriptOps.m_MainForm.SetOvBtEnblTimer(false);
            return result;
        }

        public int iSetMSSPeriodicTestMonConfig_Gui(bool is_starting_op, bool is_ending_op)
        {
            ScriptOps.m_MainForm.MSSMonitoring.UpdateMonitoringMSSPeriodicTestConfigData();
            iDisableTabButtons();
            ScriptOps.m_MainForm.SetOvBtEnblTimer(true);
            int result = iSetMSSPeriodicTestMonConfig_Impl(is_starting_op, is_ending_op);
            iEnableTabButtons();
            ScriptOps.m_MainForm.SetOvBtEnblTimer(false);
            return result;
        }

        public int iSetRFInitCalibConfig_Gui(bool is_starting_op, bool is_ending_op)
        {
            ScriptOps.m_MainForm.CalibConfig.UpdateRFInitCalibConfigData();
            iDisableTabButtons();
            ScriptOps.m_MainForm.SetOvBtEnblTimer(true);
            int result = iSetRFInitCalibConfig_Impl(is_starting_op, is_ending_op);
            iEnableTabButtons();
            ScriptOps.m_MainForm.SetOvBtEnblTimer(false);
            return result;
        }

        public int iSetRunTimeCalibConfig_Gui(bool is_starting_op, bool is_ending_op)
        {
            ScriptOps.m_MainForm.CalibConfig.UpdateRunTimeCalibConfigData();
            iDisableTabButtons();
            ScriptOps.m_MainForm.SetOvBtEnblTimer(true);
            int result = iSetRunTimeCalibConfig_Impl(is_starting_op, is_ending_op);
            iEnableTabButtons();
            ScriptOps.m_MainForm.SetOvBtEnblTimer(false);
            return result;
        }

        public int iSetRfInit_Gui(ushort RadarDeviceId, bool is_starting_op, bool is_ending_op)
        {
            GlobalRef.g_RadarDeviceId = (uint)RadarDeviceId;
            iDisableTabButtons();
            ScriptOps.m_MainForm.SetOvBtEnblTimer(true);
            int result = iSetRfInit_Impl(is_starting_op, is_ending_op);
            iEnableTabButtons();
            ScriptOps.m_MainForm.SetOvBtEnblTimer(false);
            return result;
        }

        public int iSetRfInit_LUA(ushort RadarDeviceId, out string CalibStatus, out string CalibUpdate, out short Temperature, out uint TimeStamp)
        {
            CalibStatus = string.Empty;
            CalibUpdate = string.Empty;
            Temperature = 0;
            TimeStamp = 0U;
            GlobalRef.g_RadarDeviceId = (uint)RadarDeviceId;
            iDisableTabButtons();
            ScriptOps.m_MainForm.SetOvBtEnblTimer(true);
            int result = iSetRfInit_LUAImpl(out CalibStatus, out CalibUpdate, out Temperature, out TimeStamp);
            iEnableTabButtons();
            ScriptOps.m_MainForm.SetOvBtEnblTimer(false);
            ScriptOps.m_MainForm.StaticConfigTab.SetRFIniializationtIsDone();
            return result;
        }

        public int iSetChirpConfig_Gui(bool is_starting_op, bool is_ending_op)
        {
            ScriptOps.m_MainForm.ChirpConfigTab.UpdateChirpConfigData();
            ScriptOps.m_MainForm.ChirpConfigTab.CheckValidValuesOfChirpTXchannels();
            iDisableTabButtons();
            ScriptOps.m_MainForm.SetOvBtEnblTimer(true);
            int result = iSetChirpConfig_Impl(is_starting_op, is_ending_op);
            iEnableTabButtons();
            ScriptOps.m_MainForm.SetOvBtEnblTimer(false);
            return result;
        }

        public int iSetAdvChirpConfig_Gui(bool is_starting_op, bool is_ending_op)
        {
            ScriptOps.m_MainForm.AdvanceFrameConfigTab.UpdateAdvChirpConfigData();
            iDisableTabButtons();
            ScriptOps.m_MainForm.SetOvBtEnblTimer(true);
            int result = iSetAdvChirpConfig_Impl(is_starting_op, is_ending_op);
            iEnableTabButtons();
            ScriptOps.m_MainForm.SetOvBtEnblTimer(false);
            return result;
        }

        public int UpdateNSetAdvChirpConfData(ushort RadarDeviceId, ushort chirpParamIdx, byte resetMode, byte patternMode, ushort resetPeriod, ushort paramUpdatePeriod, double fixedDeltaInc)
        {
            int num = 0;
            GlobalRef.g_RadarDeviceId = (uint)RadarDeviceId;
            ScriptOps.m_MainForm.AdvanceFrameConfigTab.UpdateAdvChirpConfigData();
            m_AdvChirpConfigParams.chirpParamIdx = chirpParamIdx;
            m_AdvChirpConfigParams.resetMode = resetMode;
            m_AdvChirpConfigParams.patternMode = patternMode;
            m_AdvChirpConfigParams.resetPeriod = resetPeriod;
            m_AdvChirpConfigParams.paramUpdatePeriod = paramUpdatePeriod;
            m_AdvChirpConfigParams.fixedDeltaInc = fixedDeltaInc;
            ScriptOps.m_MainForm.AdvanceFrameConfigTab.UpdateAdvChirpConfigDataFrmCmd();
            return num + iSetAdvChirpConfig_Gui(true, false);
        }

        public int m0000a3(SetupObject dobject)
        {
            ScriptOps.m_MainForm.UpdateCaptureCard(dobject);
            ScriptOps.m_MainForm.m000038();
            ScriptOps.m_MainForm.ConnectTab.UpdateConnectConfig(dobject);
            GlobalRef.LuaWrapper.PrintWarning("Capture Setup JSON Configuration is imported and loaded. DONE.");
            return 0;
        }

        public int m0000a4()
        {
            GlobalRef.jsonExecution = true;
            ScriptOps.m_MainForm.ConnectTab.iSopChangeInvoke();
            Thread.Sleep(3000);
            ScriptOps.m_MainForm.ConnectTab.iConnectDisconnect();
            Thread.Sleep(5000);
            if (GlobalRef.g_AR6843Device)
            {
                ScriptOps.m_MainForm.ConnectTab.m000023();
                Thread.Sleep(7000);
                ScriptOps.m_MainForm.ConnectTab.m000024();
                Thread.Sleep(7000);
                ScriptOps.m_MainForm.ConnectTab.m_btnSPIConnect();
                Thread.Sleep(7000);
                ScriptOps.m_MainForm.ConnectTab.iSPIEnableRf();
                Thread.Sleep(7000);
            }
            else
            {
                ScriptOps.m_MainForm.ConnectTab.m000023();
                Thread.Sleep(3000);
                ScriptOps.m_MainForm.ConnectTab.m000024();
                Thread.Sleep(3000);
                ScriptOps.m_MainForm.ConnectTab.m_btnSPIConnect();
                Thread.Sleep(5000);
                ScriptOps.m_MainForm.ConnectTab.iSPIEnableRf();
                Thread.Sleep(5000);
            }
            ScriptOps.m_MainForm.m000038();
            if (GlobalRef.g_RFDataCaptureMode)
            {
                ScriptOps.m_MainForm.RFDataCaptureCard.iSetRFDeviceConnectConfig();
            }
            GlobalRef.LuaWrapper.PrintWarning("Capture Setup is Configured. DONE.");
            GlobalRef.lua_method = 0;
            GlobalRef.jsonExecution = false;
            return 0;
        }

        public void getCaptureCard(SetupObject dobject)
        {
            ScriptOps.m_MainForm.getCaptureCard(dobject);
        }

        public void ConnectUpdate(SetupObject dobject)
        {
            ScriptOps.m_MainForm.ConnectTab.ConnectUpdate();
        }

        public void GetCapturedFilesInfo()
        {
            ScriptOps.m_MainForm.ChirpConfigTab.GetCapturedFilesInfo();
        }

        public void GetAdditionalCapturedFilesInfo()
        {
            ScriptOps.m_MainForm.ChirpConfigTab.GetAdditionalCapturedFilesInfo();
        }

        public void GetEthernetConfig(SetupObject dobject)
        {
            ScriptOps.m_MainForm.RFDataCaptureCard.GetEthernetConfig(dobject);
        }

        public void TriggerExport(string CapturePath, string mmWavePath)
        {
            ScriptOps.m_MainForm.Import_Export.TriggerExport(CapturePath, mmWavePath);
        }

        public int m0000a5(RootObject jobject)
        {
            GlobalRef.jsonExecution = true;
            int deviceId = ScriptOps.m_MainForm.Import_Export.GetDeviceId();
            if (deviceId < 0)
            {
                string msg = string.Format("Select the Input file first", new object[0]);
                GlobalRef.LuaWrapper.PrintError(msg);
                return -1;
            }
            int num = 0;
            while (num < GlobalRef.jobject.mmWaveDevices.Count && GlobalRef.jobject.mmWaveDevices[num].mmWaveDeviceId != deviceId)
            {
                num++;
            }
            if (GlobalRef.jobject.configGenerator.createdBy == "mmWaveSensingEstimator")
            {
                MessageBox.Show("The configurations present in the Static Config Tab and Data Config Tab should be done manually as the Sensing Estimator does not provide this configuration.");
            }
            ScriptOps.m_MainForm.StaticConfigTab.UpdateStaticConfig(jobject, num);
            ScriptOps.m_MainForm.DataConfigTab.UpdateDataConfig(jobject, num);
            ScriptOps.m_MainForm.ChirpConfigTab.UpdateChirpData(jobject, num);
            ScriptOps.m_MainForm.CalibConfig.UpdateCalibConfig(jobject, num);
            ScriptOps.m_MainForm.AdvanceFrameConfigTab.UpdateAdvFrameConfig(jobject, num);
            ScriptOps.m_MainForm.ContStreamingTab.UpdateContStreamConfig(jobject, num);
            ScriptOps.m_MainForm.BpmConfigTab.UpdateBpmChirpConfig(jobject, num);
            ScriptOps.m_MainForm.TestSourceTab.UpdateTestSourceConfig(jobject, num);
            ScriptOps.m_MainForm.InterChirpBlockControls.UpdateInterChirpCtlConfig(jobject, num);
            ScriptOps.m_MainForm.ClibTab.UpdateEventMonitorConfig(jobject, num);
            ScriptOps.m_MainForm.LoopBack.UpdateLoopBackConfig(jobject, num);
            ScriptOps.m_MainForm.ExternalFilterProgramming.UpdateExternalFilterProgConfigData(jobject, num);
            ScriptOps.m_MainForm.MonitoringConfig.UpdateMonitoringLatentFaultConfigData(jobject, num);
            ScriptOps.m_MainForm.MSSMonitoring.UpdateMonitoringMSSConfigData(jobject, num);
            ScriptOps.m_MainForm.p000001.UpdateExtAnaMonConfigData(jobject, num);
            ScriptOps.m_MainForm.AnalogMon2Config.UpdateAnaRXMonConfigData(jobject, num);
            ScriptOps.m_MainForm.AnalogMonConfig.UpdateAnaTXMonConfigData(jobject, num);
            ScriptOps.m_MainForm.DynamicChirpConfig.UpdateDynamicChirpData(jobject, num);
            loadDone[deviceId] = 1;
            GlobalRef.jsonExecution = false;
            string full_command = string.Format("mmWave Device {0} Configuration is loaded. DONE.", num);
            m_GuiManager.RecordLog(0, full_command);
            return 0;
        }

        public int m0000a6(RootObject jobject)
        {
            GlobalRef.jsonExecution = true;
            int deviceId = ScriptOps.m_MainForm.Import_Export.GetDeviceId();
            if (deviceId < 0)
            {
                string msg = string.Format("Select the Input file first.", new object[0]);
                GlobalRef.LuaWrapper.PrintError(msg);
                return -1;
            }
            int num = 0;
            while (num < GlobalRef.jobject.mmWaveDevices.Count && GlobalRef.jobject.mmWaveDevices[num].mmWaveDeviceId != deviceId)
            {
                num++;
            }
            if (loadDone[deviceId] == 0)
            {
                string full_command = string.Format("Device {0} Configuration is not loaded yet. Performing Load Operation..", deviceId);
                m_GuiManager.RecordLog(0, full_command);
                m0000a5(jobject);
            }
            try
            {
                if (RFPowerUp[deviceId] == 0)
                {
                    throw new Exception();
                }
            }
            catch (Exception)
            {
                string msg2 = string.Format("Device {0} needs to be powered on before Configuration.", deviceId);
                GlobalRef.LuaWrapper.PrintError(msg2);
                return -1;
            }
            try
            {
                if (jobject.configGenerator.isConfigured != 1)
                {
                    throw new Exception();
                }
            }
            catch (Exception)
            {
                string msg3 = string.Format("Configuration Generator is mandatory for execution.", new object[0]);
                GlobalRef.LuaWrapper.PrintError(msg3);
                return -1;
            }
            try
            {
                if (jobject.currentVersion.isConfigured != 1)
                {
                    throw new Exception();
                }
            }
            catch (Exception)
            {
                string msg4 = string.Format("Current version configuration is mandatory for execution.", new object[0]);
                GlobalRef.LuaWrapper.PrintError(msg4);
                return -1;
            }
            try
            {
                if (jobject.lastBackwardCompatibleVersion.isConfigured != 1)
                {
                    throw new Exception();
                }
            }
            catch (Exception)
            {
                string msg5 = string.Format("Last Backward Compatible version configuration is mandatory for execution.", new object[0]);
                GlobalRef.LuaWrapper.PrintError(msg5);
                return -1;
            }
            try
            {
                if (jobject.systemConfig.isConfigured != 1)
                {
                    throw new Exception();
                }
            }
            catch (Exception)
            {
                string msg6 = string.Format("System configuration is mandatory for execution.", new object[0]);
                GlobalRef.LuaWrapper.PrintError(msg6);
                return -1;
            }
            try
            {
                if (jobject.mmWaveDevices == null)
                {
                    throw new Exception();
                }
            }
            catch (Exception)
            {
                string msg7 = string.Format("mmWaveDevices configuration is mandatory for execution.", new object[0]);
                GlobalRef.LuaWrapper.PrintError(msg7);
                return -1;
            }
            try
            {
                if (jobject.mmWaveDevices[num].rfConfig == null)
                {
                    throw new Exception();
                }
            }
            catch (Exception)
            {
                string msg8 = string.Format("RF configuration is mandatory for device {0}.", deviceId);
                GlobalRef.LuaWrapper.PrintError(msg8);
                return -1;
            }
            try
            {
                if (jobject.mmWaveDevices[num].rfConfig.rlChanCfg_t.isConfigured != 1)
                {
                    throw new Exception();
                }
            }
            catch (Exception)
            {
                string msg9 = string.Format("Channel configuration is mandatory for device {0}.", deviceId);
                GlobalRef.LuaWrapper.PrintError(msg9);
                return -1;
            }
            try
            {
                if (jobject.mmWaveDevices[num].rfConfig.rlAdcOutCfg_t.isConfigured != 1)
                {
                    throw new Exception();
                }
            }
            catch (Exception)
            {
                string msg10 = string.Format("ADC Out configuration is mandatory for device {0}.", deviceId);
                GlobalRef.LuaWrapper.PrintError(msg10);
                return -1;
            }
            try
            {
                if (jobject.mmWaveDevices[num].rfConfig.rlLowPowerModeCfg_t.isConfigured != 1)
                {
                    throw new Exception();
                }
            }
            catch (Exception)
            {
                string msg11 = string.Format("Low power mode configuration is mandatory for device {0}.", deviceId);
                GlobalRef.LuaWrapper.PrintError(msg11);
                return -1;
            }
            try
            {
                if (jobject.mmWaveDevices[num].rfConfig.rlProfiles.Count == 0)
                {
                    throw new Exception();
                }
            }
            catch (Exception)
            {
                string msg12 = string.Format("Profiles configuration is mandatory for device {0}.", deviceId);
                GlobalRef.LuaWrapper.PrintError(msg12);
                return -1;
            }
            try
            {
                if (jobject.mmWaveDevices[num].rfConfig.rlChirps.Count == 0)
                {
                    throw new Exception();
                }
            }
            catch (Exception)
            {
                string msg13 = string.Format("Chirps configuration is mandatory for device {0}.", deviceId);
                GlobalRef.LuaWrapper.PrintError(msg13);
                return -1;
            }
            try
            {
                if (jobject.mmWaveDevices[num].rfConfig.rlRfCalMonTimeUntConf_t.isConfigured != 1)
                {
                    throw new Exception();
                }
            }
            catch (Exception)
            {
                string msg14 = string.Format("Calibration Monitoring time unit configuration is mandatory for device {0}.", deviceId);
                GlobalRef.LuaWrapper.PrintError(msg14);
                return -1;
            }
            try
            {
                if (jobject.mmWaveDevices[num].rfConfig.rlRfCalMonFreqLimitConf_t.isConfigured != 1)
                {
                    throw new Exception();
                }
            }
            catch (Exception)
            {
                string msg15 = string.Format("Calibration Monitoring Frequency Limit configuration is mandatory for device {0}.", deviceId);
                GlobalRef.LuaWrapper.PrintError(msg15);
                return -1;
            }
            try
            {
                if (jobject.mmWaveDevices[num].rfConfig.rlRfInitCalConf_t.isConfigured != 1)
                {
                    throw new Exception();
                }
            }
            catch (Exception)
            {
                string msg16 = string.Format("Init Calibration configuration is mandatory for device {0}.", deviceId);
                GlobalRef.LuaWrapper.PrintError(msg16);
                return -1;
            }
            try
            {
                if (jobject.mmWaveDevices[num].rfConfig.rlRunTimeCalibConf_t.isConfigured != 1)
                {
                    throw new Exception();
                }
            }
            catch (Exception)
            {
                string msg17 = string.Format("Run time Calibration configuration is mandatory for device {0}.", deviceId);
                GlobalRef.LuaWrapper.PrintError(msg17);
                return -1;
            }
            try
            {
                if (jobject.mmWaveDevices[num].rfConfig.rlFrameCfg_t.isConfigured != 1 && jobject.mmWaveDevices[num].rfConfig.waveformType == "legacyFrameChirp")
                {
                    throw new Exception();
                }
            }
            catch (Exception)
            {
                string msg18 = string.Format("Frame configuration is mandatory for device {0}.", deviceId);
                GlobalRef.LuaWrapper.PrintError(msg18);
                return -1;
            }
            try
            {
                if (jobject.mmWaveDevices[num].rfConfig.rlAdvFrameCfg_t.isConfigured != 1 && jobject.mmWaveDevices[num].rfConfig.waveformType == "advancedFrameChirp")
                {
                    throw new Exception();
                }
            }
            catch (Exception)
            {
                string msg19 = string.Format("Advanced frame configuration is mandatory for device {0}.", deviceId);
                GlobalRef.LuaWrapper.PrintError(msg19);
                return -1;
            }
            try
            {
                if (jobject.mmWaveDevices[num].rfConfig.rlContModeCfg_t.isConfigured != 1 && jobject.mmWaveDevices[num].rfConfig.waveformType == "continuousWave")
                {
                    throw new Exception();
                }
            }
            catch (Exception)
            {
                string msg20 = string.Format("Contimous mode configuration is mandatory for device {0}.", deviceId);
                GlobalRef.LuaWrapper.PrintError(msg20);
                return -1;
            }
            try
            {
                if (jobject.mmWaveDevices[num].rfConfig.rlContModeEn_t.isConfigured != 1 && jobject.mmWaveDevices[num].rfConfig.waveformType == "continuousWave")
                {
                    throw new Exception();
                }
            }
            catch (Exception)
            {
                string msg21 = string.Format("Continous mode enable configuration is mandatory for device {0}.", deviceId);
                GlobalRef.LuaWrapper.PrintError(msg21);
                return -1;
            }
            try
            {
                if (jobject.mmWaveDevices[num].rfConfig.p000010.isConfigured != 1 && jobject.mmWaveDevices[num].rfConfig.MIMOScheme == "BPM")
                {
                    throw new Exception();
                }
            }
            catch (Exception)
            {
                string msg22 = string.Format("BPM mode configuration is mandatory for device {0}.", deviceId);
                GlobalRef.LuaWrapper.PrintError(msg22);
                return -1;
            }
            try
            {
                if (jobject.mmWaveDevices[num].rfConfig.rlBpmKCounterSel_t.isConfigured != 1 && jobject.mmWaveDevices[num].rfConfig.MIMOScheme == "BPM")
                {
                    throw new Exception();
                }
            }
            catch (Exception)
            {
                string msg23 = string.Format("BPM Counter select configuration is mandatory for device {0}.", deviceId);
                GlobalRef.LuaWrapper.PrintError(msg23);
                return -1;
            }
            try
            {
                if (jobject.mmWaveDevices[num].rfConfig.p000011.isConfigured != 1 && jobject.mmWaveDevices[num].rfConfig.MIMOScheme == "BPM")
                {
                    throw new Exception();
                }
            }
            catch (Exception)
            {
                string msg24 = string.Format("BPM Common configuration is mandatory for device {0}.", deviceId);
                GlobalRef.LuaWrapper.PrintError(msg24);
                return -1;
            }
            try
            {
                if (jobject.mmWaveDevices[num].rfConfig.p000012.Count == 1 && jobject.mmWaveDevices[num].rfConfig.MIMOScheme == "BPM")
                {
                    throw new Exception();
                }
            }
            catch (Exception)
            {
                string msg25 = string.Format("BPM Chirps configuration is mandatory for device {0}.", deviceId);
                GlobalRef.LuaWrapper.PrintError(msg25);
                return -1;
            }
            try
            {
                if (jobject.mmWaveDevices[num].rfConfig.rlRfLdoBypassCfg_t.isConfigured != 1)
                {
                    throw new Exception();
                }
            }
            catch (Exception)
            {
                string msg26 = string.Format("LDO Bypass configuration is mandatory for device {0}.", deviceId);
                GlobalRef.LuaWrapper.PrintError(msg26);
                return -1;
            }
            try
            {
                if (jobject.mmWaveDevices[num].rawDataCaptureConfig == null)
                {
                    throw new Exception();
                }
            }
            catch (Exception)
            {
                string msg27 = string.Format("Raw data capture configuration is mandatory for device {0}.", deviceId);
                GlobalRef.LuaWrapper.PrintError(msg27);
                return -1;
            }
            try
            {
                if (jobject.mmWaveDevices[num].rawDataCaptureConfig.rlDevDataFmtCfg_t.isConfigured != 1)
                {
                    throw new Exception();
                }
            }
            catch (Exception)
            {
                string msg28 = string.Format("Device Data format configuration is mandatory for device {0}.", deviceId);
                GlobalRef.LuaWrapper.PrintError(msg28);
                return -1;
            }
            try
            {
                if (jobject.mmWaveDevices[num].rawDataCaptureConfig.rlDevDataPathCfg_t.isConfigured != 1)
                {
                    throw new Exception();
                }
            }
            catch (Exception)
            {
                string msg29 = string.Format("Device Data path configuration is mandatory for device {0}.", deviceId);
                GlobalRef.LuaWrapper.PrintError(msg29);
                return -1;
            }
            if (!GlobalRef.g_2ChipCascade && !GlobalRef.g_4ChipCascade)
            {
                try
                {
                    if (jobject.mmWaveDevices[num].rawDataCaptureConfig.rlDevLaneEnable_t.isConfigured != 1)
                    {
                        throw new Exception();
                    }
                }
                catch (Exception)
                {
                    string msg30 = string.Format("Device lane enable configuration is mandatory for device {0}.", deviceId);
                    GlobalRef.LuaWrapper.PrintError(msg30);
                    return -1;
                }
            }
            try
            {
                if (jobject.mmWaveDevices[num].rawDataCaptureConfig.rlDevDataPathClkCfg_t.isConfigured != 1)
                {
                    throw new Exception();
                }
            }
            catch (Exception)
            {
                string msg31 = string.Format("Device Data Path Clock configuration is mandatory for device {0}.", deviceId);
                GlobalRef.LuaWrapper.PrintError(msg31);
                return -1;
            }
            try
            {
                if (jobject.mmWaveDevices[num].rawDataCaptureConfig.rlDevLvdsLaneCfg_t.isConfigured != 1 && jobject.mmWaveDevices[num].rawDataCaptureConfig.rlDevDataPathCfg_t.intfSel == 1)
                {
                    throw new Exception();
                }
            }
            catch (Exception)
            {
                string msg32 = string.Format("Device LVDS Lane configuration is mandatory for device {0}.", deviceId);
                GlobalRef.LuaWrapper.PrintError(msg32);
                return -1;
            }
            try
            {
                if (jobject.mmWaveDevices[num].rawDataCaptureConfig.rlDevCsi2Cfg_t.isConfigured != 1 && jobject.mmWaveDevices[num].rawDataCaptureConfig.rlDevDataPathCfg_t.intfSel == 0)
                {
                    throw new Exception();
                }
            }
            catch (Exception)
            {
                string msg33 = string.Format("Device CSI2 configuration is mandatory for device {0}.", deviceId);
                GlobalRef.LuaWrapper.PrintError(msg33);
                return -1;
            }
            GlobalRef.jobject.configGenerator.isConfigIntermediate = 0;
            jsonConfigInProgress = true;
            m_GuiManager.ScriptOps.iSetBasicConfig_Gui(true, false);
            m_GuiManager.ScriptOps.iSetRFLDOBypassEnableAndDisableConfig_Gui(true, false);
            m_GuiManager.ScriptOps.iSetLpModConfig_Gui(true, false);
            ScriptOps.m_MainForm.StaticConfigTab.SetRFIniialization();
            GlobalRef.g_RadarDeviceId = 1U << deviceId;
            ScriptOps.m_MainForm.StaticConfigTab.iSetRfInitAsync();
            Thread.Sleep(1000);
            ScriptOps.m_MainForm.StaticConfigTab.SetRFIniializationtIsDone();
            m_GuiManager.ScriptOps.iSetFreqLimitConfig_Gui(true, false);
            m_GuiManager.ScriptOps.iSetDataPathConfig_Gui(true, false);
            m_GuiManager.ScriptOps.iSetLvdsClkConfig_Gui(true, false);
            m_GuiManager.ScriptOps.iSetLvdsLaneConfig_Gui(true, false);
            int count = jobject.mmWaveDevices[num].rfConfig.rlProfiles.Count;
            int count2 = jobject.mmWaveDevices[num].rfConfig.rlChirps.Count;
            for (int i = 0; i < count; i++)
            {
                ScriptOps.m_MainForm.ChirpConfigTab.UpdateProfDataGui(jobject, num, i);
                m_GuiManager.ScriptOps.iSetProfileConfig_Gui(true, false);
            }
            for (int i = 0; i < count2; i++)
            {
                ScriptOps.m_MainForm.ChirpConfigTab.UpdateChirpDataGui(jobject, num, i);
                m_GuiManager.ScriptOps.iSetChirpConfig_Gui(true, false);
            }
            if (ScriptOps.m_MainForm.Import_Export.getSingleFrameStatus())
            {
                m_GuiManager.ScriptOps.iSetFrameConfig_Gui(true, false);
            }
            if (jobject.mmWaveDevices[num].rfConfig != null)
            {
                if (jobject.mmWaveDevices[num].rfConfig.rlRfMiscConf_t != null && jobject.mmWaveDevices[num].rfConfig.rlRfMiscConf_t.isConfigured == 1 && GlobalRef.g_AR12xxDevice)
                {
                    m_GuiManager.ScriptOps.iSetPerChirpPhaseShifterEnableConfig_Gui(true, false);
                }
                if (jobject.mmWaveDevices[num].rfConfig.rlRfTxFreqPwrLimitMonConf_t != null && jobject.mmWaveDevices[num].rfConfig.rlRfTxFreqPwrLimitMonConf_t.isConfigured == 1)
                {
                    m_GuiManager.ScriptOps.iSetCalMonFreqTxPowerLimitConfig_Gui(true, false);
                }
                if (jobject.mmWaveDevices[num].rfConfig.p000013 != null && jobject.mmWaveDevices[num].rfConfig.p000013.isConfigured == 1)
                {
                    m_GuiManager.ScriptOps.iSetRFDeviceAEControlConfig_Gui(true, false);
                }
                if (jobject.mmWaveDevices[num].rfConfig.rltestPattern_t != null && jobject.mmWaveDevices[num].rfConfig.rltestPattern_t.isConfigured == 1)
                {
                    m_GuiManager.ScriptOps.iSetTestPatternGeneratingConfig_Gui(true, false);
                }
                if (jobject.mmWaveDevices[num].rfConfig.rlTestSource_t != null && jobject.mmWaveDevices[num].rfConfig.rlTestSource_t.isConfigured == 1)
                {
                    m_GuiManager.ScriptOps.iSetTestSource_Gui(true, false);
                }
                if (jobject.mmWaveDevices[num].rfConfig.rlDynPwrSave_t != null && jobject.mmWaveDevices[num].rfConfig.rlDynPwrSave_t.isConfigured == 1)
                {
                    m_GuiManager.ScriptOps.iSetDynamicPowerSaveConfig_Gui(true, false);
                }
                if (jobject.mmWaveDevices[num].rfConfig.rlInterRxGainPhConf_t != null && jobject.mmWaveDevices[num].rfConfig.rlInterRxGainPhConf_t.isConfigured == 1)
                {
                    m_GuiManager.ScriptOps.iSetInterRxGainPhaseFreqControlConfig_Gui(true, false);
                }
                if (jobject.mmWaveDevices[num].rfConfig.rlInterChirpBlkCtrlCfg_t != null && jobject.mmWaveDevices[num].rfConfig.rlInterChirpBlkCtrlCfg_t.isConfigured == 1)
                {
                    m_GuiManager.ScriptOps.iInterChirpBlockControlsConfig_Gui(true, false);
                }
                if (jobject.mmWaveDevices[num].rfConfig.rlContModeCfg_t != null && jobject.mmWaveDevices[num].rfConfig.rlContModeCfg_t.isConfigured == 1 && ScriptOps.m_MainForm.Import_Export.getContWaveStatus())
                {
                    m_GuiManager.ScriptOps.iSetContStrConfig_Gui(true, false);
                }
                if (jobject.mmWaveDevices[num].rfConfig.rlContModeEn_t != null && jobject.mmWaveDevices[num].rfConfig.rlContModeEn_t.isConfigured == 1 && ScriptOps.m_MainForm.Import_Export.getContWaveStatus())
                {
                    m_GuiManager.ScriptOps.iEnblContStrConfig_Gui(true, false, (ushort)GlobalRef.g_RadarDeviceId);
                }
                if (jobject.mmWaveDevices[num].rfConfig.p000012 != null && jobject.mmWaveDevices[num].rfConfig.p000012.Count != 0)
                {
                    count2 = jobject.mmWaveDevices[num].rfConfig.p000012.Count;
                    for (int i = 0; i < count2; i++)
                    {
                        ScriptOps.m_MainForm.BpmConfigTab.UpdateBpmChirpConfigGui(jobject, num, i);
                        m_GuiManager.ScriptOps.iSetBpmChirpConfig_Gui(true, false);
                    }
                }
                if (jobject.mmWaveDevices[num].rfConfig.p000015 != null && jobject.mmWaveDevices[num].rfConfig.p000015.Count != 0 && GlobalRef.g_AR12xxDevice)
                {
                    count2 = jobject.mmWaveDevices[num].rfConfig.p000015.Count;
                    for (int i = 0; i < count2; i++)
                    {
                        ScriptOps.m_MainForm.BpmConfigTab.UpdatePerChirpPhaseShifterGui(jobject, num, i);
                        m_GuiManager.ScriptOps.iSetPerChirpPhaseShifterConfig_Gui(true, false);
                    }
                }
                if (jobject.mmWaveDevices[num].rfConfig.p000014 != null && jobject.mmWaveDevices[num].rfConfig.p000014.isConfigured == 1)
                {
                    m_GuiManager.ScriptOps.iSetGPADCExternalMeasurementConfig_Gui(true, false);
                }
                if (jobject.mmWaveDevices[num].rfConfig.rlAdvFrameCfg_t != null && jobject.mmWaveDevices[num].rfConfig.rlAdvFrameCfg_t.isConfigured == 1 && ScriptOps.m_MainForm.Import_Export.getAdvancedFrameStatus())
                {
                    m_GuiManager.ScriptOps.iSoftwareSubFrameStartConfig_Gui(true, false);
                    m_GuiManager.ScriptOps.iAdvncedFrameConfig_Gui(true, false);
                }
                if (jobject.mmWaveDevices[num].rfConfig.rlLoopbackBursts != null && jobject.mmWaveDevices[num].rfConfig.rlLoopbackBursts.Count != 0)
                {
                    int count3 = jobject.mmWaveDevices[num].rfConfig.rlLoopbackBursts.Count;
                    for (int i = 0; i < count3; i++)
                    {
                        ScriptOps.m_MainForm.AdvanceFrameConfigTab.UpdateLoopbackBurstGui(jobject, num, i);
                        m_GuiManager.ScriptOps.iLoopBuckBurstConfig_Gui(true, false);
                    }
                }
                if (jobject.mmWaveDevices[num].rfConfig.rlAdvChirpCfg_t != null && jobject.mmWaveDevices[num].rfConfig.rlAdvChirpCfg_t.isConfigured == 1)
                {
                    m_GuiManager.ScriptOps.iSetAdvChirpConfig_Gui(true, false);
                }
                if (jobject.mmWaveDevices[num].rfConfig.rlRfPALoopbackCfg_t != null && jobject.mmWaveDevices[num].rfConfig.rlRfPALoopbackCfg_t.isConfigured == 1)
                {
                    m_GuiManager.ScriptOps.iSetRFPALoopBackConfig_Gui(true, false);
                }
                if (jobject.mmWaveDevices[num].rfConfig.rlRfPSLoopbackCfg_t != null && jobject.mmWaveDevices[num].rfConfig.rlRfPSLoopbackCfg_t.isConfigured == 1)
                {
                    m_GuiManager.ScriptOps.iSetRFPSLoopBackConfig_Gui(true, false);
                }
                if (jobject.mmWaveDevices[num].rfConfig.rlRfIFLoopbackCfg_t != null && jobject.mmWaveDevices[num].rfConfig.rlRfIFLoopbackCfg_t.isConfigured == 1)
                {
                    m_GuiManager.ScriptOps.iSetRFIFLoopBackConfig_Gui(true, false);
                }
                if (jobject.mmWaveDevices[num].rfConfig.rlRfProgFiltConfs != null && jobject.mmWaveDevices[num].rfConfig.rlRfProgFiltConfs.Count != 0 && !GlobalRef.g_AR12xxDevice)
                {
                    count = jobject.mmWaveDevices[num].rfConfig.rlRfProgFiltConfs.Count;
                    for (int i = 0; i < count; i++)
                    {
                        ScriptOps.m_MainForm.ExternalFilterProgramming.UpdateExternalFilterConfigGui(jobject, num, i);
                        m_GuiManager.ScriptOps.iSetExternalFilterProgConfig_Gui(true, false);
                    }
                }
                if (jobject.mmWaveDevices[num].rfConfig.rlRfProgFiltCoeff_t != null && jobject.mmWaveDevices[num].rfConfig.rlRfProgFiltCoeff_t.isConfigured == 1 && !GlobalRef.g_AR12xxDevice)
                {
                    ScriptOps.m_MainForm.ExternalFilterProgramming.ExtFiltActivate();
                }
                if (jobject.mmWaveDevices[num].rfConfig.rlRfCalMonTimeUntConf_t != null && jobject.mmWaveDevices[num].rfConfig.rlRfCalMonTimeUntConf_t.isConfigured == 1)
                {
                    m_GuiManager.ScriptOps.iSetTimeUnitConfig_Gui(true, false);
                }
                if (jobject.mmWaveDevices[num].rfConfig.rlRfInitCalConf_t != null && jobject.mmWaveDevices[num].rfConfig.rlRfInitCalConf_t.isConfigured == 1)
                {
                    m_GuiManager.ScriptOps.iSetRFInitCalibConfig_Gui(true, false);
                }
                if (jobject.mmWaveDevices[num].rfConfig.rlRunTimeCalibConf_t != null && jobject.mmWaveDevices[num].rfConfig.rlRunTimeCalibConf_t.isConfigured == 1)
                {
                    m_GuiManager.ScriptOps.iSetRunTimeCalibConfig_Gui(true, false);
                }
            }
            if (jobject.mmWaveDevices[num].monitoringConfig == null)
            {
                string full_command2 = string.Format("Monitoring Configuration is not present for device {0}", deviceId);
                m_GuiManager.RecordLog(0, full_command2);
            }
            else
            {
                if (jobject.mmWaveDevices[num].monitoringConfig.rlMonDigEnables_t != null && jobject.mmWaveDevices[num].monitoringConfig.rlMonDigEnables_t.isConfigured == 1 && GlobalRef.g_AR12xxDevice)
                {
                    m_GuiManager.ScriptOps.iSetRFDigitalSysLatentFaultMonConfig_Gui(true, false);
                }
                if (jobject.mmWaveDevices[num].monitoringConfig.rlDigMonPeriodicConf_t != null && jobject.mmWaveDevices[num].monitoringConfig.rlDigMonPeriodicConf_t.isConfigured == 1 && GlobalRef.g_AR12xxDevice)
                {
                    m_GuiManager.ScriptOps.iSetRFDigitalSysPeriodicMonConfig_Gui(true, false);
                }
                if (jobject.mmWaveDevices[num].monitoringConfig.rlMonAnaEnables_t != null && jobject.mmWaveDevices[num].monitoringConfig.rlMonAnaEnables_t.isConfigured == 1)
                {
                    m_GuiManager.ScriptOps.iSetMonitoringRFEnablesConfig_Gui(true, false);
                }
                if (jobject.mmWaveDevices[num].monitoringConfig.rlAllTxBpmMonConf_t != null && jobject.mmWaveDevices[num].monitoringConfig.rlAllTxBpmMonConf_t.isConfigured == 1)
                {
                    m_GuiManager.ScriptOps.iSetTX1BPMPhaseMonConfig_Gui(true, false);
                    m_GuiManager.ScriptOps.iSetTX2BPMPhaseMonConfig_Gui(true, false);
                    if (!GlobalRef.g_AR16xxDevice || GlobalRef.g_AR1843Device)
                    {
                        m_GuiManager.ScriptOps.iSetTX3BPMPhaseMonConfig_Gui(true, false);
                    }
                }
                if (jobject.mmWaveDevices[num].monitoringConfig.rlAllTxPowMonConf_t != null && jobject.mmWaveDevices[num].monitoringConfig.rlAllTxPowMonConf_t.isConfigured == 1)
                {
                    m_GuiManager.ScriptOps.iSetTX1PowerMonConfig_Gui(true, false);
                    m_GuiManager.ScriptOps.iSetTX2PowerMonConfig_Gui(true, false);
                    if (!GlobalRef.g_AR16xxDevice || GlobalRef.g_AR1843Device)
                    {
                        m_GuiManager.ScriptOps.iSetTX3PowerMonConfig_Gui(true, false);
                    }
                }
                if (jobject.mmWaveDevices[num].monitoringConfig.rlAllTxBallBreakMonCfg_t != null && jobject.mmWaveDevices[num].monitoringConfig.rlAllTxBallBreakMonCfg_t.isConfigured == 1)
                {
                    m_GuiManager.ScriptOps.iSetTX1BallBreakMonConfig_Gui(true, false);
                    m_GuiManager.ScriptOps.iSetTX2BallBreakMonConfig_Gui(true, false);
                    if (!GlobalRef.g_AR16xxDevice || GlobalRef.g_AR1843Device)
                    {
                        m_GuiManager.ScriptOps.iSetTX3BallBreakMonConfig_Gui(true, false);
                    }
                }
                if (jobject.mmWaveDevices[num].monitoringConfig.rlAnaFaultInj_t != null && jobject.mmWaveDevices[num].monitoringConfig.rlAnaFaultInj_t.isConfigured == 1)
                {
                    m_GuiManager.ScriptOps.iSetAnalogFaultInjectionConfig_Gui(true, false);
                }
                if (jobject.mmWaveDevices[num].monitoringConfig.rlTxGainPhaseMismatchMonConf_t != null && jobject.mmWaveDevices[num].monitoringConfig.rlTxGainPhaseMismatchMonConf_t.isConfigured == 1)
                {
                    m_GuiManager.ScriptOps.iSetTXGainPhaseMismatchMonConfig_Gui(true, false);
                }
                if (jobject.mmWaveDevices[num].monitoringConfig.rlRxGainPhaseMonConf_t != null && jobject.mmWaveDevices[num].monitoringConfig.rlRxGainPhaseMonConf_t.isConfigured == 1)
                {
                    m_GuiManager.ScriptOps.iSetRXGainPhaseMonConfig_Gui(true, false);
                }
                if (jobject.mmWaveDevices[num].monitoringConfig.rlRxSatMonConf_t != null && jobject.mmWaveDevices[num].monitoringConfig.rlRxSatMonConf_t.isConfigured == 1)
                {
                    m_GuiManager.ScriptOps.iSetRXSaturationDetectorMonConfig_Gui(true, false);
                }
                if (jobject.mmWaveDevices[num].monitoringConfig.rlSigImgMonConf_t != null && jobject.mmWaveDevices[num].monitoringConfig.rlSigImgMonConf_t.isConfigured == 1)
                {
                    m_GuiManager.ScriptOps.iSetSignalandImageMonConfig_Gui(true, false);
                }
                if (jobject.mmWaveDevices[num].monitoringConfig.rlRxMixInPwrMonConf_t != null && jobject.mmWaveDevices[num].monitoringConfig.rlRxMixInPwrMonConf_t.isConfigured == 1)
                {
                    m_GuiManager.ScriptOps.iSetRxMixerInputPowerMonConfig_Gui(true, false);
                }
                if (jobject.mmWaveDevices[num].monitoringConfig.rlTempMonConf_t != null && jobject.mmWaveDevices[num].monitoringConfig.rlTempMonConf_t.isConfigured == 1)
                {
                    m_GuiManager.ScriptOps.iSetTemperatureMonConfig_Gui(true, false);
                }
                if (jobject.mmWaveDevices[num].monitoringConfig.rlSynthFreqMonConf_t != null && jobject.mmWaveDevices[num].monitoringConfig.rlSynthFreqMonConf_t.isConfigured == 1)
                {
                    m_GuiManager.ScriptOps.iSetSynthFrequencyMonConfig_Gui(true, false);
                }
                if (jobject.mmWaveDevices[num].monitoringConfig.rlRxNoiseMonConf_t != null && jobject.mmWaveDevices[num].monitoringConfig.rlRxNoiseMonConf_t.isConfigured == 1)
                {
                    m_GuiManager.ScriptOps.iSetRXNoiseFigureMonConfig_Gui(true, false);
                }
                if (jobject.mmWaveDevices[num].monitoringConfig.rlRxIfStageMonConf_t != null && jobject.mmWaveDevices[num].monitoringConfig.rlRxIfStageMonConf_t.isConfigured == 1)
                {
                    m_GuiManager.ScriptOps.iSetRXIFStageMonConfig_Gui(true, false);
                }
                if (jobject.mmWaveDevices[num].monitoringConfig.rlExtAnaSignalsMonConf_t != null && jobject.mmWaveDevices[num].monitoringConfig.rlExtAnaSignalsMonConf_t.isConfigured == 1)
                {
                    m_GuiManager.ScriptOps.iSetExternalAnalogSignalsMonConfig_Gui(true, false);
                }
                if (jobject.mmWaveDevices[num].monitoringConfig.rlPmClkLoIntAnaSignalsMonConf_t != null && jobject.mmWaveDevices[num].monitoringConfig.rlPmClkLoIntAnaSignalsMonConf_t.isConfigured == 1)
                {
                    m_GuiManager.ScriptOps.iSetPMCLKLOIntAnalogSigMonConfig_Gui(true, false);
                }
                if (jobject.mmWaveDevices[num].monitoringConfig.rlGpadcIntAnaSignalsMonConf_t != null && jobject.mmWaveDevices[num].monitoringConfig.rlGpadcIntAnaSignalsMonConf_t.isConfigured == 1)
                {
                    m_GuiManager.ScriptOps.iSetGPADCIntAnalogSigMonConfig_Gui(true, false);
                }
                if (jobject.mmWaveDevices[num].monitoringConfig.rlPllContrVoltMonConf_t != null && jobject.mmWaveDevices[num].monitoringConfig.rlPllContrVoltMonConf_t.isConfigured == 1)
                {
                    m_GuiManager.ScriptOps.iSetPLLControlVolMonConfig_Gui(true, false);
                }
                if (jobject.mmWaveDevices[num].monitoringConfig.rlDualClkCompMonConf_t != null && jobject.mmWaveDevices[num].monitoringConfig.rlDualClkCompMonConf_t.isConfigured == 1)
                {
                    m_GuiManager.ScriptOps.iSetDCCMonConfig_Gui(true, false);
                }
                if (jobject.mmWaveDevices[num].monitoringConfig.rlAllTxIntAnaSignalsMonConf_t != null && jobject.mmWaveDevices[num].monitoringConfig.rlAllTxIntAnaSignalsMonConf_t.isConfigured == 1)
                {
                    m_GuiManager.ScriptOps.iSetTX1IntAnalogSigMonConfig_Gui(true, false);
                    m_GuiManager.ScriptOps.iSetTX2IntAnalogSigMonConfig_Gui(true, false);
                    if (!GlobalRef.g_AR16xxDevice || GlobalRef.g_AR1843Device)
                    {
                        m_GuiManager.ScriptOps.iSetTX3IntAnalogSigMonConfig_Gui(true, false);
                    }
                }
                if (jobject.mmWaveDevices[num].monitoringConfig.rlRxIntAnaSignalsMonConf_t != null && jobject.mmWaveDevices[num].monitoringConfig.rlRxIntAnaSignalsMonConf_t.isConfigured == 1)
                {
                    m_GuiManager.ScriptOps.iSetRXIntAnalogSigMonConfig_Gui(true, false);
                }
            }
            if (jobject.mmWaveDevices[num].rfConfig != null)
            {
                if (jobject.mmWaveDevices[num].rfConfig.rlDynChirpCfgs != null && jobject.mmWaveDevices[num].rfConfig.rlDynChirpCfgs.Count != 0)
                {
                    count2 = jobject.mmWaveDevices[num].rfConfig.rlDynChirpCfgs.Count;
                    for (int i = 0; i < count2; i++)
                    {
                        ScriptOps.m_MainForm.DynamicChirpConfig.UpdateDynamicChirpDataGui(jobject, num, i);
                        m_GuiManager.ScriptOps.iDynamicChirpConfig_Gui(true, false);
                    }
                }
                if (jobject.mmWaveDevices[num].rfConfig.rlDynPerChirpPhShftCfgs != null && jobject.mmWaveDevices[num].rfConfig.rlDynPerChirpPhShftCfgs.Count != 0 && (GlobalRef.g_AR12xxDevice || GlobalRef.g_AR1843Device))
                {
                    count2 = jobject.mmWaveDevices[num].rfConfig.rlDynPerChirpPhShftCfgs.Count;
                    for (int i = 0; i < count2; i++)
                    {
                        ScriptOps.m_MainForm.DynamicChirpConfig.UpdateDynamicPerChirpPhaseShiftGui(jobject, num, i);
                        m_GuiManager.ScriptOps.iDynamicPerChirpPhaseShifterConfig_Gui(true, false);
                    }
                }
                if (jobject.mmWaveDevices[num].rfConfig.rllatentFault_t != null && jobject.mmWaveDevices[num].rfConfig.rllatentFault_t.isConfigured == 1)
                {
                    m_GuiManager.ScriptOps.iSetMSSLatentFaultMonConfig_Gui(true, false);
                }
                if (jobject.mmWaveDevices[num].rfConfig.rlperiodicTest_t != null && jobject.mmWaveDevices[num].rfConfig.rlperiodicTest_t.isConfigured == 1)
                {
                    m_GuiManager.ScriptOps.iSetMSSPeriodicTestMonConfig_Gui(true, false);
                }
            }
            jsonConfigInProgress = false;
            GlobalRef.jsonExecution = false;
            string msg34 = string.Format("mmWave Device {0} Configuration is Executed. DONE.", num);
            GlobalRef.LuaWrapper.PrintWarning(msg34);
            if (!GlobalRef.g_2ChipCascade && !GlobalRef.g_4ChipCascade)
            {
                if (GlobalRef.jobject.configGenerator.createdBy != "mmWaveSensingEstimator")
                {
                    MessageBox.Show("Choose the Raw ADC Output bin file in Sensor Configuration Tab. Click on DCA1000 ARM Configuration and Trigger the frame.", "Next Step");
                }
                else
                {
                    MessageBox.Show("Configure DCA1000. Choose the Raw ADC Output bin file in Sensor Configuration Tab. Click on DCA1000 ARM Configuration and Trigger the frame.", "Next Step");
                }
            }
            return 0;
        }

        public bool iChecks()
        {
            return ScriptOps.m_MainForm.ConnectTab.DeviceConnected();
        }

        public int NumberDevices()
        {
            return ScriptOps.m_MainForm.ConnectTab.NoDeviceConnected();
        }

        public int iSetBpmChirpConfig_Gui(bool is_starting_op, bool is_ending_op)
        {
            ScriptOps.m_MainForm.BpmConfigTab.UpdateBpmChirpConfigData();
            iDisableTabButtons();
            ScriptOps.m_MainForm.SetOvBtEnblTimer(true);
            int result = iSetBpmChirpConfig_Impl(is_starting_op, is_ending_op);
            iEnableTabButtons();
            ScriptOps.m_MainForm.SetOvBtEnblTimer(false);
            return result;
        }

        public int iSetPerChirpPhaseShifterConfig_Gui(bool is_starting_op, bool is_ending_op)
        {
            ScriptOps.m_MainForm.BpmConfigTab.UpdatePerChirpPhaseShifterConfigData();
            iDisableTabButtons();
            ScriptOps.m_MainForm.SetOvBtEnblTimer(true);
            int result = iSetPerChirpPhaseShifterpConfig_Impl(is_starting_op, is_ending_op);
            iEnableTabButtons();
            ScriptOps.m_MainForm.SetOvBtEnblTimer(false);
            return result;
        }

        public int iSetAdvanceBPMPatternConfig_Gui(bool is_starting_op, bool is_ending_op)
        {
            ScriptOps.m_MainForm.BpmConfigTab.UpdateAdvanceBPMPatternConfigData();
            iDisableTabButtons();
            ScriptOps.m_MainForm.SetOvBtEnblTimer(true);
            int result = iSetAdvanceBPMPatternConfig_Impl(is_starting_op, is_ending_op);
            iEnableTabButtons();
            ScriptOps.m_MainForm.SetOvBtEnblTimer(false);
            return result;
        }

        public int iSetDynamicCharReportConfig_Gui(bool is_starting_op, bool is_ending_op)
        {
            ScriptOps.m_MainForm.RFStatusTab.UpdateRFCharReportConfigData();
            iDisableTabButtons();
            ScriptOps.m_MainForm.SetOvBtEnblTimer(true);
            int result = iSetRFCharReportConfig_Impl(is_starting_op, is_ending_op);
            iEnableTabButtons();
            ScriptOps.m_MainForm.SetOvBtEnblTimer(false);
            return result;
        }

        public int iSetRFStatusConfig_Gui(bool is_starting_op, bool is_ending_op)
        {
            ScriptOps.m_MainForm.RFStatusTab.UpdateRFStatusConfigData();
            iDisableTabButtons();
            ScriptOps.m_MainForm.SetOvBtEnblTimer(true);
            int result = iSetRFStatusConfig_Impl(is_starting_op, is_ending_op);
            iEnableTabButtons();
            ScriptOps.m_MainForm.SetOvBtEnblTimer(false);
            return result;
        }

        public int iSetGPADCExternalMeasurementConfig_Gui(bool is_starting_op, bool is_ending_op)
        {
            ScriptOps.m_MainForm.ClibTab.UpdateGPADCMeasurementForExtIPConfigData();
            iDisableTabButtons();
            ScriptOps.m_MainForm.SetOvBtEnblTimer(true);
            int result = m000086(is_starting_op, is_ending_op);
            iEnableTabButtons();
            ScriptOps.m_MainForm.SetOvBtEnblTimer(false);
            return result;
        }

        public int iSetRFCharReportConfig_Gui(bool is_starting_op, bool is_ending_op)
        {
            ScriptOps.m_MainForm.RFStatusTab.UpdateRFCharReportConfigData();
            iDisableTabButtons();
            ScriptOps.m_MainForm.SetOvBtEnblTimer(true);
            int result = iSetRFCharReportConfig_Impl(is_starting_op, is_ending_op);
            iEnableTabButtons();
            ScriptOps.m_MainForm.SetOvBtEnblTimer(false);
            return result;
        }

        public int iGetRFDynamicCharReportConfig_Gui(bool is_starting_op, bool is_ending_op)
        {
            iDisableTabButtons();
            ScriptOps.m_MainForm.SetOvBtEnblTimer(true);
            int result = iGetRFDynamicCharReportConfig_Impl(is_starting_op, is_ending_op);
            iEnableTabButtons();
            ScriptOps.m_MainForm.SetOvBtEnblTimer(false);
            return result;
        }

        public int iGetDFEStaticReportDataConfig_Gui(bool is_starting_op, bool is_ending_op)
        {
            iDisableTabButtons();
            ScriptOps.m_MainForm.SetOvBtEnblTimer(true);
            int result = iGetDFEStaticReportDataConfig_Impl(is_starting_op, is_ending_op);
            iEnableTabButtons();
            ScriptOps.m_MainForm.SetOvBtEnblTimer(false);
            return result;
        }

        public int iSetRFCalibMonConfig_Gui(bool is_starting_op, bool is_ending_op)
        {
            ScriptOps.m_MainForm.RFStatusTab.UpdateRFCalibMonConfigData();
            iDisableTabButtons();
            ScriptOps.m_MainForm.SetOvBtEnblTimer(true);
            int result = iSetRFCalibMonConfig_Impl(is_starting_op, is_ending_op);
            iEnableTabButtons();
            ScriptOps.m_MainForm.SetOvBtEnblTimer(false);
            return result;
        }

        public int iSetRFClibDisableConfig_Gui(bool is_starting_op, bool is_ending_op)
        {
            ScriptOps.m_MainForm.RFStatusTab.UpdateRFCalibEnaDisConfigData();
            iDisableTabButtons();
            ScriptOps.m_MainForm.SetOvBtEnblTimer(true);
            int result = iSetRFClibDisableConfig_Impl(is_starting_op, is_ending_op);
            iEnableTabButtons();
            ScriptOps.m_MainForm.SetOvBtEnblTimer(false);
            return result;
        }

        public int m0000a7(bool is_starting_op, bool is_ending_op)
        {
            ScriptOps.m_MainForm.RFStatusTab.UpdatePDTrimGHZConfigData();
            iDisableTabButtons();
            ScriptOps.m_MainForm.SetOvBtEnblTimer(true);
            int result = m000087(is_starting_op, is_ending_op);
            iEnableTabButtons();
            ScriptOps.m_MainForm.SetOvBtEnblTimer(false);
            return result;
        }

        public int iMeasurePDPowerConfig_Gui(bool is_starting_op, bool is_ending_op)
        {
            ScriptOps.m_MainForm.RFStatusTab.UpdateMeasurePDPowerConfigData();
            iDisableTabButtons();
            ScriptOps.m_MainForm.SetOvBtEnblTimer(true);
            int result = iMeasurePDPowerConfig_Impl(is_starting_op, is_ending_op);
            iEnableTabButtons();
            ScriptOps.m_MainForm.SetOvBtEnblTimer(false);
            return result;
        }

        public int iSynthFreqLinearityMonConfig_Gui(bool is_starting_op, bool is_ending_op)
        {
            ScriptOps.m_MainForm.RFStatusTab.UpdateSynthFreqLinearityMonConfigData();
            iDisableTabButtons();
            ScriptOps.m_MainForm.SetOvBtEnblTimer(true);
            int result = iSynthFreqLinearityMonConfig_Impl(is_starting_op, is_ending_op);
            iEnableTabButtons();
            ScriptOps.m_MainForm.SetOvBtEnblTimer(false);
            return result;
        }

        public int iSetTempertureSensorTempDataConfig_Gui(bool is_starting_op, bool is_ending_op)
        {
            ScriptOps.m_MainForm.RFStatusTab.UpdateTempertureSensorTempConfigData();
            iDisableTabButtons();
            ScriptOps.m_MainForm.SetOvBtEnblTimer(true);
            int result = iSetTempertureSensorTempConfig_Impl(is_starting_op, is_ending_op);
            iEnableTabButtons();
            ScriptOps.m_MainForm.SetOvBtEnblTimer(false);
            return result;
        }

        public int iAdvncedFrameConfig_Gui(bool is_starting_op, bool is_ending_op)
        {
            ScriptOps.m_MainForm.AdvanceFrameConfigTab.UpdateAdvncedFrameConfigData();
            iDisableTabButtons();
            ScriptOps.m_MainForm.SetOvBtEnblTimer(true);
            GlobalRef.g_AdvancedFrame = true;
            int result = iCreateAdvanceFrameConfig_Impl(is_starting_op, is_ending_op);
            iEnableTabButtons();
            ScriptOps.m_MainForm.SetOvBtEnblTimer(false);
            return result;
        }

        public int iLoopBuckBurstConfig_Gui(bool is_starting_op, bool is_ending_op)
        {
            ScriptOps.m_MainForm.AdvanceFrameConfigTab.UpdateLoopBackBurstConfigData();
            iDisableTabButtons();
            ScriptOps.m_MainForm.SetOvBtEnblTimer(true);
            int result = iLoopBackBurstConfig_Impl(is_starting_op, is_ending_op);
            iEnableTabButtons();
            ScriptOps.m_MainForm.SetOvBtEnblTimer(false);
            return result;
        }

        public int iSoftwareSubFrameStartConfig_Gui(bool is_starting_op, bool is_ending_op)
        {
            ScriptOps.m_MainForm.AdvanceFrameConfigTab.UpdateSWSubFrameStartConfigData();
            iDisableTabButtons();
            ScriptOps.m_MainForm.SetOvBtEnblTimer(true);
            int result = iSWSubFrameStartStopConfig_Impl(is_starting_op, is_ending_op);
            iEnableTabButtons();
            ScriptOps.m_MainForm.SetOvBtEnblTimer(false);
            return result;
        }

        public int iCalibDataRestoreAndSaveConfig_Gui(bool is_starting_op, bool is_ending_op)
        {
            ScriptOps.m_MainForm.CalibDataReStore.UpdateCalibDataRestoreAndSaveConfigData();
            iDisableTabButtons();
            ScriptOps.m_MainForm.SetOvBtEnblTimer(true);
            int result = iCalibDataRestoreAndSaveConfig_Impl(is_starting_op, is_ending_op);
            iEnableTabButtons();
            ScriptOps.m_MainForm.SetOvBtEnblTimer(false);
            return result;
        }

        public int iPhaseShifterCalibGetConfig_Gui(bool is_starting_op, bool is_ending_op)
        {
            ScriptOps.m_MainForm.CalibDataReStore.UpdatePhaseShifterCalibDataSaveConfigData();
            iDisableTabButtons();
            ScriptOps.m_MainForm.SetOvBtEnblTimer(true);
            int result = iPhaseShifterCalibGetConfig_Impl(is_starting_op, is_ending_op);
            iEnableTabButtons();
            ScriptOps.m_MainForm.SetOvBtEnblTimer(false);
            return result;
        }

        public int iInterChirpBlockControlsConfig_Gui(bool is_starting_op, bool is_ending_op)
        {
            ScriptOps.m_MainForm.InterChirpBlockControls.UpdateInterChirpBlockControlsConfigData();
            iDisableTabButtons();
            ScriptOps.m_MainForm.SetOvBtEnblTimer(true);
            int result = iInterChirpBlockControlsConfig_Impl(is_starting_op, is_ending_op);
            iEnableTabButtons();
            ScriptOps.m_MainForm.SetOvBtEnblTimer(false);
            return result;
        }

        public int iCalibDataRestoreConfig_Gui(bool is_starting_op, bool is_ending_op)
        {
            ScriptOps.m_MainForm.CalibDataReStore.UpdateCalibDataRestoreConfigData();
            iDisableTabButtons();
            ScriptOps.m_MainForm.SetOvBtEnblTimer(true);
            int result = iCalibDataRestoreConfig_Impl(is_starting_op, is_ending_op);
            iEnableTabButtons();
            ScriptOps.m_MainForm.SetOvBtEnblTimer(false);
            return result;
        }

        public int iPhaseShifterCalibDataRestoreConfig_Gui(bool is_starting_op, bool is_ending_op)
        {
            ScriptOps.m_MainForm.CalibDataReStore.UpdatePhaseShifterCalibDataRestoreConfigData();
            iDisableTabButtons();
            ScriptOps.m_MainForm.SetOvBtEnblTimer(true);
            int result = iphaseShifterCalibDataRestoreConfig_Impl(is_starting_op, is_ending_op);
            iEnableTabButtons();
            ScriptOps.m_MainForm.SetOvBtEnblTimer(false);
            return result;
        }

        public int iMCUClockOutConfig_Gui(bool is_starting_op, bool is_ending_op)
        {
            ScriptOps.m_MainForm.ClockOutConfig.UpdateMCUClockOutConfigData();
            iDisableTabButtons();
            ScriptOps.m_MainForm.SetOvBtEnblTimer(true);
            int result = iMCUClockOutConfig_Impl(is_starting_op, is_ending_op);
            iEnableTabButtons();
            ScriptOps.m_MainForm.SetOvBtEnblTimer(false);
            return result;
        }

        public int iPMICClockOutConfig_Gui(bool is_starting_op, bool is_ending_op)
        {
            ScriptOps.m_MainForm.ClockOutConfig.UpdatePMICClockOutConfigData();
            iDisableTabButtons();
            ScriptOps.m_MainForm.SetOvBtEnblTimer(true);
            int result = iPMICClockOutConfig_Impl(is_starting_op, is_ending_op);
            iEnableTabButtons();
            ScriptOps.m_MainForm.SetOvBtEnblTimer(false);
            return result;
        }

        public int iDynamicChirpConfig_Gui(bool is_starting_op, bool is_ending_op)
        {
            ScriptOps.m_MainForm.DynamicChirpConfig.UpdateDynamicChirpConfigData();
            iDisableTabButtons();
            ScriptOps.m_MainForm.SetOvBtEnblTimer(true);
            int result = iDynamicChirpConfig_Impl(is_starting_op, is_ending_op);
            iEnableTabButtons();
            ScriptOps.m_MainForm.SetOvBtEnblTimer(false);
            return result;
        }

        public int iDynamicPerChirpPhaseShifterConfig_Gui(bool is_starting_op, bool is_ending_op)
        {
            ScriptOps.m_MainForm.DynamicChirpConfig.UpdateDynamicPerChirpPhaseShifterConfigData();
            iDisableTabButtons();
            ScriptOps.m_MainForm.SetOvBtEnblTimer(true);
            int result = iDynamicPerChirpPhaseShifterChirpConfig_Impl(is_starting_op, is_ending_op);
            iEnableTabButtons();
            ScriptOps.m_MainForm.SetOvBtEnblTimer(false);
            return result;
        }

        public int iDynamicChirpEnableConfig_Gui(bool is_starting_op, bool is_ending_op)
        {
            ScriptOps.m_MainForm.DynamicChirpConfig.UpdateDynamicChirpEnableConfigData();
            iDisableTabButtons();
            ScriptOps.m_MainForm.SetOvBtEnblTimer(true);
            int result = iDynamicChirpEnableConfig_Impl(is_starting_op, is_ending_op);
            iEnableTabButtons();
            ScriptOps.m_MainForm.SetOvBtEnblTimer(false);
            return result;
        }

        public int iRampTimingConfig_Gui(bool is_starting_op, bool is_ending_op)
        {
            ScriptOps.m_MainForm.RampTimingCfgTab.UpdateRampTimigConfigData();
            iDisableTabButtons();
            ScriptOps.m_MainForm.SetOvBtEnblTimer(true);
            int result = iRampTimingConfig_Impl(is_starting_op, is_ending_op);
            iEnableTabButtons();
            ScriptOps.m_MainForm.SetOvBtEnblTimer(false);
            return result;
        }

        public int iGetPMICBuckVoltageConfig_Gui(bool is_starting_op, bool is_ending_op)
        {
            ScriptOps.m_MainForm.PMICTab.UpdatePMICGetConfigData();
            iDisableTabButtons();
            ScriptOps.m_MainForm.SetOvBtEnblTimer(true);
            int result = iGetPMICBuckVoltageConfig_Impl(is_starting_op, is_ending_op);
            iEnableTabButtons();
            ScriptOps.m_MainForm.SetOvBtEnblTimer(false);
            return result;
        }

        public int iSetPMICBuckVoltageConfig_Gui(bool is_starting_op, bool is_ending_op)
        {
            ScriptOps.m_MainForm.PMICTab.UpdatePMICVoltageConfigData();
            iDisableTabButtons();
            ScriptOps.m_MainForm.SetOvBtEnblTimer(true);
            int result = iSetPMICBuckVoltageConfig_Impl(is_starting_op, is_ending_op);
            iEnableTabButtons();
            ScriptOps.m_MainForm.SetOvBtEnblTimer(false);
            return result;
        }

        public int iSetMultiplePMICDevicesConfig_Gui(bool is_starting_op, bool is_ending_op)
        {
            ScriptOps.m_MainForm.PMICTab.UpdatePMICSelectConfigData();
            iDisableTabButtons();
            ScriptOps.m_MainForm.SetOvBtEnblTimer(true);
            int result = iSetMultiplePMICDevicesConfig_Impl(is_starting_op, is_ending_op);
            iEnableTabButtons();
            ScriptOps.m_MainForm.SetOvBtEnblTimer(false);
            return result;
        }

        public int iSetPMICRegConfig_Gui(bool is_starting_op, bool is_ending_op)
        {
            ScriptOps.m_MainForm.PMICTab.UpdateSetPMICRegConfigData();
            iDisableTabButtons();
            ScriptOps.m_MainForm.SetOvBtEnblTimer(true);
            int result = iSetPMICRegConfig_Impl(is_starting_op, is_ending_op);
            iEnableTabButtons();
            ScriptOps.m_MainForm.SetOvBtEnblTimer(false);
            return result;
        }

        public int iGetPMICRegConfig_Gui(bool is_starting_op, bool is_ending_op)
        {
            ScriptOps.m_MainForm.PMICTab.UpdateGetPMICRegConfigData();
            iDisableTabButtons();
            ScriptOps.m_MainForm.SetOvBtEnblTimer(true);
            int result = iGetPMICRegConfig_Impl(is_starting_op, is_ending_op);
            iEnableTabButtons();
            ScriptOps.m_MainForm.SetOvBtEnblTimer(false);
            return result;
        }

        public int iSetTransferFilesUsingWinSCP_Gui(bool is_starting_op, bool is_ending_op)
        {
            iDisableTabButtons();
            ScriptOps.m_MainForm.SetOvBtEnblTimer(true);
            int result = TransferFilesUsingWinSCP();
            iEnableTabButtons();
            ScriptOps.m_MainForm.SetOvBtEnblTimer(false);
            return result;
        }

        public int TransferFilesUsingWinSCPAsync()
        {
            new del_i_v(TransferFilesUsingWinSCP).BeginInvoke(null, null);
            if (ScriptOps.m_MainForm.ChirpConfigTab.iHandleDownloadFilesProgress(false))
            {
                return 0;
            }
            return -1;
        }

        public int CopyMatlabLogFileForTDA(string logFileName)
        {
            string directoryName = Path.GetDirectoryName(Application.StartupPath);
            string text = string.Concat(new string[]
            {
                directoryName + "\\PostProc\\LogFile.txt"
            });
            string directoryName2 = Path.GetDirectoryName(Application.StartupPath);
            string destFileName = string.Concat(new string[]
            {
                directoryName2 + "\\PostProc\\" + logFileName
            }) + "\\" + logFileName + "_LogFile.txt";
            if (File.Exists(text))
            {
                File.Copy(text, destFileName, true);
            }
            return 0;
        }

        public int TransferFilesUsingWinSCP()
        {
            int result = -1;
            if (GlobalRef.g_2ChipCascade || GlobalRef.g_4ChipCascade)
            {
                GlobalRef.GuiManager.MainTsForm.ChirpConfigTab.DownlaodFilesAbort = false;
                GlobalRef.g_numCaptureDirectoryFiles = 0U;
                GlobalRef.g_numCaptureFilesTransferred = 0U;
                SessionOptions sessionOptions = new SessionOptions
                {
                    Protocol = Protocol.Scp,
                    HostName = GlobalRef.f0002cf,
                    UserName = "root",
                    GiveUpSecurityAndAcceptAnySshHostKey = true
                };
                sessionOptions.AddRawSettings("SendBuf", "0");
                sessionOptions.AddRawSettings("SshSimple", "0");
                string[] array = ScriptOps.m_MainForm.ChirpConfigTab.getCapturePath().Split(new char[]
                {
                    '\\'
                });
                int num = array.Length;
                string fileNameWithoutExtension = Path.GetFileNameWithoutExtension(array[num - 1]);
                string text = string.Empty;
                for (int i = 0; i < num - 1; i++)
                {
                    text = text + array[i] + "\\";
                }
                text += fileNameWithoutExtension;
                string text2 = "/mnt/ssd/" + fileNameWithoutExtension;
                if (!Directory.Exists(text))
                {
                    Directory.CreateDirectory(text);
                }
                try
                {
                    ScriptOps.c0002b6 c0002b = new ScriptOps.c0002b6();
                    c0002b.session = new Session();
                    try
                    {
                        c0002b.session.FileTransferProgress += c0002b.m0000ac;
                        c0002b.session.Open(sessionOptions);
                        IEnumerable<RemoteFileInfo> enumerable = c0002b.session.EnumerateRemoteFiles(text2, null, EnumerationOptions.AllDirectories | EnumerationOptions.EnumerateDirectories);
                        GlobalRef.g_numCaptureDirectoryFiles = (uint)enumerable.Count<RemoteFileInfo>();
                        if (GlobalRef.g_numCaptureDirectoryFiles == 0U)
                        {
                            MessageBox.Show("The no of files captured in the directory is zero! Nothing to transfer!");
                            return -1;
                        }
                        new del_b_b(ScriptOps.m_MainForm.ChirpConfigTab.iHandleDownloadFilesProgress).BeginInvoke(false, null, null);
                        foreach (RemoteFileInfo remoteFileInfo in enumerable)
                        {
                            string text3 = RemotePath.TranslateRemotePathToLocal(remoteFileInfo.FullName, text2, text);
                            if (remoteFileInfo.IsDirectory)
                            {
                                if (!Directory.Exists(text3))
                                {
                                    Directory.CreateDirectory(text3);
                                }
                            }
                            else
                            {
                                string msg = string.Format("Downloading file {0}...", remoteFileInfo.FullName);
                                GlobalRef.LuaWrapper.PrintWarning(msg);
                                string remotePath = RemotePath.EscapeFileMask(remoteFileInfo.FullName);
                                TransferOperationResult files = c0002b.session.GetFiles(remotePath, text3, false, null);
                                if (!files.IsSuccess)
                                {
                                    msg = string.Format("Error downloading file {0} from SSD: {1}", remoteFileInfo.FullName, files.Failures[0].Message);
                                    GlobalRef.LuaWrapper.PrintError(msg);
                                }
                                else
                                {
                                    GlobalRef.g_numCaptureFilesTransferred += 1U;
                                    msg = string.Format("Downloaded file {0} from SSD!", remoteFileInfo.FullName);
                                    GlobalRef.LuaWrapper.PrintWarning(msg);
                                }
                            }
                        }
                        c0002b.session.Close();
                        c0002b.session.Dispose();
                        string directoryName = Path.GetDirectoryName(Application.StartupPath);
                        string text4 = string.Concat(new string[]
                        {
                            directoryName + "\\PostProc\\LogFile.txt"
                        });
                        string destFileName = text + "\\" + fileNameWithoutExtension + "_LogFile.txt";
                        if (File.Exists(text4))
                        {
                            File.Copy(text4, destFileName, true);
                        }
                        string jsonPath_Capture = text + "\\" + fileNameWithoutExtension + ".setup.json";
                        string jsonPath_mmwave = text + "\\" + fileNameWithoutExtension + ".mmwave.json";
                        ScriptOps.m_MainForm.Import_Export.TransferFiles_ExportJSON(jsonPath_Capture, jsonPath_mmwave);
                        m_GuiManager.RecordLog(13, "Transfer of the Captured files COMPLETE!");
                        result = 0;
                    }
                    finally
                    {
                        if (c0002b.session != null)
                        {
                            ((IDisposable)c0002b.session).Dispose();
                        }
                    }
                    return result;
                }
                catch (Exception ex)
                {
                    m_GuiManager.Error(ex.Message);
                    return -1;
                }
            }
            GlobalRef.LuaWrapper.PrintError("The transfer of files using WinSCP is valid only for Cascade Chip");
            result = -1;
            return result;
        }

        public int iSetFrameConfig_Gui(bool is_starting_op, bool is_ending_op)
        {
            ScriptOps.m_MainForm.ChirpConfigTab.UpdateChirpConfigData();
            iDisableTabButtons();
            ScriptOps.m_MainForm.SetOvBtEnblTimer(true);
            GlobalRef.g_AdvancedFrame = false;
            GlobalRef.g_AdvancedNumFrameHandle = false;
            int result = iSetFrameConfig_Impl(is_starting_op, is_ending_op);
            iEnableTabButtons();
            ScriptOps.m_MainForm.SetOvBtEnblTimer(false);
            return result;
        }

        public int iSetProfileConfig_Gui(bool is_starting_op, bool is_ending_op)
        {
            ScriptOps.m_MainForm.ChirpConfigTab.UpdateChirpConfigData();
            if (!ScriptOps.m_MainForm.ChirpConfigTab.DoParamCheck())
            {
                return -2;
            }
            iDisableTabButtons();
            ScriptOps.m_MainForm.SetOvBtEnblTimer(true);
            int result = iSetProfileConfig_Impl(is_starting_op, is_ending_op);
            iEnableTabButtons();
            ScriptOps.m_MainForm.SetOvBtEnblTimer(false);
            return result;
        }

        public int iSetDynamicPowerSaveConfig_Gui(bool is_starting_op, bool is_ending_op)
        {
            ScriptOps.m_MainForm.ChirpConfigTab.UpdateDynamicPowerSaveConfigData();
            iDisableTabButtons();
            ScriptOps.m_MainForm.SetOvBtEnblTimer(true);
            int result = iSetDynamicPowerSaveConfig_Impl(is_starting_op, is_ending_op);
            iEnableTabButtons();
            ScriptOps.m_MainForm.SetOvBtEnblTimer(false);
            return result;
        }

        public int iSetRFPALoopBackConfig_Gui(bool is_starting_op, bool is_ending_op)
        {
            ScriptOps.m_MainForm.LoopBack.UpdateRFPALoopBackConfigDataFromGUI();
            iDisableTabButtons();
            ScriptOps.m_MainForm.SetOvBtEnblTimer(true);
            int result = iSetRFPALoopBackConfig_Impl(is_starting_op, is_ending_op);
            iEnableTabButtons();
            ScriptOps.m_MainForm.SetOvBtEnblTimer(false);
            return result;
        }

        public int iSetRFPSLoopBackConfig_Gui(bool is_starting_op, bool is_ending_op)
        {
            ScriptOps.m_MainForm.LoopBack.UpdateRFPSLoopBackConfigDataFromGUI();
            iDisableTabButtons();
            ScriptOps.m_MainForm.SetOvBtEnblTimer(true);
            int result = iSetRFPSLoopBackConfig_Impl(is_starting_op, is_ending_op);
            iEnableTabButtons();
            ScriptOps.m_MainForm.SetOvBtEnblTimer(false);
            return result;
        }

        public int iSetRFIFLoopBackConfig_Gui(bool is_starting_op, bool is_ending_op)
        {
            ScriptOps.m_MainForm.LoopBack.UpdateRFIFLoopBackConfigDataFromGUI();
            iDisableTabButtons();
            ScriptOps.m_MainForm.SetOvBtEnblTimer(true);
            int result = iSetRFIFLoopBackConfig_Impl(is_starting_op, is_ending_op);
            iEnableTabButtons();
            ScriptOps.m_MainForm.SetOvBtEnblTimer(false);
            return result;
        }

        public int iSetExternalFilterProgConfig_Gui(bool is_starting_op, bool is_ending_op)
        {
            ScriptOps.m_MainForm.ExternalFilterProgramming.UpdateExternalFilterProgConfigDataFromGUI();
            iDisableTabButtons();
            ScriptOps.m_MainForm.SetOvBtEnblTimer(true);
            int result = iSetExternalFilterConfig_Impl(is_starting_op, is_ending_op);
            iEnableTabButtons();
            ScriptOps.m_MainForm.SetOvBtEnblTimer(false);
            return result;
        }

        public int iSetExternalFilterCoefficientRAMConfig_Gui(bool is_starting_op, bool is_ending_op)
        {
            ScriptOps.m_MainForm.ExternalFilterProgramming.UpdateExternalFilterCoeffRAMConfigDataFromGUI();
            iDisableTabButtons();
            ScriptOps.m_MainForm.SetOvBtEnblTimer(true);
            int result = iSetProgFilterCoeffRAMConfig_Impl(is_starting_op, is_ending_op);
            iEnableTabButtons();
            ScriptOps.m_MainForm.SetOvBtEnblTimer(false);
            return result;
        }

        public int iSetContStrConfig_Gui(bool is_starting_op, bool is_ending_op)
        {
            ScriptOps.m_MainForm.ContStreamingTab.UpdateContStrData();
            iDisableTabButtons();
            ScriptOps.m_MainForm.SetOvBtEnblTimer(true);
            int result = iSetContStrConfig_Impl(is_starting_op, is_ending_op);
            iEnableTabButtons();
            ScriptOps.m_MainForm.SetOvBtEnblTimer(false);
            return result;
        }

        public int iSetBasicConfigurationForAnalysisConfig_Gui(bool is_starting_op, bool is_ending_op)
        {
            ScriptOps.m_MainForm.ContStreamingTab.UpdateBasicConfigForAnalysisData();
            iDisableTabButtons();
            ScriptOps.m_MainForm.SetOvBtEnblTimer(true);
            int result = iSetBasicConfigurationForAnalysisConfig_Impl(is_starting_op, is_ending_op);
            iEnableTabButtons();
            ScriptOps.m_MainForm.SetOvBtEnblTimer(false);
            return result;
        }

        public int iSetMeasureTxPowerConfig_Gui(bool is_starting_op, bool is_ending_op)
        {
            ScriptOps.m_MainForm.ContStreamingTab.UpdateMeasureTheTxPowerData();
            iDisableTabButtons();
            ScriptOps.m_MainForm.SetOvBtEnblTimer(true);
            int result = iSetMeasureTheTxPowerConfig_Impl(is_starting_op, is_ending_op);
            iEnableTabButtons();
            ScriptOps.m_MainForm.SetOvBtEnblTimer(false);
            return result;
        }

        public int iEnblContStrConfig_Gui(bool is_starting_op, bool is_ending_op, ushort RadarDeviceId)
        {
            GlobalRef.g_RadarDeviceId = (uint)RadarDeviceId;
            ScriptOps.m_MainForm.ContStreamingTab.UpdateContStrData();
            iDisableTabButtons();
            ScriptOps.m_MainForm.SetOvBtEnblTimer(true);
            int result = iEnbContStrConfig_Impl(is_starting_op, is_ending_op);
            iEnableTabButtons();
            ScriptOps.m_MainForm.SetOvBtEnblTimer(false);
            return result;
        }

        public int iStartContStrConfig_Gui(bool is_starting_op, bool is_ending_op)
        {
            string msg = string.Format("Entered iStartContStrConfig_Gui()", new object[0]);
            m_GuiManager.Log(msg);
            ScriptOps.m_MainForm.ContStreamingTab.UpdateContStrData();
            iDisableTabButtons();
            ScriptOps.m_MainForm.SetOvBtEnblTimer(true);
            int result = iStartMtlbFrContProcessing(is_starting_op, is_ending_op);
            iEnableTabButtons();
            ScriptOps.m_MainForm.SetOvBtEnblTimer(false);
            return result;
        }

        public int iStartContStrADCCaptureConfig_Gui(bool is_starting_op, bool is_ending_op)
        {
            if (GlobalRef.f0002d0)
            {
                iDisableTabButtons();
                ScriptOps.m_MainForm.SetOvBtEnblTimer(true);
                int result = iStartMatlabForContProcessingForADCCaptureFromCaptureCard(is_starting_op, is_ending_op);
                iEnableTabButtons();
                ScriptOps.m_MainForm.SetOvBtEnblTimer(false);
                return result;
            }
            iDisableTabButtons();
            ScriptOps.m_MainForm.SetOvBtEnblTimer(true);
            int result2 = iStartMtlbFrContProcessingForADCCapture(is_starting_op, is_ending_op);
            iEnableTabButtons();
            ScriptOps.m_MainForm.SetOvBtEnblTimer(false);
            return result2;
        }

        public int iStartContStrADCProcessAndDisplayConfig_Gui(bool is_starting_op, bool is_ending_op)
        {
            iDisableTabButtons();
            ScriptOps.m_MainForm.SetOvBtEnblTimer(true);
            int result = iStartMtlbFrContProcessingForADCDataProcessingANdDisplay(is_starting_op, is_ending_op);
            iEnableTabButtons();
            ScriptOps.m_MainForm.SetOvBtEnblTimer(false);
            return result;
        }

        public int iStartCaptureCardContStrADCProcessAndDisplayConfig_Gui(bool is_starting_op, bool is_ending_op)
        {
            iDisableTabButtons();
            ScriptOps.m_MainForm.SetOvBtEnblTimer(true);
            int result = iStartCaptureCardMtlbFrContProcessingForADCDataProcessingANdDisplay(is_starting_op, is_ending_op);
            iEnableTabButtons();
            ScriptOps.m_MainForm.SetOvBtEnblTimer(false);
            return result;
        }

        public int iStartMeasureGainAndNFConfig_Gui(bool is_starting_op, bool is_ending_op)
        {
            iDisableTabButtons();
            ScriptOps.m_MainForm.SetOvBtEnblTimer(true);
            int result = iStartMeasureGainandNF(is_starting_op, is_ending_op);
            iEnableTabButtons();
            ScriptOps.m_MainForm.SetOvBtEnblTimer(false);
            return result;
        }

        public int iStartMeasureGainConfig_Gui(bool is_starting_op, bool is_ending_op)
        {
            ScriptOps.m_MainForm.ContStreamingTab.UpdateMeasureGainData();
            iDisableTabButtons();
            ScriptOps.m_MainForm.SetOvBtEnblTimer(true);
            int result = iStartMeasureGain(is_starting_op, is_ending_op);
            iEnableTabButtons();
            ScriptOps.m_MainForm.SetOvBtEnblTimer(false);
            return result;
        }

        public int iStartMeasureNFConfig_Gui(bool is_starting_op, bool is_ending_op)
        {
            ScriptOps.m_MainForm.ContStreamingTab.UpdateMeasureNFData();
            iDisableTabButtons();
            ScriptOps.m_MainForm.SetOvBtEnblTimer(true);
            int result = iStartMeasureNF(is_starting_op, is_ending_op);
            iEnableTabButtons();
            ScriptOps.m_MainForm.SetOvBtEnblTimer(false);
            return result;
        }

        public int iSetStopFrame_InCascadeMode_Gui(ushort RadarDeviceId, bool is_starting_op, bool is_ending_op)
        {
            GlobalRef.g_RadarDeviceId = (uint)RadarDeviceId;
            ScriptOps.m_MainForm.ChirpConfigTab.UpdateChirpConfigData();
            iDisableTabButtons();
            ScriptOps.m_MainForm.SetOvBtEnblTimer(true);
            int result = iSetStopFrame_InCascadeMode_Impl(0);
            iEnableTabButtons();
            ScriptOps.m_MainForm.SetOvBtEnblTimer(false);
            return result;
        }

        public int iSetTrigFrame_InCascadeMode_Gui(ushort RadarDeviceId, bool is_starting_op, bool is_ending_op)
        {
            GlobalRef.g_RadarDeviceId = (uint)RadarDeviceId;
            ScriptOps.m_MainForm.ChirpConfigTab.UpdateChirpConfigData();
            iDisableTabButtons();
            ScriptOps.m_MainForm.SetOvBtEnblTimer(true);
            int result = iSetTriggerFrame_InCascadeMode_Impl(0);
            iEnableTabButtons();
            ScriptOps.m_MainForm.SetOvBtEnblTimer(false);
            return result;
        }

        public int iSetTriggerFrame_InCascadeMode_Impl(int callType)
        {
            int num = -1;
            if (GlobalRef.g_NtvRS232Connect[(int)GlobalRef.g_RadarDeviceIndex] && GlobalRef.g_CasCadeDeviceSpiConnect == 0U)
            {
                num = m_TsWrapper.Calling_WriteAddr_Single(4294959848U, 1U);
                if (m_GuiManager.DllOps.itempDisconnect(false) == 0)
                {
                    string full_command = string.Format("Debug Port Disconnected", new object[0]);
                    m_GuiManager.RecordLog(0, full_command);
                    if (!GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
                    {
                        iRs232ConnectDisconnect_impl();
                    }
                }
            }
            float num2 = CalculateFrameOnTimeForFrame(m_ChirpConfigParams.fchirpStartIdx, m_ChirpConfigParams.fchirpEndIdx, (uint)m_ChirpConfigParams.loopCount);
            if (num2 > m_ChirpConfigParams.periodicity)
            {
                string str = string.Format("Frame duration needed is {0} ms\n", new object[]
                {
                    num2
                });
                string str2 = string.Format("Frame duration programmed is {0} ms \n", new object[]
                {
                    m_ChirpConfigParams.periodicity
                });
                string str3 = string.Format("ERROR:Frame duration programmed is less than what is actually needed!", new object[0]);
                MessageBox.Show(str2 + str + str3);
                return num;
            }
            if (m_RadarDeviceModeConfigParams.NumberOfRadarDevicesDetected <= 1)
            {
                string full_command2 = string.Format("ar1.StartFrame()", new object[0]);
                m_GuiManager.RecordLog(13, full_command2);
            }
            else
            {
                string full_command3 = string.Format("ar1.StartFrame_mult({0})", new object[]
                {
                    GlobalRef.g_RadarDeviceId
                });
                m_GuiManager.RecordLog(13, full_command3);
            }
            num = Imports.RadarLinkImpl_SensorStart(GlobalRef.g_RadarDeviceId);
            if ((num == 0 && ((GlobalRef.g_CasCadeDeviceSpiConnect & 1U) == 1U || (GlobalRef.g_CasCadeDeviceSpiConnect & 2U) == 2U || (GlobalRef.g_CasCadeDeviceSpiConnect & 4U) == 4U || (GlobalRef.g_CasCadeDeviceSpiConnect & 8U) == 8U)) || GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
            {
                if (GlobalRef.g_AdvancedFrame)
                {
                    if (GlobalRef.g_RadarDeviceId == 1U && m_AdvancedFrameConfigParams.NumOfFrames != 0)
                    {
                        if (m_AdvancedFrameConfigParams.NumOfSubFrames == 1)
                        {
                            int num3 = (int)m_AdvancedFrameConfigParams.SubFramePeriodicity;
                            num3 *= (int)m_AdvancedFrameConfigParams.NumOfFrames;
                            ScriptOps.m_MainForm.ChirpConfigTab.SetTrigFrameCoutTimerPeriodicity(num3);
                        }
                        else if (m_AdvancedFrameConfigParams.NumOfSubFrames == 2)
                        {
                            int num3 = (int)(m_AdvancedFrameConfigParams.SubFramePeriodicity + m_AdvancedFrameConfigParams.SubFramePeriodicity2);
                            num3 *= (int)m_AdvancedFrameConfigParams.NumOfFrames;
                            ScriptOps.m_MainForm.ChirpConfigTab.SetTrigFrameCoutTimerPeriodicity(num3);
                        }
                        else if (m_AdvancedFrameConfigParams.NumOfSubFrames == 3)
                        {
                            int num3 = (int)(m_AdvancedFrameConfigParams.SubFramePeriodicity + m_AdvancedFrameConfigParams.SubFramePeriodicity2 + m_AdvancedFrameConfigParams.SubFramePeriodicity3);
                            num3 *= (int)m_AdvancedFrameConfigParams.NumOfFrames;
                            ScriptOps.m_MainForm.ChirpConfigTab.SetTrigFrameCoutTimerPeriodicity(num3);
                        }
                        else if (m_AdvancedFrameConfigParams.NumOfSubFrames == 4)
                        {
                            int num3 = (int)(m_AdvancedFrameConfigParams.SubFramePeriodicity + m_AdvancedFrameConfigParams.SubFramePeriodicity2 + m_AdvancedFrameConfigParams.SubFramePeriodicity3 + m_AdvancedFrameConfigParams.SubFramePeriodicity4);
                            num3 *= (int)m_AdvancedFrameConfigParams.NumOfFrames;
                            ScriptOps.m_MainForm.ChirpConfigTab.SetTrigFrameCoutTimerPeriodicity(num3);
                        }
                        ScriptOps.m_MainForm.ChirpConfigTab.SetTrigFrameCoutTimer(true);
                    }
                    string full_command4 = string.Format("Status: Passed", new object[0]);
                    m_GuiManager.RecordLog(13, full_command4);
                    MatlabPostProcGuiInstance.MatlabPostProcImpl_SensorStart();
                }
                else
                {
                    if (GlobalRef.g_RadarDeviceId == 1U)
                    {
                        if (m_ChirpConfigParams.frameCount != 0)
                        {
                            ScriptOps.m_MainForm.ChirpConfigTab.SetTrigFrameCoutTimerPeriodicity((int)((float)m_ChirpConfigParams.frameCount * m_ChirpConfigParams.periodicity));
                            ScriptOps.m_MainForm.ChirpConfigTab.SetTrigFrameCoutTimer(true);
                        }
                        if (GlobalRef.f0002d0 && m_ChirpConfigParams.frameCount == 0)
                        {
                            ScriptOps.m_MainForm.ChirpConfigTab.DisableAndEnablePostProcButtonInInfiniteFrameMode(true);
                        }
                    }
                    string full_command5 = string.Format("Status: Passed", new object[0]);
                    m_GuiManager.RecordLog(13, full_command5);
                    MatlabPostProcGuiInstance.MatlabPostProcImpl_SensorStart();
                }
            }
            else if (num != 5)
            {
                string msg = string.Format("Status: Failed, Error Type: {0}", new object[]
                {
                    GetErrorType(num)
                });
                GlobalRef.LuaWrapper.PrintError(msg);
            }
            else
            {
                string full_command6 = string.Format("Status: Failed, Error Type: Frame is Already running", new object[0]);
                m_GuiManager.RecordLog(13, full_command6);
            }
            return num;
        }

        public void DisplayStackTrace()
        {
            StackTrace stackTrace = new StackTrace();
            string full_command = string.Format("Stack Trace:\n", new object[0]);
            m_GuiManager.RecordLog(2, full_command);
            for (int i = 0; i < stackTrace.FrameCount; i++)
            {
                StackFrame frame = stackTrace.GetFrame(i);
                full_command = string.Format("{0}", frame.GetMethod());
                m_GuiManager.RecordLog(2, full_command);
            }
        }

        public int iSetStopFrame_InCascadeMode_Impl(int callType)
        {
            int num;
            if (GlobalRef.g_NtvRS232Connect[(int)GlobalRef.g_RadarDeviceIndex] && GlobalRef.g_CasCadeDeviceSpiConnect == 0U)
            {
                num = m_TsWrapper.Calling_WriteAddr_Single(4294959848U, 1U);
                if (m_GuiManager.DllOps.itempDisconnect(false) == 0)
                {
                    string full_command = string.Format("Debug Port Disconnected", new object[0]);
                    m_GuiManager.RecordLog(0, full_command);
                    if (!GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
                    {
                        iRs232ConnectDisconnect_impl();
                    }
                }
            }
            if (GlobalRef.g_AdvancedFrame)
            {
                if (m_AdvancedFrameConfigParams.NumOfFrames == 0)
                {
                    if (m_RadarDeviceModeConfigParams.NumberOfRadarDevicesDetected <= 1)
                    {
                        string full_command2 = string.Format("ar1.StopFrame()", new object[0]);
                        m_GuiManager.RecordLog(13, full_command2);
                    }
                    else
                    {
                        string full_command3 = string.Format("ar1.StopFrame_mult({0})", new object[]
                        {
                            GlobalRef.g_RadarDeviceId
                        });
                        m_GuiManager.RecordLog(13, full_command3);
                    }
                    num = Imports.RadarLinkImpl_SensorStop(GlobalRef.g_RadarDeviceId);
                }
                else
                {
                    ScriptOps.m_MainForm.ChirpConfigTab.SetTrigFrameCoutTimer(false);
                    if (callType == 0)
                    {
                        if (m_RadarDeviceModeConfigParams.NumberOfRadarDevicesDetected <= 1)
                        {
                            string full_command4 = string.Format("ar1.StopFrame()", new object[0]);
                            m_GuiManager.RecordLog(13, full_command4);
                        }
                        else
                        {
                            string full_command5 = string.Format("ar1.StopFrame_mult({0})", new object[]
                            {
                                GlobalRef.g_RadarDeviceId
                            });
                            m_GuiManager.RecordLog(13, full_command5);
                        }
                        num = Imports.RadarLinkImpl_SensorStop(GlobalRef.g_RadarDeviceId);
                    }
                    else
                    {
                        string full_command6 = string.Format("Frame Ended", new object[0]);
                        m_GuiManager.RecordLog(13, full_command6);
                        num = 255;
                    }
                }
                int millisecondsTimeout = 0;
                if (m_AdvancedFrameConfigParams.NumOfSubFrames == 1)
                {
                    millisecondsTimeout = (int)m_AdvancedFrameConfigParams.SubFramePeriodicity;
                }
                else if (m_AdvancedFrameConfigParams.NumOfSubFrames == 2)
                {
                    millisecondsTimeout = (int)(m_AdvancedFrameConfigParams.SubFramePeriodicity + m_AdvancedFrameConfigParams.SubFramePeriodicity2);
                }
                else if (m_AdvancedFrameConfigParams.NumOfSubFrames == 3)
                {
                    millisecondsTimeout = (int)(m_AdvancedFrameConfigParams.SubFramePeriodicity + m_AdvancedFrameConfigParams.SubFramePeriodicity2 + m_AdvancedFrameConfigParams.SubFramePeriodicity3);
                }
                else if (m_AdvancedFrameConfigParams.NumOfSubFrames == 4)
                {
                    millisecondsTimeout = (int)(m_AdvancedFrameConfigParams.SubFramePeriodicity + m_AdvancedFrameConfigParams.SubFramePeriodicity2 + m_AdvancedFrameConfigParams.SubFramePeriodicity3 + m_AdvancedFrameConfigParams.SubFramePeriodicity4);
                }
                Thread.Sleep(millisecondsTimeout);
                if (GlobalRef.g_RadarDeviceId == 1U && (GlobalRef.g_2ChipCascade || GlobalRef.g_4ChipCascade))
                {
                    if (GlobalRef.f0002d2)
                    {
                        ScriptOps.m_MainForm.EnableDisableBtnDisplayTDAStats(false);
                    }
                    else
                    {
                        string.Format("Status: Failed. TDA ARM not performed!", new object[0]);
                    }
                }
            }
            else
            {
                if (m_ChirpConfigParams.frameCount == 0)
                {
                    if (m_RadarDeviceModeConfigParams.NumberOfRadarDevicesDetected <= 1)
                    {
                        string full_command7 = string.Format("ar1.StopFrame()", new object[0]);
                        m_GuiManager.RecordLog(13, full_command7);
                    }
                    else
                    {
                        string full_command8 = string.Format("ar1.StopFrame_mult({0})", new object[]
                        {
                            GlobalRef.g_RadarDeviceId
                        });
                        m_GuiManager.RecordLog(13, full_command8);
                    }
                    num = Imports.RadarLinkImpl_SensorStop(GlobalRef.g_RadarDeviceId);
                }
                else
                {
                    ScriptOps.m_MainForm.ChirpConfigTab.SetTrigFrameCoutTimer(false);
                    if (callType == 0)
                    {
                        if (m_RadarDeviceModeConfigParams.NumberOfRadarDevicesDetected <= 1)
                        {
                            string full_command9 = string.Format("ar1.StopFrame()", new object[0]);
                            m_GuiManager.RecordLog(13, full_command9);
                        }
                        else
                        {
                            string full_command10 = string.Format("ar1.StopFrame_mult({0})", new object[]
                            {
                                GlobalRef.g_RadarDeviceId
                            });
                            m_GuiManager.RecordLog(13, full_command10);
                        }
                        num = Imports.RadarLinkImpl_SensorStop(GlobalRef.g_RadarDeviceId);
                    }
                    else
                    {
                        string full_command11 = string.Format("Frame Ended", new object[0]);
                        m_GuiManager.RecordLog(13, full_command11);
                        num = 255;
                    }
                }
                Thread.Sleep((int)m_ChirpConfigParams.periodicity);
                if (GlobalRef.g_RadarDeviceId == 1U && (GlobalRef.g_2ChipCascade || GlobalRef.g_4ChipCascade))
                {
                    if (GlobalRef.f0002d2)
                    {
                        ScriptOps.m_MainForm.EnableDisableBtnDisplayTDAStats(false);
                    }
                    else
                    {
                        string.Format("Status: Failed. TDA ARM not performed!", new object[0]);
                    }
                }
            }
            if ((num == 0 && ((GlobalRef.g_CasCadeDeviceSpiConnect & 1U) == 1U || (GlobalRef.g_CasCadeDeviceSpiConnect & 2U) == 2U || (GlobalRef.g_CasCadeDeviceSpiConnect & 4U) == 4U || (GlobalRef.g_CasCadeDeviceSpiConnect & 8U) == 8U)) || GlobalRef.g_RS232Connect[(int)GlobalRef.g_RadarDeviceIndex])
            {
                string full_command12 = string.Format("Status: Passed", new object[0]);
                m_GuiManager.RecordLog(13, full_command12);
                MatlabPostProcGuiInstance.MatlabPostProcImpl_SensorStop();
            }
            else if (num == 5)
            {
                string full_command13 = string.Format("Status: Failed, Error Type: Frame is Already Stopped", new object[0]);
                m_GuiManager.RecordLog(13, full_command13);
            }
            else if (num != 255)
            {
                string msg = string.Format("Status: Failed, Error Type: {0}", new object[]
                {
                    GetErrorType(num)
                });
                GlobalRef.LuaWrapper.PrintError(msg);
            }
            return num;
        }

        public double getFrameSize()
        {
            int format = ScriptOps.m_MainForm.StaticConfigTab.getFormat();
            int rxChains = ScriptOps.m_MainForm.StaticConfigTab.getRxChains();
            int numSamples = ScriptOps.m_MainForm.ChirpConfigTab.getNumSamples();
            long numChirps = ScriptOps.m_MainForm.ChirpConfigTab.getNumChirps();
            int dataPathConfigFormat = ScriptOps.m_MainForm.DataConfigTab.getDataPathConfigFormat();
            int dataPathConfigFormat2 = ScriptOps.m_MainForm.DataConfigTab.getDataPathConfigFormat1();
            int cqnumBits = ScriptOps.m_MainForm.DataConfigTab.getCQNumBits();
            int cqvalue = ScriptOps.m_MainForm.DataConfigTab.getCQvalue();
            int numBits = ScriptOps.m_MainForm.StaticConfigTab.getNumBits();
            int num = 0;
            decimal d = 0m;
            if (dataPathConfigFormat == 0)
            {
                num = 0;
                d = 0m;
            }
            else if (dataPathConfigFormat == 1 || dataPathConfigFormat == 2)
            {
                num = 4;
                d = 0m;
            }
            else if (dataPathConfigFormat == 3)
            {
                num = 4;
                if (dataPathConfigFormat2 == 0)
                {
                    d = Math.Ceiling((decimal)(cqvalue * 2 * 16 / numBits));
                }
                else if (dataPathConfigFormat2 == 1 || dataPathConfigFormat2 == 2)
                {
                    d = Math.Ceiling((decimal)(cqvalue * 2 * 16 / cqnumBits));
                }
            }
            return (double)(((2 * format * numSamples + num) * rxChains + d) * numChirps);
        }

        public double getAdvFrameSize()
        {
            int format = ScriptOps.m_MainForm.StaticConfigTab.getFormat();
            int rxChains = ScriptOps.m_MainForm.StaticConfigTab.getRxChains();
            int numSamples = ScriptOps.m_MainForm.ChirpConfigTab.getNumSamples();
            long value = (long)ScriptOps.m_MainForm.AdvanceFrameConfigTab.getNumChirps();
            int dataPathConfigFormat = ScriptOps.m_MainForm.DataConfigTab.getDataPathConfigFormat();
            int dataPathConfigFormat2 = ScriptOps.m_MainForm.DataConfigTab.getDataPathConfigFormat1();
            int cqnumBits = ScriptOps.m_MainForm.DataConfigTab.getCQNumBits();
            int cqvalue = ScriptOps.m_MainForm.DataConfigTab.getCQvalue();
            int numBits = ScriptOps.m_MainForm.StaticConfigTab.getNumBits();
            int num = 0;
            decimal d = 0m;
            if (dataPathConfigFormat == 0)
            {
                num = 0;
                d = 0m;
            }
            else if (dataPathConfigFormat == 1 || dataPathConfigFormat == 2)
            {
                num = 4;
                d = 0m;
            }
            else if (dataPathConfigFormat == 3)
            {
                num = 4;
                if (dataPathConfigFormat2 == 0)
                {
                    d = Math.Ceiling((decimal)(cqvalue * 2 * 16 / numBits));
                }
                else if (dataPathConfigFormat2 == 1 || dataPathConfigFormat2 == 2)
                {
                    d = Math.Ceiling((decimal)(cqvalue * 2 * 16 / cqnumBits));
                }
            }
            return (double)(((2 * format * numSamples + num) * rxChains + d) * value);
        }

        public int iSetTrigFrame_Gui(ushort RadarDeviceId, bool is_starting_op, bool is_ending_op)
        {
            GlobalRef.g_RadarDeviceId = (uint)RadarDeviceId;
            ScriptOps.m_MainForm.ChirpConfigTab.UpdateChirpConfigData();
            int result;
            if (GlobalRef.g_2ChipCascade || GlobalRef.g_4ChipCascade)
            {
                iDisableTabButtons();
                ScriptOps.m_MainForm.SetOvBtEnblTimer(true);
                int radarDevIndx = ScriptOps.m_MainForm.getRadarDevIndx((uint)RadarDeviceId);
                if (!GlobalRef.g_FrameTriggered_Cascade[radarDevIndx])
                {
                    ScriptOps.m_MainForm.setRadarDevMapGui(GlobalRef.g_RadarDeviceId);
                    result = m_GuiManager.ScriptOps.iSetTrigFrame_InCascadeMode_Gui(RadarDeviceId, true, false);
                }
                else
                {
                    m_GuiManager.RecordLog(9, "Frame already triggered for the cascade device");
                    result = -1;
                }
                iEnableTabButtons();
                ScriptOps.m_MainForm.SetOvBtEnblTimer(false);
            }
            else
            {
                iDisableTabButtons();
                ScriptOps.m_MainForm.SetOvBtEnblTimer(true);
                result = iSetTrigFrame_Impl(0);
                iEnableTabButtons();
                ScriptOps.m_MainForm.SetOvBtEnblTimer(false);
            }
            return result;
        }

        public int iSetStopFrame_Gui(ushort RadarDeviceId, bool is_starting_op, bool is_ending_op)
        {
            GlobalRef.g_RadarDeviceId = (uint)RadarDeviceId;
            ScriptOps.m_MainForm.ChirpConfigTab.UpdateChirpConfigData();
            int result;
            if (GlobalRef.g_2ChipCascade || GlobalRef.g_4ChipCascade)
            {
                iDisableTabButtons();
                ScriptOps.m_MainForm.SetOvBtEnblTimer(true);
                int radarDevIndx = ScriptOps.m_MainForm.getRadarDevIndx((uint)RadarDeviceId);
                if (GlobalRef.g_FrameTriggered_Cascade[radarDevIndx])
                {
                    result = m_GuiManager.ScriptOps.iSetStopFrame_InCascadeMode_Gui(RadarDeviceId, true, false);
                }
                else
                {
                    m_GuiManager.RecordLog(9, "Frame already stopped for the cascade device");
                    result = -1;
                }
                iEnableTabButtons();
                ScriptOps.m_MainForm.SetOvBtEnblTimer(false);
            }
            else
            {
                iDisableTabButtons();
                ScriptOps.m_MainForm.SetOvBtEnblTimer(true);
                result = iSetStopFrame_Impl(0);
                iEnableTabButtons();
                ScriptOps.m_MainForm.SetOvBtEnblTimer(false);
            }
            return result;
        }

        public int iSetTestSource_Gui(bool is_starting_op, bool is_ending_op)
        {
            ScriptOps.m_MainForm.TestSourceTab.UpdateTestSourceData();
            iDisableTabButtons();
            ScriptOps.m_MainForm.SetOvBtEnblTimer(true);
            int result = iSetTestSource_Impl(is_starting_op, is_ending_op);
            iEnableTabButtons();
            ScriptOps.m_MainForm.SetOvBtEnblTimer(false);
            return result;
        }

        public void SetRFGainTarget2243()
        {
            ScriptOps.m_MainForm.ChirpConfigTab.SetRFGainTarget();
            ScriptOps.m_MainForm.ContStreamingTab.SetRFGainTarget();
            ScriptOps.m_MainForm.AdvanceFrameConfigTab.SetRFGainTarget();
        }

        public int StartTxPacket_Ext(int packet_mode, int p1, int preamble, double delay, int amount, int size, int rate, int const_data, int p8, int stbc, int scramble, int inc_mode, int seed)
        {
            int result;
            try
            {
                ScriptOps.m_MainForm.UpdateData();
                if (packet_mode == 0)
                {
                    m_TxParams.Mode = TxMode.Packet_Single;
                }
                else if (packet_mode == 1)
                {
                    m_TxParams.Mode = TxMode.Packet_Series;
                }
                else if (packet_mode == 2)
                {
                    m_TxParams.Mode = TxMode.Packet_Continuous;
                }
                else if (packet_mode == 3)
                {
                    m_TxParams.Mode = TxMode.Packet_Infinite;
                }
                else
                {
                    m_GuiManager.ErrorAbort(string.Format("StartTx: invalid packet mode value {0}", packet_mode));
                }
                m_TxParams.SGI = p1;
                m_TxParams.Preamble = (Preamble)preamble;
                m_TxParams.Delay = (int)delay;
                m_TxParams.Amount = amount;
                m_TxParams.Size = size;
                m_TxParams.ConstData = const_data;
                m_TxParams.Stbc = stbc;
                m_TxParams.Scramble = scramble;
                m_TxParams.Increment = inc_mode;
                m_TxParams.Seed = seed;
                result = iStartTxPacket(true, true);
            }
            catch (Exception ex)
            {
                m_GuiManager.Error(ex.Message, ex.StackTrace);
                result = -1;
            }
            return result;
        }

        public int TransmitSilence_Ext()
        {
            int result;
            try
            {
                m_TxParams.Mode = TxMode.Tone_Silence;
                result = iStartTxTone();
            }
            catch (Exception ex)
            {
                m_GuiManager.Error(ex.Message, ex.StackTrace);
                result = -1;
            }
            return result;
        }

        public int TransmitCarrier_Ext()
        {
            int result;
            try
            {
                m_TxParams.Mode = TxMode.Tone_Carrier;
                result = iStartTxTone();
            }
            catch (Exception ex)
            {
                m_GuiManager.Error(ex.Message, ex.StackTrace);
                result = -1;
            }
            return result;
        }

        public int TransmitSingleTone_Ex(int tone_idx)
        {
            int result;
            try
            {
                m_TxParams.Mode = TxMode.Tone_Carrier;
                result = iStartTxTone();
            }
            catch (Exception ex)
            {
                m_GuiManager.Error(ex.Message, ex.StackTrace);
                result = -1;
            }
            return result;
        }

        public int StopTx_Ext()
        {
            return iStopTx(true, true);
        }

        public int SetOutputPower_Ext(int dbm, double target_power, int soc, int analog_setting, int ant_select, int channel_limits_disable, int fem_limits_disable, double post_dpd)
        {
            int result;
            try
            {
                m_TxParams.Dbm = dbm;
                m_TxParams.Power = target_power;
                m_TxParams.Soc = soc;
                m_TxParams.AnalogSetting = analog_setting;
                m_TxParams.AntSelect = ant_select;
                m_TxParams.ChanLimit = channel_limits_disable;
                m_TxParams.FemLimit = fem_limits_disable;
                m_TxParams.PostDpd = post_dpd;
                result = iSetOutputPower(true, true);
            }
            catch (Exception ex)
            {
                m_GuiManager.Error(ex.Message, ex.StackTrace);
                result = -1;
            }
            return result;
        }

        public void EnableDpd_Ext(int enable)
        {
            try
            {
                m_TxParams.EnableDpd = enable;
                iEnableDpd();
            }
            catch (Exception ex)
            {
                m_GuiManager.Error(ex.Message, ex.StackTrace);
            }
        }

        public int ChannelTune_Ext(int band, int primary_chan_idx, int secondary_chan_idx, out int calib_res)
        {
            calib_res = -1;
            int result;
            try
            {
                ScriptOps.m_MainForm.UpdateData();
                ChannelData channel = m_MainParams.Channel;
                int channel2ndIdx = m_MainParams.Channel2ndIdx;
                int indexByBandAndPrime = ScriptOps.m_MainForm.ChannelTable.GetIndexByBandAndPrime((Band)band, primary_chan_idx);
                if (indexByBandAndPrime == -1)
                {
                    m_GuiManager.Error(string.Format("ChannelTune: could not match channel to band {0} and primary channel index {1}", band, primary_chan_idx));
                    result = -1;
                }
                else
                {
                    m_MainParams.Channel = ScriptOps.m_MainForm.ChannelTable[indexByBandAndPrime];
                    m_MainParams.Channel2ndIdx = secondary_chan_idx;
                    ScriptOps.m_MainForm.UpdateGui();
                    int num = iChannelTune(out calib_res, true, true);
                    if (num != 0)
                    {
                        m_MainParams.Channel = channel;
                        m_MainParams.Channel2ndIdx = channel2ndIdx;
                        ScriptOps.m_MainForm.UpdateGui();
                    }
                    result = num;
                }
            }
            catch (Exception ex)
            {
                m_GuiManager.Error(ex.Message, ex.StackTrace);
                result = -1;
            }
            return result;
        }

        public int Calibrate_Ext()
        {
            return iCalibrate();
        }

        public int RunCalib_Ext(string calib_name)
        {
            return iRunCalibration(calib_name);
        }

        public int MRCDirectWrite11B_Gui(bool enable)
        {
            if (enable)
            {
                m_GuiManager.p000002.Execute(GuiOp.f0002ae, null, false, true, true);
            }
            else
            {
                m_GuiManager.p000002.Execute(GuiOp.f0002af, null, false, true, true);
            }
            return 0;
        }

        public int GoToElp_Ext()
        {
            return iGoToElp();
        }

        public int RxLowPower_Ext(int rx_mode, out int calib_res)
        {
            calib_res = -1;
            int result;
            try
            {
                ScriptOps.m_MainForm.UpdateData();
                m_MainParams.RxLowPower = rx_mode;
                ScriptOps.m_MainForm.UpdateGui();
                result = iRxLowPower(out calib_res);
            }
            catch (Exception ex)
            {
                m_GuiManager.Error(ex.Message, ex.StackTrace);
                result = -1;
            }
            return result;
        }

        public int RxBoost_Ext(int boost_mode, out int calib_res)
        {
            calib_res = -1;
            int result;
            try
            {
                ScriptOps.m_MainForm.UpdateData();
                m_MainParams.RxBoost = boost_mode;
                ScriptOps.m_MainForm.UpdateGui();
                result = iRxBoost(out calib_res);
            }
            catch (Exception ex)
            {
                m_GuiManager.Error(ex.Message, ex.StackTrace);
                result = -1;
            }
            return result;
        }

        public int StartRxStats_Ext(int ack_en, int inc_mode, int rx_data)
        {
            int result;
            try
            {
                m_RxParams.IssueAck = (uint)ack_en;
                m_RxParams.IncMode = inc_mode;
                m_RxParams.RxData = rx_data;
                result = iStartRxStats(true, true);
            }
            catch (Exception ex)
            {
                m_GuiManager.Error(ex.Message, ex.StackTrace);
                result = -1;
            }
            return result;
        }

        public int RstRxStats_Ext()
        {
            int result;
            try
            {
                result = iRstRxStats(true, true);
            }
            catch (Exception ex)
            {
                m_GuiManager.Error(ex.Message, ex.StackTrace);
                result = -1;
            }
            return result;
        }

        public int StopRxStats_Ext()
        {
            return iStopRxStats(true, true);
        }

        private struct07 f0002d6;

        private struct08 f0002d7;

        private DynamicPowerSave DynamicPowerSaveParam;

        private RFCharReport RFCharReportParam;

        private struct03d f0002d8;

        private PerChirpPhaseShifterEnable PerChirpPhaseShifterEnableParam;

        private MSSDataBlockConfig MSSDataBlockConfigParam;

        private FreqLimitConfiguration FreqLimitConfigurationParam;

        private RFDeviceAEDirectionControl RFDeviceAEDirectionControlParam;

        private RFPhaseShifter RFPhaseShifterParam;

        private AdvanceBPMPattern AdvanceBPMPatternParam;

        private ADCOutConfig ADCOutConfigParam;

        private TxRxChannelConfig TxRxChannelConfigParam;

        private RFPALoopBack RFPALoopBackParam;

        private RFPSLoopBack RFPSLoopBackParam;

        private RFIFLoopBack RFIFLoopBackParam;

        private ExternalProramFilter ExternalProramFilterParm;

        private TimeUnitConfiguration TimeUnitConfigurationParam;

        private RFInitCalibConfiguration RFInitCalibConfigurationParam;

        private RunTimeCalibConfiguration RunTimeCalibConfigurationParam;

        private MeasureTxPowerConfiguration MeasureTxPowerConfigurationParam;

        private MonitoringModeConfiguration MonitoringModeConfigurationParam;

        private MonitoringRFEnablesConfiguration MonitoringRFEnablesConfigurationParam;

        private RFDigSysPeriodicConfigParameters RFDigSysPeriodicConfigParametersParam;

        private RXNoiserMonitoringConfiguration RXNoiserMonitoringConfigurationParam;

        private RxGainPhaseMonitoringConfiguration RxGainPhaseMonitoringConfigurationParam;

        private RxIFStageMonitoringConfiguration RxIFStageMonitoringConfigurationParam;

        private InterRxCGainPhaseFreqControlonfiguration InterRxCGainPhaseFreqControlonfigurationParam;

        private ethernetInitConfiguration ethernetInitConfigurationParam;

        private TDAethernetInitConfiguration TDAethernetInitConfigurationParam;

        private RFDCCardModeConfiguration RFDCCardModeConfigurationParam;

        private TxGainPhaseMismatchMonitoringConfiguration TxGainPhaseMismatchMonitoringConfigurationParam;

        private AnalogFaultInjectionConfiguration AnalogFaultInjectionConfigurationParam;

        private RxSaturationDetectorMonitoringConfiguration RxSaturationDetectorMonitoringConfigurationParam;

        private PLLControlVolMonitoringConfiguration PLLControlVolMonitoringConfigurationParam;

        private DualClockCompMonitoringConfiguration DualClockCompMonitoringConfigurationParam;

        private SiganlAnImageMonitoringConfiguration SiganlAnImageMonitoringConfigurationParam;

        private SynthFreqMonitoringConfiguration SynthFreqMonitoringConfigurationParam;

        private RXMixerInputPowerMonitoringConfiguration RXMixerInputPowerMonitoringConfigurationParam;

        private ExtAnalogSigMonConfiguration ExtAnalogSigMonConfigurationParam;

        private IntRxAnalogSigMonConfiguration IntRxAnalogSigMonConfigurationParam;

        private IntPMCLKLOAnalogSigMonConfiguration IntPMCLKLOAnalogSigMonConfigurationParam;

        private IntGPADCAnalogSigMonConfiguration IntGPADCAnalogSigMonConfigurationParam;

        private TemperatureMonConfiguration TemperatureMonConfigurationParam;

        private RFDigSysLatentFaultConfigParameters RFDigSysLatentFaultConfigParametersParam;

        private TxGainTempLutConfiguration TxGainTempLutConfigurationParam;

        private TxGainTempLutGetConfiguration TxGainTempLutGetConfigurationParam;

        private TxGainTempLutReportData TxGainTempLutReportDataParam;

        private RxGainTempLutConfiguration RxGainTempLutConfigurationParam;

        private RxGainTempLutGetConfiguration RxGainTempLutGetConfigurationParam;

        private RxGainTempLutReportData RxGainTempLutReportDataParam;

        private SynthFreqLinearityConfigData SynthFreqLinearityConfigDataParam;

        private CalMonFreqTxPowerLimitConfiguration CalMonFreqTxPowerLimitConfigurationParam;

        private TestPatternGenConfiguration TestPatternGenConfigurationParam;

        private PMICClockOutConfiguration PMICClockOutConfigurationParam;

        private MCUClockOutConfiguration MCUClockOutConfigurationParam;

        private ClalibDataRestoreSaveConfiguration ClalibDataRestoreSaveConfigurationParam;

        private CalibDataSaveReport CalibDataSaveReportParam;

        private InterChirpBlockControlsConfiguration InterChirpBlockControlsConfigurationParam;

        private PhaseShifterClalibGetConfig PhaseShifterClalibGetConfigParam;

        private PhaseShifterClalibSetConfig PhaseShifterClalibSetConfigParam;

        private struct06b f0002d9;

        private MSSFwVersion MSSFwVersionParam;

        private static CalibDataRestoreConfiguration CalibDataRestoreConfigurationParam = default(CalibDataRestoreConfiguration);

        private static CalibDataRestoreConfiguration2 CalibDataRestoreConfigurationParam2 = default(CalibDataRestoreConfiguration2);

        private static CalibDataRestoreConfiguration3 CalibDataRestoreConfigurationParam3 = default(CalibDataRestoreConfiguration3);

        private static CalibDataRestoreConfigurationPtrHandler CalibDataRestoreConfigurationPtrHandlerParam = default(CalibDataRestoreConfigurationPtrHandler);

        private static Tx1Tx2Tx3PowerMonitoringConfiguration1 Tx1Tx2Tx3PowerMonitoringConfiguration1Param = default(Tx1Tx2Tx3PowerMonitoringConfiguration1);

        private static Tx1Tx2Tx3PowerMonitoringConfiguration2 Tx1Tx2Tx3PowerMonitoringConfiguration2Param = default(Tx1Tx2Tx3PowerMonitoringConfiguration2);

        private static Tx1Tx2Tx3PowerMonitoringConfiguration3 Tx1Tx2Tx3PowerMonitoringConfiguration3Param = default(Tx1Tx2Tx3PowerMonitoringConfiguration3);

        private static Tx1Tx2Tx3PowerMonitoringConfiguration2New Tx1Tx2Tx3PowerMonitoringConfiguration2NewParam = default(Tx1Tx2Tx3PowerMonitoringConfiguration2New);

        private static TX1BallBreakMonitoringConfiguration TX1BallBreakMonitoringConfigurationParam = default(TX1BallBreakMonitoringConfiguration);

        private static TX2BallBreakMonitoringConfiguration TX2BallBreakMonitoringConfigurationParam = default(TX2BallBreakMonitoringConfiguration);

        private static TX3BallBreakMonitoringConfiguration TX3BallBreakMonitoringConfigurationParam = default(TX3BallBreakMonitoringConfiguration);

        private static Tx1Tx2Tx3BallBreakMonitoringConfiguration Tx1Tx2Tx3BallBreakMonitoringConfigurationParam = default(Tx1Tx2Tx3BallBreakMonitoringConfiguration);

        private static Tx1BPMPhaseMonitoringConfiguration Tx1BPMPhaseMonitoringConfigurationParam = default(Tx1BPMPhaseMonitoringConfiguration);

        private static Tx2BPMPhaseMonitoringConfiguration Tx2BPMPhaseMonitoringConfigurationParam = default(Tx2BPMPhaseMonitoringConfiguration);

        private static Tx3BPMPhaseMonitoringConfiguration Tx3BPMPhaseMonitoringConfigurationParam = default(Tx3BPMPhaseMonitoringConfiguration);

        private static Tx1Tx2Tx3BPMPhaseMonitoringConfiguration Tx1Tx2Tx3BPMPhaseMonitoringConfigurationParam = default(Tx1Tx2Tx3BPMPhaseMonitoringConfiguration);

        private static IntTx1AnalogSigMonConfiguration IntTx1AnalogSigMonConfigurationParam = default(IntTx1AnalogSigMonConfiguration);

        private static IntTx2AnalogSigMonConfiguration IntTx2AnalogSigMonConfigurationParam = default(IntTx2AnalogSigMonConfiguration);

        private static IntTx3AnalogSigMonConfiguration IntTx3AnalogSigMonConfigurationParam = default(IntTx3AnalogSigMonConfiguration);

        private static Tx1Tx2Tx3IntAnalogSigMonitoringConfiguration Tx1Tx2Tx3IntAnalogSigMonitoringConfigurationParam = default(Tx1Tx2Tx3IntAnalogSigMonitoringConfiguration);

        private RFCalibMon RFCalibMonParam;

        private RFDynamic RFDynamicParam;

        private struct084 f0002da;

        private MeasurePDPower MeasurePDPowerParam;

        private MSSLatentFaultConfiguration MSSLatentFaultConfigParam;

        private MSSPeriodicTestConfiguration MSSPeriodicTestConfigurationParam;

        private LowPowerModeConfiguration LowPowerModeConfigurationParam;

        private ContStreamConfiguration ContStreamConfigurationParam;

        private ProfileConfiguration ProfileConfigurationParam;

        private static struct0b f0002db = default(struct0b);

        private static GPADCDataMeasByExternally GPADCDataMeasByExternallyParam = default(GPADCDataMeasByExternally);

        private static RfDynamicCharData RfDynamicCharDataParam = default(RfDynamicCharData);

        private static RFInitStatus RFInitStatusParam = default(RFInitStatus);

        private static struct0d f0002dc = default(struct0d);

        private static struct0e f0002dd = default(struct0e);

        private static RunTimeCalib RunTimeCalibParam = default(RunTimeCalib);

        private static MeasureTxPower MeasureTxPowerParam = default(MeasureTxPower);

        private static AnalogFaultReport AnalogFaultReportParam = default(AnalogFaultReport);

        private static MSSVolMonErrorStatusReport MSSVolMonErrorStatusReportParam = default(MSSVolMonErrorStatusReport);

        private static struct015 f0002de = default(struct015);

        private static struct016 f0002df = default(struct016);

        private static MSSBootErrorStatusReport MSSBootErrorStatusReportParam = default(MSSBootErrorStatusReport);

        private static struct018 MSSRFErrorStatusReportParam = default(struct018);

        private static MSSGetDataBlockStatusReport MSSGetDataBlockStatusReportParam = default(MSSGetDataBlockStatusReport);

        private static PDPowerConfig PDPowerConfigParam = default(PDPowerConfig);

        private static TimeUnitReport TimeUnitReportParam = default(TimeUnitReport);

        private static asyncEventType asyncEvent = default(asyncEventType);

        private static Tx1PowerMonAsyncData Tx1PowerMonAsyncDataParam = default(Tx1PowerMonAsyncData);

        private static Tx2PowerMonAsyncData Tx2PowerMonAsyncDataParam = default(Tx2PowerMonAsyncData);

        private static Tx3PowerMonAsyncData Tx3PowerMonAsyncDataParam = default(Tx3PowerMonAsyncData);

        private static MonHeaderReportAsyncData MonHeaderReportAsyncDataParam = default(MonHeaderReportAsyncData);

        private static RxNoiseFigureAsyncData RxNoiseFigureAsyncDataParam = default(RxNoiseFigureAsyncData);

        private static Tx1BallBreakAsyncData Tx1BallBreakAsyncDataParam = default(Tx1BallBreakAsyncData);

        private static Tx2BallBreakAsyncData Tx2BallBreakAsyncDataParam = default(Tx2BallBreakAsyncData);

        private static Tx3BallBreakAsyncData Tx3BallBreakAsyncDataParam = default(Tx3BallBreakAsyncData);

        private static RxGainPhaseAsyncData RxGainPhaseAsyncDataParam = default(RxGainPhaseAsyncData);

        private static RxIFStageAsyncData RxIFStageAsyncDataParam = default(RxIFStageAsyncData);

        private static Tx1BPMPhaseAsyncFormat Tx1BPMPhaseAsyncFormatParam = default(Tx1BPMPhaseAsyncFormat);

        private static Tx2BPMPhaseAsyncFormat Tx2BPMPhaseAsyncFormatParam = default(Tx2BPMPhaseAsyncFormat);

        private static Tx3BPMPhaseAsyncFormat Tx3BPMPhaseAsyncFormatParam = default(Tx3BPMPhaseAsyncFormat);

        private static TxGainPhaseMismatchAsyncReport TxGainPhaseMismatchAsyncReportParam = default(TxGainPhaseMismatchAsyncReport);

        private static RxSaturationDetedtorAsyncReport RxSaturationDetedtorAsyncReportParam = default(RxSaturationDetedtorAsyncReport);

        private static PLLControlVoltageAsyncReport PLLControlVoltageAsyncReportParam = default(PLLControlVoltageAsyncReport);

        private static DCCMonAsyncReport DCCMonAsyncReportParam = default(DCCMonAsyncReport);

        private static SynthFrequencyMonAsyncReport SynthFrequencyMonAsyncReportParam = default(SynthFrequencyMonAsyncReport);

        private static RxMixerInputPowerMonAsyncReport RxMixerInputPowerMonAsyncReportParam = default(RxMixerInputPowerMonAsyncReport);

        private static ExtAnalogSigMonAsyncReport ExtAnalogSigMonAsyncReportParam = default(ExtAnalogSigMonAsyncReport);

        private static IntTx1AnalogSigMonAsyncReport IntTx1AnalogSigMonAsyncReportParam = default(IntTx1AnalogSigMonAsyncReport);

        private static IntTx2AnalogSigMonAsyncReport IntTx2AnalogSigMonAsyncReportParam = default(IntTx2AnalogSigMonAsyncReport);

        private static IntTx3AnalogSigMonAsyncReport IntTx3AnalogSigMonAsyncReportParam = default(IntTx3AnalogSigMonAsyncReport);

        private static IntRxAnalogSigMonAsyncReport IntRxAnalogSigMonAsyncReportParam = default(IntRxAnalogSigMonAsyncReport);

        private static IntPMCLKLOAnalogSigMonAsyncReport IntPMCLKLOAnalogSigMonAsyncReportParam = default(IntPMCLKLOAnalogSigMonAsyncReport);

        private static IntGPADCAnalogSigMonAsyncReport IntGPADCAnalogSigMonAsyncReportParam = default(IntGPADCAnalogSigMonAsyncReport);

        private static TemperatureMonAsyncReport TemperatureMonAsyncReportParam = default(TemperatureMonAsyncReport);

        private static RFDigitalLatentFaultAsyncReport RFDigitalLatentFaultAsyncReportParam = default(RFDigitalLatentFaultAsyncReport);

        private static RFDigitalPeriodicAsyncReport RFDigitalPeriodicAsyncReportParam = default(RFDigitalPeriodicAsyncReport);

        private static MSSPowerUpDoneAsyncReport MSSPowerUpDoneAsyncReportParam = default(MSSPowerUpDoneAsyncReport);

        private static struct034 BSSRFPowerUpDoneAsyncReportParam = default(struct034);

        private static MSSLatentFaultMonReport MSSLatentFaultMonReportParam = default(MSSLatentFaultMonReport);

        private static MSSPeriodicTestMonReport MSSPeriodicTestMonReportParam = default(MSSPeriodicTestMonReport);

        private static IDictionary<string, XmlNodeList> monReportXmlMap = new Dictionary<string, XmlNodeList>();

        private static ProfileData[] ProfileConfigDataParam = new ProfileData[16];

        private static ChirpData[] ChirpConfigDataParam = new ChirpData[512];

        private TempSensorData TempSensorDataParam;

        private AdvSubFrameConfigAndData AdvSubFrameConfigAndDataParam;

        private LoopBackBurstConfiguration LoopBackBurstConfigurationParam;

        private SWSubFrameStartStopConfiguration SWSubFrameStartStopConfigurationParam;

        private DynamicChirpConfiguration DynamicChirpConfigurationParam;

        private DynamicChirpCfgHandler DynamicChirpCfgHandlerParam;

        private DynamicChirpEnableConfiguration DynamicChirpEnableConfigurationParam;

        private DynamicPerChirpPhaseShifterConfiguration DynamicPerChirpPhaseShifterConfigurationParam;

        private DynamicPerChirpPhaseShifterCfgHandler DynamicPerChirpPhaseShifterCfgHandlerParam;

        private GuiManager m_GuiManager;

        private AR1xxxWrapper m_TsWrapper;

        private TxParams m_TxParams;

        private RxParams m_RxParams;

        private MainParams m_MainParams;

        public static frmAR1Main m_MainForm;

        private ConnectParams m_ConnectParams;

        private SPIConnectParams m_SPIConnectParams;

        private StaticParams m_StaticParams;

        private LpModConfParams m_LpModConfParams;

        private RFLDOBypassEnableAndDisableConfigParameters m_RFLDOBypassEnableAndDisableConfigParameters;

        private DataConfigParams m_DataConfigParams;

        public ChirpConfigParams m_ChirpConfigParams;

        public AdvChirpConfigParams m_AdvChirpConfigParams;

        public ContStreamParams m_ContStreamParams;

        private BasicConfigurationForAnalysisParams m_BasicConfigurationForAnalysisParams;

        private MeasureTxPowerParams m_MeasureTxPowerParams;

        private TestSourceParams m_TestSourceParams;

        private BpmChirpConfigParams m_BpmChirpConfigParams;

        public PerChirpPhaseShifterConfigParams m_PerChirpPhaseShifterConfigParams;

        public AdvanceBPMPatternConfigParams m_AdvanceBPMPatternConfigParams;

        public RFStatusConfigParams m_RFStatusConfigParams;

        public RFCharReportConfigParams m_RFCharReportConfigParams;

        public RFCalibMonConfigParams m_RFCalibMonConfigParams;

        public RFCalibEnaDisConfigParams m_RFCalibEnaDisConfigParams;

        public TemperatrueSensorTempDataConfigParams m_TemperatrueSensorTempDataConfigParams;

        public RadarDevice1DFEStaticReportDataConfigParams m_RadarDevice1DFEStaticReportDataConfigParams;

        public RadarDevice2DFEStaticReportDataConfigParams m_RadarDevice2DFEStaticReportDataConfigParams;

        public RadarDevice3DFEStaticReportDataConfigParams m_RadarDevice3DFEStaticReportDataConfigParams;

        public RadarDevice4DFEStaticReportDataConfigParams m_RadarDevice4DFEStaticReportDataConfigParams;

        public RfGPADCMeasureForExtInputConfigParams m_RfGPADCMeasureForExtInputConfigParams;

        public DynamicPowerSaveConfigParams m_DynamicPowerSaveConfigParams;

        public PMICVoltageConfigParams f0001fc;

        public SetPMICRegConfigParams m_SetPMICRegConfigParams;

        public GetPMICRegConfigParams m_GetPMICRegConfigParams;

        public AdvancedFrameConfigParams m_AdvancedFrameConfigParams;

        public LoopBackBurstConfigParams m_LoopBackBurstConfigParams;

        public SWSubFrameStartStopConfigParams m_SWSubFrameStartStopConfigParams;

        public RampTimingConfigParams m_RampTimingConfigParams;

        public RadarDeviceModeConfigParams m_RadarDeviceModeConfigParams;

        public ProtocolConfigParams m_ProtocolConfigParams;

        public RFPALoopBackConfigParams m_RFPALoopBackConfigParams;

        public RFPSLoopBackConfigParams m_RFPSLoopBackConfigParams;

        public RFIFLoopBackConfigParams m_RFIFLoopBackConfigParams;

        public ExternalFilterProgConfigParams m_ExternalFilterProgConfigParams;

        public ExternalFilterCoeffRAMConfigParams m_ExternalFilterCoeffRAMConfigParams;

        public RFMiscConfigParams m_RFMiscConfigParams;

        public RFCalibFrequencyLimitConfigParameters m_RFCalibFrequencyLimitConfigParameters;

        public RFDeviceAEControlConfigParameters m_RFDeviceAEControlConfigParameters;

        public TimeUnitConfigParameters m_TimeUnitConfigParameters;

        public RFInitCalibConfigParameters m_RFInitCalibConfigParameters;

        public RunTimeCalibConfigParameters m_RunTimeCalibConfigParameters;

        public c000258 f000210;

        public MeasurePDPowerConfigParams m_MeasurePDPowerConfigParams;

        public MonitoringModeConfigParameters m_MonitoringModeConfigParameters;

        public MonRFEnablesConfigParameters m_MonRFEnablesConfigParameters;

        public RFDigitalSysPeriodicConfigParameters m_RFDigitalSysPeriodicConfigParameters;

        public MonTX1PowerConfigParameters m_MonTX1PowerConfigParameters;

        public MonTX2PowerConfigParameters m_MonTX2PowerConfigParameters;

        public MonTX3PowerConfigParameters m_MonTX3PowerConfigParameters;

        public MonRXNoiseFigureConfigParameters m_MonRXNoiseFigureConfigParameters;

        public MonTx1BallBreakConfigParameters m_MonTx1BallBreakConfigParameters;

        public MonTx2BallBreakConfigParameters m_MonTx2BallBreakConfigParameters;

        public MonTx3BallBreakConfigParameters m_MonTx3BallBreakConfigParameters;

        public MonRXGainPhaseConfigParameters m_MonRXGainPhaseConfigParameters;

        public MonRXIFStageConfigParameters m_MonRXIFStageConfigParameters;

        public MonTx1BPMPhaseConfigParameters m_MonTx1BPMPhaseConfigParameters;

        public MonTx2BPMPhaseConfigParameters m_MonTx2BPMPhaseConfigParameters;

        public MonTx3BPMPhaseConfigParameters m_MonTx3BPMPhaseConfigParameters;

        public InterRxGainPhaseFreqControlConfigParameters m_InterRxGainPhaseFreqControlConfigParameters;

        public MonTxGainPhaseMismatchConfigParameters m_MonTxGainPhaseMismatchConfigParameters;

        public AnalogFaultInjectionConfigParameters m_AnalogFaultInjectionConfigParameters;

        public MonRxSaturationDetectorConfigParameters m_MonRxSaturationDetectorConfigParameters;

        public MonPLLControlVoltageConfigParameters m_MonPLLControlVoltageConfigParameters;

        public MonDualClockCompConfigParameters m_MonDualClockCompConfigParameters;

        public MonSignalAndImageConfigParameters m_MonSignalAndImageConfigParameters;

        public MonSynthFrequencyConfigParameters m_MonSynthFrequencyConfigParameters;

        public MonExternalAnalogSignalConfigParameters m_MonExternalAnalogSignalConfigParameters;

        public MonInternalTx1AnalogSignalConfigParameters m_MonInternalTx1AnalogSignalConfigParameters;

        public MonInternalTx2AnalogSignalConfigParameters m_MonInternalTx2AnalogSignalConfigParameters;

        public MonInternalTx3AnalogSignalConfigParameters m_MonInternalTx3AnalogSignalConfigParameters;

        public MonInternalRxAnalogSignalConfigParameters m_MonInternalRxAnalogSignalConfigParameters;

        public MonInternalPMCLKLOAnalogSignalConfigParameters m_MonInternalPMCLKLOAnalogSignalConfigParameters;

        public MonInternalGPADCAnalogSignalConfigParameters m_MonInternalGPADCAnalogSignalConfigParameters;

        public MonTemperatureConfigParameters m_MonTemperatureConfigParameters;

        public MonRxMixerInputPowerConfigParameters m_MonRxMixerInputPowerConfigParameters;

        public RFDigitalSysLatentFaultConfigParameters m_RFDigitalSysLatentFaultConfigParameters;

        public TxGainTempLUTConfigParameters m_TxGainTempLUTConfigParameters;

        public TxGainTempLUTGetConfigParameters m_TxGainTempLUTGetConfigParameters;

        public RxGainTempLUTConfigParameters m_RxGainTempLUTConfigParameters;

        public RxGainTempLUTGetConfigParameters m_RxGainTempLUTGetConfigParameters;

        public MonSynthFreqLinearityConfigParams m_MonSynthFreqLinearityConfigParams;

        public CalMonFrequencyTxPowerLimitConfigParameters m_CalMonFrequencyTxPowerLimitConfigParameters;

        public MSSLatentFaultTestConfigParameters m_MSSLatentFaultTestConfigParameters;

        public MSSPeriodicTestConfigParameters m_MSSPeriodicTestConfigParameters;

        public DynamicChirpConfigParams m_DynamicChirpConfigParams;

        public DynamicChirpEnableConfigParams m_DynamicChirpEnableConfigParams;

        public DynamicPerChirpPhaseShiftConfigParams m_DynamicPerChirpPhaseShiftConfigParams;

        public TestPatternGenConfigParams m_TestPatternGenConfigParams;

        public PMICClockOutConfigParams m_PMICClockOutConfigParams;

        public MCUClockOutConfigParams m_MCUClockOutConfigParams;

        public CalibDataRestoreSaveConfigParams m_CalibDataRestoreSaveConfigParams;

        public CalibDataRestoreConfigParams m_CalibDataRestoreConfigParams;

        public PhaseShiftAndCalibFilePathParams m_PhaseShiftAndCalibFilePathParams;

        public InterChirpBlockControlsConfigParams m_InterChirpBlockControlsConfigParams;

        public MSSGetDataBlockConfigParams m_MSSGetDataBlockConfigParams;

        public EthernetInitConfigParams m_EthernetInitConfigParams;

        public TDAEthernetInitConfigParams m_TDAEthernetInitConfigParams;

        public c000263 f000206;

        public EthernetModeConfigParams m_EthernetModeConfigParams;

        public RecordDataPacketDelayConfigParams m_RecordDataPacketDelayConfigParams;

        public bool jsonConfigInProgress;

        public MatlabPostProcGUIClass MatlabPostProcGuiInstance;

        private int[] RFPowerUp = new int[4];

        private ScriptOps.SPIAsyncEventCallFunc callback = new ScriptOps.SPIAsyncEventCallFunc(ScriptOps.c0002ac.f00019e.m0000a9);

        private ScriptOps.TDAEthernetProcolAsyncEventCallFunc TDAEthernetEventHandlercallback = new ScriptOps.TDAEthernetProcolAsyncEventCallFunc(ScriptOps.c0002ac.f00019e.m0000aa);

        private ScriptOps.EthernetProcolAsyncEventCallFunc EthernetEventHandlercallback = new ScriptOps.EthernetProcolAsyncEventCallFunc(ScriptOps.c0002ac.f00019e.m0000ab);

        private int[] loadDone = new int[4];

        [UnmanagedFunctionPointer(CallingConvention.StdCall)]
        private delegate void SPIAsyncEventCallFunc(uint DeviceMap, ushort msgId, ushort sbId, IntPtr data);

        [UnmanagedFunctionPointer(CallingConvention.StdCall)]
        private delegate void TDAEthernetProcolAsyncEventCallFunc(ushort devSelection, ushort u16CmdCode, ushort u16ACKCode, int u16Status, IntPtr data);

        [UnmanagedFunctionPointer(CallingConvention.StdCall)]
        private delegate void EthernetProcolAsyncEventCallFunc(ushort u16CmdCode, ushort u16Status);

        [CompilerGenerated]
        private static class c0002a5
        {
            public static CallSite<Func<CallSite, object, string, object>> f0001ac;
            public static CallSite<Func<CallSite, object, string, object>> f0001ad;
            public static CallSite<Func<CallSite, object, string, string, object>> f0001ae;
            public static CallSite<Func<CallSite, object, string, object>> f0001af;
            public static CallSite<Func<CallSite, object, string, object>> f0001b0;
            public static CallSite<Func<CallSite, object, string, int, object>> f0001b1;
            public static CallSite<Func<CallSite, object, string, object>> f0001b2;
            public static CallSite<Func<CallSite, object, string, object>> f0001b3;
            public static CallSite<Func<CallSite, object, string, int, object>> f0001b4;
            public static CallSite<Func<CallSite, object, string, object>> f0001b5;
            public static CallSite<Func<CallSite, object, string, ushort, object>> f0001b6;
            public static CallSite<Func<CallSite, object, string, object>> f0002e0;
            public static CallSite<Func<CallSite, object, string, string, object>> f0002e1;
            public static CallSite<Func<CallSite, object, string, object>> f0002e2;
            public static CallSite<Func<CallSite, object, string, string, object>> f0002e3;
            public static CallSite<Func<CallSite, object, string, object>> f0002e4;
            public static CallSite<Func<CallSite, object, string, string, object>> f0002e5;
            public static CallSite<Func<CallSite, object, string, object>> f0002e6;
            public static CallSite<Func<CallSite, object, string, uint, object>> f0002e7;
            public static CallSite<Func<CallSite, object, string, object>> f0002e8;
            public static CallSite<Func<CallSite, object, string, uint, object>> f0002e9;
            public static CallSite<Func<CallSite, Type, object, Newtonsoft.Json.Formatting, object>> f0002ea;
            public static CallSite<Func<CallSite, object, string>> f0002eb;
        }

        [CompilerGenerated]
        private static class c0002a6
        {
            public static CallSite<Func<CallSite, object, string, object>> f0001ac;
            public static CallSite<Func<CallSite, object, string, ushort, object>> f0001ad;
            public static CallSite<Func<CallSite, Type, object, Newtonsoft.Json.Formatting, object>> f0001ae;
            public static CallSite<Func<CallSite, object, string>> f0001af;
        }

        [CompilerGenerated]
        private static class c0002a7
        {
            public static CallSite<Func<CallSite, object, string, object>> f0001ac;
            public static CallSite<Func<CallSite, object, string, ushort, object>> f0001ad;
            public static CallSite<Func<CallSite, Type, object, Newtonsoft.Json.Formatting, object>> f0001ae;
            public static CallSite<Func<CallSite, object, string>> f0001af;
        }

        [CompilerGenerated]
        private static class c0002a8
        {
            public static CallSite<Func<CallSite, object, string, object>> f0001ac;
            public static CallSite<Func<CallSite, object, string, ushort, object>> f0001ad;
            public static CallSite<Func<CallSite, object, string, object>> f0001ae;
            public static CallSite<Func<CallSite, object, string, string, object>> f0001af;
            public static CallSite<Func<CallSite, object, string, object>> f0001b0;
            public static CallSite<Func<CallSite, object, string, string, object>> f0001b1;
            public static CallSite<Func<CallSite, object, string, object>> f0001b2;
            public static CallSite<Func<CallSite, object, string, string, object>> f0001b3;
            public static CallSite<Func<CallSite, object, string, object>> f0001b4;
            public static CallSite<Func<CallSite, object, string, uint, object>> f0001b5;
            public static CallSite<Func<CallSite, object, string, object>> f0001b6;
            public static CallSite<Func<CallSite, object, string, uint, object>> f0002e0;
            public static CallSite<Func<CallSite, Type, object, Newtonsoft.Json.Formatting, object>> f0002e1;
            public static CallSite<Func<CallSite, object, string>> f0002e2;
        }

        [CompilerGenerated]
        private static class c0002a9
        {
            public static CallSite<Func<CallSite, object, string, object>> f0001ac;
            public static CallSite<Func<CallSite, object, string, ushort, object>> f0001ad;
            public static CallSite<Func<CallSite, object, string, object>> f0001ae;
            public static CallSite<Func<CallSite, object, string, string, object>> f0001af;
            public static CallSite<Func<CallSite, object, string, object>> f0001b0;
            public static CallSite<Func<CallSite, object, string, string, object>> f0001b1;
            public static CallSite<Func<CallSite, object, string, object>> f0001b2;
            public static CallSite<Func<CallSite, object, string, string, object>> f0001b3;
            public static CallSite<Func<CallSite, object, string, object>> f0001b4;
            public static CallSite<Func<CallSite, object, string, uint, object>> f0001b5;
            public static CallSite<Func<CallSite, object, string, object>> f0001b6;
            public static CallSite<Func<CallSite, object, string, uint, object>> f0002e0;
            public static CallSite<Func<CallSite, Type, object, Newtonsoft.Json.Formatting, object>> f0002e1;
            public static CallSite<Func<CallSite, object, string>> f0002e2;
        }

        [CompilerGenerated]
        private static class c0002aa
        {
            public static CallSite<Func<CallSite, object, string, object>> f0001ac;
            public static CallSite<Func<CallSite, object, string, object>> f0001ad;
            public static CallSite<Func<CallSite, object, string, string, object>> f0001ae;
            public static CallSite<Func<CallSite, object, string, object>> f0001af;
            public static CallSite<Func<CallSite, object, string, object>> f0001b0;
            public static CallSite<Func<CallSite, object, string, string, object>> f0001b1;
            public static CallSite<Func<CallSite, object, string, object>> f0001b2;
            public static CallSite<Func<CallSite, object, string, object>> f0001b3;
            public static CallSite<Func<CallSite, object, string, int, object>> f0001b4;
            public static CallSite<Func<CallSite, Type, object, Newtonsoft.Json.Formatting, object>> f0001b5;
            public static CallSite<Func<CallSite, object, string>> f0001b6;
        }

        [CompilerGenerated]
        private sealed class c0002ab
        {
            internal byte m00005b(int p0)
            {
                return Convert.ToByte(hex.Substring(p0, 2), 16);
            }

            public string hex;
        }

        [CompilerGenerated]
        [Serializable]
        private sealed class c0002ac
        {
            internal bool m0000a8(int p0)
            {
                return p0 % 2 == 0;
            }

            internal void m0000a9(uint DeviceMap, ushort msgId, ushort sbId, IntPtr data)
            {
                if (GlobalRef.g_NumOfRadarDevicesDetected == 1U)
                {
                    DeviceMap = 1U;
                }
                else if ((DeviceMap & 1U) == 1U)
                {
                    DeviceMap = 0U;
                }
                else if ((DeviceMap >> 1 & 1U) == 1U)
                {
                    DeviceMap = 1U;
                }
                else if ((DeviceMap >> 2 & 1U) == 1U)
                {
                    DeviceMap = 2U;
                }
                else if ((DeviceMap >> 3 & 1U) == 1U)
                {
                    DeviceMap = 3U;
                }
                if (sbId != 47)
                {
                    switch (sbId)
                    {
                        case 4098:
                            {
                                ScriptOps.WriteReportToXML(DeviceMap, data, 32, "BSSCPUFaultStatus");
                                if (GlobalRef.g_NumOfRadarDevicesDetected == 1U)
                                {
                                    ScriptOps.f0002dc = (struct0d)Marshal.PtrToStructure(data, typeof(struct0d));
                                    ScriptOps.m_MainForm.MonitoringConfig.m000042(DeviceMap, ScriptOps.f0002dc.FaultType, ScriptOps.f0002dc.Reserved, ScriptOps.f0002dc.LineNum, ScriptOps.f0002dc.FaultLR, ScriptOps.f0002dc.FaultPrevLR, ScriptOps.f0002dc.FaultSPSR, ScriptOps.f0002dc.FaultSP, ScriptOps.f0002dc.FaultCauseAddress, ScriptOps.f0002dc.FaultErrorStatus, ScriptOps.f0002dc.FaultErrorSource, ScriptOps.f0002dc.FaultAXIErrorType, ScriptOps.f0002dc.FaultAccessType, ScriptOps.f0002dc.FaultRecoveryType, ScriptOps.f0002dc.Reserved2);
                                    string msg = string.Format("BSS CPU Fault error status Async event recieved(0x{0:X})", new object[]
                                    {
                                ScriptOps.f0002dc.FaultType
                                    });
                                    GlobalRef.LuaWrapper.PrintWarning(msg);
                                    string msg2 = string.Format("Reserved(0x{0:X})", new object[]
                                    {
                                ScriptOps.f0002dc.Reserved
                                    });
                                    GlobalRef.LuaWrapper.PrintWarning(msg2);
                                    string msg3 = string.Format("LineNum(0x{0:X})", new object[]
                                    {
                                ScriptOps.f0002dc.LineNum
                                    });
                                    GlobalRef.LuaWrapper.PrintWarning(msg3);
                                    string msg4 = string.Format("FaultLR(0x{0:X})", new object[]
                                    {
                                ScriptOps.f0002dc.FaultLR
                                    });
                                    GlobalRef.LuaWrapper.PrintWarning(msg4);
                                    string msg5 = string.Format("FaultPrevLR(0x{0:X})", new object[]
                                    {
                                ScriptOps.f0002dc.FaultPrevLR
                                    });
                                    GlobalRef.LuaWrapper.PrintWarning(msg5);
                                    string msg6 = string.Format("FaultSPSR(0x{0:X})", new object[]
                                    {
                                ScriptOps.f0002dc.FaultSPSR
                                    });
                                    GlobalRef.LuaWrapper.PrintWarning(msg6);
                                    string msg7 = string.Format("FaultSP(0x{0:X})", new object[]
                                    {
                                ScriptOps.f0002dc.FaultSP
                                    });
                                    GlobalRef.LuaWrapper.PrintWarning(msg7);
                                    string msg8 = string.Format("FaultCauseAddress(0x{0:X})", new object[]
                                    {
                                ScriptOps.f0002dc.FaultCauseAddress
                                    });
                                    GlobalRef.LuaWrapper.PrintWarning(msg8);
                                    string msg9 = string.Format("FaultErrorStatus(0x{0:X})", new object[]
                                    {
                                ScriptOps.f0002dc.FaultErrorStatus
                                    });
                                    GlobalRef.LuaWrapper.PrintWarning(msg9);
                                    string msg10 = string.Format("FaultErrorSourced(0x{0:X})", new object[]
                                    {
                                ScriptOps.f0002dc.FaultErrorSource
                                    });
                                    GlobalRef.LuaWrapper.PrintWarning(msg10);
                                    string msg11 = string.Format("FaultAXIErrorType(0x{0:X})", new object[]
                                    {
                                ScriptOps.f0002dc.FaultAXIErrorType
                                    });
                                    GlobalRef.LuaWrapper.PrintWarning(msg11);
                                    string msg12 = string.Format("FaultAccessType(0x{0:X})", new object[]
                                    {
                                ScriptOps.f0002dc.FaultAccessType
                                    });
                                    GlobalRef.LuaWrapper.PrintWarning(msg12);
                                    string msg13 = string.Format("FaultRecoveryType(0x{0:X})", new object[]
                                    {
                                ScriptOps.f0002dc.FaultRecoveryType
                                    });
                                    GlobalRef.LuaWrapper.PrintWarning(msg13);
                                    string msg14 = string.Format("Reserved2(0x{0:X})", new object[]
                                    {
                                ScriptOps.f0002dc.Reserved2
                                    });
                                    GlobalRef.LuaWrapper.PrintWarning(msg14);
                                    return;
                                }
                                ScriptOps.f0002dc = (struct0d)Marshal.PtrToStructure(data, typeof(struct0d));
                                ScriptOps.m_MainForm.MonitoringConfig.m000042(DeviceMap, ScriptOps.f0002dc.FaultType, ScriptOps.f0002dc.Reserved, ScriptOps.f0002dc.LineNum, ScriptOps.f0002dc.FaultLR, ScriptOps.f0002dc.FaultPrevLR, ScriptOps.f0002dc.FaultSPSR, ScriptOps.f0002dc.FaultSP, ScriptOps.f0002dc.FaultCauseAddress, ScriptOps.f0002dc.FaultErrorStatus, ScriptOps.f0002dc.FaultErrorSource, ScriptOps.f0002dc.FaultAXIErrorType, ScriptOps.f0002dc.FaultAccessType, ScriptOps.f0002dc.FaultRecoveryType, ScriptOps.f0002dc.Reserved2);
                                string str = string.Format("[DeviceId-{0}] ", DeviceMap);
                                string str2 = string.Format("BSS CPU Fault error status Async event recieved(0x{0:X})", new object[]
                                {
                            ScriptOps.f0002dc.FaultType
                                });
                                GlobalRef.LuaWrapper.PrintWarning(str + str2);
                                string str3 = string.Format("Reserved(0x{0:X})", new object[]
                                {
                            ScriptOps.f0002dc.Reserved
                                });
                                GlobalRef.LuaWrapper.PrintWarning(str + str3);
                                string str4 = string.Format("LineNum(0x{0:X})", new object[]
                                {
                            ScriptOps.f0002dc.LineNum
                                });
                                GlobalRef.LuaWrapper.PrintWarning(str + str4);
                                string str5 = string.Format("FaultLR(0x{0:X})", new object[]
                                {
                            ScriptOps.f0002dc.FaultLR
                                });
                                GlobalRef.LuaWrapper.PrintWarning(str + str5);
                                string str6 = string.Format("FaultPrevLR(0x{0:X})", new object[]
                                {
                            ScriptOps.f0002dc.FaultPrevLR
                                });
                                GlobalRef.LuaWrapper.PrintWarning(str + str6);
                                string str7 = string.Format("FaultSPSR(0x{0:X})", new object[]
                                {
                            ScriptOps.f0002dc.FaultSPSR
                                });
                                GlobalRef.LuaWrapper.PrintWarning(str + str7);
                                string str8 = string.Format("FaultSP(0x{0:X})", new object[]
                                {
                            ScriptOps.f0002dc.FaultSP
                                });
                                GlobalRef.LuaWrapper.PrintWarning(str + str8);
                                string str9 = string.Format("FaultCauseAddress(0x{0:X})", new object[]
                                {
                            ScriptOps.f0002dc.FaultCauseAddress
                                });
                                GlobalRef.LuaWrapper.PrintWarning(str + str9);
                                string str10 = string.Format("FaultErrorStatus(0x{0:X})", new object[]
                                {
                            ScriptOps.f0002dc.FaultErrorStatus
                                });
                                GlobalRef.LuaWrapper.PrintWarning(str + str10);
                                string str11 = string.Format("FaultErrorSourced(0x{0:X})", new object[]
                                {
                            ScriptOps.f0002dc.FaultErrorSource
                                });
                                GlobalRef.LuaWrapper.PrintWarning(str + str11);
                                string str12 = string.Format("FaultAXIErrorType(0x{0:X})", new object[]
                                {
                            ScriptOps.f0002dc.FaultAXIErrorType
                                });
                                GlobalRef.LuaWrapper.PrintWarning(str + str12);
                                string str13 = string.Format("FaultAccessType(0x{0:X})", new object[]
                                {
                            ScriptOps.f0002dc.FaultAccessType
                                });
                                GlobalRef.LuaWrapper.PrintWarning(str + str13);
                                string str14 = string.Format("FaultRecoveryType(0x{0:X})", new object[]
                                {
                            ScriptOps.f0002dc.FaultRecoveryType
                                });
                                GlobalRef.LuaWrapper.PrintWarning(str + str14);
                                string str15 = string.Format("Reserved2(0x{0:X})", new object[]
                                {
                            ScriptOps.f0002dc.Reserved2
                                });
                                GlobalRef.LuaWrapper.PrintWarning(str + str15);
                                return;
                            }
                        case 4099:
                            {
                                ScriptOps.WriteReportToXML(DeviceMap, data, 8, "BSSESMFaultStatus");
                                if (GlobalRef.g_NumOfRadarDevicesDetected == 1U)
                                {
                                    ScriptOps.f0002dd = (struct0e)Marshal.PtrToStructure(data, typeof(struct0e));
                                    ScriptOps.m_MainForm.MonitoringConfig.m000043(DeviceMap, ScriptOps.f0002dd.ESMGroup1Error, ScriptOps.f0002dd.ESMGroup2Error);
                                    string msg15 = string.Format("BSS ESM Group1 Fault error status Async event recieved(0x{0:X})", new object[]
                                    {
                                ScriptOps.f0002dd.ESMGroup1Error
                                    });
                                    GlobalRef.LuaWrapper.PrintWarning(msg15);
                                    string msg16 = string.Format("BSS ESM Group2 Fault error status Async event recieved(0x{0:X})", new object[]
                                    {
                                ScriptOps.f0002dd.ESMGroup2Error
                                    });
                                    GlobalRef.LuaWrapper.PrintWarning(msg16);
                                    return;
                                }
                                ScriptOps.f0002dd = (struct0e)Marshal.PtrToStructure(data, typeof(struct0e));
                                ScriptOps.m_MainForm.MonitoringConfig.m000043(DeviceMap, ScriptOps.f0002dd.ESMGroup1Error, ScriptOps.f0002dd.ESMGroup2Error);
                                string str16 = string.Format("[DeviceId-{0}] ", DeviceMap);
                                string str17 = string.Format("BSS ESM Group1 Fault error status Async event recieved(0x{0:X})", new object[]
                                {
                            ScriptOps.f0002dd.ESMGroup1Error
                                });
                                GlobalRef.LuaWrapper.PrintWarning(str16 + str17);
                                string str18 = string.Format("BSS ESM Group2 Fault error status Async event recieved(0x{0:X})", new object[]
                                {
                            ScriptOps.f0002dd.ESMGroup2Error
                                });
                                GlobalRef.LuaWrapper.PrintWarning(str16 + str18);
                                return;
                            }
                        case 4100:
                            ScriptOps.WriteReportToXML(DeviceMap, data, 20, "RFInitCalibStatus");
                            ScriptOps.RFInitStatusParam = (RFInitStatus)Marshal.PtrToStructure(data, typeof(RFInitStatus));
                            if (GlobalRef.g_NumOfRadarDevicesDetected == 1U)
                            {
                                GlobalRef.LuaWrapper.PrintWarning("RF Init async event received!\n");
                                ScriptOps.m_MainForm.CalibConfig.CascadeRFInitializationCalibStatus(DeviceMap, ScriptOps.RFInitStatusParam.CalibStatus, ScriptOps.RFInitStatusParam.CalibUpdate, (int)ScriptOps.RFInitStatusParam.Temperature, ScriptOps.RFInitStatusParam.TimeStamp);
                                GlobalRef.g_RFInitStatus = 1U;
                                return;
                            }
                            GlobalRef.LuaWrapper.PrintWarning(string.Format("[DeviceId-{0}] ", DeviceMap) + "RF Init async event received!\n");
                            ScriptOps.m_MainForm.CalibConfig.RFInitializationCalibStatusToCascadeDevices(DeviceMap, ScriptOps.RFInitStatusParam.CalibStatus, ScriptOps.RFInitStatusParam.CalibUpdate, (int)ScriptOps.RFInitStatusParam.Temperature, ScriptOps.RFInitStatusParam.TimeStamp);
                            GlobalRef.g_RFInitStatus = 1U;
                            return;
                        case 4101:
                            ScriptOps.WriteReportToXML(DeviceMap, data, 8, "RFGPADCMeasurementData");
                            if (GlobalRef.g_NumOfRadarDevicesDetected == 1U)
                            {
                                ScriptOps.f0002db = (struct0b)Marshal.PtrToStructure(data, typeof(struct0b));
                                ScriptOps.asyncEvent.asyncGpadc = 1U;
                                string msg18 = string.Format("GPADC Data async event received!", new object[0]);
                                if (!GlobalRef.g_DisableReportLogging)
                                {
                                    GlobalRef.LuaWrapper.PrintWarning(msg18);
                                }
                            }
                            else
                            {
                                string str21 = string.Format("[DeviceId-{0}] ", DeviceMap);
                                ScriptOps.f0002db = (struct0b)Marshal.PtrToStructure(data, typeof(struct0b));
                                ScriptOps.asyncEvent.asyncGpadc = 1U;
                                string str22 = string.Format("GPADC Data async event received!", new object[0]);
                                if (!GlobalRef.g_DisableReportLogging)
                                {
                                    GlobalRef.LuaWrapper.PrintWarning(str21 + str22);
                                }
                            }
                            return;
                        case 4102:
                            ScriptOps.WriteReportToXML(DeviceMap, data, 24, "RFTemperatureData");
                            if (GlobalRef.g_NumOfRadarDevicesDetected == 1U)
                            {
                                ScriptOps.RfDynamicCharDataParam = (RfDynamicCharData)Marshal.PtrToStructure(data, typeof(RfDynamicCharData));
                                ScriptOps.asyncEvent.asyncDynamicChar = 1U;
                                ScriptOps.m_MainForm.RFStatusTab.SetTimeTempSensinGUI(string.Concat(new string[]
                                {
                                Convert.ToString(ScriptOps.RfDynamicCharDataParam.time)
                                }));
                                ScriptOps.m_MainForm.RFStatusTab.SetRx0TempSensinGUI(Convert.ToString(ScriptOps.RfDynamicCharDataParam.f000004) + " °C");
                                ScriptOps.m_MainForm.RFStatusTab.SetRx1TempSensinGUI(Convert.ToString(ScriptOps.RfDynamicCharDataParam.f000005) + " °C");
                                ScriptOps.m_MainForm.RFStatusTab.SetRx2TempSensinGUI(Convert.ToString(ScriptOps.RfDynamicCharDataParam.f000006) + " °C");
                                ScriptOps.m_MainForm.RFStatusTab.SetRx3TempSensinGUI(Convert.ToString(ScriptOps.RfDynamicCharDataParam.f000007) + " °C");
                                ScriptOps.m_MainForm.RFStatusTab.SetTx0TempSensinGUI(Convert.ToString(ScriptOps.RfDynamicCharDataParam.f000008) + " °C");
                                ScriptOps.m_MainForm.RFStatusTab.SetTx1TempSensinGUI(Convert.ToString(ScriptOps.RfDynamicCharDataParam.f000009) + " °C");
                                ScriptOps.m_MainForm.RFStatusTab.SetTx2TempSensinGUI(Convert.ToString(ScriptOps.RfDynamicCharDataParam.f00000a) + " °C");
                                ScriptOps.m_MainForm.RFStatusTab.m000062(Convert.ToString(ScriptOps.RfDynamicCharDataParam.f00000b) + " °C");
                                ScriptOps.m_MainForm.RFStatusTab.SetDigTempSensinGUI(Convert.ToString(ScriptOps.RfDynamicCharDataParam.tmpDig0Sens) + " °C");
                                ScriptOps.m_MainForm.RFStatusTab.SetDig2TempSensinGUI(Convert.ToString(ScriptOps.RfDynamicCharDataParam.reserved) + " °C");
                                string msg19 = string.Format("Temperature Data async event received!", new object[0]);
                                if (!GlobalRef.g_DisableReportLogging)
                                {
                                    GlobalRef.LuaWrapper.PrintWarning(msg19);
                                }
                            }
                            else
                            {
                                ScriptOps.RfDynamicCharDataParam = (RfDynamicCharData)Marshal.PtrToStructure(data, typeof(RfDynamicCharData));
                                ScriptOps.asyncEvent.asyncDynamicChar = 1U;
                                ScriptOps.m_MainForm.RFStatusTab.UpdatetRFTempSensinCascadeModeToGUI(DeviceMap, string.Concat(new string[]
                                {
                                Convert.ToString(ScriptOps.RfDynamicCharDataParam.time)
                                }), Convert.ToString(ScriptOps.RfDynamicCharDataParam.f000004) + " °C", Convert.ToString(ScriptOps.RfDynamicCharDataParam.f000005) + " °C", Convert.ToString(ScriptOps.RfDynamicCharDataParam.f000006) + " °C", Convert.ToString(ScriptOps.RfDynamicCharDataParam.f000007) + " °C", Convert.ToString(ScriptOps.RfDynamicCharDataParam.f000008) + " °C", Convert.ToString(ScriptOps.RfDynamicCharDataParam.f000009) + " °C", Convert.ToString(ScriptOps.RfDynamicCharDataParam.f00000a) + " °C", Convert.ToString(ScriptOps.RfDynamicCharDataParam.f00000b) + " °C", Convert.ToString(ScriptOps.RfDynamicCharDataParam.tmpDig0Sens) + " °C", Convert.ToString(ScriptOps.RfDynamicCharDataParam.reserved) + " °C");
                                string str23 = string.Format("[DeviceId-{0}] ", DeviceMap);
                                string str24 = string.Format("Temperature Data async event received!", new object[0]);
                                if (!GlobalRef.g_DisableReportLogging)
                                {
                                    GlobalRef.LuaWrapper.PrintWarning(str23 + str24);
                                }
                            }
                            return;
                        case 4103:
                        case 4104:
                        case 4105:
                        case 4106:
                        case 4116:
                        case 4143:
                        case 4144:
                            break;
                        case 4107:
                            if (GlobalRef.g_NumOfRadarDevicesDetected == 1U)
                            {
                                GlobalRef.LuaWrapper.PrintWarning("Frame start async event received!");
                                GlobalRef.g_FrameTriggered = true;
                                return;
                            }
                            GlobalRef.LuaWrapper.PrintWarning(string.Format("[DeviceId-{0}] ", DeviceMap) + "Frame start async event received!");
                            GlobalRef.g_FrameTriggered_Cascade[(int)DeviceMap] = true;
                            GlobalRef.g_FrameTriggeredDevMap |= 1 << (int)DeviceMap;
                            if (GlobalRef.g_2ChipCascade || GlobalRef.g_4ChipCascade)
                                ScriptOps.m_MainForm.ChirpConfigTab.UpdateDeviceFramingStatus(DeviceMap, 1U);
                            return;
                        case 4108:
                            ScriptOps.WriteReportToXML(DeviceMap, data, 72, "RFGPADCReport");
                            if (GlobalRef.g_NumOfRadarDevicesDetected == 1U)
                            {
                                ScriptOps.GPADCDataMeasByExternallyParam = (GPADCDataMeasByExternally)Marshal.PtrToStructure(data, typeof(GPADCDataMeasByExternally));
                                ScriptOps.asyncEvent.f0000ec = 1U;
                                string msg21 = string.Format("GPADC Reads External Inputs Data async event received!", new object[0]);
                                if (!GlobalRef.g_DisableReportLogging)
                                    GlobalRef.LuaWrapper.PrintWarning(msg21);
                            }
                            else
                            {
                                ScriptOps.GPADCDataMeasByExternallyParam = (GPADCDataMeasByExternally)Marshal.PtrToStructure(data, typeof(GPADCDataMeasByExternally));
                                ScriptOps.asyncEvent.f0000ec = 1U;
                                string str27 = string.Format("[DeviceId-{0}] ", DeviceMap);
                                string str28 = string.Format("GPADC Reads External Inputs Data async event received!", new object[0]);
                                if (!GlobalRef.g_DisableReportLogging)
                                    GlobalRef.LuaWrapper.PrintWarning(str27 + str28);
                            }
                            return;
                        case 4109:
                            ScriptOps.WriteReportToXML(DeviceMap, data, 24, "MeasuredTxPower");
                            if (GlobalRef.g_NumOfRadarDevicesDetected == 1U)
                            {
                                ScriptOps.MeasureTxPowerParam = (MeasureTxPower)Marshal.PtrToStructure(data, typeof(MeasureTxPower));
                                ScriptOps.m_MainForm.ContStreamingTab.MeasureTxPowerReport(DeviceMap, (int)ScriptOps.MeasureTxPowerParam.TxOutputPower, (int)ScriptOps.MeasureTxPowerParam.ReflectedPower, (int)ScriptOps.MeasureTxPowerParam.IncidentVoltage, (int)ScriptOps.MeasureTxPowerParam.ReflectedVoltage, (int)ScriptOps.MeasureTxPowerParam.Tx2TxOutputPower, (int)ScriptOps.MeasureTxPowerParam.Tx2ReflectedPower, (int)ScriptOps.MeasureTxPowerParam.Tx2IncidentVoltage, (int)ScriptOps.MeasureTxPowerParam.Tx2ReflectedVoltage, (int)ScriptOps.MeasureTxPowerParam.Tx3TxOutputPower, (int)ScriptOps.MeasureTxPowerParam.Tx3ReflectedPower, (int)ScriptOps.MeasureTxPowerParam.Tx3IncidentVoltage, (int)ScriptOps.MeasureTxPowerParam.Tx3ReflectedVoltage);
                                if (!GlobalRef.g_DisableReportLogging)
                                    GlobalRef.LuaWrapper.PrintWarning("Measure Tx Power async event received!");
                                GlobalRef.g_TXPowerStatus = 1U;
                                return;
                            }
                            ScriptOps.MeasureTxPowerParam = (MeasureTxPower)Marshal.PtrToStructure(data, typeof(MeasureTxPower));
                            ScriptOps.m_MainForm.ContStreamingTab.CascadeMeasureTxPowerReport(DeviceMap, (int)ScriptOps.MeasureTxPowerParam.TxOutputPower, (int)ScriptOps.MeasureTxPowerParam.ReflectedPower, (int)ScriptOps.MeasureTxPowerParam.IncidentVoltage, (int)ScriptOps.MeasureTxPowerParam.ReflectedVoltage, (int)ScriptOps.MeasureTxPowerParam.Tx2TxOutputPower, (int)ScriptOps.MeasureTxPowerParam.Tx2ReflectedPower, (int)ScriptOps.MeasureTxPowerParam.Tx2IncidentVoltage, (int)ScriptOps.MeasureTxPowerParam.Tx2ReflectedVoltage, (int)ScriptOps.MeasureTxPowerParam.Tx3TxOutputPower, (int)ScriptOps.MeasureTxPowerParam.Tx3ReflectedPower, (int)ScriptOps.MeasureTxPowerParam.Tx3IncidentVoltage, (int)ScriptOps.MeasureTxPowerParam.Tx3ReflectedVoltage);
                            if (!GlobalRef.g_DisableReportLogging)
                                GlobalRef.LuaWrapper.PrintWarning(string.Format("[DeviceId-{0}] ", DeviceMap) + "Measure Tx Power async event received!");
                            GlobalRef.g_TXPowerStatus = 1U;
                            return;
                        case 4110:
                            {
                                ScriptOps.WriteReportToXML(DeviceMap, data, 16, "MeasuredPDPower");
                                if (GlobalRef.g_NumOfRadarDevicesDetected == 1U)
                                {
                                    ScriptOps.PDPowerConfigParam = (PDPowerConfig)Marshal.PtrToStructure(data, typeof(PDPowerConfig));
                                    ScriptOps.m_MainForm.RFStatusTab.MeasurePDPowerAsyncDataReport(DeviceMap, ScriptOps.PDPowerConfigParam.SumRFOn, ScriptOps.PDPowerConfigParam.SumRFOff, ScriptOps.PDPowerConfigParam.DeltaSum, ScriptOps.PDPowerConfigParam.f00000f, ScriptOps.PDPowerConfigParam.PDPower, ScriptOps.PDPowerConfigParam.PDMeasureStatus);
                                    string msg23 = string.Format("Measure PD Power async event received!", new object[0]);
                                    if (!GlobalRef.g_DisableReportLogging)
                                    {
                                        GlobalRef.LuaWrapper.PrintWarning(msg23);
                                    }
                                    GlobalRef.g_PDPowerStatus = 1U;
                                    return;
                                }
                                ScriptOps.PDPowerConfigParam = (PDPowerConfig)Marshal.PtrToStructure(data, typeof(PDPowerConfig));
                                ScriptOps.m_MainForm.RFStatusTab.CascadeMeasurePDPowerAsyncDataReport(DeviceMap, ScriptOps.PDPowerConfigParam.SumRFOn, ScriptOps.PDPowerConfigParam.SumRFOff, ScriptOps.PDPowerConfigParam.DeltaSum, ScriptOps.PDPowerConfigParam.f00000f, ScriptOps.PDPowerConfigParam.PDPower, ScriptOps.PDPowerConfigParam.PDMeasureStatus);
                                string str31 = string.Format("Measure PD Power async event received!", new object[0]);
                                string str32 = string.Format("[DeviceId-{0}] ", DeviceMap);
                                if (!GlobalRef.g_DisableReportLogging)
                                {
                                    GlobalRef.LuaWrapper.PrintWarning(str32 + str31);
                                }
                                GlobalRef.g_PDPowerStatus = 1U;
                                return;
                            }
                        case 4111:
                            {
                                if (GlobalRef.g_NumOfRadarDevicesDetected == 1U)
                                {
                                    string msg24 = string.Format("Frame End async event received!", new object[0]);
                                    GlobalRef.LuaWrapper.PrintWarning(msg24);
                                    GlobalRef.g_FrameTriggered = false;
                                    return;
                                }
                                string str33 = string.Format("[DeviceId-{0}] ", DeviceMap);
                                string str34 = string.Format("Frame End async event received!", new object[0]);
                                GlobalRef.LuaWrapper.PrintWarning(str33 + str34);
                                GlobalRef.g_FrameTriggered_Cascade[(int)DeviceMap] = false;
                                GlobalRef.g_FrameTriggeredDevMap &= ~(1 << (int)DeviceMap);
                                if (!GlobalRef.g_2ChipCascade && !GlobalRef.g_4ChipCascade)
                                {
                                    return;
                                }
                                ScriptOps.m_MainForm.ChirpConfigTab.UpdateDeviceFramingStatus(DeviceMap, 0U);
                                if (GlobalRef.g_FrameTriggeredDevMap == 0 && !GlobalRef.g_StopCmdInProgress && GlobalRef.f0002d2)
                                {
                                    GlobalRef.g_StopCmdInProgress = true;
                                    GlobalRef.f0002c8 = 0U;
                                    if (Imports.stopRecord() == 0)
                                    {
                                        string msg25 = string.Format("Status: Passed for notifying TDA about Stop Frame", new object[0]);
                                        GlobalRef.LuaWrapper.PrintWarning(msg25);
                                        GlobalRef.f0002d2 = false;
                                    }
                                    else
                                    {
                                        string msg26 = string.Format("Status: Failed for notifying TDA about Stop Frame", new object[0]);
                                        GlobalRef.LuaWrapper.PrintError(msg26);
                                    }
                                    int num = 0;
                                    while (GlobalRef.f0002c8 == 0U)
                                    {
                                        Thread.Sleep(300);
                                        num++;
                                        if (num > 20)
                                        {
                                            string msg27 = string.Format("TDA Stop Record ACK not received!", new object[0]);
                                            GlobalRef.LuaWrapper.PrintError(msg27);
                                            return;
                                        }
                                    }
                                    return;
                                }
                                return;
                            }
                        case 4112:
                            {
                                ScriptOps.WriteReportToXML(DeviceMap, data, 12, "AnalogFaultReport");
                                if (GlobalRef.g_NumOfRadarDevicesDetected == 1U)
                                {
                                    ScriptOps.AnalogFaultReportParam = (AnalogFaultReport)Marshal.PtrToStructure(data, typeof(AnalogFaultReport));
                                    string msg28 = string.Format("Analog fault Async event recieved(0x{0:X})", new object[]
                                    {
                                ScriptOps.AnalogFaultReportParam.FaultType
                                    });
                                    GlobalRef.LuaWrapper.PrintWarning(msg28);
                                    string msg29 = string.Format("Reserved(0x{0:X})", new object[]
                                    {
                                ScriptOps.AnalogFaultReportParam.Reserved
                                    });
                                    GlobalRef.LuaWrapper.PrintWarning(msg29);
                                    string msg30 = string.Format("Reserved2(0x{0:X})", new object[]
                                    {
                                ScriptOps.AnalogFaultReportParam.Reserved2
                                    });
                                    GlobalRef.LuaWrapper.PrintWarning(msg30);
                                    string msg31 = string.Format("FaultSig(0x{0:X})", new object[]
                                    {
                                ScriptOps.AnalogFaultReportParam.FaultSig
                                    });
                                    GlobalRef.LuaWrapper.PrintWarning(msg31);
                                    string msg32 = string.Format("Reserved3(0x{0:X})", new object[]
                                    {
                                ScriptOps.AnalogFaultReportParam.Reserved3
                                    });
                                    GlobalRef.LuaWrapper.PrintWarning(msg32);
                                    return;
                                }
                                string str35 = string.Format("[DeviceId-{0}] ", DeviceMap);
                                ScriptOps.AnalogFaultReportParam = (AnalogFaultReport)Marshal.PtrToStructure(data, typeof(AnalogFaultReport));
                                string str36 = string.Format("Analog fault Async event recieved(0x{0:X})", new object[]
                                {
                            ScriptOps.AnalogFaultReportParam.FaultType
                                });
                                GlobalRef.LuaWrapper.PrintWarning(str35 + str36);
                                string msg33 = string.Format("Reserved(0x{0:X})", new object[]
                                {
                            ScriptOps.AnalogFaultReportParam.Reserved
                                });
                                GlobalRef.LuaWrapper.PrintWarning(msg33);
                                string msg34 = string.Format("Reserved2(0x{0:X})", new object[]
                                {
                            ScriptOps.AnalogFaultReportParam.Reserved2
                                });
                                GlobalRef.LuaWrapper.PrintWarning(msg34);
                                string msg35 = string.Format("FaultSig(0x{0:X})", new object[]
                                {
                            ScriptOps.AnalogFaultReportParam.FaultSig
                                });
                                GlobalRef.LuaWrapper.PrintWarning(msg35);
                                string msg36 = string.Format("Reserved3(0x{0:X})", new object[]
                                {
                            ScriptOps.AnalogFaultReportParam.Reserved3
                                });
                                GlobalRef.LuaWrapper.PrintWarning(msg36);
                                return;
                            }
                        case 4113:
                            {
                                ScriptOps.WriteReportToXML(DeviceMap, data, 4, "CalMonTimingFailReport");
                                if (GlobalRef.g_NumOfRadarDevicesDetected == 1U)
                                {
                                    ScriptOps.TimeUnitReportParam = (TimeUnitReport)Marshal.PtrToStructure(data, typeof(TimeUnitReport));
                                    ScriptOps.m_MainForm.CalibConfig.RFTimeUnitStatusReport(DeviceMap, ScriptOps.TimeUnitReportParam.TimingFailureCode);
                                    string msg37 = string.Format("Time Unit report async event received!", new object[0]);
                                    GlobalRef.LuaWrapper.PrintWarning(msg37);
                                    return;
                                }
                                ScriptOps.TimeUnitReportParam = (TimeUnitReport)Marshal.PtrToStructure(data, typeof(TimeUnitReport));
                                ScriptOps.m_MainForm.CalibConfig.CascadeRFTimeUnitStatusReport(DeviceMap, ScriptOps.TimeUnitReportParam.TimingFailureCode);
                                string str37 = string.Format("Time Unit report async event received!", new object[0]);
                                string str38 = string.Format("[DeviceId-{0}] ", DeviceMap);
                                GlobalRef.LuaWrapper.PrintWarning(str38 + str37);
                                return;
                            }
                        case 4114:
                            {
                                ScriptOps.WriteReportToXML(DeviceMap, data, 20, "RunTimeCalibReport");
                                if (GlobalRef.g_NumOfRadarDevicesDetected == 1U)
                                {
                                    ScriptOps.RunTimeCalibParam = (RunTimeCalib)Marshal.PtrToStructure(data, typeof(RunTimeCalib));
                                    string msg38 = string.Format("Run Time calibration async event received!\n", new object[0]);
                                    if (!GlobalRef.g_DisableReportLogging)
                                    {
                                        GlobalRef.LuaWrapper.PrintWarning(msg38);
                                    }
                                    ScriptOps.m_MainForm.CalibConfig.RFRunTimeCalibStatusReport(DeviceMap, ScriptOps.RunTimeCalibParam.ErrorFlag, ScriptOps.RunTimeCalibParam.UpdateStatus, (int)ScriptOps.RunTimeCalibParam.Temperature, ScriptOps.RunTimeCalibParam.TimeStamp);
                                    GlobalRef.g_RunTimeCalibStatus = 1U;
                                    return;
                                }
                                ScriptOps.RunTimeCalibParam = (RunTimeCalib)Marshal.PtrToStructure(data, typeof(RunTimeCalib));
                                string str39 = string.Format("Run Time calibration async event received!\n", new object[0]);
                                string str40 = string.Format("[DeviceId-{0}] ", DeviceMap);
                                if (!GlobalRef.g_DisableReportLogging)
                                {
                                    GlobalRef.LuaWrapper.PrintWarning(str40 + str39);
                                }
                                ScriptOps.m_MainForm.CalibConfig.CascadeRFRunTimeCalibStatusReport(DeviceMap, ScriptOps.RunTimeCalibParam.ErrorFlag, ScriptOps.RunTimeCalibParam.UpdateStatus, (int)ScriptOps.RunTimeCalibParam.Temperature, ScriptOps.RunTimeCalibParam.TimeStamp);
                                GlobalRef.g_RunTimeCalibStatus = 1U;
                                return;
                            }
                        case 4115:
                            {
                                ScriptOps.WriteReportToXML(DeviceMap, data, 4, "DigitalLatentFaultMonitoring");
                                if (GlobalRef.g_NumOfRadarDevicesDetected == 1U)
                                {
                                    ScriptOps.RFDigitalLatentFaultAsyncReportParam = (RFDigitalLatentFaultAsyncReport)Marshal.PtrToStructure(data, typeof(RFDigitalLatentFaultAsyncReport));
                                    ScriptOps.m_MainForm.MonitoringConfig.CascadeRFDigitalLatentFaultMonitoringReport(DeviceMap, ScriptOps.RFDigitalLatentFaultAsyncReportParam.DigLatentFaultResult);
                                    string msg39 = string.Format("RF Digital latent fault monitoring async event received!", new object[0]);
                                    if (!GlobalRef.g_DisableReportLogging)
                                    {
                                        GlobalRef.LuaWrapper.PrintWarning(msg39);
                                    }
                                    GlobalRef.g_DigLatentFaultStatus = 1;
                                    return;
                                }
                                ScriptOps.RFDigitalLatentFaultAsyncReportParam = (RFDigitalLatentFaultAsyncReport)Marshal.PtrToStructure(data, typeof(RFDigitalLatentFaultAsyncReport));
                                ScriptOps.m_MainForm.MonitoringConfig.CascadeRFDigitalLatentFaultMonitoringReport(DeviceMap, ScriptOps.RFDigitalLatentFaultAsyncReportParam.DigLatentFaultResult);
                                string str41 = string.Format("RF Digital latent fault monitoring async event received!", new object[0]);
                                string str42 = string.Format("[DeviceId-{0}] ", DeviceMap);
                                if (!GlobalRef.g_DisableReportLogging)
                                {
                                    GlobalRef.LuaWrapper.PrintWarning(str42 + str41);
                                }
                                GlobalRef.g_DigLatentFaultStatus = 1;
                                return;
                            }
                        case 4117:
                            ScriptOps.WriteReportToXML(DeviceMap, data, 8, "MonitoringReportHeader");
                            if (GlobalRef.g_NumOfRadarDevicesDetected == 1U)
                            {
                                ScriptOps.MonHeaderReportAsyncDataParam = (MonHeaderReportAsyncData)Marshal.PtrToStructure(data, typeof(MonHeaderReportAsyncData));
                                ScriptOps.m_MainForm.AnalogMonConfig.MonitoringReportHeader(DeviceMap, ScriptOps.MonHeaderReportAsyncDataParam.FTTICount, ScriptOps.MonHeaderReportAsyncDataParam.AvgTemp);
                                string msg40 = string.Format("Monitoring report header async event received!", new object[0]);
                                if (!GlobalRef.g_DisableReportLogging)
                                {
                                    GlobalRef.LuaWrapper.PrintWarning(msg40);
                                    return;
                                }
                                return;
                            }
                            else
                            {
                                ScriptOps.MonHeaderReportAsyncDataParam = (MonHeaderReportAsyncData)Marshal.PtrToStructure(data, typeof(MonHeaderReportAsyncData));
                                ScriptOps.m_MainForm.AnalogMonConfig.MonitoringReportHeader(DeviceMap, ScriptOps.MonHeaderReportAsyncDataParam.FTTICount, ScriptOps.MonHeaderReportAsyncDataParam.AvgTemp);
                                string str43 = string.Format("Monitoring report header async event received!", new object[0]);
                                string str44 = string.Format("[DeviceId-{0}] ", DeviceMap);
                                if (!GlobalRef.g_DisableReportLogging)
                                {
                                    GlobalRef.LuaWrapper.PrintWarning(str44 + str43);
                                    return;
                                }
                                return;
                            }
                            break;
                        case 4118:
                            {
                                ScriptOps.WriteReportToXML(DeviceMap, data, 8, "DigitalPeriodicMonitoring");
                                if (GlobalRef.g_NumOfRadarDevicesDetected == 1U)
                                {
                                    ScriptOps.RFDigitalPeriodicAsyncReportParam = (RFDigitalPeriodicAsyncReport)Marshal.PtrToStructure(data, typeof(RFDigitalPeriodicAsyncReport));
                                    ScriptOps.m_MainForm.MonitoringConfig.CascadeRFDigitalPeriodicMonitoringReport(DeviceMap, ScriptOps.RFDigitalPeriodicAsyncReportParam.RFDigMonPeriodicStatus, ScriptOps.RFDigitalPeriodicAsyncReportParam.TimeStamp);
                                    string msg41 = string.Format("RF Digital Periodic monitoring async event received!", new object[0]);
                                    if (!GlobalRef.g_DisableReportLogging)
                                    {
                                        GlobalRef.LuaWrapper.PrintWarning(msg41);
                                    }
                                    GlobalRef.g_DigPeriodicStatus = 1;
                                    return;
                                }
                                ScriptOps.RFDigitalPeriodicAsyncReportParam = (RFDigitalPeriodicAsyncReport)Marshal.PtrToStructure(data, typeof(RFDigitalPeriodicAsyncReport));
                                ScriptOps.m_MainForm.MonitoringConfig.CascadeRFDigitalPeriodicMonitoringReport(DeviceMap, ScriptOps.RFDigitalPeriodicAsyncReportParam.RFDigMonPeriodicStatus, ScriptOps.RFDigitalPeriodicAsyncReportParam.TimeStamp);
                                string str45 = string.Format("RF Digital Periodic monitoring async event received!", new object[0]);
                                string str46 = string.Format("[DeviceId-{0}] ", DeviceMap);
                                if (!GlobalRef.g_DisableReportLogging)
                                {
                                    GlobalRef.LuaWrapper.PrintWarning(str46 + str45);
                                }
                                GlobalRef.g_DigPeriodicStatus = 1;
                                return;
                            }
                        case 4119:
                            {
                                ScriptOps.WriteReportToXML(DeviceMap, data, 32, "TemperatureMonitoring");
                                if (GlobalRef.g_NumOfRadarDevicesDetected == 1U)
                                {
                                    ScriptOps.TemperatureMonAsyncReportParam = (TemperatureMonAsyncReport)Marshal.PtrToStructure(data, typeof(TemperatureMonAsyncReport));
                                    ScriptOps.m_MainForm.AnalogMon2Config.CascadeTemperatureMonitoringReport(DeviceMap, ScriptOps.TemperatureMonAsyncReportParam.StatusFlags, ScriptOps.TemperatureMonAsyncReportParam.ErrorCode, ScriptOps.TemperatureMonAsyncReportParam.Rx1TempValue, ScriptOps.TemperatureMonAsyncReportParam.Rx2TempValue, ScriptOps.TemperatureMonAsyncReportParam.Rx3TempValue, ScriptOps.TemperatureMonAsyncReportParam.Rx4TempValue, ScriptOps.TemperatureMonAsyncReportParam.Tx1TempValue, ScriptOps.TemperatureMonAsyncReportParam.Tx2TempValue, ScriptOps.TemperatureMonAsyncReportParam.Tx3TempValue, ScriptOps.TemperatureMonAsyncReportParam.PMTempValue, ScriptOps.TemperatureMonAsyncReportParam.Dig1TempValue, ScriptOps.TemperatureMonAsyncReportParam.Dig2TempValue, ScriptOps.TemperatureMonAsyncReportParam.TimeStamp);
                                    string msg42 = string.Format("Temperature monitoring async event received!", new object[0]);
                                    if (!GlobalRef.g_DisableReportLogging)
                                    {
                                        GlobalRef.LuaWrapper.PrintWarning(msg42);
                                    }
                                    GlobalRef.g_TemperatureMon = 1U;
                                    return;
                                }
                                ScriptOps.TemperatureMonAsyncReportParam = (TemperatureMonAsyncReport)Marshal.PtrToStructure(data, typeof(TemperatureMonAsyncReport));
                                ScriptOps.m_MainForm.AnalogMon2Config.CascadeTemperatureMonitoringReport(DeviceMap, ScriptOps.TemperatureMonAsyncReportParam.StatusFlags, ScriptOps.TemperatureMonAsyncReportParam.ErrorCode, ScriptOps.TemperatureMonAsyncReportParam.Rx1TempValue, ScriptOps.TemperatureMonAsyncReportParam.Rx2TempValue, ScriptOps.TemperatureMonAsyncReportParam.Rx3TempValue, ScriptOps.TemperatureMonAsyncReportParam.Rx4TempValue, ScriptOps.TemperatureMonAsyncReportParam.Tx1TempValue, ScriptOps.TemperatureMonAsyncReportParam.Tx2TempValue, ScriptOps.TemperatureMonAsyncReportParam.Tx3TempValue, ScriptOps.TemperatureMonAsyncReportParam.PMTempValue, ScriptOps.TemperatureMonAsyncReportParam.Dig1TempValue, ScriptOps.TemperatureMonAsyncReportParam.Dig2TempValue, ScriptOps.TemperatureMonAsyncReportParam.TimeStamp);
                                string str47 = string.Format("Temperature monitoring async event received!", new object[0]);
                                string str48 = string.Format("[DeviceId-{0}] ", DeviceMap);
                                if (!GlobalRef.g_DisableReportLogging)
                                {
                                    GlobalRef.LuaWrapper.PrintWarning(str48 + str47);
                                }
                                GlobalRef.g_TemperatureMon = 1U;
                                return;
                            }
                        case 4120:
                            {
                                ScriptOps.WriteReportToXML(DeviceMap, data, 68, "RXGainPhaseMonitoring");
                                if (GlobalRef.g_NumOfRadarDevicesDetected == 1U)
                                {
                                    ScriptOps.RxGainPhaseAsyncDataParam = (RxGainPhaseAsyncData)Marshal.PtrToStructure(data, typeof(RxGainPhaseAsyncData));
                                    ScriptOps.m_MainForm.AnalogMon2Config.CascadeRxGainPhaseMonitoringReport(DeviceMap, ScriptOps.RxGainPhaseAsyncDataParam.StatusFlags, ScriptOps.RxGainPhaseAsyncDataParam.ErrorCode, ScriptOps.RxGainPhaseAsyncDataParam.ProfileIndex, ScriptOps.RxGainPhaseAsyncDataParam.RF1Rx1Rx2RxGainValue, ScriptOps.RxGainPhaseAsyncDataParam.RF1Rx3Rx4RxGainValue, ScriptOps.RxGainPhaseAsyncDataParam.RF2Rx1Rx2RxGainValue, ScriptOps.RxGainPhaseAsyncDataParam.RF2Rx3Rx4RxGainValue, ScriptOps.RxGainPhaseAsyncDataParam.RF3Rx1Rx2RxGainValue, ScriptOps.RxGainPhaseAsyncDataParam.RF3Rx3Rx4RxGainValue, ScriptOps.RxGainPhaseAsyncDataParam.RF1Rx1Rx2RxPhaseValue, ScriptOps.RxGainPhaseAsyncDataParam.RF1Rx3Rx4RxPhaseValue, ScriptOps.RxGainPhaseAsyncDataParam.RF2Rx1Rx2RxPhaseValue, ScriptOps.RxGainPhaseAsyncDataParam.RF2Rx3Rx4RxPhaseValue, ScriptOps.RxGainPhaseAsyncDataParam.RF3Rx1Rx2RxPhaseValue, ScriptOps.RxGainPhaseAsyncDataParam.RF3Rx3Rx4RxPhaseValue, ScriptOps.RxGainPhaseAsyncDataParam.TimeStamp);
                                    string msg43 = string.Format("Rx gain phase monitoring async event received!", new object[0]);
                                    if (!GlobalRef.g_DisableReportLogging)
                                    {
                                        GlobalRef.LuaWrapper.PrintWarning(msg43);
                                    }
                                    GlobalRef.g_RxGainAndPhaseMon = 1U;
                                    return;
                                }
                                ScriptOps.RxGainPhaseAsyncDataParam = (RxGainPhaseAsyncData)Marshal.PtrToStructure(data, typeof(RxGainPhaseAsyncData));
                                ScriptOps.m_MainForm.AnalogMon2Config.CascadeRxGainPhaseMonitoringReport(DeviceMap, ScriptOps.RxGainPhaseAsyncDataParam.StatusFlags, ScriptOps.RxGainPhaseAsyncDataParam.ErrorCode, ScriptOps.RxGainPhaseAsyncDataParam.ProfileIndex, ScriptOps.RxGainPhaseAsyncDataParam.RF1Rx1Rx2RxGainValue, ScriptOps.RxGainPhaseAsyncDataParam.RF1Rx3Rx4RxGainValue, ScriptOps.RxGainPhaseAsyncDataParam.RF2Rx1Rx2RxGainValue, ScriptOps.RxGainPhaseAsyncDataParam.RF2Rx3Rx4RxGainValue, ScriptOps.RxGainPhaseAsyncDataParam.RF3Rx1Rx2RxGainValue, ScriptOps.RxGainPhaseAsyncDataParam.RF3Rx3Rx4RxGainValue, ScriptOps.RxGainPhaseAsyncDataParam.RF1Rx1Rx2RxPhaseValue, ScriptOps.RxGainPhaseAsyncDataParam.RF1Rx3Rx4RxPhaseValue, ScriptOps.RxGainPhaseAsyncDataParam.RF2Rx1Rx2RxPhaseValue, ScriptOps.RxGainPhaseAsyncDataParam.RF2Rx3Rx4RxPhaseValue, ScriptOps.RxGainPhaseAsyncDataParam.RF3Rx1Rx2RxPhaseValue, ScriptOps.RxGainPhaseAsyncDataParam.RF3Rx3Rx4RxPhaseValue, ScriptOps.RxGainPhaseAsyncDataParam.TimeStamp);
                                string str49 = string.Format("Rx gain phase monitoring async event received!", new object[0]);
                                string str50 = string.Format("[DeviceId-{0}] ", DeviceMap);
                                if (!GlobalRef.g_DisableReportLogging)
                                {
                                    GlobalRef.LuaWrapper.PrintWarning(str50 + str49);
                                }
                                GlobalRef.g_RxGainAndPhaseMon = 1U;
                                return;
                            }
                        case 4121:
                            {
                                ScriptOps.WriteReportToXML(DeviceMap, data, 48, "RXNoiseFigureMonitoring");
                                if (GlobalRef.g_NumOfRadarDevicesDetected == 1U)
                                {
                                    ScriptOps.RxNoiseFigureAsyncDataParam = (RxNoiseFigureAsyncData)Marshal.PtrToStructure(data, typeof(RxNoiseFigureAsyncData));
                                    ScriptOps.m_MainForm.AnalogMon2Config.CascadeRxNoiseFigureMonitoringReport(DeviceMap, ScriptOps.RxNoiseFigureAsyncDataParam.StatusFlags, ScriptOps.RxNoiseFigureAsyncDataParam.ErrorCode, ScriptOps.RxNoiseFigureAsyncDataParam.ProfileIndex, ScriptOps.RxNoiseFigureAsyncDataParam.RF1Rx1Rx2PowerValue, ScriptOps.RxNoiseFigureAsyncDataParam.RF1Rx3Rx4PowerValue, ScriptOps.RxNoiseFigureAsyncDataParam.RF2Rx1Rx2PowerValue, ScriptOps.RxNoiseFigureAsyncDataParam.RF2Rx3Rx4PowerValue, ScriptOps.RxNoiseFigureAsyncDataParam.RF3Rx1Rx2PowerValue, ScriptOps.RxNoiseFigureAsyncDataParam.RF3Rx3Rx4PowerValue, ScriptOps.RxNoiseFigureAsyncDataParam.TimeStamp);
                                    string msg44 = string.Format("Rx Noise figure monitoring async event received!", new object[0]);
                                    if (!GlobalRef.g_DisableReportLogging)
                                    {
                                        GlobalRef.LuaWrapper.PrintWarning(msg44);
                                    }
                                    GlobalRef.g_RxNoiseFigureMon = 1U;
                                    return;
                                }
                                ScriptOps.RxNoiseFigureAsyncDataParam = (RxNoiseFigureAsyncData)Marshal.PtrToStructure(data, typeof(RxNoiseFigureAsyncData));
                                ScriptOps.m_MainForm.AnalogMon2Config.CascadeRxNoiseFigureMonitoringReport(DeviceMap, ScriptOps.RxNoiseFigureAsyncDataParam.StatusFlags, ScriptOps.RxNoiseFigureAsyncDataParam.ErrorCode, ScriptOps.RxNoiseFigureAsyncDataParam.ProfileIndex, ScriptOps.RxNoiseFigureAsyncDataParam.RF1Rx1Rx2PowerValue, ScriptOps.RxNoiseFigureAsyncDataParam.RF1Rx3Rx4PowerValue, ScriptOps.RxNoiseFigureAsyncDataParam.RF2Rx1Rx2PowerValue, ScriptOps.RxNoiseFigureAsyncDataParam.RF2Rx3Rx4PowerValue, ScriptOps.RxNoiseFigureAsyncDataParam.RF3Rx1Rx2PowerValue, ScriptOps.RxNoiseFigureAsyncDataParam.RF3Rx3Rx4PowerValue, ScriptOps.RxNoiseFigureAsyncDataParam.TimeStamp);
                                string str51 = string.Format("Rx Noise figure monitoring async event received!", new object[0]);
                                string str52 = string.Format("[DeviceId-{0}] ", DeviceMap);
                                if (!GlobalRef.g_DisableReportLogging)
                                {
                                    GlobalRef.LuaWrapper.PrintWarning(str52 + str51);
                                }
                                GlobalRef.g_RxNoiseFigureMon = 1U;
                                return;
                            }
                        case 4122:
                            {
                                ScriptOps.WriteReportToXML(DeviceMap, data, 44, "RXIFStageMonitoring");
                                if (GlobalRef.g_NumOfRadarDevicesDetected == 1U)
                                {
                                    ScriptOps.RxIFStageAsyncDataParam = (RxIFStageAsyncData)Marshal.PtrToStructure(data, typeof(RxIFStageAsyncData));
                                    ScriptOps.m_MainForm.AnalogMon2Config.CascadeRXIFStageMonitoringReport(DeviceMap, ScriptOps.RxIFStageAsyncDataParam.StatusFlags, ScriptOps.RxIFStageAsyncDataParam.ErrorCode, ScriptOps.RxIFStageAsyncDataParam.ProfileIndex, ScriptOps.RxIFStageAsyncDataParam.Rx1Rx2Rx3Rx4IChannnelHPFCuttoffFreqErrorVal, ScriptOps.RxIFStageAsyncDataParam.Rx1Rx2Rx3Rx4QChannnelHPFCuttoffFreqErrorVal, ScriptOps.RxIFStageAsyncDataParam.Rx1Rx2Rx3Rx4IChannnelLPFCuttoffFreqErrorVal, ScriptOps.RxIFStageAsyncDataParam.Rx1Rx2Rx3Rx4QChannnelLPFCuttoffFreqErrorVal, ScriptOps.RxIFStageAsyncDataParam.Rx1Rx2Rx3Rx4IChannnelIFAGainErrorVal, ScriptOps.RxIFStageAsyncDataParam.Rx1Rx2Rx3Rx4QChannnelIFAGainErrorVal, ScriptOps.RxIFStageAsyncDataParam.Reserved3, ScriptOps.RxIFStageAsyncDataParam.TimeStamp);
                                    string msg45 = string.Format("Rx IF Stage monitoring async event received!", new object[0]);
                                    if (!GlobalRef.g_DisableReportLogging)
                                    {
                                        GlobalRef.LuaWrapper.PrintWarning(msg45);
                                    }
                                    GlobalRef.g_RxIFStageMon = 1U;
                                    return;
                                }
                                ScriptOps.RxIFStageAsyncDataParam = (RxIFStageAsyncData)Marshal.PtrToStructure(data, typeof(RxIFStageAsyncData));
                                ScriptOps.m_MainForm.AnalogMon2Config.CascadeRXIFStageMonitoringReport(DeviceMap, ScriptOps.RxIFStageAsyncDataParam.StatusFlags, ScriptOps.RxIFStageAsyncDataParam.ErrorCode, ScriptOps.RxIFStageAsyncDataParam.ProfileIndex, ScriptOps.RxIFStageAsyncDataParam.Rx1Rx2Rx3Rx4IChannnelHPFCuttoffFreqErrorVal, ScriptOps.RxIFStageAsyncDataParam.Rx1Rx2Rx3Rx4QChannnelHPFCuttoffFreqErrorVal, ScriptOps.RxIFStageAsyncDataParam.Rx1Rx2Rx3Rx4IChannnelLPFCuttoffFreqErrorVal, ScriptOps.RxIFStageAsyncDataParam.Rx1Rx2Rx3Rx4QChannnelLPFCuttoffFreqErrorVal, ScriptOps.RxIFStageAsyncDataParam.Rx1Rx2Rx3Rx4IChannnelIFAGainErrorVal, ScriptOps.RxIFStageAsyncDataParam.Rx1Rx2Rx3Rx4QChannnelIFAGainErrorVal, ScriptOps.RxIFStageAsyncDataParam.Reserved3, ScriptOps.RxIFStageAsyncDataParam.TimeStamp);
                                string str53 = string.Format("Rx IF Stage monitoring async event received!", new object[0]);
                                string str54 = string.Format("[DeviceId-{0}] ", DeviceMap);
                                if (!GlobalRef.g_DisableReportLogging)
                                {
                                    GlobalRef.LuaWrapper.PrintWarning(str54 + str53);
                                }
                                GlobalRef.g_RxIFStageMon = 1U;
                                return;
                            }
                        case 4123:
                            {
                                ScriptOps.WriteReportToXML(DeviceMap, data, 20, "TX0PowerMonitoring");
                                if (GlobalRef.g_NumOfRadarDevicesDetected == 1U)
                                {
                                    ScriptOps.Tx1PowerMonAsyncDataParam = (Tx1PowerMonAsyncData)Marshal.PtrToStructure(data, typeof(Tx1PowerMonAsyncData));
                                    ScriptOps.m_MainForm.AnalogMonConfig.CascadeTx1PowerMonitoringReport(DeviceMap, ScriptOps.Tx1PowerMonAsyncDataParam.StatusFlags, ScriptOps.Tx1PowerMonAsyncDataParam.ErrorCode, ScriptOps.Tx1PowerMonAsyncDataParam.ProfileIndex, ScriptOps.Tx1PowerMonAsyncDataParam.RF12TxPowerValue, ScriptOps.Tx1PowerMonAsyncDataParam.RF3TxPowerValue, ScriptOps.Tx1PowerMonAsyncDataParam.TimeStamp);
                                    string msg46 = string.Format("Tx0 Power monitoring async event received!", new object[0]);
                                    if (!GlobalRef.g_DisableReportLogging)
                                    {
                                        GlobalRef.LuaWrapper.PrintWarning(msg46);
                                    }
                                    GlobalRef.g_Tx1PowerMon = 1U;
                                    return;
                                }
                                ScriptOps.Tx1PowerMonAsyncDataParam = (Tx1PowerMonAsyncData)Marshal.PtrToStructure(data, typeof(Tx1PowerMonAsyncData));
                                ScriptOps.m_MainForm.AnalogMonConfig.CascadeTx1PowerMonitoringReport(DeviceMap, ScriptOps.Tx1PowerMonAsyncDataParam.StatusFlags, ScriptOps.Tx1PowerMonAsyncDataParam.ErrorCode, ScriptOps.Tx1PowerMonAsyncDataParam.ProfileIndex, ScriptOps.Tx1PowerMonAsyncDataParam.RF12TxPowerValue, ScriptOps.Tx1PowerMonAsyncDataParam.RF3TxPowerValue, ScriptOps.Tx1PowerMonAsyncDataParam.TimeStamp);
                                string str55 = string.Format("Tx0 Power monitoring async event received!", new object[0]);
                                string str56 = string.Format("[DeviceId-{0}] ", DeviceMap);
                                if (!GlobalRef.g_DisableReportLogging)
                                {
                                    GlobalRef.LuaWrapper.PrintWarning(str56 + str55);
                                }
                                GlobalRef.g_Tx1PowerMon = 1U;
                                return;
                            }
                        case 4124:
                            {
                                ScriptOps.WriteReportToXML(DeviceMap, data, 20, "TX1PowerMonitoring");
                                if (GlobalRef.g_NumOfRadarDevicesDetected == 1U)
                                {
                                    ScriptOps.Tx2PowerMonAsyncDataParam = (Tx2PowerMonAsyncData)Marshal.PtrToStructure(data, typeof(Tx2PowerMonAsyncData));
                                    ScriptOps.m_MainForm.AnalogMonConfig.CascadeTx2PowerMonitoringReport(DeviceMap, ScriptOps.Tx2PowerMonAsyncDataParam.StatusFlags, ScriptOps.Tx2PowerMonAsyncDataParam.ErrorCode, ScriptOps.Tx2PowerMonAsyncDataParam.ProfileIndex, ScriptOps.Tx2PowerMonAsyncDataParam.RF12TxPowerValue, ScriptOps.Tx2PowerMonAsyncDataParam.RF3TxPowerValue, ScriptOps.Tx2PowerMonAsyncDataParam.TimeStamp);
                                    string msg47 = string.Format("Tx1 Power monitoring async event received!", new object[0]);
                                    if (!GlobalRef.g_DisableReportLogging)
                                    {
                                        GlobalRef.LuaWrapper.PrintWarning(msg47);
                                    }
                                    GlobalRef.g_Tx2PowerMon = 1U;
                                    return;
                                }
                                ScriptOps.Tx2PowerMonAsyncDataParam = (Tx2PowerMonAsyncData)Marshal.PtrToStructure(data, typeof(Tx2PowerMonAsyncData));
                                ScriptOps.m_MainForm.AnalogMonConfig.CascadeTx2PowerMonitoringReport(DeviceMap, ScriptOps.Tx2PowerMonAsyncDataParam.StatusFlags, ScriptOps.Tx2PowerMonAsyncDataParam.ErrorCode, ScriptOps.Tx2PowerMonAsyncDataParam.ProfileIndex, ScriptOps.Tx2PowerMonAsyncDataParam.RF12TxPowerValue, ScriptOps.Tx2PowerMonAsyncDataParam.RF3TxPowerValue, ScriptOps.Tx2PowerMonAsyncDataParam.TimeStamp);
                                string str57 = string.Format("Tx1 Power monitoring async event received!", new object[0]);
                                string str58 = string.Format("[DeviceId-{0}] ", DeviceMap);
                                if (!GlobalRef.g_DisableReportLogging)
                                {
                                    GlobalRef.LuaWrapper.PrintWarning(str58 + str57);
                                }
                                GlobalRef.g_Tx2PowerMon = 1U;
                                return;
                            }
                        case 4125:
                            {
                                ScriptOps.WriteReportToXML(DeviceMap, data, 20, "TX2PowerMonitoring");
                                if (GlobalRef.g_NumOfRadarDevicesDetected == 1U)
                                {
                                    ScriptOps.Tx3PowerMonAsyncDataParam = (Tx3PowerMonAsyncData)Marshal.PtrToStructure(data, typeof(Tx3PowerMonAsyncData));
                                    ScriptOps.m_MainForm.AnalogMonConfig.CascadeTx3PowerMonitoringReport(DeviceMap, ScriptOps.Tx3PowerMonAsyncDataParam.StatusFlags, ScriptOps.Tx3PowerMonAsyncDataParam.ErrorCode, ScriptOps.Tx3PowerMonAsyncDataParam.ProfileIndex, ScriptOps.Tx3PowerMonAsyncDataParam.RF12TxPowerValue, ScriptOps.Tx3PowerMonAsyncDataParam.RF3TxPowerValue, ScriptOps.Tx3PowerMonAsyncDataParam.TimeStamp);
                                    string msg48 = string.Format("Tx2 Power monitoring async event received!", new object[0]);
                                    if (!GlobalRef.g_DisableReportLogging)
                                    {
                                        GlobalRef.LuaWrapper.PrintWarning(msg48);
                                    }
                                    GlobalRef.g_Tx3PowerMon = 1U;
                                    return;
                                }
                                ScriptOps.Tx3PowerMonAsyncDataParam = (Tx3PowerMonAsyncData)Marshal.PtrToStructure(data, typeof(Tx3PowerMonAsyncData));
                                ScriptOps.m_MainForm.AnalogMonConfig.CascadeTx3PowerMonitoringReport(DeviceMap, ScriptOps.Tx3PowerMonAsyncDataParam.StatusFlags, ScriptOps.Tx3PowerMonAsyncDataParam.ErrorCode, ScriptOps.Tx3PowerMonAsyncDataParam.ProfileIndex, ScriptOps.Tx3PowerMonAsyncDataParam.RF12TxPowerValue, ScriptOps.Tx3PowerMonAsyncDataParam.RF3TxPowerValue, ScriptOps.Tx3PowerMonAsyncDataParam.TimeStamp);
                                string str59 = string.Format("Tx2 Power monitoring async event received!", new object[0]);
                                string str60 = string.Format("[DeviceId-{0}] ", DeviceMap);
                                if (!GlobalRef.g_DisableReportLogging)
                                {
                                    GlobalRef.LuaWrapper.PrintWarning(str60 + str59);
                                }
                                GlobalRef.g_Tx3PowerMon = 1U;
                                return;
                            }
                        case 4126:
                            {
                                ScriptOps.WriteReportToXML(DeviceMap, data, 16, "TX0BallBreakMonitoring");
                                if (GlobalRef.g_NumOfRadarDevicesDetected == 1U)
                                {
                                    ScriptOps.Tx1BallBreakAsyncDataParam = (Tx1BallBreakAsyncData)Marshal.PtrToStructure(data, typeof(Tx1BallBreakAsyncData));
                                    ScriptOps.m_MainForm.AnalogMonConfig.CascadeTX1BallBreakMonitoringReport(DeviceMap, ScriptOps.Tx1BallBreakAsyncDataParam.StatusFlags, ScriptOps.Tx1BallBreakAsyncDataParam.ErrorCode, ScriptOps.Tx1BallBreakAsyncDataParam.TxReflCoeffMagValue, ScriptOps.Tx1BallBreakAsyncDataParam.TimeStamp);
                                    string msg49 = string.Format("Tx0 Ball Break async event received!", new object[0]);
                                    if (!GlobalRef.g_DisableReportLogging)
                                    {
                                        GlobalRef.LuaWrapper.PrintWarning(msg49);
                                    }
                                    GlobalRef.g_Tx1BallBreakMon = 1U;
                                    return;
                                }
                                ScriptOps.Tx1BallBreakAsyncDataParam = (Tx1BallBreakAsyncData)Marshal.PtrToStructure(data, typeof(Tx1BallBreakAsyncData));
                                ScriptOps.m_MainForm.AnalogMonConfig.CascadeTX1BallBreakMonitoringReport(DeviceMap, ScriptOps.Tx1BallBreakAsyncDataParam.StatusFlags, ScriptOps.Tx1BallBreakAsyncDataParam.ErrorCode, ScriptOps.Tx1BallBreakAsyncDataParam.TxReflCoeffMagValue, ScriptOps.Tx1BallBreakAsyncDataParam.TimeStamp);
                                string str61 = string.Format("Tx0 Ball Break async event received!", new object[0]);
                                string str62 = string.Format("[DeviceId-{0}] ", DeviceMap);
                                if (!GlobalRef.g_DisableReportLogging)
                                {
                                    GlobalRef.LuaWrapper.PrintWarning(str62 + str61);
                                }
                                GlobalRef.g_Tx1BallBreakMon = 1U;
                                return;
                            }
                        case 4127:
                            {
                                ScriptOps.WriteReportToXML(DeviceMap, data, 16, "TX1BallBreakMonitoring");
                                if (GlobalRef.g_NumOfRadarDevicesDetected == 1U)
                                {
                                    ScriptOps.Tx2BallBreakAsyncDataParam = (Tx2BallBreakAsyncData)Marshal.PtrToStructure(data, typeof(Tx2BallBreakAsyncData));
                                    ScriptOps.m_MainForm.AnalogMonConfig.CascadeTX2BallBreakMonitoringReport(DeviceMap, ScriptOps.Tx2BallBreakAsyncDataParam.StatusFlags, ScriptOps.Tx2BallBreakAsyncDataParam.ErrorCode, ScriptOps.Tx2BallBreakAsyncDataParam.TxReflCoeffMagValue, ScriptOps.Tx2BallBreakAsyncDataParam.TimeStamp);
                                    string msg50 = string.Format("Tx1 Ball Break async event received!", new object[0]);
                                    if (!GlobalRef.g_DisableReportLogging)
                                    {
                                        GlobalRef.LuaWrapper.PrintWarning(msg50);
                                    }
                                    GlobalRef.g_Tx2BallBreakMon = 1U;
                                    return;
                                }
                                ScriptOps.Tx2BallBreakAsyncDataParam = (Tx2BallBreakAsyncData)Marshal.PtrToStructure(data, typeof(Tx2BallBreakAsyncData));
                                ScriptOps.m_MainForm.AnalogMonConfig.CascadeTX2BallBreakMonitoringReport(DeviceMap, ScriptOps.Tx2BallBreakAsyncDataParam.StatusFlags, ScriptOps.Tx2BallBreakAsyncDataParam.ErrorCode, ScriptOps.Tx2BallBreakAsyncDataParam.TxReflCoeffMagValue, ScriptOps.Tx2BallBreakAsyncDataParam.TimeStamp);
                                string str63 = string.Format("Tx1 Ball Break async event received!", new object[0]);
                                string str64 = string.Format("[DeviceId-{0}] ", DeviceMap);
                                if (!GlobalRef.g_DisableReportLogging)
                                {
                                    GlobalRef.LuaWrapper.PrintWarning(str64 + str63);
                                }
                                GlobalRef.g_Tx2BallBreakMon = 1U;
                                return;
                            }
                        case 4128:
                            {
                                ScriptOps.WriteReportToXML(DeviceMap, data, 16, "TX2BallBreakMonitoring");
                                if (GlobalRef.g_NumOfRadarDevicesDetected == 1U)
                                {
                                    ScriptOps.Tx3BallBreakAsyncDataParam = (Tx3BallBreakAsyncData)Marshal.PtrToStructure(data, typeof(Tx3BallBreakAsyncData));
                                    ScriptOps.m_MainForm.AnalogMonConfig.CascadeTX3BallBreakMonitoringReport(DeviceMap, ScriptOps.Tx3BallBreakAsyncDataParam.StatusFlags, ScriptOps.Tx3BallBreakAsyncDataParam.ErrorCode, ScriptOps.Tx3BallBreakAsyncDataParam.TxReflCoeffMagValue, ScriptOps.Tx3BallBreakAsyncDataParam.TimeStamp);
                                    string msg51 = string.Format("Tx2 Ball Break async event received!", new object[0]);
                                    if (!GlobalRef.g_DisableReportLogging)
                                    {
                                        GlobalRef.LuaWrapper.PrintWarning(msg51);
                                    }
                                    GlobalRef.g_Tx3BallBreakMon = 1U;
                                    return;
                                }
                                ScriptOps.Tx3BallBreakAsyncDataParam = (Tx3BallBreakAsyncData)Marshal.PtrToStructure(data, typeof(Tx3BallBreakAsyncData));
                                ScriptOps.m_MainForm.AnalogMonConfig.CascadeTX3BallBreakMonitoringReport(DeviceMap, ScriptOps.Tx3BallBreakAsyncDataParam.StatusFlags, ScriptOps.Tx3BallBreakAsyncDataParam.ErrorCode, ScriptOps.Tx3BallBreakAsyncDataParam.TxReflCoeffMagValue, ScriptOps.Tx3BallBreakAsyncDataParam.TimeStamp);
                                string str65 = string.Format("Tx2 Ball Break async event received!", new object[0]);
                                string str66 = string.Format("[DeviceId-{0}] ", DeviceMap);
                                if (!GlobalRef.g_DisableReportLogging)
                                {
                                    GlobalRef.LuaWrapper.PrintWarning(str66 + str65);
                                }
                                GlobalRef.g_Tx3BallBreakMon = 1U;
                                return;
                            }
                        case 4129:
                            {
                                ScriptOps.WriteReportToXML(DeviceMap, data, 56, "TXGainPhaseMismatchMonitoring");
                                if (GlobalRef.g_NumOfRadarDevicesDetected == 1U)
                                {
                                    ScriptOps.TxGainPhaseMismatchAsyncReportParam = (TxGainPhaseMismatchAsyncReport)Marshal.PtrToStructure(data, typeof(TxGainPhaseMismatchAsyncReport));
                                    ScriptOps.m_MainForm.AnalogMonConfig.CascadeTxGainPhaseMismatchMonitoringReport(DeviceMap, ScriptOps.TxGainPhaseMismatchAsyncReportParam.StatusFlags, ScriptOps.TxGainPhaseMismatchAsyncReportParam.ErrorCode, ScriptOps.TxGainPhaseMismatchAsyncReportParam.ProfileIndex, ScriptOps.TxGainPhaseMismatchAsyncReportParam.RF1Tx1Tx2TxGainValue, ScriptOps.TxGainPhaseMismatchAsyncReportParam.RF1Tx3RF2Tx1TxGainValue, ScriptOps.TxGainPhaseMismatchAsyncReportParam.RF2Tx2RF2Tx3TxGainValue, ScriptOps.TxGainPhaseMismatchAsyncReportParam.RF3Tx1RF3Tx2TxGainValue, ScriptOps.TxGainPhaseMismatchAsyncReportParam.RF3Tx3GainRF1Tx1PhaseValue, ScriptOps.TxGainPhaseMismatchAsyncReportParam.RF1Tx2Tx3TxPhaseValue, ScriptOps.TxGainPhaseMismatchAsyncReportParam.RF2Tx1RF2Tx2TxPhaseValue, ScriptOps.TxGainPhaseMismatchAsyncReportParam.RF2Tx3RF3Tx1TxPhaseValue, ScriptOps.TxGainPhaseMismatchAsyncReportParam.RF3Tx2RF3Tx3TxPhaseValue, ScriptOps.TxGainPhaseMismatchAsyncReportParam.TimeStamp);
                                    string msg52 = string.Format("Tx gain phase mismatch monitoring async event received!", new object[0]);
                                    if (!GlobalRef.g_DisableReportLogging)
                                    {
                                        GlobalRef.LuaWrapper.PrintWarning(msg52);
                                    }
                                    GlobalRef.g_TxGainPhaseMismatchMon = 1U;
                                    return;
                                }
                                ScriptOps.TxGainPhaseMismatchAsyncReportParam = (TxGainPhaseMismatchAsyncReport)Marshal.PtrToStructure(data, typeof(TxGainPhaseMismatchAsyncReport));
                                ScriptOps.m_MainForm.AnalogMonConfig.CascadeTxGainPhaseMismatchMonitoringReport(DeviceMap, ScriptOps.TxGainPhaseMismatchAsyncReportParam.StatusFlags, ScriptOps.TxGainPhaseMismatchAsyncReportParam.ErrorCode, ScriptOps.TxGainPhaseMismatchAsyncReportParam.ProfileIndex, ScriptOps.TxGainPhaseMismatchAsyncReportParam.RF1Tx1Tx2TxGainValue, ScriptOps.TxGainPhaseMismatchAsyncReportParam.RF1Tx3RF2Tx1TxGainValue, ScriptOps.TxGainPhaseMismatchAsyncReportParam.RF2Tx2RF2Tx3TxGainValue, ScriptOps.TxGainPhaseMismatchAsyncReportParam.RF3Tx1RF3Tx2TxGainValue, ScriptOps.TxGainPhaseMismatchAsyncReportParam.RF3Tx3GainRF1Tx1PhaseValue, ScriptOps.TxGainPhaseMismatchAsyncReportParam.RF1Tx2Tx3TxPhaseValue, ScriptOps.TxGainPhaseMismatchAsyncReportParam.RF2Tx1RF2Tx2TxPhaseValue, ScriptOps.TxGainPhaseMismatchAsyncReportParam.RF2Tx3RF3Tx1TxPhaseValue, ScriptOps.TxGainPhaseMismatchAsyncReportParam.RF3Tx2RF3Tx3TxPhaseValue, ScriptOps.TxGainPhaseMismatchAsyncReportParam.TimeStamp);
                                string str67 = string.Format("Tx gain phase mismatch monitoring async event received!", new object[0]);
                                string str68 = string.Format("[DeviceId-{0}] ", DeviceMap);
                                if (!GlobalRef.g_DisableReportLogging)
                                {
                                    GlobalRef.LuaWrapper.PrintWarning(str68 + str67);
                                }
                                GlobalRef.g_TxGainPhaseMismatchMon = 1U;
                                return;
                            }
                        case 4130:
                            {
                                ScriptOps.WriteReportToXML(DeviceMap, data, 16, "Tx0BPMPhaseMonitoring");
                                if (GlobalRef.g_NumOfRadarDevicesDetected == 1U)
                                {
                                    ScriptOps.Tx1BPMPhaseAsyncFormatParam = (Tx1BPMPhaseAsyncFormat)Marshal.PtrToStructure(data, typeof(Tx1BPMPhaseAsyncFormat));
                                    ScriptOps.m_MainForm.AnalogMonConfig.CascadeTx1BPMPhaseMonitoringReport(DeviceMap, ScriptOps.Tx1BPMPhaseAsyncFormatParam.StatusFlags, ScriptOps.Tx1BPMPhaseAsyncFormatParam.ErrorCode, ScriptOps.Tx1BPMPhaseAsyncFormatParam.ProfileIndex, ScriptOps.Tx1BPMPhaseAsyncFormatParam.TxPhaseShifter2LSB, ScriptOps.Tx1BPMPhaseAsyncFormatParam.TxPhaseShifter1Val, ScriptOps.Tx1BPMPhaseAsyncFormatParam.TxBPMPhaseErrorVal, ScriptOps.Tx1BPMPhaseAsyncFormatParam.TxBPMAmplitudeErrorVal, ScriptOps.Tx1BPMPhaseAsyncFormatParam.TxPhaseShifter2MSB, ScriptOps.Tx1BPMPhaseAsyncFormatParam.TimeStamp);
                                    string msg53 = string.Format("Tx0 BPM Phase monitoring async event received!", new object[0]);
                                    if (!GlobalRef.g_DisableReportLogging)
                                    {
                                        GlobalRef.LuaWrapper.PrintWarning(msg53);
                                    }
                                    GlobalRef.g_Tx1BPMPhaseMon = 1U;
                                    return;
                                }
                                ScriptOps.Tx1BPMPhaseAsyncFormatParam = (Tx1BPMPhaseAsyncFormat)Marshal.PtrToStructure(data, typeof(Tx1BPMPhaseAsyncFormat));
                                ScriptOps.m_MainForm.AnalogMonConfig.CascadeTx1BPMPhaseMonitoringReport(DeviceMap, ScriptOps.Tx1BPMPhaseAsyncFormatParam.StatusFlags, ScriptOps.Tx1BPMPhaseAsyncFormatParam.ErrorCode, ScriptOps.Tx1BPMPhaseAsyncFormatParam.ProfileIndex, ScriptOps.Tx1BPMPhaseAsyncFormatParam.TxPhaseShifter2LSB, ScriptOps.Tx1BPMPhaseAsyncFormatParam.TxPhaseShifter1Val, ScriptOps.Tx1BPMPhaseAsyncFormatParam.TxBPMPhaseErrorVal, ScriptOps.Tx1BPMPhaseAsyncFormatParam.TxBPMAmplitudeErrorVal, ScriptOps.Tx1BPMPhaseAsyncFormatParam.TxPhaseShifter2MSB, ScriptOps.Tx1BPMPhaseAsyncFormatParam.TimeStamp);
                                string str69 = string.Format("Tx0 BPM Phase monitoring async event received!", new object[0]);
                                string str70 = string.Format("[DeviceId-{0}] ", DeviceMap);
                                if (!GlobalRef.g_DisableReportLogging)
                                {
                                    GlobalRef.LuaWrapper.PrintWarning(str70 + str69);
                                }
                                GlobalRef.g_Tx1BPMPhaseMon = 1U;
                                return;
                            }
                        case 4131:
                            {
                                ScriptOps.WriteReportToXML(DeviceMap, data, 16, "Tx1BPMPhaseMonitoring");
                                if (GlobalRef.g_NumOfRadarDevicesDetected == 1U)
                                {
                                    ScriptOps.Tx2BPMPhaseAsyncFormatParam = (Tx2BPMPhaseAsyncFormat)Marshal.PtrToStructure(data, typeof(Tx2BPMPhaseAsyncFormat));
                                    ScriptOps.m_MainForm.AnalogMonConfig.CascadeTx2BPMPhaseMonitoringReport(DeviceMap, ScriptOps.Tx2BPMPhaseAsyncFormatParam.StatusFlags, ScriptOps.Tx2BPMPhaseAsyncFormatParam.ErrorCode, ScriptOps.Tx2BPMPhaseAsyncFormatParam.ProfileIndex, ScriptOps.Tx2BPMPhaseAsyncFormatParam.TxPhaseShifter2LSB, ScriptOps.Tx2BPMPhaseAsyncFormatParam.TxPhaseShifter1Val, ScriptOps.Tx2BPMPhaseAsyncFormatParam.TxBPMPhaseErrorVal, ScriptOps.Tx2BPMPhaseAsyncFormatParam.TxBPMAmplitudeErrorVal, ScriptOps.Tx2BPMPhaseAsyncFormatParam.TxPhaseShifter2MSB, ScriptOps.Tx2BPMPhaseAsyncFormatParam.TimeStamp);
                                    string msg54 = string.Format("Tx1 BPM Phase monitoring async event received!", new object[0]);
                                    if (!GlobalRef.g_DisableReportLogging)
                                    {
                                        GlobalRef.LuaWrapper.PrintWarning(msg54);
                                    }
                                    GlobalRef.g_Tx2BPMPhaseMon = 1U;
                                    return;
                                }
                                ScriptOps.Tx2BPMPhaseAsyncFormatParam = (Tx2BPMPhaseAsyncFormat)Marshal.PtrToStructure(data, typeof(Tx2BPMPhaseAsyncFormat));
                                ScriptOps.m_MainForm.AnalogMonConfig.CascadeTx2BPMPhaseMonitoringReport(DeviceMap, ScriptOps.Tx2BPMPhaseAsyncFormatParam.StatusFlags, ScriptOps.Tx2BPMPhaseAsyncFormatParam.ErrorCode, ScriptOps.Tx2BPMPhaseAsyncFormatParam.ProfileIndex, ScriptOps.Tx2BPMPhaseAsyncFormatParam.TxPhaseShifter2LSB, ScriptOps.Tx2BPMPhaseAsyncFormatParam.TxPhaseShifter1Val, ScriptOps.Tx2BPMPhaseAsyncFormatParam.TxBPMPhaseErrorVal, ScriptOps.Tx2BPMPhaseAsyncFormatParam.TxBPMAmplitudeErrorVal, ScriptOps.Tx2BPMPhaseAsyncFormatParam.TxPhaseShifter2MSB, ScriptOps.Tx2BPMPhaseAsyncFormatParam.TimeStamp);
                                string str71 = string.Format("Tx1 BPM Phase monitoring async event received!", new object[0]);
                                string str72 = string.Format("[DeviceId-{0}] ", DeviceMap);
                                if (!GlobalRef.g_DisableReportLogging)
                                {
                                    GlobalRef.LuaWrapper.PrintWarning(str72 + str71);
                                }
                                GlobalRef.g_Tx2BPMPhaseMon = 1U;
                                return;
                            }
                        case 4132:
                            {
                                ScriptOps.WriteReportToXML(DeviceMap, data, 16, "Tx2BPMPhaseMonitoring");
                                if (GlobalRef.g_NumOfRadarDevicesDetected == 1U)
                                {
                                    ScriptOps.Tx3BPMPhaseAsyncFormatParam = (Tx3BPMPhaseAsyncFormat)Marshal.PtrToStructure(data, typeof(Tx3BPMPhaseAsyncFormat));
                                    ScriptOps.m_MainForm.AnalogMonConfig.CascadeTx3BPMPhaseMonitoringReport(DeviceMap, ScriptOps.Tx3BPMPhaseAsyncFormatParam.StatusFlags, ScriptOps.Tx3BPMPhaseAsyncFormatParam.ErrorCode, ScriptOps.Tx3BPMPhaseAsyncFormatParam.ProfileIndex, ScriptOps.Tx3BPMPhaseAsyncFormatParam.TxPhaseShifter2LSB, ScriptOps.Tx3BPMPhaseAsyncFormatParam.TxPhaseShifter1Val, ScriptOps.Tx3BPMPhaseAsyncFormatParam.TxBPMPhaseErrorVal, ScriptOps.Tx3BPMPhaseAsyncFormatParam.TxBPMAmplitudeErrorVal, ScriptOps.Tx3BPMPhaseAsyncFormatParam.TxPhaseShifter2MSB, ScriptOps.Tx3BPMPhaseAsyncFormatParam.TimeStamp);
                                    string msg55 = string.Format("Tx2 BPM Phase monitoring async event received!", new object[0]);
                                    if (!GlobalRef.g_DisableReportLogging)
                                    {
                                        GlobalRef.LuaWrapper.PrintWarning(msg55);
                                    }
                                    GlobalRef.g_Tx3BPMPhaseMon = 1U;
                                    return;
                                }
                                ScriptOps.Tx3BPMPhaseAsyncFormatParam = (Tx3BPMPhaseAsyncFormat)Marshal.PtrToStructure(data, typeof(Tx3BPMPhaseAsyncFormat));
                                ScriptOps.m_MainForm.AnalogMonConfig.CascadeTx3BPMPhaseMonitoringReport(DeviceMap, ScriptOps.Tx3BPMPhaseAsyncFormatParam.StatusFlags, ScriptOps.Tx3BPMPhaseAsyncFormatParam.ErrorCode, ScriptOps.Tx3BPMPhaseAsyncFormatParam.ProfileIndex, ScriptOps.Tx3BPMPhaseAsyncFormatParam.TxPhaseShifter2LSB, ScriptOps.Tx3BPMPhaseAsyncFormatParam.TxPhaseShifter1Val, ScriptOps.Tx3BPMPhaseAsyncFormatParam.TxBPMPhaseErrorVal, ScriptOps.Tx3BPMPhaseAsyncFormatParam.TxBPMAmplitudeErrorVal, ScriptOps.Tx3BPMPhaseAsyncFormatParam.TxPhaseShifter2MSB, ScriptOps.Tx3BPMPhaseAsyncFormatParam.TimeStamp);
                                string str73 = string.Format("Tx2 BPM Phase monitoring async event received!", new object[0]);
                                string str74 = string.Format("[DeviceId-{0}] ", DeviceMap);
                                if (!GlobalRef.g_DisableReportLogging)
                                {
                                    GlobalRef.LuaWrapper.PrintWarning(str74 + str73);
                                }
                                GlobalRef.g_Tx3BPMPhaseMon = 1U;
                                return;
                            }
                        case 4133:
                            {
                                ScriptOps.WriteReportToXML(DeviceMap, data, 28, "SynthFrequencyMonitoring");
                                if (GlobalRef.g_NumOfRadarDevicesDetected == 1U)
                                {
                                    ScriptOps.SynthFrequencyMonAsyncReportParam = (SynthFrequencyMonAsyncReport)Marshal.PtrToStructure(data, typeof(SynthFrequencyMonAsyncReport));
                                    ScriptOps.m_MainForm.AnalogMon2Config.CascadeSynthFrequencyMonitoringReport(DeviceMap, ScriptOps.SynthFrequencyMonAsyncReportParam.StatusFlags, ScriptOps.SynthFrequencyMonAsyncReportParam.ErrorCode, ScriptOps.SynthFrequencyMonAsyncReportParam.ProfileIndex, ScriptOps.SynthFrequencyMonAsyncReportParam.MaxFreqErrorValue, ScriptOps.SynthFrequencyMonAsyncReportParam.FreqFailureCount, ScriptOps.SynthFrequencyMonAsyncReportParam.TimeStamp);
                                    string msg56 = string.Format("Synthesizer frequency monitoring async event received!", new object[0]);
                                    if (!GlobalRef.g_DisableReportLogging)
                                    {
                                        GlobalRef.LuaWrapper.PrintWarning(msg56);
                                    }
                                    GlobalRef.g_SynthFreqErrMon = 1U;
                                    return;
                                }
                                ScriptOps.SynthFrequencyMonAsyncReportParam = (SynthFrequencyMonAsyncReport)Marshal.PtrToStructure(data, typeof(SynthFrequencyMonAsyncReport));
                                ScriptOps.m_MainForm.AnalogMon2Config.CascadeSynthFrequencyMonitoringReport(DeviceMap, ScriptOps.SynthFrequencyMonAsyncReportParam.StatusFlags, ScriptOps.SynthFrequencyMonAsyncReportParam.ErrorCode, ScriptOps.SynthFrequencyMonAsyncReportParam.ProfileIndex, ScriptOps.SynthFrequencyMonAsyncReportParam.MaxFreqErrorValue, ScriptOps.SynthFrequencyMonAsyncReportParam.FreqFailureCount, ScriptOps.SynthFrequencyMonAsyncReportParam.TimeStamp);
                                string str75 = string.Format("Synthesizer frequency monitoring async event received!", new object[0]);
                                string str76 = string.Format("[DeviceId-{0}] ", DeviceMap);
                                if (!GlobalRef.g_DisableReportLogging)
                                {
                                    GlobalRef.LuaWrapper.PrintWarning(str76 + str75);
                                }
                                GlobalRef.g_SynthFreqErrMon = 1U;
                                return;
                            }
                        case 4134:
                            {
                                ScriptOps.WriteReportToXML(DeviceMap, data, 24, "ExtAnalogSignalsMonitoring");
                                if (GlobalRef.g_NumOfRadarDevicesDetected == 1U)
                                {
                                    ScriptOps.ExtAnalogSigMonAsyncReportParam = (ExtAnalogSigMonAsyncReport)Marshal.PtrToStructure(data, typeof(ExtAnalogSigMonAsyncReport));
                                    ScriptOps.m_MainForm.p000001.CascadeExternalAnalogSignalMonitoringReport(DeviceMap, ScriptOps.ExtAnalogSigMonAsyncReportParam.StatusFlags, ScriptOps.ExtAnalogSigMonAsyncReportParam.ErrorCode, ScriptOps.ExtAnalogSigMonAsyncReportParam.ExtAnalogSigTest1Val, ScriptOps.ExtAnalogSigMonAsyncReportParam.ExtAnalogSigTest2Val, ScriptOps.ExtAnalogSigMonAsyncReportParam.ExtAnalogSigTest3Val, ScriptOps.ExtAnalogSigMonAsyncReportParam.ExtAnalogSigTest4Val, ScriptOps.ExtAnalogSigMonAsyncReportParam.ExtAnalogSigMuxVal, ScriptOps.ExtAnalogSigMonAsyncReportParam.ExtAnalogSigVSenseVal, ScriptOps.ExtAnalogSigMonAsyncReportParam.TimeStamp);
                                    string msg57 = string.Format("External Analog Signals monitoring async event received!", new object[0]);
                                    if (!GlobalRef.g_DisableReportLogging)
                                    {
                                        GlobalRef.LuaWrapper.PrintWarning(msg57);
                                    }
                                    GlobalRef.g_ExternalAnaSigMon = 1U;
                                    return;
                                }
                                ScriptOps.ExtAnalogSigMonAsyncReportParam = (ExtAnalogSigMonAsyncReport)Marshal.PtrToStructure(data, typeof(ExtAnalogSigMonAsyncReport));
                                ScriptOps.m_MainForm.p000001.CascadeExternalAnalogSignalMonitoringReport(DeviceMap, ScriptOps.ExtAnalogSigMonAsyncReportParam.StatusFlags, ScriptOps.ExtAnalogSigMonAsyncReportParam.ErrorCode, ScriptOps.ExtAnalogSigMonAsyncReportParam.ExtAnalogSigTest1Val, ScriptOps.ExtAnalogSigMonAsyncReportParam.ExtAnalogSigTest2Val, ScriptOps.ExtAnalogSigMonAsyncReportParam.ExtAnalogSigTest3Val, ScriptOps.ExtAnalogSigMonAsyncReportParam.ExtAnalogSigTest4Val, ScriptOps.ExtAnalogSigMonAsyncReportParam.ExtAnalogSigMuxVal, ScriptOps.ExtAnalogSigMonAsyncReportParam.ExtAnalogSigVSenseVal, ScriptOps.ExtAnalogSigMonAsyncReportParam.TimeStamp);
                                string str77 = string.Format("External Analog Signals monitoring async event received!", new object[0]);
                                string str78 = string.Format("[DeviceId-{0}] ", DeviceMap);
                                if (!GlobalRef.g_DisableReportLogging)
                                {
                                    GlobalRef.LuaWrapper.PrintWarning(str78 + str77);
                                }
                                GlobalRef.g_ExternalAnaSigMon = 1U;
                                return;
                            }
                        case 4135:
                            {
                                ScriptOps.WriteReportToXML(DeviceMap, data, 12, "IntTX0AnalogSignalMonitoring");
                                if (GlobalRef.g_NumOfRadarDevicesDetected == 1U)
                                {
                                    ScriptOps.IntTx1AnalogSigMonAsyncReportParam = (IntTx1AnalogSigMonAsyncReport)Marshal.PtrToStructure(data, typeof(IntTx1AnalogSigMonAsyncReport));
                                    ScriptOps.m_MainForm.p000001.CascadeInternalTX1AnalogSigMonitoringReport(DeviceMap, ScriptOps.IntTx1AnalogSigMonAsyncReportParam.StatusFlags, ScriptOps.IntTx1AnalogSigMonAsyncReportParam.ErrorCode, ScriptOps.IntTx1AnalogSigMonAsyncReportParam.ProfileIndex, ScriptOps.IntTx1AnalogSigMonAsyncReportParam.TimeStamp);
                                    string msg58 = string.Format("Internal Tx0 Analog Signals monitoring async event received!", new object[0]);
                                    if (!GlobalRef.g_DisableReportLogging)
                                    {
                                        GlobalRef.LuaWrapper.PrintWarning(msg58);
                                    }
                                    GlobalRef.g_InternalTx1AnaSigMon = 1U;
                                    return;
                                }
                                ScriptOps.IntTx1AnalogSigMonAsyncReportParam = (IntTx1AnalogSigMonAsyncReport)Marshal.PtrToStructure(data, typeof(IntTx1AnalogSigMonAsyncReport));
                                ScriptOps.m_MainForm.p000001.CascadeInternalTX1AnalogSigMonitoringReport(DeviceMap, ScriptOps.IntTx1AnalogSigMonAsyncReportParam.StatusFlags, ScriptOps.IntTx1AnalogSigMonAsyncReportParam.ErrorCode, ScriptOps.IntTx1AnalogSigMonAsyncReportParam.ProfileIndex, ScriptOps.IntTx1AnalogSigMonAsyncReportParam.TimeStamp);
                                string str79 = string.Format("Internal Tx0 Analog Signals monitoring async event received!", new object[0]);
                                string str80 = string.Format("[DeviceId-{0}] ", DeviceMap);
                                if (!GlobalRef.g_DisableReportLogging)
                                {
                                    GlobalRef.LuaWrapper.PrintWarning(str80 + str79);
                                }
                                GlobalRef.g_InternalTx1AnaSigMon = 1U;
                                return;
                            }
                        case 4136:
                            {
                                ScriptOps.WriteReportToXML(DeviceMap, data, 12, "IntTX1AnalogSignalMonitoring");
                                if (GlobalRef.g_NumOfRadarDevicesDetected == 1U)
                                {
                                    ScriptOps.IntTx2AnalogSigMonAsyncReportParam = (IntTx2AnalogSigMonAsyncReport)Marshal.PtrToStructure(data, typeof(IntTx2AnalogSigMonAsyncReport));
                                    ScriptOps.m_MainForm.p000001.CascadeInternalTX2AnalogSigMonitoringReport(DeviceMap, ScriptOps.IntTx2AnalogSigMonAsyncReportParam.StatusFlags, ScriptOps.IntTx2AnalogSigMonAsyncReportParam.ErrorCode, ScriptOps.IntTx2AnalogSigMonAsyncReportParam.ProfileIndex, ScriptOps.IntTx2AnalogSigMonAsyncReportParam.TimeStamp);
                                    string msg59 = string.Format("Internal Tx1 Analog Signals monitoring async event received!", new object[0]);
                                    if (!GlobalRef.g_DisableReportLogging)
                                    {
                                        GlobalRef.LuaWrapper.PrintWarning(msg59);
                                    }
                                    GlobalRef.g_InternalTx2AnaSigMon = 1U;
                                    return;
                                }
                                ScriptOps.IntTx2AnalogSigMonAsyncReportParam = (IntTx2AnalogSigMonAsyncReport)Marshal.PtrToStructure(data, typeof(IntTx2AnalogSigMonAsyncReport));
                                ScriptOps.m_MainForm.p000001.CascadeInternalTX2AnalogSigMonitoringReport(DeviceMap, ScriptOps.IntTx2AnalogSigMonAsyncReportParam.StatusFlags, ScriptOps.IntTx2AnalogSigMonAsyncReportParam.ErrorCode, ScriptOps.IntTx2AnalogSigMonAsyncReportParam.ProfileIndex, ScriptOps.IntTx2AnalogSigMonAsyncReportParam.TimeStamp);
                                string str81 = string.Format("Internal Tx1 Analog Signals monitoring async event received!", new object[0]);
                                string str82 = string.Format("[DeviceId-{0}] ", DeviceMap);
                                if (!GlobalRef.g_DisableReportLogging)
                                {
                                    GlobalRef.LuaWrapper.PrintWarning(str82 + str81);
                                }
                                GlobalRef.g_InternalTx2AnaSigMon = 1U;
                                return;
                            }
                        case 4137:
                            {
                                ScriptOps.WriteReportToXML(DeviceMap, data, 12, "IntTX2AnalogSignalMonitoring");
                                if (GlobalRef.g_NumOfRadarDevicesDetected == 1U)
                                {
                                    ScriptOps.IntTx3AnalogSigMonAsyncReportParam = (IntTx3AnalogSigMonAsyncReport)Marshal.PtrToStructure(data, typeof(IntTx3AnalogSigMonAsyncReport));
                                    ScriptOps.m_MainForm.p000001.CascadeInternalTX3AnalogSigMonitoringReport(DeviceMap, ScriptOps.IntTx1AnalogSigMonAsyncReportParam.StatusFlags, ScriptOps.IntTx1AnalogSigMonAsyncReportParam.ErrorCode, ScriptOps.IntTx1AnalogSigMonAsyncReportParam.ProfileIndex, ScriptOps.IntTx1AnalogSigMonAsyncReportParam.TimeStamp);
                                    string msg60 = string.Format("Internal Tx2 Analog Signals monitoring async event received!", new object[0]);
                                    if (!GlobalRef.g_DisableReportLogging)
                                    {
                                        GlobalRef.LuaWrapper.PrintWarning(msg60);
                                    }
                                    GlobalRef.g_InternalTx3AnaSigMon = 1U;
                                    return;
                                }
                                ScriptOps.IntTx3AnalogSigMonAsyncReportParam = (IntTx3AnalogSigMonAsyncReport)Marshal.PtrToStructure(data, typeof(IntTx3AnalogSigMonAsyncReport));
                                ScriptOps.m_MainForm.p000001.CascadeInternalTX3AnalogSigMonitoringReport(DeviceMap, ScriptOps.IntTx1AnalogSigMonAsyncReportParam.StatusFlags, ScriptOps.IntTx1AnalogSigMonAsyncReportParam.ErrorCode, ScriptOps.IntTx1AnalogSigMonAsyncReportParam.ProfileIndex, ScriptOps.IntTx1AnalogSigMonAsyncReportParam.TimeStamp);
                                string str83 = string.Format("Internal Tx2 Analog Signals monitoring async event received!", new object[0]);
                                string str84 = string.Format("[DeviceId-{0}] ", DeviceMap);
                                if (!GlobalRef.g_DisableReportLogging)
                                {
                                    GlobalRef.LuaWrapper.PrintWarning(str84 + str83);
                                }
                                GlobalRef.g_InternalTx3AnaSigMon = 1U;
                                return;
                            }
                        case 4138:
                            {
                                ScriptOps.WriteReportToXML(DeviceMap, data, 12, "IntRxAnalogSignalMonitoring");
                                if (GlobalRef.g_NumOfRadarDevicesDetected == 1U)
                                {
                                    ScriptOps.IntRxAnalogSigMonAsyncReportParam = (IntRxAnalogSigMonAsyncReport)Marshal.PtrToStructure(data, typeof(IntRxAnalogSigMonAsyncReport));
                                    ScriptOps.m_MainForm.p000001.CascadeInternalRxAnalogSigMonitoringReport(DeviceMap, ScriptOps.IntRxAnalogSigMonAsyncReportParam.StatusFlags, ScriptOps.IntRxAnalogSigMonAsyncReportParam.ErrorCode, ScriptOps.IntRxAnalogSigMonAsyncReportParam.ProfileIndex, ScriptOps.IntRxAnalogSigMonAsyncReportParam.TimeStamp);
                                    string msg61 = string.Format("Internal Rx Analog Signals monitoring async event received!", new object[0]);
                                    if (!GlobalRef.g_DisableReportLogging)
                                    {
                                        GlobalRef.LuaWrapper.PrintWarning(msg61);
                                    }
                                    GlobalRef.g_InternalRxAnaSigMon = 1U;
                                    return;
                                }
                                ScriptOps.IntRxAnalogSigMonAsyncReportParam = (IntRxAnalogSigMonAsyncReport)Marshal.PtrToStructure(data, typeof(IntRxAnalogSigMonAsyncReport));
                                ScriptOps.m_MainForm.p000001.CascadeInternalRxAnalogSigMonitoringReport(DeviceMap, ScriptOps.IntRxAnalogSigMonAsyncReportParam.StatusFlags, ScriptOps.IntRxAnalogSigMonAsyncReportParam.ErrorCode, ScriptOps.IntRxAnalogSigMonAsyncReportParam.ProfileIndex, ScriptOps.IntRxAnalogSigMonAsyncReportParam.TimeStamp);
                                string str85 = string.Format("Internal Rx Analog Signals monitoring async event received!", new object[0]);
                                string str86 = string.Format("[DeviceId-{0}] ", DeviceMap);
                                if (!GlobalRef.g_DisableReportLogging)
                                {
                                    GlobalRef.LuaWrapper.PrintWarning(str86 + str85);
                                }
                                GlobalRef.g_InternalRxAnaSigMon = 1U;
                                return;
                            }
                        case 4139:
                            {
                                ScriptOps.WriteReportToXML(DeviceMap, data, 12, "IntPMCLKLOAnalogSignalMonitoring");
                                if (GlobalRef.g_NumOfRadarDevicesDetected == 1U)
                                {
                                    ScriptOps.IntPMCLKLOAnalogSigMonAsyncReportParam = (IntPMCLKLOAnalogSigMonAsyncReport)Marshal.PtrToStructure(data, typeof(IntPMCLKLOAnalogSigMonAsyncReport));
                                    ScriptOps.m_MainForm.p000001.CascadeInternalPMCLKLOAnalogSigMonitoringReport(DeviceMap, ScriptOps.IntPMCLKLOAnalogSigMonAsyncReportParam.StatusFlags, ScriptOps.IntPMCLKLOAnalogSigMonAsyncReportParam.ErrorCode, ScriptOps.IntPMCLKLOAnalogSigMonAsyncReportParam.ProfileIndex, ScriptOps.IntPMCLKLOAnalogSigMonAsyncReportParam.Sync20GPower, ScriptOps.IntPMCLKLOAnalogSigMonAsyncReportParam.Reserved2, ScriptOps.IntPMCLKLOAnalogSigMonAsyncReportParam.TimeStamp);
                                    string msg62 = string.Format("Internal PMCLKLO Analog Signals monitoring async event received!", new object[0]);
                                    if (!GlobalRef.g_DisableReportLogging)
                                    {
                                        GlobalRef.LuaWrapper.PrintWarning(msg62);
                                    }
                                    GlobalRef.g_InternalPmClkLoAnaSigMon = 1U;
                                    return;
                                }
                                ScriptOps.IntPMCLKLOAnalogSigMonAsyncReportParam = (IntPMCLKLOAnalogSigMonAsyncReport)Marshal.PtrToStructure(data, typeof(IntPMCLKLOAnalogSigMonAsyncReport));
                                ScriptOps.m_MainForm.p000001.CascadeInternalPMCLKLOAnalogSigMonitoringReport(DeviceMap, ScriptOps.IntPMCLKLOAnalogSigMonAsyncReportParam.StatusFlags, ScriptOps.IntPMCLKLOAnalogSigMonAsyncReportParam.ErrorCode, ScriptOps.IntPMCLKLOAnalogSigMonAsyncReportParam.ProfileIndex, ScriptOps.IntPMCLKLOAnalogSigMonAsyncReportParam.Sync20GPower, ScriptOps.IntPMCLKLOAnalogSigMonAsyncReportParam.Reserved2, ScriptOps.IntPMCLKLOAnalogSigMonAsyncReportParam.TimeStamp);
                                string str87 = string.Format("Internal PMCLKLO Analog Signals monitoring async event received!", new object[0]);
                                string str88 = string.Format("[DeviceId-{0}] ", DeviceMap);
                                if (!GlobalRef.g_DisableReportLogging)
                                {
                                    GlobalRef.LuaWrapper.PrintWarning(str88 + str87);
                                }
                                GlobalRef.g_InternalPmClkLoAnaSigMon = 1U;
                                return;
                            }
                        case 4140:
                            {
                                ScriptOps.WriteReportToXML(DeviceMap, data, 16, "IntGPADCAnalogSignalMonitoring");
                                if (GlobalRef.g_NumOfRadarDevicesDetected == 1U)
                                {
                                    ScriptOps.IntGPADCAnalogSigMonAsyncReportParam = (IntGPADCAnalogSigMonAsyncReport)Marshal.PtrToStructure(data, typeof(IntGPADCAnalogSigMonAsyncReport));
                                    ScriptOps.m_MainForm.p000001.CascadeInternalGPADCAnalogSigMonitoringReport(DeviceMap, ScriptOps.IntGPADCAnalogSigMonAsyncReportParam.StatusFlags, ScriptOps.IntGPADCAnalogSigMonAsyncReportParam.ErrorCode, ScriptOps.IntGPADCAnalogSigMonAsyncReportParam.f00000c, ScriptOps.IntGPADCAnalogSigMonAsyncReportParam.f00000d, ScriptOps.IntGPADCAnalogSigMonAsyncReportParam.TimeStamp);
                                    string msg63 = string.Format("Internal GPADC Analog Signals monitoring async event received!", new object[0]);
                                    if (!GlobalRef.g_DisableReportLogging)
                                    {
                                        GlobalRef.LuaWrapper.PrintWarning(msg63);
                                    }
                                    GlobalRef.f0002d4 = 1U;
                                    return;
                                }
                                ScriptOps.IntGPADCAnalogSigMonAsyncReportParam = (IntGPADCAnalogSigMonAsyncReport)Marshal.PtrToStructure(data, typeof(IntGPADCAnalogSigMonAsyncReport));
                                ScriptOps.m_MainForm.p000001.CascadeInternalGPADCAnalogSigMonitoringReport(DeviceMap, ScriptOps.IntGPADCAnalogSigMonAsyncReportParam.StatusFlags, ScriptOps.IntGPADCAnalogSigMonAsyncReportParam.ErrorCode, ScriptOps.IntGPADCAnalogSigMonAsyncReportParam.f00000c, ScriptOps.IntGPADCAnalogSigMonAsyncReportParam.f00000d, ScriptOps.IntGPADCAnalogSigMonAsyncReportParam.TimeStamp);
                                string str89 = string.Format("Internal GPADC Analog Signals monitoring async event received!", new object[0]);
                                string str90 = string.Format("[DeviceId-{0}] ", DeviceMap);
                                if (!GlobalRef.g_DisableReportLogging)
                                {
                                    GlobalRef.LuaWrapper.PrintWarning(str90 + str89);
                                }
                                GlobalRef.f0002d4 = 1U;
                                return;
                            }
                        case 4141:
                            {
                                ScriptOps.WriteReportToXML(DeviceMap, data, 28, "PLLControlVoltageSignalMonitoring");
                                if (GlobalRef.g_NumOfRadarDevicesDetected == 1U)
                                {
                                    ScriptOps.PLLControlVoltageAsyncReportParam = (PLLControlVoltageAsyncReport)Marshal.PtrToStructure(data, typeof(PLLControlVoltageAsyncReport));
                                    ScriptOps.m_MainForm.p000001.CascadePLLControlVoltageMonitoringReport(DeviceMap, ScriptOps.PLLControlVoltageAsyncReportParam.StatusFlags, ScriptOps.PLLControlVoltageAsyncReportParam.ErrorCode, ScriptOps.PLLControlVoltageAsyncReportParam.f00000e, ScriptOps.PLLControlVoltageAsyncReportParam.SynthVCO1VctlMaxFreq, ScriptOps.PLLControlVoltageAsyncReportParam.SynthVCO1VctlMinFreq, ScriptOps.PLLControlVoltageAsyncReportParam.SynthVCO1Slope, ScriptOps.PLLControlVoltageAsyncReportParam.SynthVCO2VctlMaxFreq, ScriptOps.PLLControlVoltageAsyncReportParam.SynthVCO2VctlMinFreq, ScriptOps.PLLControlVoltageAsyncReportParam.SynthVCO2Slope, ScriptOps.PLLControlVoltageAsyncReportParam.TimeStamp);
                                    string msg64 = string.Format("PLL control voltage monitoring async event received!", new object[0]);
                                    if (!GlobalRef.g_DisableReportLogging)
                                    {
                                        GlobalRef.LuaWrapper.PrintWarning(msg64);
                                    }
                                    GlobalRef.g_PLLCtlVolSigMon = 1U;
                                    return;
                                }
                                ScriptOps.PLLControlVoltageAsyncReportParam = (PLLControlVoltageAsyncReport)Marshal.PtrToStructure(data, typeof(PLLControlVoltageAsyncReport));
                                ScriptOps.m_MainForm.p000001.CascadePLLControlVoltageMonitoringReport(DeviceMap, ScriptOps.PLLControlVoltageAsyncReportParam.StatusFlags, ScriptOps.PLLControlVoltageAsyncReportParam.ErrorCode, ScriptOps.PLLControlVoltageAsyncReportParam.f00000e, ScriptOps.PLLControlVoltageAsyncReportParam.SynthVCO1VctlMaxFreq, ScriptOps.PLLControlVoltageAsyncReportParam.SynthVCO1VctlMinFreq, ScriptOps.PLLControlVoltageAsyncReportParam.SynthVCO1Slope, ScriptOps.PLLControlVoltageAsyncReportParam.SynthVCO2VctlMaxFreq, ScriptOps.PLLControlVoltageAsyncReportParam.SynthVCO2VctlMinFreq, ScriptOps.PLLControlVoltageAsyncReportParam.SynthVCO2Slope, ScriptOps.PLLControlVoltageAsyncReportParam.TimeStamp);
                                string str91 = string.Format("PLL control voltage monitoring async event received!", new object[0]);
                                string str92 = string.Format("[DeviceId-{0}] ", DeviceMap);
                                if (!GlobalRef.g_DisableReportLogging)
                                {
                                    GlobalRef.LuaWrapper.PrintWarning(str92 + str91);
                                }
                                GlobalRef.g_PLLCtlVolSigMon = 1U;
                                return;
                            }
                        case 4142:
                            {
                                ScriptOps.WriteReportToXML(DeviceMap, data, 28, "DualClockComparatorMonitoring");
                                if (GlobalRef.g_NumOfRadarDevicesDetected == 1U)
                                {
                                    ScriptOps.DCCMonAsyncReportParam = (DCCMonAsyncReport)Marshal.PtrToStructure(data, typeof(DCCMonAsyncReport));
                                    ScriptOps.m_MainForm.p000001.CascadeDualClockComparatorMonitoringReport(DeviceMap, ScriptOps.DCCMonAsyncReportParam.StatusFlags, ScriptOps.DCCMonAsyncReportParam.ErrorCode, ScriptOps.DCCMonAsyncReportParam.FreqMeasClock0, ScriptOps.DCCMonAsyncReportParam.FreqMeasClock1, ScriptOps.DCCMonAsyncReportParam.FreqMeasClock2, ScriptOps.DCCMonAsyncReportParam.FreqMeasClock3, ScriptOps.DCCMonAsyncReportParam.FreqMeasClock4, ScriptOps.DCCMonAsyncReportParam.FreqMeasClock5, ScriptOps.DCCMonAsyncReportParam.TimeStamp);
                                    string msg65 = string.Format("Dual clock Comparator monitoring async event received!", new object[0]);
                                    if (!GlobalRef.g_DisableReportLogging)
                                    {
                                        GlobalRef.LuaWrapper.PrintWarning(msg65);
                                    }
                                    GlobalRef.g_DCCMon = 1U;
                                    return;
                                }
                                ScriptOps.DCCMonAsyncReportParam = (DCCMonAsyncReport)Marshal.PtrToStructure(data, typeof(DCCMonAsyncReport));
                                ScriptOps.m_MainForm.p000001.CascadeDualClockComparatorMonitoringReport(DeviceMap, ScriptOps.DCCMonAsyncReportParam.StatusFlags, ScriptOps.DCCMonAsyncReportParam.ErrorCode, ScriptOps.DCCMonAsyncReportParam.FreqMeasClock0, ScriptOps.DCCMonAsyncReportParam.FreqMeasClock1, ScriptOps.DCCMonAsyncReportParam.FreqMeasClock2, ScriptOps.DCCMonAsyncReportParam.FreqMeasClock3, ScriptOps.DCCMonAsyncReportParam.FreqMeasClock4, ScriptOps.DCCMonAsyncReportParam.FreqMeasClock5, ScriptOps.DCCMonAsyncReportParam.TimeStamp);
                                string str93 = string.Format("Dual clock Comparator monitoring async event received!", new object[0]);
                                string str94 = string.Format("[DeviceId-{0}] ", DeviceMap);
                                if (!GlobalRef.g_DisableReportLogging)
                                {
                                    GlobalRef.LuaWrapper.PrintWarning(str94 + str93);
                                }
                                GlobalRef.g_DCCMon = 1U;
                                return;
                            }
                        case 4145:
                            {
                                ScriptOps.WriteReportToXML(DeviceMap, data, 20, "RxMixerInputPowerMonitoring");
                                if (GlobalRef.g_NumOfRadarDevicesDetected == 1U)
                                {
                                    ScriptOps.RxMixerInputPowerMonAsyncReportParam = (RxMixerInputPowerMonAsyncReport)Marshal.PtrToStructure(data, typeof(RxMixerInputPowerMonAsyncReport));
                                    ScriptOps.m_MainForm.AnalogMon2Config.CascadeRxMixerInputPowerMonitoringReport(DeviceMap, ScriptOps.RxMixerInputPowerMonAsyncReportParam.StatusFlags, ScriptOps.RxMixerInputPowerMonAsyncReportParam.ErrorCode, ScriptOps.RxMixerInputPowerMonAsyncReportParam.ProfileId, ScriptOps.RxMixerInputPowerMonAsyncReportParam.RxMixerInVolVal, ScriptOps.RxMixerInputPowerMonAsyncReportParam.TimeStamp);
                                    string msg66 = string.Format("Rx mixer input power monitoring async event received!", new object[0]);
                                    if (!GlobalRef.g_DisableReportLogging)
                                    {
                                        GlobalRef.LuaWrapper.PrintWarning(msg66);
                                    }
                                    GlobalRef.g_RxMixPowerMon = 1U;
                                    return;
                                }
                                ScriptOps.RxMixerInputPowerMonAsyncReportParam = (RxMixerInputPowerMonAsyncReport)Marshal.PtrToStructure(data, typeof(RxMixerInputPowerMonAsyncReport));
                                ScriptOps.m_MainForm.AnalogMon2Config.CascadeRxMixerInputPowerMonitoringReport(DeviceMap, ScriptOps.RxMixerInputPowerMonAsyncReportParam.StatusFlags, ScriptOps.RxMixerInputPowerMonAsyncReportParam.ErrorCode, ScriptOps.RxMixerInputPowerMonAsyncReportParam.ProfileId, ScriptOps.RxMixerInputPowerMonAsyncReportParam.RxMixerInVolVal, ScriptOps.RxMixerInputPowerMonAsyncReportParam.TimeStamp);
                                string str95 = string.Format("Rx mixer input power monitoring async event received!", new object[0]);
                                string str96 = string.Format("[DeviceId-{0}] ", DeviceMap);
                                if (!GlobalRef.g_DisableReportLogging)
                                {
                                    GlobalRef.LuaWrapper.PrintWarning(str96 + str95);
                                }
                                GlobalRef.g_RxMixPowerMon = 1U;
                                return;
                            }
                        default:
                            switch (sbId)
                            {
                                case 20480:
                                    {
                                        ScriptOps.WriteReportToXML(DeviceMap, data, 20, "MSSPowerUpDoneAsyncReport");
                                        if (GlobalRef.g_NumOfRadarDevicesDetected == 1U)
                                        {
                                            ScriptOps.MSSPowerUpDoneAsyncReportParam = (MSSPowerUpDoneAsyncReport)Marshal.PtrToStructure(data, typeof(MSSPowerUpDoneAsyncReport));
                                            string msg67 = string.Format("MSS power up done async event received!", new object[0]);
                                            GlobalRef.LuaWrapper.PrintWarning(msg67);
                                            ScriptOps.asyncEvent.mssPowerUpDone = 1U;
                                            return;
                                        }
                                        ScriptOps.MSSPowerUpDoneAsyncReportParam = (MSSPowerUpDoneAsyncReport)Marshal.PtrToStructure(data, typeof(MSSPowerUpDoneAsyncReport));
                                        string str97 = string.Format("[DeviceId-{0}] ", DeviceMap);
                                        string str98 = string.Format("MSS power up done async event received!", new object[0]);
                                        GlobalRef.LuaWrapper.PrintWarning(str97 + str98);
                                        ScriptOps.asyncEvent.mssPowerUpDone = (ScriptOps.asyncEvent.mssPowerUpDone | 1U << (int)DeviceMap);
                                        return;
                                    }
                                case 20481:
                                    {
                                        ScriptOps.WriteReportToXML(DeviceMap, data, 16, "BSSRFPowerUpDoneAsyncReport");
                                        if (GlobalRef.g_NumOfRadarDevicesDetected == 1U)
                                        {
                                            ScriptOps.BSSRFPowerUpDoneAsyncReportParam = (struct034)Marshal.PtrToStructure(data, typeof(struct034));
                                            ScriptOps.m_MainForm.MonitoringConfig.m00003e(DeviceMap, ScriptOps.BSSRFPowerUpDoneAsyncReportParam.RFPowerupBistStatusFlagsStatus, ScriptOps.BSSRFPowerUpDoneAsyncReportParam.PowerUpTime, ScriptOps.BSSRFPowerUpDoneAsyncReportParam.Reserved, ScriptOps.BSSRFPowerUpDoneAsyncReportParam.Reserved2);
                                            string msg68 = string.Format("BSS power up done async event received!", new object[0]);
                                            GlobalRef.LuaWrapper.PrintWarning(msg68);
                                            ScriptOps.asyncEvent.bssPowerUpDone = 1U;
                                            return;
                                        }
                                        ScriptOps.BSSRFPowerUpDoneAsyncReportParam = (struct034)Marshal.PtrToStructure(data, typeof(struct034));
                                        ScriptOps.m_MainForm.MonitoringConfig.m00003e(DeviceMap, ScriptOps.BSSRFPowerUpDoneAsyncReportParam.RFPowerupBistStatusFlagsStatus, ScriptOps.BSSRFPowerUpDoneAsyncReportParam.PowerUpTime, ScriptOps.BSSRFPowerUpDoneAsyncReportParam.Reserved, ScriptOps.BSSRFPowerUpDoneAsyncReportParam.Reserved2);
                                        string str99 = string.Format("BSS power up done async event received!", new object[0]);
                                        string str100 = string.Format("[DeviceId-{0}] ", DeviceMap);
                                        GlobalRef.LuaWrapper.PrintWarning(str100 + str99);
                                        ScriptOps.asyncEvent.bssPowerUpDone = (ScriptOps.asyncEvent.bssPowerUpDone | 1U << (int)DeviceMap);
                                        return;
                                    }
                                case 20482:
                                    {
                                        ScriptOps.WriteReportToXML(DeviceMap, data, 32, "MSSCPUFaultStatus");
                                        if (GlobalRef.g_NumOfRadarDevicesDetected == 1U)
                                        {
                                            ScriptOps.f0002de = (struct015)Marshal.PtrToStructure(data, typeof(struct015));
                                            ScriptOps.m_MainForm.MonitoringConfig.m000040(DeviceMap, ScriptOps.f0002de.FaultType, ScriptOps.f0002de.LineNum, ScriptOps.f0002de.FaultLR, ScriptOps.f0002de.FaultPrevLR, ScriptOps.f0002de.FaultSPSR, ScriptOps.f0002de.FaultSP, ScriptOps.f0002de.FaultCauseAddress, ScriptOps.f0002de.FaultErrorStatus, ScriptOps.f0002de.FaultErrorSource, ScriptOps.f0002de.FaultAXIErrorType, ScriptOps.f0002de.FaultAccessType, ScriptOps.f0002de.FaultRecoveryType);
                                            string msg69 = string.Format("MSS CPU Fault error status Async event recieved(0x{0:X}, 0x{1:X},0x{2:X}, 0x{3:X},0x{4:X}, 0x{5:X},0x{6:X}, 0x{7:X},0x{8:X}, 0x{9:X},0x{10:X}, 0x{11:X})", new object[]
                                            {
                                    ScriptOps.f0002de.FaultType,
                                    ScriptOps.f0002de.LineNum,
                                    ScriptOps.f0002de.FaultLR,
                                    ScriptOps.f0002de.FaultPrevLR,
                                    ScriptOps.f0002de.FaultSPSR,
                                    ScriptOps.f0002de.FaultSP,
                                    ScriptOps.f0002de.FaultCauseAddress,
                                    ScriptOps.f0002de.FaultErrorStatus,
                                    ScriptOps.f0002de.FaultErrorSource,
                                    ScriptOps.f0002de.FaultAXIErrorType,
                                    ScriptOps.f0002de.FaultAccessType,
                                    ScriptOps.f0002de.FaultRecoveryType
                                            });
                                            GlobalRef.LuaWrapper.PrintWarning(msg69);
                                            return;
                                        }
                                        ScriptOps.f0002de = (struct015)Marshal.PtrToStructure(data, typeof(struct015));
                                        ScriptOps.m_MainForm.MonitoringConfig.m000040(DeviceMap, ScriptOps.f0002de.FaultType, ScriptOps.f0002de.LineNum, ScriptOps.f0002de.FaultLR, ScriptOps.f0002de.FaultPrevLR, ScriptOps.f0002de.FaultSPSR, ScriptOps.f0002de.FaultSP, ScriptOps.f0002de.FaultCauseAddress, ScriptOps.f0002de.FaultErrorStatus, ScriptOps.f0002de.FaultErrorSource, ScriptOps.f0002de.FaultAXIErrorType, ScriptOps.f0002de.FaultAccessType, ScriptOps.f0002de.FaultRecoveryType);
                                        string str101 = string.Format("MSS CPU Fault error status Async event recieved(0x{0:X}, 0x{1:X},0x{2:X}, 0x{3:X},0x{4:X}, 0x{5:X},0x{6:X}, 0x{7:X},0x{8:X}, 0x{9:X},0x{10:X}, 0x{11:X})", new object[]
                                        {
                                ScriptOps.f0002de.FaultType,
                                ScriptOps.f0002de.LineNum,
                                ScriptOps.f0002de.FaultLR,
                                ScriptOps.f0002de.FaultPrevLR,
                                ScriptOps.f0002de.FaultSPSR,
                                ScriptOps.f0002de.FaultSP,
                                ScriptOps.f0002de.FaultCauseAddress,
                                ScriptOps.f0002de.FaultErrorStatus,
                                ScriptOps.f0002de.FaultErrorSource,
                                ScriptOps.f0002de.FaultAXIErrorType,
                                ScriptOps.f0002de.FaultAccessType,
                                ScriptOps.f0002de.FaultRecoveryType
                                        });
                                        string str102 = string.Format("[DeviceId-{0}] ", DeviceMap);
                                        GlobalRef.LuaWrapper.PrintWarning(str102 + str101);
                                        return;
                                    }
                                case 20483:
                                    {
                                        ScriptOps.WriteReportToXML(DeviceMap, data, 8, "MSSESMFaultStatus");
                                        if (GlobalRef.g_NumOfRadarDevicesDetected == 1U)
                                        {
                                            ScriptOps.f0002df = (struct016)Marshal.PtrToStructure(data, typeof(struct016));
                                            ScriptOps.m_MainForm.MonitoringConfig.m000041(DeviceMap, ScriptOps.f0002df.ESMGroup1Error, ScriptOps.f0002df.ESMGroup2Error);
                                            string msg70 = string.Format("MSS ESM Fault error status Async event recieved(0x{0:X}, 0x{1:X})", new object[]
                                            {
                                    ScriptOps.f0002df.ESMGroup1Error,
                                    ScriptOps.f0002df.ESMGroup2Error
                                            });
                                            GlobalRef.LuaWrapper.PrintWarning(msg70);
                                            return;
                                        }
                                        ScriptOps.f0002df = (struct016)Marshal.PtrToStructure(data, typeof(struct016));
                                        ScriptOps.m_MainForm.MonitoringConfig.m000041(DeviceMap, ScriptOps.f0002df.ESMGroup1Error, ScriptOps.f0002df.ESMGroup2Error);
                                        string str103 = string.Format("MSS ESM Fault error status Async event recieved(0x{0:X}, 0x{1:X})", new object[]
                                        {
                                ScriptOps.f0002df.ESMGroup1Error,
                                ScriptOps.f0002df.ESMGroup2Error
                                        });
                                        string str104 = string.Format("[DeviceId-{0}] ", DeviceMap);
                                        GlobalRef.LuaWrapper.PrintWarning(str104 + str103);
                                        return;
                                    }
                                case 20485:
                                    {
                                        ScriptOps.WriteReportToXML(DeviceMap, data, 20, "MSSBootErrorStatus");
                                        if (GlobalRef.g_NumOfRadarDevicesDetected == 1U)
                                        {
                                            ScriptOps.MSSBootErrorStatusReportParam = (MSSBootErrorStatusReport)Marshal.PtrToStructure(data, typeof(MSSBootErrorStatusReport));
                                            ScriptOps.m_MainForm.MonitoringConfig.MSSBootErrorAsyncReportData(DeviceMap, ScriptOps.MSSBootErrorStatusReportParam.ErrorStatus);
                                            string msg71 = string.Format("MSS Boot Error status Async event recieved(0x{0:X})", new object[]
                                            {
                                    ScriptOps.MSSBootErrorStatusReportParam.ErrorStatus
                                            });
                                            GlobalRef.LuaWrapper.PrintWarning(msg71);
                                            return;
                                        }
                                        ScriptOps.MSSBootErrorStatusReportParam = (MSSBootErrorStatusReport)Marshal.PtrToStructure(data, typeof(MSSBootErrorStatusReport));
                                        ScriptOps.m_MainForm.MonitoringConfig.MSSBootErrorAsyncReportData(DeviceMap, ScriptOps.MSSBootErrorStatusReportParam.ErrorStatus);
                                        string str105 = string.Format("MSS Boot Error status Async event recieved(0x{0:X})", new object[]
                                        {
                                ScriptOps.MSSBootErrorStatusReportParam.ErrorStatus
                                        });
                                        string str106 = string.Format("[DeviceId-{0}] ", DeviceMap);
                                        GlobalRef.LuaWrapper.PrintWarning(str106 + str105);
                                        return;
                                    }
                                case 20486:
                                    {
                                        ScriptOps.WriteReportToXML(DeviceMap, data, 12, "MSSLatentFaultMonitoring");
                                        if (GlobalRef.g_NumOfRadarDevicesDetected == 1U)
                                        {
                                            ScriptOps.MSSLatentFaultMonReportParam = (MSSLatentFaultMonReport)Marshal.PtrToStructure(data, typeof(MSSLatentFaultMonReport));
                                            ScriptOps.m_MainForm.MSSMonitoring.MSSLatentFaultMonitoringReport(DeviceMap, ScriptOps.MSSLatentFaultMonReportParam.TestStatusFlag1, ScriptOps.MSSLatentFaultMonReportParam.TestStatusFlag2, ScriptOps.MSSLatentFaultMonReportParam.Reserved);
                                            string msg72 = string.Format("MSS latent fault monitoring async event received!", new object[0]);
                                            GlobalRef.LuaWrapper.PrintWarning(msg72);
                                            GlobalRef.g_MSSLatentFaultMon = 1U;
                                            return;
                                        }
                                        ScriptOps.MSSLatentFaultMonReportParam = (MSSLatentFaultMonReport)Marshal.PtrToStructure(data, typeof(MSSLatentFaultMonReport));
                                        ScriptOps.m_MainForm.MSSMonitoring.MSSLatentFaultMonitoringReport(DeviceMap, ScriptOps.MSSLatentFaultMonReportParam.TestStatusFlag1, ScriptOps.MSSLatentFaultMonReportParam.TestStatusFlag2, ScriptOps.MSSLatentFaultMonReportParam.Reserved);
                                        string str107 = string.Format("MSS latent fault monitoring async event received!", new object[0]);
                                        string str108 = string.Format("[DeviceId-{0}] ", DeviceMap);
                                        GlobalRef.LuaWrapper.PrintWarning(str108 + str107);
                                        GlobalRef.g_MSSLatentFaultMon = 1U;
                                        return;
                                    }
                                case 20487:
                                    {
                                        ScriptOps.WriteReportToXML(DeviceMap, data, 8, "MSSPeriodicTestMonitoring");
                                        if (GlobalRef.g_NumOfRadarDevicesDetected == 1U)
                                        {
                                            ScriptOps.MSSPeriodicTestMonReportParam = (MSSPeriodicTestMonReport)Marshal.PtrToStructure(data, typeof(MSSPeriodicTestMonReport));
                                            ScriptOps.m_MainForm.MSSMonitoring.MSSPeriodicTestMonitoringReport(DeviceMap, ScriptOps.MSSPeriodicTestMonReportParam.TestStatusFlag);
                                            string msg73 = string.Format("MSS periodic test monitoring async event received!", new object[0]);
                                            GlobalRef.LuaWrapper.PrintWarning(msg73);
                                            GlobalRef.g_MSSPeriodicTestMon = 1U;
                                            return;
                                        }
                                        ScriptOps.MSSPeriodicTestMonReportParam = (MSSPeriodicTestMonReport)Marshal.PtrToStructure(data, typeof(MSSPeriodicTestMonReport));
                                        ScriptOps.m_MainForm.MSSMonitoring.MSSPeriodicTestMonitoringReport(DeviceMap, ScriptOps.MSSPeriodicTestMonReportParam.TestStatusFlag);
                                        string str109 = string.Format("MSS periodic test monitoring async event received!", new object[0]);
                                        string str110 = string.Format("[DeviceId-{0}] ", DeviceMap);
                                        GlobalRef.LuaWrapper.PrintWarning(str110 + str109);
                                        GlobalRef.g_MSSPeriodicTestMon = 1U;
                                        return;
                                    }
                                case 20488:
                                    {
                                        ScriptOps.WriteReportToXML(DeviceMap, data, 8, "MSSRFErrorStatus");
                                        if (GlobalRef.g_NumOfRadarDevicesDetected == 1U)
                                        {
                                            ScriptOps.MSSRFErrorStatusReportParam = (struct018)Marshal.PtrToStructure(data, typeof(struct018));
                                            ScriptOps.m_MainForm.MonitoringConfig.MSSRFErrorAsyncReportData(DeviceMap, ScriptOps.MSSRFErrorStatusReportParam.ErrorStatusFlag);
                                            string msg74 = string.Format("MSS RF Error status Async event recieved(0x{0:X})", new object[]
                                            {
                                    ScriptOps.MSSRFErrorStatusReportParam.ErrorStatusFlag
                                            });
                                            GlobalRef.LuaWrapper.PrintWarning(msg74);
                                            return;
                                        }
                                        ScriptOps.MSSRFErrorStatusReportParam = (struct018)Marshal.PtrToStructure(data, typeof(struct018));
                                        ScriptOps.m_MainForm.MonitoringConfig.MSSRFErrorAsyncReportData(DeviceMap, ScriptOps.MSSRFErrorStatusReportParam.ErrorStatusFlag);
                                        string str111 = string.Format("MSS RF Error status Async event recieved(0x{0:X})", new object[]
                                        {
                                ScriptOps.MSSRFErrorStatusReportParam.ErrorStatusFlag
                                        });
                                        string str112 = string.Format("[DeviceId-{0}] ", DeviceMap);
                                        GlobalRef.LuaWrapper.PrintWarning(str112 + str111);
                                        return;
                                    }
                                case 20489:
                                    {
                                        ScriptOps.WriteReportToXML(DeviceMap, data, 12, "MSSVolMonErrorStatusReport");
                                        if (GlobalRef.g_NumOfRadarDevicesDetected == 1U)
                                        {
                                            ScriptOps.MSSVolMonErrorStatusReportParam = (MSSVolMonErrorStatusReport)Marshal.PtrToStructure(data, typeof(MSSVolMonErrorStatusReport));
                                            string msg75 = string.Format("MSS Voltage monitoring error status Async event recieved(0x{0:X}, 0x{1:X})", new object[]
                                            {
                                    ScriptOps.MSSVolMonErrorStatusReportParam.FaultType,
                                    ScriptOps.MSSVolMonErrorStatusReportParam.FaultSig
                                            });
                                            GlobalRef.LuaWrapper.PrintWarning(msg75);
                                            return;
                                        }
                                        ScriptOps.MSSVolMonErrorStatusReportParam = (MSSVolMonErrorStatusReport)Marshal.PtrToStructure(data, typeof(MSSVolMonErrorStatusReport));
                                        string str113 = string.Format("MSS Voltage monitoring error status Async event recieved(0x{0:X}, 0x{1:X})", new object[]
                                        {
                                ScriptOps.MSSVolMonErrorStatusReportParam.FaultType,
                                ScriptOps.MSSVolMonErrorStatusReportParam.FaultSig
                                        });
                                        string str114 = string.Format("[DeviceId-{0}] ", DeviceMap);
                                        GlobalRef.LuaWrapper.PrintWarning(str114 + str113);
                                        return;
                                    }
                                case 20490:
                                    {
                                        if (GlobalRef.g_NumOfRadarDevicesDetected == 1U)
                                        {
                                            ScriptOps.MSSGetDataBlockStatusReportParam = (MSSGetDataBlockStatusReport)Marshal.PtrToStructure(data, typeof(MSSGetDataBlockStatusReport));
                                            ScriptOps.m_MainForm.m_RegOpeTab.MSSGetDataBlockAsyncReportData(DeviceMap, ScriptOps.MSSGetDataBlockStatusReportParam.RemaingChunks, ScriptOps.MSSGetDataBlockStatusReportParam.BlockData0, ScriptOps.MSSGetDataBlockStatusReportParam.BlockData1, ScriptOps.MSSGetDataBlockStatusReportParam.BlockData2, ScriptOps.MSSGetDataBlockStatusReportParam.BlockData3, ScriptOps.MSSGetDataBlockStatusReportParam.BlockData4, ScriptOps.MSSGetDataBlockStatusReportParam.BlockData5, ScriptOps.MSSGetDataBlockStatusReportParam.BlockData6, ScriptOps.MSSGetDataBlockStatusReportParam.BlockData7, ScriptOps.MSSGetDataBlockStatusReportParam.BlockData8, ScriptOps.MSSGetDataBlockStatusReportParam.BlockData9, ScriptOps.MSSGetDataBlockStatusReportParam.BlockData10, ScriptOps.MSSGetDataBlockStatusReportParam.BlockData11, ScriptOps.MSSGetDataBlockStatusReportParam.BlockData12, ScriptOps.MSSGetDataBlockStatusReportParam.BlockData13, ScriptOps.MSSGetDataBlockStatusReportParam.BlockData14, ScriptOps.MSSGetDataBlockStatusReportParam.BlockData15, ScriptOps.MSSGetDataBlockStatusReportParam.BlockData16, ScriptOps.MSSGetDataBlockStatusReportParam.BlockData17, ScriptOps.MSSGetDataBlockStatusReportParam.BlockData18, ScriptOps.MSSGetDataBlockStatusReportParam.BlockData19, ScriptOps.MSSGetDataBlockStatusReportParam.BlockData20, ScriptOps.MSSGetDataBlockStatusReportParam.BlockData21, ScriptOps.MSSGetDataBlockStatusReportParam.BlockData22, ScriptOps.MSSGetDataBlockStatusReportParam.BlockData23, ScriptOps.MSSGetDataBlockStatusReportParam.BlockData24, ScriptOps.MSSGetDataBlockStatusReportParam.BlockData25, ScriptOps.MSSGetDataBlockStatusReportParam.BlockData26, ScriptOps.MSSGetDataBlockStatusReportParam.BlockData27, ScriptOps.MSSGetDataBlockStatusReportParam.BlockData28, ScriptOps.MSSGetDataBlockStatusReportParam.BlockData29, ScriptOps.MSSGetDataBlockStatusReportParam.BlockData30, ScriptOps.MSSGetDataBlockStatusReportParam.BlockData31, ScriptOps.MSSGetDataBlockStatusReportParam.BlockData32, ScriptOps.MSSGetDataBlockStatusReportParam.BlockData33, ScriptOps.MSSGetDataBlockStatusReportParam.BlockData34, ScriptOps.MSSGetDataBlockStatusReportParam.BlockData35, ScriptOps.MSSGetDataBlockStatusReportParam.BlockData36, ScriptOps.MSSGetDataBlockStatusReportParam.BlockData37, ScriptOps.MSSGetDataBlockStatusReportParam.BlockData38, ScriptOps.MSSGetDataBlockStatusReportParam.BlockData39, ScriptOps.MSSGetDataBlockStatusReportParam.BlockData40, ScriptOps.MSSGetDataBlockStatusReportParam.BlockData41, ScriptOps.MSSGetDataBlockStatusReportParam.BlockData42, ScriptOps.MSSGetDataBlockStatusReportParam.BlockData43, ScriptOps.MSSGetDataBlockStatusReportParam.BlockData44, ScriptOps.MSSGetDataBlockStatusReportParam.BlockData45, ScriptOps.MSSGetDataBlockStatusReportParam.BlockData46, ScriptOps.MSSGetDataBlockStatusReportParam.BlockData47, ScriptOps.MSSGetDataBlockStatusReportParam.BlockData48, ScriptOps.MSSGetDataBlockStatusReportParam.BlockData49, ScriptOps.MSSGetDataBlockStatusReportParam.BlockData50, ScriptOps.MSSGetDataBlockStatusReportParam.BlockData51, ScriptOps.MSSGetDataBlockStatusReportParam.BlockData52, ScriptOps.MSSGetDataBlockStatusReportParam.BlockData53, ScriptOps.MSSGetDataBlockStatusReportParam.BlockData54);
                                            string msg76 = string.Format("MSS get data block read async event received!", new object[0]);
                                            GlobalRef.LuaWrapper.PrintWarning(msg76);
                                            return;
                                        }
                                        ScriptOps.MSSGetDataBlockStatusReportParam = (MSSGetDataBlockStatusReport)Marshal.PtrToStructure(data, typeof(MSSGetDataBlockStatusReport));
                                        ScriptOps.m_MainForm.m_RegOpeTab.MSSGetDataBlockAsyncReportData(DeviceMap, ScriptOps.MSSGetDataBlockStatusReportParam.RemaingChunks, ScriptOps.MSSGetDataBlockStatusReportParam.BlockData0, ScriptOps.MSSGetDataBlockStatusReportParam.BlockData1, ScriptOps.MSSGetDataBlockStatusReportParam.BlockData2, ScriptOps.MSSGetDataBlockStatusReportParam.BlockData3, ScriptOps.MSSGetDataBlockStatusReportParam.BlockData4, ScriptOps.MSSGetDataBlockStatusReportParam.BlockData5, ScriptOps.MSSGetDataBlockStatusReportParam.BlockData6, ScriptOps.MSSGetDataBlockStatusReportParam.BlockData7, ScriptOps.MSSGetDataBlockStatusReportParam.BlockData8, ScriptOps.MSSGetDataBlockStatusReportParam.BlockData9, ScriptOps.MSSGetDataBlockStatusReportParam.BlockData10, ScriptOps.MSSGetDataBlockStatusReportParam.BlockData11, ScriptOps.MSSGetDataBlockStatusReportParam.BlockData12, ScriptOps.MSSGetDataBlockStatusReportParam.BlockData13, ScriptOps.MSSGetDataBlockStatusReportParam.BlockData14, ScriptOps.MSSGetDataBlockStatusReportParam.BlockData15, ScriptOps.MSSGetDataBlockStatusReportParam.BlockData16, ScriptOps.MSSGetDataBlockStatusReportParam.BlockData17, ScriptOps.MSSGetDataBlockStatusReportParam.BlockData18, ScriptOps.MSSGetDataBlockStatusReportParam.BlockData19, ScriptOps.MSSGetDataBlockStatusReportParam.BlockData20, ScriptOps.MSSGetDataBlockStatusReportParam.BlockData21, ScriptOps.MSSGetDataBlockStatusReportParam.BlockData22, ScriptOps.MSSGetDataBlockStatusReportParam.BlockData23, ScriptOps.MSSGetDataBlockStatusReportParam.BlockData24, ScriptOps.MSSGetDataBlockStatusReportParam.BlockData25, ScriptOps.MSSGetDataBlockStatusReportParam.BlockData26, ScriptOps.MSSGetDataBlockStatusReportParam.BlockData27, ScriptOps.MSSGetDataBlockStatusReportParam.BlockData28, ScriptOps.MSSGetDataBlockStatusReportParam.BlockData29, ScriptOps.MSSGetDataBlockStatusReportParam.BlockData30, ScriptOps.MSSGetDataBlockStatusReportParam.BlockData31, ScriptOps.MSSGetDataBlockStatusReportParam.BlockData32, ScriptOps.MSSGetDataBlockStatusReportParam.BlockData33, ScriptOps.MSSGetDataBlockStatusReportParam.BlockData34, ScriptOps.MSSGetDataBlockStatusReportParam.BlockData35, ScriptOps.MSSGetDataBlockStatusReportParam.BlockData36, ScriptOps.MSSGetDataBlockStatusReportParam.BlockData37, ScriptOps.MSSGetDataBlockStatusReportParam.BlockData38, ScriptOps.MSSGetDataBlockStatusReportParam.BlockData39, ScriptOps.MSSGetDataBlockStatusReportParam.BlockData40, ScriptOps.MSSGetDataBlockStatusReportParam.BlockData41, ScriptOps.MSSGetDataBlockStatusReportParam.BlockData42, ScriptOps.MSSGetDataBlockStatusReportParam.BlockData43, ScriptOps.MSSGetDataBlockStatusReportParam.BlockData44, ScriptOps.MSSGetDataBlockStatusReportParam.BlockData45, ScriptOps.MSSGetDataBlockStatusReportParam.BlockData46, ScriptOps.MSSGetDataBlockStatusReportParam.BlockData47, ScriptOps.MSSGetDataBlockStatusReportParam.BlockData48, ScriptOps.MSSGetDataBlockStatusReportParam.BlockData49, ScriptOps.MSSGetDataBlockStatusReportParam.BlockData50, ScriptOps.MSSGetDataBlockStatusReportParam.BlockData51, ScriptOps.MSSGetDataBlockStatusReportParam.BlockData52, ScriptOps.MSSGetDataBlockStatusReportParam.BlockData53, ScriptOps.MSSGetDataBlockStatusReportParam.BlockData54);
                                        string str115 = string.Format("MSS get data block read async event received!", new object[0]);
                                        string str116 = string.Format("[DeviceId-{0}] ", DeviceMap);
                                        GlobalRef.LuaWrapper.PrintWarning(str116 + str115);
                                        return;
                                    }
                            }
                            break;
                    }
                    if (GlobalRef.g_NumOfRadarDevicesDetected == 1U)
                    {
                        string msg77 = string.Format("Unknown Async event recieved({0})", new object[]
                        {
                            sbId
                        });
                        GlobalRef.LuaWrapper.PrintWarning(msg77);
                        return;
                    }
                    string str117 = string.Format("[DeviceId-{0}] ", DeviceMap);
                    string str118 = string.Format("Unknown Async event recieved({0})", new object[]
                    {
                        sbId
                    });
                    GlobalRef.LuaWrapper.PrintWarning(str117 + str118);
                }
                else if (GlobalRef.g_NumOfRadarDevicesDetected == 1U)
                {
                    ScriptOps.RxSaturationDetedtorAsyncReportParam = (RxSaturationDetedtorAsyncReport)Marshal.PtrToStructure(data, typeof(RxSaturationDetedtorAsyncReport));
                    ScriptOps.m_MainForm.AnalogMon2Config.CascadeRXSaturationDetectorMonitoringReport(DeviceMap, ScriptOps.RxSaturationDetedtorAsyncReportParam.StatusFlags, ScriptOps.RxSaturationDetedtorAsyncReportParam.ErrorCode, ScriptOps.RxSaturationDetedtorAsyncReportParam.TimeStamp);
                    string msg78 = string.Format("Rx saturation detector monitoring async event received!", new object[0]);
                    if (!GlobalRef.g_DisableReportLogging)
                    {
                        GlobalRef.LuaWrapper.PrintWarning(msg78);
                        return;
                    }
                }
                else
                {
                    ScriptOps.RxSaturationDetedtorAsyncReportParam = (RxSaturationDetedtorAsyncReport)Marshal.PtrToStructure(data, typeof(RxSaturationDetedtorAsyncReport));
                    ScriptOps.m_MainForm.AnalogMon2Config.CascadeRXSaturationDetectorMonitoringReport(DeviceMap, ScriptOps.RxSaturationDetedtorAsyncReportParam.StatusFlags, ScriptOps.RxSaturationDetedtorAsyncReportParam.ErrorCode, ScriptOps.RxSaturationDetedtorAsyncReportParam.TimeStamp);
                    string str119 = string.Format("Rx saturation detector monitoring async event received!", new object[0]);
                    string str120 = string.Format("[DeviceId-{0}] ", DeviceMap);
                    if (!GlobalRef.g_DisableReportLogging)
                    {
                        GlobalRef.LuaWrapper.PrintWarning(str120 + str119);
                        return;
                    }
                }
            }

            internal void m0000aa(ushort devSelection, ushort u16CmdCode, ushort u16ACKCode, int u16Status, IntPtr data)
            {
                switch (u16CmdCode)
                {
                    case 129:
                        {
                            string full_command = string.Format("Device {0} : CAPTURE_RESPONSE_ACK Async event recieved() with status {1} ", new object[]
                            {
                        devSelection,
                        u16Status
                            });
                            GlobalRef.GuiManager.RecordLog(0, full_command);
                            if (u16ACKCode == 16)
                            {
                                ScriptOps.asyncEvent.TDACaptureCardConnect = 1U;
                            }
                            if (devSelection != 32)
                            {
                                return;
                            }
                            if (u16ACKCode == 24)
                            {
                                GlobalRef.f0002c6 = 1U;
                                return;
                            }
                            if (u16ACKCode == 49)
                            {
                                GlobalRef.f0002c7 = 1U;
                                return;
                            }
                            if (u16ACKCode == 50)
                            {
                                GlobalRef.f0002c8 = 1U;
                                GlobalRef.g_StopCmdInProgress = false;
                                return;
                            }
                            if (u16ACKCode == 53)
                            {
                                GlobalRef.f0002c9 = 1U;
                                return;
                            }
                            if (u16ACKCode == 54)
                            {
                                GlobalRef.f0002cb = 1U;
                                return;
                            }
                            if (u16ACKCode == 55)
                            {
                                GlobalRef.f0002cc = 1U;
                                return;
                            }
                            if (u16ACKCode == 56)
                            {
                                GlobalRef.f0002ca = 1U;
                                return;
                            }
                            if (u16ACKCode == 57)
                            {
                                GlobalRef.f0002cd = 1U;
                                return;
                            }
                            return;
                        }
                    case 130:
                        {
                            string full_command2 = string.Format("Device {0} : CAPTURE_RESPONSE_NACK Async event recieved() with status {1} ", new object[]
                            {
                        devSelection,
                        u16Status
                            });
                            GlobalRef.GuiManager.RecordLog(0, full_command2);
                            return;
                        }
                    case 131:
                        {
                            byte[] array = new byte[100];
                            if (data != IntPtr.Zero)
                            {
                                Marshal.Copy(data, array, 0, array.Length);
                            }
                            string full_command3 = string.Format("Device {0} : CAPTURE_RESPONSE_VERSION_INFO Async event recieved() with status {1}. TDA Version : {2} ", new object[]
                            {
                        devSelection,
                        u16Status,
                        Encoding.UTF8.GetString(array)
                            });
                            GlobalRef.GuiManager.RecordLog(0, full_command3);
                            GlobalRef.g_TDAVersion = Encoding.UTF8.GetString(array);
                            ScriptOps.m_MainForm.TDAxxCaptureCard.SetTDAVersion(GlobalRef.g_TDAVersion);
                            return;
                        }
                    case 132:
                        {
                            byte[] array2 = new byte[8];
                            if (data != IntPtr.Zero)
                            {
                                Marshal.Copy(data, array2, 0, array2.Length);
                            }
                            string full_command4 = string.Format("Device {0} : CAPTURE_RESPONSE_CONFIG_INFO Async event recieved() with status {1}. Width : {2} and Height : {3}", new object[]
                            {
                        devSelection,
                        u16Status,
                        BitConverter.ToUInt32(array2, 0),
                        BitConverter.ToUInt32(array2, 4)
                            });
                            GlobalRef.GuiManager.RecordLog(0, full_command4);
                            ScriptOps.m_MainForm.ChirpConfigTab.SetWidthAndHeight(BitConverter.ToUInt32(array2, 0), BitConverter.ToUInt32(array2, 4));
                            return;
                        }
                    case 133:
                        {
                            string full_command5 = string.Format("Device {0} : CAPTURE_RESPONSE_TRACE_DATA Async event recieved() with status {1}", new object[]
                            {
                        devSelection,
                        u16Status
                            });
                            GlobalRef.GuiManager.RecordLog(0, full_command5);
                            return;
                        }
                    case 134:
                        {
                            byte[] array3 = new byte[12];
                            if (data != IntPtr.Zero)
                            {
                                Marshal.Copy(data, array3, 0, array3.Length);
                            }
                            string full_command6 = string.Format("Device {0} : CAPTURE_RESPONSE_GPIO_DATA Async event recieved() with status {1}.", new object[]
                            {
                        devSelection,
                        u16Status
                            });
                            GlobalRef.GuiManager.RecordLog(0, full_command6);
                            ScriptOps.m_MainForm.RegOpeTab.m00005d(BitConverter.ToInt32(array3, 8));
                            GlobalRef.f0002ce = 1U;
                            return;
                        }
                    case 138:
                        {
                            byte[] array4 = new byte[4];
                            if (data != IntPtr.Zero)
                            {
                                Marshal.Copy(data, array4, 0, array4.Length);
                            }
                            string full_command7 = string.Format("Device {0} : SENSOR_RESPONSE_SOP_INFO Async event recieved() with status {1}. SOP Mode : {2} ", new object[]
                            {
                        devSelection,
                        u16Status,
                        BitConverter.ToUInt32(array4, 0)
                            });
                            GlobalRef.GuiManager.RecordLog(0, full_command7);
                            return;
                        }
                    case 141:
                        {
                            string msg = string.Format("CAPTURE_RESPONSE_NETWORK_ERROR Async event recieved! Connection error! Please reboot the TDA board", new object[0]);
                            GlobalRef.LuaWrapper.PrintError(msg);
                            ScriptOps.m_MainForm.TDAxxCaptureCard.SetSopCmd();
                            GlobalRef.g_TDACaptureCardConnectStatus = false;
                            ScriptOps.m_MainForm.TDAxxCaptureCard.UpdateTDACaptureCardDeviceConnectionConfigDataToGUI(false);
                            GlobalRef.LuaWrapper.PrintLuaWarning("TDA Capture Card Status : DISCONNECTED!");
                            ScriptOps.m_MainForm.TDAxxCaptureCard.SetTDAVersion("-");
                            for (int i = 0; i < 4; i++)
                            {
                                GlobalRef.g_TDAsetWidthHeightDone[i] = false;
                            }
                            ScriptOps.m_MainForm.ChirpConfigTab.SetWidthAndHeight(0U, 0U);
                            ScriptOps.m_MainForm.ChirpConfigTab.UpdateDeviceFramingStatus(1U, 0U);
                            return;
                        }
                }
                string full_command8 = string.Format("Async event recieved with invalid cmd code", new object[0]);
                GlobalRef.GuiManager.RecordLog(0, full_command8);
            }

            internal void m0000ab(ushort u16CmdCode, ushort u16Status)
            {
                if (u16CmdCode == 10)
                {
                    switch (u16Status)
                    {
                        case 0:
                            {
                                string full_command = string.Format("STS_NO_LVDS_DATA Async event recieved({0})", new object[]
                                {
                            u16Status
                                });
                                GlobalRef.GuiManager.RecordLog(0, full_command);
                                return;
                            }
                        case 1:
                            {
                                string full_command2 = string.Format("STS_NO_HEADER Async event recieved({0})", new object[]
                                {
                            u16Status
                                });
                                GlobalRef.GuiManager.RecordLog(0, full_command2);
                                return;
                            }
                        case 2:
                            {
                                string full_command3 = string.Format("STS_EEPROM_FAILURE Async event recieved({0})", new object[]
                                {
                            u16Status
                                });
                                GlobalRef.GuiManager.RecordLog(0, full_command3);
                                return;
                            }
                        case 3:
                            {
                                string full_command4 = string.Format("STS_SD_CARD_DETECTED Async event recieved({0})", new object[]
                                {
                            u16Status
                                });
                                GlobalRef.GuiManager.RecordLog(0, full_command4);
                                return;
                            }
                        case 4:
                            {
                                string full_command5 = string.Format("STS_SD_CARD_REMOVED Async event recieved({0})", new object[]
                                {
                            u16Status
                                });
                                GlobalRef.GuiManager.RecordLog(0, full_command5);
                                return;
                            }
                        case 5:
                            {
                                string full_command6 = string.Format("STS_SD_CARD_FULL Async event recieved({0})", new object[]
                                {
                            u16Status
                                });
                                GlobalRef.GuiManager.RecordLog(0, full_command6);
                                return;
                            }
                        case 6:
                            {
                                string full_command7 = string.Format("STS_MODE_CONFIG_FAILURE Async event recieved({0})", new object[]
                                {
                            u16Status
                                });
                                GlobalRef.GuiManager.RecordLog(0, full_command7);
                                return;
                            }
                        case 7:
                            {
                                string full_command8 = string.Format("STS_DDR_FULL Async event recieved({0})", new object[]
                                {
                            u16Status
                                });
                                GlobalRef.GuiManager.RecordLog(0, full_command8);
                                return;
                            }
                        case 8:
                            {
                                string full_command9 = string.Format("STS_RECORD_COMPLETED Async event recieved({0})", new object[]
                                {
                            u16Status
                                });
                                GlobalRef.GuiManager.RecordLog(0, full_command9);
                                return;
                            }
                        case 9:
                            {
                                string full_command10 = string.Format("STS_LVDS_BUFFER_FULL Async event recieved({0})", new object[]
                                {
                            u16Status
                                });
                                GlobalRef.GuiManager.RecordLog(0, full_command10);
                                return;
                            }
                        case 10:
                            {
                                string full_command11 = string.Format("STS_PLAYBACK_COMPLETED Async event recieved({0})", new object[]
                                {
                            u16Status
                                });
                                GlobalRef.GuiManager.RecordLog(0, full_command11);
                                return;
                            }
                        case 11:
                            {
                                string full_command12 = string.Format("STS_PLAYBACK_OUT_OF_SEQUENCE Async event recieved({0})", new object[]
                                {
                            u16Status
                                });
                                GlobalRef.GuiManager.RecordLog(0, full_command12);
                                return;
                            }
                        default:
                            {
                                string full_command13 = string.Format("Syste Error cmd code :  Async event recieved({0})", new object[]
                                {
                            u16Status
                                });
                                GlobalRef.GuiManager.RecordLog(0, full_command13);
                                return;
                            }
                    }
                }
                else
                {
                    switch (u16CmdCode)
                    {
                        case 1:
                            {
                                string full_command14 = string.Format("RESET_FPGA_CMD_CODE Async event recieved({0})", new object[]
                                {
                            u16CmdCode
                                });
                                GlobalRef.GuiManager.RecordLog(0, full_command14);
                                return;
                            }
                        case 2:
                            {
                                string full_command15 = string.Format("RESET_AR_DEV_CMD_CODE Async event recieved({0})", new object[]
                                {
                            u16CmdCode
                                });
                                GlobalRef.GuiManager.RecordLog(0, full_command15);
                                return;
                            }
                        case 3:
                            {
                                string full_command16 = string.Format("CONFIG_FPGA_GEN_CMD_CODE Async event recieved({0})", new object[]
                                {
                            u16CmdCode
                                });
                                GlobalRef.GuiManager.RecordLog(0, full_command16);
                                return;
                            }
                        case 4:
                            {
                                string full_command17 = string.Format("CONFIG_EEPROM_CMD_CODE Async event recieved({0})", new object[]
                                {
                            u16CmdCode
                                });
                                GlobalRef.GuiManager.RecordLog(0, full_command17);
                                return;
                            }
                        case 5:
                            {
                                string full_command18 = string.Format("RECORD_START_CMD_CODE Async event recieved({0})", new object[]
                                {
                            u16CmdCode
                                });
                                GlobalRef.GuiManager.RecordLog(0, full_command18);
                                return;
                            }
                        case 6:
                            {
                                string full_command19 = string.Format("RECORD_STOP_CMD_CODE Async event recieved({0})", new object[]
                                {
                            u16CmdCode
                                });
                                GlobalRef.GuiManager.RecordLog(0, full_command19);
                                return;
                            }
                        case 7:
                            {
                                string full_command20 = string.Format("PLAYBACK_START_CMD_CODE Async event recieved({0})", new object[]
                                {
                            u16CmdCode
                                });
                                GlobalRef.GuiManager.RecordLog(0, full_command20);
                                return;
                            }
                        case 8:
                            {
                                string full_command21 = string.Format("PLAYBACK_STOP_CMD_CODE event recieved({0})", new object[]
                                {
                            u16CmdCode
                                });
                                GlobalRef.GuiManager.RecordLog(0, full_command21);
                                return;
                            }
                        case 9:
                            {
                                string full_command22 = string.Format("SYSTEM_CONNECT_CMD_CODE Async event recieved({0})", new object[]
                                {
                            u16CmdCode
                                });
                                GlobalRef.GuiManager.RecordLog(0, full_command22);
                                ScriptOps.asyncEvent.CaptureCardConnect = 1U;
                                return;
                            }
                        case 10:
                            {
                                string full_command23 = string.Format("SYSTEM_ERROR_CMD_CODE Async event recieved({0})", new object[]
                                {
                            u16CmdCode
                                });
                                GlobalRef.GuiManager.RecordLog(0, full_command23);
                                return;
                            }
                        case 11:
                            {
                                string full_command24 = string.Format("CONFIG_PACKET_DATA_CMD_CODE Async event recieved({0})", new object[]
                                {
                            u16CmdCode
                                });
                                GlobalRef.GuiManager.RecordLog(0, full_command24);
                                return;
                            }
                        case 12:
                            {
                                string full_command25 = string.Format("CONFIG_DATA_MODE_AR_DEV_CMD_CODE Async event recieved({0})", new object[]
                                {
                            u16CmdCode
                                });
                                GlobalRef.GuiManager.RecordLog(0, full_command25);
                                return;
                            }
                        case 13:
                            {
                                string full_command26 = string.Format("INIT_FPGA_PLAYBACK_CMD_CODE event recieved({0})", new object[]
                                {
                            u16CmdCode
                                });
                                GlobalRef.GuiManager.RecordLog(0, full_command26);
                                return;
                            }
                        case 14:
                            {
                                string full_command27 = string.Format("READ_FPGA_VERSION_CMD_CODE event recieved({0})", new object[]
                                {
                            u16CmdCode
                                });
                                GlobalRef.GuiManager.RecordLog(0, full_command27);
                                string text = Convert.ToString((int)(u16Status & 127));
                                string text2 = Convert.ToString(u16Status >> 7 & 127);
                                string text3 = string.Empty;
                                if ((u16Status >> 14 & 1) == 1)
                                {
                                    text3 = "Play Bit File";
                                }
                                else
                                {
                                    text3 = "Record Bit File";
                                }
                                string text4 = string.Concat(new string[]
                                {
                            text,
                            ".",
                            text2,
                            " ",
                            text3
                                });
                                if (GlobalRef.lua_method == 0)
                                {
                                    ScriptOps.m_MainForm.m_RFDataCaptureCard.m00006e(text4);
                                }
                                GlobalRef.f0002d3 = text4;
                                return;
                            }
                        default:
                            switch (u16CmdCode)
                            {
                                case 193:
                                    {
                                        string full_command28 = string.Format("INVALID_RESP_PKT_ERROR_CODE Async event recieved({0})", new object[]
                                        {
                                u16CmdCode
                                        });
                                        GlobalRef.GuiManager.RecordLog(0, full_command28);
                                        return;
                                    }
                                case 194:
                                    {
                                        string full_command29 = string.Format("RECORD_FILE_CREATION_ERROR_CODE Async event recieved({0})", new object[]
                                        {
                                u16CmdCode
                                        });
                                        GlobalRef.GuiManager.RecordLog(0, full_command29);
                                        return;
                                    }
                                case 195:
                                    {
                                        string full_command30 = string.Format("RECORD_PKT_OUT_OF_SEQ_ERROR_CODE Async event recieved({0})", new object[]
                                        {
                                u16CmdCode
                                        });
                                        GlobalRef.GuiManager.RecordLog(0, full_command30);
                                        return;
                                    }
                                case 196:
                                    {
                                        string full_command31 = string.Format("RECORD_IS_IN_PROGRESS_CODE Async event recieved({0})", new object[]
                                        {
                                u16CmdCode
                                        });
                                        GlobalRef.GuiManager.RecordLog(0, full_command31);
                                        return;
                                    }
                                case 197:
                                    {
                                        string full_command32 = string.Format("GUI_PLAYBACK_COMPLETED_CODE Async event recieved({0})", new object[]
                                        {
                                u16CmdCode
                                        });
                                        GlobalRef.GuiManager.RecordLog(0, full_command32);
                                        return;
                                    }
                                case 198:
                                    {
                                        string full_command33 = string.Format("PLAYBACK_FILE_OPEN_ERROR_CODE Async event recieved({0})", new object[]
                                        {
                                u16CmdCode
                                        });
                                        GlobalRef.GuiManager.RecordLog(0, full_command33);
                                        return;
                                    }
                                case 199:
                                    {
                                        string full_command34 = string.Format("PLAYBACK_UDP_WRITE_ERR Async event recieved({0})", new object[]
                                        {
                                u16CmdCode
                                        });
                                        GlobalRef.GuiManager.RecordLog(0, full_command34);
                                        return;
                                    }
                                case 200:
                                    {
                                        string full_command35 = string.Format("PLAYBACK_IS_IN_PROGRESS_CODE Async event recieved({0})", new object[]
                                        {
                                u16CmdCode
                                        });
                                        GlobalRef.GuiManager.RecordLog(0, full_command35);
                                        return;
                                    }
                                default:
                                    {
                                        string full_command36 = string.Format("RF data capture related Async event recieved({0})", new object[]
                                        {
                                u16CmdCode
                                        });
                                        GlobalRef.GuiManager.RecordLog(0, full_command36);
                                        return;
                                    }
                            }
                            break;
                    }
                }
            }

            public static readonly ScriptOps.c0002ac f00019e = new ScriptOps.c0002ac();

            public static Func<int, bool> f0002ec;

            public static ScriptOps.SPIAsyncEventCallFunc f0002ed;

            public static ScriptOps.TDAEthernetProcolAsyncEventCallFunc f0002ee;

            public static ScriptOps.EthernetProcolAsyncEventCallFunc f0002ef;
        }

        [CompilerGenerated]
        private static class c0002ad
        {
            public static CallSite<Func<CallSite, object, string, object>> f0001ac;

            public static CallSite<Func<CallSite, object, string, object>> f0001ad;

            public static CallSite<Func<CallSite, object, string, string, object>> f0001ae;

            public static CallSite<Func<CallSite, object, string, object>> f0001af;

            public static CallSite<Func<CallSite, object, string, object>> f0001b0;

            public static CallSite<Func<CallSite, object, string, string, object>> f0001b1;

            public static CallSite<Func<CallSite, object, string, object>> f0001b2;

            public static CallSite<Func<CallSite, object, string, object>> f0001b3;

            public static CallSite<Func<CallSite, object, string, byte, object>> f0001b4;

            public static CallSite<Func<CallSite, Type, object, Newtonsoft.Json.Formatting, object>> f0001b5;

            public static CallSite<Func<CallSite, object, string>> f0001b6;
        }

        [CompilerGenerated]
        private static class c0002ae
        {
            public static CallSite<Func<CallSite, object, string, object>> f0001ac;

            public static CallSite<Func<CallSite, object, string, object>> f0001ad;

            public static CallSite<Func<CallSite, object, string, string, object>> f0001ae;

            public static CallSite<Func<CallSite, object, string, object>> f0001af;

            public static CallSite<Func<CallSite, object, string, object>> f0001b0;

            public static CallSite<Func<CallSite, object, string, string, object>> f0001b1;

            public static CallSite<Func<CallSite, object, string, object>> f0001b2;

            public static CallSite<Func<CallSite, object, string, object>> f0001b3;

            public static CallSite<Func<CallSite, object, string, string, object>> f0001b4;

            public static CallSite<Func<CallSite, object, string, object>> f0001b5;

            public static CallSite<Func<CallSite, object, string, object>> f0001b6;

            public static CallSite<Func<CallSite, object, string, int, object>> f0002e0;

            public static CallSite<Func<CallSite, object, string, object>> f0002e1;

            public static CallSite<Func<CallSite, object, string, object>> f0002e2;

            public static CallSite<Func<CallSite, object, string, int, object>> f0002e3;

            public static CallSite<Func<CallSite, Type, object, Newtonsoft.Json.Formatting, object>> f0002e4;

            public static CallSite<Func<CallSite, object, string>> f0002e5;
        }

        [CompilerGenerated]
        private static class c0002af
        {
            public static CallSite<Func<CallSite, object, string, object>> f0001ac;

            public static CallSite<Func<CallSite, object, string, object>> f0001ad;

            public static CallSite<Func<CallSite, object, string, string, object>> f0001ae;

            public static CallSite<Func<CallSite, object, string, object>> f0001af;

            public static CallSite<Func<CallSite, object, string, object>> f0001b0;

            public static CallSite<Func<CallSite, object, string, string, object>> f0001b1;

            public static CallSite<Func<CallSite, object, string, object>> f0001b2;

            public static CallSite<Func<CallSite, object, string, object>> f0001b3;

            public static CallSite<Func<CallSite, object, string, string, object>> f0001b4;

            public static CallSite<Func<CallSite, object, string, object>> f0001b5;

            public static CallSite<Func<CallSite, object, string, object>> f0001b6;

            public static CallSite<Func<CallSite, object, string, int, object>> f0002e0;

            public static CallSite<Func<CallSite, object, string, object>> f0002e1;

            public static CallSite<Func<CallSite, object, string, object>> f0002e2;

            public static CallSite<Func<CallSite, object, string, int, object>> f0002e3;

            public static CallSite<Func<CallSite, Type, object, Newtonsoft.Json.Formatting, object>> f0002e4;

            public static CallSite<Func<CallSite, object, string>> f0002e5;
        }

        [CompilerGenerated]
        private static class c0002b0
        {
            public static CallSite<Func<CallSite, object, string, object>> f0001ac;

            public static CallSite<Func<CallSite, object, string, object>> f0001ad;

            public static CallSite<Func<CallSite, object, string, string, object>> f0001ae;

            public static CallSite<Func<CallSite, object, string, object>> f0001af;

            public static CallSite<Func<CallSite, object, string, object>> f0001b0;

            public static CallSite<Func<CallSite, object, string, int, object>> f0001b1;

            public static CallSite<Func<CallSite, object, string, object>> f0001b2;

            public static CallSite<Func<CallSite, object, string, object>> f0001b3;

            public static CallSite<Func<CallSite, object, string, int, object>> f0001b4;

            public static CallSite<Func<CallSite, Type, object, Newtonsoft.Json.Formatting, object>> f0001b5;

            public static CallSite<Func<CallSite, object, string>> f0001b6;
        }

        [CompilerGenerated]
        private static class c0002b1
        {
            public static CallSite<Func<CallSite, object, string, object>> f0001ac;

            public static CallSite<Func<CallSite, object, string, object>> f0001ad;

            public static CallSite<Func<CallSite, object, string, string, object>> f0001ae;

            public static CallSite<Func<CallSite, object, string, object>> f0001af;

            public static CallSite<Func<CallSite, object, string, object>> f0001b0;

            public static CallSite<Func<CallSite, object, string, int, object>> f0001b1;

            public static CallSite<Func<CallSite, object, string, object>> f0001b2;

            public static CallSite<Func<CallSite, object, string, object>> f0001b3;

            public static CallSite<Func<CallSite, object, string, int, object>> f0001b4;

            public static CallSite<Func<CallSite, Type, object, Newtonsoft.Json.Formatting, object>> f0001b5;

            public static CallSite<Func<CallSite, object, string>> f0001b6;
        }

        [CompilerGenerated]
        private static class c0002b2
        {
            public static CallSite<Func<CallSite, object, string, object>> f0001ac;

            public static CallSite<Func<CallSite, object, string, string, object>> f0001ad;

            public static CallSite<Func<CallSite, object, string, object>> f0001ae;

            public static CallSite<Func<CallSite, object, string, string, object>> f0001af;

            public static CallSite<Func<CallSite, object, string, object>> f0001b0;

            public static CallSite<Func<CallSite, object, string, string, object>> f0001b1;

            public static CallSite<Func<CallSite, object, string, object>> f0001b2;

            public static CallSite<Func<CallSite, object, string, uint, object>> f0001b3;

            public static CallSite<Func<CallSite, object, string, object>> f0001b4;

            public static CallSite<Func<CallSite, object, string, uint, object>> f0001b5;

            public static CallSite<Func<CallSite, Type, object, Newtonsoft.Json.Formatting, object>> f0001b6;

            public static CallSite<Func<CallSite, object, string>> f0002e0;
        }

        [CompilerGenerated]
        private static class c0002b3
        {
            public static CallSite<Func<CallSite, object, string, object>> f0001ac;

            public static CallSite<Func<CallSite, object, string, string, object>> f0001ad;

            public static CallSite<Func<CallSite, object, string, object>> f0001ae;

            public static CallSite<Func<CallSite, object, string, string, object>> f0001af;

            public static CallSite<Func<CallSite, object, string, object>> f0001b0;

            public static CallSite<Func<CallSite, object, string, string, object>> f0001b1;

            public static CallSite<Func<CallSite, object, string, object>> f0001b2;

            public static CallSite<Func<CallSite, object, string, uint, object>> f0001b3;

            public static CallSite<Func<CallSite, object, string, object>> f0001b4;

            public static CallSite<Func<CallSite, object, string, uint, object>> f0001b5;

            public static CallSite<Func<CallSite, Type, object, Newtonsoft.Json.Formatting, object>> f0001b6;

            public static CallSite<Func<CallSite, object, string>> f0002e0;
        }

        [CompilerGenerated]
        private static class c0002b4
        {
            public static CallSite<Func<CallSite, object, string, object>> f0001ac;

            public static CallSite<Func<CallSite, object, string, object>> f0001ad;

            public static CallSite<Func<CallSite, object, string, string, object>> f0001ae;

            public static CallSite<Func<CallSite, object, string, object>> f0001af;

            public static CallSite<Func<CallSite, object, string, object>> f0001b0;

            public static CallSite<Func<CallSite, object, string, string, object>> f0001b1;

            public static CallSite<Func<CallSite, object, string, object>> f0001b2;

            public static CallSite<Func<CallSite, object, string, object>> f0001b3;

            public static CallSite<Func<CallSite, object, string, byte, object>> f0001b4;

            public static CallSite<Func<CallSite, Type, object, Newtonsoft.Json.Formatting, object>> f0001b5;

            public static CallSite<Func<CallSite, object, string>> f0001b6;
        }

        [CompilerGenerated]
        private static class c0002b5
        {
            public static CallSite<Func<CallSite, object, string, object>> f0001ac;

            public static CallSite<Func<CallSite, object, string, object>> f0001ad;

            public static CallSite<Func<CallSite, object, string, string, object>> f0001ae;

            public static CallSite<Func<CallSite, object, string, object>> f0001af;

            public static CallSite<Func<CallSite, object, string, object>> f0001b0;

            public static CallSite<Func<CallSite, object, string, string, object>> f0001b1;

            public static CallSite<Func<CallSite, object, string, object>> f0001b2;

            public static CallSite<Func<CallSite, object, string, object>> f0001b3;

            public static CallSite<Func<CallSite, object, string, byte, object>> f0001b4;

            public static CallSite<Func<CallSite, Type, object, Newtonsoft.Json.Formatting, object>> f0001b5;

            public static CallSite<Func<CallSite, object, string>> f0001b6;
        }

        [CompilerGenerated]
        private sealed class c0002b6
        {
            internal void m0000ac(object sender, FileTransferProgressEventArgs p1)
            {
                GlobalRef.g_winSCPfilename = p1.FileName;
                GlobalRef.g_winSCPprogress = (p1.FileProgress * 100.0).ToString();
                double num = (double)p1.CPS / 1048576.0;
                GlobalRef.g_winSCPtransferSpeed = (Math.Truncate(100.0 * num) / 100.0).ToString();
                if (GlobalRef.GuiManager.MainTsForm.ChirpConfigTab.DownlaodFilesAbort)
                {
                    p1.Cancel = true;
                    session.Abort();
                    GlobalRef.LuaWrapper.PrintError("WinSCP session Aborted!");
                    return;
                }
            }

            public Session session;
        }
    }
}
